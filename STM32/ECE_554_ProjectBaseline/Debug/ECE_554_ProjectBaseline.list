
ECE_554_ProjectBaseline.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019c14  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003738  08019ee4  08019ee4  00029ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d61c  0801d61c  0002d61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d624  0801d624  0002d624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801d628  0801d628  0002d628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0801d62c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000077ec  240000a0  0801d6cc  000300a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400788c  0801d6cc  0003788c  2**0
                  ALLOC
  9 .lwip_sec     000018d0  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00071874  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000b052  00000000  00000000  000a1942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c88  00000000  00000000  000ac998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002a40  00000000  00000000  000af620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000483c3  00000000  00000000  000b2060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00047235  00000000  00000000  000fa423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018050e  00000000  00000000  00141658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002c1b66  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c220  00000000  00000000  002c1bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000a0 	.word	0x240000a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08019ecc 	.word	0x08019ecc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a4 	.word	0x240000a4
 800030c:	08019ecc 	.word	0x08019ecc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af02      	add	r7, sp, #8
 80006be:	4604      	mov	r4, r0
 80006c0:	4608      	mov	r0, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	461a      	mov	r2, r3
 80006c6:	4623      	mov	r3, r4
 80006c8:	80fb      	strh	r3, [r7, #6]
 80006ca:	4603      	mov	r3, r0
 80006cc:	80bb      	strh	r3, [r7, #4]
 80006ce:	460b      	mov	r3, r1
 80006d0:	807b      	strh	r3, [r7, #2]
 80006d2:	4613      	mov	r3, r2
 80006d4:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80006d6:	88f8      	ldrh	r0, [r7, #6]
 80006d8:	88b9      	ldrh	r1, [r7, #4]
 80006da:	887a      	ldrh	r2, [r7, #2]
 80006dc:	883c      	ldrh	r4, [r7, #0]
 80006de:	8b3b      	ldrh	r3, [r7, #24]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4623      	mov	r3, r4
 80006e4:	f000 faa6 	bl	8000c34 <ST7735_FillRectangle>
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <fillScreen+0x2c>)
 80006fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <fillScreen+0x30>)
 8000702:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	460b      	mov	r3, r1
 800070c:	2100      	movs	r1, #0
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ffd2 	bl	80006b8 <fillRect>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	24004280 	.word	0x24004280
 8000720:	24004284 	.word	0x24004284

08000724 <print_to_serial>:
#include "Globals.h"


/* Function prototypes -----------------------------------------------*/
void print_to_serial(char *myString)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b09c      	sub	sp, #112	; 0x70
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	strcpy((char*)buffer, myString);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	4618      	mov	r0, r3
 8000734:	f018 fd93 	bl	801925e <strcpy>
	HAL_UART_Transmit(&huart3, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fde7 	bl	8000310 <strlen>
 8000742:	4603      	mov	r3, r0
 8000744:	b29a      	uxth	r2, r3
 8000746:	f107 010c 	add.w	r1, r7, #12
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <print_to_serial+0x38>)
 8000750:	f008 fb2e 	bl	8008db0 <HAL_UART_Transmit>

}
 8000754:	bf00      	nop
 8000756:	3770      	adds	r7, #112	; 0x70
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	24004510 	.word	0x24004510

08000760 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2101      	movs	r1, #1
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <ST7735_Select+0x14>)
 800076a:	f004 ffcf 	bl	800570c <HAL_GPIO_WritePin>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	58020800 	.word	0x58020800

08000778 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <ST7735_Unselect+0x14>)
 8000782:	f004 ffc3 	bl	800570c <HAL_GPIO_WritePin>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	58020800 	.word	0x58020800

08000790 <ST7735_Reset>:

void ST7735_Reset()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2108      	movs	r1, #8
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <ST7735_Reset+0x24>)
 800079a:	f004 ffb7 	bl	800570c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800079e:	2005      	movs	r0, #5
 80007a0:	f002 f842 	bl	8002828 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2108      	movs	r1, #8
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <ST7735_Reset+0x24>)
 80007aa:	f004 ffaf 	bl	800570c <HAL_GPIO_WritePin>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58020800 	.word	0x58020800

080007b8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2108      	movs	r1, #8
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <ST7735_WriteCommand+0x2c>)
 80007c8:	f004 ffa0 	bl	800570c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007cc:	1df9      	adds	r1, r7, #7
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	2201      	movs	r2, #1
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <ST7735_WriteCommand+0x30>)
 80007d6:	f007 fbbd 	bl	8007f54 <HAL_SPI_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	58020000 	.word	0x58020000
 80007e8:	240043f0 	.word	0x240043f0

080007ec <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2108      	movs	r1, #8
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <ST7735_WriteData+0x2c>)
 80007fc:	f004 ff86 	bl	800570c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b29a      	uxth	r2, r3
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <ST7735_WriteData+0x30>)
 800080c:	f007 fba2 	bl	8007f54 <HAL_SPI_Transmit>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58020000 	.word	0x58020000
 800081c:	240043f0 	.word	0x240043f0

08000820 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000832:	e034      	b.n	800089e <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800083e:	7afb      	ldrb	r3, [r7, #11]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffb9 	bl	80007b8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	607a      	str	r2, [r7, #4]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000850:	7abb      	ldrb	r3, [r7, #10]
 8000852:	b29b      	uxth	r3, r3
 8000854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000858:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800085a:	7abb      	ldrb	r3, [r7, #10]
 800085c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000860:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000862:	7abb      	ldrb	r3, [r7, #10]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d008      	beq.n	800087a <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000868:	7abb      	ldrb	r3, [r7, #10]
 800086a:	4619      	mov	r1, r3
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ffbd 	bl	80007ec <ST7735_WriteData>
            addr += numArgs;
 8000872:	7abb      	ldrb	r3, [r7, #10]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	4413      	add	r3, r2
 8000878:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800087a:	89bb      	ldrh	r3, [r7, #12]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00e      	beq.n	800089e <DisplayInit+0x7e>
            ms = *addr++;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800088a:	89bb      	ldrh	r3, [r7, #12]
 800088c:	2bff      	cmp	r3, #255	; 0xff
 800088e:	d102      	bne.n	8000896 <DisplayInit+0x76>
 8000890:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000894:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000896:	89bb      	ldrh	r3, [r7, #12]
 8000898:	4618      	mov	r0, r3
 800089a:	f001 ffc5 	bl	8002828 <HAL_Delay>
    while(numCommands--) {
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	1e5a      	subs	r2, r3, #1
 80008a2:	73fa      	strb	r2, [r7, #15]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1c5      	bne.n	8000834 <DisplayInit+0x14>
        }
    }
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4604      	mov	r4, r0
 80008bc:	4608      	mov	r0, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	4623      	mov	r3, r4
 80008c4:	71fb      	strb	r3, [r7, #7]
 80008c6:	4603      	mov	r3, r0
 80008c8:	71bb      	strb	r3, [r7, #6]
 80008ca:	460b      	mov	r3, r1
 80008cc:	717b      	strb	r3, [r7, #5]
 80008ce:	4613      	mov	r3, r2
 80008d0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80008d2:	202a      	movs	r0, #42	; 0x2a
 80008d4:	f7ff ff70 	bl	80007b8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80008d8:	2300      	movs	r3, #0
 80008da:	733b      	strb	r3, [r7, #12]
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <ST7735_SetAddressWindow+0x88>)
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4413      	add	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	737b      	strb	r3, [r7, #13]
 80008e8:	2300      	movs	r3, #0
 80008ea:	73bb      	strb	r3, [r7, #14]
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <ST7735_SetAddressWindow+0x88>)
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	797b      	ldrb	r3, [r7, #5]
 80008f2:	4413      	add	r3, r2
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2104      	movs	r1, #4
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff74 	bl	80007ec <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000904:	202b      	movs	r0, #43	; 0x2b
 8000906:	f7ff ff57 	bl	80007b8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <ST7735_SetAddressWindow+0x8c>)
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	4413      	add	r3, r2
 8000912:	b2db      	uxtb	r3, r3
 8000914:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <ST7735_SetAddressWindow+0x8c>)
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	793b      	ldrb	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	b2db      	uxtb	r3, r3
 8000920:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2104      	movs	r1, #4
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff5f 	bl	80007ec <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800092e:	202c      	movs	r0, #44	; 0x2c
 8000930:	f7ff ff42 	bl	80007b8 <ST7735_WriteCommand>
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	24004278 	.word	0x24004278
 8000940:	2400427c 	.word	0x2400427c

08000944 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800094e:	f7ff ff07 	bl	8000760 <ST7735_Select>
    ST7735_Reset();
 8000952:	f7ff ff1d 	bl	8000790 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000956:	480c      	ldr	r0, [pc, #48]	; (8000988 <ST7735_Init+0x44>)
 8000958:	f7ff ff62 	bl	8000820 <DisplayInit>
    DisplayInit(init_cmds2);
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <ST7735_Init+0x48>)
 800095e:	f7ff ff5f 	bl	8000820 <DisplayInit>
    DisplayInit(init_cmds3);
 8000962:	480b      	ldr	r0, [pc, #44]	; (8000990 <ST7735_Init+0x4c>)
 8000964:	f7ff ff5c 	bl	8000820 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <ST7735_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <ST7735_Init+0x54>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f810 	bl	800099c <ST7735_SetRotation>
    ST7735_Unselect();
 800097c:	f7ff fefc 	bl	8000778 <ST7735_Unselect>

}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	0801cb70 	.word	0x0801cb70
 800098c:	0801cba8 	.word	0x0801cba8
 8000990:	0801cbb8 	.word	0x0801cbb8
 8000994:	24004279 	.word	0x24004279
 8000998:	2400427d 	.word	0x2400427d

0800099c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <ST7735_SetRotation+0xe4>)
 80009b4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80009b6:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <ST7735_SetRotation+0xe4>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d84e      	bhi.n	8000a5c <ST7735_SetRotation+0xc0>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <ST7735_SetRotation+0x28>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	080009f7 	.word	0x080009f7
 80009cc:	08000a19 	.word	0x08000a19
 80009d0:	08000a3b 	.word	0x08000a3b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80009d4:	23c0      	movs	r3, #192	; 0xc0
 80009d6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <ST7735_SetRotation+0xe8>)
 80009da:	22a0      	movs	r2, #160	; 0xa0
 80009dc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009de:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <ST7735_SetRotation+0xec>)
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <ST7735_SetRotation+0xf0>)
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <ST7735_SetRotation+0xf4>)
 80009ea:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <ST7735_SetRotation+0xf8>)
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <ST7735_SetRotation+0xfc>)
 80009f2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009f4:	e032      	b.n	8000a5c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009f6:	23a0      	movs	r3, #160	; 0xa0
 80009f8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <ST7735_SetRotation+0xec>)
 80009fc:	22a0      	movs	r2, #160	; 0xa0
 80009fe:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <ST7735_SetRotation+0xe8>)
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <ST7735_SetRotation+0xf0>)
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <ST7735_SetRotation+0xfc>)
 8000a0c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <ST7735_SetRotation+0xf8>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <ST7735_SetRotation+0xf4>)
 8000a14:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a16:	e021      	b.n	8000a5c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <ST7735_SetRotation+0xe8>)
 8000a1e:	22a0      	movs	r2, #160	; 0xa0
 8000a20:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <ST7735_SetRotation+0xec>)
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <ST7735_SetRotation+0xf0>)
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <ST7735_SetRotation+0xf4>)
 8000a2e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <ST7735_SetRotation+0xf8>)
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <ST7735_SetRotation+0xfc>)
 8000a36:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a38:	e010      	b.n	8000a5c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a3a:	2360      	movs	r3, #96	; 0x60
 8000a3c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <ST7735_SetRotation+0xec>)
 8000a40:	22a0      	movs	r2, #160	; 0xa0
 8000a42:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <ST7735_SetRotation+0xe8>)
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <ST7735_SetRotation+0xf0>)
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <ST7735_SetRotation+0xfc>)
 8000a50:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <ST7735_SetRotation+0xf8>)
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <ST7735_SetRotation+0xf4>)
 8000a58:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a5a:	bf00      	nop
  }
  ST7735_Select();
 8000a5c:	f7ff fe80 	bl	8000760 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a60:	2036      	movs	r0, #54	; 0x36
 8000a62:	f7ff fea9 	bl	80007b8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a66:	f107 030f 	add.w	r3, r7, #15
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff febd 	bl	80007ec <ST7735_WriteData>
  ST7735_Unselect();
 8000a72:	f7ff fe81 	bl	8000778 <ST7735_Unselect>
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2400427e 	.word	0x2400427e
 8000a84:	24004284 	.word	0x24004284
 8000a88:	24004280 	.word	0x24004280
 8000a8c:	24004279 	.word	0x24004279
 8000a90:	24004278 	.word	0x24004278
 8000a94:	2400427d 	.word	0x2400427d
 8000a98:	2400427c 	.word	0x2400427c

08000a9c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	b590      	push	{r4, r7, lr}
 8000aa0:	b089      	sub	sp, #36	; 0x24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80fb      	strh	r3, [r7, #6]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	80bb      	strh	r3, [r7, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	b2d8      	uxtb	r0, r3
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	b2d9      	uxtb	r1, r3
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	b2dc      	uxtb	r4, r3
 8000aca:	88bb      	ldrh	r3, [r7, #4]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4622      	mov	r2, r4
 8000adc:	f7ff feea 	bl	80008b4 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	e043      	b.n	8000b6e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	3b20      	subs	r3, #32
 8000aec:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000af0:	fb01 f303 	mul.w	r3, r1, r3
 8000af4:	4619      	mov	r1, r3
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	440b      	add	r3, r1
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	e029      	b.n	8000b5c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00e      	beq.n	8000b36 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000b18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	743b      	strb	r3, [r7, #16]
 8000b22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fe5c 	bl	80007ec <ST7735_WriteData>
 8000b34:	e00f      	b.n	8000b56 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	733b      	strb	r3, [r7, #12]
 8000b42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fe4b 	bl	80007ec <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b60:	461a      	mov	r2, r3
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d3cf      	bcc.n	8000b08 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b72:	461a      	mov	r2, r3
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d3b5      	bcc.n	8000ae6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	3724      	adds	r7, #36	; 0x24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b86:	b002      	add	sp, #8
 8000b88:	4770      	bx	lr
	...

08000b8c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af04      	add	r7, sp, #16
 8000b94:	603a      	str	r2, [r7, #0]
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	4603      	mov	r3, r0
 8000b9a:	80fb      	strh	r3, [r7, #6]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000ba0:	f7ff fdde 	bl	8000760 <ST7735_Select>

    while(*str) {
 8000ba4:	e033      	b.n	8000c0e <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	7d3a      	ldrb	r2, [r7, #20]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <ST7735_WriteString+0xa0>)
 8000bae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	db16      	blt.n	8000be4 <ST7735_WriteString+0x58>
            x = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000bba:	7d7b      	ldrb	r3, [r7, #21]
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000bc4:	88bb      	ldrh	r3, [r7, #4]
 8000bc6:	7d7a      	ldrb	r2, [r7, #21]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <ST7735_WriteString+0xa4>)
 8000bcc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	da21      	bge.n	8000c18 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b20      	cmp	r3, #32
 8000bda:	d103      	bne.n	8000be4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	603b      	str	r3, [r7, #0]
                continue;
 8000be2:	e014      	b.n	8000c0e <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	88b9      	ldrh	r1, [r7, #4]
 8000bea:	88f8      	ldrh	r0, [r7, #6]
 8000bec:	8c3b      	ldrh	r3, [r7, #32]
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	8bbb      	ldrh	r3, [r7, #28]
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f7ff ff4f 	bl	8000a9c <ST7735_WriteChar>
        x += font.width;
 8000bfe:	7d3b      	ldrb	r3, [r7, #20]
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	4413      	add	r3, r2
 8000c06:	80fb      	strh	r3, [r7, #6]
        str++;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1c7      	bne.n	8000ba6 <ST7735_WriteString+0x1a>
 8000c16:	e000      	b.n	8000c1a <ST7735_WriteString+0x8e>
                break;
 8000c18:	bf00      	nop
    }

    ST7735_Unselect();
 8000c1a:	f7ff fdad 	bl	8000778 <ST7735_Unselect>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c28:	b002      	add	sp, #8
 8000c2a:	4770      	bx	lr
 8000c2c:	24004280 	.word	0x24004280
 8000c30:	24004284 	.word	0x24004284

08000c34 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	461a      	mov	r2, r3
 8000c42:	4623      	mov	r3, r4
 8000c44:	80fb      	strh	r3, [r7, #6]
 8000c46:	4603      	mov	r3, r0
 8000c48:	80bb      	strh	r3, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	807b      	strh	r3, [r7, #2]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	4a37      	ldr	r2, [pc, #220]	; (8000d34 <ST7735_FillRectangle+0x100>)
 8000c56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	da66      	bge.n	8000d2c <ST7735_FillRectangle+0xf8>
 8000c5e:	88bb      	ldrh	r3, [r7, #4]
 8000c60:	4a35      	ldr	r2, [pc, #212]	; (8000d38 <ST7735_FillRectangle+0x104>)
 8000c62:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c66:	4293      	cmp	r3, r2
 8000c68:	da60      	bge.n	8000d2c <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000c6a:	88fa      	ldrh	r2, [r7, #6]
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a30      	ldr	r2, [pc, #192]	; (8000d34 <ST7735_FillRectangle+0x100>)
 8000c72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c76:	4293      	cmp	r3, r2
 8000c78:	dd06      	ble.n	8000c88 <ST7735_FillRectangle+0x54>
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <ST7735_FillRectangle+0x100>)
 8000c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000c88:	88ba      	ldrh	r2, [r7, #4]
 8000c8a:	883b      	ldrh	r3, [r7, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a2a      	ldr	r2, [pc, #168]	; (8000d38 <ST7735_FillRectangle+0x104>)
 8000c90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c94:	4293      	cmp	r3, r2
 8000c96:	dd06      	ble.n	8000ca6 <ST7735_FillRectangle+0x72>
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <ST7735_FillRectangle+0x104>)
 8000c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	88bb      	ldrh	r3, [r7, #4]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000ca6:	f7ff fd5b 	bl	8000760 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	b2d8      	uxtb	r0, r3
 8000cae:	88bb      	ldrh	r3, [r7, #4]
 8000cb0:	b2d9      	uxtb	r1, r3
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	b2dc      	uxtb	r4, r3
 8000cc2:	88bb      	ldrh	r3, [r7, #4]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	883b      	ldrh	r3, [r7, #0]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4413      	add	r3, r2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4622      	mov	r2, r4
 8000cd4:	f7ff fdee 	bl	80008b4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000cd8:	8c3b      	ldrh	r3, [r7, #32]
 8000cda:	0a1b      	lsrs	r3, r3, #8
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	733b      	strb	r3, [r7, #12]
 8000ce2:	8c3b      	ldrh	r3, [r7, #32]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2108      	movs	r1, #8
 8000cec:	4813      	ldr	r0, [pc, #76]	; (8000d3c <ST7735_FillRectangle+0x108>)
 8000cee:	f004 fd0d 	bl	800570c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000cf2:	883b      	ldrh	r3, [r7, #0]
 8000cf4:	80bb      	strh	r3, [r7, #4]
 8000cf6:	e013      	b.n	8000d20 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000cf8:	887b      	ldrh	r3, [r7, #2]
 8000cfa:	80fb      	strh	r3, [r7, #6]
 8000cfc:	e00a      	b.n	8000d14 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000cfe:	f107 010c 	add.w	r1, r7, #12
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	2202      	movs	r2, #2
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <ST7735_FillRectangle+0x10c>)
 8000d0a:	f007 f923 	bl	8007f54 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	80fb      	strh	r3, [r7, #6]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f1      	bne.n	8000cfe <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000d1a:	88bb      	ldrh	r3, [r7, #4]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	80bb      	strh	r3, [r7, #4]
 8000d20:	88bb      	ldrh	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1e8      	bne.n	8000cf8 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000d26:	f7ff fd27 	bl	8000778 <ST7735_Unselect>
 8000d2a:	e000      	b.n	8000d2e <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8000d2c:	bf00      	nop
}
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	24004280 	.word	0x24004280
 8000d38:	24004284 	.word	0x24004284
 8000d3c:	58020000 	.word	0x58020000
 8000d40:	240043f0 	.word	0x240043f0

08000d44 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d48:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <MX_FDCAN1_Init+0xc4>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000d66:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000d6c:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d6e:	2202      	movs	r2, #2
 8000d70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d74:	2208      	movs	r2, #8
 8000d76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d7a:	221f      	movs	r2, #31
 8000d7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d80:	2208      	movs	r2, #8
 8000d82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000db6:	2204      	movs	r2, #4
 8000db8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dce:	2204      	movs	r2, #4
 8000dd0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000dec:	2204      	movs	r2, #4
 8000dee:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_FDCAN1_Init+0xc0>)
 8000df2:	f003 fd59 	bl	80048a8 <HAL_FDCAN_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000dfc:	f000 fcc8 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	240042fc 	.word	0x240042fc
 8000e08:	4000a000 	.word	0x4000a000

08000e0c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0b6      	sub	sp, #216	; 0xd8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	22b4      	movs	r2, #180	; 0xb4
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f018 f89e 	bl	8018f6e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <HAL_FDCAN_MspInit+0xe0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d152      	bne.n	8000ee2 <HAL_FDCAN_MspInit+0xd6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000e46:	2319      	movs	r3, #25
 8000e48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 5;
 8000e4e:	2305      	movs	r3, #5
 8000e50:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e56:	23c0      	movs	r3, #192	; 0xc0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000e62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e66:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f005 fc4f 	bl	8006710 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8000e78:	f000 fc8a 	bl	8001790 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <HAL_FDCAN_MspInit+0xe4>)
 8000e7e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e82:	4a1b      	ldr	r2, [pc, #108]	; (8000ef0 <HAL_FDCAN_MspInit+0xe4>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_FDCAN_MspInit+0xe4>)
 8000e8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_FDCAN_MspInit+0xe4>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <HAL_FDCAN_MspInit+0xe4>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_FDCAN_MspInit+0xe4>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ed0:	2309      	movs	r3, #9
 8000ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_FDCAN_MspInit+0xe8>)
 8000ede:	f004 fa6d 	bl	80053bc <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	37d8      	adds	r7, #216	; 0xd8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	4000a000 	.word	0x4000a000
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	58020c00 	.word	0x58020c00

08000ef8 <FDCAN1_MSG_config>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void FDCAN1_MSG_config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	//Prepare CAN data
	myTxData[0] = 0xFF;
 8000efe:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <FDCAN1_MSG_config+0xc0>)
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x00;
 8000f04:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <FDCAN1_MSG_config+0xc0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFF;
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <FDCAN1_MSG_config+0xc0>)
 8000f0c:	22ff      	movs	r2, #255	; 0xff
 8000f0e:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x00;
 8000f10:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <FDCAN1_MSG_config+0xc0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	70da      	strb	r2, [r3, #3]

	myTxData[4] = 0xFF;
 8000f16:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <FDCAN1_MSG_config+0xc0>)
 8000f18:	22ff      	movs	r2, #255	; 0xff
 8000f1a:	711a      	strb	r2, [r3, #4]
	myTxData[5] = 0x00;
 8000f1c:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <FDCAN1_MSG_config+0xc0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	715a      	strb	r2, [r3, #5]
	myTxData[6] = 0xFF;
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <FDCAN1_MSG_config+0xc0>)
 8000f24:	22ff      	movs	r2, #255	; 0xff
 8000f26:	719a      	strb	r2, [r3, #6]
	myTxData[7] = 0x00;
 8000f28:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <FDCAN1_MSG_config+0xc0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	71da      	strb	r2, [r3, #7]

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000f36:	2302      	movs	r3, #2
 8000f38:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x123;
 8000f3e:	f240 1323 	movw	r3, #291	; 0x123
 8000f42:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000f44:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f48:	617b      	str	r3, [r7, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	481b      	ldr	r0, [pc, #108]	; (8000fbc <FDCAN1_MSG_config+0xc4>)
 8000f50:	f003 fe8c 	bl	8004c6c <HAL_FDCAN_ConfigFilter>


	/* Configure global filter to reject all non-matching frames */
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000f54:	2301      	movs	r3, #1
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4817      	ldr	r0, [pc, #92]	; (8000fbc <FDCAN1_MSG_config+0xc4>)
 8000f60:	f003 fefa 	bl	8004d58 <HAL_FDCAN_ConfigGlobalFilter>

	/* Start the FDCAN module */
	HAL_FDCAN_Start(&hfdcan1);
 8000f64:	4815      	ldr	r0, [pc, #84]	; (8000fbc <FDCAN1_MSG_config+0xc4>)
 8000f66:	f003 ff24 	bl	8004db2 <HAL_FDCAN_Start>

	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4813      	ldr	r0, [pc, #76]	; (8000fbc <FDCAN1_MSG_config+0xc4>)
 8000f70:	f003 ffa6 	bl	8004ec0 <HAL_FDCAN_ActivateNotification>

	/* Prepare Tx Header */
	TxHeader.Identifier = 0x322;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <FDCAN1_MSG_config+0xc8>)
 8000f76:	f240 3222 	movw	r2, #802	; 0x322
 8000f7a:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <FDCAN1_MSG_config+0xc8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <FDCAN1_MSG_config+0xc8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <FDCAN1_MSG_config+0xc8>)
 8000f8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f8e:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <FDCAN1_MSG_config+0xc8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <FDCAN1_MSG_config+0xc8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <FDCAN1_MSG_config+0xc8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <FDCAN1_MSG_config+0xc8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <FDCAN1_MSG_config+0xc8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]
}
 8000fae:	bf00      	nop
 8000fb0:	3720      	adds	r7, #32
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	240042f4 	.word	0x240042f4
 8000fbc:	240042fc 	.word	0x240042fc
 8000fc0:	2400439c 	.word	0x2400439c

08000fc4 <Toggle_CAN_Data>:


void Toggle_CAN_Data(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
	if(myTxData[0] == 0x00)
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <Toggle_CAN_Data+0x78>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d118      	bne.n	8001002 <Toggle_CAN_Data+0x3e>
	{
		myTxData[0] = 0xFF;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <Toggle_CAN_Data+0x78>)
 8000fd2:	22ff      	movs	r2, #255	; 0xff
 8000fd4:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0x00;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <Toggle_CAN_Data+0x78>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0xFF;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <Toggle_CAN_Data+0x78>)
 8000fde:	22ff      	movs	r2, #255	; 0xff
 8000fe0:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0x00;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <Toggle_CAN_Data+0x78>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	70da      	strb	r2, [r3, #3]

		myTxData[4] = 0xFF;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <Toggle_CAN_Data+0x78>)
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	711a      	strb	r2, [r3, #4]
		myTxData[5] = 0x00;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <Toggle_CAN_Data+0x78>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	715a      	strb	r2, [r3, #5]
		myTxData[6] = 0xFF;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <Toggle_CAN_Data+0x78>)
 8000ff6:	22ff      	movs	r2, #255	; 0xff
 8000ff8:	719a      	strb	r2, [r3, #6]
		myTxData[7] = 0x00;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <Toggle_CAN_Data+0x78>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	71da      	strb	r2, [r3, #7]
		myTxData[4] = 0x00;
		myTxData[5] = 0xFF;
		myTxData[6] = 0x00;
		myTxData[7] = 0xFF;
	}
}
 8001000:	e017      	b.n	8001032 <Toggle_CAN_Data+0x6e>
		myTxData[0] = 0x00;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <Toggle_CAN_Data+0x78>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0xFF;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <Toggle_CAN_Data+0x78>)
 800100a:	22ff      	movs	r2, #255	; 0xff
 800100c:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0x00;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <Toggle_CAN_Data+0x78>)
 8001010:	2200      	movs	r2, #0
 8001012:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0xFF;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <Toggle_CAN_Data+0x78>)
 8001016:	22ff      	movs	r2, #255	; 0xff
 8001018:	70da      	strb	r2, [r3, #3]
		myTxData[4] = 0x00;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <Toggle_CAN_Data+0x78>)
 800101c:	2200      	movs	r2, #0
 800101e:	711a      	strb	r2, [r3, #4]
		myTxData[5] = 0xFF;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <Toggle_CAN_Data+0x78>)
 8001022:	22ff      	movs	r2, #255	; 0xff
 8001024:	715a      	strb	r2, [r3, #5]
		myTxData[6] = 0x00;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <Toggle_CAN_Data+0x78>)
 8001028:	2200      	movs	r2, #0
 800102a:	719a      	strb	r2, [r3, #6]
		myTxData[7] = 0xFF;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <Toggle_CAN_Data+0x78>)
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	71da      	strb	r2, [r3, #7]
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	240042f4 	.word	0x240042f4

08001040 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <vApplicationGetIdleTaskMemory+0x2c>)
 8001050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <vApplicationGetIdleTaskMemory+0x30>)
 8001056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2280      	movs	r2, #128	; 0x80
 800105c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	240000bc 	.word	0x240000bc
 8001070:	24000170 	.word	0x24000170

08001074 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_FREERTOS_Init+0x58>)
 800107c:	f107 041c 	add.w	r4, r7, #28
 8001080:	461d      	mov	r5, r3
 8001082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001086:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800108a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f009 fe3a 	bl	800ad0e <osThreadCreate>
 800109a:	4603      	mov	r3, r0
 800109c:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <MX_FREERTOS_Init+0x5c>)
 800109e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, Task02_Init, osPriorityNormal, 0, 128);
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_FREERTOS_Init+0x60>)
 80010a2:	463c      	mov	r4, r7
 80010a4:	461d      	mov	r5, r3
 80010a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 80010b2:	463b      	mov	r3, r7
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f009 fe29 	bl	800ad0e <osThreadCreate>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <MX_FREERTOS_Init+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010c2:	bf00      	nop
 80010c4:	3738      	adds	r7, #56	; 0x38
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	08019ef8 	.word	0x08019ef8
 80010d0:	240043ec 	.word	0x240043ec
 80010d4:	08019f14 	.word	0x08019f14
 80010d8:	240043e8 	.word	0x240043e8

080010dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80010e4:	f009 f810 	bl	800a108 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  SM_STATES state = INIT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]

  //Start Timer
  HAL_TIM_Base_Start(&htim6);
 80010ec:	4832      	ldr	r0, [pc, #200]	; (80011b8 <StartDefaultTask+0xdc>)
 80010ee:	f007 fa63 	bl	80085b8 <HAL_TIM_Base_Start>

  //Get current time
  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <StartDefaultTask+0xdc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <StartDefaultTask+0xe0>)
 80010fc:	801a      	strh	r2, [r3, #0]

  //Start the TCP Server
  tcp_server_init();
 80010fe:	f000 fe25 	bl	8001d4c <tcp_server_init>

  /* Infinite loop */
  for(;;)
  {
	  if(state == INIT)
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d132      	bne.n	800116e <StartDefaultTask+0x92>
	  {
		  print_to_serial("Hello FreeRTOS!");
 8001108:	482d      	ldr	r0, [pc, #180]	; (80011c0 <StartDefaultTask+0xe4>)
 800110a:	f7ff fb0b 	bl	8000724 <print_to_serial>
		  ST7735_SetRotation(2);
 800110e:	2002      	movs	r0, #2
 8001110:	f7ff fc44 	bl	800099c <ST7735_SetRotation>
		  ST7735_WriteString(0, 0, "Hello Ethernet!", Font_7x10, WHITE,BLACK);
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <StartDefaultTask+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	9202      	str	r2, [sp, #8]
 800111a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <StartDefaultTask+0xec>)
 8001128:	2100      	movs	r1, #0
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fd2e 	bl	8000b8c <ST7735_WriteString>
		  ST7735_WriteString(0, 12, "Hello CAN!", Font_7x10, WHITE,BLACK);
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <StartDefaultTask+0xe8>)
 8001132:	2200      	movs	r2, #0
 8001134:	9202      	str	r2, [sp, #8]
 8001136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113a:	9201      	str	r2, [sp, #4]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	9200      	str	r2, [sp, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <StartDefaultTask+0xf0>)
 8001144:	210c      	movs	r1, #12
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff fd20 	bl	8000b8c <ST7735_WriteString>
		  ST7735_WriteString(0, 24, "Hello SPI!", Font_7x10, WHITE,BLACK);
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <StartDefaultTask+0xe8>)
 800114e:	2200      	movs	r2, #0
 8001150:	9202      	str	r2, [sp, #8]
 8001152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001156:	9201      	str	r2, [sp, #4]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	9200      	str	r2, [sp, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <StartDefaultTask+0xf4>)
 8001160:	2118      	movs	r1, #24
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fd12 	bl	8000b8c <ST7735_WriteString>
		  state = IDLE;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e01f      	b.n	80011ae <StartDefaultTask+0xd2>
	  }
	  else if(state == IDLE)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d11c      	bne.n	80011ae <StartDefaultTask+0xd2>
	  {
		  if(__HAL_TIM_GET_COUNTER(&htim6) - timer_val >= 2500)
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <StartDefaultTask+0xdc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <StartDefaultTask+0xe0>)
 800117c:	8812      	ldrh	r2, [r2, #0]
 800117e:	1a9b      	subs	r3, r3, r2
 8001180:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001184:	4293      	cmp	r3, r2
 8001186:	d910      	bls.n	80011aa <StartDefaultTask+0xce>
		  {
			  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001188:	2102      	movs	r1, #2
 800118a:	4812      	ldr	r0, [pc, #72]	; (80011d4 <StartDefaultTask+0xf8>)
 800118c:	f004 fad7 	bl	800573e <HAL_GPIO_TogglePin>
			  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <StartDefaultTask+0xdc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <StartDefaultTask+0xe0>)
 800119a:	801a      	strh	r2, [r3, #0]

			  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <StartDefaultTask+0xfc>)
 800119e:	490f      	ldr	r1, [pc, #60]	; (80011dc <StartDefaultTask+0x100>)
 80011a0:	480f      	ldr	r0, [pc, #60]	; (80011e0 <StartDefaultTask+0x104>)
 80011a2:	f003 fe31 	bl	8004e08 <HAL_FDCAN_AddMessageToTxFifoQ>
			  Toggle_CAN_Data();
 80011a6:	f7ff ff0d 	bl	8000fc4 <Toggle_CAN_Data>
		  }
		  state = IDLE;
 80011aa:	2301      	movs	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
	  }

	  osDelay(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f009 fdf9 	bl	800ada6 <osDelay>
	  if(state == INIT)
 80011b4:	e7a5      	b.n	8001102 <StartDefaultTask+0x26>
 80011b6:	bf00      	nop
 80011b8:	240044c4 	.word	0x240044c4
 80011bc:	24004288 	.word	0x24004288
 80011c0:	08019f30 	.word	0x08019f30
 80011c4:	24000000 	.word	0x24000000
 80011c8:	08019f40 	.word	0x08019f40
 80011cc:	08019f50 	.word	0x08019f50
 80011d0:	08019f5c 	.word	0x08019f5c
 80011d4:	58021000 	.word	0x58021000
 80011d8:	240042f4 	.word	0x240042f4
 80011dc:	2400439c 	.word	0x2400439c
 80011e0:	240042fc 	.word	0x240042fc

080011e4 <Task02_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02_Init */
void Task02_Init(void const * argument)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02_Init */
  /* Infinite loop */
  for(;;)
  {
	  print_to_serial("Im task2!");
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <Task02_Init+0x18>)
 80011ee:	f7ff fa99 	bl	8000724 <print_to_serial>
	  osDelay(1000);
 80011f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f6:	f009 fdd6 	bl	800ada6 <osDelay>
	  print_to_serial("Im task2!");
 80011fa:	e7f7      	b.n	80011ec <Task02_Init+0x8>
 80011fc:	08019f68 	.word	0x08019f68

08001200 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b8f      	ldr	r3, [pc, #572]	; (8001454 <MX_GPIO_Init+0x254>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121c:	4a8d      	ldr	r2, [pc, #564]	; (8001454 <MX_GPIO_Init+0x254>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001226:	4b8b      	ldr	r3, [pc, #556]	; (8001454 <MX_GPIO_Init+0x254>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001234:	4b87      	ldr	r3, [pc, #540]	; (8001454 <MX_GPIO_Init+0x254>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123a:	4a86      	ldr	r2, [pc, #536]	; (8001454 <MX_GPIO_Init+0x254>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001244:	4b83      	ldr	r3, [pc, #524]	; (8001454 <MX_GPIO_Init+0x254>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b80      	ldr	r3, [pc, #512]	; (8001454 <MX_GPIO_Init+0x254>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001258:	4a7e      	ldr	r2, [pc, #504]	; (8001454 <MX_GPIO_Init+0x254>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001262:	4b7c      	ldr	r3, [pc, #496]	; (8001454 <MX_GPIO_Init+0x254>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b78      	ldr	r3, [pc, #480]	; (8001454 <MX_GPIO_Init+0x254>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	4a77      	ldr	r2, [pc, #476]	; (8001454 <MX_GPIO_Init+0x254>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001280:	4b74      	ldr	r3, [pc, #464]	; (8001454 <MX_GPIO_Init+0x254>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	4b71      	ldr	r3, [pc, #452]	; (8001454 <MX_GPIO_Init+0x254>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	4a6f      	ldr	r2, [pc, #444]	; (8001454 <MX_GPIO_Init+0x254>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129e:	4b6d      	ldr	r3, [pc, #436]	; (8001454 <MX_GPIO_Init+0x254>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ac:	4b69      	ldr	r3, [pc, #420]	; (8001454 <MX_GPIO_Init+0x254>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	4a68      	ldr	r2, [pc, #416]	; (8001454 <MX_GPIO_Init+0x254>)
 80012b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012bc:	4b65      	ldr	r3, [pc, #404]	; (8001454 <MX_GPIO_Init+0x254>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ca:	4b62      	ldr	r3, [pc, #392]	; (8001454 <MX_GPIO_Init+0x254>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d0:	4a60      	ldr	r2, [pc, #384]	; (8001454 <MX_GPIO_Init+0x254>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012da:	4b5e      	ldr	r3, [pc, #376]	; (8001454 <MX_GPIO_Init+0x254>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2109      	movs	r1, #9
 80012ec:	485a      	ldr	r0, [pc, #360]	; (8001458 <MX_GPIO_Init+0x258>)
 80012ee:	f004 fa0d 	bl	800570c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2108      	movs	r1, #8
 80012f6:	4859      	ldr	r0, [pc, #356]	; (800145c <MX_GPIO_Init+0x25c>)
 80012f8:	f004 fa08 	bl	800570c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f244 0101 	movw	r1, #16385	; 0x4001
 8001302:	4857      	ldr	r0, [pc, #348]	; (8001460 <MX_GPIO_Init+0x260>)
 8001304:	f004 fa02 	bl	800570c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130e:	4855      	ldr	r0, [pc, #340]	; (8001464 <MX_GPIO_Init+0x264>)
 8001310:	f004 f9fc 	bl	800570c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2102      	movs	r1, #2
 8001318:	4853      	ldr	r0, [pc, #332]	; (8001468 <MX_GPIO_Init+0x268>)
 800131a:	f004 f9f7 	bl	800570c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800131e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4849      	ldr	r0, [pc, #292]	; (8001458 <MX_GPIO_Init+0x258>)
 8001334:	f004 f842 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001338:	2309      	movs	r3, #9
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4842      	ldr	r0, [pc, #264]	; (8001458 <MX_GPIO_Init+0x258>)
 8001350:	f004 f834 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001354:	2308      	movs	r3, #8
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	483c      	ldr	r0, [pc, #240]	; (800145c <MX_GPIO_Init+0x25c>)
 800136c:	f004 f826 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001370:	f244 0301 	movw	r3, #16385	; 0x4001
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4835      	ldr	r0, [pc, #212]	; (8001460 <MX_GPIO_Init+0x260>)
 800138a:	f004 f817 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800138e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	482f      	ldr	r0, [pc, #188]	; (8001464 <MX_GPIO_Init+0x264>)
 80013a8:	f004 f808 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	482a      	ldr	r0, [pc, #168]	; (800146c <MX_GPIO_Init+0x26c>)
 80013c2:	f003 fffb 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80013c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	4820      	ldr	r0, [pc, #128]	; (800145c <MX_GPIO_Init+0x25c>)
 80013dc:	f003 ffee 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80013e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80013f2:	230a      	movs	r3, #10
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	4817      	ldr	r0, [pc, #92]	; (800145c <MX_GPIO_Init+0x25c>)
 80013fe:	f003 ffdd 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001408:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800140c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	480f      	ldr	r0, [pc, #60]	; (8001458 <MX_GPIO_Init+0x258>)
 800141a:	f003 ffcf 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800141e:	2302      	movs	r3, #2
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <MX_GPIO_Init+0x268>)
 8001436:	f003 ffc1 	bl	80053bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2105      	movs	r1, #5
 800143e:	2028      	movs	r0, #40	; 0x28
 8001440:	f001 fae2 	bl	8002a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001444:	2028      	movs	r0, #40	; 0x28
 8001446:	f001 faf9 	bl	8002a3c <HAL_NVIC_EnableIRQ>

}
 800144a:	bf00      	nop
 800144c:	3730      	adds	r7, #48	; 0x30
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	58024400 	.word	0x58024400
 8001458:	58020800 	.word	0x58020800
 800145c:	58020000 	.word	0x58020000
 8001460:	58020400 	.word	0x58020400
 8001464:	58020c00 	.word	0x58020c00
 8001468:	58021000 	.word	0x58021000
 800146c:	58021800 	.word	0x58021800

08001470 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af04      	add	r7, sp, #16
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN1_Pin) /* Interrupt only for BTN1_Pin (1st button from left to right in the breadboard) */
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001480:	d133      	bne.n	80014ea <HAL_GPIO_EXTI_Callback+0x7a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001482:	2101      	movs	r1, #1
 8001484:	481b      	ldr	r0, [pc, #108]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001486:	f004 f95a 	bl	800573e <HAL_GPIO_TogglePin>

		if(globalCluster.btn1_flag == 0)
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x88>)
 800148c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001490:	2b00      	cmp	r3, #0
 8001492:	d115      	bne.n	80014c0 <HAL_GPIO_EXTI_Callback+0x50>
		{
			fillScreen(BLACK);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff f92b 	bl	80006f0 <fillScreen>
			ST7735_WriteString(0, 0, "BTN1 ON!", Font_7x10, WHITE,BLACK);
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_GPIO_EXTI_Callback+0x8c>)
 800149c:	2200      	movs	r2, #0
 800149e:	9202      	str	r2, [sp, #8]
 80014a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a4:	9201      	str	r2, [sp, #4]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	9200      	str	r2, [sp, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <HAL_GPIO_EXTI_Callback+0x90>)
 80014ae:	2100      	movs	r1, #0
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff fb6b 	bl	8000b8c <ST7735_WriteString>
			globalCluster.btn1_flag = 1;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x88>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			ST7735_WriteString(0, 0, "BTN1 OFF!", Font_7x10, BLACK,WHITE);
			globalCluster.btn1_flag = 0;
		}
	}

}
 80014be:	e014      	b.n	80014ea <HAL_GPIO_EXTI_Callback+0x7a>
			fillScreen(BLACK);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff f915 	bl	80006f0 <fillScreen>
			ST7735_WriteString(0, 0, "BTN1 OFF!", Font_7x10, BLACK,WHITE);
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_GPIO_EXTI_Callback+0x8c>)
 80014c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014cc:	9202      	str	r2, [sp, #8]
 80014ce:	2200      	movs	r2, #0
 80014d0:	9201      	str	r2, [sp, #4]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_GPIO_EXTI_Callback+0x94>)
 80014da:	2100      	movs	r1, #0
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff fb55 	bl	8000b8c <ST7735_WriteString>
			globalCluster.btn1_flag = 0;
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x88>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	58020400 	.word	0x58020400
 80014f8:	2400428c 	.word	0x2400428c
 80014fc:	24000000 	.word	0x24000000
 8001500:	08019f74 	.word	0x08019f74
 8001504:	08019f80 	.word	0x08019f80

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800150e:	f000 f8ff 	bl	8001710 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001512:	4b40      	ldr	r3, [pc, #256]	; (8001614 <main+0x10c>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d11b      	bne.n	8001556 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800151e:	f3bf 8f4f 	dsb	sy
}
 8001522:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001524:	f3bf 8f6f 	isb	sy
}
 8001528:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800152a:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <main+0x10c>)
 800152c:	2200      	movs	r2, #0
 800152e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001532:	f3bf 8f4f 	dsb	sy
}
 8001536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001538:	f3bf 8f6f 	isb	sy
}
 800153c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800153e:	4b35      	ldr	r3, [pc, #212]	; (8001614 <main+0x10c>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	4a34      	ldr	r2, [pc, #208]	; (8001614 <main+0x10c>)
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800154a:	f3bf 8f4f 	dsb	sy
}
 800154e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001550:	f3bf 8f6f 	isb	sy
}
 8001554:	e000      	b.n	8001558 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001556:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <main+0x10c>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d138      	bne.n	80015d6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001564:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <main+0x10c>)
 8001566:	2200      	movs	r2, #0
 8001568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800156c:	f3bf 8f4f 	dsb	sy
}
 8001570:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <main+0x10c>)
 8001574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001578:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	0b5b      	lsrs	r3, r3, #13
 800157e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001582:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	08db      	lsrs	r3, r3, #3
 8001588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800158c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	015a      	lsls	r2, r3, #5
 8001592:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001596:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800159c:	491d      	ldr	r1, [pc, #116]	; (8001614 <main+0x10c>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	1e5a      	subs	r2, r3, #1
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1ef      	bne.n	800158e <main+0x86>
    } while(sets-- != 0U);
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1e5a      	subs	r2, r3, #1
 80015b2:	60ba      	str	r2, [r7, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e5      	bne.n	8001584 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80015b8:	f3bf 8f4f 	dsb	sy
}
 80015bc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <main+0x10c>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4a14      	ldr	r2, [pc, #80]	; (8001614 <main+0x10c>)
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015ca:	f3bf 8f4f 	dsb	sy
}
 80015ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d0:	f3bf 8f6f 	isb	sy
}
 80015d4:	e000      	b.n	80015d8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80015d6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d8:	f001 f8ca 	bl	8002770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015dc:	f000 f81c 	bl	8001618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e0:	f7ff fe0e 	bl	8001200 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80015e4:	f000 fe80 	bl	80022e8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80015e8:	f000 ff30 	bl	800244c <MX_USB_OTG_HS_USB_Init>
  MX_FDCAN1_Init();
 80015ec:	f7ff fbaa 	bl	8000d44 <MX_FDCAN1_Init>
  MX_TIM6_Init();
 80015f0:	f000 fe20 	bl	8002234 <MX_TIM6_Init>
  MX_SPI1_Init();
 80015f4:	f000 f8d2 	bl	800179c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_MSG_config();
 80015f8:	f7ff fc7e 	bl	8000ef8 <FDCAN1_MSG_config>
  ST7735_Init(0);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff f9a1 	bl	8000944 <ST7735_Init>
  fillScreen(BLACK);
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff f874 	bl	80006f0 <fillScreen>
  //testAll();

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001608:	f7ff fd34 	bl	8001074 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800160c:	f009 fb68 	bl	800ace0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001610:	e7fe      	b.n	8001610 <main+0x108>
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b09c      	sub	sp, #112	; 0x70
 800161c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	224c      	movs	r2, #76	; 0x4c
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f017 fca1 	bl	8018f6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2220      	movs	r2, #32
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f017 fc9b 	bl	8018f6e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001638:	2002      	movs	r0, #2
 800163a:	f004 f8b5 	bl	80057a8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <SystemClock_Config+0xf0>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800164a:	4a2f      	ldr	r2, [pc, #188]	; (8001708 <SystemClock_Config+0xf0>)
 800164c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001650:	6193      	str	r3, [r2, #24]
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <SystemClock_Config+0xf0>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800165e:	bf00      	nop
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <SystemClock_Config+0xf0>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166c:	d1f8      	bne.n	8001660 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <SystemClock_Config+0xf4>)
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	f023 0303 	bic.w	r3, r3, #3
 8001676:	4a25      	ldr	r2, [pc, #148]	; (800170c <SystemClock_Config+0xf4>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800167e:	2321      	movs	r3, #33	; 0x21
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001682:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001688:	2301      	movs	r3, #1
 800168a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168c:	2302      	movs	r3, #2
 800168e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001690:	2302      	movs	r3, #2
 8001692:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001694:	2301      	movs	r3, #1
 8001696:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001698:	2318      	movs	r3, #24
 800169a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80016a8:	230c      	movs	r3, #12
 80016aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	4618      	mov	r0, r3
 80016ba:	f004 f8af 	bl	800581c <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80016c4:	f000 f864 	bl	8001790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c8:	233f      	movs	r3, #63	; 0x3f
 80016ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2303      	movs	r3, #3
 80016ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016d4:	2308      	movs	r3, #8
 80016d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016d8:	2340      	movs	r3, #64	; 0x40
 80016da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016dc:	2340      	movs	r3, #64	; 0x40
 80016de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016e6:	2340      	movs	r3, #64	; 0x40
 80016e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2101      	movs	r1, #1
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fc40 	bl	8005f74 <HAL_RCC_ClockConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80016fa:	f000 f849 	bl	8001790 <Error_Handler>
  }
}
 80016fe:	bf00      	nop
 8001700:	3770      	adds	r7, #112	; 0x70
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	58024800 	.word	0x58024800
 800170c:	58024400 	.word	0x58024400

08001710 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001716:	463b      	mov	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001722:	f001 f999 	bl	8002a58 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001726:	2301      	movs	r3, #1
 8001728:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800172a:	2300      	movs	r3, #0
 800172c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800172e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001732:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001734:	230e      	movs	r3, #14
 8001736:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001738:	2300      	movs	r3, #0
 800173a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800173c:	2301      	movs	r3, #1
 800173e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001740:	2303      	movs	r3, #3
 8001742:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001744:	2301      	movs	r3, #1
 8001746:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001748:	2301      	movs	r3, #1
 800174a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001754:	463b      	mov	r3, r7
 8001756:	4618      	mov	r0, r3
 8001758:	f001 f9b6 	bl	8002ac8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800175c:	2004      	movs	r0, #4
 800175e:	f001 f993 	bl	8002a88 <HAL_MPU_Enable>

}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800177e:	f001 f833 	bl	80027e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40010000 	.word	0x40010000

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
}
 8001796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001798:	e7fe      	b.n	8001798 <Error_Handler+0x8>
	...

0800179c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017a0:	4b27      	ldr	r3, [pc, #156]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017a2:	4a28      	ldr	r2, [pc, #160]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017b0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80017b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b6:	4b22      	ldr	r3, [pc, #136]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017d2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80017d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <MX_SPI1_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_SPI1_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <MX_SPI1_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_SPI1_Init+0xa4>)
 8001810:	2200      	movs	r2, #0
 8001812:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <MX_SPI1_Init+0xa4>)
 8001816:	2200      	movs	r2, #0
 8001818:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_SPI1_Init+0xa4>)
 800181c:	2200      	movs	r2, #0
 800181e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <MX_SPI1_Init+0xa4>)
 8001822:	2200      	movs	r2, #0
 8001824:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_SPI1_Init+0xa4>)
 8001828:	2200      	movs	r2, #0
 800182a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <MX_SPI1_Init+0xa4>)
 800182e:	f006 fa8b 	bl	8007d48 <HAL_SPI_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001838:	f7ff ffaa 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	240043f0 	.word	0x240043f0
 8001844:	40013000 	.word	0x40013000

08001848 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b0b8      	sub	sp, #224	; 0xe0
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001860:	f107 0318 	add.w	r3, r7, #24
 8001864:	22b4      	movs	r2, #180	; 0xb4
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f017 fb80 	bl	8018f6e <memset>
  if(spiHandle->Instance==SPI1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a36      	ldr	r2, [pc, #216]	; (800194c <HAL_SPI_MspInit+0x104>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d165      	bne.n	8001944 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800187e:	2300      	movs	r3, #0
 8001880:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001882:	f107 0318 	add.w	r3, r7, #24
 8001886:	4618      	mov	r0, r3
 8001888:	f004 ff42 	bl	8006710 <HAL_RCCEx_PeriphCLKConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001892:	f7ff ff7d 	bl	8001790 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <HAL_SPI_MspInit+0x108>)
 8001898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800189c:	4a2c      	ldr	r2, [pc, #176]	; (8001950 <HAL_SPI_MspInit+0x108>)
 800189e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018a6:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <HAL_SPI_MspInit+0x108>)
 80018a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <HAL_SPI_MspInit+0x108>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ba:	4a25      	ldr	r2, [pc, #148]	; (8001950 <HAL_SPI_MspInit+0x108>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_SPI_MspInit+0x108>)
 80018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <HAL_SPI_MspInit+0x108>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <HAL_SPI_MspInit+0x108>)
 80018da:	f043 0308 	orr.w	r3, r3, #8
 80018de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_SPI_MspInit+0x108>)
 80018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018f0:	2320      	movs	r3, #32
 80018f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001908:	2305      	movs	r3, #5
 800190a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001912:	4619      	mov	r1, r3
 8001914:	480f      	ldr	r0, [pc, #60]	; (8001954 <HAL_SPI_MspInit+0x10c>)
 8001916:	f003 fd51 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001932:	2305      	movs	r3, #5
 8001934:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001938:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <HAL_SPI_MspInit+0x110>)
 8001940:	f003 fd3c 	bl	80053bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001944:	bf00      	nop
 8001946:	37e0      	adds	r7, #224	; 0xe0
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40013000 	.word	0x40013000
 8001950:	58024400 	.word	0x58024400
 8001954:	58020000 	.word	0x58020000
 8001958:	58020c00 	.word	0x58020c00

0800195c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_MspInit+0x38>)
 8001964:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_MspInit+0x38>)
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_MspInit+0x38>)
 8001974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	210f      	movs	r1, #15
 8001984:	f06f 0001 	mvn.w	r0, #1
 8001988:	f001 f83e 	bl	8002a08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	58024400 	.word	0x58024400

08001998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08e      	sub	sp, #56	; 0x38
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	d844      	bhi.n	8001a30 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80019a6:	2200      	movs	r2, #0
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	2019      	movs	r0, #25
 80019ac:	f001 f82c 	bl	8002a08 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80019b0:	2019      	movs	r0, #25
 80019b2:	f001 f843 	bl	8002a3c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80019b6:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <HAL_InitTick+0xb0>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_InitTick+0xb4>)
 80019be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019c2:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <HAL_InitTick+0xb4>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_InitTick+0xb4>)
 80019ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019da:	f107 020c 	add.w	r2, r7, #12
 80019de:	f107 0310 	add.w	r3, r7, #16
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f004 fe51 	bl	800668c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80019ea:	f004 fe39 	bl	8006660 <HAL_RCC_GetPCLK2Freq>
 80019ee:	4603      	mov	r3, r0
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <HAL_InitTick+0xb8>)
 80019f8:	fba2 2303 	umull	r2, r3, r2, r3
 80019fc:	0c9b      	lsrs	r3, r3, #18
 80019fe:	3b01      	subs	r3, #1
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_InitTick+0xbc>)
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <HAL_InitTick+0xc0>)
 8001a06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0xbc>)
 8001a0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a0e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a10:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_InitTick+0xbc>)
 8001a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a14:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_InitTick+0xbc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_InitTick+0xbc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001a22:	480c      	ldr	r0, [pc, #48]	; (8001a54 <HAL_InitTick+0xbc>)
 8001a24:	f006 fd71 	bl	800850a <HAL_TIM_Base_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d107      	bne.n	8001a3e <HAL_InitTick+0xa6>
 8001a2e:	e001      	b.n	8001a34 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e005      	b.n	8001a40 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001a34:	4807      	ldr	r0, [pc, #28]	; (8001a54 <HAL_InitTick+0xbc>)
 8001a36:	f006 fe3d 	bl	80086b4 <HAL_TIM_Base_Start_IT>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	e000      	b.n	8001a40 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3738      	adds	r7, #56	; 0x38
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	24000010 	.word	0x24000010
 8001a4c:	58024400 	.word	0x58024400
 8001a50:	431bde83 	.word	0x431bde83
 8001a54:	24004478 	.word	0x24004478
 8001a58:	40010000 	.word	0x40010000

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <NMI_Handler+0x4>

08001a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <MemManage_Handler+0x4>

08001a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <TIM1_UP_IRQHandler+0x10>)
 8001a8e:	f006 fe97 	bl	80087c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	24004478 	.word	0x24004478

08001a9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_PWR_EN_Pin);
 8001aa0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001aa4:	f003 fe65 	bl	8005772 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <ETH_IRQHandler+0x10>)
 8001ab2:	f001 fd27 	bl	8003504 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	240046dc 	.word	0x240046dc

08001ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <_kill+0x20>)
 8001adc:	2216      	movs	r2, #22
 8001ade:	601a      	str	r2, [r3, #0]
	return -1;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	24007878 	.word	0x24007878

08001af4 <_exit>:

void _exit (int status)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ffe5 	bl	8001ad0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b06:	e7fe      	b.n	8001b06 <_exit+0x12>

08001b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e00a      	b.n	8001b30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b1a:	f3af 8000 	nop.w
 8001b1e:	4601      	mov	r1, r0
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbf0      	blt.n	8001b1a <_read+0x12>
	}

return len;
 8001b38:	687b      	ldr	r3, [r7, #4]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e009      	b.n	8001b68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf1      	blt.n	8001b54 <_write+0x12>
	}
	return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_close>:

int _close(int file)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
	return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_isatty>:

int _isatty(int file)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
	return 1;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
	return 0;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d205      	bcs.n	8001c20 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <_sbrk+0x6c>)
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	24050000 	.word	0x24050000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	24000370 	.word	0x24000370
 8001c4c:	24007890 	.word	0x24007890
 8001c50:	24007878 	.word	0x24007878

08001c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c58:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <SystemInit+0xd8>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5e:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <SystemInit+0xd8>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c68:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <SystemInit+0xdc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	2b06      	cmp	r3, #6
 8001c72:	d807      	bhi.n	8001c84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c74:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <SystemInit+0xdc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 030f 	bic.w	r3, r3, #15
 8001c7c:	4a2c      	ldr	r2, [pc, #176]	; (8001d30 <SystemInit+0xdc>)
 8001c7e:	f043 0307 	orr.w	r3, r3, #7
 8001c82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <SystemInit+0xe0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a2a      	ldr	r2, [pc, #168]	; (8001d34 <SystemInit+0xe0>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <SystemInit+0xe0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c96:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <SystemInit+0xe0>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4926      	ldr	r1, [pc, #152]	; (8001d34 <SystemInit+0xe0>)
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <SystemInit+0xe4>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ca2:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <SystemInit+0xdc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <SystemInit+0xdc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 030f 	bic.w	r3, r3, #15
 8001cb6:	4a1e      	ldr	r2, [pc, #120]	; (8001d30 <SystemInit+0xdc>)
 8001cb8:	f043 0307 	orr.w	r3, r3, #7
 8001cbc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <SystemInit+0xe0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <SystemInit+0xe0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <SystemInit+0xe0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <SystemInit+0xe0>)
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <SystemInit+0xe8>)
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <SystemInit+0xe0>)
 8001cd8:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <SystemInit+0xec>)
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <SystemInit+0xe0>)
 8001cde:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <SystemInit+0xf0>)
 8001ce0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <SystemInit+0xe0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <SystemInit+0xe0>)
 8001cea:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <SystemInit+0xf0>)
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <SystemInit+0xe0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <SystemInit+0xe0>)
 8001cf6:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <SystemInit+0xf0>)
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <SystemInit+0xe0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <SystemInit+0xe0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <SystemInit+0xe0>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <SystemInit+0xe0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <SystemInit+0xf4>)
 8001d14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d18:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SystemInit+0xd8>)
 8001d1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d20:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00
 8001d30:	52002000 	.word	0x52002000
 8001d34:	58024400 	.word	0x58024400
 8001d38:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d3c:	02020200 	.word	0x02020200
 8001d40:	01ff0000 	.word	0x01ff0000
 8001d44:	01010280 	.word	0x01010280
 8001d48:	52004000 	.word	0x52004000

08001d4c <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8001d52:	f00f fb6b 	bl	801142c <tcp_new>
 8001d56:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 200);
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <tcp_server_init+0x4c>)
 8001d5a:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 10);
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	220a      	movs	r2, #10
 8001d60:	4619      	mov	r1, r3
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f00e fabe 	bl	80102e4 <tcp_bind>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8001d6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8001d74:	21ff      	movs	r1, #255	; 0xff
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f00e fb6c 	bl	8010454 <tcp_listen_with_backlog>
 8001d7c:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8001d7e:	4907      	ldr	r1, [pc, #28]	; (8001d9c <tcp_server_init+0x50>)
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f00f fbd3 	bl	801152c <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8001d86:	e003      	b.n	8001d90 <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8001d88:	68f9      	ldr	r1, [r7, #12]
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f00c fe56 	bl	800ea3c <memp_free>
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	c801a8c0 	.word	0xc801a8c0
 8001d9c:	08001da1 	.word	0x08001da1

08001da0 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	4613      	mov	r3, r2
 8001dac:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001dae:	2101      	movs	r1, #1
 8001db0:	68b8      	ldr	r0, [r7, #8]
 8001db2:	f00f f949 	bl	8011048 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8001db6:	200c      	movs	r0, #12
 8001db8:	f00c fc26 	bl	800e608 <mem_malloc>
 8001dbc:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01f      	beq.n	8001e04 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001ddc:	6939      	ldr	r1, [r7, #16]
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f00f fb2c 	bl	801143c <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8001de4:	490d      	ldr	r1, [pc, #52]	; (8001e1c <tcp_server_accept+0x7c>)
 8001de6:	68b8      	ldr	r0, [r7, #8]
 8001de8:	f00f fb3a 	bl	8011460 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <tcp_server_accept+0x80>)
 8001dee:	68b8      	ldr	r0, [r7, #8]
 8001df0:	f00f fb7a 	bl	80114e8 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	490b      	ldr	r1, [pc, #44]	; (8001e24 <tcp_server_accept+0x84>)
 8001df8:	68b8      	ldr	r0, [r7, #8]
 8001dfa:	f00f fbaf 	bl	801155c <tcp_poll>

    ret_err = ERR_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75fb      	strb	r3, [r7, #23]
 8001e02:	e005      	b.n	8001e10 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8001e04:	6939      	ldr	r1, [r7, #16]
 8001e06:	68b8      	ldr	r0, [r7, #8]
 8001e08:	f000 f965 	bl	80020d6 <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001e0c:	23ff      	movs	r3, #255	; 0xff
 8001e0e:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	08001e29 	.word	0x08001e29
 8001e20:	08001f5d 	.word	0x08001f5d
 8001e24:	08001f81 	.word	0x08001f81

08001e28 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <tcp_server_recv+0x20>
 8001e3c:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <tcp_server_recv+0x124>)
 8001e3e:	22c3      	movs	r2, #195	; 0xc3
 8001e40:	4943      	ldr	r1, [pc, #268]	; (8001f50 <tcp_server_recv+0x128>)
 8001e42:	4844      	ldr	r0, [pc, #272]	; (8001f54 <tcp_server_recv+0x12c>)
 8001e44:	f017 f8f6 	bl	8019034 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d116      	bne.n	8001e80 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2203      	movs	r2, #3
 8001e56:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8001e60:	69b9      	ldr	r1, [r7, #24]
 8001e62:	68b8      	ldr	r0, [r7, #8]
 8001e64:	f000 f937 	bl	80020d6 <tcp_server_connection_close>
 8001e68:	e007      	b.n	8001e7a <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8001e6a:	493b      	ldr	r1, [pc, #236]	; (8001f58 <tcp_server_recv+0x130>)
 8001e6c:	68b8      	ldr	r0, [r7, #8]
 8001e6e:	f00f fb19 	bl	80114a4 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8001e72:	69b9      	ldr	r1, [r7, #24]
 8001e74:	68b8      	ldr	r0, [r7, #8]
 8001e76:	f000 f8db 	bl	8002030 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	77fb      	strb	r3, [r7, #31]
 8001e7e:	e05f      	b.n	8001f40 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00b      	beq.n	8001ea0 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f00d fc75 	bl	800f784 <pbuf_free>
    }
    ret_err = err;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	77fb      	strb	r3, [r7, #31]
 8001e9e:	e04f      	b.n	8001f40 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d110      	bne.n	8001eca <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8001eb4:	4928      	ldr	r1, [pc, #160]	; (8001f58 <tcp_server_recv+0x130>)
 8001eb6:	68b8      	ldr	r0, [r7, #8]
 8001eb8:	f00f faf4 	bl	80114a4 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8001ebc:	69b9      	ldr	r1, [r7, #24]
 8001ebe:	68b8      	ldr	r0, [r7, #8]
 8001ec0:	f000 f930 	bl	8002124 <tcp_server_handle>

    ret_err = ERR_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	77fb      	strb	r3, [r7, #31]
 8001ec8:	e03a      	b.n	8001f40 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d115      	bne.n	8001efe <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d107      	bne.n	8001eea <tcp_server_recv+0xc2>
    {
      es->p = p;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8001ee0:	69b9      	ldr	r1, [r7, #24]
 8001ee2:	68b8      	ldr	r0, [r7, #8]
 8001ee4:	f000 f91e 	bl	8002124 <tcp_server_handle>
 8001ee8:	e006      	b.n	8001ef8 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f00d fd6a 	bl	800f9cc <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77fb      	strb	r3, [r7, #31]
 8001efc:	e020      	b.n	8001f40 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d10e      	bne.n	8001f24 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	891b      	ldrh	r3, [r3, #8]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	68b8      	ldr	r0, [r7, #8]
 8001f0e:	f00e fbb7 	bl	8010680 <tcp_recved>
    es->p = NULL;
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f00d fc33 	bl	800f784 <pbuf_free>
    ret_err = ERR_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	77fb      	strb	r3, [r7, #31]
 8001f22:	e00d      	b.n	8001f40 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	891b      	ldrh	r3, [r3, #8]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	68b8      	ldr	r0, [r7, #8]
 8001f2c:	f00e fba8 	bl	8010680 <tcp_recved>
    es->p = NULL;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f00d fc24 	bl	800f784 <pbuf_free>
    ret_err = ERR_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001f40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	08019f8c 	.word	0x08019f8c
 8001f50:	08019fa8 	.word	0x08019fa8
 8001f54:	08019fb4 	.word	0x08019fb4
 8001f58:	08001fe1 	.word	0x08001fe1

08001f5c <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f00c f9ae 	bl	800e2d4 <mem_free>
  }
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d017      	beq.n	8001fc4 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8001f9c:	490f      	ldr	r1, [pc, #60]	; (8001fdc <tcp_server_poll+0x5c>)
 8001f9e:	6838      	ldr	r0, [r7, #0]
 8001fa0:	f00f fa80 	bl	80114a4 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6838      	ldr	r0, [r7, #0]
 8001fa8:	f000 f842 	bl	8002030 <tcp_server_send>
 8001fac:	e007      	b.n	8001fbe <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d103      	bne.n	8001fbe <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	6838      	ldr	r0, [r7, #0]
 8001fba:	f000 f88c 	bl	80020d6 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	e004      	b.n	8001fce <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8001fc4:	6838      	ldr	r0, [r7, #0]
 8001fc6:	f00e f981 	bl	80102cc <tcp_abort>
    ret_err = ERR_ABRT;
 8001fca:	23f3      	movs	r3, #243	; 0xf3
 8001fcc:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	08001fe1 	.word	0x08001fe1

08001fe0 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8002000:	490a      	ldr	r1, [pc, #40]	; (800202c <tcp_server_sent+0x4c>)
 8002002:	68b8      	ldr	r0, [r7, #8]
 8002004:	f00f fa4e 	bl	80114a4 <tcp_sent>
    tcp_server_send(tpcb, es);
 8002008:	6979      	ldr	r1, [r7, #20]
 800200a:	68b8      	ldr	r0, [r7, #8]
 800200c:	f000 f810 	bl	8002030 <tcp_server_send>
 8002010:	e007      	b.n	8002022 <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d103      	bne.n	8002022 <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 800201a:	6979      	ldr	r1, [r7, #20]
 800201c:	68b8      	ldr	r0, [r7, #8]
 800201e:	f000 f85a 	bl	80020d6 <tcp_server_connection_close>
  }
  return ERR_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	08001fe1 	.word	0x08001fe1

08002030 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 800203e:	e036      	b.n	80020ae <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	6859      	ldr	r1, [r3, #4]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	895a      	ldrh	r2, [r3, #10]
 800204e:	2301      	movs	r3, #1
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f012 f931 	bl	80142b8 <tcp_write>
 8002056:	4603      	mov	r3, r0
 8002058:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 800205a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11d      	bne.n	800209e <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	895b      	ldrh	r3, [r3, #10]
 8002066:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d004      	beq.n	8002082 <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4618      	mov	r0, r3
 800207e:	f00d fc27 	bl	800f8d0 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8002082:	6938      	ldr	r0, [r7, #16]
 8002084:	f00d fb7e 	bl	800f784 <pbuf_free>
 8002088:	4603      	mov	r3, r0
 800208a:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 800208c:	7b7b      	ldrb	r3, [r7, #13]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f7      	beq.n	8002082 <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8002092:	89fb      	ldrh	r3, [r7, #14]
 8002094:	4619      	mov	r1, r3
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f00e faf2 	bl	8010680 <tcp_recved>
 800209c:	e007      	b.n	80020ae <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 800209e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a6:	d102      	bne.n	80020ae <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80020ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10b      	bne.n	80020ce <tcp_server_send+0x9e>
         (es->p != NULL) &&
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	895a      	ldrh	r2, [r3, #10]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d9b8      	bls.n	8002040 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80020e0:	2100      	movs	r1, #0
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f00f f9aa 	bl	801143c <tcp_arg>
  tcp_sent(tpcb, NULL);
 80020e8:	2100      	movs	r1, #0
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f00f f9da 	bl	80114a4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80020f0:	2100      	movs	r1, #0
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f00f f9b4 	bl	8011460 <tcp_recv>
  tcp_err(tpcb, NULL);
 80020f8:	2100      	movs	r1, #0
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f00f f9f4 	bl	80114e8 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8002100:	2200      	movs	r2, #0
 8002102:	2100      	movs	r1, #0
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f00f fa29 	bl	801155c <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8002110:	6838      	ldr	r0, [r7, #0]
 8002112:	f00c f8df 	bl	800e2d4 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f00d ffee 	bl	80100f8 <tcp_close>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002124:	b5b0      	push	{r4, r5, r7, lr}
 8002126:	b0a0      	sub	sp, #128	; 0x80
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	8b1b      	ldrh	r3, [r3, #24]
 800213c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8002140:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002144:	4618      	mov	r0, r3
 8002146:	f015 fd23 	bl	8017b90 <ip4addr_ntoa>
 800214a:	6778      	str	r0, [r7, #116]	; 0x74

	esTx->state = es->state;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002152:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800215a:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002162:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	2264      	movs	r2, #100	; 0x64
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f016 fefe 	bl	8018f6e <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	891b      	ldrh	r3, [r3, #8]
 800217e:	461a      	mov	r2, r3
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	4618      	mov	r0, r3
 8002186:	f017 f872 	bl	801926e <strncpy>
	strncpy(globalCluster.myString, (char *)es->p->payload, es->p->tot_len);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	891b      	ldrh	r3, [r3, #8]
 8002196:	461a      	mov	r2, r3
 8002198:	4824      	ldr	r0, [pc, #144]	; (800222c <tcp_server_handle+0x108>)
 800219a:	f017 f868 	bl	801926e <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f8b4 	bl	8000310 <strlen>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	4413      	add	r3, r2
 80021b2:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <tcp_server_handle+0x10c>)
 80021b4:	461d      	mov	r5, r3
 80021b6:	4614      	mov	r4, r2
 80021b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ba:	6028      	str	r0, [r5, #0]
 80021bc:	6069      	str	r1, [r5, #4]
 80021be:	60aa      	str	r2, [r5, #8]
 80021c0:	60eb      	str	r3, [r5, #12]
 80021c2:	cc03      	ldmia	r4!, {r0, r1}
 80021c4:	6128      	str	r0, [r5, #16]
 80021c6:	6169      	str	r1, [r5, #20]
 80021c8:	7823      	ldrb	r3, [r4, #0]
 80021ca:	762b      	strb	r3, [r5, #24]


	esTx->p->payload = (void *)buf;
 80021cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f107 020c 	add.w	r2, r7, #12
 80021d4:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	891a      	ldrh	r2, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	895b      	ldrh	r3, [r3, #10]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	b29c      	uxth	r4, r3
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f890 	bl	8000310 <strlen>
 80021f0:	4603      	mov	r3, r0
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4422      	add	r2, r4
 80021fa:	b292      	uxth	r2, r2
 80021fc:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 80021fe:	f107 030c 	add.w	r3, r7, #12
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f884 	bl	8000310 <strlen>
 8002208:	4602      	mov	r2, r0
 800220a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	b292      	uxth	r2, r2
 8002210:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8002212:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff0b 	bl	8002030 <tcp_server_send>

	pbuf_free(es->p);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4618      	mov	r0, r3
 8002220:	f00d fab0 	bl	800f784 <pbuf_free>

}
 8002224:	bf00      	nop
 8002226:	3780      	adds	r7, #128	; 0x80
 8002228:	46bd      	mov	sp, r7
 800222a:	bdb0      	pop	{r4, r5, r7, pc}
 800222c:	2400428c 	.word	0x2400428c
 8002230:	08019fdc 	.word	0x08019fdc

08002234 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <MX_TIM6_Init+0x68>)
 8002246:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <MX_TIM6_Init+0x6c>)
 8002248:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_TIM6_Init+0x68>)
 800224c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002250:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <MX_TIM6_Init+0x68>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <MX_TIM6_Init+0x68>)
 800225a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800225e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_TIM6_Init+0x68>)
 8002262:	2200      	movs	r2, #0
 8002264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002266:	480d      	ldr	r0, [pc, #52]	; (800229c <MX_TIM6_Init+0x68>)
 8002268:	f006 f94f 	bl	800850a <HAL_TIM_Base_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002272:	f7ff fa8d 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	4619      	mov	r1, r3
 8002282:	4806      	ldr	r0, [pc, #24]	; (800229c <MX_TIM6_Init+0x68>)
 8002284:	f006 fc8a 	bl	8008b9c <HAL_TIMEx_MasterConfigSynchronization>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800228e:	f7ff fa7f 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	240044c4 	.word	0x240044c4
 80022a0:	40001000 	.word	0x40001000

080022a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <HAL_TIM_Base_MspInit+0x3c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d10e      	bne.n	80022d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_TIM_Base_MspInit+0x40>)
 80022b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022bc:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <HAL_TIM_Base_MspInit+0x40>)
 80022be:	f043 0310 	orr.w	r3, r3, #16
 80022c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_TIM_Base_MspInit+0x40>)
 80022c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40001000 	.word	0x40001000
 80022e4:	58024400 	.word	0x58024400

080022e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022ec:	4b22      	ldr	r3, [pc, #136]	; (8002378 <MX_USART3_UART_Init+0x90>)
 80022ee:	4a23      	ldr	r2, [pc, #140]	; (800237c <MX_USART3_UART_Init+0x94>)
 80022f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <MX_USART3_UART_Init+0x90>)
 80022f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <MX_USART3_UART_Init+0x90>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <MX_USART3_UART_Init+0x90>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <MX_USART3_UART_Init+0x90>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <MX_USART3_UART_Init+0x90>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <MX_USART3_UART_Init+0x90>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <MX_USART3_UART_Init+0x90>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <MX_USART3_UART_Init+0x90>)
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_USART3_UART_Init+0x90>)
 8002326:	2200      	movs	r2, #0
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MX_USART3_UART_Init+0x90>)
 800232c:	2200      	movs	r2, #0
 800232e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002330:	4811      	ldr	r0, [pc, #68]	; (8002378 <MX_USART3_UART_Init+0x90>)
 8002332:	f006 fced 	bl	8008d10 <HAL_UART_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800233c:	f7ff fa28 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002340:	2100      	movs	r1, #0
 8002342:	480d      	ldr	r0, [pc, #52]	; (8002378 <MX_USART3_UART_Init+0x90>)
 8002344:	f007 fe16 	bl	8009f74 <HAL_UARTEx_SetTxFifoThreshold>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800234e:	f7ff fa1f 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002352:	2100      	movs	r1, #0
 8002354:	4808      	ldr	r0, [pc, #32]	; (8002378 <MX_USART3_UART_Init+0x90>)
 8002356:	f007 fe4b 	bl	8009ff0 <HAL_UARTEx_SetRxFifoThreshold>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002360:	f7ff fa16 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <MX_USART3_UART_Init+0x90>)
 8002366:	f007 fdcc 	bl	8009f02 <HAL_UARTEx_DisableFifoMode>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002370:	f7ff fa0e 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	24004510 	.word	0x24004510
 800237c:	40004800 	.word	0x40004800

08002380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b0b6      	sub	sp, #216	; 0xd8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	22b4      	movs	r2, #180	; 0xb4
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f016 fde4 	bl	8018f6e <memset>
  if(uartHandle->Instance==USART3)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a25      	ldr	r2, [pc, #148]	; (8002440 <HAL_UART_MspInit+0xc0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d142      	bne.n	8002436 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023b0:	2302      	movs	r3, #2
 80023b2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ba:	f107 0310 	add.w	r3, r7, #16
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 f9a6 	bl	8006710 <HAL_RCCEx_PeriphCLKConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023ca:	f7ff f9e1 	bl	8001790 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_UART_MspInit+0xc4>)
 80023d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_UART_MspInit+0xc4>)
 80023d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_UART_MspInit+0xc4>)
 80023e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_UART_MspInit+0xc4>)
 80023ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f2:	4a14      	ldr	r2, [pc, #80]	; (8002444 <HAL_UART_MspInit+0xc4>)
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_UART_MspInit+0xc4>)
 80023fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800240a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800240e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002424:	2307      	movs	r3, #7
 8002426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800242a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800242e:	4619      	mov	r1, r3
 8002430:	4805      	ldr	r0, [pc, #20]	; (8002448 <HAL_UART_MspInit+0xc8>)
 8002432:	f002 ffc3 	bl	80053bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002436:	bf00      	nop
 8002438:	37d8      	adds	r7, #216	; 0xd8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40004800 	.word	0x40004800
 8002444:	58024400 	.word	0x58024400
 8002448:	58020c00 	.word	0x58020c00

0800244c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800245c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002494 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002460:	f7ff fbf8 	bl	8001c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002464:	480c      	ldr	r0, [pc, #48]	; (8002498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002466:	490d      	ldr	r1, [pc, #52]	; (800249c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002468:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800246c:	e002      	b.n	8002474 <LoopCopyDataInit>

0800246e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002472:	3304      	adds	r3, #4

08002474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002478:	d3f9      	bcc.n	800246e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800247c:	4c0a      	ldr	r4, [pc, #40]	; (80024a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002480:	e001      	b.n	8002486 <LoopFillZerobss>

08002482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002484:	3204      	adds	r2, #4

08002486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002488:	d3fb      	bcc.n	8002482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800248a:	f016 fd2d 	bl	8018ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800248e:	f7ff f83b 	bl	8001508 <main>
  bx  lr
 8002492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002494:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002498:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800249c:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 80024a0:	0801d62c 	.word	0x0801d62c
  ldr r2, =_sbss
 80024a4:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 80024a8:	2400788c 	.word	0x2400788c

080024ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024ac:	e7fe      	b.n	80024ac <ADC3_IRQHandler>

080024ae <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <LAN8742_RegisterBusIO+0x28>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <LAN8742_RegisterBusIO+0x28>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <LAN8742_RegisterBusIO+0x28>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	e014      	b.n	8002506 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d17c      	bne.n	800262c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e01c      	b.n	8002586 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	f107 0208 	add.w	r2, r7, #8
 8002554:	2112      	movs	r1, #18
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	4798      	blx	r3
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	da03      	bge.n	8002568 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002560:	f06f 0304 	mvn.w	r3, #4
 8002564:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002566:	e00b      	b.n	8002580 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	d105      	bne.n	8002580 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
         break;
 800257e:	e005      	b.n	800258c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b1f      	cmp	r3, #31
 800258a:	d9df      	bls.n	800254c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b1f      	cmp	r3, #31
 8002592:	d902      	bls.n	800259a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002594:	f06f 0302 	mvn.w	r3, #2
 8002598:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d145      	bne.n	800262c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6810      	ldr	r0, [r2, #0]
 80025a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025ac:	2100      	movs	r1, #0
 80025ae:	4798      	blx	r3
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db37      	blt.n	8002626 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6810      	ldr	r0, [r2, #0]
 80025be:	f107 0208 	add.w	r2, r7, #8
 80025c2:	2100      	movs	r1, #0
 80025c4:	4798      	blx	r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db28      	blt.n	800261e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4798      	blx	r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80025d6:	e01c      	b.n	8002612 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4798      	blx	r3
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025ea:	d80e      	bhi.n	800260a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6810      	ldr	r0, [r2, #0]
 80025f4:	f107 0208 	add.w	r2, r7, #8
 80025f8:	2100      	movs	r1, #0
 80025fa:	4798      	blx	r3
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	da07      	bge.n	8002612 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002602:	f06f 0304 	mvn.w	r3, #4
 8002606:	613b      	str	r3, [r7, #16]
                 break;
 8002608:	e010      	b.n	800262c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800260a:	f06f 0301 	mvn.w	r3, #1
 800260e:	613b      	str	r3, [r7, #16]
               break;
 8002610:	e00c      	b.n	800262c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1dd      	bne.n	80025d8 <LAN8742_Init+0xc6>
 800261c:	e006      	b.n	800262c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800261e:	f06f 0304 	mvn.w	r3, #4
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	e002      	b.n	800262c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002626:	f06f 0303 	mvn.w	r3, #3
 800262a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d112      	bne.n	8002658 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	4798      	blx	r3
 8002638:	4603      	mov	r3, r0
 800263a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800263c:	bf00      	nop
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	4798      	blx	r3
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002650:	d9f5      	bls.n	800263e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002658:	693b      	ldr	r3, [r7, #16]
 }
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6810      	ldr	r0, [r2, #0]
 8002676:	f107 020c 	add.w	r2, r7, #12
 800267a:	2101      	movs	r1, #1
 800267c:	4798      	blx	r3
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	da02      	bge.n	800268a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002684:	f06f 0304 	mvn.w	r3, #4
 8002688:	e06e      	b.n	8002768 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6810      	ldr	r0, [r2, #0]
 8002692:	f107 020c 	add.w	r2, r7, #12
 8002696:	2101      	movs	r1, #1
 8002698:	4798      	blx	r3
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	da02      	bge.n	80026a6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80026a0:	f06f 0304 	mvn.w	r3, #4
 80026a4:	e060      	b.n	8002768 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80026b0:	2301      	movs	r3, #1
 80026b2:	e059      	b.n	8002768 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6810      	ldr	r0, [r2, #0]
 80026bc:	f107 020c 	add.w	r2, r7, #12
 80026c0:	2100      	movs	r1, #0
 80026c2:	4798      	blx	r3
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da02      	bge.n	80026d0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80026ca:	f06f 0304 	mvn.w	r3, #4
 80026ce:	e04b      	b.n	8002768 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d11b      	bne.n	8002712 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <LAN8742_GetLinkState+0x90>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80026ee:	2302      	movs	r3, #2
 80026f0:	e03a      	b.n	8002768 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e033      	b.n	8002768 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800270a:	2304      	movs	r3, #4
 800270c:	e02c      	b.n	8002768 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800270e:	2305      	movs	r3, #5
 8002710:	e02a      	b.n	8002768 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6810      	ldr	r0, [r2, #0]
 800271a:	f107 020c 	add.w	r2, r7, #12
 800271e:	211f      	movs	r1, #31
 8002720:	4798      	blx	r3
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	da02      	bge.n	800272e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002728:	f06f 0304 	mvn.w	r3, #4
 800272c:	e01c      	b.n	8002768 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002738:	2306      	movs	r3, #6
 800273a:	e015      	b.n	8002768 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 031c 	and.w	r3, r3, #28
 8002742:	2b18      	cmp	r3, #24
 8002744:	d101      	bne.n	800274a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002746:	2302      	movs	r3, #2
 8002748:	e00e      	b.n	8002768 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 031c 	and.w	r3, r3, #28
 8002750:	2b08      	cmp	r3, #8
 8002752:	d101      	bne.n	8002758 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002754:	2303      	movs	r3, #3
 8002756:	e007      	b.n	8002768 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 031c 	and.w	r3, r3, #28
 800275e:	2b14      	cmp	r3, #20
 8002760:	d101      	bne.n	8002766 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002762:	2304      	movs	r3, #4
 8002764:	e000      	b.n	8002768 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002766:	2305      	movs	r3, #5
    }				
  }
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002776:	2003      	movs	r0, #3
 8002778:	f000 f93b 	bl	80029f2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800277c:	f003 fdb0 	bl	80062e0 <HAL_RCC_GetSysClockFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_Init+0x68>)
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	4913      	ldr	r1, [pc, #76]	; (80027dc <HAL_Init+0x6c>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
 8002798:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <HAL_Init+0x68>)
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <HAL_Init+0x6c>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
 80027b0:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <HAL_Init+0x70>)
 80027b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027b4:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <HAL_Init+0x74>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027ba:	200f      	movs	r0, #15
 80027bc:	f7ff f8ec 	bl	8001998 <HAL_InitTick>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e002      	b.n	80027d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027ca:	f7ff f8c7 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	58024400 	.word	0x58024400
 80027dc:	0801d350 	.word	0x0801d350
 80027e0:	2400000c 	.word	0x2400000c
 80027e4:	24000008 	.word	0x24000008

080027e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_IncTick+0x20>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_IncTick+0x24>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_IncTick+0x24>)
 80027fa:	6013      	str	r3, [r2, #0]
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	24000014 	.word	0x24000014
 800280c:	240045a0 	.word	0x240045a0

08002810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return uwTick;
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_GetTick+0x14>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	240045a0 	.word	0x240045a0

08002828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002830:	f7ff ffee 	bl	8002810 <HAL_GetTick>
 8002834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d005      	beq.n	800284e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_Delay+0x44>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800284e:	bf00      	nop
 8002850:	f7ff ffde 	bl	8002810 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d8f7      	bhi.n	8002850 <HAL_Delay+0x28>
  {
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	24000014 	.word	0x24000014

08002870 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002880:	4904      	ldr	r1, [pc, #16]	; (8002894 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	58000400 	.word	0x58000400

08002898 <__NVIC_SetPriorityGrouping>:
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <__NVIC_SetPriorityGrouping+0x40>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b4:	4013      	ands	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <__NVIC_SetPriorityGrouping+0x40>)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	60d3      	str	r3, [r2, #12]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00
 80028dc:	05fa0000 	.word	0x05fa0000

080028e0 <__NVIC_GetPriorityGrouping>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <__NVIC_GetPriorityGrouping+0x18>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 0307 	and.w	r3, r3, #7
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_EnableIRQ>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800290a:	2b00      	cmp	r3, #0
 800290c:	db0b      	blt.n	8002926 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	4907      	ldr	r1, [pc, #28]	; (8002934 <__NVIC_EnableIRQ+0x38>)
 8002916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2001      	movs	r0, #1
 800291e:	fa00 f202 	lsl.w	r2, r0, r2
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000e100 	.word	0xe000e100

08002938 <__NVIC_SetPriority>:
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db0a      	blt.n	8002962 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	490c      	ldr	r1, [pc, #48]	; (8002984 <__NVIC_SetPriority+0x4c>)
 8002952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	440b      	add	r3, r1
 800295c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002960:	e00a      	b.n	8002978 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4908      	ldr	r1, [pc, #32]	; (8002988 <__NVIC_SetPriority+0x50>)
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	3b04      	subs	r3, #4
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	440b      	add	r3, r1
 8002976:	761a      	strb	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <NVIC_EncodePriority>:
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	; 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f1c3 0307 	rsb	r3, r3, #7
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	bf28      	it	cs
 80029aa:	2304      	movcs	r3, #4
 80029ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <NVIC_EncodePriority+0x30>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3b03      	subs	r3, #3
 80029ba:	e000      	b.n	80029be <NVIC_EncodePriority+0x32>
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	401a      	ands	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43d9      	mvns	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	4313      	orrs	r3, r2
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	; 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff ff4c 	bl	8002898 <__NVIC_SetPriorityGrouping>
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a16:	f7ff ff63 	bl	80028e0 <__NVIC_GetPriorityGrouping>
 8002a1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	6978      	ldr	r0, [r7, #20]
 8002a22:	f7ff ffb3 	bl	800298c <NVIC_EncodePriority>
 8002a26:	4602      	mov	r2, r0
 8002a28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff82 	bl	8002938 <__NVIC_SetPriority>
}
 8002a34:	bf00      	nop
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff56 	bl	80028fc <__NVIC_EnableIRQ>
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002a5c:	f3bf 8f5f 	dmb	sy
}
 8002a60:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <HAL_MPU_Disable+0x28>)
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_MPU_Disable+0x28>)
 8002a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_MPU_Disable+0x2c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	605a      	str	r2, [r3, #4]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000ed00 	.word	0xe000ed00
 8002a84:	e000ed90 	.word	0xe000ed90

08002a88 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002a90:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <HAL_MPU_Enable+0x38>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_MPU_Enable+0x3c>)
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <HAL_MPU_Enable+0x3c>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002aa6:	f3bf 8f4f 	dsb	sy
}
 8002aaa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002aac:	f3bf 8f6f 	isb	sy
}
 8002ab0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000ed90 	.word	0xe000ed90
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	785a      	ldrb	r2, [r3, #1]
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_MPU_ConfigRegion+0x84>)
 8002ad6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d029      	beq.n	8002b34 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002ae0:	4a1a      	ldr	r2, [pc, #104]	; (8002b4c <HAL_MPU_ConfigRegion+0x84>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7b1b      	ldrb	r3, [r3, #12]
 8002aec:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	7adb      	ldrb	r3, [r3, #11]
 8002af2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002af4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7a9b      	ldrb	r3, [r3, #10]
 8002afa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002afc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	7b5b      	ldrb	r3, [r3, #13]
 8002b02:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002b04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7b9b      	ldrb	r3, [r3, #14]
 8002b0a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002b0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7bdb      	ldrb	r3, [r3, #15]
 8002b12:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b14:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7a5b      	ldrb	r3, [r3, #9]
 8002b1a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7a1b      	ldrb	r3, [r3, #8]
 8002b22:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b24:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	7812      	ldrb	r2, [r2, #0]
 8002b2a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b2c:	4a07      	ldr	r2, [pc, #28]	; (8002b4c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b2e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b30:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002b32:	e005      	b.n	8002b40 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_MPU_ConfigRegion+0x84>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_MPU_ConfigRegion+0x84>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed90 	.word	0xe000ed90

08002b50 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e0c6      	b.n	8002cf0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f007 fc1c 	bl	800a3a8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2223      	movs	r2, #35	; 0x23
 8002b74:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	4b60      	ldr	r3, [pc, #384]	; (8002cf8 <HAL_ETH_Init+0x1a8>)
 8002b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b7c:	4a5e      	ldr	r2, [pc, #376]	; (8002cf8 <HAL_ETH_Init+0x1a8>)
 8002b7e:	f043 0302 	orr.w	r3, r3, #2
 8002b82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b86:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <HAL_ETH_Init+0x1a8>)
 8002b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7a1b      	ldrb	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7ff fe67 	bl	8002870 <HAL_SYSCFG_ETHInterfaceSelect>
 8002ba2:	e003      	b.n	8002bac <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002ba4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002ba8:	f7ff fe62 	bl	8002870 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc4:	f7ff fe24 	bl	8002810 <HAL_GetTick>
 8002bc8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002bca:	e00f      	b.n	8002bec <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002bcc:	f7ff fe20 	bl	8002810 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bda:	d907      	bls.n	8002bec <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2204      	movs	r2, #4
 8002be0:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	22e0      	movs	r2, #224	; 0xe0
 8002be6:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e081      	b.n	8002cf0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1e6      	bne.n	8002bcc <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f001 fad8 	bl	80041b4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002c04:	f003 fce6 	bl	80065d4 <HAL_RCC_GetHCLKFreq>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4a3c      	ldr	r2, [pc, #240]	; (8002cfc <HAL_ETH_Init+0x1ac>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	0c9a      	lsrs	r2, r3, #18
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3a01      	subs	r2, #1
 8002c18:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f001 fa2b 	bl	8004078 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002c38:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002c3c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	22e0      	movs	r2, #224	; 0xe0
 8002c54:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e04a      	b.n	8002cf0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002c62:	4413      	add	r3, r2
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_ETH_Init+0x1b0>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6952      	ldr	r2, [r2, #20]
 8002c6e:	0052      	lsls	r2, r2, #1
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	6809      	ldr	r1, [r1, #0]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	f241 1308 	movw	r3, #4360	; 0x1108
 8002c7a:	440b      	add	r3, r1
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f001 faf0 	bl	8004264 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f001 fb34 	bl	80042f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	3305      	adds	r3, #5
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	021a      	lsls	r2, r3, #8
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	3303      	adds	r3, #3
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	061a      	lsls	r2, r3, #24
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	041b      	lsls	r3, r3, #16
 8002cbc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002cc8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002cd6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002cd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2210      	movs	r2, #16
 8002cec:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	58024400 	.word	0x58024400
 8002cfc:	431bde83 	.word	0x431bde83
 8002d00:	ffff8001 	.word	0xffff8001

08002d04 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3310      	adds	r3, #16
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_ETH_DescAssignMemory+0x28>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d904      	bls.n	8002d36 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e021      	b.n	8002d7a <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d174      	bne.n	8002e80 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2223      	movs	r2, #35	; 0x23
 8002d9a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e00f      	b.n	8002dc2 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3310      	adds	r3, #16
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d9ec      	bls.n	8002da2 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0202 	orr.w	r2, r2, #2
 8002ddc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0201 	orr.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	f241 1304 	movw	r3, #4356	; 0x1104
 8002e0a:	4413      	add	r3, r2
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6811      	ldr	r1, [r2, #0]
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	f241 1304 	movw	r3, #4356	; 0x1104
 8002e1a:	440b      	add	r3, r1
 8002e1c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f241 1308 	movw	r3, #4360	; 0x1108
 8002e26:	4413      	add	r3, r2
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6811      	ldr	r1, [r2, #0]
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	f241 1308 	movw	r3, #4360	; 0x1108
 8002e36:	440b      	add	r3, r1
 8002e38:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8002e4c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002e50:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	f241 1334 	movw	r3, #4404	; 0x1134
 8002e5a:	4413      	add	r3, r2
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6811      	ldr	r1, [r2, #0]
 8002e62:	f24d 0241 	movw	r2, #53313	; 0xd041
 8002e66:	431a      	orrs	r2, r3
 8002e68:	f241 1334 	movw	r3, #4404	; 0x1134
 8002e6c:	440b      	add	r3, r1
 8002e6e:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2210      	movs	r2, #16
 8002e74:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2222      	movs	r2, #34	; 0x22
 8002e7a:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d067      	beq.n	8002f70 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2223      	movs	r2, #35	; 0x23
 8002ea4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	f241 1334 	movw	r3, #4404	; 0x1134
 8002eae:	4413      	add	r3, r2
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6811      	ldr	r1, [r2, #0]
 8002eb6:	4a32      	ldr	r2, [pc, #200]	; (8002f80 <HAL_ETH_Stop_IT+0xf0>)
 8002eb8:	401a      	ands	r2, r3
 8002eba:	f241 1334 	movw	r3, #4404	; 0x1134
 8002ebe:	440b      	add	r3, r1
 8002ec0:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	f241 1304 	movw	r3, #4356	; 0x1104
 8002eca:	4413      	add	r3, r2
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6811      	ldr	r1, [r2, #0]
 8002ed2:	f023 0201 	bic.w	r2, r3, #1
 8002ed6:	f241 1304 	movw	r3, #4356	; 0x1104
 8002eda:	440b      	add	r3, r1
 8002edc:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f241 1308 	movw	r3, #4360	; 0x1108
 8002ee6:	4413      	add	r3, r2
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6811      	ldr	r1, [r2, #0]
 8002eee:	f023 0201 	bic.w	r2, r3, #1
 8002ef2:	f241 1308 	movw	r3, #4360	; 0x1108
 8002ef6:	440b      	add	r3, r1
 8002ef8:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0202 	bic.w	r2, r2, #2
 8002f2c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	e00f      	b.n	8002f54 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3310      	adds	r3, #16
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	3301      	adds	r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d9ec      	bls.n	8002f34 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2210      	movs	r2, #16
 8002f64:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2210      	movs	r2, #16
 8002f6a:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	ffff2fbe 	.word	0xffff2fbe

08002f84 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9a:	f043 0201 	orr.w	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e073      	b.n	800308e <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d16e      	bne.n	800308c <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f001 f9fa 	bl	80043ac <ETH_Prepare_Tx_Descriptors>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d007      	beq.n	8002fce <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	f043 0202 	orr.w	r2, r3, #2
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e05f      	b.n	800308e <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3206      	adds	r2, #6
 8002fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fda:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d904      	bls.n	8002ff8 <HAL_ETH_Transmit+0x74>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	1f1a      	subs	r2, r3, #4
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	3106      	adds	r1, #6
 8003004:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003008:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800300c:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 800300e:	f7ff fbff 	bl	8002810 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003014:	e034      	b.n	8003080 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d011      	beq.n	800304c <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302c:	f043 0208 	orr.w	r2, r3, #8
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	22e0      	movs	r2, #224	; 0xe0
 8003046:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e020      	b.n	800308e <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d015      	beq.n	8003080 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8003054:	f7ff fbdc 	bl	8002810 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	429a      	cmp	r2, r3
 8003062:	d302      	bcc.n	800306a <HAL_ETH_Transmit+0xe6>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306e:	f043 0204 	orr.w	r2, r3, #4
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	22e0      	movs	r2, #224	; 0xe0
 800307a:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e006      	b.n	800308e <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	dbc6      	blt.n	8003016 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8003096:	b480      	push	{r7}
 8003098:	b089      	sub	sp, #36	; 0x24
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3344      	adds	r3, #68	; 0x44
 80030a2:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b2:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d06b      	beq.n	80031a0 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e0ce      	b.n	800326a <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	3301      	adds	r3, #1
 80030d0:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d036      	beq.n	800314c <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	3301      	adds	r3, #1
 80030e2:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d902      	bls.n	8003100 <HAL_ETH_IsRxDataAvailable+0x6a>
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3b04      	subs	r3, #4
 80030fe:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003108:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	db11      	blt.n	8003136 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00b      	beq.n	8003136 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2201      	movs	r2, #1
 8003122:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	3301      	adds	r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d902      	bls.n	8003136 <HAL_ETH_IsRxDataAvailable+0xa0>
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	3b04      	subs	r3, #4
 8003134:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8003148:	2301      	movs	r3, #1
 800314a:	e08e      	b.n	800326a <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d012      	beq.n	800317e <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 800315c:	2301      	movs	r3, #1
 800315e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	3301      	adds	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d902      	bls.n	8003172 <HAL_ETH_IsRxDataAvailable+0xdc>
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3b04      	subs	r3, #4
 8003170:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800317a:	61bb      	str	r3, [r7, #24]
 800317c:	e010      	b.n	80031a0 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	3301      	adds	r3, #1
 8003182:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	3301      	adds	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d902      	bls.n	8003196 <HAL_ETH_IsRxDataAvailable+0x100>
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	3b04      	subs	r3, #4
 8003194:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800319e:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	db02      	blt.n	80031ae <HAL_ETH_IsRxDataAvailable+0x118>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d98e      	bls.n	80030cc <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d056      	beq.n	8003262 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031cc:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	e03b      	b.n	800324c <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031e2:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	3b01      	subs	r3, #1
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	429a      	cmp	r2, r3
 8003228:	d20d      	bcs.n	8003246 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3301      	adds	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d902      	bls.n	800323c <HAL_ETH_IsRxDataAvailable+0x1a6>
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3b04      	subs	r3, #4
 800323a:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003244:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	3301      	adds	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	429a      	cmp	r2, r3
 8003252:	d3bf      	bcc.n	80031d4 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6819      	ldr	r1, [r3, #0]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	f241 1328 	movw	r3, #4392	; 0x1128
 800325e:	440b      	add	r3, r1
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2200      	movs	r2, #0
 8003266:	619a      	str	r2, [r3, #24]

  return 0;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	; 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b08a      	sub	sp, #40	; 0x28
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3344      	adds	r3, #68	; 0x44
 8003284:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003298:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d104      	bne.n	80032ae <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e07d      	b.n	80033aa <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff feed 	bl	8003096 <HAL_ETH_IsRxDataAvailable>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e071      	b.n	80033aa <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	623b      	str	r3, [r7, #32]
 80032da:	e031      	b.n	8003340 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	461a      	mov	r2, r3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	461a      	mov	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003316:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	3301      	adds	r3, #1
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	2b03      	cmp	r3, #3
 8003322:	d902      	bls.n	800332a <HAL_ETH_GetRxDataBuffer+0xb4>
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	3b04      	subs	r3, #4
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003332:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	3301      	adds	r3, #1
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	3b01      	subs	r3, #1
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	429a      	cmp	r2, r3
 800334a:	d3c7      	bcc.n	80032dc <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	461a      	mov	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	429a      	cmp	r2, r3
 800336c:	d803      	bhi.n	8003376 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	e018      	b.n	80033a8 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d012      	beq.n	80033a4 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	461a      	mov	r2, r3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	1ad2      	subs	r2, r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	e001      	b.n	80033a8 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3728      	adds	r7, #40	; 0x28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3344      	adds	r3, #68	; 0x44
 80033c0:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff fe60 	bl	8003096 <HAL_ETH_IsRxDataAvailable>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e017      	b.n	8003410 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	699a      	ldr	r2, [r3, #24]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	4413      	add	r3, r2
 80033e8:	3b01      	subs	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d902      	bls.n	80033f8 <HAL_ETH_GetRxDataLength+0x46>
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3b04      	subs	r3, #4
 80033f6:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003400:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3344      	adds	r3, #68	; 0x44
 8003424:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003434:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e057      	b.n	80034f8 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3301      	adds	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e03b      	b.n	80034d4 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800346a:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d009      	beq.n	8003488 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d20d      	bcs.n	80034ce <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3301      	adds	r3, #1
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d902      	bls.n	80034c4 <HAL_ETH_BuildRxDescriptors+0xac>
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3b04      	subs	r3, #4
 80034c2:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034cc:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	3301      	adds	r3, #1
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d3bf      	bcc.n	800345c <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6819      	ldr	r1, [r3, #0]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	f241 1328 	movw	r3, #4392	; 0x1128
 80034e6:	440b      	add	r3, r1
 80034e8:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3724      	adds	r7, #36	; 0x24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b40      	cmp	r3, #64	; 0x40
 800351c:	d113      	bne.n	8003546 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	f241 1334 	movw	r3, #4404	; 0x1134
 8003526:	4413      	add	r3, r2
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d109      	bne.n	8003546 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f007 f80e 	bl	800a554 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003540:	f248 0240 	movw	r2, #32832	; 0x8040
 8003544:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d113      	bne.n	8003580 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	f241 1334 	movw	r3, #4404	; 0x1134
 8003560:	4413      	add	r3, r2
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d109      	bne.n	8003580 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f8b7 	bl	80036e0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800357a:	f248 0201 	movw	r2, #32769	; 0x8001
 800357e:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003592:	d149      	bne.n	8003628 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	f241 1334 	movw	r3, #4404	; 0x1134
 800359c:	4413      	add	r3, r2
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a8:	d13e      	bne.n	8003628 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ae:	f043 0208 	orr.w	r2, r3, #8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c8:	d11b      	bne.n	8003602 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	f241 1302 	movw	r3, #4354	; 0x1102
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	f241 1334 	movw	r3, #4404	; 0x1134
 80035e6:	4413      	add	r3, r2
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6811      	ldr	r1, [r2, #0]
 80035ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035f2:	f241 1334 	movw	r3, #4404	; 0x1134
 80035f6:	440b      	add	r3, r1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	22e0      	movs	r2, #224	; 0xe0
 80035fe:	66da      	str	r2, [r3, #108]	; 0x6c
 8003600:	e00f      	b.n	8003622 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800361c:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8003620:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f866 	bl	80036f4 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003630:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8003634:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003638:	d10e      	bne.n	8003658 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	22e0      	movs	r2, #224	; 0xe0
 800364a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f85b 	bl	8003708 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	d10f      	bne.n	8003688 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003670:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f84e 	bl	800371c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b20      	cmp	r3, #32
 8003696:	d10f      	bne.n	80036b8 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036a0:	f003 020f 	and.w	r2, r3, #15
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f840 	bl	8003730 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_ETH_IRQHandler+0x1d8>)
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d006      	beq.n	80036d2 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_ETH_IRQHandler+0x1d8>)
 80036c6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f839 	bl	8003744 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	58000080 	.word	0x58000080

080036e0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e03e      	b.n	80037f8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003782:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	055b      	lsls	r3, r3, #21
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	041b      	lsls	r3, r3, #16
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f043 030c 	orr.w	r3, r3, #12
 80037a6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80037ba:	f7ff f829 	bl	8002810 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80037c0:	e009      	b.n	80037d6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80037c2:	f7ff f825 	bl	8002810 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d0:	d901      	bls.n	80037d6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e010      	b.n	80037f8 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ed      	bne.n	80037c2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e03c      	b.n	800389c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800382a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	055b      	lsls	r3, r3, #21
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f023 030c 	bic.w	r3, r3, #12
 800384e:	f043 0304 	orr.w	r3, r3, #4
 8003852:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b29a      	uxth	r2, r3
 8003860:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <HAL_ETH_WritePHYRegister+0xa4>)
 8003862:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8003866:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <HAL_ETH_WritePHYRegister+0xa4>)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800386e:	f7fe ffcf 	bl	8002810 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003874:	e009      	b.n	800388a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8003876:	f7fe ffcb 	bl	8002810 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003884:	d901      	bls.n	800388a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e008      	b.n	800389c <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ed      	bne.n	8003876 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40028000 	.word	0x40028000

080038a8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e1c3      	b.n	8003c44 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 020c 	and.w	r2, r3, #12
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf14      	ite	ne
 80038d8:	2301      	movne	r3, #1
 80038da:	2300      	moveq	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf0c      	ite	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	2300      	movne	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800394e:	2b00      	cmp	r3, #0
 8003950:	bf14      	ite	ne
 8003952:	2301      	movne	r3, #1
 8003954:	2300      	moveq	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf0c      	ite	eq
 80039d6:	2301      	moveq	r3, #1
 80039d8:	2300      	movne	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf14      	ite	ne
 8003a0a:	2301      	movne	r3, #1
 8003a0c:	2300      	moveq	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf14      	ite	ne
 8003a24:	2301      	movne	r3, #1
 8003a26:	2300      	moveq	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bf14      	ite	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	2300      	moveq	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf14      	ite	ne
 8003a66:	2301      	movne	r3, #1
 8003a68:	2300      	moveq	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf14      	ite	ne
 8003ad4:	2301      	movne	r3, #1
 8003ad6:	2300      	moveq	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	0e5b      	lsrs	r3, r3, #25
 8003b06:	f003 021f 	and.w	r2, r3, #31
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf14      	ite	ne
 8003b1c:	2301      	movne	r3, #1
 8003b1e:	2300      	moveq	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 020f 	and.w	r2, r3, #15
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	bf14      	ite	ne
 8003b46:	2301      	movne	r3, #1
 8003b48:	2300      	moveq	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf14      	ite	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	2300      	moveq	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003bd0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003be0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf14      	ite	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	2300      	moveq	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e00a      	b.n	8003c7a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d105      	bne.n	8003c78 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8003c6c:	6839      	ldr	r1, [r7, #0]
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f860 	bl	8003d34 <ETH_SetMACConfig>

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c94:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c9c:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003c9e:	f002 fc99 	bl	80065d4 <HAL_RCC_GetHCLKFreq>
 8003ca2:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d908      	bls.n	8003cbe <HAL_ETH_SetMDIOClockRange+0x3a>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d804      	bhi.n	8003cbe <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e027      	b.n	8003d0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4a18      	ldr	r2, [pc, #96]	; (8003d24 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d908      	bls.n	8003cd8 <HAL_ETH_SetMDIOClockRange+0x54>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d204      	bcs.n	8003cd8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e01a      	b.n	8003d0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4a13      	ldr	r2, [pc, #76]	; (8003d28 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d303      	bcc.n	8003ce8 <HAL_ETH_SetMDIOClockRange+0x64>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d911      	bls.n	8003d0c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d908      	bls.n	8003d02 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4a0f      	ldr	r2, [pc, #60]	; (8003d30 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d804      	bhi.n	8003d02 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e005      	b.n	8003d0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	e000      	b.n	8003d0e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003d0c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	01312cff 	.word	0x01312cff
 8003d24:	02160ebf 	.word	0x02160ebf
 8003d28:	03938700 	.word	0x03938700
 8003d2c:	05f5e0ff 	.word	0x05f5e0ff
 8003d30:	08f0d17f 	.word	0x08f0d17f

08003d34 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003d46:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	791b      	ldrb	r3, [r3, #4]
 8003d4c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003d4e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	7b1b      	ldrb	r3, [r3, #12]
 8003d54:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003d56:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	7b5b      	ldrb	r3, [r3, #13]
 8003d5c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003d5e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	7b9b      	ldrb	r3, [r3, #14]
 8003d64:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003d66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	7bdb      	ldrb	r3, [r3, #15]
 8003d6c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003d6e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	7c12      	ldrb	r2, [r2, #16]
 8003d74:	2a00      	cmp	r2, #0
 8003d76:	d102      	bne.n	8003d7e <ETH_SetMACConfig+0x4a>
 8003d78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d7c:	e000      	b.n	8003d80 <ETH_SetMACConfig+0x4c>
 8003d7e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003d80:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	7c52      	ldrb	r2, [r2, #17]
 8003d86:	2a00      	cmp	r2, #0
 8003d88:	d102      	bne.n	8003d90 <ETH_SetMACConfig+0x5c>
 8003d8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d8e:	e000      	b.n	8003d92 <ETH_SetMACConfig+0x5e>
 8003d90:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003d92:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	7c9b      	ldrb	r3, [r3, #18]
 8003d98:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003d9a:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003da0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003da6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	7f1b      	ldrb	r3, [r3, #28]
 8003dac:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003dae:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	7f5b      	ldrb	r3, [r3, #29]
 8003db4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003db6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	7f92      	ldrb	r2, [r2, #30]
 8003dbc:	2a00      	cmp	r2, #0
 8003dbe:	d102      	bne.n	8003dc6 <ETH_SetMACConfig+0x92>
 8003dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dc4:	e000      	b.n	8003dc8 <ETH_SetMACConfig+0x94>
 8003dc6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003dc8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	7fdb      	ldrb	r3, [r3, #31]
 8003dce:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003dd0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003dd8:	2a00      	cmp	r2, #0
 8003dda:	d102      	bne.n	8003de2 <ETH_SetMACConfig+0xae>
 8003ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003de0:	e000      	b.n	8003de4 <ETH_SetMACConfig+0xb0>
 8003de2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003de4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003dea:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003df2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003df4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4b56      	ldr	r3, [pc, #344]	; (8003f60 <ETH_SetMACConfig+0x22c>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	68f9      	ldr	r1, [r7, #12]
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e16:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e1e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003e20:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e28:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003e2a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e32:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003e34:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003e3c:	2a00      	cmp	r2, #0
 8003e3e:	d102      	bne.n	8003e46 <ETH_SetMACConfig+0x112>
 8003e40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e44:	e000      	b.n	8003e48 <ETH_SetMACConfig+0x114>
 8003e46:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003e48:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	4b42      	ldr	r3, [pc, #264]	; (8003f64 <ETH_SetMACConfig+0x230>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	68f9      	ldr	r1, [r7, #12]
 8003e62:	430b      	orrs	r3, r1
 8003e64:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e6c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <ETH_SetMACConfig+0x234>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	68f9      	ldr	r1, [r7, #12]
 8003e86:	430b      	orrs	r3, r1
 8003e88:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e90:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003e96:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003e9e:	2a00      	cmp	r2, #0
 8003ea0:	d101      	bne.n	8003ea6 <ETH_SetMACConfig+0x172>
 8003ea2:	2280      	movs	r2, #128	; 0x80
 8003ea4:	e000      	b.n	8003ea8 <ETH_SetMACConfig+0x174>
 8003ea6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003ea8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eba:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	68f9      	ldr	r1, [r7, #12]
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003ed0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003ed8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f023 0103 	bic.w	r1, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003efe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003f1a:	2a00      	cmp	r2, #0
 8003f1c:	d101      	bne.n	8003f22 <ETH_SetMACConfig+0x1ee>
 8003f1e:	2240      	movs	r2, #64	; 0x40
 8003f20:	e000      	b.n	8003f24 <ETH_SetMACConfig+0x1f0>
 8003f22:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003f24:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f2c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003f2e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003f36:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003f44:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003f54:	bf00      	nop
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	00048083 	.word	0x00048083
 8003f64:	c0f88000 	.word	0xc0f88000
 8003f68:	fffffef0 	.word	0xfffffef0

08003f6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b38      	ldr	r3, [pc, #224]	; (8004064 <ETH_SetDMAConfig+0xf8>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	6809      	ldr	r1, [r1, #0]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003f92:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	791b      	ldrb	r3, [r3, #4]
 8003f98:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f9e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	7b1b      	ldrb	r3, [r3, #12]
 8003fa4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	f241 0304 	movw	r3, #4100	; 0x1004
 8003fb2:	4413      	add	r3, r2
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b2c      	ldr	r3, [pc, #176]	; (8004068 <ETH_SetDMAConfig+0xfc>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6811      	ldr	r1, [r2, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	f241 0304 	movw	r3, #4100	; 0x1004
 8003fc6:	440b      	add	r3, r1
 8003fc8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	7b5b      	ldrb	r3, [r3, #13]
 8003fce:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b22      	ldr	r3, [pc, #136]	; (800406c <ETH_SetDMAConfig+0x100>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6811      	ldr	r1, [r2, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003ff2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	7d1b      	ldrb	r3, [r3, #20]
 8003ffc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ffe:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	7f5b      	ldrb	r3, [r3, #29]
 8004004:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	f241 1304 	movw	r3, #4356	; 0x1104
 8004012:	4413      	add	r3, r2
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4b16      	ldr	r3, [pc, #88]	; (8004070 <ETH_SetDMAConfig+0x104>)
 8004018:	4013      	ands	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6811      	ldr	r1, [r2, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	431a      	orrs	r2, r3
 8004022:	f241 1304 	movw	r3, #4356	; 0x1104
 8004026:	440b      	add	r3, r1
 8004028:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	7f1b      	ldrb	r3, [r3, #28]
 800402e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	f241 1308 	movw	r3, #4360	; 0x1108
 8004040:	4413      	add	r3, r2
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <ETH_SetDMAConfig+0x108>)
 8004046:	4013      	ands	r3, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6811      	ldr	r1, [r2, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	431a      	orrs	r2, r3
 8004050:	f241 1308 	movw	r3, #4360	; 0x1108
 8004054:	440b      	add	r3, r1
 8004056:	601a      	str	r2, [r3, #0]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	ffff87fd 	.word	0xffff87fd
 8004068:	ffff2ffe 	.word	0xffff2ffe
 800406c:	fffec000 	.word	0xfffec000
 8004070:	ffc0efef 	.word	0xffc0efef
 8004074:	7fc0ffff 	.word	0x7fc0ffff

08004078 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b0a4      	sub	sp, #144	; 0x90
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004086:	2300      	movs	r3, #0
 8004088:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800408a:	2300      	movs	r3, #0
 800408c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004090:	2300      	movs	r3, #0
 8004092:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800409c:	2301      	movs	r3, #1
 800409e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80040b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040b8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80040d0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80040d4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80040dc:	2300      	movs	r3, #0
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80040f2:	2300      	movs	r3, #0
 80040f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80040fa:	2300      	movs	r3, #0
 80040fc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80040fe:	2300      	movs	r3, #0
 8004100:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004104:	2300      	movs	r3, #0
 8004106:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004110:	2320      	movs	r3, #32
 8004112:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800411c:	2300      	movs	r3, #0
 800411e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004122:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004128:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800412c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800412e:	2300      	movs	r3, #0
 8004130:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004134:	2302      	movs	r3, #2
 8004136:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800413a:	2300      	movs	r3, #0
 800413c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004140:	2300      	movs	r3, #0
 8004142:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004146:	2300      	movs	r3, #0
 8004148:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004152:	2300      	movs	r3, #0
 8004154:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800415c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004160:	4619      	mov	r1, r3
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff fde6 	bl	8003d34 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004168:	2301      	movs	r3, #1
 800416a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800416c:	2301      	movs	r3, #1
 800416e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004170:	2300      	movs	r3, #0
 8004172:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004174:	2300      	movs	r3, #0
 8004176:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800417a:	2300      	movs	r3, #0
 800417c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800417e:	2300      	movs	r3, #0
 8004180:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004182:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004186:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800418c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004190:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004198:	f44f 7306 	mov.w	r3, #536	; 0x218
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800419e:	f107 0308 	add.w	r3, r7, #8
 80041a2:	4619      	mov	r1, r3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fee1 	bl	8003f6c <ETH_SetDMAConfig>
}
 80041aa:	bf00      	nop
 80041ac:	3790      	adds	r7, #144	; 0x90
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80041ce:	f002 fa01 	bl	80065d4 <HAL_RCC_GetHCLKFreq>
 80041d2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4a1e      	ldr	r2, [pc, #120]	; (8004250 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d908      	bls.n	80041ee <ETH_MAC_MDIO_ClkConfig+0x3a>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d804      	bhi.n	80041ee <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e027      	b.n	800423e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4a18      	ldr	r2, [pc, #96]	; (8004254 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d908      	bls.n	8004208 <ETH_MAC_MDIO_ClkConfig+0x54>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4a17      	ldr	r2, [pc, #92]	; (8004258 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d204      	bcs.n	8004208 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e01a      	b.n	800423e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4a13      	ldr	r2, [pc, #76]	; (8004258 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d303      	bcc.n	8004218 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4a12      	ldr	r2, [pc, #72]	; (800425c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d911      	bls.n	800423c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4a10      	ldr	r2, [pc, #64]	; (800425c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d908      	bls.n	8004232 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4a0f      	ldr	r2, [pc, #60]	; (8004260 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d804      	bhi.n	8004232 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e005      	b.n	800423e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e000      	b.n	800423e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800423c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	01312cff 	.word	0x01312cff
 8004254:	02160ebf 	.word	0x02160ebf
 8004258:	03938700 	.word	0x03938700
 800425c:	05f5e0ff 	.word	0x05f5e0ff
 8004260:	08f0d17f 	.word	0x08f0d17f

08004264 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e01d      	b.n	80042ae <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68d9      	ldr	r1, [r3, #12]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4613      	mov	r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4413      	add	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	440b      	add	r3, r1
 8004282:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2200      	movs	r2, #0
 800428e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2200      	movs	r2, #0
 8004294:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2200      	movs	r2, #0
 800429a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	3206      	adds	r2, #6
 80042a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d9de      	bls.n	8004272 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	f241 132c 	movw	r3, #4396	; 0x112c
 80042c2:	4413      	add	r3, r2
 80042c4:	2203      	movs	r2, #3
 80042c6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68d9      	ldr	r1, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	f241 1314 	movw	r3, #4372	; 0x1114
 80042d4:	4413      	add	r3, r2
 80042d6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80042e4:	601a      	str	r2, [r3, #0]
}
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e024      	b.n	800434a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6919      	ldr	r1, [r3, #16]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	440b      	add	r3, r1
 8004310:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2200      	movs	r2, #0
 800431c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2200      	movs	r2, #0
 8004322:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2200      	movs	r2, #0
 8004328:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2200      	movs	r2, #0
 800432e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3310      	adds	r3, #16
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3301      	adds	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d9d7      	bls.n	8004300 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	f241 1330 	movw	r3, #4400	; 0x1130
 8004376:	4413      	add	r3, r2
 8004378:	2203      	movs	r2, #3
 800437a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6919      	ldr	r1, [r3, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	f241 131c 	movw	r3, #4380	; 0x111c
 8004388:	4413      	add	r3, r2
 800438a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	f241 1328 	movw	r3, #4392	; 0x1128
 800439c:	4413      	add	r3, r2
 800439e:	6019      	str	r1, [r3, #0]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b08d      	sub	sp, #52	; 0x34
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3318      	adds	r3, #24
 80043bc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 80043ca:	2300      	movs	r3, #0
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ee:	d007      	beq.n	8004400 <ETH_Prepare_Tx_Descriptors+0x54>
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	3304      	adds	r3, #4
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004400:	2302      	movs	r3, #2
 8004402:	e24a      	b.n	800489a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d044      	beq.n	800449a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	4b72      	ldr	r3, [pc, #456]	; (80045e0 <ETH_Prepare_Tx_Descriptors+0x234>)
 8004416:	4013      	ands	r3, r2
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800441c:	431a      	orrs	r2, r3
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800443c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d027      	beq.n	800449a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	b29a      	uxth	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	431a      	orrs	r2, r3
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	431a      	orrs	r2, r3
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004488:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004498:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00e      	beq.n	80044c4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	4b4e      	ldr	r3, [pc, #312]	; (80045e4 <ETH_Prepare_Tx_Descriptors+0x238>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	6992      	ldr	r2, [r2, #24]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <ETH_Prepare_Tx_Descriptors+0x130>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d030      	beq.n	800453e <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	3301      	adds	r3, #1
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d902      	bls.n	8004506 <ETH_Prepare_Tx_Descriptors+0x15a>
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	3b04      	subs	r3, #4
 8004504:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800450a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	3301      	adds	r3, #1
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800451e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004522:	d10c      	bne.n	800453e <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800453a:	2302      	movs	r3, #2
 800453c:	e1ad      	b.n	800489a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	3301      	adds	r3, #1
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8004554:	4013      	ands	r3, r2
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	6852      	ldr	r2, [r2, #4]
 800455a:	431a      	orrs	r2, r3
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d012      	beq.n	800458e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 800457e:	4013      	ands	r3, r2
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	6852      	ldr	r2, [r2, #4]
 8004584:	0412      	lsls	r2, r2, #16
 8004586:	431a      	orrs	r2, r3
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	e008      	b.n	80045a0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	2200      	movs	r2, #0
 8004592:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 800459a:	4013      	ands	r3, r2
 800459c:	6a3a      	ldr	r2, [r7, #32]
 800459e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d021      	beq.n	80045f0 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	04db      	lsls	r3, r3, #19
 80045ba:	431a      	orrs	r2, r3
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <ETH_Prepare_Tx_Descriptors+0x240>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	69d2      	ldr	r2, [r2, #28]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	e02e      	b.n	800463e <ETH_Prepare_Tx_Descriptors+0x292>
 80045e0:	ffff0000 	.word	0xffff0000
 80045e4:	ffffc000 	.word	0xffffc000
 80045e8:	c000ffff 	.word	0xc000ffff
 80045ec:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	4b93      	ldr	r3, [pc, #588]	; (8004844 <ETH_Prepare_Tx_Descriptors+0x498>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	6852      	ldr	r2, [r2, #4]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	431a      	orrs	r2, r3
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	431a      	orrs	r2, r3
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	431a      	orrs	r2, r3
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80cb 	beq.w	8004824 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	431a      	orrs	r2, r3
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80046a0:	e0c0      	b.n	8004824 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	3301      	adds	r3, #1
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d902      	bls.n	80046c0 <ETH_Prepare_Tx_Descriptors+0x314>
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	3b04      	subs	r3, #4
 80046be:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046e2:	d007      	beq.n	80046f4 <ETH_Prepare_Tx_Descriptors+0x348>
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e8:	3304      	adds	r3, #4
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d026      	beq.n	8004742 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004700:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
 8004706:	e016      	b.n	8004736 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004716:	3301      	adds	r3, #1
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	2b03      	cmp	r3, #3
 800471e:	d902      	bls.n	8004726 <ETH_Prepare_Tx_Descriptors+0x37a>
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	3b04      	subs	r3, #4
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800472a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800472e:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	3301      	adds	r3, #1
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
 8004736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	429a      	cmp	r2, r3
 800473c:	d3e4      	bcc.n	8004708 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 800473e:	2302      	movs	r3, #2
 8004740:	e0ab      	b.n	800489a <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	3301      	adds	r3, #1
 8004746:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	4b3a      	ldr	r3, [pc, #232]	; (8004848 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800475e:	4013      	ands	r3, r2
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	6852      	ldr	r2, [r2, #4]
 8004764:	431a      	orrs	r2, r3
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d012      	beq.n	8004798 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	4b31      	ldr	r3, [pc, #196]	; (800484c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004788:	4013      	ands	r3, r2
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	6852      	ldr	r2, [r2, #4]
 800478e:	0412      	lsls	r2, r2, #16
 8004790:	431a      	orrs	r2, r3
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	e008      	b.n	80047aa <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	2200      	movs	r2, #0
 800479c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	4b2a      	ldr	r3, [pc, #168]	; (800484c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	6a3a      	ldr	r2, [r7, #32]
 80047a8:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00f      	beq.n	80047d6 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	4b25      	ldr	r3, [pc, #148]	; (8004850 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80047bc:	4013      	ands	r3, r2
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	69d2      	ldr	r2, [r2, #28]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	60da      	str	r2, [r3, #12]
 80047d4:	e017      	b.n	8004806 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <ETH_Prepare_Tx_Descriptors+0x498>)
 80047dc:	4013      	ands	r3, r2
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	6852      	ldr	r2, [r2, #4]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	431a      	orrs	r2, r3
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	3301      	adds	r3, #1
 800480a:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f47f af3a 	bne.w	80046a2 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00f      	beq.n	8004854 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	e00e      	b.n	8004860 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8004842:	bf00      	nop
 8004844:	ffff8000 	.word	0xffff8000
 8004848:	ffffc000 	.word	0xffffc000
 800484c:	c000ffff 	.word	0xc000ffff
 8004850:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004870:	6979      	ldr	r1, [r7, #20]
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	3304      	adds	r3, #4
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004880:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004882:	b672      	cpsid	i
}
 8004884:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4413      	add	r3, r2
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004894:	b662      	cpsie	i
}
 8004896:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3734      	adds	r7, #52	; 0x34
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop

080048a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b098      	sub	sp, #96	; 0x60
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80048b0:	4a84      	ldr	r2, [pc, #528]	; (8004ac4 <HAL_FDCAN_Init+0x21c>)
 80048b2:	f107 030c 	add.w	r3, r7, #12
 80048b6:	4611      	mov	r1, r2
 80048b8:	224c      	movs	r2, #76	; 0x4c
 80048ba:	4618      	mov	r0, r3
 80048bc:	f014 fb49 	bl	8018f52 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e1ca      	b.n	8004c60 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a7e      	ldr	r2, [pc, #504]	; (8004ac8 <HAL_FDCAN_Init+0x220>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d106      	bne.n	80048e2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048dc:	461a      	mov	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fc fa88 	bl	8000e0c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0210 	bic.w	r2, r2, #16
 800490a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800490c:	f7fd ff80 	bl	8002810 <HAL_GetTick>
 8004910:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004912:	e014      	b.n	800493e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004914:	f7fd ff7c 	bl	8002810 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b0a      	cmp	r3, #10
 8004920:	d90d      	bls.n	800493e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004928:	f043 0201 	orr.w	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2203      	movs	r2, #3
 8004936:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e190      	b.n	8004c60 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b08      	cmp	r3, #8
 800494a:	d0e3      	beq.n	8004914 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800495c:	f7fd ff58 	bl	8002810 <HAL_GetTick>
 8004960:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004962:	e014      	b.n	800498e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004964:	f7fd ff54 	bl	8002810 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b0a      	cmp	r3, #10
 8004970:	d90d      	bls.n	800498e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004978:	f043 0201 	orr.w	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2203      	movs	r2, #3
 8004986:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e168      	b.n	8004c60 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0e3      	beq.n	8004964 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0202 	orr.w	r2, r2, #2
 80049aa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	7c1b      	ldrb	r3, [r3, #16]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d108      	bne.n	80049c6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c2:	619a      	str	r2, [r3, #24]
 80049c4:	e007      	b.n	80049d6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699a      	ldr	r2, [r3, #24]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	7c5b      	ldrb	r3, [r3, #17]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d108      	bne.n	80049f0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699a      	ldr	r2, [r3, #24]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ec:	619a      	str	r2, [r3, #24]
 80049ee:	e007      	b.n	8004a00 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	7c9b      	ldrb	r3, [r3, #18]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d108      	bne.n	8004a1a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a16:	619a      	str	r2, [r3, #24]
 8004a18:	e007      	b.n	8004a2a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699a      	ldr	r2, [r3, #24]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a28:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004a4e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0210 	bic.w	r2, r2, #16
 8004a5e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d108      	bne.n	8004a7a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0204 	orr.w	r2, r2, #4
 8004a76:	619a      	str	r2, [r3, #24]
 8004a78:	e030      	b.n	8004adc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d02c      	beq.n	8004adc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d020      	beq.n	8004acc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699a      	ldr	r2, [r3, #24]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a98:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0210 	orr.w	r2, r2, #16
 8004aa8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d114      	bne.n	8004adc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699a      	ldr	r2, [r3, #24]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0220 	orr.w	r2, r2, #32
 8004ac0:	619a      	str	r2, [r3, #24]
 8004ac2:	e00b      	b.n	8004adc <HAL_FDCAN_Init+0x234>
 8004ac4:	08019ff8 	.word	0x08019ff8
 8004ac8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0220 	orr.w	r2, r2, #32
 8004ada:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004aec:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004af4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b04:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b06:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b10:	d115      	bne.n	8004b3e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b20:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	3b01      	subs	r3, #1
 8004b28:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b2a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	3b01      	subs	r3, #1
 8004b34:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b3a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b3c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b64:	4413      	add	r3, r2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d012      	beq.n	8004b90 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004b72:	f023 0107 	bic.w	r1, r3, #7
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b80:	4413      	add	r3, r2
 8004b82:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d012      	beq.n	8004bbe <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ba0:	f023 0107 	bic.w	r1, r3, #7
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004bae:	4413      	add	r3, r2
 8004bb0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d013      	beq.n	8004bee <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004bce:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004bdc:	4413      	add	r3, r2
 8004bde:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004be2:	011a      	lsls	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d013      	beq.n	8004c1e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004bfe:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004c12:	021a      	lsls	r2, r3, #8
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a11      	ldr	r2, [pc, #68]	; (8004c68 <HAL_FDCAN_Init+0x3c0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d107      	bne.n	8004c38 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f022 0203 	bic.w	r2, r2, #3
 8004c36:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f9af 	bl	8004fb4 <FDCAN_CalcultateRamBlockAddresses>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004c5c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3760      	adds	r7, #96	; 0x60
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	4000a000 	.word	0x4000a000

08004c6c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004c7c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d002      	beq.n	8004c8a <HAL_FDCAN_ConfigFilter+0x1e>
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d157      	bne.n	8004d3a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d12b      	bne.n	8004cea <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	2b07      	cmp	r3, #7
 8004c98:	d10d      	bne.n	8004cb6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004ca6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004cac:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004cae:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	e00e      	b.n	8004cd4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004cc2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004cca:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e025      	b.n	8004d36 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	075a      	lsls	r2, r3, #29
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2b07      	cmp	r3, #7
 8004cfe:	d103      	bne.n	8004d08 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	e006      	b.n	8004d16 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	079a      	lsls	r2, r3, #30
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4413      	add	r3, r2
 8004d22:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	e008      	b.n	8004d4c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d40:	f043 0202 	orr.w	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
  }
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d110      	bne.n	8004d94 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004d7a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004d80:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e008      	b.n	8004da6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d9a:	f043 0204 	orr.w	r2, r3, #4
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d111      	bne.n	8004dea <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699a      	ldr	r2, [r3, #24]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e008      	b.n	8004dfc <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004df0:	f043 0204 	orr.w	r2, r3, #4
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
  }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d141      	bne.n	8004ea4 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e28:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d109      	bne.n	8004e44 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e038      	b.n	8004eb6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d009      	beq.n	8004e68 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e026      	b.n	8004eb6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 fa1e 	bl	80052c0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2101      	movs	r1, #1
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e90:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004e94:	2201      	movs	r2, #1
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	409a      	lsls	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e008      	b.n	8004eb6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eaa:	f043 0208 	orr.w	r2, r3, #8
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
  }
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004ed2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d002      	beq.n	8004ee0 <HAL_FDCAN_ActivateNotification+0x20>
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d155      	bne.n	8004f8c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d108      	bne.n	8004f00 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	65da      	str	r2, [r3, #92]	; 0x5c
 8004efe:	e014      	b.n	8004f2a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d108      	bne.n	8004f22 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0202 	orr.w	r2, r2, #2
 8004f1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f20:	e003      	b.n	8004f2a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2203      	movs	r2, #3
 8004f28:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d009      	beq.n	8004f66 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <HAL_FDCAN_ActivateNotification+0xec>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	6812      	ldr	r2, [r2, #0]
 8004f76:	430b      	orrs	r3, r1
 8004f78:	6553      	str	r3, [r2, #84]	; 0x54
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004f7c:	695a      	ldr	r2, [r3, #20]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	0f9b      	lsrs	r3, r3, #30
 8004f82:	490b      	ldr	r1, [pc, #44]	; (8004fb0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e008      	b.n	8004f9e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f92:	f043 0202 	orr.w	r2, r3, #2
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	3fcfffff 	.word	0x3fcfffff
 8004fb0:	4000a800 	.word	0x4000a800

08004fb4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004fca:	4ba7      	ldr	r3, [pc, #668]	; (8005268 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	0091      	lsls	r1, r2, #2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	041a      	lsls	r2, r3, #16
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	4413      	add	r3, r2
 8005000:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800500a:	4b97      	ldr	r3, [pc, #604]	; (8005268 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800500c:	4013      	ands	r3, r2
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	0091      	lsls	r1, r2, #2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	430b      	orrs	r3, r1
 8005018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502c:	041a      	lsls	r2, r3, #16
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	4413      	add	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800504c:	4b86      	ldr	r3, [pc, #536]	; (8005268 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800504e:	4013      	ands	r3, r2
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	0091      	lsls	r1, r2, #2
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	430b      	orrs	r3, r1
 800505a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005066:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	041a      	lsls	r2, r3, #16
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005082:	fb02 f303 	mul.w	r3, r2, r3
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	4413      	add	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005094:	4b74      	ldr	r3, [pc, #464]	; (8005268 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005096:	4013      	ands	r3, r2
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	0091      	lsls	r1, r2, #2
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	430b      	orrs	r3, r1
 80050a2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b6:	041a      	lsls	r2, r3, #16
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80050ca:	fb02 f303 	mul.w	r3, r2, r3
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4413      	add	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80050dc:	4b62      	ldr	r3, [pc, #392]	; (8005268 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050de:	4013      	ands	r3, r2
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	0091      	lsls	r1, r2, #2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	430b      	orrs	r3, r1
 80050ea:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4413      	add	r3, r2
 80050fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005108:	4b57      	ldr	r3, [pc, #348]	; (8005268 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800510a:	4013      	ands	r3, r2
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	0091      	lsls	r1, r2, #2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	430b      	orrs	r3, r1
 8005116:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005122:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512a:	041a      	lsls	r2, r3, #16
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	4413      	add	r3, r2
 8005140:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800514a:	4b47      	ldr	r3, [pc, #284]	; (8005268 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800514c:	4013      	ands	r3, r2
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	0091      	lsls	r1, r2, #2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	430b      	orrs	r3, r1
 8005158:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005164:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516c:	041a      	lsls	r2, r3, #16
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005180:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005188:	061a      	lsls	r2, r3, #24
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005198:	4b34      	ldr	r3, [pc, #208]	; (800526c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800519a:	4413      	add	r3, r2
 800519c:	009a      	lsls	r2, r3, #2
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	441a      	add	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	441a      	add	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80051ce:	fb01 f303 	mul.w	r3, r1, r3
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	441a      	add	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80051e6:	fb01 f303 	mul.w	r3, r1, r3
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	441a      	add	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80051fe:	fb01 f303 	mul.w	r3, r1, r3
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	441a      	add	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	441a      	add	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800522e:	fb01 f303 	mul.w	r3, r1, r3
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800524a:	fb01 f303 	mul.w	r3, r1, r3
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	441a      	add	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525e:	4a04      	ldr	r2, [pc, #16]	; (8005270 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d915      	bls.n	8005290 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005264:	e006      	b.n	8005274 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005266:	bf00      	nop
 8005268:	ffff0003 	.word	0xffff0003
 800526c:	10002b00 	.word	0x10002b00
 8005270:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800527a:	f043 0220 	orr.w	r2, r3, #32
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2203      	movs	r2, #3
 8005288:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e010      	b.n	80052b2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	e005      	b.n	80052a4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3304      	adds	r3, #4
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d3f3      	bcc.n	8005298 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop

080052c0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b089      	sub	sp, #36	; 0x24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80052de:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	e00a      	b.n	8005302 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80052f4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80052fa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80052fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005300:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800530c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005312:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005318:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	fb01 f303 	mul.w	r3, r1, r3
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	3304      	adds	r3, #4
 8005342:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	3304      	adds	r3, #4
 800534e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e020      	b.n	8005398 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	3303      	adds	r3, #3
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	3302      	adds	r3, #2
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	440b      	add	r3, r1
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800536e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	3301      	adds	r3, #1
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	440b      	add	r3, r1
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800537c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	440a      	add	r2, r1
 8005384:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005386:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	3304      	adds	r3, #4
 8005390:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	3304      	adds	r3, #4
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	4a06      	ldr	r2, [pc, #24]	; (80053b8 <FDCAN_CopyMessageToRAM+0xf8>)
 80053a0:	5cd3      	ldrb	r3, [r2, r3]
 80053a2:	461a      	mov	r2, r3
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d3d5      	bcc.n	8005356 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
 80053ae:	3724      	adds	r7, #36	; 0x24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	0801d360 	.word	0x0801d360

080053bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053bc:	b480      	push	{r7}
 80053be:	b089      	sub	sp, #36	; 0x24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80053ca:	4b86      	ldr	r3, [pc, #536]	; (80055e4 <HAL_GPIO_Init+0x228>)
 80053cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053ce:	e18c      	b.n	80056ea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	2101      	movs	r1, #1
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	fa01 f303 	lsl.w	r3, r1, r3
 80053dc:	4013      	ands	r3, r2
 80053de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 817e 	beq.w	80056e4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d005      	beq.n	8005400 <HAL_GPIO_Init+0x44>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 0303 	and.w	r3, r3, #3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d130      	bne.n	8005462 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	2203      	movs	r2, #3
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	43db      	mvns	r3, r3
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	4013      	ands	r3, r2
 8005416:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	4313      	orrs	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005436:	2201      	movs	r2, #1
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	43db      	mvns	r3, r3
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	4013      	ands	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	091b      	lsrs	r3, r3, #4
 800544c:	f003 0201 	and.w	r2, r3, #1
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4313      	orrs	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b03      	cmp	r3, #3
 800546c:	d017      	beq.n	800549e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	2203      	movs	r2, #3
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	4013      	ands	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	4313      	orrs	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d123      	bne.n	80054f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	08da      	lsrs	r2, r3, #3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3208      	adds	r2, #8
 80054b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	220f      	movs	r2, #15
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	43db      	mvns	r3, r3
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	4013      	ands	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	691a      	ldr	r2, [r3, #16]
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	08da      	lsrs	r2, r3, #3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3208      	adds	r2, #8
 80054ec:	69b9      	ldr	r1, [r7, #24]
 80054ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	2203      	movs	r2, #3
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43db      	mvns	r3, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4013      	ands	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f003 0203 	and.w	r2, r3, #3
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4313      	orrs	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 80d8 	beq.w	80056e4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005534:	4b2c      	ldr	r3, [pc, #176]	; (80055e8 <HAL_GPIO_Init+0x22c>)
 8005536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800553a:	4a2b      	ldr	r2, [pc, #172]	; (80055e8 <HAL_GPIO_Init+0x22c>)
 800553c:	f043 0302 	orr.w	r3, r3, #2
 8005540:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005544:	4b28      	ldr	r3, [pc, #160]	; (80055e8 <HAL_GPIO_Init+0x22c>)
 8005546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005552:	4a26      	ldr	r2, [pc, #152]	; (80055ec <HAL_GPIO_Init+0x230>)
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	089b      	lsrs	r3, r3, #2
 8005558:	3302      	adds	r3, #2
 800555a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800555e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	220f      	movs	r2, #15
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	43db      	mvns	r3, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4013      	ands	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a1d      	ldr	r2, [pc, #116]	; (80055f0 <HAL_GPIO_Init+0x234>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d04a      	beq.n	8005614 <HAL_GPIO_Init+0x258>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1c      	ldr	r2, [pc, #112]	; (80055f4 <HAL_GPIO_Init+0x238>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d02b      	beq.n	80055de <HAL_GPIO_Init+0x222>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a1b      	ldr	r2, [pc, #108]	; (80055f8 <HAL_GPIO_Init+0x23c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d025      	beq.n	80055da <HAL_GPIO_Init+0x21e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a1a      	ldr	r2, [pc, #104]	; (80055fc <HAL_GPIO_Init+0x240>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01f      	beq.n	80055d6 <HAL_GPIO_Init+0x21a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a19      	ldr	r2, [pc, #100]	; (8005600 <HAL_GPIO_Init+0x244>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d019      	beq.n	80055d2 <HAL_GPIO_Init+0x216>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a18      	ldr	r2, [pc, #96]	; (8005604 <HAL_GPIO_Init+0x248>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_GPIO_Init+0x212>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a17      	ldr	r2, [pc, #92]	; (8005608 <HAL_GPIO_Init+0x24c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00d      	beq.n	80055ca <HAL_GPIO_Init+0x20e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a16      	ldr	r2, [pc, #88]	; (800560c <HAL_GPIO_Init+0x250>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <HAL_GPIO_Init+0x20a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <HAL_GPIO_Init+0x254>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <HAL_GPIO_Init+0x206>
 80055be:	2309      	movs	r3, #9
 80055c0:	e029      	b.n	8005616 <HAL_GPIO_Init+0x25a>
 80055c2:	230a      	movs	r3, #10
 80055c4:	e027      	b.n	8005616 <HAL_GPIO_Init+0x25a>
 80055c6:	2307      	movs	r3, #7
 80055c8:	e025      	b.n	8005616 <HAL_GPIO_Init+0x25a>
 80055ca:	2306      	movs	r3, #6
 80055cc:	e023      	b.n	8005616 <HAL_GPIO_Init+0x25a>
 80055ce:	2305      	movs	r3, #5
 80055d0:	e021      	b.n	8005616 <HAL_GPIO_Init+0x25a>
 80055d2:	2304      	movs	r3, #4
 80055d4:	e01f      	b.n	8005616 <HAL_GPIO_Init+0x25a>
 80055d6:	2303      	movs	r3, #3
 80055d8:	e01d      	b.n	8005616 <HAL_GPIO_Init+0x25a>
 80055da:	2302      	movs	r3, #2
 80055dc:	e01b      	b.n	8005616 <HAL_GPIO_Init+0x25a>
 80055de:	2301      	movs	r3, #1
 80055e0:	e019      	b.n	8005616 <HAL_GPIO_Init+0x25a>
 80055e2:	bf00      	nop
 80055e4:	58000080 	.word	0x58000080
 80055e8:	58024400 	.word	0x58024400
 80055ec:	58000400 	.word	0x58000400
 80055f0:	58020000 	.word	0x58020000
 80055f4:	58020400 	.word	0x58020400
 80055f8:	58020800 	.word	0x58020800
 80055fc:	58020c00 	.word	0x58020c00
 8005600:	58021000 	.word	0x58021000
 8005604:	58021400 	.word	0x58021400
 8005608:	58021800 	.word	0x58021800
 800560c:	58021c00 	.word	0x58021c00
 8005610:	58022400 	.word	0x58022400
 8005614:	2300      	movs	r3, #0
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	f002 0203 	and.w	r2, r2, #3
 800561c:	0092      	lsls	r2, r2, #2
 800561e:	4093      	lsls	r3, r2
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4313      	orrs	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005626:	4938      	ldr	r1, [pc, #224]	; (8005708 <HAL_GPIO_Init+0x34c>)
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	089b      	lsrs	r3, r3, #2
 800562c:	3302      	adds	r3, #2
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	43db      	mvns	r3, r3
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	4013      	ands	r3, r2
 8005644:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800565a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	43db      	mvns	r3, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4013      	ands	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	43db      	mvns	r3, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	4013      	ands	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	3301      	adds	r3, #1
 80056e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f47f ae6b 	bne.w	80053d0 <HAL_GPIO_Init+0x14>
  }
}
 80056fa:	bf00      	nop
 80056fc:	bf00      	nop
 80056fe:	3724      	adds	r7, #36	; 0x24
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	58000400 	.word	0x58000400

0800570c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	807b      	strh	r3, [r7, #2]
 8005718:	4613      	mov	r3, r2
 800571a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800571c:	787b      	ldrb	r3, [r7, #1]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005722:	887a      	ldrh	r2, [r7, #2]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005728:	e003      	b.n	8005732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800572a:	887b      	ldrh	r3, [r7, #2]
 800572c:	041a      	lsls	r2, r3, #16
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	619a      	str	r2, [r3, #24]
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005750:	887a      	ldrh	r2, [r7, #2]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4013      	ands	r3, r2
 8005756:	041a      	lsls	r2, r3, #16
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	43d9      	mvns	r1, r3
 800575c:	887b      	ldrh	r3, [r7, #2]
 800575e:	400b      	ands	r3, r1
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	619a      	str	r2, [r3, #24]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	4603      	mov	r3, r0
 800577a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005780:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d008      	beq.n	800579e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800578c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	4618      	mov	r0, r3
 800579a:	f7fb fe69 	bl	8001470 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80057b0:	4b19      	ldr	r3, [pc, #100]	; (8005818 <HAL_PWREx_ConfigSupply+0x70>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d00a      	beq.n	80057d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80057bc:	4b16      	ldr	r3, [pc, #88]	; (8005818 <HAL_PWREx_ConfigSupply+0x70>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d001      	beq.n	80057ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e01f      	b.n	800580e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	e01d      	b.n	800580e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <HAL_PWREx_ConfigSupply+0x70>)
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f023 0207 	bic.w	r2, r3, #7
 80057da:	490f      	ldr	r1, [pc, #60]	; (8005818 <HAL_PWREx_ConfigSupply+0x70>)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80057e2:	f7fd f815 	bl	8002810 <HAL_GetTick>
 80057e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057e8:	e009      	b.n	80057fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80057ea:	f7fd f811 	bl	8002810 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057f8:	d901      	bls.n	80057fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e007      	b.n	800580e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057fe:	4b06      	ldr	r3, [pc, #24]	; (8005818 <HAL_PWREx_ConfigSupply+0x70>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580a:	d1ee      	bne.n	80057ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	58024800 	.word	0x58024800

0800581c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08c      	sub	sp, #48	; 0x30
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e397      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8087 	beq.w	800594a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800583c:	4b9e      	ldr	r3, [pc, #632]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005846:	4b9c      	ldr	r3, [pc, #624]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	2b10      	cmp	r3, #16
 8005850:	d007      	beq.n	8005862 <HAL_RCC_OscConfig+0x46>
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	2b18      	cmp	r3, #24
 8005856:	d110      	bne.n	800587a <HAL_RCC_OscConfig+0x5e>
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d10b      	bne.n	800587a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005862:	4b95      	ldr	r3, [pc, #596]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d06c      	beq.n	8005948 <HAL_RCC_OscConfig+0x12c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d168      	bne.n	8005948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e371      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005882:	d106      	bne.n	8005892 <HAL_RCC_OscConfig+0x76>
 8005884:	4b8c      	ldr	r3, [pc, #560]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a8b      	ldr	r2, [pc, #556]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 800588a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e02e      	b.n	80058f0 <HAL_RCC_OscConfig+0xd4>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x98>
 800589a:	4b87      	ldr	r3, [pc, #540]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a86      	ldr	r2, [pc, #536]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80058a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4b84      	ldr	r3, [pc, #528]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a83      	ldr	r2, [pc, #524]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80058ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	e01d      	b.n	80058f0 <HAL_RCC_OscConfig+0xd4>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058bc:	d10c      	bne.n	80058d8 <HAL_RCC_OscConfig+0xbc>
 80058be:	4b7e      	ldr	r3, [pc, #504]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a7d      	ldr	r2, [pc, #500]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80058c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	4b7b      	ldr	r3, [pc, #492]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a7a      	ldr	r2, [pc, #488]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80058d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	e00b      	b.n	80058f0 <HAL_RCC_OscConfig+0xd4>
 80058d8:	4b77      	ldr	r3, [pc, #476]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a76      	ldr	r2, [pc, #472]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80058de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	4b74      	ldr	r3, [pc, #464]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a73      	ldr	r2, [pc, #460]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80058ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d013      	beq.n	8005920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f8:	f7fc ff8a 	bl	8002810 <HAL_GetTick>
 80058fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005900:	f7fc ff86 	bl	8002810 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b64      	cmp	r3, #100	; 0x64
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e325      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005912:	4b69      	ldr	r3, [pc, #420]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f0      	beq.n	8005900 <HAL_RCC_OscConfig+0xe4>
 800591e:	e014      	b.n	800594a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005920:	f7fc ff76 	bl	8002810 <HAL_GetTick>
 8005924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005928:	f7fc ff72 	bl	8002810 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b64      	cmp	r3, #100	; 0x64
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e311      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800593a:	4b5f      	ldr	r3, [pc, #380]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x10c>
 8005946:	e000      	b.n	800594a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 808a 	beq.w	8005a6c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005958:	4b57      	ldr	r3, [pc, #348]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005960:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005962:	4b55      	ldr	r3, [pc, #340]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <HAL_RCC_OscConfig+0x162>
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	2b18      	cmp	r3, #24
 8005972:	d137      	bne.n	80059e4 <HAL_RCC_OscConfig+0x1c8>
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d132      	bne.n	80059e4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800597e:	4b4e      	ldr	r3, [pc, #312]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <HAL_RCC_OscConfig+0x17a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e2e3      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005996:	4b48      	ldr	r3, [pc, #288]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f023 0219 	bic.w	r2, r3, #25
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	4945      	ldr	r1, [pc, #276]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059a8:	f7fc ff32 	bl	8002810 <HAL_GetTick>
 80059ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059b0:	f7fc ff2e 	bl	8002810 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e2cd      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059c2:	4b3d      	ldr	r3, [pc, #244]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0f0      	beq.n	80059b0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ce:	4b3a      	ldr	r3, [pc, #232]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	061b      	lsls	r3, r3, #24
 80059dc:	4936      	ldr	r1, [pc, #216]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059e2:	e043      	b.n	8005a6c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d026      	beq.n	8005a3a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059ec:	4b32      	ldr	r3, [pc, #200]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f023 0219 	bic.w	r2, r3, #25
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	492f      	ldr	r1, [pc, #188]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fe:	f7fc ff07 	bl	8002810 <HAL_GetTick>
 8005a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a06:	f7fc ff03 	bl	8002810 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e2a2      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a18:	4b27      	ldr	r3, [pc, #156]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0f0      	beq.n	8005a06 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a24:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	061b      	lsls	r3, r3, #24
 8005a32:	4921      	ldr	r1, [pc, #132]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	604b      	str	r3, [r1, #4]
 8005a38:	e018      	b.n	8005a6c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a3a:	4b1f      	ldr	r3, [pc, #124]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1e      	ldr	r2, [pc, #120]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fc fee3 	bl	8002810 <HAL_GetTick>
 8005a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a4e:	f7fc fedf 	bl	8002810 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e27e      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a60:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d06d      	beq.n	8005b54 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a80:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d007      	beq.n	8005a9e <HAL_RCC_OscConfig+0x282>
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b18      	cmp	r3, #24
 8005a92:	d11e      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x2b6>
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d119      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a9e:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <HAL_RCC_OscConfig+0x29c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <HAL_RCC_OscConfig+0x2a0>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	2b80      	cmp	r3, #128	; 0x80
 8005ab0:	d004      	beq.n	8005abc <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e253      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
 8005ab6:	bf00      	nop
 8005ab8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005abc:	4ba3      	ldr	r3, [pc, #652]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	061b      	lsls	r3, r3, #24
 8005aca:	49a0      	ldr	r1, [pc, #640]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ad0:	e040      	b.n	8005b54 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d023      	beq.n	8005b22 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ada:	4b9c      	ldr	r3, [pc, #624]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a9b      	ldr	r2, [pc, #620]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae6:	f7fc fe93 	bl	8002810 <HAL_GetTick>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005aee:	f7fc fe8f 	bl	8002810 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e22e      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b00:	4b92      	ldr	r3, [pc, #584]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b0c:	4b8f      	ldr	r3, [pc, #572]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	061b      	lsls	r3, r3, #24
 8005b1a:	498c      	ldr	r1, [pc, #560]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60cb      	str	r3, [r1, #12]
 8005b20:	e018      	b.n	8005b54 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b22:	4b8a      	ldr	r3, [pc, #552]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a89      	ldr	r2, [pc, #548]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2e:	f7fc fe6f 	bl	8002810 <HAL_GetTick>
 8005b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b34:	e008      	b.n	8005b48 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005b36:	f7fc fe6b 	bl	8002810 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e20a      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b48:	4b80      	ldr	r3, [pc, #512]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1f0      	bne.n	8005b36 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d036      	beq.n	8005bce <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d019      	beq.n	8005b9c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b68:	4b78      	ldr	r3, [pc, #480]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b6c:	4a77      	ldr	r2, [pc, #476]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005b6e:	f043 0301 	orr.w	r3, r3, #1
 8005b72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b74:	f7fc fe4c 	bl	8002810 <HAL_GetTick>
 8005b78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b7c:	f7fc fe48 	bl	8002810 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e1e7      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b8e:	4b6f      	ldr	r3, [pc, #444]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0f0      	beq.n	8005b7c <HAL_RCC_OscConfig+0x360>
 8005b9a:	e018      	b.n	8005bce <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b9c:	4b6b      	ldr	r3, [pc, #428]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba0:	4a6a      	ldr	r2, [pc, #424]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005ba2:	f023 0301 	bic.w	r3, r3, #1
 8005ba6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba8:	f7fc fe32 	bl	8002810 <HAL_GetTick>
 8005bac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bb0:	f7fc fe2e 	bl	8002810 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e1cd      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bc2:	4b62      	ldr	r3, [pc, #392]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d036      	beq.n	8005c48 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d019      	beq.n	8005c16 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005be2:	4b5a      	ldr	r3, [pc, #360]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a59      	ldr	r2, [pc, #356]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005be8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005bee:	f7fc fe0f 	bl	8002810 <HAL_GetTick>
 8005bf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005bf6:	f7fc fe0b 	bl	8002810 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e1aa      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c08:	4b50      	ldr	r3, [pc, #320]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x3da>
 8005c14:	e018      	b.n	8005c48 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c16:	4b4d      	ldr	r3, [pc, #308]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a4c      	ldr	r2, [pc, #304]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c22:	f7fc fdf5 	bl	8002810 <HAL_GetTick>
 8005c26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c2a:	f7fc fdf1 	bl	8002810 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e190      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c3c:	4b43      	ldr	r3, [pc, #268]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1f0      	bne.n	8005c2a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8085 	beq.w	8005d60 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c56:	4b3e      	ldr	r3, [pc, #248]	; (8005d50 <HAL_RCC_OscConfig+0x534>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3d      	ldr	r2, [pc, #244]	; (8005d50 <HAL_RCC_OscConfig+0x534>)
 8005c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c62:	f7fc fdd5 	bl	8002810 <HAL_GetTick>
 8005c66:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c6a:	f7fc fdd1 	bl	8002810 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b64      	cmp	r3, #100	; 0x64
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e170      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c7c:	4b34      	ldr	r3, [pc, #208]	; (8005d50 <HAL_RCC_OscConfig+0x534>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0f0      	beq.n	8005c6a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d106      	bne.n	8005c9e <HAL_RCC_OscConfig+0x482>
 8005c90:	4b2e      	ldr	r3, [pc, #184]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	4a2d      	ldr	r2, [pc, #180]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c9c:	e02d      	b.n	8005cfa <HAL_RCC_OscConfig+0x4de>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x4a4>
 8005ca6:	4b29      	ldr	r3, [pc, #164]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005caa:	4a28      	ldr	r2, [pc, #160]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb2:	4b26      	ldr	r3, [pc, #152]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	4a25      	ldr	r2, [pc, #148]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005cb8:	f023 0304 	bic.w	r3, r3, #4
 8005cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cbe:	e01c      	b.n	8005cfa <HAL_RCC_OscConfig+0x4de>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b05      	cmp	r3, #5
 8005cc6:	d10c      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x4c6>
 8005cc8:	4b20      	ldr	r3, [pc, #128]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ccc:	4a1f      	ldr	r2, [pc, #124]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005cce:	f043 0304 	orr.w	r3, r3, #4
 8005cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd4:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	4a1c      	ldr	r2, [pc, #112]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce0:	e00b      	b.n	8005cfa <HAL_RCC_OscConfig+0x4de>
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005ce8:	f023 0301 	bic.w	r3, r3, #1
 8005cec:	6713      	str	r3, [r2, #112]	; 0x70
 8005cee:	4b17      	ldr	r3, [pc, #92]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	4a16      	ldr	r2, [pc, #88]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005cf4:	f023 0304 	bic.w	r3, r3, #4
 8005cf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d015      	beq.n	8005d2e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d02:	f7fc fd85 	bl	8002810 <HAL_GetTick>
 8005d06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d08:	e00a      	b.n	8005d20 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d0a:	f7fc fd81 	bl	8002810 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e11e      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0ee      	beq.n	8005d0a <HAL_RCC_OscConfig+0x4ee>
 8005d2c:	e018      	b.n	8005d60 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2e:	f7fc fd6f 	bl	8002810 <HAL_GetTick>
 8005d32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d34:	e00e      	b.n	8005d54 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d36:	f7fc fd6b 	bl	8002810 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d905      	bls.n	8005d54 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e108      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
 8005d4c:	58024400 	.word	0x58024400
 8005d50:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d54:	4b84      	ldr	r3, [pc, #528]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1ea      	bne.n	8005d36 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 80f9 	beq.w	8005f5c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d6a:	4b7f      	ldr	r3, [pc, #508]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d72:	2b18      	cmp	r3, #24
 8005d74:	f000 80b4 	beq.w	8005ee0 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	f040 8095 	bne.w	8005eac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d82:	4b79      	ldr	r3, [pc, #484]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a78      	ldr	r2, [pc, #480]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005d88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8e:	f7fc fd3f 	bl	8002810 <HAL_GetTick>
 8005d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d96:	f7fc fd3b 	bl	8002810 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e0da      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005da8:	4b6f      	ldr	r3, [pc, #444]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f0      	bne.n	8005d96 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005db4:	4b6c      	ldr	r3, [pc, #432]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005db6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005db8:	4b6c      	ldr	r3, [pc, #432]	; (8005f6c <HAL_RCC_OscConfig+0x750>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005dc4:	0112      	lsls	r2, r2, #4
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	4967      	ldr	r1, [pc, #412]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	628b      	str	r3, [r1, #40]	; 0x28
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	025b      	lsls	r3, r3, #9
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	3b01      	subs	r3, #1
 8005dea:	041b      	lsls	r3, r3, #16
 8005dec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	3b01      	subs	r3, #1
 8005df8:	061b      	lsls	r3, r3, #24
 8005dfa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005dfe:	495a      	ldr	r1, [pc, #360]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005e04:	4b58      	ldr	r3, [pc, #352]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	4a57      	ldr	r2, [pc, #348]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e0a:	f023 0301 	bic.w	r3, r3, #1
 8005e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e10:	4b55      	ldr	r3, [pc, #340]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e14:	4b56      	ldr	r3, [pc, #344]	; (8005f70 <HAL_RCC_OscConfig+0x754>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e1c:	00d2      	lsls	r2, r2, #3
 8005e1e:	4952      	ldr	r1, [pc, #328]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e24:	4b50      	ldr	r3, [pc, #320]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	f023 020c 	bic.w	r2, r3, #12
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	494d      	ldr	r1, [pc, #308]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e36:	4b4c      	ldr	r3, [pc, #304]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	f023 0202 	bic.w	r2, r3, #2
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e42:	4949      	ldr	r1, [pc, #292]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e48:	4b47      	ldr	r3, [pc, #284]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	4a46      	ldr	r2, [pc, #280]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e54:	4b44      	ldr	r3, [pc, #272]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	4a43      	ldr	r2, [pc, #268]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e60:	4b41      	ldr	r3, [pc, #260]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	4a40      	ldr	r2, [pc, #256]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005e6c:	4b3e      	ldr	r3, [pc, #248]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	4a3d      	ldr	r2, [pc, #244]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e72:	f043 0301 	orr.w	r3, r3, #1
 8005e76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e78:	4b3b      	ldr	r3, [pc, #236]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a3a      	ldr	r2, [pc, #232]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fc fcc4 	bl	8002810 <HAL_GetTick>
 8005e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e8c:	f7fc fcc0 	bl	8002810 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e05f      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e9e:	4b32      	ldr	r3, [pc, #200]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f0      	beq.n	8005e8c <HAL_RCC_OscConfig+0x670>
 8005eaa:	e057      	b.n	8005f5c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eac:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a2d      	ldr	r2, [pc, #180]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb8:	f7fc fcaa 	bl	8002810 <HAL_GetTick>
 8005ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec0:	f7fc fca6 	bl	8002810 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e045      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ed2:	4b25      	ldr	r3, [pc, #148]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x6a4>
 8005ede:	e03d      	b.n	8005f5c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ee0:	4b21      	ldr	r3, [pc, #132]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ee6:	4b20      	ldr	r3, [pc, #128]	; (8005f68 <HAL_RCC_OscConfig+0x74c>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d031      	beq.n	8005f58 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f003 0203 	and.w	r2, r3, #3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d12a      	bne.n	8005f58 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d122      	bne.n	8005f58 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d11a      	bne.n	8005f58 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	0a5b      	lsrs	r3, r3, #9
 8005f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d111      	bne.n	8005f58 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	0c1b      	lsrs	r3, r3, #16
 8005f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d108      	bne.n	8005f58 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	0e1b      	lsrs	r3, r3, #24
 8005f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f52:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d001      	beq.n	8005f5c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3730      	adds	r7, #48	; 0x30
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	58024400 	.word	0x58024400
 8005f6c:	fffffc0c 	.word	0xfffffc0c
 8005f70:	ffff0007 	.word	0xffff0007

08005f74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e19c      	b.n	80062c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f88:	4b8a      	ldr	r3, [pc, #552]	; (80061b4 <HAL_RCC_ClockConfig+0x240>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d910      	bls.n	8005fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f96:	4b87      	ldr	r3, [pc, #540]	; (80061b4 <HAL_RCC_ClockConfig+0x240>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f023 020f 	bic.w	r2, r3, #15
 8005f9e:	4985      	ldr	r1, [pc, #532]	; (80061b4 <HAL_RCC_ClockConfig+0x240>)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fa6:	4b83      	ldr	r3, [pc, #524]	; (80061b4 <HAL_RCC_ClockConfig+0x240>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d001      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e184      	b.n	80062c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d010      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	4b7b      	ldr	r3, [pc, #492]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d908      	bls.n	8005fe6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fd4:	4b78      	ldr	r3, [pc, #480]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	4975      	ldr	r1, [pc, #468]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d010      	beq.n	8006014 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695a      	ldr	r2, [r3, #20]
 8005ff6:	4b70      	ldr	r3, [pc, #448]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d908      	bls.n	8006014 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006002:	4b6d      	ldr	r3, [pc, #436]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	496a      	ldr	r1, [pc, #424]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006010:	4313      	orrs	r3, r2
 8006012:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b00      	cmp	r3, #0
 800601e:	d010      	beq.n	8006042 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699a      	ldr	r2, [r3, #24]
 8006024:	4b64      	ldr	r3, [pc, #400]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800602c:	429a      	cmp	r2, r3
 800602e:	d908      	bls.n	8006042 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006030:	4b61      	ldr	r3, [pc, #388]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	495e      	ldr	r1, [pc, #376]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 800603e:	4313      	orrs	r3, r2
 8006040:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d010      	beq.n	8006070 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69da      	ldr	r2, [r3, #28]
 8006052:	4b59      	ldr	r3, [pc, #356]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800605a:	429a      	cmp	r2, r3
 800605c:	d908      	bls.n	8006070 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800605e:	4b56      	ldr	r3, [pc, #344]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	4953      	ldr	r1, [pc, #332]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 800606c:	4313      	orrs	r3, r2
 800606e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d010      	beq.n	800609e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	4b4d      	ldr	r3, [pc, #308]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	429a      	cmp	r2, r3
 800608a:	d908      	bls.n	800609e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800608c:	4b4a      	ldr	r3, [pc, #296]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	f023 020f 	bic.w	r2, r3, #15
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	4947      	ldr	r1, [pc, #284]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 800609a:	4313      	orrs	r3, r2
 800609c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d055      	beq.n	8006156 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80060aa:	4b43      	ldr	r3, [pc, #268]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	4940      	ldr	r1, [pc, #256]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d107      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060c4:	4b3c      	ldr	r3, [pc, #240]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d121      	bne.n	8006114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0f6      	b.n	80062c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d107      	bne.n	80060ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060dc:	4b36      	ldr	r3, [pc, #216]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d115      	bne.n	8006114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0ea      	b.n	80062c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d107      	bne.n	8006104 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060f4:	4b30      	ldr	r3, [pc, #192]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d109      	bne.n	8006114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0de      	b.n	80062c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006104:	4b2c      	ldr	r3, [pc, #176]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e0d6      	b.n	80062c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006114:	4b28      	ldr	r3, [pc, #160]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f023 0207 	bic.w	r2, r3, #7
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	4925      	ldr	r1, [pc, #148]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006122:	4313      	orrs	r3, r2
 8006124:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006126:	f7fc fb73 	bl	8002810 <HAL_GetTick>
 800612a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800612c:	e00a      	b.n	8006144 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800612e:	f7fc fb6f 	bl	8002810 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f241 3288 	movw	r2, #5000	; 0x1388
 800613c:	4293      	cmp	r3, r2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e0be      	b.n	80062c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006144:	4b1c      	ldr	r3, [pc, #112]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	429a      	cmp	r2, r3
 8006154:	d1eb      	bne.n	800612e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d010      	beq.n	8006184 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	429a      	cmp	r2, r3
 8006170:	d208      	bcs.n	8006184 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006172:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f023 020f 	bic.w	r2, r3, #15
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	490e      	ldr	r1, [pc, #56]	; (80061b8 <HAL_RCC_ClockConfig+0x244>)
 8006180:	4313      	orrs	r3, r2
 8006182:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006184:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <HAL_RCC_ClockConfig+0x240>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 030f 	and.w	r3, r3, #15
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d214      	bcs.n	80061bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006192:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <HAL_RCC_ClockConfig+0x240>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 020f 	bic.w	r2, r3, #15
 800619a:	4906      	ldr	r1, [pc, #24]	; (80061b4 <HAL_RCC_ClockConfig+0x240>)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	4313      	orrs	r3, r2
 80061a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061a2:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <HAL_RCC_ClockConfig+0x240>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e086      	b.n	80062c2 <HAL_RCC_ClockConfig+0x34e>
 80061b4:	52002000 	.word	0x52002000
 80061b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d010      	beq.n	80061ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	4b3f      	ldr	r3, [pc, #252]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d208      	bcs.n	80061ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061d8:	4b3c      	ldr	r3, [pc, #240]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	4939      	ldr	r1, [pc, #228]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d010      	beq.n	8006218 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	4b34      	ldr	r3, [pc, #208]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006202:	429a      	cmp	r2, r3
 8006204:	d208      	bcs.n	8006218 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006206:	4b31      	ldr	r3, [pc, #196]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	492e      	ldr	r1, [pc, #184]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 8006214:	4313      	orrs	r3, r2
 8006216:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b00      	cmp	r3, #0
 8006222:	d010      	beq.n	8006246 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699a      	ldr	r2, [r3, #24]
 8006228:	4b28      	ldr	r3, [pc, #160]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006230:	429a      	cmp	r2, r3
 8006232:	d208      	bcs.n	8006246 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006234:	4b25      	ldr	r3, [pc, #148]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	4922      	ldr	r1, [pc, #136]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 8006242:	4313      	orrs	r3, r2
 8006244:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d010      	beq.n	8006274 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69da      	ldr	r2, [r3, #28]
 8006256:	4b1d      	ldr	r3, [pc, #116]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800625e:	429a      	cmp	r2, r3
 8006260:	d208      	bcs.n	8006274 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006262:	4b1a      	ldr	r3, [pc, #104]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	4917      	ldr	r1, [pc, #92]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 8006270:	4313      	orrs	r3, r2
 8006272:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006274:	f000 f834 	bl	80062e0 <HAL_RCC_GetSysClockFreq>
 8006278:	4602      	mov	r2, r0
 800627a:	4b14      	ldr	r3, [pc, #80]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	0a1b      	lsrs	r3, r3, #8
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	4912      	ldr	r1, [pc, #72]	; (80062d0 <HAL_RCC_ClockConfig+0x35c>)
 8006286:	5ccb      	ldrb	r3, [r1, r3]
 8006288:	f003 031f 	and.w	r3, r3, #31
 800628c:	fa22 f303 	lsr.w	r3, r2, r3
 8006290:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006292:	4b0e      	ldr	r3, [pc, #56]	; (80062cc <HAL_RCC_ClockConfig+0x358>)
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	4a0d      	ldr	r2, [pc, #52]	; (80062d0 <HAL_RCC_ClockConfig+0x35c>)
 800629c:	5cd3      	ldrb	r3, [r2, r3]
 800629e:	f003 031f 	and.w	r3, r3, #31
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	fa22 f303 	lsr.w	r3, r2, r3
 80062a8:	4a0a      	ldr	r2, [pc, #40]	; (80062d4 <HAL_RCC_ClockConfig+0x360>)
 80062aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062ac:	4a0a      	ldr	r2, [pc, #40]	; (80062d8 <HAL_RCC_ClockConfig+0x364>)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80062b2:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <HAL_RCC_ClockConfig+0x368>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fb fb6e 	bl	8001998 <HAL_InitTick>
 80062bc:	4603      	mov	r3, r0
 80062be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	58024400 	.word	0x58024400
 80062d0:	0801d350 	.word	0x0801d350
 80062d4:	2400000c 	.word	0x2400000c
 80062d8:	24000008 	.word	0x24000008
 80062dc:	24000010 	.word	0x24000010

080062e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b089      	sub	sp, #36	; 0x24
 80062e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062e6:	4bb3      	ldr	r3, [pc, #716]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ee:	2b18      	cmp	r3, #24
 80062f0:	f200 8155 	bhi.w	800659e <HAL_RCC_GetSysClockFreq+0x2be>
 80062f4:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80062f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fa:	bf00      	nop
 80062fc:	08006361 	.word	0x08006361
 8006300:	0800659f 	.word	0x0800659f
 8006304:	0800659f 	.word	0x0800659f
 8006308:	0800659f 	.word	0x0800659f
 800630c:	0800659f 	.word	0x0800659f
 8006310:	0800659f 	.word	0x0800659f
 8006314:	0800659f 	.word	0x0800659f
 8006318:	0800659f 	.word	0x0800659f
 800631c:	08006387 	.word	0x08006387
 8006320:	0800659f 	.word	0x0800659f
 8006324:	0800659f 	.word	0x0800659f
 8006328:	0800659f 	.word	0x0800659f
 800632c:	0800659f 	.word	0x0800659f
 8006330:	0800659f 	.word	0x0800659f
 8006334:	0800659f 	.word	0x0800659f
 8006338:	0800659f 	.word	0x0800659f
 800633c:	0800638d 	.word	0x0800638d
 8006340:	0800659f 	.word	0x0800659f
 8006344:	0800659f 	.word	0x0800659f
 8006348:	0800659f 	.word	0x0800659f
 800634c:	0800659f 	.word	0x0800659f
 8006350:	0800659f 	.word	0x0800659f
 8006354:	0800659f 	.word	0x0800659f
 8006358:	0800659f 	.word	0x0800659f
 800635c:	08006393 	.word	0x08006393
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006360:	4b94      	ldr	r3, [pc, #592]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b00      	cmp	r3, #0
 800636a:	d009      	beq.n	8006380 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800636c:	4b91      	ldr	r3, [pc, #580]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	08db      	lsrs	r3, r3, #3
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	4a90      	ldr	r2, [pc, #576]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006378:	fa22 f303 	lsr.w	r3, r2, r3
 800637c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800637e:	e111      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006380:	4b8d      	ldr	r3, [pc, #564]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006382:	61bb      	str	r3, [r7, #24]
    break;
 8006384:	e10e      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006386:	4b8d      	ldr	r3, [pc, #564]	; (80065bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006388:	61bb      	str	r3, [r7, #24]
    break;
 800638a:	e10b      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800638c:	4b8c      	ldr	r3, [pc, #560]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800638e:	61bb      	str	r3, [r7, #24]
    break;
 8006390:	e108      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006392:	4b88      	ldr	r3, [pc, #544]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800639c:	4b85      	ldr	r3, [pc, #532]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063a8:	4b82      	ldr	r3, [pc, #520]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063b2:	4b80      	ldr	r3, [pc, #512]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b6:	08db      	lsrs	r3, r3, #3
 80063b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	fb02 f303 	mul.w	r3, r2, r3
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 80e1 	beq.w	8006598 <HAL_RCC_GetSysClockFreq+0x2b8>
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	f000 8083 	beq.w	80064e4 <HAL_RCC_GetSysClockFreq+0x204>
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	f200 80a1 	bhi.w	8006528 <HAL_RCC_GetSysClockFreq+0x248>
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <HAL_RCC_GetSysClockFreq+0x114>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d056      	beq.n	80064a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80063f2:	e099      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063f4:	4b6f      	ldr	r3, [pc, #444]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d02d      	beq.n	800645c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006400:	4b6c      	ldr	r3, [pc, #432]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	08db      	lsrs	r3, r3, #3
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	4a6b      	ldr	r2, [pc, #428]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800640c:	fa22 f303 	lsr.w	r3, r2, r3
 8006410:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	ee07 3a90 	vmov	s15, r3
 8006418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642a:	4b62      	ldr	r3, [pc, #392]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800642c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643a:	ed97 6a02 	vldr	s12, [r7, #8]
 800643e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80065c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800644e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006456:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800645a:	e087      	b.n	800656c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006466:	eddf 6a58 	vldr	s13, [pc, #352]	; 80065c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800646a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800646e:	4b51      	ldr	r3, [pc, #324]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006482:	eddf 5a50 	vldr	s11, [pc, #320]	; 80065c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800648e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800649e:	e065      	b.n	800656c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80065cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80064ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b2:	4b40      	ldr	r3, [pc, #256]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80065c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064e2:	e043      	b.n	800656c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80065d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80064f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f6:	4b2f      	ldr	r3, [pc, #188]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006506:	ed97 6a02 	vldr	s12, [r7, #8]
 800650a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80065c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800650e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800651a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800651e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006526:	e021      	b.n	800656c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006532:	eddf 6a26 	vldr	s13, [pc, #152]	; 80065cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800653a:	4b1e      	ldr	r3, [pc, #120]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800654a:	ed97 6a02 	vldr	s12, [r7, #8]
 800654e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80065c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800655a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800655e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800656a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	0a5b      	lsrs	r3, r3, #9
 8006572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006576:	3301      	adds	r3, #1
 8006578:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	ee07 3a90 	vmov	s15, r3
 8006580:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006584:	edd7 6a07 	vldr	s13, [r7, #28]
 8006588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800658c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006590:	ee17 3a90 	vmov	r3, s15
 8006594:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006596:	e005      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	61bb      	str	r3, [r7, #24]
    break;
 800659c:	e002      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800659e:	4b07      	ldr	r3, [pc, #28]	; (80065bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065a0:	61bb      	str	r3, [r7, #24]
    break;
 80065a2:	bf00      	nop
  }

  return sysclockfreq;
 80065a4:	69bb      	ldr	r3, [r7, #24]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3724      	adds	r7, #36	; 0x24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	58024400 	.word	0x58024400
 80065b8:	03d09000 	.word	0x03d09000
 80065bc:	003d0900 	.word	0x003d0900
 80065c0:	007a1200 	.word	0x007a1200
 80065c4:	46000000 	.word	0x46000000
 80065c8:	4c742400 	.word	0x4c742400
 80065cc:	4a742400 	.word	0x4a742400
 80065d0:	4af42400 	.word	0x4af42400

080065d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80065da:	f7ff fe81 	bl	80062e0 <HAL_RCC_GetSysClockFreq>
 80065de:	4602      	mov	r2, r0
 80065e0:	4b10      	ldr	r3, [pc, #64]	; (8006624 <HAL_RCC_GetHCLKFreq+0x50>)
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	0a1b      	lsrs	r3, r3, #8
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	490f      	ldr	r1, [pc, #60]	; (8006628 <HAL_RCC_GetHCLKFreq+0x54>)
 80065ec:	5ccb      	ldrb	r3, [r1, r3]
 80065ee:	f003 031f 	and.w	r3, r3, #31
 80065f2:	fa22 f303 	lsr.w	r3, r2, r3
 80065f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <HAL_RCC_GetHCLKFreq+0x50>)
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	4a09      	ldr	r2, [pc, #36]	; (8006628 <HAL_RCC_GetHCLKFreq+0x54>)
 8006602:	5cd3      	ldrb	r3, [r2, r3]
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	fa22 f303 	lsr.w	r3, r2, r3
 800660e:	4a07      	ldr	r2, [pc, #28]	; (800662c <HAL_RCC_GetHCLKFreq+0x58>)
 8006610:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006612:	4a07      	ldr	r2, [pc, #28]	; (8006630 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006618:	4b04      	ldr	r3, [pc, #16]	; (800662c <HAL_RCC_GetHCLKFreq+0x58>)
 800661a:	681b      	ldr	r3, [r3, #0]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	58024400 	.word	0x58024400
 8006628:	0801d350 	.word	0x0801d350
 800662c:	2400000c 	.word	0x2400000c
 8006630:	24000008 	.word	0x24000008

08006634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006638:	f7ff ffcc 	bl	80065d4 <HAL_RCC_GetHCLKFreq>
 800663c:	4602      	mov	r2, r0
 800663e:	4b06      	ldr	r3, [pc, #24]	; (8006658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	091b      	lsrs	r3, r3, #4
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	4904      	ldr	r1, [pc, #16]	; (800665c <HAL_RCC_GetPCLK1Freq+0x28>)
 800664a:	5ccb      	ldrb	r3, [r1, r3]
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006654:	4618      	mov	r0, r3
 8006656:	bd80      	pop	{r7, pc}
 8006658:	58024400 	.word	0x58024400
 800665c:	0801d350 	.word	0x0801d350

08006660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006664:	f7ff ffb6 	bl	80065d4 <HAL_RCC_GetHCLKFreq>
 8006668:	4602      	mov	r2, r0
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <HAL_RCC_GetPCLK2Freq+0x24>)
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	0a1b      	lsrs	r3, r3, #8
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	4904      	ldr	r1, [pc, #16]	; (8006688 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006676:	5ccb      	ldrb	r3, [r1, r3]
 8006678:	f003 031f 	and.w	r3, r3, #31
 800667c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006680:	4618      	mov	r0, r3
 8006682:	bd80      	pop	{r7, pc}
 8006684:	58024400 	.word	0x58024400
 8006688:	0801d350 	.word	0x0801d350

0800668c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	223f      	movs	r2, #63	; 0x3f
 800669a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800669c:	4b1a      	ldr	r3, [pc, #104]	; (8006708 <HAL_RCC_GetClockConfig+0x7c>)
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f003 0207 	and.w	r2, r3, #7
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80066a8:	4b17      	ldr	r3, [pc, #92]	; (8006708 <HAL_RCC_GetClockConfig+0x7c>)
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80066b4:	4b14      	ldr	r3, [pc, #80]	; (8006708 <HAL_RCC_GetClockConfig+0x7c>)
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	f003 020f 	and.w	r2, r3, #15
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80066c0:	4b11      	ldr	r3, [pc, #68]	; (8006708 <HAL_RCC_GetClockConfig+0x7c>)
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80066cc:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <HAL_RCC_GetClockConfig+0x7c>)
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80066d8:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <HAL_RCC_GetClockConfig+0x7c>)
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80066e4:	4b08      	ldr	r3, [pc, #32]	; (8006708 <HAL_RCC_GetClockConfig+0x7c>)
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <HAL_RCC_GetClockConfig+0x80>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 020f 	and.w	r2, r3, #15
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	601a      	str	r2, [r3, #0]
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	58024400 	.word	0x58024400
 800670c:	52002000 	.word	0x52002000

08006710 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006718:	2300      	movs	r3, #0
 800671a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800671c:	2300      	movs	r3, #0
 800671e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d03f      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006730:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006734:	d02a      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006736:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800673a:	d824      	bhi.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800673c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006740:	d018      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006746:	d81e      	bhi.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800674c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006750:	d007      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006752:	e018      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006754:	4bab      	ldr	r3, [pc, #684]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	4aaa      	ldr	r2, [pc, #680]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800675a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006760:	e015      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3304      	adds	r3, #4
 8006766:	2102      	movs	r1, #2
 8006768:	4618      	mov	r0, r3
 800676a:	f001 f989 	bl	8007a80 <RCCEx_PLL2_Config>
 800676e:	4603      	mov	r3, r0
 8006770:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006772:	e00c      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3324      	adds	r3, #36	; 0x24
 8006778:	2102      	movs	r1, #2
 800677a:	4618      	mov	r0, r3
 800677c:	f001 fa32 	bl	8007be4 <RCCEx_PLL3_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006784:	e003      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	75fb      	strb	r3, [r7, #23]
      break;
 800678a:	e000      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800678c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d109      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006794:	4b9b      	ldr	r3, [pc, #620]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a0:	4998      	ldr	r1, [pc, #608]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	650b      	str	r3, [r1, #80]	; 0x50
 80067a6:	e001      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
 80067aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d03d      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067bc:	2b04      	cmp	r3, #4
 80067be:	d826      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067dd 	.word	0x080067dd
 80067cc:	080067eb 	.word	0x080067eb
 80067d0:	080067fd 	.word	0x080067fd
 80067d4:	08006815 	.word	0x08006815
 80067d8:	08006815 	.word	0x08006815
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067dc:	4b89      	ldr	r3, [pc, #548]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	4a88      	ldr	r2, [pc, #544]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067e8:	e015      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3304      	adds	r3, #4
 80067ee:	2100      	movs	r1, #0
 80067f0:	4618      	mov	r0, r3
 80067f2:	f001 f945 	bl	8007a80 <RCCEx_PLL2_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067fa:	e00c      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3324      	adds	r3, #36	; 0x24
 8006800:	2100      	movs	r1, #0
 8006802:	4618      	mov	r0, r3
 8006804:	f001 f9ee 	bl	8007be4 <RCCEx_PLL3_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800680c:	e003      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	75fb      	strb	r3, [r7, #23]
      break;
 8006812:	e000      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d109      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800681c:	4b79      	ldr	r3, [pc, #484]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800681e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006820:	f023 0207 	bic.w	r2, r3, #7
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006828:	4976      	ldr	r1, [pc, #472]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800682a:	4313      	orrs	r3, r2
 800682c:	650b      	str	r3, [r1, #80]	; 0x50
 800682e:	e001      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800683c:	2b00      	cmp	r3, #0
 800683e:	d051      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006846:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800684a:	d036      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800684c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006850:	d830      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006852:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006856:	d032      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006858:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800685c:	d82a      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800685e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006862:	d02e      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006864:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006868:	d824      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800686a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800686e:	d018      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006874:	d81e      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800687a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800687e:	d007      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006880:	e018      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006882:	4b60      	ldr	r3, [pc, #384]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	4a5f      	ldr	r2, [pc, #380]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800688c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800688e:	e019      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3304      	adds	r3, #4
 8006894:	2100      	movs	r1, #0
 8006896:	4618      	mov	r0, r3
 8006898:	f001 f8f2 	bl	8007a80 <RCCEx_PLL2_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80068a0:	e010      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3324      	adds	r3, #36	; 0x24
 80068a6:	2100      	movs	r1, #0
 80068a8:	4618      	mov	r0, r3
 80068aa:	f001 f99b 	bl	8007be4 <RCCEx_PLL3_Config>
 80068ae:	4603      	mov	r3, r0
 80068b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068b2:	e007      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	75fb      	strb	r3, [r7, #23]
      break;
 80068b8:	e004      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80068ba:	bf00      	nop
 80068bc:	e002      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80068be:	bf00      	nop
 80068c0:	e000      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80068c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10a      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80068ca:	4b4e      	ldr	r3, [pc, #312]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ce:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80068d8:	494a      	ldr	r1, [pc, #296]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	658b      	str	r3, [r1, #88]	; 0x58
 80068de:	e001      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d051      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068f6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80068fa:	d036      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80068fc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006900:	d830      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006902:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006906:	d032      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800690c:	d82a      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800690e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006912:	d02e      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006914:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006918:	d824      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800691a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800691e:	d018      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006924:	d81e      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800692a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800692e:	d007      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006930:	e018      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006932:	4b34      	ldr	r3, [pc, #208]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006936:	4a33      	ldr	r2, [pc, #204]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800693c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800693e:	e019      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3304      	adds	r3, #4
 8006944:	2100      	movs	r1, #0
 8006946:	4618      	mov	r0, r3
 8006948:	f001 f89a 	bl	8007a80 <RCCEx_PLL2_Config>
 800694c:	4603      	mov	r3, r0
 800694e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006950:	e010      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3324      	adds	r3, #36	; 0x24
 8006956:	2100      	movs	r1, #0
 8006958:	4618      	mov	r0, r3
 800695a:	f001 f943 	bl	8007be4 <RCCEx_PLL3_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006962:	e007      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	75fb      	strb	r3, [r7, #23]
      break;
 8006968:	e004      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800696a:	bf00      	nop
 800696c:	e002      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800696e:	bf00      	nop
 8006970:	e000      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800697a:	4b22      	ldr	r3, [pc, #136]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800697c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006988:	491e      	ldr	r1, [pc, #120]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800698a:	4313      	orrs	r3, r2
 800698c:	658b      	str	r3, [r1, #88]	; 0x58
 800698e:	e001      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006990:	7dfb      	ldrb	r3, [r7, #23]
 8006992:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d035      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a4:	2b30      	cmp	r3, #48	; 0x30
 80069a6:	d01c      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80069a8:	2b30      	cmp	r3, #48	; 0x30
 80069aa:	d817      	bhi.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	d00c      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d813      	bhi.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d016      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80069b8:	2b10      	cmp	r3, #16
 80069ba:	d10f      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069bc:	4b11      	ldr	r3, [pc, #68]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80069c8:	e00e      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3304      	adds	r3, #4
 80069ce:	2102      	movs	r1, #2
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 f855 	bl	8007a80 <RCCEx_PLL2_Config>
 80069d6:	4603      	mov	r3, r0
 80069d8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80069da:	e005      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	75fb      	strb	r3, [r7, #23]
      break;
 80069e0:	e002      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80069e2:	bf00      	nop
 80069e4:	e000      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80069e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10c      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80069ee:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fa:	4902      	ldr	r1, [pc, #8]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a00:	e004      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006a02:	bf00      	nop
 8006a04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d047      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a20:	d030      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a26:	d82a      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006a28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a2c:	d02c      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a32:	d824      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a38:	d018      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a3e:	d81e      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a48:	d007      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006a4a:	e018      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a4c:	4bac      	ldr	r3, [pc, #688]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	4aab      	ldr	r2, [pc, #684]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a58:	e017      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	2100      	movs	r1, #0
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 f80d 	bl	8007a80 <RCCEx_PLL2_Config>
 8006a66:	4603      	mov	r3, r0
 8006a68:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a6a:	e00e      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3324      	adds	r3, #36	; 0x24
 8006a70:	2100      	movs	r1, #0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 f8b6 	bl	8007be4 <RCCEx_PLL3_Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a7c:	e005      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
      break;
 8006a82:	e002      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006a84:	bf00      	nop
 8006a86:	e000      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d109      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a90:	4b9b      	ldr	r3, [pc, #620]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a94:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9c:	4998      	ldr	r1, [pc, #608]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	650b      	str	r3, [r1, #80]	; 0x50
 8006aa2:	e001      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d049      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006abc:	d02e      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ac2:	d828      	bhi.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006ac4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ac8:	d02a      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ace:	d822      	bhi.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006ad0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ad4:	d026      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006ad6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ada:	d81c      	bhi.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ae0:	d010      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006ae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ae6:	d816      	bhi.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d01d      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af0:	d111      	bne.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3304      	adds	r3, #4
 8006af6:	2101      	movs	r1, #1
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 ffc1 	bl	8007a80 <RCCEx_PLL2_Config>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006b02:	e012      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3324      	adds	r3, #36	; 0x24
 8006b08:	2101      	movs	r1, #1
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 f86a 	bl	8007be4 <RCCEx_PLL3_Config>
 8006b10:	4603      	mov	r3, r0
 8006b12:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006b14:	e009      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1a:	e006      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006b1c:	bf00      	nop
 8006b1e:	e004      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006b20:	bf00      	nop
 8006b22:	e002      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006b24:	bf00      	nop
 8006b26:	e000      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d109      	bne.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b30:	4b73      	ldr	r3, [pc, #460]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b34:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3c:	4970      	ldr	r1, [pc, #448]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	650b      	str	r3, [r1, #80]	; 0x50
 8006b42:	e001      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d04b      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b5e:	d02e      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b64:	d828      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6a:	d02a      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b70:	d822      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b76:	d026      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006b78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b7c:	d81c      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b82:	d010      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b88:	d816      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d01d      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b92:	d111      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3304      	adds	r3, #4
 8006b98:	2101      	movs	r1, #1
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 ff70 	bl	8007a80 <RCCEx_PLL2_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006ba4:	e012      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3324      	adds	r3, #36	; 0x24
 8006baa:	2101      	movs	r1, #1
 8006bac:	4618      	mov	r0, r3
 8006bae:	f001 f819 	bl	8007be4 <RCCEx_PLL3_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006bb6:	e009      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	75fb      	strb	r3, [r7, #23]
      break;
 8006bbc:	e006      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006bbe:	bf00      	nop
 8006bc0:	e004      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006bc2:	bf00      	nop
 8006bc4:	e002      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006bc6:	bf00      	nop
 8006bc8:	e000      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bd2:	4b4b      	ldr	r3, [pc, #300]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006be0:	4947      	ldr	r1, [pc, #284]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	658b      	str	r3, [r1, #88]	; 0x58
 8006be6:	e001      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d02f      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c00:	d00e      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c06:	d814      	bhi.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d015      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006c0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c10:	d10f      	bne.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c12:	4b3b      	ldr	r3, [pc, #236]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	4a3a      	ldr	r2, [pc, #232]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c1e:	e00c      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3304      	adds	r3, #4
 8006c24:	2101      	movs	r1, #1
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 ff2a 	bl	8007a80 <RCCEx_PLL2_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c30:	e003      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	75fb      	strb	r3, [r7, #23]
      break;
 8006c36:	e000      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d109      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c40:	4b2f      	ldr	r3, [pc, #188]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c4c:	492c      	ldr	r1, [pc, #176]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	650b      	str	r3, [r1, #80]	; 0x50
 8006c52:	e001      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d032      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d81b      	bhi.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006c6c:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006cab 	.word	0x08006cab
 8006c78:	08006c85 	.word	0x08006c85
 8006c7c:	08006c93 	.word	0x08006c93
 8006c80:	08006cab 	.word	0x08006cab
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c84:	4b1e      	ldr	r3, [pc, #120]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	4a1d      	ldr	r2, [pc, #116]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c90:	e00c      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3304      	adds	r3, #4
 8006c96:	2102      	movs	r1, #2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fef1 	bl	8007a80 <RCCEx_PLL2_Config>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ca2:	e003      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca8:	e000      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cb2:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb6:	f023 0203 	bic.w	r2, r3, #3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	4910      	ldr	r1, [pc, #64]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cc4:	e001      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 808a 	beq.w	8006dec <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a09      	ldr	r2, [pc, #36]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ce4:	f7fb fd94 	bl	8002810 <HAL_GetTick>
 8006ce8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cea:	e00d      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cec:	f7fb fd90 	bl	8002810 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b64      	cmp	r3, #100	; 0x64
 8006cf8:	d906      	bls.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	75fb      	strb	r3, [r7, #23]
        break;
 8006cfe:	e009      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006d00:	58024400 	.word	0x58024400
 8006d04:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d08:	4bb9      	ldr	r3, [pc, #740]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0eb      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d166      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d1a:	4bb6      	ldr	r3, [pc, #728]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d24:	4053      	eors	r3, r2
 8006d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d013      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d2e:	4bb1      	ldr	r3, [pc, #708]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d36:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d38:	4bae      	ldr	r3, [pc, #696]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3c:	4aad      	ldr	r2, [pc, #692]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d42:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d44:	4bab      	ldr	r3, [pc, #684]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d48:	4aaa      	ldr	r2, [pc, #680]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d4e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d50:	4aa8      	ldr	r2, [pc, #672]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d60:	d115      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d62:	f7fb fd55 	bl	8002810 <HAL_GetTick>
 8006d66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d68:	e00b      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d6a:	f7fb fd51 	bl	8002810 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d902      	bls.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	75fb      	strb	r3, [r7, #23]
            break;
 8006d80:	e005      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d82:	4b9c      	ldr	r3, [pc, #624]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0ed      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d126      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006da2:	d10d      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006da4:	4b93      	ldr	r3, [pc, #588]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006db2:	0919      	lsrs	r1, r3, #4
 8006db4:	4b90      	ldr	r3, [pc, #576]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006db6:	400b      	ands	r3, r1
 8006db8:	498e      	ldr	r1, [pc, #568]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	610b      	str	r3, [r1, #16]
 8006dbe:	e005      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006dc0:	4b8c      	ldr	r3, [pc, #560]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	4a8b      	ldr	r2, [pc, #556]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006dc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006dca:	6113      	str	r3, [r2, #16]
 8006dcc:	4b89      	ldr	r3, [pc, #548]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dda:	4986      	ldr	r1, [pc, #536]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	670b      	str	r3, [r1, #112]	; 0x70
 8006de0:	e004      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	75bb      	strb	r3, [r7, #22]
 8006de6:	e001      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d07e      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfc:	2b28      	cmp	r3, #40	; 0x28
 8006dfe:	d867      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006e00:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e06:	bf00      	nop
 8006e08:	08006ed7 	.word	0x08006ed7
 8006e0c:	08006ed1 	.word	0x08006ed1
 8006e10:	08006ed1 	.word	0x08006ed1
 8006e14:	08006ed1 	.word	0x08006ed1
 8006e18:	08006ed1 	.word	0x08006ed1
 8006e1c:	08006ed1 	.word	0x08006ed1
 8006e20:	08006ed1 	.word	0x08006ed1
 8006e24:	08006ed1 	.word	0x08006ed1
 8006e28:	08006ead 	.word	0x08006ead
 8006e2c:	08006ed1 	.word	0x08006ed1
 8006e30:	08006ed1 	.word	0x08006ed1
 8006e34:	08006ed1 	.word	0x08006ed1
 8006e38:	08006ed1 	.word	0x08006ed1
 8006e3c:	08006ed1 	.word	0x08006ed1
 8006e40:	08006ed1 	.word	0x08006ed1
 8006e44:	08006ed1 	.word	0x08006ed1
 8006e48:	08006ebf 	.word	0x08006ebf
 8006e4c:	08006ed1 	.word	0x08006ed1
 8006e50:	08006ed1 	.word	0x08006ed1
 8006e54:	08006ed1 	.word	0x08006ed1
 8006e58:	08006ed1 	.word	0x08006ed1
 8006e5c:	08006ed1 	.word	0x08006ed1
 8006e60:	08006ed1 	.word	0x08006ed1
 8006e64:	08006ed1 	.word	0x08006ed1
 8006e68:	08006ed7 	.word	0x08006ed7
 8006e6c:	08006ed1 	.word	0x08006ed1
 8006e70:	08006ed1 	.word	0x08006ed1
 8006e74:	08006ed1 	.word	0x08006ed1
 8006e78:	08006ed1 	.word	0x08006ed1
 8006e7c:	08006ed1 	.word	0x08006ed1
 8006e80:	08006ed1 	.word	0x08006ed1
 8006e84:	08006ed1 	.word	0x08006ed1
 8006e88:	08006ed7 	.word	0x08006ed7
 8006e8c:	08006ed1 	.word	0x08006ed1
 8006e90:	08006ed1 	.word	0x08006ed1
 8006e94:	08006ed1 	.word	0x08006ed1
 8006e98:	08006ed1 	.word	0x08006ed1
 8006e9c:	08006ed1 	.word	0x08006ed1
 8006ea0:	08006ed1 	.word	0x08006ed1
 8006ea4:	08006ed1 	.word	0x08006ed1
 8006ea8:	08006ed7 	.word	0x08006ed7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fde4 	bl	8007a80 <RCCEx_PLL2_Config>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ebc:	e00c      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3324      	adds	r3, #36	; 0x24
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fe8d 	bl	8007be4 <RCCEx_PLL3_Config>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ece:	e003      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed4:	e000      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8006ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ede:	4b45      	ldr	r3, [pc, #276]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eea:	4942      	ldr	r1, [pc, #264]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	654b      	str	r3, [r1, #84]	; 0x54
 8006ef0:	e001      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d037      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f06:	2b05      	cmp	r3, #5
 8006f08:	d820      	bhi.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006f0a:	a201      	add	r2, pc, #4	; (adr r2, 8006f10 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f10:	08006f53 	.word	0x08006f53
 8006f14:	08006f29 	.word	0x08006f29
 8006f18:	08006f3b 	.word	0x08006f3b
 8006f1c:	08006f53 	.word	0x08006f53
 8006f20:	08006f53 	.word	0x08006f53
 8006f24:	08006f53 	.word	0x08006f53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fda6 	bl	8007a80 <RCCEx_PLL2_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f38:	e00c      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3324      	adds	r3, #36	; 0x24
 8006f3e:	2101      	movs	r1, #1
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fe4f 	bl	8007be4 <RCCEx_PLL3_Config>
 8006f46:	4603      	mov	r3, r0
 8006f48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f4a:	e003      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f50:	e000      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f5a:	4b26      	ldr	r3, [pc, #152]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5e:	f023 0207 	bic.w	r2, r3, #7
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f66:	4923      	ldr	r1, [pc, #140]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	654b      	str	r3, [r1, #84]	; 0x54
 8006f6c:	e001      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d040      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f84:	2b05      	cmp	r3, #5
 8006f86:	d821      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fd3 	.word	0x08006fd3
 8006f94:	08006fa9 	.word	0x08006fa9
 8006f98:	08006fbb 	.word	0x08006fbb
 8006f9c:	08006fd3 	.word	0x08006fd3
 8006fa0:	08006fd3 	.word	0x08006fd3
 8006fa4:	08006fd3 	.word	0x08006fd3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3304      	adds	r3, #4
 8006fac:	2101      	movs	r1, #1
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fd66 	bl	8007a80 <RCCEx_PLL2_Config>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006fb8:	e00c      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3324      	adds	r3, #36	; 0x24
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fe0f 	bl	8007be4 <RCCEx_PLL3_Config>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006fca:	e003      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd0:	e000      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d110      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fda:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fde:	f023 0207 	bic.w	r2, r3, #7
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fe8:	4902      	ldr	r1, [pc, #8]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	658b      	str	r3, [r1, #88]	; 0x58
 8006fee:	e007      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006ff0:	58024800 	.word	0x58024800
 8006ff4:	58024400 	.word	0x58024400
 8006ff8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b00      	cmp	r3, #0
 800700a:	d04b      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007016:	d02e      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800701c:	d828      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800701e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007022:	d02a      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007028:	d822      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800702a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800702e:	d026      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007030:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007034:	d81c      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800703a:	d010      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800703c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007040:	d816      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01d      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800704a:	d111      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3304      	adds	r3, #4
 8007050:	2100      	movs	r1, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fd14 	bl	8007a80 <RCCEx_PLL2_Config>
 8007058:	4603      	mov	r3, r0
 800705a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800705c:	e012      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3324      	adds	r3, #36	; 0x24
 8007062:	2102      	movs	r1, #2
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fdbd 	bl	8007be4 <RCCEx_PLL3_Config>
 800706a:	4603      	mov	r3, r0
 800706c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800706e:	e009      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	75fb      	strb	r3, [r7, #23]
      break;
 8007074:	e006      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007076:	bf00      	nop
 8007078:	e004      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800707a:	bf00      	nop
 800707c:	e002      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800707e:	bf00      	nop
 8007080:	e000      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007084:	7dfb      	ldrb	r3, [r7, #23]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800708a:	4bb2      	ldr	r3, [pc, #712]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007098:	49ae      	ldr	r1, [pc, #696]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800709a:	4313      	orrs	r3, r2
 800709c:	654b      	str	r3, [r1, #84]	; 0x54
 800709e:	e001      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d04b      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070ba:	d02e      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80070bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070c0:	d828      	bhi.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80070c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c6:	d02a      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80070c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070cc:	d822      	bhi.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80070ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070d2:	d026      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80070d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070d8:	d81c      	bhi.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80070da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070de:	d010      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80070e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e4:	d816      	bhi.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01d      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80070ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ee:	d111      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3304      	adds	r3, #4
 80070f4:	2100      	movs	r1, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 fcc2 	bl	8007a80 <RCCEx_PLL2_Config>
 80070fc:	4603      	mov	r3, r0
 80070fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007100:	e012      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3324      	adds	r3, #36	; 0x24
 8007106:	2102      	movs	r1, #2
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fd6b 	bl	8007be4 <RCCEx_PLL3_Config>
 800710e:	4603      	mov	r3, r0
 8007110:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007112:	e009      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	75fb      	strb	r3, [r7, #23]
      break;
 8007118:	e006      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800711a:	bf00      	nop
 800711c:	e004      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800711e:	bf00      	nop
 8007120:	e002      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007122:	bf00      	nop
 8007124:	e000      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800712e:	4b89      	ldr	r3, [pc, #548]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007132:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800713c:	4985      	ldr	r1, [pc, #532]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800713e:	4313      	orrs	r3, r2
 8007140:	658b      	str	r3, [r1, #88]	; 0x58
 8007142:	e001      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007150:	2b00      	cmp	r3, #0
 8007152:	d04b      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800715a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800715e:	d02e      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007160:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007164:	d828      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800716a:	d02a      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800716c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007170:	d822      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007172:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007176:	d026      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007178:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800717c:	d81c      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800717e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007182:	d010      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8007184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007188:	d816      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d01d      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800718e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007192:	d111      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3304      	adds	r3, #4
 8007198:	2100      	movs	r1, #0
 800719a:	4618      	mov	r0, r3
 800719c:	f000 fc70 	bl	8007a80 <RCCEx_PLL2_Config>
 80071a0:	4603      	mov	r3, r0
 80071a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80071a4:	e012      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3324      	adds	r3, #36	; 0x24
 80071aa:	2102      	movs	r1, #2
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fd19 	bl	8007be4 <RCCEx_PLL3_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80071b6:	e009      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	75fb      	strb	r3, [r7, #23]
      break;
 80071bc:	e006      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80071be:	bf00      	nop
 80071c0:	e004      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80071c2:	bf00      	nop
 80071c4:	e002      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80071c6:	bf00      	nop
 80071c8:	e000      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80071ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80071d2:	4b60      	ldr	r3, [pc, #384]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80071d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071e0:	495c      	ldr	r1, [pc, #368]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	658b      	str	r3, [r1, #88]	; 0x58
 80071e6:	e001      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0308 	and.w	r3, r3, #8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d018      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007200:	d10a      	bne.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	3324      	adds	r3, #36	; 0x24
 8007206:	2102      	movs	r1, #2
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fceb 	bl	8007be4 <RCCEx_PLL3_Config>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007218:	4b4e      	ldr	r3, [pc, #312]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800721a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007224:	494b      	ldr	r1, [pc, #300]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007226:	4313      	orrs	r3, r2
 8007228:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0310 	and.w	r3, r3, #16
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007240:	d10a      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3324      	adds	r3, #36	; 0x24
 8007246:	2102      	movs	r1, #2
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fccb 	bl	8007be4 <RCCEx_PLL3_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007258:	4b3e      	ldr	r3, [pc, #248]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800725a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007266:	493b      	ldr	r1, [pc, #236]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007268:	4313      	orrs	r3, r2
 800726a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d034      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800727e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007282:	d01d      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007288:	d817      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800728e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007292:	d009      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007294:	e011      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3304      	adds	r3, #4
 800729a:	2100      	movs	r1, #0
 800729c:	4618      	mov	r0, r3
 800729e:	f000 fbef 	bl	8007a80 <RCCEx_PLL2_Config>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80072a6:	e00c      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3324      	adds	r3, #36	; 0x24
 80072ac:	2102      	movs	r1, #2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fc98 	bl	8007be4 <RCCEx_PLL3_Config>
 80072b4:	4603      	mov	r3, r0
 80072b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80072b8:	e003      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	75fb      	strb	r3, [r7, #23]
      break;
 80072be:	e000      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80072c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072c8:	4b22      	ldr	r3, [pc, #136]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80072ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072d6:	491f      	ldr	r1, [pc, #124]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	658b      	str	r3, [r1, #88]	; 0x58
 80072dc:	e001      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d036      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072f8:	d01c      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80072fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072fe:	d816      	bhi.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007304:	d003      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800730a:	d007      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800730c:	e00f      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800730e:	4b11      	ldr	r3, [pc, #68]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007312:	4a10      	ldr	r2, [pc, #64]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800731a:	e00c      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3324      	adds	r3, #36	; 0x24
 8007320:	2101      	movs	r1, #1
 8007322:	4618      	mov	r0, r3
 8007324:	f000 fc5e 	bl	8007be4 <RCCEx_PLL3_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800732c:	e003      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	75fb      	strb	r3, [r7, #23]
      break;
 8007332:	e000      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007336:	7dfb      	ldrb	r3, [r7, #23]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10d      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800733e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007340:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800734a:	4902      	ldr	r1, [pc, #8]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800734c:	4313      	orrs	r3, r2
 800734e:	654b      	str	r3, [r1, #84]	; 0x54
 8007350:	e004      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8007352:	bf00      	nop
 8007354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d029      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007374:	d007      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007376:	e00f      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007378:	4b61      	ldr	r3, [pc, #388]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	4a60      	ldr	r2, [pc, #384]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800737e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007384:	e00b      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3304      	adds	r3, #4
 800738a:	2102      	movs	r1, #2
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fb77 	bl	8007a80 <RCCEx_PLL2_Config>
 8007392:	4603      	mov	r3, r0
 8007394:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007396:	e002      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	75fb      	strb	r3, [r7, #23]
      break;
 800739c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d109      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80073a4:	4b56      	ldr	r3, [pc, #344]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073b0:	4953      	ldr	r1, [pc, #332]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073b6:	e001      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3324      	adds	r3, #36	; 0x24
 80073cc:	2102      	movs	r1, #2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fc08 	bl	8007be4 <RCCEx_PLL3_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d030      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f2:	d017      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80073f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f8:	d811      	bhi.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80073fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073fe:	d013      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007404:	d80b      	bhi.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d010      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800740a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800740e:	d106      	bne.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007410:	4b3b      	ldr	r3, [pc, #236]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	4a3a      	ldr	r2, [pc, #232]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800741a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800741c:	e007      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	75fb      	strb	r3, [r7, #23]
      break;
 8007422:	e004      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007424:	bf00      	nop
 8007426:	e002      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007428:	bf00      	nop
 800742a:	e000      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800742c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d109      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007434:	4b32      	ldr	r3, [pc, #200]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007440:	492f      	ldr	r1, [pc, #188]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007442:	4313      	orrs	r3, r2
 8007444:	654b      	str	r3, [r1, #84]	; 0x54
 8007446:	e001      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007458:	4b29      	ldr	r3, [pc, #164]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800745a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007464:	4926      	ldr	r1, [pc, #152]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007466:	4313      	orrs	r3, r2
 8007468:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d008      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007476:	4b22      	ldr	r3, [pc, #136]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007482:	491f      	ldr	r1, [pc, #124]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007484:	4313      	orrs	r3, r2
 8007486:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00d      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007494:	4b1a      	ldr	r3, [pc, #104]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	4a19      	ldr	r2, [pc, #100]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800749a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800749e:	6113      	str	r3, [r2, #16]
 80074a0:	4b17      	ldr	r3, [pc, #92]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074a2:	691a      	ldr	r2, [r3, #16]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074aa:	4915      	ldr	r1, [pc, #84]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	da08      	bge.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80074b8:	4b11      	ldr	r3, [pc, #68]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c4:	490e      	ldr	r1, [pc, #56]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074d6:	4b0a      	ldr	r3, [pc, #40]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074e4:	4906      	ldr	r1, [pc, #24]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80074ea:	7dbb      	ldrb	r3, [r7, #22]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	e000      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	58024400 	.word	0x58024400

08007504 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007508:	f7ff f864 	bl	80065d4 <HAL_RCC_GetHCLKFreq>
 800750c:	4602      	mov	r2, r0
 800750e:	4b06      	ldr	r3, [pc, #24]	; (8007528 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	091b      	lsrs	r3, r3, #4
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	4904      	ldr	r1, [pc, #16]	; (800752c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800751a:	5ccb      	ldrb	r3, [r1, r3]
 800751c:	f003 031f 	and.w	r3, r3, #31
 8007520:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007524:	4618      	mov	r0, r3
 8007526:	bd80      	pop	{r7, pc}
 8007528:	58024400 	.word	0x58024400
 800752c:	0801d350 	.word	0x0801d350

08007530 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007530:	b480      	push	{r7}
 8007532:	b089      	sub	sp, #36	; 0x24
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007538:	4ba1      	ldr	r3, [pc, #644]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	f003 0303 	and.w	r3, r3, #3
 8007540:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007542:	4b9f      	ldr	r3, [pc, #636]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	0b1b      	lsrs	r3, r3, #12
 8007548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800754c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800754e:	4b9c      	ldr	r3, [pc, #624]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007552:	091b      	lsrs	r3, r3, #4
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800755a:	4b99      	ldr	r3, [pc, #612]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800755c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755e:	08db      	lsrs	r3, r3, #3
 8007560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	fb02 f303 	mul.w	r3, r2, r3
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007572:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 8111 	beq.w	80077a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	2b02      	cmp	r3, #2
 8007582:	f000 8083 	beq.w	800768c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b02      	cmp	r3, #2
 800758a:	f200 80a1 	bhi.w	80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d056      	beq.n	8007648 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800759a:	e099      	b.n	80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800759c:	4b88      	ldr	r3, [pc, #544]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d02d      	beq.n	8007604 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075a8:	4b85      	ldr	r3, [pc, #532]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	08db      	lsrs	r3, r3, #3
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	4a84      	ldr	r2, [pc, #528]	; (80077c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80075b4:	fa22 f303 	lsr.w	r3, r2, r3
 80075b8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	ee07 3a90 	vmov	s15, r3
 80075c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d2:	4b7b      	ldr	r3, [pc, #492]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007602:	e087      	b.n	8007714 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80077cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007616:	4b6a      	ldr	r3, [pc, #424]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007626:	ed97 6a03 	vldr	s12, [r7, #12]
 800762a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800762e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800763a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007646:	e065      	b.n	8007714 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007652:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800765a:	4b59      	ldr	r3, [pc, #356]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766a:	ed97 6a03 	vldr	s12, [r7, #12]
 800766e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800767a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800767e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800768a:	e043      	b.n	8007714 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007696:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80077d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800769a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769e:	4b48      	ldr	r3, [pc, #288]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80076b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076ce:	e021      	b.n	8007714 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076e2:	4b37      	ldr	r3, [pc, #220]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ea:	ee07 3a90 	vmov	s15, r3
 80076ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800770a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007712:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007714:	4b2a      	ldr	r3, [pc, #168]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	0a5b      	lsrs	r3, r3, #9
 800771a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800772a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800772e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800773a:	ee17 2a90 	vmov	r2, s15
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007742:	4b1f      	ldr	r3, [pc, #124]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	0c1b      	lsrs	r3, r3, #16
 8007748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774c:	ee07 3a90 	vmov	s15, r3
 8007750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007754:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800775c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007768:	ee17 2a90 	vmov	r2, s15
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007770:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	0e1b      	lsrs	r3, r3, #24
 8007776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007782:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007786:	ee37 7a87 	vadd.f32	s14, s15, s14
 800778a:	edd7 6a07 	vldr	s13, [r7, #28]
 800778e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007796:	ee17 2a90 	vmov	r2, s15
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800779e:	e008      	b.n	80077b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	609a      	str	r2, [r3, #8]
}
 80077b2:	bf00      	nop
 80077b4:	3724      	adds	r7, #36	; 0x24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	58024400 	.word	0x58024400
 80077c4:	03d09000 	.word	0x03d09000
 80077c8:	46000000 	.word	0x46000000
 80077cc:	4c742400 	.word	0x4c742400
 80077d0:	4a742400 	.word	0x4a742400
 80077d4:	4af42400 	.word	0x4af42400

080077d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80077d8:	b480      	push	{r7}
 80077da:	b089      	sub	sp, #36	; 0x24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077e0:	4ba1      	ldr	r3, [pc, #644]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80077ea:	4b9f      	ldr	r3, [pc, #636]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ee:	0d1b      	lsrs	r3, r3, #20
 80077f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80077f6:	4b9c      	ldr	r3, [pc, #624]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fa:	0a1b      	lsrs	r3, r3, #8
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007802:	4b99      	ldr	r3, [pc, #612]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007806:	08db      	lsrs	r3, r3, #3
 8007808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	fb02 f303 	mul.w	r3, r2, r3
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 8111 	beq.w	8007a48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	2b02      	cmp	r3, #2
 800782a:	f000 8083 	beq.w	8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b02      	cmp	r3, #2
 8007832:	f200 80a1 	bhi.w	8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d056      	beq.n	80078f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007842:	e099      	b.n	8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007844:	4b88      	ldr	r3, [pc, #544]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b00      	cmp	r3, #0
 800784e:	d02d      	beq.n	80078ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007850:	4b85      	ldr	r3, [pc, #532]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	08db      	lsrs	r3, r3, #3
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	4a84      	ldr	r2, [pc, #528]	; (8007a6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800785c:	fa22 f303 	lsr.w	r3, r2, r3
 8007860:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	ee07 3a90 	vmov	s15, r3
 8007868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800787a:	4b7b      	ldr	r3, [pc, #492]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788a:	ed97 6a03 	vldr	s12, [r7, #12]
 800788e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800789a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800789e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078aa:	e087      	b.n	80079bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80078ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078be:	4b6a      	ldr	r3, [pc, #424]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80078d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078ee:	e065      	b.n	80079bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007902:	4b59      	ldr	r3, [pc, #356]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007912:	ed97 6a03 	vldr	s12, [r7, #12]
 8007916:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800791a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800792a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007932:	e043      	b.n	80079bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007946:	4b48      	ldr	r3, [pc, #288]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007956:	ed97 6a03 	vldr	s12, [r7, #12]
 800795a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800795e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800796a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007976:	e021      	b.n	80079bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007982:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798a:	4b37      	ldr	r3, [pc, #220]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800799a:	ed97 6a03 	vldr	s12, [r7, #12]
 800799e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80079bc:	4b2a      	ldr	r3, [pc, #168]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	0a5b      	lsrs	r3, r3, #9
 80079c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e2:	ee17 2a90 	vmov	r2, s15
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80079ea:	4b1f      	ldr	r3, [pc, #124]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	0c1b      	lsrs	r3, r3, #16
 80079f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f4:	ee07 3a90 	vmov	s15, r3
 80079f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a04:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a10:	ee17 2a90 	vmov	r2, s15
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007a18:	4b13      	ldr	r3, [pc, #76]	; (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	0e1b      	lsrs	r3, r3, #24
 8007a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a3e:	ee17 2a90 	vmov	r2, s15
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a46:	e008      	b.n	8007a5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	609a      	str	r2, [r3, #8]
}
 8007a5a:	bf00      	nop
 8007a5c:	3724      	adds	r7, #36	; 0x24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	58024400 	.word	0x58024400
 8007a6c:	03d09000 	.word	0x03d09000
 8007a70:	46000000 	.word	0x46000000
 8007a74:	4c742400 	.word	0x4c742400
 8007a78:	4a742400 	.word	0x4a742400
 8007a7c:	4af42400 	.word	0x4af42400

08007a80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a8e:	4b53      	ldr	r3, [pc, #332]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a92:	f003 0303 	and.w	r3, r3, #3
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d101      	bne.n	8007a9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e099      	b.n	8007bd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a9e:	4b4f      	ldr	r3, [pc, #316]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a4e      	ldr	r2, [pc, #312]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007aa4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aaa:	f7fa feb1 	bl	8002810 <HAL_GetTick>
 8007aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ab0:	e008      	b.n	8007ac4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ab2:	f7fa fead 	bl	8002810 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d901      	bls.n	8007ac4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e086      	b.n	8007bd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ac4:	4b45      	ldr	r3, [pc, #276]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1f0      	bne.n	8007ab2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ad0:	4b42      	ldr	r3, [pc, #264]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	031b      	lsls	r3, r3, #12
 8007ade:	493f      	ldr	r1, [pc, #252]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	628b      	str	r3, [r1, #40]	; 0x28
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	025b      	lsls	r3, r3, #9
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	431a      	orrs	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	041b      	lsls	r3, r3, #16
 8007b02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b06:	431a      	orrs	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	061b      	lsls	r3, r3, #24
 8007b10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b14:	4931      	ldr	r1, [pc, #196]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b1a:	4b30      	ldr	r3, [pc, #192]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	492d      	ldr	r1, [pc, #180]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b2c:	4b2b      	ldr	r3, [pc, #172]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	f023 0220 	bic.w	r2, r3, #32
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	4928      	ldr	r1, [pc, #160]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b3e:	4b27      	ldr	r3, [pc, #156]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	4a26      	ldr	r2, [pc, #152]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b44:	f023 0310 	bic.w	r3, r3, #16
 8007b48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b4a:	4b24      	ldr	r3, [pc, #144]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b4e:	4b24      	ldr	r3, [pc, #144]	; (8007be0 <RCCEx_PLL2_Config+0x160>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	69d2      	ldr	r2, [r2, #28]
 8007b56:	00d2      	lsls	r2, r2, #3
 8007b58:	4920      	ldr	r1, [pc, #128]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b5e:	4b1f      	ldr	r3, [pc, #124]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	4a1e      	ldr	r2, [pc, #120]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b64:	f043 0310 	orr.w	r3, r3, #16
 8007b68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d106      	bne.n	8007b7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b70:	4b1a      	ldr	r3, [pc, #104]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	4a19      	ldr	r2, [pc, #100]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b7c:	e00f      	b.n	8007b9e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d106      	bne.n	8007b92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b84:	4b15      	ldr	r3, [pc, #84]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	4a14      	ldr	r2, [pc, #80]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b90:	e005      	b.n	8007b9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b92:	4b12      	ldr	r3, [pc, #72]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b96:	4a11      	ldr	r2, [pc, #68]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a0e      	ldr	r2, [pc, #56]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007ba4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007baa:	f7fa fe31 	bl	8002810 <HAL_GetTick>
 8007bae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bb0:	e008      	b.n	8007bc4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007bb2:	f7fa fe2d 	bl	8002810 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e006      	b.n	8007bd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <RCCEx_PLL2_Config+0x15c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0f0      	beq.n	8007bb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	58024400 	.word	0x58024400
 8007be0:	ffff0007 	.word	0xffff0007

08007be4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bf2:	4b53      	ldr	r3, [pc, #332]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d101      	bne.n	8007c02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e099      	b.n	8007d36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c02:	4b4f      	ldr	r3, [pc, #316]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a4e      	ldr	r2, [pc, #312]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c0e:	f7fa fdff 	bl	8002810 <HAL_GetTick>
 8007c12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c14:	e008      	b.n	8007c28 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c16:	f7fa fdfb 	bl	8002810 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e086      	b.n	8007d36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c28:	4b45      	ldr	r3, [pc, #276]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1f0      	bne.n	8007c16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c34:	4b42      	ldr	r3, [pc, #264]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	051b      	lsls	r3, r3, #20
 8007c42:	493f      	ldr	r1, [pc, #252]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	628b      	str	r3, [r1, #40]	; 0x28
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	3b01      	subs	r3, #1
 8007c58:	025b      	lsls	r3, r3, #9
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	041b      	lsls	r3, r3, #16
 8007c66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	061b      	lsls	r3, r3, #24
 8007c74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c78:	4931      	ldr	r1, [pc, #196]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c7e:	4b30      	ldr	r3, [pc, #192]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	492d      	ldr	r1, [pc, #180]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c90:	4b2b      	ldr	r3, [pc, #172]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	4928      	ldr	r1, [pc, #160]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ca2:	4b27      	ldr	r3, [pc, #156]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	4a26      	ldr	r2, [pc, #152]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cae:	4b24      	ldr	r3, [pc, #144]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cb2:	4b24      	ldr	r3, [pc, #144]	; (8007d44 <RCCEx_PLL3_Config+0x160>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	69d2      	ldr	r2, [r2, #28]
 8007cba:	00d2      	lsls	r2, r2, #3
 8007cbc:	4920      	ldr	r1, [pc, #128]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cc2:	4b1f      	ldr	r3, [pc, #124]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	4a1e      	ldr	r2, [pc, #120]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d106      	bne.n	8007ce2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cd4:	4b1a      	ldr	r3, [pc, #104]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	4a19      	ldr	r2, [pc, #100]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007cda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007cde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ce0:	e00f      	b.n	8007d02 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d106      	bne.n	8007cf6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ce8:	4b15      	ldr	r3, [pc, #84]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	4a14      	ldr	r2, [pc, #80]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007cee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cf4:	e005      	b.n	8007d02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cf6:	4b12      	ldr	r3, [pc, #72]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	4a11      	ldr	r2, [pc, #68]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d02:	4b0f      	ldr	r3, [pc, #60]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a0e      	ldr	r2, [pc, #56]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d0e:	f7fa fd7f 	bl	8002810 <HAL_GetTick>
 8007d12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d14:	e008      	b.n	8007d28 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d16:	f7fa fd7b 	bl	8002810 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d901      	bls.n	8007d28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e006      	b.n	8007d36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d28:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <RCCEx_PLL3_Config+0x15c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0f0      	beq.n	8007d16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	58024400 	.word	0x58024400
 8007d44:	ffff0007 	.word	0xffff0007

08007d48 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e0f1      	b.n	8007f3e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a78      	ldr	r2, [pc, #480]	; (8007f48 <HAL_SPI_Init+0x200>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d00f      	beq.n	8007d8a <HAL_SPI_Init+0x42>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a77      	ldr	r2, [pc, #476]	; (8007f4c <HAL_SPI_Init+0x204>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d00a      	beq.n	8007d8a <HAL_SPI_Init+0x42>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a75      	ldr	r2, [pc, #468]	; (8007f50 <HAL_SPI_Init+0x208>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d005      	beq.n	8007d8a <HAL_SPI_Init+0x42>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	2b0f      	cmp	r3, #15
 8007d84:	d901      	bls.n	8007d8a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e0d9      	b.n	8007f3e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fba2 	bl	80084d4 <SPI_GetPacketSize>
 8007d90:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a6c      	ldr	r2, [pc, #432]	; (8007f48 <HAL_SPI_Init+0x200>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d00c      	beq.n	8007db6 <HAL_SPI_Init+0x6e>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a6a      	ldr	r2, [pc, #424]	; (8007f4c <HAL_SPI_Init+0x204>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d007      	beq.n	8007db6 <HAL_SPI_Init+0x6e>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a69      	ldr	r2, [pc, #420]	; (8007f50 <HAL_SPI_Init+0x208>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d002      	beq.n	8007db6 <HAL_SPI_Init+0x6e>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d811      	bhi.n	8007dda <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007dba:	4a63      	ldr	r2, [pc, #396]	; (8007f48 <HAL_SPI_Init+0x200>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d009      	beq.n	8007dd4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a61      	ldr	r2, [pc, #388]	; (8007f4c <HAL_SPI_Init+0x204>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d004      	beq.n	8007dd4 <HAL_SPI_Init+0x8c>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a60      	ldr	r2, [pc, #384]	; (8007f50 <HAL_SPI_Init+0x208>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d104      	bne.n	8007dde <HAL_SPI_Init+0x96>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b10      	cmp	r3, #16
 8007dd8:	d901      	bls.n	8007dde <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e0af      	b.n	8007f3e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7f9 fd28 	bl	8001848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0201 	bic.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007e1a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e24:	d119      	bne.n	8007e5a <HAL_SPI_Init+0x112>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e2e:	d103      	bne.n	8007e38 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d008      	beq.n	8007e4a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10c      	bne.n	8007e5a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e48:	d107      	bne.n	8007e5a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69da      	ldr	r2, [r3, #28]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	431a      	orrs	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6c:	ea42 0103 	orr.w	r1, r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	431a      	orrs	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eba:	ea42 0103 	orr.w	r1, r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d113      	bne.n	8007efa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ee4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ef8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0201 	bic.w	r2, r2, #1
 8007f08:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	40013000 	.word	0x40013000
 8007f4c:	40003800 	.word	0x40003800
 8007f50:	40003c00 	.word	0x40003c00

08007f54 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08a      	sub	sp, #40	; 0x28
 8007f58:	af02      	add	r7, sp, #8
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	603b      	str	r3, [r7, #0]
 8007f60:	4613      	mov	r3, r2
 8007f62:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3320      	adds	r3, #32
 8007f6a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <HAL_SPI_Transmit+0x2a>
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	e1d7      	b.n	800832e <HAL_SPI_Transmit+0x3da>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f86:	f7fa fc43 	bl	8002810 <HAL_GetTick>
 8007f8a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d007      	beq.n	8007fa8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007f98:	2302      	movs	r3, #2
 8007f9a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007fa4:	7efb      	ldrb	r3, [r7, #27]
 8007fa6:	e1c2      	b.n	800832e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <HAL_SPI_Transmit+0x60>
 8007fae:	88fb      	ldrh	r3, [r7, #6]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d107      	bne.n	8007fc4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007fc0:	7efb      	ldrb	r3, [r7, #27]
 8007fc2:	e1b4      	b.n	800832e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	88fa      	ldrh	r2, [r7, #6]
 8007fde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	88fa      	ldrh	r2, [r7, #6]
 8007fe6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008014:	d107      	bne.n	8008026 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008024:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	4b96      	ldr	r3, [pc, #600]	; (8008288 <HAL_SPI_Transmit+0x334>)
 800802e:	4013      	ands	r3, r2
 8008030:	88f9      	ldrh	r1, [r7, #6]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	6812      	ldr	r2, [r2, #0]
 8008036:	430b      	orrs	r3, r1
 8008038:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0201 	orr.w	r2, r2, #1
 8008048:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008052:	d107      	bne.n	8008064 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008062:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	2b0f      	cmp	r3, #15
 800806a:	d947      	bls.n	80080fc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800806c:	e03f      	b.n	80080ee <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b02      	cmp	r3, #2
 800807a:	d114      	bne.n	80080a6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6812      	ldr	r2, [r2, #0]
 8008086:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808c:	1d1a      	adds	r2, r3, #4
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008098:	b29b      	uxth	r3, r3
 800809a:	3b01      	subs	r3, #1
 800809c:	b29a      	uxth	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80080a4:	e023      	b.n	80080ee <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080a6:	f7fa fbb3 	bl	8002810 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d803      	bhi.n	80080be <HAL_SPI_Transmit+0x16a>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080bc:	d102      	bne.n	80080c4 <HAL_SPI_Transmit+0x170>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d114      	bne.n	80080ee <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 f937 	bl	8008338 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e11f      	b.n	800832e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1b9      	bne.n	800806e <HAL_SPI_Transmit+0x11a>
 80080fa:	e0f2      	b.n	80082e2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	2b07      	cmp	r3, #7
 8008102:	f240 80e7 	bls.w	80082d4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008106:	e05d      	b.n	80081c4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b02      	cmp	r3, #2
 8008114:	d132      	bne.n	800817c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b01      	cmp	r3, #1
 8008120:	d918      	bls.n	8008154 <HAL_SPI_Transmit+0x200>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d014      	beq.n	8008154 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6812      	ldr	r2, [r2, #0]
 8008134:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800813a:	1d1a      	adds	r2, r3, #4
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b02      	subs	r3, #2
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008152:	e037      	b.n	80081c4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008158:	881a      	ldrh	r2, [r3, #0]
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008162:	1c9a      	adds	r2, r3, #2
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800816e:	b29b      	uxth	r3, r3
 8008170:	3b01      	subs	r3, #1
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800817a:	e023      	b.n	80081c4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800817c:	f7fa fb48 	bl	8002810 <HAL_GetTick>
 8008180:	4602      	mov	r2, r0
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	429a      	cmp	r2, r3
 800818a:	d803      	bhi.n	8008194 <HAL_SPI_Transmit+0x240>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008192:	d102      	bne.n	800819a <HAL_SPI_Transmit+0x246>
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d114      	bne.n	80081c4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 f8cc 	bl	8008338 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e0b4      	b.n	800832e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d19b      	bne.n	8008108 <HAL_SPI_Transmit+0x1b4>
 80081d0:	e087      	b.n	80082e2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d155      	bne.n	800828c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d918      	bls.n	800821e <HAL_SPI_Transmit+0x2ca>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f0:	2b40      	cmp	r3, #64	; 0x40
 80081f2:	d914      	bls.n	800821e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6812      	ldr	r2, [r2, #0]
 80081fe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008204:	1d1a      	adds	r2, r3, #4
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008210:	b29b      	uxth	r3, r3
 8008212:	3b04      	subs	r3, #4
 8008214:	b29a      	uxth	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800821c:	e05a      	b.n	80082d4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008224:	b29b      	uxth	r3, r3
 8008226:	2b01      	cmp	r3, #1
 8008228:	d917      	bls.n	800825a <HAL_SPI_Transmit+0x306>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d013      	beq.n	800825a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008236:	881a      	ldrh	r2, [r3, #0]
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008240:	1c9a      	adds	r2, r3, #2
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800824c:	b29b      	uxth	r3, r3
 800824e:	3b02      	subs	r3, #2
 8008250:	b29a      	uxth	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008258:	e03c      	b.n	80082d4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3320      	adds	r3, #32
 8008264:	7812      	ldrb	r2, [r2, #0]
 8008266:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008278:	b29b      	uxth	r3, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008284:	e026      	b.n	80082d4 <HAL_SPI_Transmit+0x380>
 8008286:	bf00      	nop
 8008288:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800828c:	f7fa fac0 	bl	8002810 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d803      	bhi.n	80082a4 <HAL_SPI_Transmit+0x350>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a2:	d102      	bne.n	80082aa <HAL_SPI_Transmit+0x356>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d114      	bne.n	80082d4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 f844 	bl	8008338 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e02c      	b.n	800832e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082da:	b29b      	uxth	r3, r3
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f47f af78 	bne.w	80081d2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2200      	movs	r2, #0
 80082ea:	2108      	movs	r1, #8
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f8c3 	bl	8008478 <SPI_WaitOnFlagUntilTimeout>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d007      	beq.n	8008308 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082fe:	f043 0220 	orr.w	r2, r3, #32
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 f815 	bl	8008338 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e000      	b.n	800832e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800832c:	7efb      	ldrb	r3, [r7, #27]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3720      	adds	r7, #32
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop

08008338 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699a      	ldr	r2, [r3, #24]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0208 	orr.w	r2, r2, #8
 8008356:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699a      	ldr	r2, [r3, #24]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0210 	orr.w	r2, r2, #16
 8008366:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0201 	bic.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6919      	ldr	r1, [r3, #16]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4b3c      	ldr	r3, [pc, #240]	; (8008474 <SPI_CloseTransfer+0x13c>)
 8008384:	400b      	ands	r3, r1
 8008386:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689a      	ldr	r2, [r3, #8]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008396:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d014      	beq.n	80083ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00f      	beq.n	80083ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	699a      	ldr	r2, [r3, #24]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0220 	orr.w	r2, r2, #32
 80083cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d014      	beq.n	8008404 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00f      	beq.n	8008404 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083ea:	f043 0204 	orr.w	r2, r3, #4
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699a      	ldr	r2, [r3, #24]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008402:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00f      	beq.n	800842e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008414:	f043 0201 	orr.w	r2, r3, #1
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	699a      	ldr	r2, [r3, #24]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800842c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00f      	beq.n	8008458 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800843e:	f043 0208 	orr.w	r2, r3, #8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008456:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008468:	bf00      	nop
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	fffffc90 	.word	0xfffffc90

08008478 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	4613      	mov	r3, r2
 8008486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008488:	e010      	b.n	80084ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800848a:	f7fa f9c1 	bl	8002810 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	429a      	cmp	r2, r3
 8008498:	d803      	bhi.n	80084a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a0:	d102      	bne.n	80084a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e00f      	b.n	80084cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	695a      	ldr	r2, [r3, #20]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	4013      	ands	r3, r2
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	bf0c      	ite	eq
 80084bc:	2301      	moveq	r3, #1
 80084be:	2300      	movne	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d0df      	beq.n	800848a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e0:	095b      	lsrs	r3, r3, #5
 80084e2:	3301      	adds	r3, #1
 80084e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	3301      	adds	r3, #1
 80084ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	3307      	adds	r3, #7
 80084f2:	08db      	lsrs	r3, r3, #3
 80084f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	fb02 f303 	mul.w	r3, r2, r3
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e049      	b.n	80085b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	d106      	bne.n	8008536 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7f9 feb7 	bl	80022a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3304      	adds	r3, #4
 8008546:	4619      	mov	r1, r3
 8008548:	4610      	mov	r0, r2
 800854a:	f000 fa81 	bl	8008a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d001      	beq.n	80085d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e056      	b.n	800867e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a2b      	ldr	r2, [pc, #172]	; (800868c <HAL_TIM_Base_Start+0xd4>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d02c      	beq.n	800863c <HAL_TIM_Base_Start+0x84>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ea:	d027      	beq.n	800863c <HAL_TIM_Base_Start+0x84>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a27      	ldr	r2, [pc, #156]	; (8008690 <HAL_TIM_Base_Start+0xd8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d022      	beq.n	800863c <HAL_TIM_Base_Start+0x84>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a26      	ldr	r2, [pc, #152]	; (8008694 <HAL_TIM_Base_Start+0xdc>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d01d      	beq.n	800863c <HAL_TIM_Base_Start+0x84>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a24      	ldr	r2, [pc, #144]	; (8008698 <HAL_TIM_Base_Start+0xe0>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d018      	beq.n	800863c <HAL_TIM_Base_Start+0x84>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a23      	ldr	r2, [pc, #140]	; (800869c <HAL_TIM_Base_Start+0xe4>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d013      	beq.n	800863c <HAL_TIM_Base_Start+0x84>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a21      	ldr	r2, [pc, #132]	; (80086a0 <HAL_TIM_Base_Start+0xe8>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d00e      	beq.n	800863c <HAL_TIM_Base_Start+0x84>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a20      	ldr	r2, [pc, #128]	; (80086a4 <HAL_TIM_Base_Start+0xec>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d009      	beq.n	800863c <HAL_TIM_Base_Start+0x84>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a1e      	ldr	r2, [pc, #120]	; (80086a8 <HAL_TIM_Base_Start+0xf0>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d004      	beq.n	800863c <HAL_TIM_Base_Start+0x84>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a1d      	ldr	r2, [pc, #116]	; (80086ac <HAL_TIM_Base_Start+0xf4>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d115      	bne.n	8008668 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689a      	ldr	r2, [r3, #8]
 8008642:	4b1b      	ldr	r3, [pc, #108]	; (80086b0 <HAL_TIM_Base_Start+0xf8>)
 8008644:	4013      	ands	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b06      	cmp	r3, #6
 800864c:	d015      	beq.n	800867a <HAL_TIM_Base_Start+0xc2>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008654:	d011      	beq.n	800867a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f042 0201 	orr.w	r2, r2, #1
 8008664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008666:	e008      	b.n	800867a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0201 	orr.w	r2, r2, #1
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	e000      	b.n	800867c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	40010000 	.word	0x40010000
 8008690:	40000400 	.word	0x40000400
 8008694:	40000800 	.word	0x40000800
 8008698:	40000c00 	.word	0x40000c00
 800869c:	40010400 	.word	0x40010400
 80086a0:	40001800 	.word	0x40001800
 80086a4:	40014000 	.word	0x40014000
 80086a8:	4000e000 	.word	0x4000e000
 80086ac:	4000e400 	.word	0x4000e400
 80086b0:	00010007 	.word	0x00010007

080086b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d001      	beq.n	80086cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e05e      	b.n	800878a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0201 	orr.w	r2, r2, #1
 80086e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a2b      	ldr	r2, [pc, #172]	; (8008798 <HAL_TIM_Base_Start_IT+0xe4>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d02c      	beq.n	8008748 <HAL_TIM_Base_Start_IT+0x94>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f6:	d027      	beq.n	8008748 <HAL_TIM_Base_Start_IT+0x94>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a27      	ldr	r2, [pc, #156]	; (800879c <HAL_TIM_Base_Start_IT+0xe8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d022      	beq.n	8008748 <HAL_TIM_Base_Start_IT+0x94>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a26      	ldr	r2, [pc, #152]	; (80087a0 <HAL_TIM_Base_Start_IT+0xec>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d01d      	beq.n	8008748 <HAL_TIM_Base_Start_IT+0x94>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a24      	ldr	r2, [pc, #144]	; (80087a4 <HAL_TIM_Base_Start_IT+0xf0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d018      	beq.n	8008748 <HAL_TIM_Base_Start_IT+0x94>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a23      	ldr	r2, [pc, #140]	; (80087a8 <HAL_TIM_Base_Start_IT+0xf4>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d013      	beq.n	8008748 <HAL_TIM_Base_Start_IT+0x94>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a21      	ldr	r2, [pc, #132]	; (80087ac <HAL_TIM_Base_Start_IT+0xf8>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d00e      	beq.n	8008748 <HAL_TIM_Base_Start_IT+0x94>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a20      	ldr	r2, [pc, #128]	; (80087b0 <HAL_TIM_Base_Start_IT+0xfc>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d009      	beq.n	8008748 <HAL_TIM_Base_Start_IT+0x94>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a1e      	ldr	r2, [pc, #120]	; (80087b4 <HAL_TIM_Base_Start_IT+0x100>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d004      	beq.n	8008748 <HAL_TIM_Base_Start_IT+0x94>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a1d      	ldr	r2, [pc, #116]	; (80087b8 <HAL_TIM_Base_Start_IT+0x104>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d115      	bne.n	8008774 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689a      	ldr	r2, [r3, #8]
 800874e:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <HAL_TIM_Base_Start_IT+0x108>)
 8008750:	4013      	ands	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b06      	cmp	r3, #6
 8008758:	d015      	beq.n	8008786 <HAL_TIM_Base_Start_IT+0xd2>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008760:	d011      	beq.n	8008786 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f042 0201 	orr.w	r2, r2, #1
 8008770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008772:	e008      	b.n	8008786 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0201 	orr.w	r2, r2, #1
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	e000      	b.n	8008788 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008786:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	40010000 	.word	0x40010000
 800879c:	40000400 	.word	0x40000400
 80087a0:	40000800 	.word	0x40000800
 80087a4:	40000c00 	.word	0x40000c00
 80087a8:	40010400 	.word	0x40010400
 80087ac:	40001800 	.word	0x40001800
 80087b0:	40014000 	.word	0x40014000
 80087b4:	4000e000 	.word	0x4000e000
 80087b8:	4000e400 	.word	0x4000e400
 80087bc:	00010007 	.word	0x00010007

080087c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d122      	bne.n	800881c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d11b      	bne.n	800881c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f06f 0202 	mvn.w	r2, #2
 80087ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f905 	bl	8008a12 <HAL_TIM_IC_CaptureCallback>
 8008808:	e005      	b.n	8008816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f8f7 	bl	80089fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f908 	bl	8008a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	f003 0304 	and.w	r3, r3, #4
 8008826:	2b04      	cmp	r3, #4
 8008828:	d122      	bne.n	8008870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b04      	cmp	r3, #4
 8008836:	d11b      	bne.n	8008870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f06f 0204 	mvn.w	r2, #4
 8008840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2202      	movs	r2, #2
 8008846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f8db 	bl	8008a12 <HAL_TIM_IC_CaptureCallback>
 800885c:	e005      	b.n	800886a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f8cd 	bl	80089fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f8de 	bl	8008a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f003 0308 	and.w	r3, r3, #8
 800887a:	2b08      	cmp	r3, #8
 800887c:	d122      	bne.n	80088c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	f003 0308 	and.w	r3, r3, #8
 8008888:	2b08      	cmp	r3, #8
 800888a:	d11b      	bne.n	80088c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f06f 0208 	mvn.w	r2, #8
 8008894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2204      	movs	r2, #4
 800889a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d003      	beq.n	80088b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f8b1 	bl	8008a12 <HAL_TIM_IC_CaptureCallback>
 80088b0:	e005      	b.n	80088be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f8a3 	bl	80089fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f8b4 	bl	8008a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	f003 0310 	and.w	r3, r3, #16
 80088ce:	2b10      	cmp	r3, #16
 80088d0:	d122      	bne.n	8008918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f003 0310 	and.w	r3, r3, #16
 80088dc:	2b10      	cmp	r3, #16
 80088de:	d11b      	bne.n	8008918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f06f 0210 	mvn.w	r2, #16
 80088e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2208      	movs	r2, #8
 80088ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f887 	bl	8008a12 <HAL_TIM_IC_CaptureCallback>
 8008904:	e005      	b.n	8008912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f879 	bl	80089fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f88a 	bl	8008a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b01      	cmp	r3, #1
 8008924:	d10e      	bne.n	8008944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b01      	cmp	r3, #1
 8008932:	d107      	bne.n	8008944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f06f 0201 	mvn.w	r2, #1
 800893c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7f8 ff14 	bl	800176c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800894e:	2b80      	cmp	r3, #128	; 0x80
 8008950:	d10e      	bne.n	8008970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800895c:	2b80      	cmp	r3, #128	; 0x80
 800895e:	d107      	bne.n	8008970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f9bc 	bl	8008ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800897a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800897e:	d10e      	bne.n	800899e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898a:	2b80      	cmp	r3, #128	; 0x80
 800898c:	d107      	bne.n	800899e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f9af 	bl	8008cfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a8:	2b40      	cmp	r3, #64	; 0x40
 80089aa:	d10e      	bne.n	80089ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b6:	2b40      	cmp	r3, #64	; 0x40
 80089b8:	d107      	bne.n	80089ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f838 	bl	8008a3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	f003 0320 	and.w	r3, r3, #32
 80089d4:	2b20      	cmp	r3, #32
 80089d6:	d10e      	bne.n	80089f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	d107      	bne.n	80089f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f06f 0220 	mvn.w	r2, #32
 80089ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f96f 	bl	8008cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089f6:	bf00      	nop
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a1a:	bf00      	nop
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a42:	bf00      	nop
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
	...

08008a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a44      	ldr	r2, [pc, #272]	; (8008b74 <TIM_Base_SetConfig+0x124>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d013      	beq.n	8008a90 <TIM_Base_SetConfig+0x40>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a6e:	d00f      	beq.n	8008a90 <TIM_Base_SetConfig+0x40>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a41      	ldr	r2, [pc, #260]	; (8008b78 <TIM_Base_SetConfig+0x128>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d00b      	beq.n	8008a90 <TIM_Base_SetConfig+0x40>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a40      	ldr	r2, [pc, #256]	; (8008b7c <TIM_Base_SetConfig+0x12c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d007      	beq.n	8008a90 <TIM_Base_SetConfig+0x40>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a3f      	ldr	r2, [pc, #252]	; (8008b80 <TIM_Base_SetConfig+0x130>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d003      	beq.n	8008a90 <TIM_Base_SetConfig+0x40>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a3e      	ldr	r2, [pc, #248]	; (8008b84 <TIM_Base_SetConfig+0x134>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d108      	bne.n	8008aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a33      	ldr	r2, [pc, #204]	; (8008b74 <TIM_Base_SetConfig+0x124>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d027      	beq.n	8008afa <TIM_Base_SetConfig+0xaa>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab0:	d023      	beq.n	8008afa <TIM_Base_SetConfig+0xaa>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a30      	ldr	r2, [pc, #192]	; (8008b78 <TIM_Base_SetConfig+0x128>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d01f      	beq.n	8008afa <TIM_Base_SetConfig+0xaa>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a2f      	ldr	r2, [pc, #188]	; (8008b7c <TIM_Base_SetConfig+0x12c>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d01b      	beq.n	8008afa <TIM_Base_SetConfig+0xaa>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a2e      	ldr	r2, [pc, #184]	; (8008b80 <TIM_Base_SetConfig+0x130>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d017      	beq.n	8008afa <TIM_Base_SetConfig+0xaa>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a2d      	ldr	r2, [pc, #180]	; (8008b84 <TIM_Base_SetConfig+0x134>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d013      	beq.n	8008afa <TIM_Base_SetConfig+0xaa>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a2c      	ldr	r2, [pc, #176]	; (8008b88 <TIM_Base_SetConfig+0x138>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d00f      	beq.n	8008afa <TIM_Base_SetConfig+0xaa>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a2b      	ldr	r2, [pc, #172]	; (8008b8c <TIM_Base_SetConfig+0x13c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00b      	beq.n	8008afa <TIM_Base_SetConfig+0xaa>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a2a      	ldr	r2, [pc, #168]	; (8008b90 <TIM_Base_SetConfig+0x140>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d007      	beq.n	8008afa <TIM_Base_SetConfig+0xaa>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a29      	ldr	r2, [pc, #164]	; (8008b94 <TIM_Base_SetConfig+0x144>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d003      	beq.n	8008afa <TIM_Base_SetConfig+0xaa>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a28      	ldr	r2, [pc, #160]	; (8008b98 <TIM_Base_SetConfig+0x148>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d108      	bne.n	8008b0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a10      	ldr	r2, [pc, #64]	; (8008b74 <TIM_Base_SetConfig+0x124>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d00f      	beq.n	8008b58 <TIM_Base_SetConfig+0x108>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a12      	ldr	r2, [pc, #72]	; (8008b84 <TIM_Base_SetConfig+0x134>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00b      	beq.n	8008b58 <TIM_Base_SetConfig+0x108>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a11      	ldr	r2, [pc, #68]	; (8008b88 <TIM_Base_SetConfig+0x138>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d007      	beq.n	8008b58 <TIM_Base_SetConfig+0x108>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a10      	ldr	r2, [pc, #64]	; (8008b8c <TIM_Base_SetConfig+0x13c>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d003      	beq.n	8008b58 <TIM_Base_SetConfig+0x108>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a0f      	ldr	r2, [pc, #60]	; (8008b90 <TIM_Base_SetConfig+0x140>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d103      	bne.n	8008b60 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	691a      	ldr	r2, [r3, #16]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	615a      	str	r2, [r3, #20]
}
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	40010000 	.word	0x40010000
 8008b78:	40000400 	.word	0x40000400
 8008b7c:	40000800 	.word	0x40000800
 8008b80:	40000c00 	.word	0x40000c00
 8008b84:	40010400 	.word	0x40010400
 8008b88:	40014000 	.word	0x40014000
 8008b8c:	40014400 	.word	0x40014400
 8008b90:	40014800 	.word	0x40014800
 8008b94:	4000e000 	.word	0x4000e000
 8008b98:	4000e400 	.word	0x4000e400

08008b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d101      	bne.n	8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	e077      	b.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a35      	ldr	r2, [pc, #212]	; (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d004      	beq.n	8008be8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a34      	ldr	r2, [pc, #208]	; (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d108      	bne.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a25      	ldr	r2, [pc, #148]	; (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d02c      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c26:	d027      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a22      	ldr	r2, [pc, #136]	; (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d022      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a21      	ldr	r2, [pc, #132]	; (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d01d      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a1f      	ldr	r2, [pc, #124]	; (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d018      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1a      	ldr	r2, [pc, #104]	; (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d013      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a1b      	ldr	r2, [pc, #108]	; (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d00e      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a1a      	ldr	r2, [pc, #104]	; (8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d009      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a18      	ldr	r2, [pc, #96]	; (8008ccc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d004      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a17      	ldr	r2, [pc, #92]	; (8008cd0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d10c      	bne.n	8008c92 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	40010000 	.word	0x40010000
 8008cb4:	40010400 	.word	0x40010400
 8008cb8:	40000400 	.word	0x40000400
 8008cbc:	40000800 	.word	0x40000800
 8008cc0:	40000c00 	.word	0x40000c00
 8008cc4:	40001800 	.word	0x40001800
 8008cc8:	40014000 	.word	0x40014000
 8008ccc:	4000e000 	.word	0x4000e000
 8008cd0:	4000e400 	.word	0x4000e400

08008cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e042      	b.n	8008da8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d106      	bne.n	8008d3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7f9 fb23 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2224      	movs	r2, #36	; 0x24
 8008d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f022 0201 	bic.w	r2, r2, #1
 8008d50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f8c2 	bl	8008edc <UART_SetConfig>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d101      	bne.n	8008d62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e022      	b.n	8008da8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 ff14 	bl	8009b98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f042 0201 	orr.w	r2, r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 ff9b 	bl	8009cdc <UART_CheckIdleState>
 8008da6:	4603      	mov	r3, r0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08a      	sub	sp, #40	; 0x28
 8008db4:	af02      	add	r7, sp, #8
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	f040 8083 	bne.w	8008ed2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <HAL_UART_Transmit+0x28>
 8008dd2:	88fb      	ldrh	r3, [r7, #6]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e07b      	b.n	8008ed4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d101      	bne.n	8008dea <HAL_UART_Transmit+0x3a>
 8008de6:	2302      	movs	r3, #2
 8008de8:	e074      	b.n	8008ed4 <HAL_UART_Transmit+0x124>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2221      	movs	r2, #33	; 0x21
 8008dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e02:	f7f9 fd05 	bl	8002810 <HAL_GetTick>
 8008e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	88fa      	ldrh	r2, [r7, #6]
 8008e0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	88fa      	ldrh	r2, [r7, #6]
 8008e14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e20:	d108      	bne.n	8008e34 <HAL_UART_Transmit+0x84>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	61bb      	str	r3, [r7, #24]
 8008e32:	e003      	b.n	8008e3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008e44:	e02c      	b.n	8008ea0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2180      	movs	r1, #128	; 0x80
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 ff8e 	bl	8009d72 <UART_WaitOnFlagUntilTimeout>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e039      	b.n	8008ed4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10b      	bne.n	8008e7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	3302      	adds	r3, #2
 8008e7a:	61bb      	str	r3, [r7, #24]
 8008e7c:	e007      	b.n	8008e8e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	781a      	ldrb	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1cc      	bne.n	8008e46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2140      	movs	r1, #64	; 0x40
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 ff5b 	bl	8009d72 <UART_WaitOnFlagUntilTimeout>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e006      	b.n	8008ed4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e000      	b.n	8008ed4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008ed2:	2302      	movs	r3, #2
  }
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3720      	adds	r7, #32
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008edc:	b5b0      	push	{r4, r5, r7, lr}
 8008ede:	b08e      	sub	sp, #56	; 0x38
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	689a      	ldr	r2, [r3, #8]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	4bbf      	ldr	r3, [pc, #764]	; (8009208 <UART_SetConfig+0x32c>)
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	6812      	ldr	r2, [r2, #0]
 8008f10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f12:	430b      	orrs	r3, r1
 8008f14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4ab5      	ldr	r2, [pc, #724]	; (800920c <UART_SetConfig+0x330>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d004      	beq.n	8008f46 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
 8008f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f42:	4313      	orrs	r3, r2
 8008f44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689a      	ldr	r2, [r3, #8]
 8008f4c:	4bb0      	ldr	r3, [pc, #704]	; (8009210 <UART_SetConfig+0x334>)
 8008f4e:	4013      	ands	r3, r2
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	6812      	ldr	r2, [r2, #0]
 8008f54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f56:	430b      	orrs	r3, r1
 8008f58:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	f023 010f 	bic.w	r1, r3, #15
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4aa7      	ldr	r2, [pc, #668]	; (8009214 <UART_SetConfig+0x338>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d176      	bne.n	8009068 <UART_SetConfig+0x18c>
 8008f7a:	4ba7      	ldr	r3, [pc, #668]	; (8009218 <UART_SetConfig+0x33c>)
 8008f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f82:	2b28      	cmp	r3, #40	; 0x28
 8008f84:	d86c      	bhi.n	8009060 <UART_SetConfig+0x184>
 8008f86:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <UART_SetConfig+0xb0>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08009031 	.word	0x08009031
 8008f90:	08009061 	.word	0x08009061
 8008f94:	08009061 	.word	0x08009061
 8008f98:	08009061 	.word	0x08009061
 8008f9c:	08009061 	.word	0x08009061
 8008fa0:	08009061 	.word	0x08009061
 8008fa4:	08009061 	.word	0x08009061
 8008fa8:	08009061 	.word	0x08009061
 8008fac:	08009039 	.word	0x08009039
 8008fb0:	08009061 	.word	0x08009061
 8008fb4:	08009061 	.word	0x08009061
 8008fb8:	08009061 	.word	0x08009061
 8008fbc:	08009061 	.word	0x08009061
 8008fc0:	08009061 	.word	0x08009061
 8008fc4:	08009061 	.word	0x08009061
 8008fc8:	08009061 	.word	0x08009061
 8008fcc:	08009041 	.word	0x08009041
 8008fd0:	08009061 	.word	0x08009061
 8008fd4:	08009061 	.word	0x08009061
 8008fd8:	08009061 	.word	0x08009061
 8008fdc:	08009061 	.word	0x08009061
 8008fe0:	08009061 	.word	0x08009061
 8008fe4:	08009061 	.word	0x08009061
 8008fe8:	08009061 	.word	0x08009061
 8008fec:	08009049 	.word	0x08009049
 8008ff0:	08009061 	.word	0x08009061
 8008ff4:	08009061 	.word	0x08009061
 8008ff8:	08009061 	.word	0x08009061
 8008ffc:	08009061 	.word	0x08009061
 8009000:	08009061 	.word	0x08009061
 8009004:	08009061 	.word	0x08009061
 8009008:	08009061 	.word	0x08009061
 800900c:	08009051 	.word	0x08009051
 8009010:	08009061 	.word	0x08009061
 8009014:	08009061 	.word	0x08009061
 8009018:	08009061 	.word	0x08009061
 800901c:	08009061 	.word	0x08009061
 8009020:	08009061 	.word	0x08009061
 8009024:	08009061 	.word	0x08009061
 8009028:	08009061 	.word	0x08009061
 800902c:	08009059 	.word	0x08009059
 8009030:	2301      	movs	r3, #1
 8009032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009036:	e326      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009038:	2304      	movs	r3, #4
 800903a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903e:	e322      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009040:	2308      	movs	r3, #8
 8009042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009046:	e31e      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009048:	2310      	movs	r3, #16
 800904a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800904e:	e31a      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009050:	2320      	movs	r3, #32
 8009052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009056:	e316      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009058:	2340      	movs	r3, #64	; 0x40
 800905a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800905e:	e312      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009060:	2380      	movs	r3, #128	; 0x80
 8009062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009066:	e30e      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a6b      	ldr	r2, [pc, #428]	; (800921c <UART_SetConfig+0x340>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d130      	bne.n	80090d4 <UART_SetConfig+0x1f8>
 8009072:	4b69      	ldr	r3, [pc, #420]	; (8009218 <UART_SetConfig+0x33c>)
 8009074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b05      	cmp	r3, #5
 800907c:	d826      	bhi.n	80090cc <UART_SetConfig+0x1f0>
 800907e:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <UART_SetConfig+0x1a8>)
 8009080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009084:	0800909d 	.word	0x0800909d
 8009088:	080090a5 	.word	0x080090a5
 800908c:	080090ad 	.word	0x080090ad
 8009090:	080090b5 	.word	0x080090b5
 8009094:	080090bd 	.word	0x080090bd
 8009098:	080090c5 	.word	0x080090c5
 800909c:	2300      	movs	r3, #0
 800909e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a2:	e2f0      	b.n	8009686 <UART_SetConfig+0x7aa>
 80090a4:	2304      	movs	r3, #4
 80090a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090aa:	e2ec      	b.n	8009686 <UART_SetConfig+0x7aa>
 80090ac:	2308      	movs	r3, #8
 80090ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b2:	e2e8      	b.n	8009686 <UART_SetConfig+0x7aa>
 80090b4:	2310      	movs	r3, #16
 80090b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ba:	e2e4      	b.n	8009686 <UART_SetConfig+0x7aa>
 80090bc:	2320      	movs	r3, #32
 80090be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090c2:	e2e0      	b.n	8009686 <UART_SetConfig+0x7aa>
 80090c4:	2340      	movs	r3, #64	; 0x40
 80090c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ca:	e2dc      	b.n	8009686 <UART_SetConfig+0x7aa>
 80090cc:	2380      	movs	r3, #128	; 0x80
 80090ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090d2:	e2d8      	b.n	8009686 <UART_SetConfig+0x7aa>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a51      	ldr	r2, [pc, #324]	; (8009220 <UART_SetConfig+0x344>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d130      	bne.n	8009140 <UART_SetConfig+0x264>
 80090de:	4b4e      	ldr	r3, [pc, #312]	; (8009218 <UART_SetConfig+0x33c>)
 80090e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	2b05      	cmp	r3, #5
 80090e8:	d826      	bhi.n	8009138 <UART_SetConfig+0x25c>
 80090ea:	a201      	add	r2, pc, #4	; (adr r2, 80090f0 <UART_SetConfig+0x214>)
 80090ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f0:	08009109 	.word	0x08009109
 80090f4:	08009111 	.word	0x08009111
 80090f8:	08009119 	.word	0x08009119
 80090fc:	08009121 	.word	0x08009121
 8009100:	08009129 	.word	0x08009129
 8009104:	08009131 	.word	0x08009131
 8009108:	2300      	movs	r3, #0
 800910a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800910e:	e2ba      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009110:	2304      	movs	r3, #4
 8009112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009116:	e2b6      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009118:	2308      	movs	r3, #8
 800911a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800911e:	e2b2      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009120:	2310      	movs	r3, #16
 8009122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009126:	e2ae      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009128:	2320      	movs	r3, #32
 800912a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800912e:	e2aa      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009130:	2340      	movs	r3, #64	; 0x40
 8009132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009136:	e2a6      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009138:	2380      	movs	r3, #128	; 0x80
 800913a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800913e:	e2a2      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a37      	ldr	r2, [pc, #220]	; (8009224 <UART_SetConfig+0x348>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d130      	bne.n	80091ac <UART_SetConfig+0x2d0>
 800914a:	4b33      	ldr	r3, [pc, #204]	; (8009218 <UART_SetConfig+0x33c>)
 800914c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914e:	f003 0307 	and.w	r3, r3, #7
 8009152:	2b05      	cmp	r3, #5
 8009154:	d826      	bhi.n	80091a4 <UART_SetConfig+0x2c8>
 8009156:	a201      	add	r2, pc, #4	; (adr r2, 800915c <UART_SetConfig+0x280>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	08009175 	.word	0x08009175
 8009160:	0800917d 	.word	0x0800917d
 8009164:	08009185 	.word	0x08009185
 8009168:	0800918d 	.word	0x0800918d
 800916c:	08009195 	.word	0x08009195
 8009170:	0800919d 	.word	0x0800919d
 8009174:	2300      	movs	r3, #0
 8009176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800917a:	e284      	b.n	8009686 <UART_SetConfig+0x7aa>
 800917c:	2304      	movs	r3, #4
 800917e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009182:	e280      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009184:	2308      	movs	r3, #8
 8009186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800918a:	e27c      	b.n	8009686 <UART_SetConfig+0x7aa>
 800918c:	2310      	movs	r3, #16
 800918e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009192:	e278      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009194:	2320      	movs	r3, #32
 8009196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800919a:	e274      	b.n	8009686 <UART_SetConfig+0x7aa>
 800919c:	2340      	movs	r3, #64	; 0x40
 800919e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091a2:	e270      	b.n	8009686 <UART_SetConfig+0x7aa>
 80091a4:	2380      	movs	r3, #128	; 0x80
 80091a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091aa:	e26c      	b.n	8009686 <UART_SetConfig+0x7aa>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a1d      	ldr	r2, [pc, #116]	; (8009228 <UART_SetConfig+0x34c>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d142      	bne.n	800923c <UART_SetConfig+0x360>
 80091b6:	4b18      	ldr	r3, [pc, #96]	; (8009218 <UART_SetConfig+0x33c>)
 80091b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ba:	f003 0307 	and.w	r3, r3, #7
 80091be:	2b05      	cmp	r3, #5
 80091c0:	d838      	bhi.n	8009234 <UART_SetConfig+0x358>
 80091c2:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <UART_SetConfig+0x2ec>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	080091e1 	.word	0x080091e1
 80091cc:	080091e9 	.word	0x080091e9
 80091d0:	080091f1 	.word	0x080091f1
 80091d4:	080091f9 	.word	0x080091f9
 80091d8:	08009201 	.word	0x08009201
 80091dc:	0800922d 	.word	0x0800922d
 80091e0:	2300      	movs	r3, #0
 80091e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091e6:	e24e      	b.n	8009686 <UART_SetConfig+0x7aa>
 80091e8:	2304      	movs	r3, #4
 80091ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ee:	e24a      	b.n	8009686 <UART_SetConfig+0x7aa>
 80091f0:	2308      	movs	r3, #8
 80091f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091f6:	e246      	b.n	8009686 <UART_SetConfig+0x7aa>
 80091f8:	2310      	movs	r3, #16
 80091fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091fe:	e242      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009200:	2320      	movs	r3, #32
 8009202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009206:	e23e      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009208:	cfff69f3 	.word	0xcfff69f3
 800920c:	58000c00 	.word	0x58000c00
 8009210:	11fff4ff 	.word	0x11fff4ff
 8009214:	40011000 	.word	0x40011000
 8009218:	58024400 	.word	0x58024400
 800921c:	40004400 	.word	0x40004400
 8009220:	40004800 	.word	0x40004800
 8009224:	40004c00 	.word	0x40004c00
 8009228:	40005000 	.word	0x40005000
 800922c:	2340      	movs	r3, #64	; 0x40
 800922e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009232:	e228      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009234:	2380      	movs	r3, #128	; 0x80
 8009236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923a:	e224      	b.n	8009686 <UART_SetConfig+0x7aa>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4ab1      	ldr	r2, [pc, #708]	; (8009508 <UART_SetConfig+0x62c>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d176      	bne.n	8009334 <UART_SetConfig+0x458>
 8009246:	4bb1      	ldr	r3, [pc, #708]	; (800950c <UART_SetConfig+0x630>)
 8009248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800924e:	2b28      	cmp	r3, #40	; 0x28
 8009250:	d86c      	bhi.n	800932c <UART_SetConfig+0x450>
 8009252:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <UART_SetConfig+0x37c>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	080092fd 	.word	0x080092fd
 800925c:	0800932d 	.word	0x0800932d
 8009260:	0800932d 	.word	0x0800932d
 8009264:	0800932d 	.word	0x0800932d
 8009268:	0800932d 	.word	0x0800932d
 800926c:	0800932d 	.word	0x0800932d
 8009270:	0800932d 	.word	0x0800932d
 8009274:	0800932d 	.word	0x0800932d
 8009278:	08009305 	.word	0x08009305
 800927c:	0800932d 	.word	0x0800932d
 8009280:	0800932d 	.word	0x0800932d
 8009284:	0800932d 	.word	0x0800932d
 8009288:	0800932d 	.word	0x0800932d
 800928c:	0800932d 	.word	0x0800932d
 8009290:	0800932d 	.word	0x0800932d
 8009294:	0800932d 	.word	0x0800932d
 8009298:	0800930d 	.word	0x0800930d
 800929c:	0800932d 	.word	0x0800932d
 80092a0:	0800932d 	.word	0x0800932d
 80092a4:	0800932d 	.word	0x0800932d
 80092a8:	0800932d 	.word	0x0800932d
 80092ac:	0800932d 	.word	0x0800932d
 80092b0:	0800932d 	.word	0x0800932d
 80092b4:	0800932d 	.word	0x0800932d
 80092b8:	08009315 	.word	0x08009315
 80092bc:	0800932d 	.word	0x0800932d
 80092c0:	0800932d 	.word	0x0800932d
 80092c4:	0800932d 	.word	0x0800932d
 80092c8:	0800932d 	.word	0x0800932d
 80092cc:	0800932d 	.word	0x0800932d
 80092d0:	0800932d 	.word	0x0800932d
 80092d4:	0800932d 	.word	0x0800932d
 80092d8:	0800931d 	.word	0x0800931d
 80092dc:	0800932d 	.word	0x0800932d
 80092e0:	0800932d 	.word	0x0800932d
 80092e4:	0800932d 	.word	0x0800932d
 80092e8:	0800932d 	.word	0x0800932d
 80092ec:	0800932d 	.word	0x0800932d
 80092f0:	0800932d 	.word	0x0800932d
 80092f4:	0800932d 	.word	0x0800932d
 80092f8:	08009325 	.word	0x08009325
 80092fc:	2301      	movs	r3, #1
 80092fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009302:	e1c0      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009304:	2304      	movs	r3, #4
 8009306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930a:	e1bc      	b.n	8009686 <UART_SetConfig+0x7aa>
 800930c:	2308      	movs	r3, #8
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	e1b8      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009314:	2310      	movs	r3, #16
 8009316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931a:	e1b4      	b.n	8009686 <UART_SetConfig+0x7aa>
 800931c:	2320      	movs	r3, #32
 800931e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009322:	e1b0      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009324:	2340      	movs	r3, #64	; 0x40
 8009326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800932a:	e1ac      	b.n	8009686 <UART_SetConfig+0x7aa>
 800932c:	2380      	movs	r3, #128	; 0x80
 800932e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009332:	e1a8      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a75      	ldr	r2, [pc, #468]	; (8009510 <UART_SetConfig+0x634>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d130      	bne.n	80093a0 <UART_SetConfig+0x4c4>
 800933e:	4b73      	ldr	r3, [pc, #460]	; (800950c <UART_SetConfig+0x630>)
 8009340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009342:	f003 0307 	and.w	r3, r3, #7
 8009346:	2b05      	cmp	r3, #5
 8009348:	d826      	bhi.n	8009398 <UART_SetConfig+0x4bc>
 800934a:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <UART_SetConfig+0x474>)
 800934c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009350:	08009369 	.word	0x08009369
 8009354:	08009371 	.word	0x08009371
 8009358:	08009379 	.word	0x08009379
 800935c:	08009381 	.word	0x08009381
 8009360:	08009389 	.word	0x08009389
 8009364:	08009391 	.word	0x08009391
 8009368:	2300      	movs	r3, #0
 800936a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936e:	e18a      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009370:	2304      	movs	r3, #4
 8009372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009376:	e186      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009378:	2308      	movs	r3, #8
 800937a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937e:	e182      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009380:	2310      	movs	r3, #16
 8009382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009386:	e17e      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009388:	2320      	movs	r3, #32
 800938a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938e:	e17a      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009390:	2340      	movs	r3, #64	; 0x40
 8009392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009396:	e176      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009398:	2380      	movs	r3, #128	; 0x80
 800939a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800939e:	e172      	b.n	8009686 <UART_SetConfig+0x7aa>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a5b      	ldr	r2, [pc, #364]	; (8009514 <UART_SetConfig+0x638>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d130      	bne.n	800940c <UART_SetConfig+0x530>
 80093aa:	4b58      	ldr	r3, [pc, #352]	; (800950c <UART_SetConfig+0x630>)
 80093ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	d826      	bhi.n	8009404 <UART_SetConfig+0x528>
 80093b6:	a201      	add	r2, pc, #4	; (adr r2, 80093bc <UART_SetConfig+0x4e0>)
 80093b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093bc:	080093d5 	.word	0x080093d5
 80093c0:	080093dd 	.word	0x080093dd
 80093c4:	080093e5 	.word	0x080093e5
 80093c8:	080093ed 	.word	0x080093ed
 80093cc:	080093f5 	.word	0x080093f5
 80093d0:	080093fd 	.word	0x080093fd
 80093d4:	2300      	movs	r3, #0
 80093d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093da:	e154      	b.n	8009686 <UART_SetConfig+0x7aa>
 80093dc:	2304      	movs	r3, #4
 80093de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e2:	e150      	b.n	8009686 <UART_SetConfig+0x7aa>
 80093e4:	2308      	movs	r3, #8
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	e14c      	b.n	8009686 <UART_SetConfig+0x7aa>
 80093ec:	2310      	movs	r3, #16
 80093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f2:	e148      	b.n	8009686 <UART_SetConfig+0x7aa>
 80093f4:	2320      	movs	r3, #32
 80093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fa:	e144      	b.n	8009686 <UART_SetConfig+0x7aa>
 80093fc:	2340      	movs	r3, #64	; 0x40
 80093fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009402:	e140      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009404:	2380      	movs	r3, #128	; 0x80
 8009406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800940a:	e13c      	b.n	8009686 <UART_SetConfig+0x7aa>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a41      	ldr	r2, [pc, #260]	; (8009518 <UART_SetConfig+0x63c>)
 8009412:	4293      	cmp	r3, r2
 8009414:	f040 8082 	bne.w	800951c <UART_SetConfig+0x640>
 8009418:	4b3c      	ldr	r3, [pc, #240]	; (800950c <UART_SetConfig+0x630>)
 800941a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800941c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009420:	2b28      	cmp	r3, #40	; 0x28
 8009422:	d86d      	bhi.n	8009500 <UART_SetConfig+0x624>
 8009424:	a201      	add	r2, pc, #4	; (adr r2, 800942c <UART_SetConfig+0x550>)
 8009426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942a:	bf00      	nop
 800942c:	080094d1 	.word	0x080094d1
 8009430:	08009501 	.word	0x08009501
 8009434:	08009501 	.word	0x08009501
 8009438:	08009501 	.word	0x08009501
 800943c:	08009501 	.word	0x08009501
 8009440:	08009501 	.word	0x08009501
 8009444:	08009501 	.word	0x08009501
 8009448:	08009501 	.word	0x08009501
 800944c:	080094d9 	.word	0x080094d9
 8009450:	08009501 	.word	0x08009501
 8009454:	08009501 	.word	0x08009501
 8009458:	08009501 	.word	0x08009501
 800945c:	08009501 	.word	0x08009501
 8009460:	08009501 	.word	0x08009501
 8009464:	08009501 	.word	0x08009501
 8009468:	08009501 	.word	0x08009501
 800946c:	080094e1 	.word	0x080094e1
 8009470:	08009501 	.word	0x08009501
 8009474:	08009501 	.word	0x08009501
 8009478:	08009501 	.word	0x08009501
 800947c:	08009501 	.word	0x08009501
 8009480:	08009501 	.word	0x08009501
 8009484:	08009501 	.word	0x08009501
 8009488:	08009501 	.word	0x08009501
 800948c:	080094e9 	.word	0x080094e9
 8009490:	08009501 	.word	0x08009501
 8009494:	08009501 	.word	0x08009501
 8009498:	08009501 	.word	0x08009501
 800949c:	08009501 	.word	0x08009501
 80094a0:	08009501 	.word	0x08009501
 80094a4:	08009501 	.word	0x08009501
 80094a8:	08009501 	.word	0x08009501
 80094ac:	080094f1 	.word	0x080094f1
 80094b0:	08009501 	.word	0x08009501
 80094b4:	08009501 	.word	0x08009501
 80094b8:	08009501 	.word	0x08009501
 80094bc:	08009501 	.word	0x08009501
 80094c0:	08009501 	.word	0x08009501
 80094c4:	08009501 	.word	0x08009501
 80094c8:	08009501 	.word	0x08009501
 80094cc:	080094f9 	.word	0x080094f9
 80094d0:	2301      	movs	r3, #1
 80094d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094d6:	e0d6      	b.n	8009686 <UART_SetConfig+0x7aa>
 80094d8:	2304      	movs	r3, #4
 80094da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094de:	e0d2      	b.n	8009686 <UART_SetConfig+0x7aa>
 80094e0:	2308      	movs	r3, #8
 80094e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094e6:	e0ce      	b.n	8009686 <UART_SetConfig+0x7aa>
 80094e8:	2310      	movs	r3, #16
 80094ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ee:	e0ca      	b.n	8009686 <UART_SetConfig+0x7aa>
 80094f0:	2320      	movs	r3, #32
 80094f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094f6:	e0c6      	b.n	8009686 <UART_SetConfig+0x7aa>
 80094f8:	2340      	movs	r3, #64	; 0x40
 80094fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094fe:	e0c2      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009500:	2380      	movs	r3, #128	; 0x80
 8009502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009506:	e0be      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009508:	40011400 	.word	0x40011400
 800950c:	58024400 	.word	0x58024400
 8009510:	40007800 	.word	0x40007800
 8009514:	40007c00 	.word	0x40007c00
 8009518:	40011800 	.word	0x40011800
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4aad      	ldr	r2, [pc, #692]	; (80097d8 <UART_SetConfig+0x8fc>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d176      	bne.n	8009614 <UART_SetConfig+0x738>
 8009526:	4bad      	ldr	r3, [pc, #692]	; (80097dc <UART_SetConfig+0x900>)
 8009528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800952e:	2b28      	cmp	r3, #40	; 0x28
 8009530:	d86c      	bhi.n	800960c <UART_SetConfig+0x730>
 8009532:	a201      	add	r2, pc, #4	; (adr r2, 8009538 <UART_SetConfig+0x65c>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	080095dd 	.word	0x080095dd
 800953c:	0800960d 	.word	0x0800960d
 8009540:	0800960d 	.word	0x0800960d
 8009544:	0800960d 	.word	0x0800960d
 8009548:	0800960d 	.word	0x0800960d
 800954c:	0800960d 	.word	0x0800960d
 8009550:	0800960d 	.word	0x0800960d
 8009554:	0800960d 	.word	0x0800960d
 8009558:	080095e5 	.word	0x080095e5
 800955c:	0800960d 	.word	0x0800960d
 8009560:	0800960d 	.word	0x0800960d
 8009564:	0800960d 	.word	0x0800960d
 8009568:	0800960d 	.word	0x0800960d
 800956c:	0800960d 	.word	0x0800960d
 8009570:	0800960d 	.word	0x0800960d
 8009574:	0800960d 	.word	0x0800960d
 8009578:	080095ed 	.word	0x080095ed
 800957c:	0800960d 	.word	0x0800960d
 8009580:	0800960d 	.word	0x0800960d
 8009584:	0800960d 	.word	0x0800960d
 8009588:	0800960d 	.word	0x0800960d
 800958c:	0800960d 	.word	0x0800960d
 8009590:	0800960d 	.word	0x0800960d
 8009594:	0800960d 	.word	0x0800960d
 8009598:	080095f5 	.word	0x080095f5
 800959c:	0800960d 	.word	0x0800960d
 80095a0:	0800960d 	.word	0x0800960d
 80095a4:	0800960d 	.word	0x0800960d
 80095a8:	0800960d 	.word	0x0800960d
 80095ac:	0800960d 	.word	0x0800960d
 80095b0:	0800960d 	.word	0x0800960d
 80095b4:	0800960d 	.word	0x0800960d
 80095b8:	080095fd 	.word	0x080095fd
 80095bc:	0800960d 	.word	0x0800960d
 80095c0:	0800960d 	.word	0x0800960d
 80095c4:	0800960d 	.word	0x0800960d
 80095c8:	0800960d 	.word	0x0800960d
 80095cc:	0800960d 	.word	0x0800960d
 80095d0:	0800960d 	.word	0x0800960d
 80095d4:	0800960d 	.word	0x0800960d
 80095d8:	08009605 	.word	0x08009605
 80095dc:	2301      	movs	r3, #1
 80095de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e2:	e050      	b.n	8009686 <UART_SetConfig+0x7aa>
 80095e4:	2304      	movs	r3, #4
 80095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ea:	e04c      	b.n	8009686 <UART_SetConfig+0x7aa>
 80095ec:	2308      	movs	r3, #8
 80095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f2:	e048      	b.n	8009686 <UART_SetConfig+0x7aa>
 80095f4:	2310      	movs	r3, #16
 80095f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fa:	e044      	b.n	8009686 <UART_SetConfig+0x7aa>
 80095fc:	2320      	movs	r3, #32
 80095fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009602:	e040      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009604:	2340      	movs	r3, #64	; 0x40
 8009606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960a:	e03c      	b.n	8009686 <UART_SetConfig+0x7aa>
 800960c:	2380      	movs	r3, #128	; 0x80
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009612:	e038      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a71      	ldr	r2, [pc, #452]	; (80097e0 <UART_SetConfig+0x904>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d130      	bne.n	8009680 <UART_SetConfig+0x7a4>
 800961e:	4b6f      	ldr	r3, [pc, #444]	; (80097dc <UART_SetConfig+0x900>)
 8009620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009622:	f003 0307 	and.w	r3, r3, #7
 8009626:	2b05      	cmp	r3, #5
 8009628:	d826      	bhi.n	8009678 <UART_SetConfig+0x79c>
 800962a:	a201      	add	r2, pc, #4	; (adr r2, 8009630 <UART_SetConfig+0x754>)
 800962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009630:	08009649 	.word	0x08009649
 8009634:	08009651 	.word	0x08009651
 8009638:	08009659 	.word	0x08009659
 800963c:	08009661 	.word	0x08009661
 8009640:	08009669 	.word	0x08009669
 8009644:	08009671 	.word	0x08009671
 8009648:	2302      	movs	r3, #2
 800964a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964e:	e01a      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009650:	2304      	movs	r3, #4
 8009652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009656:	e016      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009658:	2308      	movs	r3, #8
 800965a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965e:	e012      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009660:	2310      	movs	r3, #16
 8009662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009666:	e00e      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009668:	2320      	movs	r3, #32
 800966a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800966e:	e00a      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009670:	2340      	movs	r3, #64	; 0x40
 8009672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009676:	e006      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009678:	2380      	movs	r3, #128	; 0x80
 800967a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800967e:	e002      	b.n	8009686 <UART_SetConfig+0x7aa>
 8009680:	2380      	movs	r3, #128	; 0x80
 8009682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a55      	ldr	r2, [pc, #340]	; (80097e0 <UART_SetConfig+0x904>)
 800968c:	4293      	cmp	r3, r2
 800968e:	f040 80f0 	bne.w	8009872 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009692:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009696:	2b20      	cmp	r3, #32
 8009698:	dc46      	bgt.n	8009728 <UART_SetConfig+0x84c>
 800969a:	2b02      	cmp	r3, #2
 800969c:	db75      	blt.n	800978a <UART_SetConfig+0x8ae>
 800969e:	3b02      	subs	r3, #2
 80096a0:	2b1e      	cmp	r3, #30
 80096a2:	d872      	bhi.n	800978a <UART_SetConfig+0x8ae>
 80096a4:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <UART_SetConfig+0x7d0>)
 80096a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096aa:	bf00      	nop
 80096ac:	0800972f 	.word	0x0800972f
 80096b0:	0800978b 	.word	0x0800978b
 80096b4:	08009737 	.word	0x08009737
 80096b8:	0800978b 	.word	0x0800978b
 80096bc:	0800978b 	.word	0x0800978b
 80096c0:	0800978b 	.word	0x0800978b
 80096c4:	08009747 	.word	0x08009747
 80096c8:	0800978b 	.word	0x0800978b
 80096cc:	0800978b 	.word	0x0800978b
 80096d0:	0800978b 	.word	0x0800978b
 80096d4:	0800978b 	.word	0x0800978b
 80096d8:	0800978b 	.word	0x0800978b
 80096dc:	0800978b 	.word	0x0800978b
 80096e0:	0800978b 	.word	0x0800978b
 80096e4:	08009757 	.word	0x08009757
 80096e8:	0800978b 	.word	0x0800978b
 80096ec:	0800978b 	.word	0x0800978b
 80096f0:	0800978b 	.word	0x0800978b
 80096f4:	0800978b 	.word	0x0800978b
 80096f8:	0800978b 	.word	0x0800978b
 80096fc:	0800978b 	.word	0x0800978b
 8009700:	0800978b 	.word	0x0800978b
 8009704:	0800978b 	.word	0x0800978b
 8009708:	0800978b 	.word	0x0800978b
 800970c:	0800978b 	.word	0x0800978b
 8009710:	0800978b 	.word	0x0800978b
 8009714:	0800978b 	.word	0x0800978b
 8009718:	0800978b 	.word	0x0800978b
 800971c:	0800978b 	.word	0x0800978b
 8009720:	0800978b 	.word	0x0800978b
 8009724:	0800977d 	.word	0x0800977d
 8009728:	2b40      	cmp	r3, #64	; 0x40
 800972a:	d02a      	beq.n	8009782 <UART_SetConfig+0x8a6>
 800972c:	e02d      	b.n	800978a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800972e:	f7fd fee9 	bl	8007504 <HAL_RCCEx_GetD3PCLK1Freq>
 8009732:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009734:	e02f      	b.n	8009796 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009736:	f107 0314 	add.w	r3, r7, #20
 800973a:	4618      	mov	r0, r3
 800973c:	f7fd fef8 	bl	8007530 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009744:	e027      	b.n	8009796 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009746:	f107 0308 	add.w	r3, r7, #8
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe f844 	bl	80077d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009754:	e01f      	b.n	8009796 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009756:	4b21      	ldr	r3, [pc, #132]	; (80097dc <UART_SetConfig+0x900>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0320 	and.w	r3, r3, #32
 800975e:	2b00      	cmp	r3, #0
 8009760:	d009      	beq.n	8009776 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009762:	4b1e      	ldr	r3, [pc, #120]	; (80097dc <UART_SetConfig+0x900>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	08db      	lsrs	r3, r3, #3
 8009768:	f003 0303 	and.w	r3, r3, #3
 800976c:	4a1d      	ldr	r2, [pc, #116]	; (80097e4 <UART_SetConfig+0x908>)
 800976e:	fa22 f303 	lsr.w	r3, r2, r3
 8009772:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009774:	e00f      	b.n	8009796 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8009776:	4b1b      	ldr	r3, [pc, #108]	; (80097e4 <UART_SetConfig+0x908>)
 8009778:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800977a:	e00c      	b.n	8009796 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800977c:	4b1a      	ldr	r3, [pc, #104]	; (80097e8 <UART_SetConfig+0x90c>)
 800977e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009780:	e009      	b.n	8009796 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009788:	e005      	b.n	8009796 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009794:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 81e6 	beq.w	8009b6a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	4a12      	ldr	r2, [pc, #72]	; (80097ec <UART_SetConfig+0x910>)
 80097a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097a8:	461a      	mov	r2, r3
 80097aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80097b0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	4613      	mov	r3, r2
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	4413      	add	r3, r2
 80097bc:	6a3a      	ldr	r2, [r7, #32]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d305      	bcc.n	80097ce <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097c8:	6a3a      	ldr	r2, [r7, #32]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d910      	bls.n	80097f0 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80097d4:	e1c9      	b.n	8009b6a <UART_SetConfig+0xc8e>
 80097d6:	bf00      	nop
 80097d8:	40011c00 	.word	0x40011c00
 80097dc:	58024400 	.word	0x58024400
 80097e0:	58000c00 	.word	0x58000c00
 80097e4:	03d09000 	.word	0x03d09000
 80097e8:	003d0900 	.word	0x003d0900
 80097ec:	0801d370 	.word	0x0801d370
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f2:	4618      	mov	r0, r3
 80097f4:	f04f 0100 	mov.w	r1, #0
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	4ac1      	ldr	r2, [pc, #772]	; (8009b04 <UART_SetConfig+0xc28>)
 80097fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009802:	b29a      	uxth	r2, r3
 8009804:	f04f 0300 	mov.w	r3, #0
 8009808:	f7f6 fdda 	bl	80003c0 <__aeabi_uldivmod>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4610      	mov	r0, r2
 8009812:	4619      	mov	r1, r3
 8009814:	f04f 0200 	mov.w	r2, #0
 8009818:	f04f 0300 	mov.w	r3, #0
 800981c:	020b      	lsls	r3, r1, #8
 800981e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009822:	0202      	lsls	r2, r0, #8
 8009824:	6879      	ldr	r1, [r7, #4]
 8009826:	6849      	ldr	r1, [r1, #4]
 8009828:	0849      	lsrs	r1, r1, #1
 800982a:	4608      	mov	r0, r1
 800982c:	f04f 0100 	mov.w	r1, #0
 8009830:	1814      	adds	r4, r2, r0
 8009832:	eb43 0501 	adc.w	r5, r3, r1
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	461a      	mov	r2, r3
 800983c:	f04f 0300 	mov.w	r3, #0
 8009840:	4620      	mov	r0, r4
 8009842:	4629      	mov	r1, r5
 8009844:	f7f6 fdbc 	bl	80003c0 <__aeabi_uldivmod>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4613      	mov	r3, r2
 800984e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009856:	d308      	bcc.n	800986a <UART_SetConfig+0x98e>
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800985e:	d204      	bcs.n	800986a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009866:	60da      	str	r2, [r3, #12]
 8009868:	e17f      	b.n	8009b6a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009870:	e17b      	b.n	8009b6a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800987a:	f040 80bd 	bne.w	80099f8 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800987e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009882:	2b20      	cmp	r3, #32
 8009884:	dc48      	bgt.n	8009918 <UART_SetConfig+0xa3c>
 8009886:	2b00      	cmp	r3, #0
 8009888:	db7b      	blt.n	8009982 <UART_SetConfig+0xaa6>
 800988a:	2b20      	cmp	r3, #32
 800988c:	d879      	bhi.n	8009982 <UART_SetConfig+0xaa6>
 800988e:	a201      	add	r2, pc, #4	; (adr r2, 8009894 <UART_SetConfig+0x9b8>)
 8009890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009894:	0800991f 	.word	0x0800991f
 8009898:	08009927 	.word	0x08009927
 800989c:	08009983 	.word	0x08009983
 80098a0:	08009983 	.word	0x08009983
 80098a4:	0800992f 	.word	0x0800992f
 80098a8:	08009983 	.word	0x08009983
 80098ac:	08009983 	.word	0x08009983
 80098b0:	08009983 	.word	0x08009983
 80098b4:	0800993f 	.word	0x0800993f
 80098b8:	08009983 	.word	0x08009983
 80098bc:	08009983 	.word	0x08009983
 80098c0:	08009983 	.word	0x08009983
 80098c4:	08009983 	.word	0x08009983
 80098c8:	08009983 	.word	0x08009983
 80098cc:	08009983 	.word	0x08009983
 80098d0:	08009983 	.word	0x08009983
 80098d4:	0800994f 	.word	0x0800994f
 80098d8:	08009983 	.word	0x08009983
 80098dc:	08009983 	.word	0x08009983
 80098e0:	08009983 	.word	0x08009983
 80098e4:	08009983 	.word	0x08009983
 80098e8:	08009983 	.word	0x08009983
 80098ec:	08009983 	.word	0x08009983
 80098f0:	08009983 	.word	0x08009983
 80098f4:	08009983 	.word	0x08009983
 80098f8:	08009983 	.word	0x08009983
 80098fc:	08009983 	.word	0x08009983
 8009900:	08009983 	.word	0x08009983
 8009904:	08009983 	.word	0x08009983
 8009908:	08009983 	.word	0x08009983
 800990c:	08009983 	.word	0x08009983
 8009910:	08009983 	.word	0x08009983
 8009914:	08009975 	.word	0x08009975
 8009918:	2b40      	cmp	r3, #64	; 0x40
 800991a:	d02e      	beq.n	800997a <UART_SetConfig+0xa9e>
 800991c:	e031      	b.n	8009982 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800991e:	f7fc fe89 	bl	8006634 <HAL_RCC_GetPCLK1Freq>
 8009922:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009924:	e033      	b.n	800998e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009926:	f7fc fe9b 	bl	8006660 <HAL_RCC_GetPCLK2Freq>
 800992a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800992c:	e02f      	b.n	800998e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800992e:	f107 0314 	add.w	r3, r7, #20
 8009932:	4618      	mov	r0, r3
 8009934:	f7fd fdfc 	bl	8007530 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800993c:	e027      	b.n	800998e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800993e:	f107 0308 	add.w	r3, r7, #8
 8009942:	4618      	mov	r0, r3
 8009944:	f7fd ff48 	bl	80077d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800994c:	e01f      	b.n	800998e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800994e:	4b6e      	ldr	r3, [pc, #440]	; (8009b08 <UART_SetConfig+0xc2c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0320 	and.w	r3, r3, #32
 8009956:	2b00      	cmp	r3, #0
 8009958:	d009      	beq.n	800996e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800995a:	4b6b      	ldr	r3, [pc, #428]	; (8009b08 <UART_SetConfig+0xc2c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	08db      	lsrs	r3, r3, #3
 8009960:	f003 0303 	and.w	r3, r3, #3
 8009964:	4a69      	ldr	r2, [pc, #420]	; (8009b0c <UART_SetConfig+0xc30>)
 8009966:	fa22 f303 	lsr.w	r3, r2, r3
 800996a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800996c:	e00f      	b.n	800998e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800996e:	4b67      	ldr	r3, [pc, #412]	; (8009b0c <UART_SetConfig+0xc30>)
 8009970:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009972:	e00c      	b.n	800998e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009974:	4b66      	ldr	r3, [pc, #408]	; (8009b10 <UART_SetConfig+0xc34>)
 8009976:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009978:	e009      	b.n	800998e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800997a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800997e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009980:	e005      	b.n	800998e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8009982:	2300      	movs	r3, #0
 8009984:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800998c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800998e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009990:	2b00      	cmp	r3, #0
 8009992:	f000 80ea 	beq.w	8009b6a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	4a5a      	ldr	r2, [pc, #360]	; (8009b04 <UART_SetConfig+0xc28>)
 800999c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099a0:	461a      	mov	r2, r3
 80099a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80099a8:	005a      	lsls	r2, r3, #1
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	085b      	lsrs	r3, r3, #1
 80099b0:	441a      	add	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	2b0f      	cmp	r3, #15
 80099c0:	d916      	bls.n	80099f0 <UART_SetConfig+0xb14>
 80099c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c8:	d212      	bcs.n	80099f0 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f023 030f 	bic.w	r3, r3, #15
 80099d2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d6:	085b      	lsrs	r3, r3, #1
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f003 0307 	and.w	r3, r3, #7
 80099de:	b29a      	uxth	r2, r3
 80099e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80099e2:	4313      	orrs	r3, r2
 80099e4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80099ec:	60da      	str	r2, [r3, #12]
 80099ee:	e0bc      	b.n	8009b6a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80099f6:	e0b8      	b.n	8009b6a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80099fc:	2b20      	cmp	r3, #32
 80099fe:	dc4b      	bgt.n	8009a98 <UART_SetConfig+0xbbc>
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f2c0 8087 	blt.w	8009b14 <UART_SetConfig+0xc38>
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	f200 8084 	bhi.w	8009b14 <UART_SetConfig+0xc38>
 8009a0c:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <UART_SetConfig+0xb38>)
 8009a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a12:	bf00      	nop
 8009a14:	08009a9f 	.word	0x08009a9f
 8009a18:	08009aa7 	.word	0x08009aa7
 8009a1c:	08009b15 	.word	0x08009b15
 8009a20:	08009b15 	.word	0x08009b15
 8009a24:	08009aaf 	.word	0x08009aaf
 8009a28:	08009b15 	.word	0x08009b15
 8009a2c:	08009b15 	.word	0x08009b15
 8009a30:	08009b15 	.word	0x08009b15
 8009a34:	08009abf 	.word	0x08009abf
 8009a38:	08009b15 	.word	0x08009b15
 8009a3c:	08009b15 	.word	0x08009b15
 8009a40:	08009b15 	.word	0x08009b15
 8009a44:	08009b15 	.word	0x08009b15
 8009a48:	08009b15 	.word	0x08009b15
 8009a4c:	08009b15 	.word	0x08009b15
 8009a50:	08009b15 	.word	0x08009b15
 8009a54:	08009acf 	.word	0x08009acf
 8009a58:	08009b15 	.word	0x08009b15
 8009a5c:	08009b15 	.word	0x08009b15
 8009a60:	08009b15 	.word	0x08009b15
 8009a64:	08009b15 	.word	0x08009b15
 8009a68:	08009b15 	.word	0x08009b15
 8009a6c:	08009b15 	.word	0x08009b15
 8009a70:	08009b15 	.word	0x08009b15
 8009a74:	08009b15 	.word	0x08009b15
 8009a78:	08009b15 	.word	0x08009b15
 8009a7c:	08009b15 	.word	0x08009b15
 8009a80:	08009b15 	.word	0x08009b15
 8009a84:	08009b15 	.word	0x08009b15
 8009a88:	08009b15 	.word	0x08009b15
 8009a8c:	08009b15 	.word	0x08009b15
 8009a90:	08009b15 	.word	0x08009b15
 8009a94:	08009af5 	.word	0x08009af5
 8009a98:	2b40      	cmp	r3, #64	; 0x40
 8009a9a:	d02e      	beq.n	8009afa <UART_SetConfig+0xc1e>
 8009a9c:	e03a      	b.n	8009b14 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a9e:	f7fc fdc9 	bl	8006634 <HAL_RCC_GetPCLK1Freq>
 8009aa2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009aa4:	e03c      	b.n	8009b20 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009aa6:	f7fc fddb 	bl	8006660 <HAL_RCC_GetPCLK2Freq>
 8009aaa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009aac:	e038      	b.n	8009b20 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aae:	f107 0314 	add.w	r3, r7, #20
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fd fd3c 	bl	8007530 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009abc:	e030      	b.n	8009b20 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009abe:	f107 0308 	add.w	r3, r7, #8
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fd fe88 	bl	80077d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009acc:	e028      	b.n	8009b20 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ace:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <UART_SetConfig+0xc2c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0320 	and.w	r3, r3, #32
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d009      	beq.n	8009aee <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ada:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <UART_SetConfig+0xc2c>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	08db      	lsrs	r3, r3, #3
 8009ae0:	f003 0303 	and.w	r3, r3, #3
 8009ae4:	4a09      	ldr	r2, [pc, #36]	; (8009b0c <UART_SetConfig+0xc30>)
 8009ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009aec:	e018      	b.n	8009b20 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8009aee:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <UART_SetConfig+0xc30>)
 8009af0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009af2:	e015      	b.n	8009b20 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009af4:	4b06      	ldr	r3, [pc, #24]	; (8009b10 <UART_SetConfig+0xc34>)
 8009af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009af8:	e012      	b.n	8009b20 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b00:	e00e      	b.n	8009b20 <UART_SetConfig+0xc44>
 8009b02:	bf00      	nop
 8009b04:	0801d370 	.word	0x0801d370
 8009b08:	58024400 	.word	0x58024400
 8009b0c:	03d09000 	.word	0x03d09000
 8009b10:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009b1e:	bf00      	nop
    }

    if (pclk != 0U)
 8009b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d021      	beq.n	8009b6a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	4a1a      	ldr	r2, [pc, #104]	; (8009b94 <UART_SetConfig+0xcb8>)
 8009b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b30:	461a      	mov	r2, r3
 8009b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b34:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	085b      	lsrs	r3, r3, #1
 8009b3e:	441a      	add	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b48:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4c:	2b0f      	cmp	r3, #15
 8009b4e:	d909      	bls.n	8009b64 <UART_SetConfig+0xc88>
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b56:	d205      	bcs.n	8009b64 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60da      	str	r2, [r3, #12]
 8009b62:	e002      	b.n	8009b6a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009b86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3738      	adds	r7, #56	; 0x38
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bdb0      	pop	{r4, r5, r7, pc}
 8009b92:	bf00      	nop
 8009b94:	0801d370 	.word	0x0801d370

08009b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00a      	beq.n	8009bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00a      	beq.n	8009c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	430a      	orrs	r2, r1
 8009c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0a:	f003 0308 	and.w	r3, r3, #8
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2c:	f003 0310 	and.w	r3, r3, #16
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00a      	beq.n	8009c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4e:	f003 0320 	and.w	r3, r3, #32
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01a      	beq.n	8009cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c96:	d10a      	bne.n	8009cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	430a      	orrs	r2, r1
 8009cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00a      	beq.n	8009cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	605a      	str	r2, [r3, #4]
  }
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cec:	f7f8 fd90 	bl	8002810 <HAL_GetTick>
 8009cf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0308 	and.w	r3, r3, #8
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d10e      	bne.n	8009d1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f82f 	bl	8009d72 <UART_WaitOnFlagUntilTimeout>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	e025      	b.n	8009d6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d10e      	bne.n	8009d4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f819 	bl	8009d72 <UART_WaitOnFlagUntilTimeout>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e00f      	b.n	8009d6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2220      	movs	r2, #32
 8009d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b09c      	sub	sp, #112	; 0x70
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	60f8      	str	r0, [r7, #12]
 8009d7a:	60b9      	str	r1, [r7, #8]
 8009d7c:	603b      	str	r3, [r7, #0]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d82:	e0a9      	b.n	8009ed8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8a:	f000 80a5 	beq.w	8009ed8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d8e:	f7f8 fd3f 	bl	8002810 <HAL_GetTick>
 8009d92:	4602      	mov	r2, r0
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d302      	bcc.n	8009da4 <UART_WaitOnFlagUntilTimeout+0x32>
 8009d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d140      	bne.n	8009e26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009db4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009db8:	667b      	str	r3, [r7, #100]	; 0x64
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dc4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009dc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e6      	bne.n	8009da4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3308      	adds	r3, #8
 8009ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de0:	e853 3f00 	ldrex	r3, [r3]
 8009de4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de8:	f023 0301 	bic.w	r3, r3, #1
 8009dec:	663b      	str	r3, [r7, #96]	; 0x60
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3308      	adds	r3, #8
 8009df4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009df6:	64ba      	str	r2, [r7, #72]	; 0x48
 8009df8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dfe:	e841 2300 	strex	r3, r2, [r1]
 8009e02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e5      	bne.n	8009dd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2220      	movs	r2, #32
 8009e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e069      	b.n	8009efa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0304 	and.w	r3, r3, #4
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d051      	beq.n	8009ed8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e42:	d149      	bne.n	8009ed8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	e853 3f00 	ldrex	r3, [r3]
 8009e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e74:	e841 2300 	strex	r3, r2, [r1]
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e6      	bne.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3308      	adds	r3, #8
 8009e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	e853 3f00 	ldrex	r3, [r3]
 8009e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f023 0301 	bic.w	r3, r3, #1
 8009e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ea0:	623a      	str	r2, [r7, #32]
 8009ea2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea4:	69f9      	ldr	r1, [r7, #28]
 8009ea6:	6a3a      	ldr	r2, [r7, #32]
 8009ea8:	e841 2300 	strex	r3, r2, [r1]
 8009eac:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e5      	bne.n	8009e80 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2220      	movs	r2, #32
 8009ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	e010      	b.n	8009efa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	69da      	ldr	r2, [r3, #28]
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	bf0c      	ite	eq
 8009ee8:	2301      	moveq	r3, #1
 8009eea:	2300      	movne	r3, #0
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	461a      	mov	r2, r3
 8009ef0:	79fb      	ldrb	r3, [r7, #7]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	f43f af46 	beq.w	8009d84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3770      	adds	r7, #112	; 0x70
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b085      	sub	sp, #20
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d101      	bne.n	8009f18 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f14:	2302      	movs	r3, #2
 8009f16:	e027      	b.n	8009f68 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2224      	movs	r2, #36	; 0x24
 8009f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f022 0201 	bic.w	r2, r2, #1
 8009f3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009f46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2220      	movs	r2, #32
 8009f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d101      	bne.n	8009f8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f88:	2302      	movs	r3, #2
 8009f8a:	e02d      	b.n	8009fe8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2224      	movs	r2, #36	; 0x24
 8009f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f022 0201 	bic.w	r2, r2, #1
 8009fb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f84f 	bl	800a06c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a000:	2b01      	cmp	r3, #1
 800a002:	d101      	bne.n	800a008 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a004:	2302      	movs	r3, #2
 800a006:	e02d      	b.n	800a064 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2224      	movs	r2, #36	; 0x24
 800a014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f022 0201 	bic.w	r2, r2, #1
 800a02e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	430a      	orrs	r2, r1
 800a042:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f811 	bl	800a06c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2220      	movs	r2, #32
 800a056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d108      	bne.n	800a08e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a08c:	e031      	b.n	800a0f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a08e:	2310      	movs	r3, #16
 800a090:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a092:	2310      	movs	r3, #16
 800a094:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	0e5b      	lsrs	r3, r3, #25
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	f003 0307 	and.w	r3, r3, #7
 800a0a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	0f5b      	lsrs	r3, r3, #29
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	f003 0307 	and.w	r3, r3, #7
 800a0b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	7b3a      	ldrb	r2, [r7, #12]
 800a0ba:	4911      	ldr	r1, [pc, #68]	; (800a100 <UARTEx_SetNbDataToProcess+0x94>)
 800a0bc:	5c8a      	ldrb	r2, [r1, r2]
 800a0be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0c2:	7b3a      	ldrb	r2, [r7, #12]
 800a0c4:	490f      	ldr	r1, [pc, #60]	; (800a104 <UARTEx_SetNbDataToProcess+0x98>)
 800a0c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	7b7a      	ldrb	r2, [r7, #13]
 800a0d8:	4909      	ldr	r1, [pc, #36]	; (800a100 <UARTEx_SetNbDataToProcess+0x94>)
 800a0da:	5c8a      	ldrb	r2, [r1, r2]
 800a0dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0e0:	7b7a      	ldrb	r2, [r7, #13]
 800a0e2:	4908      	ldr	r1, [pc, #32]	; (800a104 <UARTEx_SetNbDataToProcess+0x98>)
 800a0e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a0f2:	bf00      	nop
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	0801d388 	.word	0x0801d388
 800a104:	0801d390 	.word	0x0801d390

0800a108 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a108:	b5b0      	push	{r4, r5, r7, lr}
 800a10a:	b08c      	sub	sp, #48	; 0x30
 800a10c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a10e:	4b96      	ldr	r3, [pc, #600]	; (800a368 <MX_LWIP_Init+0x260>)
 800a110:	22c0      	movs	r2, #192	; 0xc0
 800a112:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a114:	4b94      	ldr	r3, [pc, #592]	; (800a368 <MX_LWIP_Init+0x260>)
 800a116:	22a8      	movs	r2, #168	; 0xa8
 800a118:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800a11a:	4b93      	ldr	r3, [pc, #588]	; (800a368 <MX_LWIP_Init+0x260>)
 800a11c:	2201      	movs	r2, #1
 800a11e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 800a120:	4b91      	ldr	r3, [pc, #580]	; (800a368 <MX_LWIP_Init+0x260>)
 800a122:	22c8      	movs	r2, #200	; 0xc8
 800a124:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a126:	4b91      	ldr	r3, [pc, #580]	; (800a36c <MX_LWIP_Init+0x264>)
 800a128:	22ff      	movs	r2, #255	; 0xff
 800a12a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a12c:	4b8f      	ldr	r3, [pc, #572]	; (800a36c <MX_LWIP_Init+0x264>)
 800a12e:	22ff      	movs	r2, #255	; 0xff
 800a130:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a132:	4b8e      	ldr	r3, [pc, #568]	; (800a36c <MX_LWIP_Init+0x264>)
 800a134:	22ff      	movs	r2, #255	; 0xff
 800a136:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a138:	4b8c      	ldr	r3, [pc, #560]	; (800a36c <MX_LWIP_Init+0x264>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a13e:	4b8c      	ldr	r3, [pc, #560]	; (800a370 <MX_LWIP_Init+0x268>)
 800a140:	22c0      	movs	r2, #192	; 0xc0
 800a142:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a144:	4b8a      	ldr	r3, [pc, #552]	; (800a370 <MX_LWIP_Init+0x268>)
 800a146:	22a8      	movs	r2, #168	; 0xa8
 800a148:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800a14a:	4b89      	ldr	r3, [pc, #548]	; (800a370 <MX_LWIP_Init+0x268>)
 800a14c:	2201      	movs	r2, #1
 800a14e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a150:	4b87      	ldr	r3, [pc, #540]	; (800a370 <MX_LWIP_Init+0x268>)
 800a152:	2201      	movs	r2, #1
 800a154:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a156:	2100      	movs	r1, #0
 800a158:	2000      	movs	r0, #0
 800a15a:	f003 fe1f 	bl	800dd9c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a15e:	4b82      	ldr	r3, [pc, #520]	; (800a368 <MX_LWIP_Init+0x260>)
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	061a      	lsls	r2, r3, #24
 800a164:	4b80      	ldr	r3, [pc, #512]	; (800a368 <MX_LWIP_Init+0x260>)
 800a166:	785b      	ldrb	r3, [r3, #1]
 800a168:	041b      	lsls	r3, r3, #16
 800a16a:	431a      	orrs	r2, r3
 800a16c:	4b7e      	ldr	r3, [pc, #504]	; (800a368 <MX_LWIP_Init+0x260>)
 800a16e:	789b      	ldrb	r3, [r3, #2]
 800a170:	021b      	lsls	r3, r3, #8
 800a172:	4313      	orrs	r3, r2
 800a174:	4a7c      	ldr	r2, [pc, #496]	; (800a368 <MX_LWIP_Init+0x260>)
 800a176:	78d2      	ldrb	r2, [r2, #3]
 800a178:	4313      	orrs	r3, r2
 800a17a:	061a      	lsls	r2, r3, #24
 800a17c:	4b7a      	ldr	r3, [pc, #488]	; (800a368 <MX_LWIP_Init+0x260>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	0619      	lsls	r1, r3, #24
 800a182:	4b79      	ldr	r3, [pc, #484]	; (800a368 <MX_LWIP_Init+0x260>)
 800a184:	785b      	ldrb	r3, [r3, #1]
 800a186:	041b      	lsls	r3, r3, #16
 800a188:	4319      	orrs	r1, r3
 800a18a:	4b77      	ldr	r3, [pc, #476]	; (800a368 <MX_LWIP_Init+0x260>)
 800a18c:	789b      	ldrb	r3, [r3, #2]
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	430b      	orrs	r3, r1
 800a192:	4975      	ldr	r1, [pc, #468]	; (800a368 <MX_LWIP_Init+0x260>)
 800a194:	78c9      	ldrb	r1, [r1, #3]
 800a196:	430b      	orrs	r3, r1
 800a198:	021b      	lsls	r3, r3, #8
 800a19a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	4b71      	ldr	r3, [pc, #452]	; (800a368 <MX_LWIP_Init+0x260>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	0619      	lsls	r1, r3, #24
 800a1a6:	4b70      	ldr	r3, [pc, #448]	; (800a368 <MX_LWIP_Init+0x260>)
 800a1a8:	785b      	ldrb	r3, [r3, #1]
 800a1aa:	041b      	lsls	r3, r3, #16
 800a1ac:	4319      	orrs	r1, r3
 800a1ae:	4b6e      	ldr	r3, [pc, #440]	; (800a368 <MX_LWIP_Init+0x260>)
 800a1b0:	789b      	ldrb	r3, [r3, #2]
 800a1b2:	021b      	lsls	r3, r3, #8
 800a1b4:	430b      	orrs	r3, r1
 800a1b6:	496c      	ldr	r1, [pc, #432]	; (800a368 <MX_LWIP_Init+0x260>)
 800a1b8:	78c9      	ldrb	r1, [r1, #3]
 800a1ba:	430b      	orrs	r3, r1
 800a1bc:	0a1b      	lsrs	r3, r3, #8
 800a1be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	4b68      	ldr	r3, [pc, #416]	; (800a368 <MX_LWIP_Init+0x260>)
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	0619      	lsls	r1, r3, #24
 800a1ca:	4b67      	ldr	r3, [pc, #412]	; (800a368 <MX_LWIP_Init+0x260>)
 800a1cc:	785b      	ldrb	r3, [r3, #1]
 800a1ce:	041b      	lsls	r3, r3, #16
 800a1d0:	4319      	orrs	r1, r3
 800a1d2:	4b65      	ldr	r3, [pc, #404]	; (800a368 <MX_LWIP_Init+0x260>)
 800a1d4:	789b      	ldrb	r3, [r3, #2]
 800a1d6:	021b      	lsls	r3, r3, #8
 800a1d8:	430b      	orrs	r3, r1
 800a1da:	4963      	ldr	r1, [pc, #396]	; (800a368 <MX_LWIP_Init+0x260>)
 800a1dc:	78c9      	ldrb	r1, [r1, #3]
 800a1de:	430b      	orrs	r3, r1
 800a1e0:	0e1b      	lsrs	r3, r3, #24
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	4a63      	ldr	r2, [pc, #396]	; (800a374 <MX_LWIP_Init+0x26c>)
 800a1e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a1e8:	4b60      	ldr	r3, [pc, #384]	; (800a36c <MX_LWIP_Init+0x264>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	061a      	lsls	r2, r3, #24
 800a1ee:	4b5f      	ldr	r3, [pc, #380]	; (800a36c <MX_LWIP_Init+0x264>)
 800a1f0:	785b      	ldrb	r3, [r3, #1]
 800a1f2:	041b      	lsls	r3, r3, #16
 800a1f4:	431a      	orrs	r2, r3
 800a1f6:	4b5d      	ldr	r3, [pc, #372]	; (800a36c <MX_LWIP_Init+0x264>)
 800a1f8:	789b      	ldrb	r3, [r3, #2]
 800a1fa:	021b      	lsls	r3, r3, #8
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	4a5b      	ldr	r2, [pc, #364]	; (800a36c <MX_LWIP_Init+0x264>)
 800a200:	78d2      	ldrb	r2, [r2, #3]
 800a202:	4313      	orrs	r3, r2
 800a204:	061a      	lsls	r2, r3, #24
 800a206:	4b59      	ldr	r3, [pc, #356]	; (800a36c <MX_LWIP_Init+0x264>)
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	0619      	lsls	r1, r3, #24
 800a20c:	4b57      	ldr	r3, [pc, #348]	; (800a36c <MX_LWIP_Init+0x264>)
 800a20e:	785b      	ldrb	r3, [r3, #1]
 800a210:	041b      	lsls	r3, r3, #16
 800a212:	4319      	orrs	r1, r3
 800a214:	4b55      	ldr	r3, [pc, #340]	; (800a36c <MX_LWIP_Init+0x264>)
 800a216:	789b      	ldrb	r3, [r3, #2]
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	430b      	orrs	r3, r1
 800a21c:	4953      	ldr	r1, [pc, #332]	; (800a36c <MX_LWIP_Init+0x264>)
 800a21e:	78c9      	ldrb	r1, [r1, #3]
 800a220:	430b      	orrs	r3, r1
 800a222:	021b      	lsls	r3, r3, #8
 800a224:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a228:	431a      	orrs	r2, r3
 800a22a:	4b50      	ldr	r3, [pc, #320]	; (800a36c <MX_LWIP_Init+0x264>)
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	0619      	lsls	r1, r3, #24
 800a230:	4b4e      	ldr	r3, [pc, #312]	; (800a36c <MX_LWIP_Init+0x264>)
 800a232:	785b      	ldrb	r3, [r3, #1]
 800a234:	041b      	lsls	r3, r3, #16
 800a236:	4319      	orrs	r1, r3
 800a238:	4b4c      	ldr	r3, [pc, #304]	; (800a36c <MX_LWIP_Init+0x264>)
 800a23a:	789b      	ldrb	r3, [r3, #2]
 800a23c:	021b      	lsls	r3, r3, #8
 800a23e:	430b      	orrs	r3, r1
 800a240:	494a      	ldr	r1, [pc, #296]	; (800a36c <MX_LWIP_Init+0x264>)
 800a242:	78c9      	ldrb	r1, [r1, #3]
 800a244:	430b      	orrs	r3, r1
 800a246:	0a1b      	lsrs	r3, r3, #8
 800a248:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a24c:	431a      	orrs	r2, r3
 800a24e:	4b47      	ldr	r3, [pc, #284]	; (800a36c <MX_LWIP_Init+0x264>)
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	0619      	lsls	r1, r3, #24
 800a254:	4b45      	ldr	r3, [pc, #276]	; (800a36c <MX_LWIP_Init+0x264>)
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	041b      	lsls	r3, r3, #16
 800a25a:	4319      	orrs	r1, r3
 800a25c:	4b43      	ldr	r3, [pc, #268]	; (800a36c <MX_LWIP_Init+0x264>)
 800a25e:	789b      	ldrb	r3, [r3, #2]
 800a260:	021b      	lsls	r3, r3, #8
 800a262:	430b      	orrs	r3, r1
 800a264:	4941      	ldr	r1, [pc, #260]	; (800a36c <MX_LWIP_Init+0x264>)
 800a266:	78c9      	ldrb	r1, [r1, #3]
 800a268:	430b      	orrs	r3, r1
 800a26a:	0e1b      	lsrs	r3, r3, #24
 800a26c:	4313      	orrs	r3, r2
 800a26e:	4a42      	ldr	r2, [pc, #264]	; (800a378 <MX_LWIP_Init+0x270>)
 800a270:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a272:	4b3f      	ldr	r3, [pc, #252]	; (800a370 <MX_LWIP_Init+0x268>)
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	061a      	lsls	r2, r3, #24
 800a278:	4b3d      	ldr	r3, [pc, #244]	; (800a370 <MX_LWIP_Init+0x268>)
 800a27a:	785b      	ldrb	r3, [r3, #1]
 800a27c:	041b      	lsls	r3, r3, #16
 800a27e:	431a      	orrs	r2, r3
 800a280:	4b3b      	ldr	r3, [pc, #236]	; (800a370 <MX_LWIP_Init+0x268>)
 800a282:	789b      	ldrb	r3, [r3, #2]
 800a284:	021b      	lsls	r3, r3, #8
 800a286:	4313      	orrs	r3, r2
 800a288:	4a39      	ldr	r2, [pc, #228]	; (800a370 <MX_LWIP_Init+0x268>)
 800a28a:	78d2      	ldrb	r2, [r2, #3]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	061a      	lsls	r2, r3, #24
 800a290:	4b37      	ldr	r3, [pc, #220]	; (800a370 <MX_LWIP_Init+0x268>)
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	0619      	lsls	r1, r3, #24
 800a296:	4b36      	ldr	r3, [pc, #216]	; (800a370 <MX_LWIP_Init+0x268>)
 800a298:	785b      	ldrb	r3, [r3, #1]
 800a29a:	041b      	lsls	r3, r3, #16
 800a29c:	4319      	orrs	r1, r3
 800a29e:	4b34      	ldr	r3, [pc, #208]	; (800a370 <MX_LWIP_Init+0x268>)
 800a2a0:	789b      	ldrb	r3, [r3, #2]
 800a2a2:	021b      	lsls	r3, r3, #8
 800a2a4:	430b      	orrs	r3, r1
 800a2a6:	4932      	ldr	r1, [pc, #200]	; (800a370 <MX_LWIP_Init+0x268>)
 800a2a8:	78c9      	ldrb	r1, [r1, #3]
 800a2aa:	430b      	orrs	r3, r1
 800a2ac:	021b      	lsls	r3, r3, #8
 800a2ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2b2:	431a      	orrs	r2, r3
 800a2b4:	4b2e      	ldr	r3, [pc, #184]	; (800a370 <MX_LWIP_Init+0x268>)
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	0619      	lsls	r1, r3, #24
 800a2ba:	4b2d      	ldr	r3, [pc, #180]	; (800a370 <MX_LWIP_Init+0x268>)
 800a2bc:	785b      	ldrb	r3, [r3, #1]
 800a2be:	041b      	lsls	r3, r3, #16
 800a2c0:	4319      	orrs	r1, r3
 800a2c2:	4b2b      	ldr	r3, [pc, #172]	; (800a370 <MX_LWIP_Init+0x268>)
 800a2c4:	789b      	ldrb	r3, [r3, #2]
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	430b      	orrs	r3, r1
 800a2ca:	4929      	ldr	r1, [pc, #164]	; (800a370 <MX_LWIP_Init+0x268>)
 800a2cc:	78c9      	ldrb	r1, [r1, #3]
 800a2ce:	430b      	orrs	r3, r1
 800a2d0:	0a1b      	lsrs	r3, r3, #8
 800a2d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a2d6:	431a      	orrs	r2, r3
 800a2d8:	4b25      	ldr	r3, [pc, #148]	; (800a370 <MX_LWIP_Init+0x268>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	0619      	lsls	r1, r3, #24
 800a2de:	4b24      	ldr	r3, [pc, #144]	; (800a370 <MX_LWIP_Init+0x268>)
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	041b      	lsls	r3, r3, #16
 800a2e4:	4319      	orrs	r1, r3
 800a2e6:	4b22      	ldr	r3, [pc, #136]	; (800a370 <MX_LWIP_Init+0x268>)
 800a2e8:	789b      	ldrb	r3, [r3, #2]
 800a2ea:	021b      	lsls	r3, r3, #8
 800a2ec:	430b      	orrs	r3, r1
 800a2ee:	4920      	ldr	r1, [pc, #128]	; (800a370 <MX_LWIP_Init+0x268>)
 800a2f0:	78c9      	ldrb	r1, [r1, #3]
 800a2f2:	430b      	orrs	r3, r1
 800a2f4:	0e1b      	lsrs	r3, r3, #24
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	4a20      	ldr	r2, [pc, #128]	; (800a37c <MX_LWIP_Init+0x274>)
 800a2fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a2fc:	4b20      	ldr	r3, [pc, #128]	; (800a380 <MX_LWIP_Init+0x278>)
 800a2fe:	9302      	str	r3, [sp, #8]
 800a300:	4b20      	ldr	r3, [pc, #128]	; (800a384 <MX_LWIP_Init+0x27c>)
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	2300      	movs	r3, #0
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4b1c      	ldr	r3, [pc, #112]	; (800a37c <MX_LWIP_Init+0x274>)
 800a30a:	4a1b      	ldr	r2, [pc, #108]	; (800a378 <MX_LWIP_Init+0x270>)
 800a30c:	4919      	ldr	r1, [pc, #100]	; (800a374 <MX_LWIP_Init+0x26c>)
 800a30e:	481e      	ldr	r0, [pc, #120]	; (800a388 <MX_LWIP_Init+0x280>)
 800a310:	f004 fbc6 	bl	800eaa0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a314:	481c      	ldr	r0, [pc, #112]	; (800a388 <MX_LWIP_Init+0x280>)
 800a316:	f004 fd75 	bl	800ee04 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a31a:	4b1b      	ldr	r3, [pc, #108]	; (800a388 <MX_LWIP_Init+0x280>)
 800a31c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a320:	089b      	lsrs	r3, r3, #2
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d003      	beq.n	800a334 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a32c:	4816      	ldr	r0, [pc, #88]	; (800a388 <MX_LWIP_Init+0x280>)
 800a32e:	f004 fd79 	bl	800ee24 <netif_set_up>
 800a332:	e002      	b.n	800a33a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a334:	4814      	ldr	r0, [pc, #80]	; (800a388 <MX_LWIP_Init+0x280>)
 800a336:	f004 fde1 	bl	800eefc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a33a:	4914      	ldr	r1, [pc, #80]	; (800a38c <MX_LWIP_Init+0x284>)
 800a33c:	4812      	ldr	r0, [pc, #72]	; (800a388 <MX_LWIP_Init+0x280>)
 800a33e:	f004 fe73 	bl	800f028 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800a342:	4b13      	ldr	r3, [pc, #76]	; (800a390 <MX_LWIP_Init+0x288>)
 800a344:	1d3c      	adds	r4, r7, #4
 800a346:	461d      	mov	r5, r3
 800a348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a34a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a34c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800a354:	1d3b      	adds	r3, r7, #4
 800a356:	490c      	ldr	r1, [pc, #48]	; (800a388 <MX_LWIP_Init+0x280>)
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 fcd8 	bl	800ad0e <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a35e:	bf00      	nop
 800a360:	3720      	adds	r7, #32
 800a362:	46bd      	mov	sp, r7
 800a364:	bdb0      	pop	{r4, r5, r7, pc}
 800a366:	bf00      	nop
 800a368:	240045e4 	.word	0x240045e4
 800a36c:	240045e0 	.word	0x240045e0
 800a370:	240045a4 	.word	0x240045a4
 800a374:	240045dc 	.word	0x240045dc
 800a378:	240045e8 	.word	0x240045e8
 800a37c:	240045ec 	.word	0x240045ec
 800a380:	0800dcd9 	.word	0x0800dcd9
 800a384:	0800aa59 	.word	0x0800aa59
 800a388:	240045a8 	.word	0x240045a8
 800a38c:	0800a395 	.word	0x0800a395
 800a390:	0801a04c 	.word	0x0801a04c

0800a394 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08e      	sub	sp, #56	; 0x38
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	605a      	str	r2, [r3, #4]
 800a3ba:	609a      	str	r2, [r3, #8]
 800a3bc:	60da      	str	r2, [r3, #12]
 800a3be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a5d      	ldr	r2, [pc, #372]	; (800a53c <HAL_ETH_MspInit+0x194>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	f040 80b3 	bne.w	800a532 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a3cc:	4b5c      	ldr	r3, [pc, #368]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a3ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a3d2:	4a5b      	ldr	r2, [pc, #364]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a3d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a3dc:	4b58      	ldr	r3, [pc, #352]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a3de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a3e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3e6:	623b      	str	r3, [r7, #32]
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a3ea:	4b55      	ldr	r3, [pc, #340]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a3ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a3f0:	4a53      	ldr	r2, [pc, #332]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a3f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a3fa:	4b51      	ldr	r3, [pc, #324]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a3fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a404:	61fb      	str	r3, [r7, #28]
 800a406:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a408:	4b4d      	ldr	r3, [pc, #308]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a40a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a40e:	4a4c      	ldr	r2, [pc, #304]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a414:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a418:	4b49      	ldr	r3, [pc, #292]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a41a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a41e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a422:	61bb      	str	r3, [r7, #24]
 800a424:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a426:	4b46      	ldr	r3, [pc, #280]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a42c:	4a44      	ldr	r2, [pc, #272]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a42e:	f043 0304 	orr.w	r3, r3, #4
 800a432:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a436:	4b42      	ldr	r3, [pc, #264]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	617b      	str	r3, [r7, #20]
 800a442:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a444:	4b3e      	ldr	r3, [pc, #248]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a44a:	4a3d      	ldr	r2, [pc, #244]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a44c:	f043 0301 	orr.w	r3, r3, #1
 800a450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a454:	4b3a      	ldr	r3, [pc, #232]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	613b      	str	r3, [r7, #16]
 800a460:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a462:	4b37      	ldr	r3, [pc, #220]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a468:	4a35      	ldr	r2, [pc, #212]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a46a:	f043 0302 	orr.w	r3, r3, #2
 800a46e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a472:	4b33      	ldr	r3, [pc, #204]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a478:	f003 0302 	and.w	r3, r3, #2
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a480:	4b2f      	ldr	r3, [pc, #188]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a486:	4a2e      	ldr	r2, [pc, #184]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a48c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a490:	4b2b      	ldr	r3, [pc, #172]	; (800a540 <HAL_ETH_MspInit+0x198>)
 800a492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49a:	60bb      	str	r3, [r7, #8]
 800a49c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a49e:	2332      	movs	r3, #50	; 0x32
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a4ae:	230b      	movs	r3, #11
 800a4b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	4822      	ldr	r0, [pc, #136]	; (800a544 <HAL_ETH_MspInit+0x19c>)
 800a4ba:	f7fa ff7f 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a4be:	2386      	movs	r3, #134	; 0x86
 800a4c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a4ce:	230b      	movs	r3, #11
 800a4d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	481b      	ldr	r0, [pc, #108]	; (800a548 <HAL_ETH_MspInit+0x1a0>)
 800a4da:	f7fa ff6f 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a4de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a4f0:	230b      	movs	r3, #11
 800a4f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a4f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	4814      	ldr	r0, [pc, #80]	; (800a54c <HAL_ETH_MspInit+0x1a4>)
 800a4fc:	f7fa ff5e 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a500:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a506:	2302      	movs	r3, #2
 800a508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a50a:	2300      	movs	r3, #0
 800a50c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a50e:	2300      	movs	r3, #0
 800a510:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a512:	230b      	movs	r3, #11
 800a514:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a51a:	4619      	mov	r1, r3
 800a51c:	480c      	ldr	r0, [pc, #48]	; (800a550 <HAL_ETH_MspInit+0x1a8>)
 800a51e:	f7fa ff4d 	bl	80053bc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a522:	2200      	movs	r2, #0
 800a524:	2105      	movs	r1, #5
 800a526:	203d      	movs	r0, #61	; 0x3d
 800a528:	f7f8 fa6e 	bl	8002a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a52c:	203d      	movs	r0, #61	; 0x3d
 800a52e:	f7f8 fa85 	bl	8002a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a532:	bf00      	nop
 800a534:	3738      	adds	r7, #56	; 0x38
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	40028000 	.word	0x40028000
 800a540:	58024400 	.word	0x58024400
 800a544:	58020800 	.word	0x58020800
 800a548:	58020000 	.word	0x58020000
 800a54c:	58020400 	.word	0x58020400
 800a550:	58021800 	.word	0x58021800

0800a554 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a55c:	4b04      	ldr	r3, [pc, #16]	; (800a570 <HAL_ETH_RxCpltCallback+0x1c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4618      	mov	r0, r3
 800a562:	f000 fd51 	bl	800b008 <osSemaphoreRelease>
}
 800a566:	bf00      	nop
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	24000374 	.word	0x24000374

0800a574 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a574:	b5b0      	push	{r4, r5, r7, lr}
 800a576:	b0ac      	sub	sp, #176	; 0xb0
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800a588:	2300      	movs	r3, #0
 800a58a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a58e:	4b91      	ldr	r3, [pc, #580]	; (800a7d4 <low_level_init+0x260>)
 800a590:	4a91      	ldr	r2, [pc, #580]	; (800a7d8 <low_level_init+0x264>)
 800a592:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a594:	2300      	movs	r3, #0
 800a596:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800a59a:	2380      	movs	r3, #128	; 0x80
 800a59c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800a5a0:	23e1      	movs	r3, #225	; 0xe1
 800a5a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a5b8:	4a86      	ldr	r2, [pc, #536]	; (800a7d4 <low_level_init+0x260>)
 800a5ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5be:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a5c0:	4b84      	ldr	r3, [pc, #528]	; (800a7d4 <low_level_init+0x260>)
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a5c6:	4b83      	ldr	r3, [pc, #524]	; (800a7d4 <low_level_init+0x260>)
 800a5c8:	4a84      	ldr	r2, [pc, #528]	; (800a7dc <low_level_init+0x268>)
 800a5ca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a5cc:	4b81      	ldr	r3, [pc, #516]	; (800a7d4 <low_level_init+0x260>)
 800a5ce:	4a84      	ldr	r2, [pc, #528]	; (800a7e0 <low_level_init+0x26c>)
 800a5d0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800a5d2:	4b80      	ldr	r3, [pc, #512]	; (800a7d4 <low_level_init+0x260>)
 800a5d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a5d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a5da:	487e      	ldr	r0, [pc, #504]	; (800a7d4 <low_level_init+0x260>)
 800a5dc:	f7f8 fab8 	bl	8002b50 <HAL_ETH_Init>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a5e6:	2234      	movs	r2, #52	; 0x34
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	487e      	ldr	r0, [pc, #504]	; (800a7e4 <low_level_init+0x270>)
 800a5ec:	f00e fcbf 	bl	8018f6e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a5f0:	4b7c      	ldr	r3, [pc, #496]	; (800a7e4 <low_level_init+0x270>)
 800a5f2:	2221      	movs	r2, #33	; 0x21
 800a5f4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a5f6:	4b7b      	ldr	r3, [pc, #492]	; (800a7e4 <low_level_init+0x270>)
 800a5f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a5fc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a5fe:	4b79      	ldr	r3, [pc, #484]	; (800a7e4 <low_level_init+0x270>)
 800a600:	2200      	movs	r2, #0
 800a602:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a604:	4878      	ldr	r0, [pc, #480]	; (800a7e8 <low_level_init+0x274>)
 800a606:	f004 f905 	bl	800e814 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2206      	movs	r2, #6
 800a60e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a612:	4b70      	ldr	r3, [pc, #448]	; (800a7d4 <low_level_init+0x260>)
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	781a      	ldrb	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a61e:	4b6d      	ldr	r3, [pc, #436]	; (800a7d4 <low_level_init+0x260>)
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	785a      	ldrb	r2, [r3, #1]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a62a:	4b6a      	ldr	r3, [pc, #424]	; (800a7d4 <low_level_init+0x260>)
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	789a      	ldrb	r2, [r3, #2]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a636:	4b67      	ldr	r3, [pc, #412]	; (800a7d4 <low_level_init+0x260>)
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	78da      	ldrb	r2, [r3, #3]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a642:	4b64      	ldr	r3, [pc, #400]	; (800a7d4 <low_level_init+0x260>)
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	791a      	ldrb	r2, [r3, #4]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a64e:	4b61      	ldr	r3, [pc, #388]	; (800a7d4 <low_level_init+0x260>)
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	795a      	ldrb	r2, [r3, #5]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a660:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a668:	f043 030a 	orr.w	r3, r3, #10
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a674:	2300      	movs	r3, #0
 800a676:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a67a:	e012      	b.n	800a6a2 <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800a67c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a680:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a684:	fb02 f303 	mul.w	r3, r2, r3
 800a688:	4a58      	ldr	r2, [pc, #352]	; (800a7ec <low_level_init+0x278>)
 800a68a:	441a      	add	r2, r3
 800a68c:	2300      	movs	r3, #0
 800a68e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a692:	4850      	ldr	r0, [pc, #320]	; (800a7d4 <low_level_init+0x260>)
 800a694:	f7f8 fb36 	bl	8002d04 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a69c:	3301      	adds	r3, #1
 800a69e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a6a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d9e8      	bls.n	800a67c <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a6b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 fc25 	bl	800af08 <osSemaphoreCreate>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	4a4b      	ldr	r2, [pc, #300]	; (800a7f0 <low_level_init+0x27c>)
 800a6c2:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a6c4:	4b4b      	ldr	r3, [pc, #300]	; (800a7f4 <low_level_init+0x280>)
 800a6c6:	f107 040c 	add.w	r4, r7, #12
 800a6ca:	461d      	mov	r5, r3
 800a6cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a6d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a6d8:	f107 030c 	add.w	r3, r7, #12
 800a6dc:	6879      	ldr	r1, [r7, #4]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 fb15 	bl	800ad0e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a6e4:	4944      	ldr	r1, [pc, #272]	; (800a7f8 <low_level_init+0x284>)
 800a6e6:	4845      	ldr	r0, [pc, #276]	; (800a7fc <low_level_init+0x288>)
 800a6e8:	f7f7 fee1 	bl	80024ae <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a6ec:	4843      	ldr	r0, [pc, #268]	; (800a7fc <low_level_init+0x288>)
 800a6ee:	f7f7 ff10 	bl	8002512 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a6f2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d165      	bne.n	800a7c6 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a6fa:	4840      	ldr	r0, [pc, #256]	; (800a7fc <low_level_init+0x288>)
 800a6fc:	f7f7 ffb1 	bl	8002662 <LAN8742_GetLinkState>
 800a700:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a708:	2b01      	cmp	r3, #1
 800a70a:	dc06      	bgt.n	800a71a <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f004 fc5b 	bl	800efc8 <netif_set_link_down>
      netif_set_down(netif);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f004 fbf2 	bl	800eefc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a718:	e057      	b.n	800a7ca <low_level_init+0x256>
 800a71a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a71e:	3b02      	subs	r3, #2
 800a720:	2b03      	cmp	r3, #3
 800a722:	d82b      	bhi.n	800a77c <low_level_init+0x208>
 800a724:	a201      	add	r2, pc, #4	; (adr r2, 800a72c <low_level_init+0x1b8>)
 800a726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72a:	bf00      	nop
 800a72c:	0800a73d 	.word	0x0800a73d
 800a730:	0800a74f 	.word	0x0800a74f
 800a734:	0800a75f 	.word	0x0800a75f
 800a738:	0800a76f 	.word	0x0800a76f
        duplex = ETH_FULLDUPLEX_MODE;
 800a73c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a744:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a748:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a74c:	e01f      	b.n	800a78e <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a74e:	2300      	movs	r3, #0
 800a750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a754:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a758:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a75c:	e017      	b.n	800a78e <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a75e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a766:	2300      	movs	r3, #0
 800a768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a76c:	e00f      	b.n	800a78e <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a76e:	2300      	movs	r3, #0
 800a770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a774:	2300      	movs	r3, #0
 800a776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a77a:	e008      	b.n	800a78e <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a77c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a784:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a788:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a78c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a78e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a792:	4619      	mov	r1, r3
 800a794:	480f      	ldr	r0, [pc, #60]	; (800a7d4 <low_level_init+0x260>)
 800a796:	f7f9 f887 	bl	80038a8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a79a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a79e:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800a7a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a7a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a7a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4809      	ldr	r0, [pc, #36]	; (800a7d4 <low_level_init+0x260>)
 800a7ae:	f7f9 fa4f 	bl	8003c50 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a7b2:	4808      	ldr	r0, [pc, #32]	; (800a7d4 <low_level_init+0x260>)
 800a7b4:	f7f8 fae7 	bl	8002d86 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f004 fb33 	bl	800ee24 <netif_set_up>
    netif_set_link_up(netif);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f004 fbce 	bl	800ef60 <netif_set_link_up>
}
 800a7c4:	e001      	b.n	800a7ca <low_level_init+0x256>
    Error_Handler();
 800a7c6:	f7f6 ffe3 	bl	8001790 <Error_Handler>
}
 800a7ca:	bf00      	nop
 800a7cc:	37b0      	adds	r7, #176	; 0xb0
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	240046dc 	.word	0x240046dc
 800a7d8:	40028000 	.word	0x40028000
 800a7dc:	30000080 	.word	0x30000080
 800a7e0:	30000000 	.word	0x30000000
 800a7e4:	24004764 	.word	0x24004764
 800a7e8:	0801d398 	.word	0x0801d398
 800a7ec:	30000100 	.word	0x30000100
 800a7f0:	24000374 	.word	0x24000374
 800a7f4:	0801a070 	.word	0x0801a070
 800a7f8:	24000018 	.word	0x24000018
 800a7fc:	240046bc 	.word	0x240046bc

0800a800 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b092      	sub	sp, #72	; 0x48
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a814:	f107 030c 	add.w	r3, r7, #12
 800a818:	2230      	movs	r2, #48	; 0x30
 800a81a:	2100      	movs	r1, #0
 800a81c:	4618      	mov	r0, r3
 800a81e:	f00e fba6 	bl	8018f6e <memset>

  for(q = p; q != NULL; q = q->next)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	643b      	str	r3, [r7, #64]	; 0x40
 800a826:	e049      	b.n	800a8bc <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	d902      	bls.n	800a834 <low_level_output+0x34>
      return ERR_IF;
 800a82e:	f06f 030b 	mvn.w	r3, #11
 800a832:	e056      	b.n	800a8e2 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800a834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a836:	6859      	ldr	r1, [r3, #4]
 800a838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a83a:	4613      	mov	r3, r2
 800a83c:	005b      	lsls	r3, r3, #1
 800a83e:	4413      	add	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a846:	4413      	add	r3, r2
 800a848:	3b3c      	subs	r3, #60	; 0x3c
 800a84a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a84e:	895b      	ldrh	r3, [r3, #10]
 800a850:	4619      	mov	r1, r3
 800a852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a854:	4613      	mov	r3, r2
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	4413      	add	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a860:	4413      	add	r3, r2
 800a862:	3b38      	subs	r3, #56	; 0x38
 800a864:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d012      	beq.n	800a892 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a86c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a86e:	1e5a      	subs	r2, r3, #1
 800a870:	f107 000c 	add.w	r0, r7, #12
 800a874:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a876:	460b      	mov	r3, r1
 800a878:	005b      	lsls	r3, r3, #1
 800a87a:	440b      	add	r3, r1
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	18c1      	adds	r1, r0, r3
 800a880:	4613      	mov	r3, r2
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a88c:	4413      	add	r3, r2
 800a88e:	3b34      	subs	r3, #52	; 0x34
 800a890:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10a      	bne.n	800a8b0 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800a89a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a89c:	4613      	mov	r3, r2
 800a89e:	005b      	lsls	r3, r3, #1
 800a8a0:	4413      	add	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a8a8:	4413      	add	r3, r2
 800a8aa:	3b34      	subs	r3, #52	; 0x34
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a8b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a8b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	643b      	str	r3, [r7, #64]	; 0x40
 800a8bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1b2      	bne.n	800a828 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	891b      	ldrh	r3, [r3, #8]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	4b08      	ldr	r3, [pc, #32]	; (800a8ec <low_level_output+0xec>)
 800a8ca:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a8cc:	4a07      	ldr	r2, [pc, #28]	; (800a8ec <low_level_output+0xec>)
 800a8ce:	f107 030c 	add.w	r3, r7, #12
 800a8d2:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a8d4:	2214      	movs	r2, #20
 800a8d6:	4905      	ldr	r1, [pc, #20]	; (800a8ec <low_level_output+0xec>)
 800a8d8:	4805      	ldr	r0, [pc, #20]	; (800a8f0 <low_level_output+0xf0>)
 800a8da:	f7f8 fb53 	bl	8002f84 <HAL_ETH_Transmit>

  return errval;
 800a8de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3748      	adds	r7, #72	; 0x48
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	24004764 	.word	0x24004764
 800a8f0:	240046dc 	.word	0x240046dc

0800a8f4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b098      	sub	sp, #96	; 0x60
 800a8f8:	af02      	add	r7, sp, #8
 800a8fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	60bb      	str	r3, [r7, #8]
 800a904:	2300      	movs	r3, #0
 800a906:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a908:	f107 030c 	add.w	r3, r7, #12
 800a90c:	2230      	movs	r2, #48	; 0x30
 800a90e:	2100      	movs	r1, #0
 800a910:	4618      	mov	r0, r3
 800a912:	f00e fb2c 	bl	8018f6e <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a916:	2300      	movs	r3, #0
 800a918:	653b      	str	r3, [r7, #80]	; 0x50
 800a91a:	e015      	b.n	800a948 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800a91c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a91e:	1c5a      	adds	r2, r3, #1
 800a920:	f107 010c 	add.w	r1, r7, #12
 800a924:	4613      	mov	r3, r2
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	4413      	add	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4419      	add	r1, r3
 800a92e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a930:	4613      	mov	r3, r2
 800a932:	005b      	lsls	r3, r3, #1
 800a934:	4413      	add	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a93c:	4413      	add	r3, r2
 800a93e:	3b44      	subs	r3, #68	; 0x44
 800a940:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a944:	3301      	adds	r3, #1
 800a946:	653b      	str	r3, [r7, #80]	; 0x50
 800a948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d9e6      	bls.n	800a91c <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800a94e:	f107 030c 	add.w	r3, r7, #12
 800a952:	4619      	mov	r1, r3
 800a954:	4828      	ldr	r0, [pc, #160]	; (800a9f8 <low_level_input+0x104>)
 800a956:	f7f8 fc8e 	bl	8003276 <HAL_ETH_GetRxDataBuffer>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d145      	bne.n	800a9ec <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800a960:	f107 0308 	add.w	r3, r7, #8
 800a964:	4619      	mov	r1, r3
 800a966:	4824      	ldr	r0, [pc, #144]	; (800a9f8 <low_level_input+0x104>)
 800a968:	f7f8 fd23 	bl	80033b2 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800a96c:	4822      	ldr	r0, [pc, #136]	; (800a9f8 <low_level_input+0x104>)
 800a96e:	f7f8 fd53 	bl	8003418 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	64bb      	str	r3, [r7, #72]	; 0x48
 800a978:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800a97a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dd1d      	ble.n	800a9bc <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800a980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a982:	f003 021f 	and.w	r2, r3, #31
 800a986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a988:	4413      	add	r3, r2
 800a98a:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800a98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a98e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800a990:	f3bf 8f4f 	dsb	sy
}
 800a994:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800a996:	4a19      	ldr	r2, [pc, #100]	; (800a9fc <low_level_input+0x108>)
 800a998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a99a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800a99e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a0:	3320      	adds	r3, #32
 800a9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800a9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9a6:	3b20      	subs	r3, #32
 800a9a8:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800a9aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dcf2      	bgt.n	800a996 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800a9b0:	f3bf 8f4f 	dsb	sy
}
 800a9b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a9b6:	f3bf 8f6f 	isb	sy
}
 800a9ba:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800a9bc:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a9be:	4810      	ldr	r0, [pc, #64]	; (800aa00 <low_level_input+0x10c>)
 800a9c0:	f003 ffa4 	bl	800e90c <memp_malloc_pool>
 800a9c4:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800a9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00f      	beq.n	800a9ec <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800a9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ce:	4a0d      	ldr	r2, [pc, #52]	; (800aa04 <low_level_input+0x110>)
 800a9d0:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	b299      	uxth	r1, r3
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	b292      	uxth	r2, r2
 800a9dc:	9201      	str	r2, [sp, #4]
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9e2:	2241      	movs	r2, #65	; 0x41
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	f004 fd13 	bl	800f410 <pbuf_alloced_custom>
 800a9ea:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800a9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3758      	adds	r7, #88	; 0x58
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	240046dc 	.word	0x240046dc
 800a9fc:	e000ed00 	.word	0xe000ed00
 800aa00:	0801d398 	.word	0x0801d398
 800aa04:	0800aab5 	.word	0x0800aab5

0800aa08 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800aa14:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <ethernetif_input+0x4c>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f04f 31ff 	mov.w	r1, #4294967295
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 faa5 	bl	800af6c <osSemaphoreWait>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1f5      	bne.n	800aa14 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f7ff ff63 	bl	800a8f4 <low_level_input>
 800aa2e:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00a      	beq.n	800aa4c <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	68f9      	ldr	r1, [r7, #12]
 800aa3c:	68b8      	ldr	r0, [r7, #8]
 800aa3e:	4798      	blx	r3
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d002      	beq.n	800aa4c <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800aa46:	68b8      	ldr	r0, [r7, #8]
 800aa48:	f004 fe9c 	bl	800f784 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1ea      	bne.n	800aa28 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800aa52:	e7df      	b.n	800aa14 <ethernetif_input+0xc>
 800aa54:	24000374 	.word	0x24000374

0800aa58 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d106      	bne.n	800aa74 <ethernetif_init+0x1c>
 800aa66:	4b0e      	ldr	r3, [pc, #56]	; (800aaa0 <ethernetif_init+0x48>)
 800aa68:	f240 2249 	movw	r2, #585	; 0x249
 800aa6c:	490d      	ldr	r1, [pc, #52]	; (800aaa4 <ethernetif_init+0x4c>)
 800aa6e:	480e      	ldr	r0, [pc, #56]	; (800aaa8 <ethernetif_init+0x50>)
 800aa70:	f00e fae0 	bl	8019034 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2273      	movs	r2, #115	; 0x73
 800aa78:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2274      	movs	r2, #116	; 0x74
 800aa80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a09      	ldr	r2, [pc, #36]	; (800aaac <ethernetif_init+0x54>)
 800aa88:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a08      	ldr	r2, [pc, #32]	; (800aab0 <ethernetif_init+0x58>)
 800aa8e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7ff fd6f 	bl	800a574 <low_level_init>

  return ERR_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	0801a08c 	.word	0x0801a08c
 800aaa4:	0801a0a8 	.word	0x0801a0a8
 800aaa8:	0801a0b8 	.word	0x0801a0b8
 800aaac:	08016c79 	.word	0x08016c79
 800aab0:	0800a801 	.word	0x0800a801

0800aab4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800aac0:	68f9      	ldr	r1, [r7, #12]
 800aac2:	4803      	ldr	r0, [pc, #12]	; (800aad0 <pbuf_free_custom+0x1c>)
 800aac4:	f003 ff96 	bl	800e9f4 <memp_free_pool>
}
 800aac8:	bf00      	nop
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	0801d398 	.word	0x0801d398

0800aad4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800aad8:	f7f7 fe9a 	bl	8002810 <HAL_GetTick>
 800aadc:	4603      	mov	r3, r0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	bd80      	pop	{r7, pc}
	...

0800aae4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800aae8:	4802      	ldr	r0, [pc, #8]	; (800aaf4 <ETH_PHY_IO_Init+0x10>)
 800aaea:	f7f9 f8cb 	bl	8003c84 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	240046dc 	.word	0x240046dc

0800aaf8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	af00      	add	r7, sp, #0
  return 0;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	68f9      	ldr	r1, [r7, #12]
 800ab1a:	4807      	ldr	r0, [pc, #28]	; (800ab38 <ETH_PHY_IO_ReadReg+0x30>)
 800ab1c:	f7f8 fe1c 	bl	8003758 <HAL_ETH_ReadPHYRegister>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ab26:	f04f 33ff 	mov.w	r3, #4294967295
 800ab2a:	e000      	b.n	800ab2e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	240046dc 	.word	0x240046dc

0800ab3c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	68f9      	ldr	r1, [r7, #12]
 800ab4e:	4807      	ldr	r0, [pc, #28]	; (800ab6c <ETH_PHY_IO_WriteReg+0x30>)
 800ab50:	f7f8 fe56 	bl	8003800 <HAL_ETH_WritePHYRegister>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d002      	beq.n	800ab60 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ab5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5e:	e000      	b.n	800ab62 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	240046dc 	.word	0x240046dc

0800ab70 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ab74:	f7f7 fe4c 	bl	8002810 <HAL_GetTick>
 800ab78:	4603      	mov	r3, r0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b0a0      	sub	sp, #128	; 0x80
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab90:	2300      	movs	r3, #0
 800ab92:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ab98:	483a      	ldr	r0, [pc, #232]	; (800ac84 <ethernet_link_thread+0x104>)
 800ab9a:	f7f7 fd62 	bl	8002662 <LAN8742_GetLinkState>
 800ab9e:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800aba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aba2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aba6:	089b      	lsrs	r3, r3, #2
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00c      	beq.n	800abcc <ethernet_link_thread+0x4c>
 800abb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	dc09      	bgt.n	800abcc <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 800abb8:	4833      	ldr	r0, [pc, #204]	; (800ac88 <ethernet_link_thread+0x108>)
 800abba:	f7f8 f969 	bl	8002e90 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800abbe:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800abc0:	f004 f99c 	bl	800eefc <netif_set_down>
    netif_set_link_down(netif);
 800abc4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800abc6:	f004 f9ff 	bl	800efc8 <netif_set_link_down>
 800abca:	e056      	b.n	800ac7a <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800abcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800abce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800abd2:	f003 0304 	and.w	r3, r3, #4
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d14f      	bne.n	800ac7a <ethernet_link_thread+0xfa>
 800abda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abdc:	2b01      	cmp	r3, #1
 800abde:	dd4c      	ble.n	800ac7a <ethernet_link_thread+0xfa>
 800abe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abe2:	3b02      	subs	r3, #2
 800abe4:	2b03      	cmp	r3, #3
 800abe6:	d82b      	bhi.n	800ac40 <ethernet_link_thread+0xc0>
 800abe8:	a201      	add	r2, pc, #4	; (adr r2, 800abf0 <ethernet_link_thread+0x70>)
 800abea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abee:	bf00      	nop
 800abf0:	0800ac01 	.word	0x0800ac01
 800abf4:	0800ac13 	.word	0x0800ac13
 800abf8:	0800ac23 	.word	0x0800ac23
 800abfc:	0800ac33 	.word	0x0800ac33
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ac00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac04:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ac06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac0a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ac10:	e017      	b.n	800ac42 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ac12:	2300      	movs	r3, #0
 800ac14:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ac16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac1a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ac20:	e00f      	b.n	800ac42 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ac22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac26:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ac30:	e007      	b.n	800ac42 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ac32:	2300      	movs	r3, #0
 800ac34:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ac36:	2300      	movs	r3, #0
 800ac38:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ac3e:	e000      	b.n	800ac42 <ethernet_link_thread+0xc2>
    default:
      break;
 800ac40:	bf00      	nop
    }

    if(linkchanged)
 800ac42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d018      	beq.n	800ac7a <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ac48:	f107 0308 	add.w	r3, r7, #8
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	480e      	ldr	r0, [pc, #56]	; (800ac88 <ethernet_link_thread+0x108>)
 800ac50:	f7f8 fe2a 	bl	80038a8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ac54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac56:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800ac58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac5a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ac5c:	f107 0308 	add.w	r3, r7, #8
 800ac60:	4619      	mov	r1, r3
 800ac62:	4809      	ldr	r0, [pc, #36]	; (800ac88 <ethernet_link_thread+0x108>)
 800ac64:	f7f8 fff4 	bl	8003c50 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800ac68:	4807      	ldr	r0, [pc, #28]	; (800ac88 <ethernet_link_thread+0x108>)
 800ac6a:	f7f8 f88c 	bl	8002d86 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800ac6e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ac70:	f004 f8d8 	bl	800ee24 <netif_set_up>
      netif_set_link_up(netif);
 800ac74:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ac76:	f004 f973 	bl	800ef60 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800ac7a:	2064      	movs	r0, #100	; 0x64
 800ac7c:	f000 f893 	bl	800ada6 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ac80:	e78a      	b.n	800ab98 <ethernet_link_thread+0x18>
 800ac82:	bf00      	nop
 800ac84:	240046bc 	.word	0x240046bc
 800ac88:	240046dc 	.word	0x240046dc

0800ac8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	4603      	mov	r3, r0
 800ac94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ac96:	2300      	movs	r3, #0
 800ac98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ac9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac9e:	2b84      	cmp	r3, #132	; 0x84
 800aca0:	d005      	beq.n	800acae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800aca2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	4413      	add	r3, r2
 800acaa:	3303      	adds	r3, #3
 800acac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800acae:	68fb      	ldr	r3, [r7, #12]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acc2:	f3ef 8305 	mrs	r3, IPSR
 800acc6:	607b      	str	r3, [r7, #4]
  return(result);
 800acc8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800acca:	2b00      	cmp	r3, #0
 800accc:	bf14      	ite	ne
 800acce:	2301      	movne	r3, #1
 800acd0:	2300      	moveq	r3, #0
 800acd2:	b2db      	uxtb	r3, r3
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ace4:	f001 fc74 	bl	800c5d0 <vTaskStartScheduler>
  
  return osOK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	bd80      	pop	{r7, pc}

0800acee <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800acf2:	f7ff ffe3 	bl	800acbc <inHandlerMode>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d003      	beq.n	800ad04 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800acfc:	f001 fd8c 	bl	800c818 <xTaskGetTickCountFromISR>
 800ad00:	4603      	mov	r3, r0
 800ad02:	e002      	b.n	800ad0a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ad04:	f001 fd78 	bl	800c7f8 <xTaskGetTickCount>
 800ad08:	4603      	mov	r3, r0
  }
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ad0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad10:	b089      	sub	sp, #36	; 0x24
 800ad12:	af04      	add	r7, sp, #16
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d020      	beq.n	800ad62 <osThreadCreate+0x54>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d01c      	beq.n	800ad62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685c      	ldr	r4, [r3, #4]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681d      	ldr	r5, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	691e      	ldr	r6, [r3, #16]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7ff ffa6 	bl	800ac8c <makeFreeRtosPriority>
 800ad40:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad4a:	9202      	str	r2, [sp, #8]
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	9100      	str	r1, [sp, #0]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	4632      	mov	r2, r6
 800ad54:	4629      	mov	r1, r5
 800ad56:	4620      	mov	r0, r4
 800ad58:	f001 fa5c 	bl	800c214 <xTaskCreateStatic>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	60fb      	str	r3, [r7, #12]
 800ad60:	e01c      	b.n	800ad9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	685c      	ldr	r4, [r3, #4]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad6e:	b29e      	uxth	r6, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7ff ff88 	bl	800ac8c <makeFreeRtosPriority>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	f107 030c 	add.w	r3, r7, #12
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	9200      	str	r2, [sp, #0]
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	4632      	mov	r2, r6
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f001 fa9e 	bl	800c2ce <xTaskCreate>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d001      	beq.n	800ad9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e000      	b.n	800ad9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ada6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d001      	beq.n	800adbc <osDelay+0x16>
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	e000      	b.n	800adbe <osDelay+0x18>
 800adbc:	2301      	movs	r3, #1
 800adbe:	4618      	mov	r0, r3
 800adc0:	f001 fbd2 	bl	800c568 <vTaskDelay>
  
  return osOK;
 800adc4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b082      	sub	sp, #8
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d007      	beq.n	800adee <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	4619      	mov	r1, r3
 800ade4:	2001      	movs	r0, #1
 800ade6:	f000 fc40 	bl	800b66a <xQueueCreateMutexStatic>
 800adea:	4603      	mov	r3, r0
 800adec:	e003      	b.n	800adf6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800adee:	2001      	movs	r0, #1
 800adf0:	f000 fc23 	bl	800b63a <xQueueCreateMutex>
 800adf4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <osMutexWait+0x18>
    return osErrorParameter;
 800ae14:	2380      	movs	r3, #128	; 0x80
 800ae16:	e03a      	b.n	800ae8e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae22:	d103      	bne.n	800ae2c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ae24:	f04f 33ff 	mov.w	r3, #4294967295
 800ae28:	60fb      	str	r3, [r7, #12]
 800ae2a:	e009      	b.n	800ae40 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d006      	beq.n	800ae40 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d101      	bne.n	800ae40 <osMutexWait+0x40>
      ticks = 1;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ae40:	f7ff ff3c 	bl	800acbc <inHandlerMode>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d017      	beq.n	800ae7a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ae4a:	f107 0308 	add.w	r3, r7, #8
 800ae4e:	461a      	mov	r2, r3
 800ae50:	2100      	movs	r1, #0
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f001 f836 	bl	800bec4 <xQueueReceiveFromISR>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d001      	beq.n	800ae62 <osMutexWait+0x62>
      return osErrorOS;
 800ae5e:	23ff      	movs	r3, #255	; 0xff
 800ae60:	e015      	b.n	800ae8e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d011      	beq.n	800ae8c <osMutexWait+0x8c>
 800ae68:	4b0b      	ldr	r3, [pc, #44]	; (800ae98 <osMutexWait+0x98>)
 800ae6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6e:	601a      	str	r2, [r3, #0]
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	e008      	b.n	800ae8c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ae7a:	68f9      	ldr	r1, [r7, #12]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 ff15 	bl	800bcac <xQueueSemaphoreTake>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d001      	beq.n	800ae8c <osMutexWait+0x8c>
    return osErrorOS;
 800ae88:	23ff      	movs	r3, #255	; 0xff
 800ae8a:	e000      	b.n	800ae8e <osMutexWait+0x8e>
  }
  
  return osOK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	e000ed04 	.word	0xe000ed04

0800ae9c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800aeac:	f7ff ff06 	bl	800acbc <inHandlerMode>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d016      	beq.n	800aee4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800aeb6:	f107 0308 	add.w	r3, r7, #8
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fd88 	bl	800b9d2 <xQueueGiveFromISR>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d001      	beq.n	800aecc <osMutexRelease+0x30>
      return osErrorOS;
 800aec8:	23ff      	movs	r3, #255	; 0xff
 800aeca:	e017      	b.n	800aefc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d013      	beq.n	800aefa <osMutexRelease+0x5e>
 800aed2:	4b0c      	ldr	r3, [pc, #48]	; (800af04 <osMutexRelease+0x68>)
 800aed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	e00a      	b.n	800aefa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800aee4:	2300      	movs	r3, #0
 800aee6:	2200      	movs	r2, #0
 800aee8:	2100      	movs	r1, #0
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fbd8 	bl	800b6a0 <xQueueGenericSend>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d001      	beq.n	800aefa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800aef6:	23ff      	movs	r3, #255	; 0xff
 800aef8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800aefa:	68fb      	ldr	r3, [r7, #12]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	e000ed04 	.word	0xe000ed04

0800af08 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af02      	add	r7, sp, #8
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00f      	beq.n	800af3a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d10a      	bne.n	800af36 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	2203      	movs	r2, #3
 800af26:	9200      	str	r2, [sp, #0]
 800af28:	2200      	movs	r2, #0
 800af2a:	2100      	movs	r1, #0
 800af2c:	2001      	movs	r0, #1
 800af2e:	f000 fa99 	bl	800b464 <xQueueGenericCreateStatic>
 800af32:	4603      	mov	r3, r0
 800af34:	e016      	b.n	800af64 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800af36:	2300      	movs	r3, #0
 800af38:	e014      	b.n	800af64 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d110      	bne.n	800af62 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800af40:	2203      	movs	r2, #3
 800af42:	2100      	movs	r1, #0
 800af44:	2001      	movs	r0, #1
 800af46:	f000 fb05 	bl	800b554 <xQueueGenericCreate>
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d005      	beq.n	800af5e <osSemaphoreCreate+0x56>
 800af52:	2300      	movs	r3, #0
 800af54:	2200      	movs	r2, #0
 800af56:	2100      	movs	r1, #0
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f000 fba1 	bl	800b6a0 <xQueueGenericSend>
      return sema;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	e000      	b.n	800af64 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800af62:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800af76:	2300      	movs	r3, #0
 800af78:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800af80:	2380      	movs	r3, #128	; 0x80
 800af82:	e03a      	b.n	800affa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8e:	d103      	bne.n	800af98 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800af90:	f04f 33ff 	mov.w	r3, #4294967295
 800af94:	60fb      	str	r3, [r7, #12]
 800af96:	e009      	b.n	800afac <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d006      	beq.n	800afac <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d101      	bne.n	800afac <osSemaphoreWait+0x40>
      ticks = 1;
 800afa8:	2301      	movs	r3, #1
 800afaa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800afac:	f7ff fe86 	bl	800acbc <inHandlerMode>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d017      	beq.n	800afe6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800afb6:	f107 0308 	add.w	r3, r7, #8
 800afba:	461a      	mov	r2, r3
 800afbc:	2100      	movs	r1, #0
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 ff80 	bl	800bec4 <xQueueReceiveFromISR>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d001      	beq.n	800afce <osSemaphoreWait+0x62>
      return osErrorOS;
 800afca:	23ff      	movs	r3, #255	; 0xff
 800afcc:	e015      	b.n	800affa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d011      	beq.n	800aff8 <osSemaphoreWait+0x8c>
 800afd4:	4b0b      	ldr	r3, [pc, #44]	; (800b004 <osSemaphoreWait+0x98>)
 800afd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afda:	601a      	str	r2, [r3, #0]
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	f3bf 8f6f 	isb	sy
 800afe4:	e008      	b.n	800aff8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800afe6:	68f9      	ldr	r1, [r7, #12]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fe5f 	bl	800bcac <xQueueSemaphoreTake>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d001      	beq.n	800aff8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800aff4:	23ff      	movs	r3, #255	; 0xff
 800aff6:	e000      	b.n	800affa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	e000ed04 	.word	0xe000ed04

0800b008 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b010:	2300      	movs	r3, #0
 800b012:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b014:	2300      	movs	r3, #0
 800b016:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b018:	f7ff fe50 	bl	800acbc <inHandlerMode>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d016      	beq.n	800b050 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b022:	f107 0308 	add.w	r3, r7, #8
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fcd2 	bl	800b9d2 <xQueueGiveFromISR>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b01      	cmp	r3, #1
 800b032:	d001      	beq.n	800b038 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b034:	23ff      	movs	r3, #255	; 0xff
 800b036:	e017      	b.n	800b068 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d013      	beq.n	800b066 <osSemaphoreRelease+0x5e>
 800b03e:	4b0c      	ldr	r3, [pc, #48]	; (800b070 <osSemaphoreRelease+0x68>)
 800b040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b044:	601a      	str	r2, [r3, #0]
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	e00a      	b.n	800b066 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b050:	2300      	movs	r3, #0
 800b052:	2200      	movs	r2, #0
 800b054:	2100      	movs	r1, #0
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fb22 	bl	800b6a0 <xQueueGenericSend>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d001      	beq.n	800b066 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b062:	23ff      	movs	r3, #255	; 0xff
 800b064:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b066:	68fb      	ldr	r3, [r7, #12]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	e000ed04 	.word	0xe000ed04

0800b074 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b074:	b590      	push	{r4, r7, lr}
 800b076:	b085      	sub	sp, #20
 800b078:	af02      	add	r7, sp, #8
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d011      	beq.n	800b0aa <osMessageCreate+0x36>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00d      	beq.n	800b0aa <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6818      	ldr	r0, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6859      	ldr	r1, [r3, #4]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	689a      	ldr	r2, [r3, #8]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	2400      	movs	r4, #0
 800b0a0:	9400      	str	r4, [sp, #0]
 800b0a2:	f000 f9df 	bl	800b464 <xQueueGenericCreateStatic>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	e008      	b.n	800b0bc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	f000 fa4d 	bl	800b554 <xQueueGenericCreate>
 800b0ba:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd90      	pop	{r4, r7, pc}

0800b0c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <osMessagePut+0x1e>
    ticks = 1;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b0e2:	f7ff fdeb 	bl	800acbc <inHandlerMode>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d018      	beq.n	800b11e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b0ec:	f107 0210 	add.w	r2, r7, #16
 800b0f0:	f107 0108 	add.w	r1, r7, #8
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f000 fbd0 	bl	800b89c <xQueueGenericSendFromISR>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d001      	beq.n	800b106 <osMessagePut+0x42>
      return osErrorOS;
 800b102:	23ff      	movs	r3, #255	; 0xff
 800b104:	e018      	b.n	800b138 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d014      	beq.n	800b136 <osMessagePut+0x72>
 800b10c:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <osMessagePut+0x7c>)
 800b10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	f3bf 8f6f 	isb	sy
 800b11c:	e00b      	b.n	800b136 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b11e:	f107 0108 	add.w	r1, r7, #8
 800b122:	2300      	movs	r3, #0
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f000 faba 	bl	800b6a0 <xQueueGenericSend>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d001      	beq.n	800b136 <osMessagePut+0x72>
      return osErrorOS;
 800b132:	23ff      	movs	r3, #255	; 0xff
 800b134:	e000      	b.n	800b138 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	e000ed04 	.word	0xe000ed04

0800b144 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b144:	b590      	push	{r4, r7, lr}
 800b146:	b08b      	sub	sp, #44	; 0x2c
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b154:	2300      	movs	r3, #0
 800b156:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10a      	bne.n	800b174 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b15e:	2380      	movs	r3, #128	; 0x80
 800b160:	617b      	str	r3, [r7, #20]
    return event;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	461c      	mov	r4, r3
 800b166:	f107 0314 	add.w	r3, r7, #20
 800b16a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b16e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b172:	e054      	b.n	800b21e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b174:	2300      	movs	r3, #0
 800b176:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b178:	2300      	movs	r3, #0
 800b17a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b182:	d103      	bne.n	800b18c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b184:	f04f 33ff 	mov.w	r3, #4294967295
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
 800b18a:	e009      	b.n	800b1a0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d006      	beq.n	800b1a0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <osMessageGet+0x5c>
      ticks = 1;
 800b19c:	2301      	movs	r3, #1
 800b19e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b1a0:	f7ff fd8c 	bl	800acbc <inHandlerMode>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d01c      	beq.n	800b1e4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b1aa:	f107 0220 	add.w	r2, r7, #32
 800b1ae:	f107 0314 	add.w	r3, r7, #20
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	68b8      	ldr	r0, [r7, #8]
 800b1b8:	f000 fe84 	bl	800bec4 <xQueueReceiveFromISR>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d102      	bne.n	800b1c8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b1c2:	2310      	movs	r3, #16
 800b1c4:	617b      	str	r3, [r7, #20]
 800b1c6:	e001      	b.n	800b1cc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d01d      	beq.n	800b20e <osMessageGet+0xca>
 800b1d2:	4b15      	ldr	r3, [pc, #84]	; (800b228 <osMessageGet+0xe4>)
 800b1d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	e014      	b.n	800b20e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b1e4:	f107 0314 	add.w	r3, r7, #20
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	68b8      	ldr	r0, [r7, #8]
 800b1f0:	f000 fc7c 	bl	800baec <xQueueReceive>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d102      	bne.n	800b200 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b1fa:	2310      	movs	r3, #16
 800b1fc:	617b      	str	r3, [r7, #20]
 800b1fe:	e006      	b.n	800b20e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	2b00      	cmp	r3, #0
 800b204:	d101      	bne.n	800b20a <osMessageGet+0xc6>
 800b206:	2300      	movs	r3, #0
 800b208:	e000      	b.n	800b20c <osMessageGet+0xc8>
 800b20a:	2340      	movs	r3, #64	; 0x40
 800b20c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	461c      	mov	r4, r3
 800b212:	f107 0314 	add.w	r3, r7, #20
 800b216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b21a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	372c      	adds	r7, #44	; 0x2c
 800b222:	46bd      	mov	sp, r7
 800b224:	bd90      	pop	{r4, r7, pc}
 800b226:	bf00      	nop
 800b228:	e000ed04 	.word	0xe000ed04

0800b22c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f103 0208 	add.w	r2, r3, #8
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f04f 32ff 	mov.w	r2, #4294967295
 800b244:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f103 0208 	add.w	r2, r3, #8
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f103 0208 	add.w	r2, r3, #8
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b27a:	bf00      	nop
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b286:	b480      	push	{r7}
 800b288:	b085      	sub	sp, #20
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	689a      	ldr	r2, [r3, #8]
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	601a      	str	r2, [r3, #0]
}
 800b2c2:	bf00      	nop
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b085      	sub	sp, #20
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e4:	d103      	bne.n	800b2ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	e00c      	b.n	800b308 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	e002      	b.n	800b2fc <vListInsert+0x2e>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68ba      	ldr	r2, [r7, #8]
 800b304:	429a      	cmp	r2, r3
 800b306:	d2f6      	bcs.n	800b2f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	601a      	str	r2, [r3, #0]
}
 800b334:	bf00      	nop
 800b336:	3714      	adds	r7, #20
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	6892      	ldr	r2, [r2, #8]
 800b356:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	6852      	ldr	r2, [r2, #4]
 800b360:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d103      	bne.n	800b374 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	689a      	ldr	r2, [r3, #8]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	1e5a      	subs	r2, r3, #1
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10a      	bne.n	800b3be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b3ba:	bf00      	nop
 800b3bc:	e7fe      	b.n	800b3bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b3be:	f002 f889 	bl	800d4d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ca:	68f9      	ldr	r1, [r7, #12]
 800b3cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3ce:	fb01 f303 	mul.w	r3, r1, r3
 800b3d2:	441a      	add	r2, r3
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	68f9      	ldr	r1, [r7, #12]
 800b3f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3f4:	fb01 f303 	mul.w	r3, r1, r3
 800b3f8:	441a      	add	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	22ff      	movs	r2, #255	; 0xff
 800b402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	22ff      	movs	r2, #255	; 0xff
 800b40a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d114      	bne.n	800b43e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d01a      	beq.n	800b452 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3310      	adds	r3, #16
 800b420:	4618      	mov	r0, r3
 800b422:	f001 fb49 	bl	800cab8 <xTaskRemoveFromEventList>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d012      	beq.n	800b452 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b42c:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <xQueueGenericReset+0xcc>)
 800b42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	e009      	b.n	800b452 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3310      	adds	r3, #16
 800b442:	4618      	mov	r0, r3
 800b444:	f7ff fef2 	bl	800b22c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3324      	adds	r3, #36	; 0x24
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7ff feed 	bl	800b22c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b452:	f002 f86f 	bl	800d534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b456:	2301      	movs	r3, #1
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	e000ed04 	.word	0xe000ed04

0800b464 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b464:	b580      	push	{r7, lr}
 800b466:	b08e      	sub	sp, #56	; 0x38
 800b468:	af02      	add	r7, sp, #8
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
 800b470:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10a      	bne.n	800b48e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b48a:	bf00      	nop
 800b48c:	e7fe      	b.n	800b48c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10a      	bne.n	800b4aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4a6:	bf00      	nop
 800b4a8:	e7fe      	b.n	800b4a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <xQueueGenericCreateStatic+0x52>
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d001      	beq.n	800b4ba <xQueueGenericCreateStatic+0x56>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e000      	b.n	800b4bc <xQueueGenericCreateStatic+0x58>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10a      	bne.n	800b4d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	623b      	str	r3, [r7, #32]
}
 800b4d2:	bf00      	nop
 800b4d4:	e7fe      	b.n	800b4d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d102      	bne.n	800b4e2 <xQueueGenericCreateStatic+0x7e>
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <xQueueGenericCreateStatic+0x82>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e000      	b.n	800b4e8 <xQueueGenericCreateStatic+0x84>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10a      	bne.n	800b502 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f0:	f383 8811 	msr	BASEPRI, r3
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	61fb      	str	r3, [r7, #28]
}
 800b4fe:	bf00      	nop
 800b500:	e7fe      	b.n	800b500 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b502:	2348      	movs	r3, #72	; 0x48
 800b504:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2b48      	cmp	r3, #72	; 0x48
 800b50a:	d00a      	beq.n	800b522 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	61bb      	str	r3, [r7, #24]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b522:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00d      	beq.n	800b54a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b530:	2201      	movs	r2, #1
 800b532:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b536:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	4613      	mov	r3, r2
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	68b9      	ldr	r1, [r7, #8]
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 f83f 	bl	800b5c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3730      	adds	r7, #48	; 0x30
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b554:	b580      	push	{r7, lr}
 800b556:	b08a      	sub	sp, #40	; 0x28
 800b558:	af02      	add	r7, sp, #8
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	4613      	mov	r3, r2
 800b560:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10a      	bne.n	800b57e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56c:	f383 8811 	msr	BASEPRI, r3
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	613b      	str	r3, [r7, #16]
}
 800b57a:	bf00      	nop
 800b57c:	e7fe      	b.n	800b57c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	fb02 f303 	mul.w	r3, r2, r3
 800b586:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	3348      	adds	r3, #72	; 0x48
 800b58c:	4618      	mov	r0, r3
 800b58e:	f002 f8c3 	bl	800d718 <pvPortMalloc>
 800b592:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d011      	beq.n	800b5be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	3348      	adds	r3, #72	; 0x48
 800b5a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5ac:	79fa      	ldrb	r2, [r7, #7]
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	9300      	str	r3, [sp, #0]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	697a      	ldr	r2, [r7, #20]
 800b5b6:	68b9      	ldr	r1, [r7, #8]
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 f805 	bl	800b5c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5be:	69bb      	ldr	r3, [r7, #24]
	}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3720      	adds	r7, #32
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
 800b5d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d103      	bne.n	800b5e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	69ba      	ldr	r2, [r7, #24]
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	e002      	b.n	800b5ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	69b8      	ldr	r0, [r7, #24]
 800b5fa:	f7ff fecb 	bl	800b394 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b5fe:	bf00      	nop
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b606:	b580      	push	{r7, lr}
 800b608:	b082      	sub	sp, #8
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00e      	beq.n	800b632 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b626:	2300      	movs	r3, #0
 800b628:	2200      	movs	r2, #0
 800b62a:	2100      	movs	r1, #0
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f837 	bl	800b6a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b632:	bf00      	nop
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b086      	sub	sp, #24
 800b63e:	af00      	add	r7, sp, #0
 800b640:	4603      	mov	r3, r0
 800b642:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b644:	2301      	movs	r3, #1
 800b646:	617b      	str	r3, [r7, #20]
 800b648:	2300      	movs	r3, #0
 800b64a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b64c:	79fb      	ldrb	r3, [r7, #7]
 800b64e:	461a      	mov	r2, r3
 800b650:	6939      	ldr	r1, [r7, #16]
 800b652:	6978      	ldr	r0, [r7, #20]
 800b654:	f7ff ff7e 	bl	800b554 <xQueueGenericCreate>
 800b658:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff ffd3 	bl	800b606 <prvInitialiseMutex>

		return xNewQueue;
 800b660:	68fb      	ldr	r3, [r7, #12]
	}
 800b662:	4618      	mov	r0, r3
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b088      	sub	sp, #32
 800b66e:	af02      	add	r7, sp, #8
 800b670:	4603      	mov	r3, r0
 800b672:	6039      	str	r1, [r7, #0]
 800b674:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b676:	2301      	movs	r3, #1
 800b678:	617b      	str	r3, [r7, #20]
 800b67a:	2300      	movs	r3, #0
 800b67c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b67e:	79fb      	ldrb	r3, [r7, #7]
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	2200      	movs	r2, #0
 800b686:	6939      	ldr	r1, [r7, #16]
 800b688:	6978      	ldr	r0, [r7, #20]
 800b68a:	f7ff feeb 	bl	800b464 <xQueueGenericCreateStatic>
 800b68e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7ff ffb8 	bl	800b606 <prvInitialiseMutex>

		return xNewQueue;
 800b696:	68fb      	ldr	r3, [r7, #12]
	}
 800b698:	4618      	mov	r0, r3
 800b69a:	3718      	adds	r7, #24
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08e      	sub	sp, #56	; 0x38
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10a      	bne.n	800b6d2 <xQueueGenericSend+0x32>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d103      	bne.n	800b6e0 <xQueueGenericSend+0x40>
 800b6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <xQueueGenericSend+0x44>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e000      	b.n	800b6e6 <xQueueGenericSend+0x46>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10a      	bne.n	800b700 <xQueueGenericSend+0x60>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6fc:	bf00      	nop
 800b6fe:	e7fe      	b.n	800b6fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2b02      	cmp	r3, #2
 800b704:	d103      	bne.n	800b70e <xQueueGenericSend+0x6e>
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d101      	bne.n	800b712 <xQueueGenericSend+0x72>
 800b70e:	2301      	movs	r3, #1
 800b710:	e000      	b.n	800b714 <xQueueGenericSend+0x74>
 800b712:	2300      	movs	r3, #0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10a      	bne.n	800b72e <xQueueGenericSend+0x8e>
	__asm volatile
 800b718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71c:	f383 8811 	msr	BASEPRI, r3
 800b720:	f3bf 8f6f 	isb	sy
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	623b      	str	r3, [r7, #32]
}
 800b72a:	bf00      	nop
 800b72c:	e7fe      	b.n	800b72c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b72e:	f001 fb83 	bl	800ce38 <xTaskGetSchedulerState>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d102      	bne.n	800b73e <xQueueGenericSend+0x9e>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d101      	bne.n	800b742 <xQueueGenericSend+0xa2>
 800b73e:	2301      	movs	r3, #1
 800b740:	e000      	b.n	800b744 <xQueueGenericSend+0xa4>
 800b742:	2300      	movs	r3, #0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d10a      	bne.n	800b75e <xQueueGenericSend+0xbe>
	__asm volatile
 800b748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74c:	f383 8811 	msr	BASEPRI, r3
 800b750:	f3bf 8f6f 	isb	sy
 800b754:	f3bf 8f4f 	dsb	sy
 800b758:	61fb      	str	r3, [r7, #28]
}
 800b75a:	bf00      	nop
 800b75c:	e7fe      	b.n	800b75c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b75e:	f001 feb9 	bl	800d4d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d302      	bcc.n	800b774 <xQueueGenericSend+0xd4>
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2b02      	cmp	r3, #2
 800b772:	d129      	bne.n	800b7c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b774:	683a      	ldr	r2, [r7, #0]
 800b776:	68b9      	ldr	r1, [r7, #8]
 800b778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b77a:	f000 fc3b 	bl	800bff4 <prvCopyDataToQueue>
 800b77e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b784:	2b00      	cmp	r3, #0
 800b786:	d010      	beq.n	800b7aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78a:	3324      	adds	r3, #36	; 0x24
 800b78c:	4618      	mov	r0, r3
 800b78e:	f001 f993 	bl	800cab8 <xTaskRemoveFromEventList>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d013      	beq.n	800b7c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b798:	4b3f      	ldr	r3, [pc, #252]	; (800b898 <xQueueGenericSend+0x1f8>)
 800b79a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	e00a      	b.n	800b7c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d007      	beq.n	800b7c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b7b0:	4b39      	ldr	r3, [pc, #228]	; (800b898 <xQueueGenericSend+0x1f8>)
 800b7b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b6:	601a      	str	r2, [r3, #0]
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b7c0:	f001 feb8 	bl	800d534 <vPortExitCritical>
				return pdPASS;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e063      	b.n	800b890 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d103      	bne.n	800b7d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7ce:	f001 feb1 	bl	800d534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	e05c      	b.n	800b890 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d106      	bne.n	800b7ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7dc:	f107 0314 	add.w	r3, r7, #20
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f001 f9cb 	bl	800cb7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7ea:	f001 fea3 	bl	800d534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7ee:	f000 ff59 	bl	800c6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7f2:	f001 fe6f 	bl	800d4d4 <vPortEnterCritical>
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7fc:	b25b      	sxtb	r3, r3
 800b7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b802:	d103      	bne.n	800b80c <xQueueGenericSend+0x16c>
 800b804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b806:	2200      	movs	r2, #0
 800b808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b812:	b25b      	sxtb	r3, r3
 800b814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b818:	d103      	bne.n	800b822 <xQueueGenericSend+0x182>
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b822:	f001 fe87 	bl	800d534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b826:	1d3a      	adds	r2, r7, #4
 800b828:	f107 0314 	add.w	r3, r7, #20
 800b82c:	4611      	mov	r1, r2
 800b82e:	4618      	mov	r0, r3
 800b830:	f001 f9ba 	bl	800cba8 <xTaskCheckForTimeOut>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d124      	bne.n	800b884 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b83a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b83c:	f000 fcd2 	bl	800c1e4 <prvIsQueueFull>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d018      	beq.n	800b878 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b848:	3310      	adds	r3, #16
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	4611      	mov	r1, r2
 800b84e:	4618      	mov	r0, r3
 800b850:	f001 f90e 	bl	800ca70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b856:	f000 fc5d 	bl	800c114 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b85a:	f000 ff31 	bl	800c6c0 <xTaskResumeAll>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	f47f af7c 	bne.w	800b75e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b866:	4b0c      	ldr	r3, [pc, #48]	; (800b898 <xQueueGenericSend+0x1f8>)
 800b868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	e772      	b.n	800b75e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b87a:	f000 fc4b 	bl	800c114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b87e:	f000 ff1f 	bl	800c6c0 <xTaskResumeAll>
 800b882:	e76c      	b.n	800b75e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b886:	f000 fc45 	bl	800c114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b88a:	f000 ff19 	bl	800c6c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b88e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b890:	4618      	mov	r0, r3
 800b892:	3738      	adds	r7, #56	; 0x38
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	e000ed04 	.word	0xe000ed04

0800b89c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b090      	sub	sp, #64	; 0x40
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
 800b8a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10a      	bne.n	800b8ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8c6:	bf00      	nop
 800b8c8:	e7fe      	b.n	800b8c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d103      	bne.n	800b8d8 <xQueueGenericSendFromISR+0x3c>
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <xQueueGenericSendFromISR+0x40>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e000      	b.n	800b8de <xQueueGenericSendFromISR+0x42>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10a      	bne.n	800b8f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d103      	bne.n	800b906 <xQueueGenericSendFromISR+0x6a>
 800b8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b902:	2b01      	cmp	r3, #1
 800b904:	d101      	bne.n	800b90a <xQueueGenericSendFromISR+0x6e>
 800b906:	2301      	movs	r3, #1
 800b908:	e000      	b.n	800b90c <xQueueGenericSendFromISR+0x70>
 800b90a:	2300      	movs	r3, #0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10a      	bne.n	800b926 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	623b      	str	r3, [r7, #32]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b926:	f001 feb7 	bl	800d698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b92a:	f3ef 8211 	mrs	r2, BASEPRI
 800b92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	61fa      	str	r2, [r7, #28]
 800b940:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b942:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b944:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b94e:	429a      	cmp	r2, r3
 800b950:	d302      	bcc.n	800b958 <xQueueGenericSendFromISR+0xbc>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b02      	cmp	r3, #2
 800b956:	d12f      	bne.n	800b9b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b95e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b966:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	68b9      	ldr	r1, [r7, #8]
 800b96c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b96e:	f000 fb41 	bl	800bff4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b972:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97a:	d112      	bne.n	800b9a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	2b00      	cmp	r3, #0
 800b982:	d016      	beq.n	800b9b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b986:	3324      	adds	r3, #36	; 0x24
 800b988:	4618      	mov	r0, r3
 800b98a:	f001 f895 	bl	800cab8 <xTaskRemoveFromEventList>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00e      	beq.n	800b9b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00b      	beq.n	800b9b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	601a      	str	r2, [r3, #0]
 800b9a0:	e007      	b.n	800b9b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	b25a      	sxtb	r2, r3
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b9b6:	e001      	b.n	800b9bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b9c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3740      	adds	r7, #64	; 0x40
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b08e      	sub	sp, #56	; 0x38
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10a      	bne.n	800b9fc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ea:	f383 8811 	msr	BASEPRI, r3
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	623b      	str	r3, [r7, #32]
}
 800b9f8:	bf00      	nop
 800b9fa:	e7fe      	b.n	800b9fa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00a      	beq.n	800ba1a <xQueueGiveFromISR+0x48>
	__asm volatile
 800ba04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	61fb      	str	r3, [r7, #28]
}
 800ba16:	bf00      	nop
 800ba18:	e7fe      	b.n	800ba18 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d103      	bne.n	800ba2a <xQueueGiveFromISR+0x58>
 800ba22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d101      	bne.n	800ba2e <xQueueGiveFromISR+0x5c>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e000      	b.n	800ba30 <xQueueGiveFromISR+0x5e>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10a      	bne.n	800ba4a <xQueueGiveFromISR+0x78>
	__asm volatile
 800ba34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba38:	f383 8811 	msr	BASEPRI, r3
 800ba3c:	f3bf 8f6f 	isb	sy
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	61bb      	str	r3, [r7, #24]
}
 800ba46:	bf00      	nop
 800ba48:	e7fe      	b.n	800ba48 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba4a:	f001 fe25 	bl	800d698 <vPortValidateInterruptPriority>
	__asm volatile
 800ba4e:	f3ef 8211 	mrs	r2, BASEPRI
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	617a      	str	r2, [r7, #20]
 800ba64:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ba66:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d22b      	bcs.n	800bad2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	1c5a      	adds	r2, r3, #1
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba94:	d112      	bne.n	800babc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d016      	beq.n	800bacc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	3324      	adds	r3, #36	; 0x24
 800baa2:	4618      	mov	r0, r3
 800baa4:	f001 f808 	bl	800cab8 <xTaskRemoveFromEventList>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00e      	beq.n	800bacc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00b      	beq.n	800bacc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	e007      	b.n	800bacc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800babc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bac0:	3301      	adds	r3, #1
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	b25a      	sxtb	r2, r3
 800bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bacc:	2301      	movs	r3, #1
 800bace:	637b      	str	r3, [r7, #52]	; 0x34
 800bad0:	e001      	b.n	800bad6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bad2:	2300      	movs	r3, #0
 800bad4:	637b      	str	r3, [r7, #52]	; 0x34
 800bad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f383 8811 	msr	BASEPRI, r3
}
 800bae0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3738      	adds	r7, #56	; 0x38
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b08c      	sub	sp, #48	; 0x30
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800baf8:	2300      	movs	r3, #0
 800bafa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10a      	bne.n	800bb1c <xQueueReceive+0x30>
	__asm volatile
 800bb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0a:	f383 8811 	msr	BASEPRI, r3
 800bb0e:	f3bf 8f6f 	isb	sy
 800bb12:	f3bf 8f4f 	dsb	sy
 800bb16:	623b      	str	r3, [r7, #32]
}
 800bb18:	bf00      	nop
 800bb1a:	e7fe      	b.n	800bb1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d103      	bne.n	800bb2a <xQueueReceive+0x3e>
 800bb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <xQueueReceive+0x42>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e000      	b.n	800bb30 <xQueueReceive+0x44>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10a      	bne.n	800bb4a <xQueueReceive+0x5e>
	__asm volatile
 800bb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb38:	f383 8811 	msr	BASEPRI, r3
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	61fb      	str	r3, [r7, #28]
}
 800bb46:	bf00      	nop
 800bb48:	e7fe      	b.n	800bb48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb4a:	f001 f975 	bl	800ce38 <xTaskGetSchedulerState>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d102      	bne.n	800bb5a <xQueueReceive+0x6e>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d101      	bne.n	800bb5e <xQueueReceive+0x72>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e000      	b.n	800bb60 <xQueueReceive+0x74>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d10a      	bne.n	800bb7a <xQueueReceive+0x8e>
	__asm volatile
 800bb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb68:	f383 8811 	msr	BASEPRI, r3
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	61bb      	str	r3, [r7, #24]
}
 800bb76:	bf00      	nop
 800bb78:	e7fe      	b.n	800bb78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb7a:	f001 fcab 	bl	800d4d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d01f      	beq.n	800bbca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb8a:	68b9      	ldr	r1, [r7, #8]
 800bb8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb8e:	f000 fa9b 	bl	800c0c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	1e5a      	subs	r2, r3, #1
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00f      	beq.n	800bbc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba4:	3310      	adds	r3, #16
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 ff86 	bl	800cab8 <xTaskRemoveFromEventList>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d007      	beq.n	800bbc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bbb2:	4b3d      	ldr	r3, [pc, #244]	; (800bca8 <xQueueReceive+0x1bc>)
 800bbb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbb8:	601a      	str	r2, [r3, #0]
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bbc2:	f001 fcb7 	bl	800d534 <vPortExitCritical>
				return pdPASS;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e069      	b.n	800bc9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d103      	bne.n	800bbd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbd0:	f001 fcb0 	bl	800d534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	e062      	b.n	800bc9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbde:	f107 0310 	add.w	r3, r7, #16
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 ffca 	bl	800cb7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbec:	f001 fca2 	bl	800d534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbf0:	f000 fd58 	bl	800c6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbf4:	f001 fc6e 	bl	800d4d4 <vPortEnterCritical>
 800bbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbfe:	b25b      	sxtb	r3, r3
 800bc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc04:	d103      	bne.n	800bc0e <xQueueReceive+0x122>
 800bc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc14:	b25b      	sxtb	r3, r3
 800bc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1a:	d103      	bne.n	800bc24 <xQueueReceive+0x138>
 800bc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc24:	f001 fc86 	bl	800d534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc28:	1d3a      	adds	r2, r7, #4
 800bc2a:	f107 0310 	add.w	r3, r7, #16
 800bc2e:	4611      	mov	r1, r2
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 ffb9 	bl	800cba8 <xTaskCheckForTimeOut>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d123      	bne.n	800bc84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc3e:	f000 fabb 	bl	800c1b8 <prvIsQueueEmpty>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d017      	beq.n	800bc78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4a:	3324      	adds	r3, #36	; 0x24
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	4611      	mov	r1, r2
 800bc50:	4618      	mov	r0, r3
 800bc52:	f000 ff0d 	bl	800ca70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc58:	f000 fa5c 	bl	800c114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc5c:	f000 fd30 	bl	800c6c0 <xTaskResumeAll>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d189      	bne.n	800bb7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bc66:	4b10      	ldr	r3, [pc, #64]	; (800bca8 <xQueueReceive+0x1bc>)
 800bc68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc6c:	601a      	str	r2, [r3, #0]
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	e780      	b.n	800bb7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc7a:	f000 fa4b 	bl	800c114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc7e:	f000 fd1f 	bl	800c6c0 <xTaskResumeAll>
 800bc82:	e77a      	b.n	800bb7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc86:	f000 fa45 	bl	800c114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc8a:	f000 fd19 	bl	800c6c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc90:	f000 fa92 	bl	800c1b8 <prvIsQueueEmpty>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f43f af6f 	beq.w	800bb7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3730      	adds	r7, #48	; 0x30
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	e000ed04 	.word	0xe000ed04

0800bcac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08e      	sub	sp, #56	; 0x38
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10a      	bne.n	800bcde <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	623b      	str	r3, [r7, #32]
}
 800bcda:	bf00      	nop
 800bcdc:	e7fe      	b.n	800bcdc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00a      	beq.n	800bcfc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcea:	f383 8811 	msr	BASEPRI, r3
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	61fb      	str	r3, [r7, #28]
}
 800bcf8:	bf00      	nop
 800bcfa:	e7fe      	b.n	800bcfa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcfc:	f001 f89c 	bl	800ce38 <xTaskGetSchedulerState>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d102      	bne.n	800bd0c <xQueueSemaphoreTake+0x60>
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d101      	bne.n	800bd10 <xQueueSemaphoreTake+0x64>
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e000      	b.n	800bd12 <xQueueSemaphoreTake+0x66>
 800bd10:	2300      	movs	r3, #0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d10a      	bne.n	800bd2c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1a:	f383 8811 	msr	BASEPRI, r3
 800bd1e:	f3bf 8f6f 	isb	sy
 800bd22:	f3bf 8f4f 	dsb	sy
 800bd26:	61bb      	str	r3, [r7, #24]
}
 800bd28:	bf00      	nop
 800bd2a:	e7fe      	b.n	800bd2a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd2c:	f001 fbd2 	bl	800d4d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d024      	beq.n	800bd86 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3e:	1e5a      	subs	r2, r3, #1
 800bd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d104      	bne.n	800bd56 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bd4c:	f001 fa1c 	bl	800d188 <pvTaskIncrementMutexHeldCount>
 800bd50:	4602      	mov	r2, r0
 800bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00f      	beq.n	800bd7e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd60:	3310      	adds	r3, #16
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 fea8 	bl	800cab8 <xTaskRemoveFromEventList>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d007      	beq.n	800bd7e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd6e:	4b54      	ldr	r3, [pc, #336]	; (800bec0 <xQueueSemaphoreTake+0x214>)
 800bd70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd74:	601a      	str	r2, [r3, #0]
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd7e:	f001 fbd9 	bl	800d534 <vPortExitCritical>
				return pdPASS;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e097      	b.n	800beb6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d111      	bne.n	800bdb0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00a      	beq.n	800bda8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd96:	f383 8811 	msr	BASEPRI, r3
 800bd9a:	f3bf 8f6f 	isb	sy
 800bd9e:	f3bf 8f4f 	dsb	sy
 800bda2:	617b      	str	r3, [r7, #20]
}
 800bda4:	bf00      	nop
 800bda6:	e7fe      	b.n	800bda6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bda8:	f001 fbc4 	bl	800d534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bdac:	2300      	movs	r3, #0
 800bdae:	e082      	b.n	800beb6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d106      	bne.n	800bdc4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdb6:	f107 030c 	add.w	r3, r7, #12
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 fede 	bl	800cb7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdc4:	f001 fbb6 	bl	800d534 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdc8:	f000 fc6c 	bl	800c6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdcc:	f001 fb82 	bl	800d4d4 <vPortEnterCritical>
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdd6:	b25b      	sxtb	r3, r3
 800bdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bddc:	d103      	bne.n	800bde6 <xQueueSemaphoreTake+0x13a>
 800bdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdec:	b25b      	sxtb	r3, r3
 800bdee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf2:	d103      	bne.n	800bdfc <xQueueSemaphoreTake+0x150>
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdfc:	f001 fb9a 	bl	800d534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be00:	463a      	mov	r2, r7
 800be02:	f107 030c 	add.w	r3, r7, #12
 800be06:	4611      	mov	r1, r2
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 fecd 	bl	800cba8 <xTaskCheckForTimeOut>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d132      	bne.n	800be7a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be16:	f000 f9cf 	bl	800c1b8 <prvIsQueueEmpty>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d026      	beq.n	800be6e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d109      	bne.n	800be3c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800be28:	f001 fb54 	bl	800d4d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	4618      	mov	r0, r3
 800be32:	f001 f81f 	bl	800ce74 <xTaskPriorityInherit>
 800be36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800be38:	f001 fb7c 	bl	800d534 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3e:	3324      	adds	r3, #36	; 0x24
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	4611      	mov	r1, r2
 800be44:	4618      	mov	r0, r3
 800be46:	f000 fe13 	bl	800ca70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be4c:	f000 f962 	bl	800c114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be50:	f000 fc36 	bl	800c6c0 <xTaskResumeAll>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	f47f af68 	bne.w	800bd2c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800be5c:	4b18      	ldr	r3, [pc, #96]	; (800bec0 <xQueueSemaphoreTake+0x214>)
 800be5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be62:	601a      	str	r2, [r3, #0]
 800be64:	f3bf 8f4f 	dsb	sy
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	e75e      	b.n	800bd2c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800be6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be70:	f000 f950 	bl	800c114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be74:	f000 fc24 	bl	800c6c0 <xTaskResumeAll>
 800be78:	e758      	b.n	800bd2c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800be7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be7c:	f000 f94a 	bl	800c114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be80:	f000 fc1e 	bl	800c6c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be86:	f000 f997 	bl	800c1b8 <prvIsQueueEmpty>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f43f af4d 	beq.w	800bd2c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800be92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00d      	beq.n	800beb4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800be98:	f001 fb1c 	bl	800d4d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800be9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be9e:	f000 f891 	bl	800bfc4 <prvGetDisinheritPriorityAfterTimeout>
 800bea2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800beaa:	4618      	mov	r0, r3
 800beac:	f001 f8de 	bl	800d06c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800beb0:	f001 fb40 	bl	800d534 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800beb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3738      	adds	r7, #56	; 0x38
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	e000ed04 	.word	0xe000ed04

0800bec4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b08e      	sub	sp, #56	; 0x38
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10a      	bne.n	800bef0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800beda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	623b      	str	r3, [r7, #32]
}
 800beec:	bf00      	nop
 800beee:	e7fe      	b.n	800beee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d103      	bne.n	800befe <xQueueReceiveFromISR+0x3a>
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befa:	2b00      	cmp	r3, #0
 800befc:	d101      	bne.n	800bf02 <xQueueReceiveFromISR+0x3e>
 800befe:	2301      	movs	r3, #1
 800bf00:	e000      	b.n	800bf04 <xQueueReceiveFromISR+0x40>
 800bf02:	2300      	movs	r3, #0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10a      	bne.n	800bf1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	61fb      	str	r3, [r7, #28]
}
 800bf1a:	bf00      	nop
 800bf1c:	e7fe      	b.n	800bf1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf1e:	f001 fbbb 	bl	800d698 <vPortValidateInterruptPriority>
	__asm volatile
 800bf22:	f3ef 8211 	mrs	r2, BASEPRI
 800bf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2a:	f383 8811 	msr	BASEPRI, r3
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	61ba      	str	r2, [r7, #24]
 800bf38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bf3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d02f      	beq.n	800bfaa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf54:	68b9      	ldr	r1, [r7, #8]
 800bf56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf58:	f000 f8b6 	bl	800c0c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	1e5a      	subs	r2, r3, #1
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bf64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6c:	d112      	bne.n	800bf94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d016      	beq.n	800bfa4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	3310      	adds	r3, #16
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 fd9c 	bl	800cab8 <xTaskRemoveFromEventList>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00e      	beq.n	800bfa4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00b      	beq.n	800bfa4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	e007      	b.n	800bfa4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bf94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf98:	3301      	adds	r3, #1
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	b25a      	sxtb	r2, r3
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	637b      	str	r3, [r7, #52]	; 0x34
 800bfa8:	e001      	b.n	800bfae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	637b      	str	r3, [r7, #52]	; 0x34
 800bfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	f383 8811 	msr	BASEPRI, r3
}
 800bfb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3738      	adds	r7, #56	; 0x38
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d006      	beq.n	800bfe2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f1c3 0307 	rsb	r3, r3, #7
 800bfde:	60fb      	str	r3, [r7, #12]
 800bfe0:	e001      	b.n	800bfe6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
	}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b086      	sub	sp, #24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c000:	2300      	movs	r3, #0
 800c002:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c008:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10d      	bne.n	800c02e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d14d      	bne.n	800c0b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	4618      	mov	r0, r3
 800c020:	f000 ff9e 	bl	800cf60 <xTaskPriorityDisinherit>
 800c024:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	609a      	str	r2, [r3, #8]
 800c02c:	e043      	b.n	800c0b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d119      	bne.n	800c068 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6858      	ldr	r0, [r3, #4]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03c:	461a      	mov	r2, r3
 800c03e:	68b9      	ldr	r1, [r7, #8]
 800c040:	f00c ff87 	bl	8018f52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	685a      	ldr	r2, [r3, #4]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04c:	441a      	add	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	685a      	ldr	r2, [r3, #4]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d32b      	bcc.n	800c0b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	605a      	str	r2, [r3, #4]
 800c066:	e026      	b.n	800c0b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	68d8      	ldr	r0, [r3, #12]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c070:	461a      	mov	r2, r3
 800c072:	68b9      	ldr	r1, [r7, #8]
 800c074:	f00c ff6d 	bl	8018f52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	68da      	ldr	r2, [r3, #12]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c080:	425b      	negs	r3, r3
 800c082:	441a      	add	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	68da      	ldr	r2, [r3, #12]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	429a      	cmp	r2, r3
 800c092:	d207      	bcs.n	800c0a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	689a      	ldr	r2, [r3, #8]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09c:	425b      	negs	r3, r3
 800c09e:	441a      	add	r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d105      	bne.n	800c0b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	1c5a      	adds	r2, r3, #1
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c0be:	697b      	ldr	r3, [r7, #20]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3718      	adds	r7, #24
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d018      	beq.n	800c10c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68da      	ldr	r2, [r3, #12]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e2:	441a      	add	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	68da      	ldr	r2, [r3, #12]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d303      	bcc.n	800c0fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	68d9      	ldr	r1, [r3, #12]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c104:	461a      	mov	r2, r3
 800c106:	6838      	ldr	r0, [r7, #0]
 800c108:	f00c ff23 	bl	8018f52 <memcpy>
	}
}
 800c10c:	bf00      	nop
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c11c:	f001 f9da 	bl	800d4d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c126:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c128:	e011      	b.n	800c14e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d012      	beq.n	800c158 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	3324      	adds	r3, #36	; 0x24
 800c136:	4618      	mov	r0, r3
 800c138:	f000 fcbe 	bl	800cab8 <xTaskRemoveFromEventList>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d001      	beq.n	800c146 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c142:	f000 fd93 	bl	800cc6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c146:	7bfb      	ldrb	r3, [r7, #15]
 800c148:	3b01      	subs	r3, #1
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c14e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c152:	2b00      	cmp	r3, #0
 800c154:	dce9      	bgt.n	800c12a <prvUnlockQueue+0x16>
 800c156:	e000      	b.n	800c15a <prvUnlockQueue+0x46>
					break;
 800c158:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	22ff      	movs	r2, #255	; 0xff
 800c15e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c162:	f001 f9e7 	bl	800d534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c166:	f001 f9b5 	bl	800d4d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c170:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c172:	e011      	b.n	800c198 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d012      	beq.n	800c1a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	3310      	adds	r3, #16
 800c180:	4618      	mov	r0, r3
 800c182:	f000 fc99 	bl	800cab8 <xTaskRemoveFromEventList>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d001      	beq.n	800c190 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c18c:	f000 fd6e 	bl	800cc6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c190:	7bbb      	ldrb	r3, [r7, #14]
 800c192:	3b01      	subs	r3, #1
 800c194:	b2db      	uxtb	r3, r3
 800c196:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	dce9      	bgt.n	800c174 <prvUnlockQueue+0x60>
 800c1a0:	e000      	b.n	800c1a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c1a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	22ff      	movs	r2, #255	; 0xff
 800c1a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c1ac:	f001 f9c2 	bl	800d534 <vPortExitCritical>
}
 800c1b0:	bf00      	nop
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1c0:	f001 f988 	bl	800d4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d102      	bne.n	800c1d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	60fb      	str	r3, [r7, #12]
 800c1d0:	e001      	b.n	800c1d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1d6:	f001 f9ad 	bl	800d534 <vPortExitCritical>

	return xReturn;
 800c1da:	68fb      	ldr	r3, [r7, #12]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1ec:	f001 f972 	bl	800d4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d102      	bne.n	800c202 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	60fb      	str	r3, [r7, #12]
 800c200:	e001      	b.n	800c206 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c202:	2300      	movs	r3, #0
 800c204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c206:	f001 f995 	bl	800d534 <vPortExitCritical>

	return xReturn;
 800c20a:	68fb      	ldr	r3, [r7, #12]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c214:	b580      	push	{r7, lr}
 800c216:	b08e      	sub	sp, #56	; 0x38
 800c218:	af04      	add	r7, sp, #16
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
 800c220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10a      	bne.n	800c23e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	623b      	str	r3, [r7, #32]
}
 800c23a:	bf00      	nop
 800c23c:	e7fe      	b.n	800c23c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10a      	bne.n	800c25a <xTaskCreateStatic+0x46>
	__asm volatile
 800c244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c248:	f383 8811 	msr	BASEPRI, r3
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	61fb      	str	r3, [r7, #28]
}
 800c256:	bf00      	nop
 800c258:	e7fe      	b.n	800c258 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c25a:	23b4      	movs	r3, #180	; 0xb4
 800c25c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	2bb4      	cmp	r3, #180	; 0xb4
 800c262:	d00a      	beq.n	800c27a <xTaskCreateStatic+0x66>
	__asm volatile
 800c264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c268:	f383 8811 	msr	BASEPRI, r3
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	f3bf 8f4f 	dsb	sy
 800c274:	61bb      	str	r3, [r7, #24]
}
 800c276:	bf00      	nop
 800c278:	e7fe      	b.n	800c278 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c27a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d01e      	beq.n	800c2c0 <xTaskCreateStatic+0xac>
 800c282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c284:	2b00      	cmp	r3, #0
 800c286:	d01b      	beq.n	800c2c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c290:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c294:	2202      	movs	r2, #2
 800c296:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c29a:	2300      	movs	r3, #0
 800c29c:	9303      	str	r3, [sp, #12]
 800c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a0:	9302      	str	r3, [sp, #8]
 800c2a2:	f107 0314 	add.w	r3, r7, #20
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	68b9      	ldr	r1, [r7, #8]
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f000 f850 	bl	800c358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2ba:	f000 f8eb 	bl	800c494 <prvAddNewTaskToReadyList>
 800c2be:	e001      	b.n	800c2c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2c4:	697b      	ldr	r3, [r7, #20]
	}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3728      	adds	r7, #40	; 0x28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b08c      	sub	sp, #48	; 0x30
 800c2d2:	af04      	add	r7, sp, #16
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	603b      	str	r3, [r7, #0]
 800c2da:	4613      	mov	r3, r2
 800c2dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c2de:	88fb      	ldrh	r3, [r7, #6]
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f001 fa18 	bl	800d718 <pvPortMalloc>
 800c2e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00e      	beq.n	800c30e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c2f0:	20b4      	movs	r0, #180	; 0xb4
 800c2f2:	f001 fa11 	bl	800d718 <pvPortMalloc>
 800c2f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d003      	beq.n	800c306 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	697a      	ldr	r2, [r7, #20]
 800c302:	631a      	str	r2, [r3, #48]	; 0x30
 800c304:	e005      	b.n	800c312 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c306:	6978      	ldr	r0, [r7, #20]
 800c308:	f001 fad2 	bl	800d8b0 <vPortFree>
 800c30c:	e001      	b.n	800c312 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c30e:	2300      	movs	r3, #0
 800c310:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d017      	beq.n	800c348 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c320:	88fa      	ldrh	r2, [r7, #6]
 800c322:	2300      	movs	r3, #0
 800c324:	9303      	str	r3, [sp, #12]
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	9302      	str	r3, [sp, #8]
 800c32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	68b9      	ldr	r1, [r7, #8]
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f000 f80e 	bl	800c358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c33c:	69f8      	ldr	r0, [r7, #28]
 800c33e:	f000 f8a9 	bl	800c494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c342:	2301      	movs	r3, #1
 800c344:	61bb      	str	r3, [r7, #24]
 800c346:	e002      	b.n	800c34e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c348:	f04f 33ff 	mov.w	r3, #4294967295
 800c34c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c34e:	69bb      	ldr	r3, [r7, #24]
	}
 800c350:	4618      	mov	r0, r3
 800c352:	3720      	adds	r7, #32
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b088      	sub	sp, #32
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	607a      	str	r2, [r7, #4]
 800c364:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c36a:	6879      	ldr	r1, [r7, #4]
 800c36c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c370:	440b      	add	r3, r1
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4413      	add	r3, r2
 800c376:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	f023 0307 	bic.w	r3, r3, #7
 800c37e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	f003 0307 	and.w	r3, r3, #7
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00a      	beq.n	800c3a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	617b      	str	r3, [r7, #20]
}
 800c39c:	bf00      	nop
 800c39e:	e7fe      	b.n	800c39e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d01f      	beq.n	800c3e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	61fb      	str	r3, [r7, #28]
 800c3aa:	e012      	b.n	800c3d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	7819      	ldrb	r1, [r3, #0]
 800c3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	3334      	adds	r3, #52	; 0x34
 800c3bc:	460a      	mov	r2, r1
 800c3be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d006      	beq.n	800c3da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	61fb      	str	r3, [r7, #28]
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	2b0f      	cmp	r3, #15
 800c3d6:	d9e9      	bls.n	800c3ac <prvInitialiseNewTask+0x54>
 800c3d8:	e000      	b.n	800c3dc <prvInitialiseNewTask+0x84>
			{
				break;
 800c3da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3e4:	e003      	b.n	800c3ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f0:	2b06      	cmp	r3, #6
 800c3f2:	d901      	bls.n	800c3f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c3f4:	2306      	movs	r3, #6
 800c3f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c402:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c406:	2200      	movs	r2, #0
 800c408:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	3304      	adds	r3, #4
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fe ff2c 	bl	800b26c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c416:	3318      	adds	r3, #24
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fe ff27 	bl	800b26c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c422:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c426:	f1c3 0207 	rsb	r2, r3, #7
 800c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c432:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c436:	2200      	movs	r2, #0
 800c438:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c446:	334c      	adds	r3, #76	; 0x4c
 800c448:	2260      	movs	r2, #96	; 0x60
 800c44a:	2100      	movs	r1, #0
 800c44c:	4618      	mov	r0, r3
 800c44e:	f00c fd8e 	bl	8018f6e <memset>
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	4a0c      	ldr	r2, [pc, #48]	; (800c488 <prvInitialiseNewTask+0x130>)
 800c456:	651a      	str	r2, [r3, #80]	; 0x50
 800c458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45a:	4a0c      	ldr	r2, [pc, #48]	; (800c48c <prvInitialiseNewTask+0x134>)
 800c45c:	655a      	str	r2, [r3, #84]	; 0x54
 800c45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c460:	4a0b      	ldr	r2, [pc, #44]	; (800c490 <prvInitialiseNewTask+0x138>)
 800c462:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c464:	683a      	ldr	r2, [r7, #0]
 800c466:	68f9      	ldr	r1, [r7, #12]
 800c468:	69b8      	ldr	r0, [r7, #24]
 800c46a:	f000 ff07 	bl	800d27c <pxPortInitialiseStack>
 800c46e:	4602      	mov	r2, r0
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c476:	2b00      	cmp	r3, #0
 800c478:	d002      	beq.n	800c480 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c47e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c480:	bf00      	nop
 800c482:	3720      	adds	r7, #32
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	0801d4f0 	.word	0x0801d4f0
 800c48c:	0801d510 	.word	0x0801d510
 800c490:	0801d4d0 	.word	0x0801d4d0

0800c494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c49c:	f001 f81a 	bl	800d4d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c4a0:	4b2a      	ldr	r3, [pc, #168]	; (800c54c <prvAddNewTaskToReadyList+0xb8>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	4a29      	ldr	r2, [pc, #164]	; (800c54c <prvAddNewTaskToReadyList+0xb8>)
 800c4a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4aa:	4b29      	ldr	r3, [pc, #164]	; (800c550 <prvAddNewTaskToReadyList+0xbc>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d109      	bne.n	800c4c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4b2:	4a27      	ldr	r2, [pc, #156]	; (800c550 <prvAddNewTaskToReadyList+0xbc>)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c4b8:	4b24      	ldr	r3, [pc, #144]	; (800c54c <prvAddNewTaskToReadyList+0xb8>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d110      	bne.n	800c4e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c4c0:	f000 fbf8 	bl	800ccb4 <prvInitialiseTaskLists>
 800c4c4:	e00d      	b.n	800c4e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c4c6:	4b23      	ldr	r3, [pc, #140]	; (800c554 <prvAddNewTaskToReadyList+0xc0>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d109      	bne.n	800c4e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c4ce:	4b20      	ldr	r3, [pc, #128]	; (800c550 <prvAddNewTaskToReadyList+0xbc>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d802      	bhi.n	800c4e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c4dc:	4a1c      	ldr	r2, [pc, #112]	; (800c550 <prvAddNewTaskToReadyList+0xbc>)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c4e2:	4b1d      	ldr	r3, [pc, #116]	; (800c558 <prvAddNewTaskToReadyList+0xc4>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	4a1b      	ldr	r2, [pc, #108]	; (800c558 <prvAddNewTaskToReadyList+0xc4>)
 800c4ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	409a      	lsls	r2, r3
 800c4f4:	4b19      	ldr	r3, [pc, #100]	; (800c55c <prvAddNewTaskToReadyList+0xc8>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	4a18      	ldr	r2, [pc, #96]	; (800c55c <prvAddNewTaskToReadyList+0xc8>)
 800c4fc:	6013      	str	r3, [r2, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c502:	4613      	mov	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4a15      	ldr	r2, [pc, #84]	; (800c560 <prvAddNewTaskToReadyList+0xcc>)
 800c50c:	441a      	add	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	3304      	adds	r3, #4
 800c512:	4619      	mov	r1, r3
 800c514:	4610      	mov	r0, r2
 800c516:	f7fe feb6 	bl	800b286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c51a:	f001 f80b 	bl	800d534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c51e:	4b0d      	ldr	r3, [pc, #52]	; (800c554 <prvAddNewTaskToReadyList+0xc0>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00e      	beq.n	800c544 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c526:	4b0a      	ldr	r3, [pc, #40]	; (800c550 <prvAddNewTaskToReadyList+0xbc>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c530:	429a      	cmp	r2, r3
 800c532:	d207      	bcs.n	800c544 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c534:	4b0b      	ldr	r3, [pc, #44]	; (800c564 <prvAddNewTaskToReadyList+0xd0>)
 800c536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53a:	601a      	str	r2, [r3, #0]
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c544:	bf00      	nop
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	2400047c 	.word	0x2400047c
 800c550:	2400037c 	.word	0x2400037c
 800c554:	24000488 	.word	0x24000488
 800c558:	24000498 	.word	0x24000498
 800c55c:	24000484 	.word	0x24000484
 800c560:	24000380 	.word	0x24000380
 800c564:	e000ed04 	.word	0xe000ed04

0800c568 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c570:	2300      	movs	r3, #0
 800c572:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d017      	beq.n	800c5aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c57a:	4b13      	ldr	r3, [pc, #76]	; (800c5c8 <vTaskDelay+0x60>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00a      	beq.n	800c598 <vTaskDelay+0x30>
	__asm volatile
 800c582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	60bb      	str	r3, [r7, #8]
}
 800c594:	bf00      	nop
 800c596:	e7fe      	b.n	800c596 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c598:	f000 f884 	bl	800c6a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c59c:	2100      	movs	r1, #0
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fe06 	bl	800d1b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c5a4:	f000 f88c 	bl	800c6c0 <xTaskResumeAll>
 800c5a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d107      	bne.n	800c5c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c5b0:	4b06      	ldr	r3, [pc, #24]	; (800c5cc <vTaskDelay+0x64>)
 800c5b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b6:	601a      	str	r2, [r3, #0]
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5c0:	bf00      	nop
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	240004a4 	.word	0x240004a4
 800c5cc:	e000ed04 	.word	0xe000ed04

0800c5d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b08a      	sub	sp, #40	; 0x28
 800c5d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c5de:	463a      	mov	r2, r7
 800c5e0:	1d39      	adds	r1, r7, #4
 800c5e2:	f107 0308 	add.w	r3, r7, #8
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7f4 fd2a 	bl	8001040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	9202      	str	r2, [sp, #8]
 800c5f4:	9301      	str	r3, [sp, #4]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	460a      	mov	r2, r1
 800c5fe:	4921      	ldr	r1, [pc, #132]	; (800c684 <vTaskStartScheduler+0xb4>)
 800c600:	4821      	ldr	r0, [pc, #132]	; (800c688 <vTaskStartScheduler+0xb8>)
 800c602:	f7ff fe07 	bl	800c214 <xTaskCreateStatic>
 800c606:	4603      	mov	r3, r0
 800c608:	4a20      	ldr	r2, [pc, #128]	; (800c68c <vTaskStartScheduler+0xbc>)
 800c60a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c60c:	4b1f      	ldr	r3, [pc, #124]	; (800c68c <vTaskStartScheduler+0xbc>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d002      	beq.n	800c61a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c614:	2301      	movs	r3, #1
 800c616:	617b      	str	r3, [r7, #20]
 800c618:	e001      	b.n	800c61e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c61a:	2300      	movs	r3, #0
 800c61c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	2b01      	cmp	r3, #1
 800c622:	d11b      	bne.n	800c65c <vTaskStartScheduler+0x8c>
	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	613b      	str	r3, [r7, #16]
}
 800c636:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c638:	4b15      	ldr	r3, [pc, #84]	; (800c690 <vTaskStartScheduler+0xc0>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	334c      	adds	r3, #76	; 0x4c
 800c63e:	4a15      	ldr	r2, [pc, #84]	; (800c694 <vTaskStartScheduler+0xc4>)
 800c640:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c642:	4b15      	ldr	r3, [pc, #84]	; (800c698 <vTaskStartScheduler+0xc8>)
 800c644:	f04f 32ff 	mov.w	r2, #4294967295
 800c648:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c64a:	4b14      	ldr	r3, [pc, #80]	; (800c69c <vTaskStartScheduler+0xcc>)
 800c64c:	2201      	movs	r2, #1
 800c64e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c650:	4b13      	ldr	r3, [pc, #76]	; (800c6a0 <vTaskStartScheduler+0xd0>)
 800c652:	2200      	movs	r2, #0
 800c654:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c656:	f000 fe9b 	bl	800d390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c65a:	e00e      	b.n	800c67a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c662:	d10a      	bne.n	800c67a <vTaskStartScheduler+0xaa>
	__asm volatile
 800c664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	60fb      	str	r3, [r7, #12]
}
 800c676:	bf00      	nop
 800c678:	e7fe      	b.n	800c678 <vTaskStartScheduler+0xa8>
}
 800c67a:	bf00      	nop
 800c67c:	3718      	adds	r7, #24
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	0801a0e0 	.word	0x0801a0e0
 800c688:	0800cc85 	.word	0x0800cc85
 800c68c:	240004a0 	.word	0x240004a0
 800c690:	2400037c 	.word	0x2400037c
 800c694:	2400003c 	.word	0x2400003c
 800c698:	2400049c 	.word	0x2400049c
 800c69c:	24000488 	.word	0x24000488
 800c6a0:	24000480 	.word	0x24000480

0800c6a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c6a8:	4b04      	ldr	r3, [pc, #16]	; (800c6bc <vTaskSuspendAll+0x18>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	4a03      	ldr	r2, [pc, #12]	; (800c6bc <vTaskSuspendAll+0x18>)
 800c6b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c6b2:	bf00      	nop
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr
 800c6bc:	240004a4 	.word	0x240004a4

0800c6c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c6ce:	4b41      	ldr	r3, [pc, #260]	; (800c7d4 <xTaskResumeAll+0x114>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10a      	bne.n	800c6ec <xTaskResumeAll+0x2c>
	__asm volatile
 800c6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	603b      	str	r3, [r7, #0]
}
 800c6e8:	bf00      	nop
 800c6ea:	e7fe      	b.n	800c6ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c6ec:	f000 fef2 	bl	800d4d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c6f0:	4b38      	ldr	r3, [pc, #224]	; (800c7d4 <xTaskResumeAll+0x114>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	4a37      	ldr	r2, [pc, #220]	; (800c7d4 <xTaskResumeAll+0x114>)
 800c6f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6fa:	4b36      	ldr	r3, [pc, #216]	; (800c7d4 <xTaskResumeAll+0x114>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d161      	bne.n	800c7c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c702:	4b35      	ldr	r3, [pc, #212]	; (800c7d8 <xTaskResumeAll+0x118>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d05d      	beq.n	800c7c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c70a:	e02e      	b.n	800c76a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c70c:	4b33      	ldr	r3, [pc, #204]	; (800c7dc <xTaskResumeAll+0x11c>)
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	3318      	adds	r3, #24
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fe fe11 	bl	800b340 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	3304      	adds	r3, #4
 800c722:	4618      	mov	r0, r3
 800c724:	f7fe fe0c 	bl	800b340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72c:	2201      	movs	r2, #1
 800c72e:	409a      	lsls	r2, r3
 800c730:	4b2b      	ldr	r3, [pc, #172]	; (800c7e0 <xTaskResumeAll+0x120>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4313      	orrs	r3, r2
 800c736:	4a2a      	ldr	r2, [pc, #168]	; (800c7e0 <xTaskResumeAll+0x120>)
 800c738:	6013      	str	r3, [r2, #0]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73e:	4613      	mov	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4413      	add	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	4a27      	ldr	r2, [pc, #156]	; (800c7e4 <xTaskResumeAll+0x124>)
 800c748:	441a      	add	r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3304      	adds	r3, #4
 800c74e:	4619      	mov	r1, r3
 800c750:	4610      	mov	r0, r2
 800c752:	f7fe fd98 	bl	800b286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c75a:	4b23      	ldr	r3, [pc, #140]	; (800c7e8 <xTaskResumeAll+0x128>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c760:	429a      	cmp	r2, r3
 800c762:	d302      	bcc.n	800c76a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c764:	4b21      	ldr	r3, [pc, #132]	; (800c7ec <xTaskResumeAll+0x12c>)
 800c766:	2201      	movs	r2, #1
 800c768:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c76a:	4b1c      	ldr	r3, [pc, #112]	; (800c7dc <xTaskResumeAll+0x11c>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1cc      	bne.n	800c70c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d001      	beq.n	800c77c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c778:	f000 fb3e 	bl	800cdf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c77c:	4b1c      	ldr	r3, [pc, #112]	; (800c7f0 <xTaskResumeAll+0x130>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d010      	beq.n	800c7aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c788:	f000 f858 	bl	800c83c <xTaskIncrementTick>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d002      	beq.n	800c798 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c792:	4b16      	ldr	r3, [pc, #88]	; (800c7ec <xTaskResumeAll+0x12c>)
 800c794:	2201      	movs	r2, #1
 800c796:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	3b01      	subs	r3, #1
 800c79c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1f1      	bne.n	800c788 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c7a4:	4b12      	ldr	r3, [pc, #72]	; (800c7f0 <xTaskResumeAll+0x130>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c7aa:	4b10      	ldr	r3, [pc, #64]	; (800c7ec <xTaskResumeAll+0x12c>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d009      	beq.n	800c7c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c7b6:	4b0f      	ldr	r3, [pc, #60]	; (800c7f4 <xTaskResumeAll+0x134>)
 800c7b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7c6:	f000 feb5 	bl	800d534 <vPortExitCritical>

	return xAlreadyYielded;
 800c7ca:	68bb      	ldr	r3, [r7, #8]
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	240004a4 	.word	0x240004a4
 800c7d8:	2400047c 	.word	0x2400047c
 800c7dc:	2400043c 	.word	0x2400043c
 800c7e0:	24000484 	.word	0x24000484
 800c7e4:	24000380 	.word	0x24000380
 800c7e8:	2400037c 	.word	0x2400037c
 800c7ec:	24000490 	.word	0x24000490
 800c7f0:	2400048c 	.word	0x2400048c
 800c7f4:	e000ed04 	.word	0xe000ed04

0800c7f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c7fe:	4b05      	ldr	r3, [pc, #20]	; (800c814 <xTaskGetTickCount+0x1c>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c804:	687b      	ldr	r3, [r7, #4]
}
 800c806:	4618      	mov	r0, r3
 800c808:	370c      	adds	r7, #12
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	24000480 	.word	0x24000480

0800c818 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c81e:	f000 ff3b 	bl	800d698 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c822:	2300      	movs	r3, #0
 800c824:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c826:	4b04      	ldr	r3, [pc, #16]	; (800c838 <xTaskGetTickCountFromISR+0x20>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c82c:	683b      	ldr	r3, [r7, #0]
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	24000480 	.word	0x24000480

0800c83c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c842:	2300      	movs	r3, #0
 800c844:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c846:	4b4e      	ldr	r3, [pc, #312]	; (800c980 <xTaskIncrementTick+0x144>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f040 808e 	bne.w	800c96c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c850:	4b4c      	ldr	r3, [pc, #304]	; (800c984 <xTaskIncrementTick+0x148>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3301      	adds	r3, #1
 800c856:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c858:	4a4a      	ldr	r2, [pc, #296]	; (800c984 <xTaskIncrementTick+0x148>)
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d120      	bne.n	800c8a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c864:	4b48      	ldr	r3, [pc, #288]	; (800c988 <xTaskIncrementTick+0x14c>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00a      	beq.n	800c884 <xTaskIncrementTick+0x48>
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	603b      	str	r3, [r7, #0]
}
 800c880:	bf00      	nop
 800c882:	e7fe      	b.n	800c882 <xTaskIncrementTick+0x46>
 800c884:	4b40      	ldr	r3, [pc, #256]	; (800c988 <xTaskIncrementTick+0x14c>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	60fb      	str	r3, [r7, #12]
 800c88a:	4b40      	ldr	r3, [pc, #256]	; (800c98c <xTaskIncrementTick+0x150>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a3e      	ldr	r2, [pc, #248]	; (800c988 <xTaskIncrementTick+0x14c>)
 800c890:	6013      	str	r3, [r2, #0]
 800c892:	4a3e      	ldr	r2, [pc, #248]	; (800c98c <xTaskIncrementTick+0x150>)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6013      	str	r3, [r2, #0]
 800c898:	4b3d      	ldr	r3, [pc, #244]	; (800c990 <xTaskIncrementTick+0x154>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	3301      	adds	r3, #1
 800c89e:	4a3c      	ldr	r2, [pc, #240]	; (800c990 <xTaskIncrementTick+0x154>)
 800c8a0:	6013      	str	r3, [r2, #0]
 800c8a2:	f000 faa9 	bl	800cdf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c8a6:	4b3b      	ldr	r3, [pc, #236]	; (800c994 <xTaskIncrementTick+0x158>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d348      	bcc.n	800c942 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8b0:	4b35      	ldr	r3, [pc, #212]	; (800c988 <xTaskIncrementTick+0x14c>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d104      	bne.n	800c8c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8ba:	4b36      	ldr	r3, [pc, #216]	; (800c994 <xTaskIncrementTick+0x158>)
 800c8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c8c0:	601a      	str	r2, [r3, #0]
					break;
 800c8c2:	e03e      	b.n	800c942 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8c4:	4b30      	ldr	r3, [pc, #192]	; (800c988 <xTaskIncrementTick+0x14c>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c8d4:	693a      	ldr	r2, [r7, #16]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d203      	bcs.n	800c8e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c8dc:	4a2d      	ldr	r2, [pc, #180]	; (800c994 <xTaskIncrementTick+0x158>)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c8e2:	e02e      	b.n	800c942 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	3304      	adds	r3, #4
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7fe fd29 	bl	800b340 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d004      	beq.n	800c900 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	3318      	adds	r3, #24
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fe fd20 	bl	800b340 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c904:	2201      	movs	r2, #1
 800c906:	409a      	lsls	r2, r3
 800c908:	4b23      	ldr	r3, [pc, #140]	; (800c998 <xTaskIncrementTick+0x15c>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	4a22      	ldr	r2, [pc, #136]	; (800c998 <xTaskIncrementTick+0x15c>)
 800c910:	6013      	str	r3, [r2, #0]
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c916:	4613      	mov	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	4a1f      	ldr	r2, [pc, #124]	; (800c99c <xTaskIncrementTick+0x160>)
 800c920:	441a      	add	r2, r3
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	3304      	adds	r3, #4
 800c926:	4619      	mov	r1, r3
 800c928:	4610      	mov	r0, r2
 800c92a:	f7fe fcac 	bl	800b286 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c932:	4b1b      	ldr	r3, [pc, #108]	; (800c9a0 <xTaskIncrementTick+0x164>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c938:	429a      	cmp	r2, r3
 800c93a:	d3b9      	bcc.n	800c8b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c93c:	2301      	movs	r3, #1
 800c93e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c940:	e7b6      	b.n	800c8b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c942:	4b17      	ldr	r3, [pc, #92]	; (800c9a0 <xTaskIncrementTick+0x164>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c948:	4914      	ldr	r1, [pc, #80]	; (800c99c <xTaskIncrementTick+0x160>)
 800c94a:	4613      	mov	r3, r2
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	4413      	add	r3, r2
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	440b      	add	r3, r1
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b01      	cmp	r3, #1
 800c958:	d901      	bls.n	800c95e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c95a:	2301      	movs	r3, #1
 800c95c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c95e:	4b11      	ldr	r3, [pc, #68]	; (800c9a4 <xTaskIncrementTick+0x168>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d007      	beq.n	800c976 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c966:	2301      	movs	r3, #1
 800c968:	617b      	str	r3, [r7, #20]
 800c96a:	e004      	b.n	800c976 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c96c:	4b0e      	ldr	r3, [pc, #56]	; (800c9a8 <xTaskIncrementTick+0x16c>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	3301      	adds	r3, #1
 800c972:	4a0d      	ldr	r2, [pc, #52]	; (800c9a8 <xTaskIncrementTick+0x16c>)
 800c974:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c976:	697b      	ldr	r3, [r7, #20]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3718      	adds	r7, #24
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	240004a4 	.word	0x240004a4
 800c984:	24000480 	.word	0x24000480
 800c988:	24000434 	.word	0x24000434
 800c98c:	24000438 	.word	0x24000438
 800c990:	24000494 	.word	0x24000494
 800c994:	2400049c 	.word	0x2400049c
 800c998:	24000484 	.word	0x24000484
 800c99c:	24000380 	.word	0x24000380
 800c9a0:	2400037c 	.word	0x2400037c
 800c9a4:	24000490 	.word	0x24000490
 800c9a8:	2400048c 	.word	0x2400048c

0800c9ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b087      	sub	sp, #28
 800c9b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c9b2:	4b29      	ldr	r3, [pc, #164]	; (800ca58 <vTaskSwitchContext+0xac>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d003      	beq.n	800c9c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c9ba:	4b28      	ldr	r3, [pc, #160]	; (800ca5c <vTaskSwitchContext+0xb0>)
 800c9bc:	2201      	movs	r2, #1
 800c9be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c9c0:	e044      	b.n	800ca4c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c9c2:	4b26      	ldr	r3, [pc, #152]	; (800ca5c <vTaskSwitchContext+0xb0>)
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9c8:	4b25      	ldr	r3, [pc, #148]	; (800ca60 <vTaskSwitchContext+0xb4>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	fab3 f383 	clz	r3, r3
 800c9d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c9d6:	7afb      	ldrb	r3, [r7, #11]
 800c9d8:	f1c3 031f 	rsb	r3, r3, #31
 800c9dc:	617b      	str	r3, [r7, #20]
 800c9de:	4921      	ldr	r1, [pc, #132]	; (800ca64 <vTaskSwitchContext+0xb8>)
 800c9e0:	697a      	ldr	r2, [r7, #20]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	4413      	add	r3, r2
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	440b      	add	r3, r1
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d10a      	bne.n	800ca08 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f6:	f383 8811 	msr	BASEPRI, r3
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	607b      	str	r3, [r7, #4]
}
 800ca04:	bf00      	nop
 800ca06:	e7fe      	b.n	800ca06 <vTaskSwitchContext+0x5a>
 800ca08:	697a      	ldr	r2, [r7, #20]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4413      	add	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4a14      	ldr	r2, [pc, #80]	; (800ca64 <vTaskSwitchContext+0xb8>)
 800ca14:	4413      	add	r3, r2
 800ca16:	613b      	str	r3, [r7, #16]
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	685a      	ldr	r2, [r3, #4]
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	605a      	str	r2, [r3, #4]
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	685a      	ldr	r2, [r3, #4]
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	3308      	adds	r3, #8
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d104      	bne.n	800ca38 <vTaskSwitchContext+0x8c>
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	685a      	ldr	r2, [r3, #4]
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	605a      	str	r2, [r3, #4]
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	4a0a      	ldr	r2, [pc, #40]	; (800ca68 <vTaskSwitchContext+0xbc>)
 800ca40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ca42:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <vTaskSwitchContext+0xbc>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	334c      	adds	r3, #76	; 0x4c
 800ca48:	4a08      	ldr	r2, [pc, #32]	; (800ca6c <vTaskSwitchContext+0xc0>)
 800ca4a:	6013      	str	r3, [r2, #0]
}
 800ca4c:	bf00      	nop
 800ca4e:	371c      	adds	r7, #28
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr
 800ca58:	240004a4 	.word	0x240004a4
 800ca5c:	24000490 	.word	0x24000490
 800ca60:	24000484 	.word	0x24000484
 800ca64:	24000380 	.word	0x24000380
 800ca68:	2400037c 	.word	0x2400037c
 800ca6c:	2400003c 	.word	0x2400003c

0800ca70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10a      	bne.n	800ca96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ca80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	60fb      	str	r3, [r7, #12]
}
 800ca92:	bf00      	nop
 800ca94:	e7fe      	b.n	800ca94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca96:	4b07      	ldr	r3, [pc, #28]	; (800cab4 <vTaskPlaceOnEventList+0x44>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	3318      	adds	r3, #24
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7fe fc15 	bl	800b2ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800caa4:	2101      	movs	r1, #1
 800caa6:	6838      	ldr	r0, [r7, #0]
 800caa8:	f000 fb82 	bl	800d1b0 <prvAddCurrentTaskToDelayedList>
}
 800caac:	bf00      	nop
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	2400037c 	.word	0x2400037c

0800cab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b086      	sub	sp, #24
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d10a      	bne.n	800cae4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	60fb      	str	r3, [r7, #12]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	3318      	adds	r3, #24
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fe fc29 	bl	800b340 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caee:	4b1d      	ldr	r3, [pc, #116]	; (800cb64 <xTaskRemoveFromEventList+0xac>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d11c      	bne.n	800cb30 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	3304      	adds	r3, #4
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fe fc20 	bl	800b340 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb04:	2201      	movs	r2, #1
 800cb06:	409a      	lsls	r2, r3
 800cb08:	4b17      	ldr	r3, [pc, #92]	; (800cb68 <xTaskRemoveFromEventList+0xb0>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	4a16      	ldr	r2, [pc, #88]	; (800cb68 <xTaskRemoveFromEventList+0xb0>)
 800cb10:	6013      	str	r3, [r2, #0]
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb16:	4613      	mov	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4413      	add	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	4a13      	ldr	r2, [pc, #76]	; (800cb6c <xTaskRemoveFromEventList+0xb4>)
 800cb20:	441a      	add	r2, r3
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	3304      	adds	r3, #4
 800cb26:	4619      	mov	r1, r3
 800cb28:	4610      	mov	r0, r2
 800cb2a:	f7fe fbac 	bl	800b286 <vListInsertEnd>
 800cb2e:	e005      	b.n	800cb3c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	3318      	adds	r3, #24
 800cb34:	4619      	mov	r1, r3
 800cb36:	480e      	ldr	r0, [pc, #56]	; (800cb70 <xTaskRemoveFromEventList+0xb8>)
 800cb38:	f7fe fba5 	bl	800b286 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb40:	4b0c      	ldr	r3, [pc, #48]	; (800cb74 <xTaskRemoveFromEventList+0xbc>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d905      	bls.n	800cb56 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cb4e:	4b0a      	ldr	r3, [pc, #40]	; (800cb78 <xTaskRemoveFromEventList+0xc0>)
 800cb50:	2201      	movs	r2, #1
 800cb52:	601a      	str	r2, [r3, #0]
 800cb54:	e001      	b.n	800cb5a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cb56:	2300      	movs	r3, #0
 800cb58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cb5a:	697b      	ldr	r3, [r7, #20]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3718      	adds	r7, #24
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	240004a4 	.word	0x240004a4
 800cb68:	24000484 	.word	0x24000484
 800cb6c:	24000380 	.word	0x24000380
 800cb70:	2400043c 	.word	0x2400043c
 800cb74:	2400037c 	.word	0x2400037c
 800cb78:	24000490 	.word	0x24000490

0800cb7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb84:	4b06      	ldr	r3, [pc, #24]	; (800cba0 <vTaskInternalSetTimeOutState+0x24>)
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cb8c:	4b05      	ldr	r3, [pc, #20]	; (800cba4 <vTaskInternalSetTimeOutState+0x28>)
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	605a      	str	r2, [r3, #4]
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	24000494 	.word	0x24000494
 800cba4:	24000480 	.word	0x24000480

0800cba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b088      	sub	sp, #32
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d10a      	bne.n	800cbce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbc:	f383 8811 	msr	BASEPRI, r3
 800cbc0:	f3bf 8f6f 	isb	sy
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	613b      	str	r3, [r7, #16]
}
 800cbca:	bf00      	nop
 800cbcc:	e7fe      	b.n	800cbcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10a      	bne.n	800cbea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	60fb      	str	r3, [r7, #12]
}
 800cbe6:	bf00      	nop
 800cbe8:	e7fe      	b.n	800cbe8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cbea:	f000 fc73 	bl	800d4d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cbee:	4b1d      	ldr	r3, [pc, #116]	; (800cc64 <xTaskCheckForTimeOut+0xbc>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	69ba      	ldr	r2, [r7, #24]
 800cbfa:	1ad3      	subs	r3, r2, r3
 800cbfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc06:	d102      	bne.n	800cc0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	61fb      	str	r3, [r7, #28]
 800cc0c:	e023      	b.n	800cc56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	4b15      	ldr	r3, [pc, #84]	; (800cc68 <xTaskCheckForTimeOut+0xc0>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d007      	beq.n	800cc2a <xTaskCheckForTimeOut+0x82>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	69ba      	ldr	r2, [r7, #24]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d302      	bcc.n	800cc2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cc24:	2301      	movs	r3, #1
 800cc26:	61fb      	str	r3, [r7, #28]
 800cc28:	e015      	b.n	800cc56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d20b      	bcs.n	800cc4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	1ad2      	subs	r2, r2, r3
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7ff ff9b 	bl	800cb7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc46:	2300      	movs	r3, #0
 800cc48:	61fb      	str	r3, [r7, #28]
 800cc4a:	e004      	b.n	800cc56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc52:	2301      	movs	r3, #1
 800cc54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc56:	f000 fc6d 	bl	800d534 <vPortExitCritical>

	return xReturn;
 800cc5a:	69fb      	ldr	r3, [r7, #28]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3720      	adds	r7, #32
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	24000480 	.word	0x24000480
 800cc68:	24000494 	.word	0x24000494

0800cc6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc70:	4b03      	ldr	r3, [pc, #12]	; (800cc80 <vTaskMissedYield+0x14>)
 800cc72:	2201      	movs	r2, #1
 800cc74:	601a      	str	r2, [r3, #0]
}
 800cc76:	bf00      	nop
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr
 800cc80:	24000490 	.word	0x24000490

0800cc84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cc8c:	f000 f852 	bl	800cd34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cc90:	4b06      	ldr	r3, [pc, #24]	; (800ccac <prvIdleTask+0x28>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d9f9      	bls.n	800cc8c <prvIdleTask+0x8>
			{
				taskYIELD();
 800cc98:	4b05      	ldr	r3, [pc, #20]	; (800ccb0 <prvIdleTask+0x2c>)
 800cc9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cca8:	e7f0      	b.n	800cc8c <prvIdleTask+0x8>
 800ccaa:	bf00      	nop
 800ccac:	24000380 	.word	0x24000380
 800ccb0:	e000ed04 	.word	0xe000ed04

0800ccb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccba:	2300      	movs	r3, #0
 800ccbc:	607b      	str	r3, [r7, #4]
 800ccbe:	e00c      	b.n	800ccda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	4a12      	ldr	r2, [pc, #72]	; (800cd14 <prvInitialiseTaskLists+0x60>)
 800cccc:	4413      	add	r3, r2
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fe faac 	bl	800b22c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	607b      	str	r3, [r7, #4]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b06      	cmp	r3, #6
 800ccde:	d9ef      	bls.n	800ccc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cce0:	480d      	ldr	r0, [pc, #52]	; (800cd18 <prvInitialiseTaskLists+0x64>)
 800cce2:	f7fe faa3 	bl	800b22c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cce6:	480d      	ldr	r0, [pc, #52]	; (800cd1c <prvInitialiseTaskLists+0x68>)
 800cce8:	f7fe faa0 	bl	800b22c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ccec:	480c      	ldr	r0, [pc, #48]	; (800cd20 <prvInitialiseTaskLists+0x6c>)
 800ccee:	f7fe fa9d 	bl	800b22c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ccf2:	480c      	ldr	r0, [pc, #48]	; (800cd24 <prvInitialiseTaskLists+0x70>)
 800ccf4:	f7fe fa9a 	bl	800b22c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ccf8:	480b      	ldr	r0, [pc, #44]	; (800cd28 <prvInitialiseTaskLists+0x74>)
 800ccfa:	f7fe fa97 	bl	800b22c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ccfe:	4b0b      	ldr	r3, [pc, #44]	; (800cd2c <prvInitialiseTaskLists+0x78>)
 800cd00:	4a05      	ldr	r2, [pc, #20]	; (800cd18 <prvInitialiseTaskLists+0x64>)
 800cd02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cd04:	4b0a      	ldr	r3, [pc, #40]	; (800cd30 <prvInitialiseTaskLists+0x7c>)
 800cd06:	4a05      	ldr	r2, [pc, #20]	; (800cd1c <prvInitialiseTaskLists+0x68>)
 800cd08:	601a      	str	r2, [r3, #0]
}
 800cd0a:	bf00      	nop
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	24000380 	.word	0x24000380
 800cd18:	2400040c 	.word	0x2400040c
 800cd1c:	24000420 	.word	0x24000420
 800cd20:	2400043c 	.word	0x2400043c
 800cd24:	24000450 	.word	0x24000450
 800cd28:	24000468 	.word	0x24000468
 800cd2c:	24000434 	.word	0x24000434
 800cd30:	24000438 	.word	0x24000438

0800cd34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd3a:	e019      	b.n	800cd70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd3c:	f000 fbca 	bl	800d4d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd40:	4b10      	ldr	r3, [pc, #64]	; (800cd84 <prvCheckTasksWaitingTermination+0x50>)
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7fe faf7 	bl	800b340 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd52:	4b0d      	ldr	r3, [pc, #52]	; (800cd88 <prvCheckTasksWaitingTermination+0x54>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	3b01      	subs	r3, #1
 800cd58:	4a0b      	ldr	r2, [pc, #44]	; (800cd88 <prvCheckTasksWaitingTermination+0x54>)
 800cd5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd5c:	4b0b      	ldr	r3, [pc, #44]	; (800cd8c <prvCheckTasksWaitingTermination+0x58>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	3b01      	subs	r3, #1
 800cd62:	4a0a      	ldr	r2, [pc, #40]	; (800cd8c <prvCheckTasksWaitingTermination+0x58>)
 800cd64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd66:	f000 fbe5 	bl	800d534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 f810 	bl	800cd90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd70:	4b06      	ldr	r3, [pc, #24]	; (800cd8c <prvCheckTasksWaitingTermination+0x58>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1e1      	bne.n	800cd3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd78:	bf00      	nop
 800cd7a:	bf00      	nop
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	24000450 	.word	0x24000450
 800cd88:	2400047c 	.word	0x2400047c
 800cd8c:	24000464 	.word	0x24000464

0800cd90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	334c      	adds	r3, #76	; 0x4c
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f00c f9af 	bl	8019100 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d108      	bne.n	800cdbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f000 fd7d 	bl	800d8b0 <vPortFree>
				vPortFree( pxTCB );
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 fd7a 	bl	800d8b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cdbc:	e018      	b.n	800cdf0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d103      	bne.n	800cdd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 fd71 	bl	800d8b0 <vPortFree>
	}
 800cdce:	e00f      	b.n	800cdf0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	d00a      	beq.n	800cdf0 <prvDeleteTCB+0x60>
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	60fb      	str	r3, [r7, #12]
}
 800cdec:	bf00      	nop
 800cdee:	e7fe      	b.n	800cdee <prvDeleteTCB+0x5e>
	}
 800cdf0:	bf00      	nop
 800cdf2:	3710      	adds	r7, #16
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdfe:	4b0c      	ldr	r3, [pc, #48]	; (800ce30 <prvResetNextTaskUnblockTime+0x38>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d104      	bne.n	800ce12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce08:	4b0a      	ldr	r3, [pc, #40]	; (800ce34 <prvResetNextTaskUnblockTime+0x3c>)
 800ce0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ce10:	e008      	b.n	800ce24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce12:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <prvResetNextTaskUnblockTime+0x38>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	4a04      	ldr	r2, [pc, #16]	; (800ce34 <prvResetNextTaskUnblockTime+0x3c>)
 800ce22:	6013      	str	r3, [r2, #0]
}
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr
 800ce30:	24000434 	.word	0x24000434
 800ce34:	2400049c 	.word	0x2400049c

0800ce38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce3e:	4b0b      	ldr	r3, [pc, #44]	; (800ce6c <xTaskGetSchedulerState+0x34>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d102      	bne.n	800ce4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce46:	2301      	movs	r3, #1
 800ce48:	607b      	str	r3, [r7, #4]
 800ce4a:	e008      	b.n	800ce5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce4c:	4b08      	ldr	r3, [pc, #32]	; (800ce70 <xTaskGetSchedulerState+0x38>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d102      	bne.n	800ce5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce54:	2302      	movs	r3, #2
 800ce56:	607b      	str	r3, [r7, #4]
 800ce58:	e001      	b.n	800ce5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce5e:	687b      	ldr	r3, [r7, #4]
	}
 800ce60:	4618      	mov	r0, r3
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	24000488 	.word	0x24000488
 800ce70:	240004a4 	.word	0x240004a4

0800ce74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ce80:	2300      	movs	r3, #0
 800ce82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d05e      	beq.n	800cf48 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce8e:	4b31      	ldr	r3, [pc, #196]	; (800cf54 <xTaskPriorityInherit+0xe0>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d24e      	bcs.n	800cf36 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	699b      	ldr	r3, [r3, #24]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	db06      	blt.n	800ceae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cea0:	4b2c      	ldr	r3, [pc, #176]	; (800cf54 <xTaskPriorityInherit+0xe0>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea6:	f1c3 0207 	rsb	r2, r3, #7
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	6959      	ldr	r1, [r3, #20]
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4413      	add	r3, r2
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	4a26      	ldr	r2, [pc, #152]	; (800cf58 <xTaskPriorityInherit+0xe4>)
 800cec0:	4413      	add	r3, r2
 800cec2:	4299      	cmp	r1, r3
 800cec4:	d12f      	bne.n	800cf26 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	3304      	adds	r3, #4
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7fe fa38 	bl	800b340 <uxListRemove>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10a      	bne.n	800ceec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceda:	2201      	movs	r2, #1
 800cedc:	fa02 f303 	lsl.w	r3, r2, r3
 800cee0:	43da      	mvns	r2, r3
 800cee2:	4b1e      	ldr	r3, [pc, #120]	; (800cf5c <xTaskPriorityInherit+0xe8>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4013      	ands	r3, r2
 800cee8:	4a1c      	ldr	r2, [pc, #112]	; (800cf5c <xTaskPriorityInherit+0xe8>)
 800ceea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ceec:	4b19      	ldr	r3, [pc, #100]	; (800cf54 <xTaskPriorityInherit+0xe0>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cefa:	2201      	movs	r2, #1
 800cefc:	409a      	lsls	r2, r3
 800cefe:	4b17      	ldr	r3, [pc, #92]	; (800cf5c <xTaskPriorityInherit+0xe8>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4313      	orrs	r3, r2
 800cf04:	4a15      	ldr	r2, [pc, #84]	; (800cf5c <xTaskPriorityInherit+0xe8>)
 800cf06:	6013      	str	r3, [r2, #0]
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	4413      	add	r3, r2
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	4a10      	ldr	r2, [pc, #64]	; (800cf58 <xTaskPriorityInherit+0xe4>)
 800cf16:	441a      	add	r2, r3
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	4610      	mov	r0, r2
 800cf20:	f7fe f9b1 	bl	800b286 <vListInsertEnd>
 800cf24:	e004      	b.n	800cf30 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf26:	4b0b      	ldr	r3, [pc, #44]	; (800cf54 <xTaskPriorityInherit+0xe0>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cf30:	2301      	movs	r3, #1
 800cf32:	60fb      	str	r3, [r7, #12]
 800cf34:	e008      	b.n	800cf48 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf3a:	4b06      	ldr	r3, [pc, #24]	; (800cf54 <xTaskPriorityInherit+0xe0>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d201      	bcs.n	800cf48 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cf44:	2301      	movs	r3, #1
 800cf46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf48:	68fb      	ldr	r3, [r7, #12]
	}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	2400037c 	.word	0x2400037c
 800cf58:	24000380 	.word	0x24000380
 800cf5c:	24000484 	.word	0x24000484

0800cf60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d06e      	beq.n	800d054 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf76:	4b3a      	ldr	r3, [pc, #232]	; (800d060 <xTaskPriorityDisinherit+0x100>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	693a      	ldr	r2, [r7, #16]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d00a      	beq.n	800cf96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	60fb      	str	r3, [r7, #12]
}
 800cf92:	bf00      	nop
 800cf94:	e7fe      	b.n	800cf94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d10a      	bne.n	800cfb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	60bb      	str	r3, [r7, #8]
}
 800cfb0:	bf00      	nop
 800cfb2:	e7fe      	b.n	800cfb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfb8:	1e5a      	subs	r2, r3, #1
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d044      	beq.n	800d054 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d140      	bne.n	800d054 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	3304      	adds	r3, #4
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fe f9b2 	bl	800b340 <uxListRemove>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d115      	bne.n	800d00e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfe6:	491f      	ldr	r1, [pc, #124]	; (800d064 <xTaskPriorityDisinherit+0x104>)
 800cfe8:	4613      	mov	r3, r2
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	4413      	add	r3, r2
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	440b      	add	r3, r1
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10a      	bne.n	800d00e <xTaskPriorityDisinherit+0xae>
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffc:	2201      	movs	r2, #1
 800cffe:	fa02 f303 	lsl.w	r3, r2, r3
 800d002:	43da      	mvns	r2, r3
 800d004:	4b18      	ldr	r3, [pc, #96]	; (800d068 <xTaskPriorityDisinherit+0x108>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4013      	ands	r3, r2
 800d00a:	4a17      	ldr	r2, [pc, #92]	; (800d068 <xTaskPriorityDisinherit+0x108>)
 800d00c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01a:	f1c3 0207 	rsb	r2, r3, #7
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d026:	2201      	movs	r2, #1
 800d028:	409a      	lsls	r2, r3
 800d02a:	4b0f      	ldr	r3, [pc, #60]	; (800d068 <xTaskPriorityDisinherit+0x108>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4313      	orrs	r3, r2
 800d030:	4a0d      	ldr	r2, [pc, #52]	; (800d068 <xTaskPriorityDisinherit+0x108>)
 800d032:	6013      	str	r3, [r2, #0]
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d038:	4613      	mov	r3, r2
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	4413      	add	r3, r2
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	4a08      	ldr	r2, [pc, #32]	; (800d064 <xTaskPriorityDisinherit+0x104>)
 800d042:	441a      	add	r2, r3
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	3304      	adds	r3, #4
 800d048:	4619      	mov	r1, r3
 800d04a:	4610      	mov	r0, r2
 800d04c:	f7fe f91b 	bl	800b286 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d050:	2301      	movs	r3, #1
 800d052:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d054:	697b      	ldr	r3, [r7, #20]
	}
 800d056:	4618      	mov	r0, r3
 800d058:	3718      	adds	r7, #24
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	2400037c 	.word	0x2400037c
 800d064:	24000380 	.word	0x24000380
 800d068:	24000484 	.word	0x24000484

0800d06c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b088      	sub	sp, #32
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d07a:	2301      	movs	r3, #1
 800d07c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d077      	beq.n	800d174 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d10a      	bne.n	800d0a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d090:	f383 8811 	msr	BASEPRI, r3
 800d094:	f3bf 8f6f 	isb	sy
 800d098:	f3bf 8f4f 	dsb	sy
 800d09c:	60fb      	str	r3, [r7, #12]
}
 800d09e:	bf00      	nop
 800d0a0:	e7fe      	b.n	800d0a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0a6:	683a      	ldr	r2, [r7, #0]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d902      	bls.n	800d0b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	61fb      	str	r3, [r7, #28]
 800d0b0:	e002      	b.n	800d0b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0bc:	69fa      	ldr	r2, [r7, #28]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d058      	beq.n	800d174 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d153      	bne.n	800d174 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d0cc:	4b2b      	ldr	r3, [pc, #172]	; (800d17c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	69ba      	ldr	r2, [r7, #24]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d10a      	bne.n	800d0ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0da:	f383 8811 	msr	BASEPRI, r3
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f3bf 8f4f 	dsb	sy
 800d0e6:	60bb      	str	r3, [r7, #8]
}
 800d0e8:	bf00      	nop
 800d0ea:	e7fe      	b.n	800d0ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d0f2:	69bb      	ldr	r3, [r7, #24]
 800d0f4:	69fa      	ldr	r2, [r7, #28]
 800d0f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	699b      	ldr	r3, [r3, #24]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	db04      	blt.n	800d10a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	f1c3 0207 	rsb	r2, r3, #7
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	6959      	ldr	r1, [r3, #20]
 800d10e:	693a      	ldr	r2, [r7, #16]
 800d110:	4613      	mov	r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	4413      	add	r3, r2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	4a19      	ldr	r2, [pc, #100]	; (800d180 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d11a:	4413      	add	r3, r2
 800d11c:	4299      	cmp	r1, r3
 800d11e:	d129      	bne.n	800d174 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	3304      	adds	r3, #4
 800d124:	4618      	mov	r0, r3
 800d126:	f7fe f90b 	bl	800b340 <uxListRemove>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d10a      	bne.n	800d146 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d134:	2201      	movs	r2, #1
 800d136:	fa02 f303 	lsl.w	r3, r2, r3
 800d13a:	43da      	mvns	r2, r3
 800d13c:	4b11      	ldr	r3, [pc, #68]	; (800d184 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4013      	ands	r3, r2
 800d142:	4a10      	ldr	r2, [pc, #64]	; (800d184 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d144:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14a:	2201      	movs	r2, #1
 800d14c:	409a      	lsls	r2, r3
 800d14e:	4b0d      	ldr	r3, [pc, #52]	; (800d184 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4313      	orrs	r3, r2
 800d154:	4a0b      	ldr	r2, [pc, #44]	; (800d184 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d156:	6013      	str	r3, [r2, #0]
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d15c:	4613      	mov	r3, r2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	4413      	add	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4a06      	ldr	r2, [pc, #24]	; (800d180 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d166:	441a      	add	r2, r3
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	3304      	adds	r3, #4
 800d16c:	4619      	mov	r1, r3
 800d16e:	4610      	mov	r0, r2
 800d170:	f7fe f889 	bl	800b286 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d174:	bf00      	nop
 800d176:	3720      	adds	r7, #32
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	2400037c 	.word	0x2400037c
 800d180:	24000380 	.word	0x24000380
 800d184:	24000484 	.word	0x24000484

0800d188 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d188:	b480      	push	{r7}
 800d18a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d18c:	4b07      	ldr	r3, [pc, #28]	; (800d1ac <pvTaskIncrementMutexHeldCount+0x24>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d004      	beq.n	800d19e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d194:	4b05      	ldr	r3, [pc, #20]	; (800d1ac <pvTaskIncrementMutexHeldCount+0x24>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d19a:	3201      	adds	r2, #1
 800d19c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d19e:	4b03      	ldr	r3, [pc, #12]	; (800d1ac <pvTaskIncrementMutexHeldCount+0x24>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
	}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr
 800d1ac:	2400037c 	.word	0x2400037c

0800d1b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d1ba:	4b29      	ldr	r3, [pc, #164]	; (800d260 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1c0:	4b28      	ldr	r3, [pc, #160]	; (800d264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3304      	adds	r3, #4
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fe f8ba 	bl	800b340 <uxListRemove>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10b      	bne.n	800d1ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d1d2:	4b24      	ldr	r3, [pc, #144]	; (800d264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d8:	2201      	movs	r2, #1
 800d1da:	fa02 f303 	lsl.w	r3, r2, r3
 800d1de:	43da      	mvns	r2, r3
 800d1e0:	4b21      	ldr	r3, [pc, #132]	; (800d268 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4013      	ands	r3, r2
 800d1e6:	4a20      	ldr	r2, [pc, #128]	; (800d268 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d1e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f0:	d10a      	bne.n	800d208 <prvAddCurrentTaskToDelayedList+0x58>
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d007      	beq.n	800d208 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1f8:	4b1a      	ldr	r3, [pc, #104]	; (800d264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	3304      	adds	r3, #4
 800d1fe:	4619      	mov	r1, r3
 800d200:	481a      	ldr	r0, [pc, #104]	; (800d26c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d202:	f7fe f840 	bl	800b286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d206:	e026      	b.n	800d256 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4413      	add	r3, r2
 800d20e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d210:	4b14      	ldr	r3, [pc, #80]	; (800d264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	68ba      	ldr	r2, [r7, #8]
 800d216:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d218:	68ba      	ldr	r2, [r7, #8]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d209      	bcs.n	800d234 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d220:	4b13      	ldr	r3, [pc, #76]	; (800d270 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	4b0f      	ldr	r3, [pc, #60]	; (800d264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	3304      	adds	r3, #4
 800d22a:	4619      	mov	r1, r3
 800d22c:	4610      	mov	r0, r2
 800d22e:	f7fe f84e 	bl	800b2ce <vListInsert>
}
 800d232:	e010      	b.n	800d256 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d234:	4b0f      	ldr	r3, [pc, #60]	; (800d274 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d236:	681a      	ldr	r2, [r3, #0]
 800d238:	4b0a      	ldr	r3, [pc, #40]	; (800d264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	3304      	adds	r3, #4
 800d23e:	4619      	mov	r1, r3
 800d240:	4610      	mov	r0, r2
 800d242:	f7fe f844 	bl	800b2ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d246:	4b0c      	ldr	r3, [pc, #48]	; (800d278 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d202      	bcs.n	800d256 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d250:	4a09      	ldr	r2, [pc, #36]	; (800d278 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	6013      	str	r3, [r2, #0]
}
 800d256:	bf00      	nop
 800d258:	3710      	adds	r7, #16
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	24000480 	.word	0x24000480
 800d264:	2400037c 	.word	0x2400037c
 800d268:	24000484 	.word	0x24000484
 800d26c:	24000468 	.word	0x24000468
 800d270:	24000438 	.word	0x24000438
 800d274:	24000434 	.word	0x24000434
 800d278:	2400049c 	.word	0x2400049c

0800d27c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	3b04      	subs	r3, #4
 800d28c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	3b04      	subs	r3, #4
 800d29a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	f023 0201 	bic.w	r2, r3, #1
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	3b04      	subs	r3, #4
 800d2aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d2ac:	4a0c      	ldr	r2, [pc, #48]	; (800d2e0 <pxPortInitialiseStack+0x64>)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	3b14      	subs	r3, #20
 800d2b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	3b04      	subs	r3, #4
 800d2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f06f 0202 	mvn.w	r2, #2
 800d2ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	3b20      	subs	r3, #32
 800d2d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3714      	adds	r7, #20
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr
 800d2e0:	0800d2e5 	.word	0x0800d2e5

0800d2e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b085      	sub	sp, #20
 800d2e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d2ee:	4b12      	ldr	r3, [pc, #72]	; (800d338 <prvTaskExitError+0x54>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f6:	d00a      	beq.n	800d30e <prvTaskExitError+0x2a>
	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	60fb      	str	r3, [r7, #12]
}
 800d30a:	bf00      	nop
 800d30c:	e7fe      	b.n	800d30c <prvTaskExitError+0x28>
	__asm volatile
 800d30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d312:	f383 8811 	msr	BASEPRI, r3
 800d316:	f3bf 8f6f 	isb	sy
 800d31a:	f3bf 8f4f 	dsb	sy
 800d31e:	60bb      	str	r3, [r7, #8]
}
 800d320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d322:	bf00      	nop
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d0fc      	beq.n	800d324 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d32a:	bf00      	nop
 800d32c:	bf00      	nop
 800d32e:	3714      	adds	r7, #20
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr
 800d338:	2400002c 	.word	0x2400002c
 800d33c:	00000000 	.word	0x00000000

0800d340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d340:	4b07      	ldr	r3, [pc, #28]	; (800d360 <pxCurrentTCBConst2>)
 800d342:	6819      	ldr	r1, [r3, #0]
 800d344:	6808      	ldr	r0, [r1, #0]
 800d346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d34a:	f380 8809 	msr	PSP, r0
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	f04f 0000 	mov.w	r0, #0
 800d356:	f380 8811 	msr	BASEPRI, r0
 800d35a:	4770      	bx	lr
 800d35c:	f3af 8000 	nop.w

0800d360 <pxCurrentTCBConst2>:
 800d360:	2400037c 	.word	0x2400037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d364:	bf00      	nop
 800d366:	bf00      	nop

0800d368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d368:	4808      	ldr	r0, [pc, #32]	; (800d38c <prvPortStartFirstTask+0x24>)
 800d36a:	6800      	ldr	r0, [r0, #0]
 800d36c:	6800      	ldr	r0, [r0, #0]
 800d36e:	f380 8808 	msr	MSP, r0
 800d372:	f04f 0000 	mov.w	r0, #0
 800d376:	f380 8814 	msr	CONTROL, r0
 800d37a:	b662      	cpsie	i
 800d37c:	b661      	cpsie	f
 800d37e:	f3bf 8f4f 	dsb	sy
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	df00      	svc	0
 800d388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d38a:	bf00      	nop
 800d38c:	e000ed08 	.word	0xe000ed08

0800d390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b086      	sub	sp, #24
 800d394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d396:	4b46      	ldr	r3, [pc, #280]	; (800d4b0 <xPortStartScheduler+0x120>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4a46      	ldr	r2, [pc, #280]	; (800d4b4 <xPortStartScheduler+0x124>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d10a      	bne.n	800d3b6 <xPortStartScheduler+0x26>
	__asm volatile
 800d3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	613b      	str	r3, [r7, #16]
}
 800d3b2:	bf00      	nop
 800d3b4:	e7fe      	b.n	800d3b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d3b6:	4b3e      	ldr	r3, [pc, #248]	; (800d4b0 <xPortStartScheduler+0x120>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4a3f      	ldr	r2, [pc, #252]	; (800d4b8 <xPortStartScheduler+0x128>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d10a      	bne.n	800d3d6 <xPortStartScheduler+0x46>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	60fb      	str	r3, [r7, #12]
}
 800d3d2:	bf00      	nop
 800d3d4:	e7fe      	b.n	800d3d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d3d6:	4b39      	ldr	r3, [pc, #228]	; (800d4bc <xPortStartScheduler+0x12c>)
 800d3d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	22ff      	movs	r2, #255	; 0xff
 800d3e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d3f0:	78fb      	ldrb	r3, [r7, #3]
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	4b31      	ldr	r3, [pc, #196]	; (800d4c0 <xPortStartScheduler+0x130>)
 800d3fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d3fe:	4b31      	ldr	r3, [pc, #196]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d400:	2207      	movs	r2, #7
 800d402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d404:	e009      	b.n	800d41a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d406:	4b2f      	ldr	r3, [pc, #188]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	3b01      	subs	r3, #1
 800d40c:	4a2d      	ldr	r2, [pc, #180]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d40e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d410:	78fb      	ldrb	r3, [r7, #3]
 800d412:	b2db      	uxtb	r3, r3
 800d414:	005b      	lsls	r3, r3, #1
 800d416:	b2db      	uxtb	r3, r3
 800d418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d41a:	78fb      	ldrb	r3, [r7, #3]
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d422:	2b80      	cmp	r3, #128	; 0x80
 800d424:	d0ef      	beq.n	800d406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d426:	4b27      	ldr	r3, [pc, #156]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f1c3 0307 	rsb	r3, r3, #7
 800d42e:	2b04      	cmp	r3, #4
 800d430:	d00a      	beq.n	800d448 <xPortStartScheduler+0xb8>
	__asm volatile
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	f383 8811 	msr	BASEPRI, r3
 800d43a:	f3bf 8f6f 	isb	sy
 800d43e:	f3bf 8f4f 	dsb	sy
 800d442:	60bb      	str	r3, [r7, #8]
}
 800d444:	bf00      	nop
 800d446:	e7fe      	b.n	800d446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d448:	4b1e      	ldr	r3, [pc, #120]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	021b      	lsls	r3, r3, #8
 800d44e:	4a1d      	ldr	r2, [pc, #116]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d452:	4b1c      	ldr	r3, [pc, #112]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d45a:	4a1a      	ldr	r2, [pc, #104]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d45c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	b2da      	uxtb	r2, r3
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d466:	4b18      	ldr	r3, [pc, #96]	; (800d4c8 <xPortStartScheduler+0x138>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a17      	ldr	r2, [pc, #92]	; (800d4c8 <xPortStartScheduler+0x138>)
 800d46c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d472:	4b15      	ldr	r3, [pc, #84]	; (800d4c8 <xPortStartScheduler+0x138>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a14      	ldr	r2, [pc, #80]	; (800d4c8 <xPortStartScheduler+0x138>)
 800d478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d47c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d47e:	f000 f8dd 	bl	800d63c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d482:	4b12      	ldr	r3, [pc, #72]	; (800d4cc <xPortStartScheduler+0x13c>)
 800d484:	2200      	movs	r2, #0
 800d486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d488:	f000 f8fc 	bl	800d684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d48c:	4b10      	ldr	r3, [pc, #64]	; (800d4d0 <xPortStartScheduler+0x140>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a0f      	ldr	r2, [pc, #60]	; (800d4d0 <xPortStartScheduler+0x140>)
 800d492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d498:	f7ff ff66 	bl	800d368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d49c:	f7ff fa86 	bl	800c9ac <vTaskSwitchContext>
	prvTaskExitError();
 800d4a0:	f7ff ff20 	bl	800d2e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d4a4:	2300      	movs	r3, #0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3718      	adds	r7, #24
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	e000ed00 	.word	0xe000ed00
 800d4b4:	410fc271 	.word	0x410fc271
 800d4b8:	410fc270 	.word	0x410fc270
 800d4bc:	e000e400 	.word	0xe000e400
 800d4c0:	240004a8 	.word	0x240004a8
 800d4c4:	240004ac 	.word	0x240004ac
 800d4c8:	e000ed20 	.word	0xe000ed20
 800d4cc:	2400002c 	.word	0x2400002c
 800d4d0:	e000ef34 	.word	0xe000ef34

0800d4d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
	__asm volatile
 800d4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4de:	f383 8811 	msr	BASEPRI, r3
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	f3bf 8f4f 	dsb	sy
 800d4ea:	607b      	str	r3, [r7, #4]
}
 800d4ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d4ee:	4b0f      	ldr	r3, [pc, #60]	; (800d52c <vPortEnterCritical+0x58>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	4a0d      	ldr	r2, [pc, #52]	; (800d52c <vPortEnterCritical+0x58>)
 800d4f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d4f8:	4b0c      	ldr	r3, [pc, #48]	; (800d52c <vPortEnterCritical+0x58>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d10f      	bne.n	800d520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d500:	4b0b      	ldr	r3, [pc, #44]	; (800d530 <vPortEnterCritical+0x5c>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	b2db      	uxtb	r3, r3
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00a      	beq.n	800d520 <vPortEnterCritical+0x4c>
	__asm volatile
 800d50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	603b      	str	r3, [r7, #0]
}
 800d51c:	bf00      	nop
 800d51e:	e7fe      	b.n	800d51e <vPortEnterCritical+0x4a>
	}
}
 800d520:	bf00      	nop
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	2400002c 	.word	0x2400002c
 800d530:	e000ed04 	.word	0xe000ed04

0800d534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d53a:	4b12      	ldr	r3, [pc, #72]	; (800d584 <vPortExitCritical+0x50>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d10a      	bne.n	800d558 <vPortExitCritical+0x24>
	__asm volatile
 800d542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	607b      	str	r3, [r7, #4]
}
 800d554:	bf00      	nop
 800d556:	e7fe      	b.n	800d556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d558:	4b0a      	ldr	r3, [pc, #40]	; (800d584 <vPortExitCritical+0x50>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3b01      	subs	r3, #1
 800d55e:	4a09      	ldr	r2, [pc, #36]	; (800d584 <vPortExitCritical+0x50>)
 800d560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d562:	4b08      	ldr	r3, [pc, #32]	; (800d584 <vPortExitCritical+0x50>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d105      	bne.n	800d576 <vPortExitCritical+0x42>
 800d56a:	2300      	movs	r3, #0
 800d56c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	f383 8811 	msr	BASEPRI, r3
}
 800d574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d576:	bf00      	nop
 800d578:	370c      	adds	r7, #12
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	2400002c 	.word	0x2400002c
	...

0800d590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d590:	f3ef 8009 	mrs	r0, PSP
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	4b15      	ldr	r3, [pc, #84]	; (800d5f0 <pxCurrentTCBConst>)
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	f01e 0f10 	tst.w	lr, #16
 800d5a0:	bf08      	it	eq
 800d5a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d5a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5aa:	6010      	str	r0, [r2, #0]
 800d5ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d5b4:	f380 8811 	msr	BASEPRI, r0
 800d5b8:	f3bf 8f4f 	dsb	sy
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f7ff f9f4 	bl	800c9ac <vTaskSwitchContext>
 800d5c4:	f04f 0000 	mov.w	r0, #0
 800d5c8:	f380 8811 	msr	BASEPRI, r0
 800d5cc:	bc09      	pop	{r0, r3}
 800d5ce:	6819      	ldr	r1, [r3, #0]
 800d5d0:	6808      	ldr	r0, [r1, #0]
 800d5d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d6:	f01e 0f10 	tst.w	lr, #16
 800d5da:	bf08      	it	eq
 800d5dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d5e0:	f380 8809 	msr	PSP, r0
 800d5e4:	f3bf 8f6f 	isb	sy
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	f3af 8000 	nop.w

0800d5f0 <pxCurrentTCBConst>:
 800d5f0:	2400037c 	.word	0x2400037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d5f4:	bf00      	nop
 800d5f6:	bf00      	nop

0800d5f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d602:	f383 8811 	msr	BASEPRI, r3
 800d606:	f3bf 8f6f 	isb	sy
 800d60a:	f3bf 8f4f 	dsb	sy
 800d60e:	607b      	str	r3, [r7, #4]
}
 800d610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d612:	f7ff f913 	bl	800c83c <xTaskIncrementTick>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d003      	beq.n	800d624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d61c:	4b06      	ldr	r3, [pc, #24]	; (800d638 <SysTick_Handler+0x40>)
 800d61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	2300      	movs	r3, #0
 800d626:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	f383 8811 	msr	BASEPRI, r3
}
 800d62e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d630:	bf00      	nop
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	e000ed04 	.word	0xe000ed04

0800d63c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d63c:	b480      	push	{r7}
 800d63e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d640:	4b0b      	ldr	r3, [pc, #44]	; (800d670 <vPortSetupTimerInterrupt+0x34>)
 800d642:	2200      	movs	r2, #0
 800d644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d646:	4b0b      	ldr	r3, [pc, #44]	; (800d674 <vPortSetupTimerInterrupt+0x38>)
 800d648:	2200      	movs	r2, #0
 800d64a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d64c:	4b0a      	ldr	r3, [pc, #40]	; (800d678 <vPortSetupTimerInterrupt+0x3c>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a0a      	ldr	r2, [pc, #40]	; (800d67c <vPortSetupTimerInterrupt+0x40>)
 800d652:	fba2 2303 	umull	r2, r3, r2, r3
 800d656:	099b      	lsrs	r3, r3, #6
 800d658:	4a09      	ldr	r2, [pc, #36]	; (800d680 <vPortSetupTimerInterrupt+0x44>)
 800d65a:	3b01      	subs	r3, #1
 800d65c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d65e:	4b04      	ldr	r3, [pc, #16]	; (800d670 <vPortSetupTimerInterrupt+0x34>)
 800d660:	2207      	movs	r2, #7
 800d662:	601a      	str	r2, [r3, #0]
}
 800d664:	bf00      	nop
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	e000e010 	.word	0xe000e010
 800d674:	e000e018 	.word	0xe000e018
 800d678:	24000008 	.word	0x24000008
 800d67c:	10624dd3 	.word	0x10624dd3
 800d680:	e000e014 	.word	0xe000e014

0800d684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d694 <vPortEnableVFP+0x10>
 800d688:	6801      	ldr	r1, [r0, #0]
 800d68a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d68e:	6001      	str	r1, [r0, #0]
 800d690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d692:	bf00      	nop
 800d694:	e000ed88 	.word	0xe000ed88

0800d698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d698:	b480      	push	{r7}
 800d69a:	b085      	sub	sp, #20
 800d69c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d69e:	f3ef 8305 	mrs	r3, IPSR
 800d6a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b0f      	cmp	r3, #15
 800d6a8:	d914      	bls.n	800d6d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6aa:	4a17      	ldr	r2, [pc, #92]	; (800d708 <vPortValidateInterruptPriority+0x70>)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6b4:	4b15      	ldr	r3, [pc, #84]	; (800d70c <vPortValidateInterruptPriority+0x74>)
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	7afa      	ldrb	r2, [r7, #11]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d20a      	bcs.n	800d6d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	607b      	str	r3, [r7, #4]
}
 800d6d0:	bf00      	nop
 800d6d2:	e7fe      	b.n	800d6d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d6d4:	4b0e      	ldr	r3, [pc, #56]	; (800d710 <vPortValidateInterruptPriority+0x78>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d6dc:	4b0d      	ldr	r3, [pc, #52]	; (800d714 <vPortValidateInterruptPriority+0x7c>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d90a      	bls.n	800d6fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e8:	f383 8811 	msr	BASEPRI, r3
 800d6ec:	f3bf 8f6f 	isb	sy
 800d6f0:	f3bf 8f4f 	dsb	sy
 800d6f4:	603b      	str	r3, [r7, #0]
}
 800d6f6:	bf00      	nop
 800d6f8:	e7fe      	b.n	800d6f8 <vPortValidateInterruptPriority+0x60>
	}
 800d6fa:	bf00      	nop
 800d6fc:	3714      	adds	r7, #20
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	e000e3f0 	.word	0xe000e3f0
 800d70c:	240004a8 	.word	0x240004a8
 800d710:	e000ed0c 	.word	0xe000ed0c
 800d714:	240004ac 	.word	0x240004ac

0800d718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b08a      	sub	sp, #40	; 0x28
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d720:	2300      	movs	r3, #0
 800d722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d724:	f7fe ffbe 	bl	800c6a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d728:	4b5b      	ldr	r3, [pc, #364]	; (800d898 <pvPortMalloc+0x180>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d730:	f000 f920 	bl	800d974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d734:	4b59      	ldr	r3, [pc, #356]	; (800d89c <pvPortMalloc+0x184>)
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4013      	ands	r3, r2
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f040 8093 	bne.w	800d868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d01d      	beq.n	800d784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d748:	2208      	movs	r2, #8
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4413      	add	r3, r2
 800d74e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f003 0307 	and.w	r3, r3, #7
 800d756:	2b00      	cmp	r3, #0
 800d758:	d014      	beq.n	800d784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f023 0307 	bic.w	r3, r3, #7
 800d760:	3308      	adds	r3, #8
 800d762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00a      	beq.n	800d784 <pvPortMalloc+0x6c>
	__asm volatile
 800d76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	617b      	str	r3, [r7, #20]
}
 800d780:	bf00      	nop
 800d782:	e7fe      	b.n	800d782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d06e      	beq.n	800d868 <pvPortMalloc+0x150>
 800d78a:	4b45      	ldr	r3, [pc, #276]	; (800d8a0 <pvPortMalloc+0x188>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	429a      	cmp	r2, r3
 800d792:	d869      	bhi.n	800d868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d794:	4b43      	ldr	r3, [pc, #268]	; (800d8a4 <pvPortMalloc+0x18c>)
 800d796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d798:	4b42      	ldr	r3, [pc, #264]	; (800d8a4 <pvPortMalloc+0x18c>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d79e:	e004      	b.n	800d7aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d903      	bls.n	800d7bc <pvPortMalloc+0xa4>
 800d7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1f1      	bne.n	800d7a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d7bc:	4b36      	ldr	r3, [pc, #216]	; (800d898 <pvPortMalloc+0x180>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d050      	beq.n	800d868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d7c6:	6a3b      	ldr	r3, [r7, #32]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	2208      	movs	r2, #8
 800d7cc:	4413      	add	r3, r2
 800d7ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	6a3b      	ldr	r3, [r7, #32]
 800d7d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7da:	685a      	ldr	r2, [r3, #4]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	1ad2      	subs	r2, r2, r3
 800d7e0:	2308      	movs	r3, #8
 800d7e2:	005b      	lsls	r3, r3, #1
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d91f      	bls.n	800d828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	f003 0307 	and.w	r3, r3, #7
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00a      	beq.n	800d810 <pvPortMalloc+0xf8>
	__asm volatile
 800d7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	613b      	str	r3, [r7, #16]
}
 800d80c:	bf00      	nop
 800d80e:	e7fe      	b.n	800d80e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d812:	685a      	ldr	r2, [r3, #4]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	1ad2      	subs	r2, r2, r3
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d822:	69b8      	ldr	r0, [r7, #24]
 800d824:	f000 f908 	bl	800da38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d828:	4b1d      	ldr	r3, [pc, #116]	; (800d8a0 <pvPortMalloc+0x188>)
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	4a1b      	ldr	r2, [pc, #108]	; (800d8a0 <pvPortMalloc+0x188>)
 800d834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d836:	4b1a      	ldr	r3, [pc, #104]	; (800d8a0 <pvPortMalloc+0x188>)
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	4b1b      	ldr	r3, [pc, #108]	; (800d8a8 <pvPortMalloc+0x190>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d203      	bcs.n	800d84a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d842:	4b17      	ldr	r3, [pc, #92]	; (800d8a0 <pvPortMalloc+0x188>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a18      	ldr	r2, [pc, #96]	; (800d8a8 <pvPortMalloc+0x190>)
 800d848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84c:	685a      	ldr	r2, [r3, #4]
 800d84e:	4b13      	ldr	r3, [pc, #76]	; (800d89c <pvPortMalloc+0x184>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	431a      	orrs	r2, r3
 800d854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	2200      	movs	r2, #0
 800d85c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d85e:	4b13      	ldr	r3, [pc, #76]	; (800d8ac <pvPortMalloc+0x194>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	3301      	adds	r3, #1
 800d864:	4a11      	ldr	r2, [pc, #68]	; (800d8ac <pvPortMalloc+0x194>)
 800d866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d868:	f7fe ff2a 	bl	800c6c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	f003 0307 	and.w	r3, r3, #7
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00a      	beq.n	800d88c <pvPortMalloc+0x174>
	__asm volatile
 800d876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87a:	f383 8811 	msr	BASEPRI, r3
 800d87e:	f3bf 8f6f 	isb	sy
 800d882:	f3bf 8f4f 	dsb	sy
 800d886:	60fb      	str	r3, [r7, #12]
}
 800d888:	bf00      	nop
 800d88a:	e7fe      	b.n	800d88a <pvPortMalloc+0x172>
	return pvReturn;
 800d88c:	69fb      	ldr	r3, [r7, #28]
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3728      	adds	r7, #40	; 0x28
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	240040b8 	.word	0x240040b8
 800d89c:	240040cc 	.word	0x240040cc
 800d8a0:	240040bc 	.word	0x240040bc
 800d8a4:	240040b0 	.word	0x240040b0
 800d8a8:	240040c0 	.word	0x240040c0
 800d8ac:	240040c4 	.word	0x240040c4

0800d8b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d04d      	beq.n	800d95e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d8c2:	2308      	movs	r3, #8
 800d8c4:	425b      	negs	r3, r3
 800d8c6:	697a      	ldr	r2, [r7, #20]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	685a      	ldr	r2, [r3, #4]
 800d8d4:	4b24      	ldr	r3, [pc, #144]	; (800d968 <vPortFree+0xb8>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4013      	ands	r3, r2
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10a      	bne.n	800d8f4 <vPortFree+0x44>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	60fb      	str	r3, [r7, #12]
}
 800d8f0:	bf00      	nop
 800d8f2:	e7fe      	b.n	800d8f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00a      	beq.n	800d912 <vPortFree+0x62>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	60bb      	str	r3, [r7, #8]
}
 800d90e:	bf00      	nop
 800d910:	e7fe      	b.n	800d910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	685a      	ldr	r2, [r3, #4]
 800d916:	4b14      	ldr	r3, [pc, #80]	; (800d968 <vPortFree+0xb8>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4013      	ands	r3, r2
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d01e      	beq.n	800d95e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d11a      	bne.n	800d95e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	685a      	ldr	r2, [r3, #4]
 800d92c:	4b0e      	ldr	r3, [pc, #56]	; (800d968 <vPortFree+0xb8>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	43db      	mvns	r3, r3
 800d932:	401a      	ands	r2, r3
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d938:	f7fe feb4 	bl	800c6a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	685a      	ldr	r2, [r3, #4]
 800d940:	4b0a      	ldr	r3, [pc, #40]	; (800d96c <vPortFree+0xbc>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4413      	add	r3, r2
 800d946:	4a09      	ldr	r2, [pc, #36]	; (800d96c <vPortFree+0xbc>)
 800d948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d94a:	6938      	ldr	r0, [r7, #16]
 800d94c:	f000 f874 	bl	800da38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d950:	4b07      	ldr	r3, [pc, #28]	; (800d970 <vPortFree+0xc0>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	3301      	adds	r3, #1
 800d956:	4a06      	ldr	r2, [pc, #24]	; (800d970 <vPortFree+0xc0>)
 800d958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d95a:	f7fe feb1 	bl	800c6c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d95e:	bf00      	nop
 800d960:	3718      	adds	r7, #24
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	240040cc 	.word	0x240040cc
 800d96c:	240040bc 	.word	0x240040bc
 800d970:	240040c8 	.word	0x240040c8

0800d974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d97a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d97e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d980:	4b27      	ldr	r3, [pc, #156]	; (800da20 <prvHeapInit+0xac>)
 800d982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f003 0307 	and.w	r3, r3, #7
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00c      	beq.n	800d9a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	3307      	adds	r3, #7
 800d992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f023 0307 	bic.w	r3, r3, #7
 800d99a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	1ad3      	subs	r3, r2, r3
 800d9a2:	4a1f      	ldr	r2, [pc, #124]	; (800da20 <prvHeapInit+0xac>)
 800d9a4:	4413      	add	r3, r2
 800d9a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9ac:	4a1d      	ldr	r2, [pc, #116]	; (800da24 <prvHeapInit+0xb0>)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9b2:	4b1c      	ldr	r3, [pc, #112]	; (800da24 <prvHeapInit+0xb0>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	4413      	add	r3, r2
 800d9be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d9c0:	2208      	movs	r2, #8
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	1a9b      	subs	r3, r3, r2
 800d9c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f023 0307 	bic.w	r3, r3, #7
 800d9ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	4a15      	ldr	r2, [pc, #84]	; (800da28 <prvHeapInit+0xb4>)
 800d9d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d9d6:	4b14      	ldr	r3, [pc, #80]	; (800da28 <prvHeapInit+0xb4>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d9de:	4b12      	ldr	r3, [pc, #72]	; (800da28 <prvHeapInit+0xb4>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	1ad2      	subs	r2, r2, r3
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d9f4:	4b0c      	ldr	r3, [pc, #48]	; (800da28 <prvHeapInit+0xb4>)
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	4a0a      	ldr	r2, [pc, #40]	; (800da2c <prvHeapInit+0xb8>)
 800da02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	4a09      	ldr	r2, [pc, #36]	; (800da30 <prvHeapInit+0xbc>)
 800da0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da0c:	4b09      	ldr	r3, [pc, #36]	; (800da34 <prvHeapInit+0xc0>)
 800da0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da12:	601a      	str	r2, [r3, #0]
}
 800da14:	bf00      	nop
 800da16:	3714      	adds	r7, #20
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr
 800da20:	240004b0 	.word	0x240004b0
 800da24:	240040b0 	.word	0x240040b0
 800da28:	240040b8 	.word	0x240040b8
 800da2c:	240040c0 	.word	0x240040c0
 800da30:	240040bc 	.word	0x240040bc
 800da34:	240040cc 	.word	0x240040cc

0800da38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da40:	4b28      	ldr	r3, [pc, #160]	; (800dae4 <prvInsertBlockIntoFreeList+0xac>)
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	e002      	b.n	800da4c <prvInsertBlockIntoFreeList+0x14>
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	60fb      	str	r3, [r7, #12]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	429a      	cmp	r2, r3
 800da54:	d8f7      	bhi.n	800da46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	68ba      	ldr	r2, [r7, #8]
 800da60:	4413      	add	r3, r2
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	429a      	cmp	r2, r3
 800da66:	d108      	bne.n	800da7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	685a      	ldr	r2, [r3, #4]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	441a      	add	r2, r3
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	68ba      	ldr	r2, [r7, #8]
 800da84:	441a      	add	r2, r3
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d118      	bne.n	800dac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	4b15      	ldr	r3, [pc, #84]	; (800dae8 <prvInsertBlockIntoFreeList+0xb0>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	429a      	cmp	r2, r3
 800da98:	d00d      	beq.n	800dab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	685a      	ldr	r2, [r3, #4]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	441a      	add	r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	601a      	str	r2, [r3, #0]
 800dab4:	e008      	b.n	800dac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dab6:	4b0c      	ldr	r3, [pc, #48]	; (800dae8 <prvInsertBlockIntoFreeList+0xb0>)
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	601a      	str	r2, [r3, #0]
 800dabe:	e003      	b.n	800dac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681a      	ldr	r2, [r3, #0]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dac8:	68fa      	ldr	r2, [r7, #12]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d002      	beq.n	800dad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dad6:	bf00      	nop
 800dad8:	3714      	adds	r7, #20
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop
 800dae4:	240040b0 	.word	0x240040b0
 800dae8:	240040b8 	.word	0x240040b8

0800daec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800daf6:	f008 fa81 	bl	8015ffc <sys_timeouts_sleeptime>
 800dafa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db02:	d10b      	bne.n	800db1c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800db04:	4813      	ldr	r0, [pc, #76]	; (800db54 <tcpip_timeouts_mbox_fetch+0x68>)
 800db06:	f00b f8a8 	bl	8018c5a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800db0a:	2200      	movs	r2, #0
 800db0c:	6839      	ldr	r1, [r7, #0]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f00b f81a 	bl	8018b48 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800db14:	480f      	ldr	r0, [pc, #60]	; (800db54 <tcpip_timeouts_mbox_fetch+0x68>)
 800db16:	f00b f891 	bl	8018c3c <sys_mutex_lock>
    return;
 800db1a:	e018      	b.n	800db4e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d102      	bne.n	800db28 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800db22:	f008 fa31 	bl	8015f88 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800db26:	e7e6      	b.n	800daf6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800db28:	480a      	ldr	r0, [pc, #40]	; (800db54 <tcpip_timeouts_mbox_fetch+0x68>)
 800db2a:	f00b f896 	bl	8018c5a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	6839      	ldr	r1, [r7, #0]
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f00b f808 	bl	8018b48 <sys_arch_mbox_fetch>
 800db38:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800db3a:	4806      	ldr	r0, [pc, #24]	; (800db54 <tcpip_timeouts_mbox_fetch+0x68>)
 800db3c:	f00b f87e 	bl	8018c3c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db46:	d102      	bne.n	800db4e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800db48:	f008 fa1e 	bl	8015f88 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800db4c:	e7d3      	b.n	800daf6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800db4e:	3710      	adds	r7, #16
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	24004798 	.word	0x24004798

0800db58 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800db60:	4810      	ldr	r0, [pc, #64]	; (800dba4 <tcpip_thread+0x4c>)
 800db62:	f00b f86b 	bl	8018c3c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800db66:	4b10      	ldr	r3, [pc, #64]	; (800dba8 <tcpip_thread+0x50>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d005      	beq.n	800db7a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800db6e:	4b0e      	ldr	r3, [pc, #56]	; (800dba8 <tcpip_thread+0x50>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4a0e      	ldr	r2, [pc, #56]	; (800dbac <tcpip_thread+0x54>)
 800db74:	6812      	ldr	r2, [r2, #0]
 800db76:	4610      	mov	r0, r2
 800db78:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800db7a:	f107 030c 	add.w	r3, r7, #12
 800db7e:	4619      	mov	r1, r3
 800db80:	480b      	ldr	r0, [pc, #44]	; (800dbb0 <tcpip_thread+0x58>)
 800db82:	f7ff ffb3 	bl	800daec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d106      	bne.n	800db9a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800db8c:	4b09      	ldr	r3, [pc, #36]	; (800dbb4 <tcpip_thread+0x5c>)
 800db8e:	2291      	movs	r2, #145	; 0x91
 800db90:	4909      	ldr	r1, [pc, #36]	; (800dbb8 <tcpip_thread+0x60>)
 800db92:	480a      	ldr	r0, [pc, #40]	; (800dbbc <tcpip_thread+0x64>)
 800db94:	f00b fa4e 	bl	8019034 <iprintf>
      continue;
 800db98:	e003      	b.n	800dba2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f000 f80f 	bl	800dbc0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dba2:	e7ea      	b.n	800db7a <tcpip_thread+0x22>
 800dba4:	24004798 	.word	0x24004798
 800dba8:	240040d0 	.word	0x240040d0
 800dbac:	240040d4 	.word	0x240040d4
 800dbb0:	240040d8 	.word	0x240040d8
 800dbb4:	0801a0e8 	.word	0x0801a0e8
 800dbb8:	0801a118 	.word	0x0801a118
 800dbbc:	0801a138 	.word	0x0801a138

0800dbc0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	2b02      	cmp	r3, #2
 800dbce:	d026      	beq.n	800dc1e <tcpip_thread_handle_msg+0x5e>
 800dbd0:	2b02      	cmp	r3, #2
 800dbd2:	dc2b      	bgt.n	800dc2c <tcpip_thread_handle_msg+0x6c>
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d002      	beq.n	800dbde <tcpip_thread_handle_msg+0x1e>
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d015      	beq.n	800dc08 <tcpip_thread_handle_msg+0x48>
 800dbdc:	e026      	b.n	800dc2c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	6850      	ldr	r0, [r2, #4]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	6892      	ldr	r2, [r2, #8]
 800dbea:	4611      	mov	r1, r2
 800dbec:	4798      	blx	r3
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d004      	beq.n	800dbfe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f001 fdc3 	bl	800f784 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dbfe:	6879      	ldr	r1, [r7, #4]
 800dc00:	2009      	movs	r0, #9
 800dc02:	f000 ff1b 	bl	800ea3c <memp_free>
      break;
 800dc06:	e018      	b.n	800dc3a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	6892      	ldr	r2, [r2, #8]
 800dc10:	4610      	mov	r0, r2
 800dc12:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800dc14:	6879      	ldr	r1, [r7, #4]
 800dc16:	2008      	movs	r0, #8
 800dc18:	f000 ff10 	bl	800ea3c <memp_free>
      break;
 800dc1c:	e00d      	b.n	800dc3a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	6892      	ldr	r2, [r2, #8]
 800dc26:	4610      	mov	r0, r2
 800dc28:	4798      	blx	r3
      break;
 800dc2a:	e006      	b.n	800dc3a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800dc2c:	4b05      	ldr	r3, [pc, #20]	; (800dc44 <tcpip_thread_handle_msg+0x84>)
 800dc2e:	22cf      	movs	r2, #207	; 0xcf
 800dc30:	4905      	ldr	r1, [pc, #20]	; (800dc48 <tcpip_thread_handle_msg+0x88>)
 800dc32:	4806      	ldr	r0, [pc, #24]	; (800dc4c <tcpip_thread_handle_msg+0x8c>)
 800dc34:	f00b f9fe 	bl	8019034 <iprintf>
      break;
 800dc38:	bf00      	nop
  }
}
 800dc3a:	bf00      	nop
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	0801a0e8 	.word	0x0801a0e8
 800dc48:	0801a118 	.word	0x0801a118
 800dc4c:	0801a138 	.word	0x0801a138

0800dc50 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b086      	sub	sp, #24
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dc5c:	481a      	ldr	r0, [pc, #104]	; (800dcc8 <tcpip_inpkt+0x78>)
 800dc5e:	f00a ffb2 	bl	8018bc6 <sys_mbox_valid>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d105      	bne.n	800dc74 <tcpip_inpkt+0x24>
 800dc68:	4b18      	ldr	r3, [pc, #96]	; (800dccc <tcpip_inpkt+0x7c>)
 800dc6a:	22fc      	movs	r2, #252	; 0xfc
 800dc6c:	4918      	ldr	r1, [pc, #96]	; (800dcd0 <tcpip_inpkt+0x80>)
 800dc6e:	4819      	ldr	r0, [pc, #100]	; (800dcd4 <tcpip_inpkt+0x84>)
 800dc70:	f00b f9e0 	bl	8019034 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800dc74:	2009      	movs	r0, #9
 800dc76:	f000 fe6b 	bl	800e950 <memp_malloc>
 800dc7a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d102      	bne.n	800dc88 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800dc82:	f04f 33ff 	mov.w	r3, #4294967295
 800dc86:	e01a      	b.n	800dcbe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	68ba      	ldr	r2, [r7, #8]
 800dc98:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dca0:	6979      	ldr	r1, [r7, #20]
 800dca2:	4809      	ldr	r0, [pc, #36]	; (800dcc8 <tcpip_inpkt+0x78>)
 800dca4:	f00a ff36 	bl	8018b14 <sys_mbox_trypost>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d006      	beq.n	800dcbc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dcae:	6979      	ldr	r1, [r7, #20]
 800dcb0:	2009      	movs	r0, #9
 800dcb2:	f000 fec3 	bl	800ea3c <memp_free>
    return ERR_MEM;
 800dcb6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcba:	e000      	b.n	800dcbe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800dcbc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3718      	adds	r7, #24
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	240040d8 	.word	0x240040d8
 800dccc:	0801a0e8 	.word	0x0801a0e8
 800dcd0:	0801a160 	.word	0x0801a160
 800dcd4:	0801a138 	.word	0x0801a138

0800dcd8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dce8:	f003 0318 	and.w	r3, r3, #24
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d006      	beq.n	800dcfe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800dcf0:	4a08      	ldr	r2, [pc, #32]	; (800dd14 <tcpip_input+0x3c>)
 800dcf2:	6839      	ldr	r1, [r7, #0]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7ff ffab 	bl	800dc50 <tcpip_inpkt>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	e005      	b.n	800dd0a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800dcfe:	4a06      	ldr	r2, [pc, #24]	; (800dd18 <tcpip_input+0x40>)
 800dd00:	6839      	ldr	r1, [r7, #0]
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f7ff ffa4 	bl	800dc50 <tcpip_inpkt>
 800dd08:	4603      	mov	r3, r0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	08018925 	.word	0x08018925
 800dd18:	08017715 	.word	0x08017715

0800dd1c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dd26:	4819      	ldr	r0, [pc, #100]	; (800dd8c <tcpip_try_callback+0x70>)
 800dd28:	f00a ff4d 	bl	8018bc6 <sys_mbox_valid>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d106      	bne.n	800dd40 <tcpip_try_callback+0x24>
 800dd32:	4b17      	ldr	r3, [pc, #92]	; (800dd90 <tcpip_try_callback+0x74>)
 800dd34:	f240 125d 	movw	r2, #349	; 0x15d
 800dd38:	4916      	ldr	r1, [pc, #88]	; (800dd94 <tcpip_try_callback+0x78>)
 800dd3a:	4817      	ldr	r0, [pc, #92]	; (800dd98 <tcpip_try_callback+0x7c>)
 800dd3c:	f00b f97a 	bl	8019034 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800dd40:	2008      	movs	r0, #8
 800dd42:	f000 fe05 	bl	800e950 <memp_malloc>
 800dd46:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d102      	bne.n	800dd54 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800dd4e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd52:	e017      	b.n	800dd84 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2201      	movs	r2, #1
 800dd58:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	683a      	ldr	r2, [r7, #0]
 800dd64:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dd66:	68f9      	ldr	r1, [r7, #12]
 800dd68:	4808      	ldr	r0, [pc, #32]	; (800dd8c <tcpip_try_callback+0x70>)
 800dd6a:	f00a fed3 	bl	8018b14 <sys_mbox_trypost>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d006      	beq.n	800dd82 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800dd74:	68f9      	ldr	r1, [r7, #12]
 800dd76:	2008      	movs	r0, #8
 800dd78:	f000 fe60 	bl	800ea3c <memp_free>
    return ERR_MEM;
 800dd7c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd80:	e000      	b.n	800dd84 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3710      	adds	r7, #16
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	240040d8 	.word	0x240040d8
 800dd90:	0801a0e8 	.word	0x0801a0e8
 800dd94:	0801a160 	.word	0x0801a160
 800dd98:	0801a138 	.word	0x0801a138

0800dd9c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af02      	add	r7, sp, #8
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800dda6:	f000 f92d 	bl	800e004 <lwip_init>

  tcpip_init_done = initfunc;
 800ddaa:	4a17      	ldr	r2, [pc, #92]	; (800de08 <tcpip_init+0x6c>)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ddb0:	4a16      	ldr	r2, [pc, #88]	; (800de0c <tcpip_init+0x70>)
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ddb6:	2106      	movs	r1, #6
 800ddb8:	4815      	ldr	r0, [pc, #84]	; (800de10 <tcpip_init+0x74>)
 800ddba:	f00a fe89 	bl	8018ad0 <sys_mbox_new>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d006      	beq.n	800ddd2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ddc4:	4b13      	ldr	r3, [pc, #76]	; (800de14 <tcpip_init+0x78>)
 800ddc6:	f240 2261 	movw	r2, #609	; 0x261
 800ddca:	4913      	ldr	r1, [pc, #76]	; (800de18 <tcpip_init+0x7c>)
 800ddcc:	4813      	ldr	r0, [pc, #76]	; (800de1c <tcpip_init+0x80>)
 800ddce:	f00b f931 	bl	8019034 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ddd2:	4813      	ldr	r0, [pc, #76]	; (800de20 <tcpip_init+0x84>)
 800ddd4:	f00a ff16 	bl	8018c04 <sys_mutex_new>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d006      	beq.n	800ddec <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ddde:	4b0d      	ldr	r3, [pc, #52]	; (800de14 <tcpip_init+0x78>)
 800dde0:	f240 2265 	movw	r2, #613	; 0x265
 800dde4:	490f      	ldr	r1, [pc, #60]	; (800de24 <tcpip_init+0x88>)
 800dde6:	480d      	ldr	r0, [pc, #52]	; (800de1c <tcpip_init+0x80>)
 800dde8:	f00b f924 	bl	8019034 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ddec:	2300      	movs	r3, #0
 800ddee:	9300      	str	r3, [sp, #0]
 800ddf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	490c      	ldr	r1, [pc, #48]	; (800de28 <tcpip_init+0x8c>)
 800ddf8:	480c      	ldr	r0, [pc, #48]	; (800de2c <tcpip_init+0x90>)
 800ddfa:	f00a ff3b 	bl	8018c74 <sys_thread_new>
}
 800ddfe:	bf00      	nop
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	240040d0 	.word	0x240040d0
 800de0c:	240040d4 	.word	0x240040d4
 800de10:	240040d8 	.word	0x240040d8
 800de14:	0801a0e8 	.word	0x0801a0e8
 800de18:	0801a170 	.word	0x0801a170
 800de1c:	0801a138 	.word	0x0801a138
 800de20:	24004798 	.word	0x24004798
 800de24:	0801a194 	.word	0x0801a194
 800de28:	0800db59 	.word	0x0800db59
 800de2c:	0801a1b8 	.word	0x0801a1b8

0800de30 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
 800de36:	4603      	mov	r3, r0
 800de38:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800de3a:	88fb      	ldrh	r3, [r7, #6]
 800de3c:	021b      	lsls	r3, r3, #8
 800de3e:	b21a      	sxth	r2, r3
 800de40:	88fb      	ldrh	r3, [r7, #6]
 800de42:	0a1b      	lsrs	r3, r3, #8
 800de44:	b29b      	uxth	r3, r3
 800de46:	b21b      	sxth	r3, r3
 800de48:	4313      	orrs	r3, r2
 800de4a:	b21b      	sxth	r3, r3
 800de4c:	b29b      	uxth	r3, r3
}
 800de4e:	4618      	mov	r0, r3
 800de50:	370c      	adds	r7, #12
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr

0800de5a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800de5a:	b480      	push	{r7}
 800de5c:	b083      	sub	sp, #12
 800de5e:	af00      	add	r7, sp, #0
 800de60:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	061a      	lsls	r2, r3, #24
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	021b      	lsls	r3, r3, #8
 800de6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800de6e:	431a      	orrs	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	0a1b      	lsrs	r3, r3, #8
 800de74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800de78:	431a      	orrs	r2, r3
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	0e1b      	lsrs	r3, r3, #24
 800de7e:	4313      	orrs	r3, r2
}
 800de80:	4618      	mov	r0, r3
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b089      	sub	sp, #36	; 0x24
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800de9a:	2300      	movs	r3, #0
 800de9c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800de9e:	2300      	movs	r3, #0
 800dea0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	f003 0301 	and.w	r3, r3, #1
 800dea8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00d      	beq.n	800decc <lwip_standard_chksum+0x40>
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	dd0a      	ble.n	800decc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800deb6:	69fa      	ldr	r2, [r7, #28]
 800deb8:	1c53      	adds	r3, r2, #1
 800deba:	61fb      	str	r3, [r7, #28]
 800debc:	f107 030e 	add.w	r3, r7, #14
 800dec0:	3301      	adds	r3, #1
 800dec2:	7812      	ldrb	r2, [r2, #0]
 800dec4:	701a      	strb	r2, [r3, #0]
    len--;
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	3b01      	subs	r3, #1
 800deca:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800ded0:	e00a      	b.n	800dee8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	1c9a      	adds	r2, r3, #2
 800ded6:	61ba      	str	r2, [r7, #24]
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	461a      	mov	r2, r3
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	4413      	add	r3, r2
 800dee0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	3b02      	subs	r3, #2
 800dee6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	2b01      	cmp	r3, #1
 800deec:	dcf1      	bgt.n	800ded2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	dd04      	ble.n	800defe <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800def4:	f107 030e 	add.w	r3, r7, #14
 800def8:	69ba      	ldr	r2, [r7, #24]
 800defa:	7812      	ldrb	r2, [r2, #0]
 800defc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800defe:	89fb      	ldrh	r3, [r7, #14]
 800df00:	461a      	mov	r2, r3
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	4413      	add	r3, r2
 800df06:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	0c1a      	lsrs	r2, r3, #16
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	b29b      	uxth	r3, r3
 800df10:	4413      	add	r3, r2
 800df12:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	0c1a      	lsrs	r2, r3, #16
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	4413      	add	r3, r2
 800df1e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d007      	beq.n	800df36 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	021b      	lsls	r3, r3, #8
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	0a1b      	lsrs	r3, r3, #8
 800df30:	b2db      	uxtb	r3, r3
 800df32:	4313      	orrs	r3, r2
 800df34:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	b29b      	uxth	r3, r3
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3724      	adds	r7, #36	; 0x24
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr

0800df46 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b082      	sub	sp, #8
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
 800df4e:	460b      	mov	r3, r1
 800df50:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800df52:	887b      	ldrh	r3, [r7, #2]
 800df54:	4619      	mov	r1, r3
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f7ff ff98 	bl	800de8c <lwip_standard_chksum>
 800df5c:	4603      	mov	r3, r0
 800df5e:	43db      	mvns	r3, r3
 800df60:	b29b      	uxth	r3, r3
}
 800df62:	4618      	mov	r0, r3
 800df64:	3708      	adds	r7, #8
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b086      	sub	sp, #24
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800df72:	2300      	movs	r3, #0
 800df74:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800df76:	2300      	movs	r3, #0
 800df78:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	613b      	str	r3, [r7, #16]
 800df7e:	e02b      	b.n	800dfd8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	685a      	ldr	r2, [r3, #4]
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	895b      	ldrh	r3, [r3, #10]
 800df88:	4619      	mov	r1, r3
 800df8a:	4610      	mov	r0, r2
 800df8c:	f7ff ff7e 	bl	800de8c <lwip_standard_chksum>
 800df90:	4603      	mov	r3, r0
 800df92:	461a      	mov	r2, r3
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	4413      	add	r3, r2
 800df98:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	0c1a      	lsrs	r2, r3, #16
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	4413      	add	r3, r2
 800dfa4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	895b      	ldrh	r3, [r3, #10]
 800dfaa:	f003 0301 	and.w	r3, r3, #1
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00e      	beq.n	800dfd2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	bf0c      	ite	eq
 800dfba:	2301      	moveq	r3, #1
 800dfbc:	2300      	movne	r3, #0
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	021b      	lsls	r3, r3, #8
 800dfc6:	b29a      	uxth	r2, r3
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	0a1b      	lsrs	r3, r3, #8
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	613b      	str	r3, [r7, #16]
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1d0      	bne.n	800df80 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d007      	beq.n	800dff4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	021b      	lsls	r3, r3, #8
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	0a1b      	lsrs	r3, r3, #8
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	4313      	orrs	r3, r2
 800dff2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	43db      	mvns	r3, r3
 800dffa:	b29b      	uxth	r3, r3
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e00a:	2300      	movs	r3, #0
 800e00c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800e00e:	f00a fdeb 	bl	8018be8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800e012:	f000 f8d5 	bl	800e1c0 <mem_init>
  memp_init();
 800e016:	f000 fc2d 	bl	800e874 <memp_init>
  pbuf_init();
  netif_init();
 800e01a:	f000 fd39 	bl	800ea90 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e01e:	f008 f825 	bl	801606c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e022:	f001 fe59 	bl	800fcd8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e026:	f007 ff67 	bl	8015ef8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e02a:	bf00      	nop
 800e02c:	3708      	adds	r7, #8
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
	...

0800e034 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	4603      	mov	r3, r0
 800e03c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800e03e:	4b05      	ldr	r3, [pc, #20]	; (800e054 <ptr_to_mem+0x20>)
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	88fb      	ldrh	r3, [r7, #6]
 800e044:	4413      	add	r3, r2
}
 800e046:	4618      	mov	r0, r3
 800e048:	370c      	adds	r7, #12
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	240040dc 	.word	0x240040dc

0800e058 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e060:	4b05      	ldr	r3, [pc, #20]	; (800e078 <mem_to_ptr+0x20>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	1ad3      	subs	r3, r2, r3
 800e068:	b29b      	uxth	r3, r3
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	370c      	adds	r7, #12
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	240040dc 	.word	0x240040dc

0800e07c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e07c:	b590      	push	{r4, r7, lr}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e084:	4b45      	ldr	r3, [pc, #276]	; (800e19c <plug_holes+0x120>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d206      	bcs.n	800e09c <plug_holes+0x20>
 800e08e:	4b44      	ldr	r3, [pc, #272]	; (800e1a0 <plug_holes+0x124>)
 800e090:	f240 12df 	movw	r2, #479	; 0x1df
 800e094:	4943      	ldr	r1, [pc, #268]	; (800e1a4 <plug_holes+0x128>)
 800e096:	4844      	ldr	r0, [pc, #272]	; (800e1a8 <plug_holes+0x12c>)
 800e098:	f00a ffcc 	bl	8019034 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e09c:	4b43      	ldr	r3, [pc, #268]	; (800e1ac <plug_holes+0x130>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d306      	bcc.n	800e0b4 <plug_holes+0x38>
 800e0a6:	4b3e      	ldr	r3, [pc, #248]	; (800e1a0 <plug_holes+0x124>)
 800e0a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e0ac:	4940      	ldr	r1, [pc, #256]	; (800e1b0 <plug_holes+0x134>)
 800e0ae:	483e      	ldr	r0, [pc, #248]	; (800e1a8 <plug_holes+0x12c>)
 800e0b0:	f00a ffc0 	bl	8019034 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	791b      	ldrb	r3, [r3, #4]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d006      	beq.n	800e0ca <plug_holes+0x4e>
 800e0bc:	4b38      	ldr	r3, [pc, #224]	; (800e1a0 <plug_holes+0x124>)
 800e0be:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e0c2:	493c      	ldr	r1, [pc, #240]	; (800e1b4 <plug_holes+0x138>)
 800e0c4:	4838      	ldr	r0, [pc, #224]	; (800e1a8 <plug_holes+0x12c>)
 800e0c6:	f00a ffb5 	bl	8019034 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	881b      	ldrh	r3, [r3, #0]
 800e0ce:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e0d2:	d906      	bls.n	800e0e2 <plug_holes+0x66>
 800e0d4:	4b32      	ldr	r3, [pc, #200]	; (800e1a0 <plug_holes+0x124>)
 800e0d6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800e0da:	4937      	ldr	r1, [pc, #220]	; (800e1b8 <plug_holes+0x13c>)
 800e0dc:	4832      	ldr	r0, [pc, #200]	; (800e1a8 <plug_holes+0x12c>)
 800e0de:	f00a ffa9 	bl	8019034 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	881b      	ldrh	r3, [r3, #0]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7ff ffa4 	bl	800e034 <ptr_to_mem>
 800e0ec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d024      	beq.n	800e140 <plug_holes+0xc4>
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	791b      	ldrb	r3, [r3, #4]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d120      	bne.n	800e140 <plug_holes+0xc4>
 800e0fe:	4b2b      	ldr	r3, [pc, #172]	; (800e1ac <plug_holes+0x130>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	68fa      	ldr	r2, [r7, #12]
 800e104:	429a      	cmp	r2, r3
 800e106:	d01b      	beq.n	800e140 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e108:	4b2c      	ldr	r3, [pc, #176]	; (800e1bc <plug_holes+0x140>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d102      	bne.n	800e118 <plug_holes+0x9c>
      lfree = mem;
 800e112:	4a2a      	ldr	r2, [pc, #168]	; (800e1bc <plug_holes+0x140>)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	881a      	ldrh	r2, [r3, #0]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	881b      	ldrh	r3, [r3, #0]
 800e124:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e128:	d00a      	beq.n	800e140 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	881b      	ldrh	r3, [r3, #0]
 800e12e:	4618      	mov	r0, r3
 800e130:	f7ff ff80 	bl	800e034 <ptr_to_mem>
 800e134:	4604      	mov	r4, r0
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7ff ff8e 	bl	800e058 <mem_to_ptr>
 800e13c:	4603      	mov	r3, r0
 800e13e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	885b      	ldrh	r3, [r3, #2]
 800e144:	4618      	mov	r0, r3
 800e146:	f7ff ff75 	bl	800e034 <ptr_to_mem>
 800e14a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e14c:	68ba      	ldr	r2, [r7, #8]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	429a      	cmp	r2, r3
 800e152:	d01f      	beq.n	800e194 <plug_holes+0x118>
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	791b      	ldrb	r3, [r3, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d11b      	bne.n	800e194 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e15c:	4b17      	ldr	r3, [pc, #92]	; (800e1bc <plug_holes+0x140>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	429a      	cmp	r2, r3
 800e164:	d102      	bne.n	800e16c <plug_holes+0xf0>
      lfree = pmem;
 800e166:	4a15      	ldr	r2, [pc, #84]	; (800e1bc <plug_holes+0x140>)
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	881a      	ldrh	r2, [r3, #0]
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e17c:	d00a      	beq.n	800e194 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	881b      	ldrh	r3, [r3, #0]
 800e182:	4618      	mov	r0, r3
 800e184:	f7ff ff56 	bl	800e034 <ptr_to_mem>
 800e188:	4604      	mov	r4, r0
 800e18a:	68b8      	ldr	r0, [r7, #8]
 800e18c:	f7ff ff64 	bl	800e058 <mem_to_ptr>
 800e190:	4603      	mov	r3, r0
 800e192:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e194:	bf00      	nop
 800e196:	3714      	adds	r7, #20
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd90      	pop	{r4, r7, pc}
 800e19c:	240040dc 	.word	0x240040dc
 800e1a0:	0801a1c8 	.word	0x0801a1c8
 800e1a4:	0801a1f8 	.word	0x0801a1f8
 800e1a8:	0801a210 	.word	0x0801a210
 800e1ac:	240040e0 	.word	0x240040e0
 800e1b0:	0801a238 	.word	0x0801a238
 800e1b4:	0801a254 	.word	0x0801a254
 800e1b8:	0801a270 	.word	0x0801a270
 800e1bc:	240040e8 	.word	0x240040e8

0800e1c0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e1c6:	4b1d      	ldr	r3, [pc, #116]	; (800e23c <mem_init+0x7c>)
 800e1c8:	4a1d      	ldr	r2, [pc, #116]	; (800e240 <mem_init+0x80>)
 800e1ca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e1cc:	4b1b      	ldr	r3, [pc, #108]	; (800e23c <mem_init+0x7c>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e1d8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e1e6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800e1ea:	f7ff ff23 	bl	800e034 <ptr_to_mem>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	4a14      	ldr	r2, [pc, #80]	; (800e244 <mem_init+0x84>)
 800e1f2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e1f4:	4b13      	ldr	r3, [pc, #76]	; (800e244 <mem_init+0x84>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e1fc:	4b11      	ldr	r3, [pc, #68]	; (800e244 <mem_init+0x84>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e204:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e206:	4b0f      	ldr	r3, [pc, #60]	; (800e244 <mem_init+0x84>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e20e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e210:	4b0a      	ldr	r3, [pc, #40]	; (800e23c <mem_init+0x7c>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a0c      	ldr	r2, [pc, #48]	; (800e248 <mem_init+0x88>)
 800e216:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e218:	480c      	ldr	r0, [pc, #48]	; (800e24c <mem_init+0x8c>)
 800e21a:	f00a fcf3 	bl	8018c04 <sys_mutex_new>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d006      	beq.n	800e232 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e224:	4b0a      	ldr	r3, [pc, #40]	; (800e250 <mem_init+0x90>)
 800e226:	f240 221f 	movw	r2, #543	; 0x21f
 800e22a:	490a      	ldr	r1, [pc, #40]	; (800e254 <mem_init+0x94>)
 800e22c:	480a      	ldr	r0, [pc, #40]	; (800e258 <mem_init+0x98>)
 800e22e:	f00a ff01 	bl	8019034 <iprintf>
  }
}
 800e232:	bf00      	nop
 800e234:	3708      	adds	r7, #8
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	240040dc 	.word	0x240040dc
 800e240:	30002000 	.word	0x30002000
 800e244:	240040e0 	.word	0x240040e0
 800e248:	240040e8 	.word	0x240040e8
 800e24c:	240040e4 	.word	0x240040e4
 800e250:	0801a1c8 	.word	0x0801a1c8
 800e254:	0801a29c 	.word	0x0801a29c
 800e258:	0801a210 	.word	0x0801a210

0800e25c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b086      	sub	sp, #24
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f7ff fef7 	bl	800e058 <mem_to_ptr>
 800e26a:	4603      	mov	r3, r0
 800e26c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	881b      	ldrh	r3, [r3, #0]
 800e272:	4618      	mov	r0, r3
 800e274:	f7ff fede 	bl	800e034 <ptr_to_mem>
 800e278:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	885b      	ldrh	r3, [r3, #2]
 800e27e:	4618      	mov	r0, r3
 800e280:	f7ff fed8 	bl	800e034 <ptr_to_mem>
 800e284:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	881b      	ldrh	r3, [r3, #0]
 800e28a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e28e:	d818      	bhi.n	800e2c2 <mem_link_valid+0x66>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	885b      	ldrh	r3, [r3, #2]
 800e294:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e298:	d813      	bhi.n	800e2c2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e29e:	8afa      	ldrh	r2, [r7, #22]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d004      	beq.n	800e2ae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	881b      	ldrh	r3, [r3, #0]
 800e2a8:	8afa      	ldrh	r2, [r7, #22]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d109      	bne.n	800e2c2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e2ae:	4b08      	ldr	r3, [pc, #32]	; (800e2d0 <mem_link_valid+0x74>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e2b2:	693a      	ldr	r2, [r7, #16]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d006      	beq.n	800e2c6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	885b      	ldrh	r3, [r3, #2]
 800e2bc:	8afa      	ldrh	r2, [r7, #22]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d001      	beq.n	800e2c6 <mem_link_valid+0x6a>
    return 0;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	e000      	b.n	800e2c8 <mem_link_valid+0x6c>
  }
  return 1;
 800e2c6:	2301      	movs	r3, #1
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	240040e0 	.word	0x240040e0

0800e2d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b088      	sub	sp, #32
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d070      	beq.n	800e3c4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f003 0303 	and.w	r3, r3, #3
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d00d      	beq.n	800e308 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e2ec:	4b37      	ldr	r3, [pc, #220]	; (800e3cc <mem_free+0xf8>)
 800e2ee:	f240 2273 	movw	r2, #627	; 0x273
 800e2f2:	4937      	ldr	r1, [pc, #220]	; (800e3d0 <mem_free+0xfc>)
 800e2f4:	4837      	ldr	r0, [pc, #220]	; (800e3d4 <mem_free+0x100>)
 800e2f6:	f00a fe9d 	bl	8019034 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e2fa:	f00a fce1 	bl	8018cc0 <sys_arch_protect>
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	68f8      	ldr	r0, [r7, #12]
 800e302:	f00a fceb 	bl	8018cdc <sys_arch_unprotect>
    return;
 800e306:	e05e      	b.n	800e3c6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	3b08      	subs	r3, #8
 800e30c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e30e:	4b32      	ldr	r3, [pc, #200]	; (800e3d8 <mem_free+0x104>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	69fa      	ldr	r2, [r7, #28]
 800e314:	429a      	cmp	r2, r3
 800e316:	d306      	bcc.n	800e326 <mem_free+0x52>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f103 020c 	add.w	r2, r3, #12
 800e31e:	4b2f      	ldr	r3, [pc, #188]	; (800e3dc <mem_free+0x108>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	429a      	cmp	r2, r3
 800e324:	d90d      	bls.n	800e342 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e326:	4b29      	ldr	r3, [pc, #164]	; (800e3cc <mem_free+0xf8>)
 800e328:	f240 227f 	movw	r2, #639	; 0x27f
 800e32c:	492c      	ldr	r1, [pc, #176]	; (800e3e0 <mem_free+0x10c>)
 800e32e:	4829      	ldr	r0, [pc, #164]	; (800e3d4 <mem_free+0x100>)
 800e330:	f00a fe80 	bl	8019034 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e334:	f00a fcc4 	bl	8018cc0 <sys_arch_protect>
 800e338:	6138      	str	r0, [r7, #16]
 800e33a:	6938      	ldr	r0, [r7, #16]
 800e33c:	f00a fcce 	bl	8018cdc <sys_arch_unprotect>
    return;
 800e340:	e041      	b.n	800e3c6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e342:	4828      	ldr	r0, [pc, #160]	; (800e3e4 <mem_free+0x110>)
 800e344:	f00a fc7a 	bl	8018c3c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	791b      	ldrb	r3, [r3, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d110      	bne.n	800e372 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e350:	4b1e      	ldr	r3, [pc, #120]	; (800e3cc <mem_free+0xf8>)
 800e352:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e356:	4924      	ldr	r1, [pc, #144]	; (800e3e8 <mem_free+0x114>)
 800e358:	481e      	ldr	r0, [pc, #120]	; (800e3d4 <mem_free+0x100>)
 800e35a:	f00a fe6b 	bl	8019034 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e35e:	4821      	ldr	r0, [pc, #132]	; (800e3e4 <mem_free+0x110>)
 800e360:	f00a fc7b 	bl	8018c5a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e364:	f00a fcac 	bl	8018cc0 <sys_arch_protect>
 800e368:	6178      	str	r0, [r7, #20]
 800e36a:	6978      	ldr	r0, [r7, #20]
 800e36c:	f00a fcb6 	bl	8018cdc <sys_arch_unprotect>
    return;
 800e370:	e029      	b.n	800e3c6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e372:	69f8      	ldr	r0, [r7, #28]
 800e374:	f7ff ff72 	bl	800e25c <mem_link_valid>
 800e378:	4603      	mov	r3, r0
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d110      	bne.n	800e3a0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e37e:	4b13      	ldr	r3, [pc, #76]	; (800e3cc <mem_free+0xf8>)
 800e380:	f240 2295 	movw	r2, #661	; 0x295
 800e384:	4919      	ldr	r1, [pc, #100]	; (800e3ec <mem_free+0x118>)
 800e386:	4813      	ldr	r0, [pc, #76]	; (800e3d4 <mem_free+0x100>)
 800e388:	f00a fe54 	bl	8019034 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e38c:	4815      	ldr	r0, [pc, #84]	; (800e3e4 <mem_free+0x110>)
 800e38e:	f00a fc64 	bl	8018c5a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e392:	f00a fc95 	bl	8018cc0 <sys_arch_protect>
 800e396:	61b8      	str	r0, [r7, #24]
 800e398:	69b8      	ldr	r0, [r7, #24]
 800e39a:	f00a fc9f 	bl	8018cdc <sys_arch_unprotect>
    return;
 800e39e:	e012      	b.n	800e3c6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e3a6:	4b12      	ldr	r3, [pc, #72]	; (800e3f0 <mem_free+0x11c>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	69fa      	ldr	r2, [r7, #28]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d202      	bcs.n	800e3b6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e3b0:	4a0f      	ldr	r2, [pc, #60]	; (800e3f0 <mem_free+0x11c>)
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e3b6:	69f8      	ldr	r0, [r7, #28]
 800e3b8:	f7ff fe60 	bl	800e07c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e3bc:	4809      	ldr	r0, [pc, #36]	; (800e3e4 <mem_free+0x110>)
 800e3be:	f00a fc4c 	bl	8018c5a <sys_mutex_unlock>
 800e3c2:	e000      	b.n	800e3c6 <mem_free+0xf2>
    return;
 800e3c4:	bf00      	nop
}
 800e3c6:	3720      	adds	r7, #32
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	0801a1c8 	.word	0x0801a1c8
 800e3d0:	0801a2b8 	.word	0x0801a2b8
 800e3d4:	0801a210 	.word	0x0801a210
 800e3d8:	240040dc 	.word	0x240040dc
 800e3dc:	240040e0 	.word	0x240040e0
 800e3e0:	0801a2dc 	.word	0x0801a2dc
 800e3e4:	240040e4 	.word	0x240040e4
 800e3e8:	0801a2f8 	.word	0x0801a2f8
 800e3ec:	0801a320 	.word	0x0801a320
 800e3f0:	240040e8 	.word	0x240040e8

0800e3f4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b088      	sub	sp, #32
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e400:	887b      	ldrh	r3, [r7, #2]
 800e402:	3303      	adds	r3, #3
 800e404:	b29b      	uxth	r3, r3
 800e406:	f023 0303 	bic.w	r3, r3, #3
 800e40a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e40c:	8bfb      	ldrh	r3, [r7, #30]
 800e40e:	2b0b      	cmp	r3, #11
 800e410:	d801      	bhi.n	800e416 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e412:	230c      	movs	r3, #12
 800e414:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e416:	8bfb      	ldrh	r3, [r7, #30]
 800e418:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e41c:	d803      	bhi.n	800e426 <mem_trim+0x32>
 800e41e:	8bfa      	ldrh	r2, [r7, #30]
 800e420:	887b      	ldrh	r3, [r7, #2]
 800e422:	429a      	cmp	r2, r3
 800e424:	d201      	bcs.n	800e42a <mem_trim+0x36>
    return NULL;
 800e426:	2300      	movs	r3, #0
 800e428:	e0d8      	b.n	800e5dc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e42a:	4b6e      	ldr	r3, [pc, #440]	; (800e5e4 <mem_trim+0x1f0>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	429a      	cmp	r2, r3
 800e432:	d304      	bcc.n	800e43e <mem_trim+0x4a>
 800e434:	4b6c      	ldr	r3, [pc, #432]	; (800e5e8 <mem_trim+0x1f4>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d306      	bcc.n	800e44c <mem_trim+0x58>
 800e43e:	4b6b      	ldr	r3, [pc, #428]	; (800e5ec <mem_trim+0x1f8>)
 800e440:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e444:	496a      	ldr	r1, [pc, #424]	; (800e5f0 <mem_trim+0x1fc>)
 800e446:	486b      	ldr	r0, [pc, #428]	; (800e5f4 <mem_trim+0x200>)
 800e448:	f00a fdf4 	bl	8019034 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e44c:	4b65      	ldr	r3, [pc, #404]	; (800e5e4 <mem_trim+0x1f0>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	429a      	cmp	r2, r3
 800e454:	d304      	bcc.n	800e460 <mem_trim+0x6c>
 800e456:	4b64      	ldr	r3, [pc, #400]	; (800e5e8 <mem_trim+0x1f4>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d307      	bcc.n	800e470 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e460:	f00a fc2e 	bl	8018cc0 <sys_arch_protect>
 800e464:	60b8      	str	r0, [r7, #8]
 800e466:	68b8      	ldr	r0, [r7, #8]
 800e468:	f00a fc38 	bl	8018cdc <sys_arch_unprotect>
    return rmem;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	e0b5      	b.n	800e5dc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	3b08      	subs	r3, #8
 800e474:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e476:	69b8      	ldr	r0, [r7, #24]
 800e478:	f7ff fdee 	bl	800e058 <mem_to_ptr>
 800e47c:	4603      	mov	r3, r0
 800e47e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	881a      	ldrh	r2, [r3, #0]
 800e484:	8afb      	ldrh	r3, [r7, #22]
 800e486:	1ad3      	subs	r3, r2, r3
 800e488:	b29b      	uxth	r3, r3
 800e48a:	3b08      	subs	r3, #8
 800e48c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e48e:	8bfa      	ldrh	r2, [r7, #30]
 800e490:	8abb      	ldrh	r3, [r7, #20]
 800e492:	429a      	cmp	r2, r3
 800e494:	d906      	bls.n	800e4a4 <mem_trim+0xb0>
 800e496:	4b55      	ldr	r3, [pc, #340]	; (800e5ec <mem_trim+0x1f8>)
 800e498:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e49c:	4956      	ldr	r1, [pc, #344]	; (800e5f8 <mem_trim+0x204>)
 800e49e:	4855      	ldr	r0, [pc, #340]	; (800e5f4 <mem_trim+0x200>)
 800e4a0:	f00a fdc8 	bl	8019034 <iprintf>
  if (newsize > size) {
 800e4a4:	8bfa      	ldrh	r2, [r7, #30]
 800e4a6:	8abb      	ldrh	r3, [r7, #20]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d901      	bls.n	800e4b0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	e095      	b.n	800e5dc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e4b0:	8bfa      	ldrh	r2, [r7, #30]
 800e4b2:	8abb      	ldrh	r3, [r7, #20]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d101      	bne.n	800e4bc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	e08f      	b.n	800e5dc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e4bc:	484f      	ldr	r0, [pc, #316]	; (800e5fc <mem_trim+0x208>)
 800e4be:	f00a fbbd 	bl	8018c3c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	881b      	ldrh	r3, [r3, #0]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7ff fdb4 	bl	800e034 <ptr_to_mem>
 800e4cc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	791b      	ldrb	r3, [r3, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d13f      	bne.n	800e556 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e4d6:	69bb      	ldr	r3, [r7, #24]
 800e4d8:	881b      	ldrh	r3, [r3, #0]
 800e4da:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e4de:	d106      	bne.n	800e4ee <mem_trim+0xfa>
 800e4e0:	4b42      	ldr	r3, [pc, #264]	; (800e5ec <mem_trim+0x1f8>)
 800e4e2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e4e6:	4946      	ldr	r1, [pc, #280]	; (800e600 <mem_trim+0x20c>)
 800e4e8:	4842      	ldr	r0, [pc, #264]	; (800e5f4 <mem_trim+0x200>)
 800e4ea:	f00a fda3 	bl	8019034 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	881b      	ldrh	r3, [r3, #0]
 800e4f2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e4f4:	8afa      	ldrh	r2, [r7, #22]
 800e4f6:	8bfb      	ldrh	r3, [r7, #30]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	3308      	adds	r3, #8
 800e4fe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e500:	4b40      	ldr	r3, [pc, #256]	; (800e604 <mem_trim+0x210>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	693a      	ldr	r2, [r7, #16]
 800e506:	429a      	cmp	r2, r3
 800e508:	d106      	bne.n	800e518 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e50a:	89fb      	ldrh	r3, [r7, #14]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7ff fd91 	bl	800e034 <ptr_to_mem>
 800e512:	4603      	mov	r3, r0
 800e514:	4a3b      	ldr	r2, [pc, #236]	; (800e604 <mem_trim+0x210>)
 800e516:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e518:	89fb      	ldrh	r3, [r7, #14]
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7ff fd8a 	bl	800e034 <ptr_to_mem>
 800e520:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	2200      	movs	r2, #0
 800e526:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	89ba      	ldrh	r2, [r7, #12]
 800e52c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	8afa      	ldrh	r2, [r7, #22]
 800e532:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	89fa      	ldrh	r2, [r7, #14]
 800e538:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	881b      	ldrh	r3, [r3, #0]
 800e53e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e542:	d047      	beq.n	800e5d4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	881b      	ldrh	r3, [r3, #0]
 800e548:	4618      	mov	r0, r3
 800e54a:	f7ff fd73 	bl	800e034 <ptr_to_mem>
 800e54e:	4602      	mov	r2, r0
 800e550:	89fb      	ldrh	r3, [r7, #14]
 800e552:	8053      	strh	r3, [r2, #2]
 800e554:	e03e      	b.n	800e5d4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e556:	8bfb      	ldrh	r3, [r7, #30]
 800e558:	f103 0214 	add.w	r2, r3, #20
 800e55c:	8abb      	ldrh	r3, [r7, #20]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d838      	bhi.n	800e5d4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e562:	8afa      	ldrh	r2, [r7, #22]
 800e564:	8bfb      	ldrh	r3, [r7, #30]
 800e566:	4413      	add	r3, r2
 800e568:	b29b      	uxth	r3, r3
 800e56a:	3308      	adds	r3, #8
 800e56c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	881b      	ldrh	r3, [r3, #0]
 800e572:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e576:	d106      	bne.n	800e586 <mem_trim+0x192>
 800e578:	4b1c      	ldr	r3, [pc, #112]	; (800e5ec <mem_trim+0x1f8>)
 800e57a:	f240 3216 	movw	r2, #790	; 0x316
 800e57e:	4920      	ldr	r1, [pc, #128]	; (800e600 <mem_trim+0x20c>)
 800e580:	481c      	ldr	r0, [pc, #112]	; (800e5f4 <mem_trim+0x200>)
 800e582:	f00a fd57 	bl	8019034 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e586:	89fb      	ldrh	r3, [r7, #14]
 800e588:	4618      	mov	r0, r3
 800e58a:	f7ff fd53 	bl	800e034 <ptr_to_mem>
 800e58e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e590:	4b1c      	ldr	r3, [pc, #112]	; (800e604 <mem_trim+0x210>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	693a      	ldr	r2, [r7, #16]
 800e596:	429a      	cmp	r2, r3
 800e598:	d202      	bcs.n	800e5a0 <mem_trim+0x1ac>
      lfree = mem2;
 800e59a:	4a1a      	ldr	r2, [pc, #104]	; (800e604 <mem_trim+0x210>)
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	881a      	ldrh	r2, [r3, #0]
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	8afa      	ldrh	r2, [r7, #22]
 800e5b2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e5b4:	69bb      	ldr	r3, [r7, #24]
 800e5b6:	89fa      	ldrh	r2, [r7, #14]
 800e5b8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	881b      	ldrh	r3, [r3, #0]
 800e5be:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e5c2:	d007      	beq.n	800e5d4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	881b      	ldrh	r3, [r3, #0]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7ff fd33 	bl	800e034 <ptr_to_mem>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	89fb      	ldrh	r3, [r7, #14]
 800e5d2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e5d4:	4809      	ldr	r0, [pc, #36]	; (800e5fc <mem_trim+0x208>)
 800e5d6:	f00a fb40 	bl	8018c5a <sys_mutex_unlock>
  return rmem;
 800e5da:	687b      	ldr	r3, [r7, #4]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3720      	adds	r7, #32
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	240040dc 	.word	0x240040dc
 800e5e8:	240040e0 	.word	0x240040e0
 800e5ec:	0801a1c8 	.word	0x0801a1c8
 800e5f0:	0801a354 	.word	0x0801a354
 800e5f4:	0801a210 	.word	0x0801a210
 800e5f8:	0801a36c 	.word	0x0801a36c
 800e5fc:	240040e4 	.word	0x240040e4
 800e600:	0801a38c 	.word	0x0801a38c
 800e604:	240040e8 	.word	0x240040e8

0800e608 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b088      	sub	sp, #32
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	4603      	mov	r3, r0
 800e610:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e612:	88fb      	ldrh	r3, [r7, #6]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d101      	bne.n	800e61c <mem_malloc+0x14>
    return NULL;
 800e618:	2300      	movs	r3, #0
 800e61a:	e0e2      	b.n	800e7e2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e61c:	88fb      	ldrh	r3, [r7, #6]
 800e61e:	3303      	adds	r3, #3
 800e620:	b29b      	uxth	r3, r3
 800e622:	f023 0303 	bic.w	r3, r3, #3
 800e626:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e628:	8bbb      	ldrh	r3, [r7, #28]
 800e62a:	2b0b      	cmp	r3, #11
 800e62c:	d801      	bhi.n	800e632 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e62e:	230c      	movs	r3, #12
 800e630:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e632:	8bbb      	ldrh	r3, [r7, #28]
 800e634:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e638:	d803      	bhi.n	800e642 <mem_malloc+0x3a>
 800e63a:	8bba      	ldrh	r2, [r7, #28]
 800e63c:	88fb      	ldrh	r3, [r7, #6]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d201      	bcs.n	800e646 <mem_malloc+0x3e>
    return NULL;
 800e642:	2300      	movs	r3, #0
 800e644:	e0cd      	b.n	800e7e2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e646:	4869      	ldr	r0, [pc, #420]	; (800e7ec <mem_malloc+0x1e4>)
 800e648:	f00a faf8 	bl	8018c3c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e64c:	4b68      	ldr	r3, [pc, #416]	; (800e7f0 <mem_malloc+0x1e8>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4618      	mov	r0, r3
 800e652:	f7ff fd01 	bl	800e058 <mem_to_ptr>
 800e656:	4603      	mov	r3, r0
 800e658:	83fb      	strh	r3, [r7, #30]
 800e65a:	e0b7      	b.n	800e7cc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e65c:	8bfb      	ldrh	r3, [r7, #30]
 800e65e:	4618      	mov	r0, r3
 800e660:	f7ff fce8 	bl	800e034 <ptr_to_mem>
 800e664:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	791b      	ldrb	r3, [r3, #4]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f040 80a7 	bne.w	800e7be <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	881b      	ldrh	r3, [r3, #0]
 800e674:	461a      	mov	r2, r3
 800e676:	8bfb      	ldrh	r3, [r7, #30]
 800e678:	1ad3      	subs	r3, r2, r3
 800e67a:	f1a3 0208 	sub.w	r2, r3, #8
 800e67e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e680:	429a      	cmp	r2, r3
 800e682:	f0c0 809c 	bcc.w	800e7be <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	881b      	ldrh	r3, [r3, #0]
 800e68a:	461a      	mov	r2, r3
 800e68c:	8bfb      	ldrh	r3, [r7, #30]
 800e68e:	1ad3      	subs	r3, r2, r3
 800e690:	f1a3 0208 	sub.w	r2, r3, #8
 800e694:	8bbb      	ldrh	r3, [r7, #28]
 800e696:	3314      	adds	r3, #20
 800e698:	429a      	cmp	r2, r3
 800e69a:	d333      	bcc.n	800e704 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e69c:	8bfa      	ldrh	r2, [r7, #30]
 800e69e:	8bbb      	ldrh	r3, [r7, #28]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	3308      	adds	r3, #8
 800e6a6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e6a8:	8a7b      	ldrh	r3, [r7, #18]
 800e6aa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e6ae:	d106      	bne.n	800e6be <mem_malloc+0xb6>
 800e6b0:	4b50      	ldr	r3, [pc, #320]	; (800e7f4 <mem_malloc+0x1ec>)
 800e6b2:	f240 3287 	movw	r2, #903	; 0x387
 800e6b6:	4950      	ldr	r1, [pc, #320]	; (800e7f8 <mem_malloc+0x1f0>)
 800e6b8:	4850      	ldr	r0, [pc, #320]	; (800e7fc <mem_malloc+0x1f4>)
 800e6ba:	f00a fcbb 	bl	8019034 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e6be:	8a7b      	ldrh	r3, [r7, #18]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7ff fcb7 	bl	800e034 <ptr_to_mem>
 800e6c6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	881a      	ldrh	r2, [r3, #0]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	8bfa      	ldrh	r2, [r7, #30]
 800e6da:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	8a7a      	ldrh	r2, [r7, #18]
 800e6e0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e6f0:	d00b      	beq.n	800e70a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	881b      	ldrh	r3, [r3, #0]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7ff fc9c 	bl	800e034 <ptr_to_mem>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	8a7b      	ldrh	r3, [r7, #18]
 800e700:	8053      	strh	r3, [r2, #2]
 800e702:	e002      	b.n	800e70a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	2201      	movs	r2, #1
 800e708:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e70a:	4b39      	ldr	r3, [pc, #228]	; (800e7f0 <mem_malloc+0x1e8>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	697a      	ldr	r2, [r7, #20]
 800e710:	429a      	cmp	r2, r3
 800e712:	d127      	bne.n	800e764 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e714:	4b36      	ldr	r3, [pc, #216]	; (800e7f0 <mem_malloc+0x1e8>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e71a:	e005      	b.n	800e728 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	881b      	ldrh	r3, [r3, #0]
 800e720:	4618      	mov	r0, r3
 800e722:	f7ff fc87 	bl	800e034 <ptr_to_mem>
 800e726:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	791b      	ldrb	r3, [r3, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d004      	beq.n	800e73a <mem_malloc+0x132>
 800e730:	4b33      	ldr	r3, [pc, #204]	; (800e800 <mem_malloc+0x1f8>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	69ba      	ldr	r2, [r7, #24]
 800e736:	429a      	cmp	r2, r3
 800e738:	d1f0      	bne.n	800e71c <mem_malloc+0x114>
          }
          lfree = cur;
 800e73a:	4a2d      	ldr	r2, [pc, #180]	; (800e7f0 <mem_malloc+0x1e8>)
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e740:	4b2b      	ldr	r3, [pc, #172]	; (800e7f0 <mem_malloc+0x1e8>)
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	4b2e      	ldr	r3, [pc, #184]	; (800e800 <mem_malloc+0x1f8>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d00b      	beq.n	800e764 <mem_malloc+0x15c>
 800e74c:	4b28      	ldr	r3, [pc, #160]	; (800e7f0 <mem_malloc+0x1e8>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	791b      	ldrb	r3, [r3, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d006      	beq.n	800e764 <mem_malloc+0x15c>
 800e756:	4b27      	ldr	r3, [pc, #156]	; (800e7f4 <mem_malloc+0x1ec>)
 800e758:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e75c:	4929      	ldr	r1, [pc, #164]	; (800e804 <mem_malloc+0x1fc>)
 800e75e:	4827      	ldr	r0, [pc, #156]	; (800e7fc <mem_malloc+0x1f4>)
 800e760:	f00a fc68 	bl	8019034 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e764:	4821      	ldr	r0, [pc, #132]	; (800e7ec <mem_malloc+0x1e4>)
 800e766:	f00a fa78 	bl	8018c5a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e76a:	8bba      	ldrh	r2, [r7, #28]
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	4413      	add	r3, r2
 800e770:	3308      	adds	r3, #8
 800e772:	4a23      	ldr	r2, [pc, #140]	; (800e800 <mem_malloc+0x1f8>)
 800e774:	6812      	ldr	r2, [r2, #0]
 800e776:	4293      	cmp	r3, r2
 800e778:	d906      	bls.n	800e788 <mem_malloc+0x180>
 800e77a:	4b1e      	ldr	r3, [pc, #120]	; (800e7f4 <mem_malloc+0x1ec>)
 800e77c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e780:	4921      	ldr	r1, [pc, #132]	; (800e808 <mem_malloc+0x200>)
 800e782:	481e      	ldr	r0, [pc, #120]	; (800e7fc <mem_malloc+0x1f4>)
 800e784:	f00a fc56 	bl	8019034 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	f003 0303 	and.w	r3, r3, #3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d006      	beq.n	800e7a0 <mem_malloc+0x198>
 800e792:	4b18      	ldr	r3, [pc, #96]	; (800e7f4 <mem_malloc+0x1ec>)
 800e794:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e798:	491c      	ldr	r1, [pc, #112]	; (800e80c <mem_malloc+0x204>)
 800e79a:	4818      	ldr	r0, [pc, #96]	; (800e7fc <mem_malloc+0x1f4>)
 800e79c:	f00a fc4a 	bl	8019034 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	f003 0303 	and.w	r3, r3, #3
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d006      	beq.n	800e7b8 <mem_malloc+0x1b0>
 800e7aa:	4b12      	ldr	r3, [pc, #72]	; (800e7f4 <mem_malloc+0x1ec>)
 800e7ac:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e7b0:	4917      	ldr	r1, [pc, #92]	; (800e810 <mem_malloc+0x208>)
 800e7b2:	4812      	ldr	r0, [pc, #72]	; (800e7fc <mem_malloc+0x1f4>)
 800e7b4:	f00a fc3e 	bl	8019034 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	3308      	adds	r3, #8
 800e7bc:	e011      	b.n	800e7e2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e7be:	8bfb      	ldrh	r3, [r7, #30]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7ff fc37 	bl	800e034 <ptr_to_mem>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	881b      	ldrh	r3, [r3, #0]
 800e7ca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e7cc:	8bfa      	ldrh	r2, [r7, #30]
 800e7ce:	8bbb      	ldrh	r3, [r7, #28]
 800e7d0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	f4ff af41 	bcc.w	800e65c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e7da:	4804      	ldr	r0, [pc, #16]	; (800e7ec <mem_malloc+0x1e4>)
 800e7dc:	f00a fa3d 	bl	8018c5a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e7e0:	2300      	movs	r3, #0
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3720      	adds	r7, #32
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	240040e4 	.word	0x240040e4
 800e7f0:	240040e8 	.word	0x240040e8
 800e7f4:	0801a1c8 	.word	0x0801a1c8
 800e7f8:	0801a38c 	.word	0x0801a38c
 800e7fc:	0801a210 	.word	0x0801a210
 800e800:	240040e0 	.word	0x240040e0
 800e804:	0801a3a0 	.word	0x0801a3a0
 800e808:	0801a3bc 	.word	0x0801a3bc
 800e80c:	0801a3ec 	.word	0x0801a3ec
 800e810:	0801a41c 	.word	0x0801a41c

0800e814 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	689b      	ldr	r3, [r3, #8]
 800e820:	2200      	movs	r2, #0
 800e822:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	3303      	adds	r3, #3
 800e82a:	f023 0303 	bic.w	r3, r3, #3
 800e82e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e830:	2300      	movs	r3, #0
 800e832:	60fb      	str	r3, [r7, #12]
 800e834:	e011      	b.n	800e85a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	689b      	ldr	r3, [r3, #8]
 800e844:	68ba      	ldr	r2, [r7, #8]
 800e846:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	881b      	ldrh	r3, [r3, #0]
 800e84c:	461a      	mov	r2, r3
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	4413      	add	r3, r2
 800e852:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	3301      	adds	r3, #1
 800e858:	60fb      	str	r3, [r7, #12]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	885b      	ldrh	r3, [r3, #2]
 800e85e:	461a      	mov	r2, r3
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	4293      	cmp	r3, r2
 800e864:	dbe7      	blt.n	800e836 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e866:	bf00      	nop
 800e868:	bf00      	nop
 800e86a:	3714      	adds	r7, #20
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e87a:	2300      	movs	r3, #0
 800e87c:	80fb      	strh	r3, [r7, #6]
 800e87e:	e009      	b.n	800e894 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e880:	88fb      	ldrh	r3, [r7, #6]
 800e882:	4a08      	ldr	r2, [pc, #32]	; (800e8a4 <memp_init+0x30>)
 800e884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e888:	4618      	mov	r0, r3
 800e88a:	f7ff ffc3 	bl	800e814 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e88e:	88fb      	ldrh	r3, [r7, #6]
 800e890:	3301      	adds	r3, #1
 800e892:	80fb      	strh	r3, [r7, #6]
 800e894:	88fb      	ldrh	r3, [r7, #6]
 800e896:	2b0c      	cmp	r3, #12
 800e898:	d9f2      	bls.n	800e880 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e89a:	bf00      	nop
 800e89c:	bf00      	nop
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	0801d440 	.word	0x0801d440

0800e8a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e8b0:	f00a fa06 	bl	8018cc0 <sys_arch_protect>
 800e8b4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d015      	beq.n	800e8f0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	689b      	ldr	r3, [r3, #8]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	6812      	ldr	r2, [r2, #0]
 800e8cc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	f003 0303 	and.w	r3, r3, #3
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d006      	beq.n	800e8e6 <do_memp_malloc_pool+0x3e>
 800e8d8:	4b09      	ldr	r3, [pc, #36]	; (800e900 <do_memp_malloc_pool+0x58>)
 800e8da:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e8de:	4909      	ldr	r1, [pc, #36]	; (800e904 <do_memp_malloc_pool+0x5c>)
 800e8e0:	4809      	ldr	r0, [pc, #36]	; (800e908 <do_memp_malloc_pool+0x60>)
 800e8e2:	f00a fba7 	bl	8019034 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e8e6:	68f8      	ldr	r0, [r7, #12]
 800e8e8:	f00a f9f8 	bl	8018cdc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	e003      	b.n	800e8f8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f00a f9f3 	bl	8018cdc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3710      	adds	r7, #16
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	0801a440 	.word	0x0801a440
 800e904:	0801a470 	.word	0x0801a470
 800e908:	0801a494 	.word	0x0801a494

0800e90c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d106      	bne.n	800e928 <memp_malloc_pool+0x1c>
 800e91a:	4b0a      	ldr	r3, [pc, #40]	; (800e944 <memp_malloc_pool+0x38>)
 800e91c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800e920:	4909      	ldr	r1, [pc, #36]	; (800e948 <memp_malloc_pool+0x3c>)
 800e922:	480a      	ldr	r0, [pc, #40]	; (800e94c <memp_malloc_pool+0x40>)
 800e924:	f00a fb86 	bl	8019034 <iprintf>
  if (desc == NULL) {
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d101      	bne.n	800e932 <memp_malloc_pool+0x26>
    return NULL;
 800e92e:	2300      	movs	r3, #0
 800e930:	e003      	b.n	800e93a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff ffb8 	bl	800e8a8 <do_memp_malloc_pool>
 800e938:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3708      	adds	r7, #8
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	0801a440 	.word	0x0801a440
 800e948:	0801a4bc 	.word	0x0801a4bc
 800e94c:	0801a494 	.word	0x0801a494

0800e950 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	4603      	mov	r3, r0
 800e958:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e95a:	79fb      	ldrb	r3, [r7, #7]
 800e95c:	2b0c      	cmp	r3, #12
 800e95e:	d908      	bls.n	800e972 <memp_malloc+0x22>
 800e960:	4b0a      	ldr	r3, [pc, #40]	; (800e98c <memp_malloc+0x3c>)
 800e962:	f240 1257 	movw	r2, #343	; 0x157
 800e966:	490a      	ldr	r1, [pc, #40]	; (800e990 <memp_malloc+0x40>)
 800e968:	480a      	ldr	r0, [pc, #40]	; (800e994 <memp_malloc+0x44>)
 800e96a:	f00a fb63 	bl	8019034 <iprintf>
 800e96e:	2300      	movs	r3, #0
 800e970:	e008      	b.n	800e984 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e972:	79fb      	ldrb	r3, [r7, #7]
 800e974:	4a08      	ldr	r2, [pc, #32]	; (800e998 <memp_malloc+0x48>)
 800e976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7ff ff94 	bl	800e8a8 <do_memp_malloc_pool>
 800e980:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e982:	68fb      	ldr	r3, [r7, #12]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3710      	adds	r7, #16
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	0801a440 	.word	0x0801a440
 800e990:	0801a4d0 	.word	0x0801a4d0
 800e994:	0801a494 	.word	0x0801a494
 800e998:	0801d440 	.word	0x0801d440

0800e99c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	f003 0303 	and.w	r3, r3, #3
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d006      	beq.n	800e9be <do_memp_free_pool+0x22>
 800e9b0:	4b0d      	ldr	r3, [pc, #52]	; (800e9e8 <do_memp_free_pool+0x4c>)
 800e9b2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e9b6:	490d      	ldr	r1, [pc, #52]	; (800e9ec <do_memp_free_pool+0x50>)
 800e9b8:	480d      	ldr	r0, [pc, #52]	; (800e9f0 <do_memp_free_pool+0x54>)
 800e9ba:	f00a fb3b 	bl	8019034 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e9c2:	f00a f97d 	bl	8018cc0 <sys_arch_protect>
 800e9c6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	68fa      	ldr	r2, [r7, #12]
 800e9d8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e9da:	68b8      	ldr	r0, [r7, #8]
 800e9dc:	f00a f97e 	bl	8018cdc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e9e0:	bf00      	nop
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	0801a440 	.word	0x0801a440
 800e9ec:	0801a4f0 	.word	0x0801a4f0
 800e9f0:	0801a494 	.word	0x0801a494

0800e9f4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d106      	bne.n	800ea12 <memp_free_pool+0x1e>
 800ea04:	4b0a      	ldr	r3, [pc, #40]	; (800ea30 <memp_free_pool+0x3c>)
 800ea06:	f240 1295 	movw	r2, #405	; 0x195
 800ea0a:	490a      	ldr	r1, [pc, #40]	; (800ea34 <memp_free_pool+0x40>)
 800ea0c:	480a      	ldr	r0, [pc, #40]	; (800ea38 <memp_free_pool+0x44>)
 800ea0e:	f00a fb11 	bl	8019034 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d007      	beq.n	800ea28 <memp_free_pool+0x34>
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d004      	beq.n	800ea28 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ea1e:	6839      	ldr	r1, [r7, #0]
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f7ff ffbb 	bl	800e99c <do_memp_free_pool>
 800ea26:	e000      	b.n	800ea2a <memp_free_pool+0x36>
    return;
 800ea28:	bf00      	nop
}
 800ea2a:	3708      	adds	r7, #8
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	0801a440 	.word	0x0801a440
 800ea34:	0801a4bc 	.word	0x0801a4bc
 800ea38:	0801a494 	.word	0x0801a494

0800ea3c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	4603      	mov	r3, r0
 800ea44:	6039      	str	r1, [r7, #0]
 800ea46:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ea48:	79fb      	ldrb	r3, [r7, #7]
 800ea4a:	2b0c      	cmp	r3, #12
 800ea4c:	d907      	bls.n	800ea5e <memp_free+0x22>
 800ea4e:	4b0c      	ldr	r3, [pc, #48]	; (800ea80 <memp_free+0x44>)
 800ea50:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ea54:	490b      	ldr	r1, [pc, #44]	; (800ea84 <memp_free+0x48>)
 800ea56:	480c      	ldr	r0, [pc, #48]	; (800ea88 <memp_free+0x4c>)
 800ea58:	f00a faec 	bl	8019034 <iprintf>
 800ea5c:	e00c      	b.n	800ea78 <memp_free+0x3c>

  if (mem == NULL) {
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d008      	beq.n	800ea76 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ea64:	79fb      	ldrb	r3, [r7, #7]
 800ea66:	4a09      	ldr	r2, [pc, #36]	; (800ea8c <memp_free+0x50>)
 800ea68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea6c:	6839      	ldr	r1, [r7, #0]
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7ff ff94 	bl	800e99c <do_memp_free_pool>
 800ea74:	e000      	b.n	800ea78 <memp_free+0x3c>
    return;
 800ea76:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	0801a440 	.word	0x0801a440
 800ea84:	0801a510 	.word	0x0801a510
 800ea88:	0801a494 	.word	0x0801a494
 800ea8c:	0801d440 	.word	0x0801d440

0800ea90 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ea90:	b480      	push	{r7}
 800ea92:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ea94:	bf00      	nop
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
	...

0800eaa0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b086      	sub	sp, #24
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d108      	bne.n	800eac6 <netif_add+0x26>
 800eab4:	4b57      	ldr	r3, [pc, #348]	; (800ec14 <netif_add+0x174>)
 800eab6:	f240 1227 	movw	r2, #295	; 0x127
 800eaba:	4957      	ldr	r1, [pc, #348]	; (800ec18 <netif_add+0x178>)
 800eabc:	4857      	ldr	r0, [pc, #348]	; (800ec1c <netif_add+0x17c>)
 800eabe:	f00a fab9 	bl	8019034 <iprintf>
 800eac2:	2300      	movs	r3, #0
 800eac4:	e0a2      	b.n	800ec0c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800eac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d108      	bne.n	800eade <netif_add+0x3e>
 800eacc:	4b51      	ldr	r3, [pc, #324]	; (800ec14 <netif_add+0x174>)
 800eace:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ead2:	4953      	ldr	r1, [pc, #332]	; (800ec20 <netif_add+0x180>)
 800ead4:	4851      	ldr	r0, [pc, #324]	; (800ec1c <netif_add+0x17c>)
 800ead6:	f00a faad 	bl	8019034 <iprintf>
 800eada:	2300      	movs	r3, #0
 800eadc:	e096      	b.n	800ec0c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d101      	bne.n	800eae8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800eae4:	4b4f      	ldr	r3, [pc, #316]	; (800ec24 <netif_add+0x184>)
 800eae6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d101      	bne.n	800eaf2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800eaee:	4b4d      	ldr	r3, [pc, #308]	; (800ec24 <netif_add+0x184>)
 800eaf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d101      	bne.n	800eafc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800eaf8:	4b4a      	ldr	r3, [pc, #296]	; (800ec24 <netif_add+0x184>)
 800eafa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2200      	movs	r2, #0
 800eb00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2200      	movs	r2, #0
 800eb06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	4a45      	ldr	r2, [pc, #276]	; (800ec28 <netif_add+0x188>)
 800eb12:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2200      	movs	r2, #0
 800eb18:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2200      	movs	r2, #0
 800eb26:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	6a3a      	ldr	r2, [r7, #32]
 800eb2c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800eb2e:	4b3f      	ldr	r3, [pc, #252]	; (800ec2c <netif_add+0x18c>)
 800eb30:	781a      	ldrb	r2, [r3, #0]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb3c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	68b9      	ldr	r1, [r7, #8]
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	f000 f913 	bl	800ed70 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	4798      	blx	r3
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d001      	beq.n	800eb5a <netif_add+0xba>
    return NULL;
 800eb56:	2300      	movs	r3, #0
 800eb58:	e058      	b.n	800ec0c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb60:	2bff      	cmp	r3, #255	; 0xff
 800eb62:	d103      	bne.n	800eb6c <netif_add+0xcc>
        netif->num = 0;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800eb70:	4b2f      	ldr	r3, [pc, #188]	; (800ec30 <netif_add+0x190>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	617b      	str	r3, [r7, #20]
 800eb76:	e02b      	b.n	800ebd0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800eb78:	697a      	ldr	r2, [r7, #20]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d106      	bne.n	800eb8e <netif_add+0xee>
 800eb80:	4b24      	ldr	r3, [pc, #144]	; (800ec14 <netif_add+0x174>)
 800eb82:	f240 128b 	movw	r2, #395	; 0x18b
 800eb86:	492b      	ldr	r1, [pc, #172]	; (800ec34 <netif_add+0x194>)
 800eb88:	4824      	ldr	r0, [pc, #144]	; (800ec1c <netif_add+0x17c>)
 800eb8a:	f00a fa53 	bl	8019034 <iprintf>
        num_netifs++;
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	3301      	adds	r3, #1
 800eb92:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	2bff      	cmp	r3, #255	; 0xff
 800eb98:	dd06      	ble.n	800eba8 <netif_add+0x108>
 800eb9a:	4b1e      	ldr	r3, [pc, #120]	; (800ec14 <netif_add+0x174>)
 800eb9c:	f240 128d 	movw	r2, #397	; 0x18d
 800eba0:	4925      	ldr	r1, [pc, #148]	; (800ec38 <netif_add+0x198>)
 800eba2:	481e      	ldr	r0, [pc, #120]	; (800ec1c <netif_add+0x17c>)
 800eba4:	f00a fa46 	bl	8019034 <iprintf>
        if (netif2->num == netif->num) {
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d108      	bne.n	800ebca <netif_add+0x12a>
          netif->num++;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	b2da      	uxtb	r2, r3
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ebc8:	e005      	b.n	800ebd6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	617b      	str	r3, [r7, #20]
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d1d0      	bne.n	800eb78 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d1be      	bne.n	800eb5a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ebe2:	2bfe      	cmp	r3, #254	; 0xfe
 800ebe4:	d103      	bne.n	800ebee <netif_add+0x14e>
    netif_num = 0;
 800ebe6:	4b11      	ldr	r3, [pc, #68]	; (800ec2c <netif_add+0x18c>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	701a      	strb	r2, [r3, #0]
 800ebec:	e006      	b.n	800ebfc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	b2da      	uxtb	r2, r3
 800ebf8:	4b0c      	ldr	r3, [pc, #48]	; (800ec2c <netif_add+0x18c>)
 800ebfa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ebfc:	4b0c      	ldr	r3, [pc, #48]	; (800ec30 <netif_add+0x190>)
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ec04:	4a0a      	ldr	r2, [pc, #40]	; (800ec30 <netif_add+0x190>)
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3718      	adds	r7, #24
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	0801a52c 	.word	0x0801a52c
 800ec18:	0801a5c0 	.word	0x0801a5c0
 800ec1c:	0801a57c 	.word	0x0801a57c
 800ec20:	0801a5dc 	.word	0x0801a5dc
 800ec24:	0801d4b4 	.word	0x0801d4b4
 800ec28:	0800f04b 	.word	0x0800f04b
 800ec2c:	24004120 	.word	0x24004120
 800ec30:	2400784c 	.word	0x2400784c
 800ec34:	0801a600 	.word	0x0801a600
 800ec38:	0801a614 	.word	0x0801a614

0800ec3c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ec46:	6839      	ldr	r1, [r7, #0]
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f002 fe2d 	bl	80118a8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ec4e:	6839      	ldr	r1, [r7, #0]
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f007 fb95 	bl	8016380 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ec56:	bf00      	nop
 800ec58:	3708      	adds	r7, #8
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
	...

0800ec60 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b086      	sub	sp, #24
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d106      	bne.n	800ec80 <netif_do_set_ipaddr+0x20>
 800ec72:	4b1d      	ldr	r3, [pc, #116]	; (800ece8 <netif_do_set_ipaddr+0x88>)
 800ec74:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ec78:	491c      	ldr	r1, [pc, #112]	; (800ecec <netif_do_set_ipaddr+0x8c>)
 800ec7a:	481d      	ldr	r0, [pc, #116]	; (800ecf0 <netif_do_set_ipaddr+0x90>)
 800ec7c:	f00a f9da 	bl	8019034 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d106      	bne.n	800ec94 <netif_do_set_ipaddr+0x34>
 800ec86:	4b18      	ldr	r3, [pc, #96]	; (800ece8 <netif_do_set_ipaddr+0x88>)
 800ec88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ec8c:	4917      	ldr	r1, [pc, #92]	; (800ecec <netif_do_set_ipaddr+0x8c>)
 800ec8e:	4818      	ldr	r0, [pc, #96]	; (800ecf0 <netif_do_set_ipaddr+0x90>)
 800ec90:	f00a f9d0 	bl	8019034 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	3304      	adds	r3, #4
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d01c      	beq.n	800ecdc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	3304      	adds	r3, #4
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ecb2:	f107 0314 	add.w	r3, r7, #20
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7ff ffbf 	bl	800ec3c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d002      	beq.n	800ecca <netif_do_set_ipaddr+0x6a>
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	e000      	b.n	800eccc <netif_do_set_ipaddr+0x6c>
 800ecca:	2300      	movs	r3, #0
 800eccc:	68fa      	ldr	r2, [r7, #12]
 800ecce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ecd0:	2101      	movs	r1, #1
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f000 f8d2 	bl	800ee7c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e000      	b.n	800ecde <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ecdc:	2300      	movs	r3, #0
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3718      	adds	r7, #24
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	0801a52c 	.word	0x0801a52c
 800ecec:	0801a644 	.word	0x0801a644
 800ecf0:	0801a57c 	.word	0x0801a57c

0800ecf4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	681a      	ldr	r2, [r3, #0]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	3308      	adds	r3, #8
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d00a      	beq.n	800ed24 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d002      	beq.n	800ed1a <netif_do_set_netmask+0x26>
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	e000      	b.n	800ed1c <netif_do_set_netmask+0x28>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	68fa      	ldr	r2, [r7, #12]
 800ed1e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ed20:	2301      	movs	r3, #1
 800ed22:	e000      	b.n	800ed26 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3714      	adds	r7, #20
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr

0800ed32 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ed32:	b480      	push	{r7}
 800ed34:	b085      	sub	sp, #20
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	60f8      	str	r0, [r7, #12]
 800ed3a:	60b9      	str	r1, [r7, #8]
 800ed3c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	681a      	ldr	r2, [r3, #0]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	330c      	adds	r3, #12
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d00a      	beq.n	800ed62 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d002      	beq.n	800ed58 <netif_do_set_gw+0x26>
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	e000      	b.n	800ed5a <netif_do_set_gw+0x28>
 800ed58:	2300      	movs	r3, #0
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e000      	b.n	800ed64 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ed62:	2300      	movs	r3, #0
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3714      	adds	r7, #20
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr

0800ed70 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b088      	sub	sp, #32
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	607a      	str	r2, [r7, #4]
 800ed7c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ed82:	2300      	movs	r3, #0
 800ed84:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d101      	bne.n	800ed90 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ed8c:	4b1c      	ldr	r3, [pc, #112]	; (800ee00 <netif_set_addr+0x90>)
 800ed8e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d101      	bne.n	800ed9a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ed96:	4b1a      	ldr	r3, [pc, #104]	; (800ee00 <netif_set_addr+0x90>)
 800ed98:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d101      	bne.n	800eda4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800eda0:	4b17      	ldr	r3, [pc, #92]	; (800ee00 <netif_set_addr+0x90>)
 800eda2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d003      	beq.n	800edb2 <netif_set_addr+0x42>
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d101      	bne.n	800edb6 <netif_set_addr+0x46>
 800edb2:	2301      	movs	r3, #1
 800edb4:	e000      	b.n	800edb8 <netif_set_addr+0x48>
 800edb6:	2300      	movs	r3, #0
 800edb8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d006      	beq.n	800edce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800edc0:	f107 0310 	add.w	r3, r7, #16
 800edc4:	461a      	mov	r2, r3
 800edc6:	68b9      	ldr	r1, [r7, #8]
 800edc8:	68f8      	ldr	r0, [r7, #12]
 800edca:	f7ff ff49 	bl	800ec60 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800edce:	69fa      	ldr	r2, [r7, #28]
 800edd0:	6879      	ldr	r1, [r7, #4]
 800edd2:	68f8      	ldr	r0, [r7, #12]
 800edd4:	f7ff ff8e 	bl	800ecf4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800edd8:	69ba      	ldr	r2, [r7, #24]
 800edda:	6839      	ldr	r1, [r7, #0]
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f7ff ffa8 	bl	800ed32 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d106      	bne.n	800edf6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ede8:	f107 0310 	add.w	r3, r7, #16
 800edec:	461a      	mov	r2, r3
 800edee:	68b9      	ldr	r1, [r7, #8]
 800edf0:	68f8      	ldr	r0, [r7, #12]
 800edf2:	f7ff ff35 	bl	800ec60 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800edf6:	bf00      	nop
 800edf8:	3720      	adds	r7, #32
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	0801d4b4 	.word	0x0801d4b4

0800ee04 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ee0c:	4a04      	ldr	r2, [pc, #16]	; (800ee20 <netif_set_default+0x1c>)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ee12:	bf00      	nop
 800ee14:	370c      	adds	r7, #12
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	24007850 	.word	0x24007850

0800ee24 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d107      	bne.n	800ee42 <netif_set_up+0x1e>
 800ee32:	4b0f      	ldr	r3, [pc, #60]	; (800ee70 <netif_set_up+0x4c>)
 800ee34:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ee38:	490e      	ldr	r1, [pc, #56]	; (800ee74 <netif_set_up+0x50>)
 800ee3a:	480f      	ldr	r0, [pc, #60]	; (800ee78 <netif_set_up+0x54>)
 800ee3c:	f00a f8fa 	bl	8019034 <iprintf>
 800ee40:	e013      	b.n	800ee6a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee48:	f003 0301 	and.w	r3, r3, #1
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d10c      	bne.n	800ee6a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee56:	f043 0301 	orr.w	r3, r3, #1
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ee62:	2103      	movs	r1, #3
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 f809 	bl	800ee7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ee6a:	3708      	adds	r7, #8
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}
 800ee70:	0801a52c 	.word	0x0801a52c
 800ee74:	0801a6b4 	.word	0x0801a6b4
 800ee78:	0801a57c 	.word	0x0801a57c

0800ee7c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	460b      	mov	r3, r1
 800ee86:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d106      	bne.n	800ee9c <netif_issue_reports+0x20>
 800ee8e:	4b18      	ldr	r3, [pc, #96]	; (800eef0 <netif_issue_reports+0x74>)
 800ee90:	f240 326d 	movw	r2, #877	; 0x36d
 800ee94:	4917      	ldr	r1, [pc, #92]	; (800eef4 <netif_issue_reports+0x78>)
 800ee96:	4818      	ldr	r0, [pc, #96]	; (800eef8 <netif_issue_reports+0x7c>)
 800ee98:	f00a f8cc 	bl	8019034 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eea2:	f003 0304 	and.w	r3, r3, #4
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d01e      	beq.n	800eee8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eeb0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d017      	beq.n	800eee8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800eeb8:	78fb      	ldrb	r3, [r7, #3]
 800eeba:	f003 0301 	and.w	r3, r3, #1
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d013      	beq.n	800eeea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	3304      	adds	r3, #4
 800eec6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d00e      	beq.n	800eeea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eed2:	f003 0308 	and.w	r3, r3, #8
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d007      	beq.n	800eeea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	3304      	adds	r3, #4
 800eede:	4619      	mov	r1, r3
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f008 f9b7 	bl	8017254 <etharp_request>
 800eee6:	e000      	b.n	800eeea <netif_issue_reports+0x6e>
    return;
 800eee8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	0801a52c 	.word	0x0801a52c
 800eef4:	0801a6d0 	.word	0x0801a6d0
 800eef8:	0801a57c 	.word	0x0801a57c

0800eefc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d107      	bne.n	800ef1a <netif_set_down+0x1e>
 800ef0a:	4b12      	ldr	r3, [pc, #72]	; (800ef54 <netif_set_down+0x58>)
 800ef0c:	f240 329b 	movw	r2, #923	; 0x39b
 800ef10:	4911      	ldr	r1, [pc, #68]	; (800ef58 <netif_set_down+0x5c>)
 800ef12:	4812      	ldr	r0, [pc, #72]	; (800ef5c <netif_set_down+0x60>)
 800ef14:	f00a f88e 	bl	8019034 <iprintf>
 800ef18:	e019      	b.n	800ef4e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef20:	f003 0301 	and.w	r3, r3, #1
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d012      	beq.n	800ef4e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef2e:	f023 0301 	bic.w	r3, r3, #1
 800ef32:	b2da      	uxtb	r2, r3
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef40:	f003 0308 	and.w	r3, r3, #8
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d002      	beq.n	800ef4e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f007 fd41 	bl	80169d0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	0801a52c 	.word	0x0801a52c
 800ef58:	0801a6f4 	.word	0x0801a6f4
 800ef5c:	0801a57c 	.word	0x0801a57c

0800ef60 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d107      	bne.n	800ef7e <netif_set_link_up+0x1e>
 800ef6e:	4b13      	ldr	r3, [pc, #76]	; (800efbc <netif_set_link_up+0x5c>)
 800ef70:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ef74:	4912      	ldr	r1, [pc, #72]	; (800efc0 <netif_set_link_up+0x60>)
 800ef76:	4813      	ldr	r0, [pc, #76]	; (800efc4 <netif_set_link_up+0x64>)
 800ef78:	f00a f85c 	bl	8019034 <iprintf>
 800ef7c:	e01b      	b.n	800efb6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef84:	f003 0304 	and.w	r3, r3, #4
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d114      	bne.n	800efb6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef92:	f043 0304 	orr.w	r3, r3, #4
 800ef96:	b2da      	uxtb	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ef9e:	2103      	movs	r1, #3
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f7ff ff6b 	bl	800ee7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	69db      	ldr	r3, [r3, #28]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d003      	beq.n	800efb6 <netif_set_link_up+0x56>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	69db      	ldr	r3, [r3, #28]
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800efb6:	3708      	adds	r7, #8
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}
 800efbc:	0801a52c 	.word	0x0801a52c
 800efc0:	0801a714 	.word	0x0801a714
 800efc4:	0801a57c 	.word	0x0801a57c

0800efc8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d107      	bne.n	800efe6 <netif_set_link_down+0x1e>
 800efd6:	4b11      	ldr	r3, [pc, #68]	; (800f01c <netif_set_link_down+0x54>)
 800efd8:	f240 4206 	movw	r2, #1030	; 0x406
 800efdc:	4910      	ldr	r1, [pc, #64]	; (800f020 <netif_set_link_down+0x58>)
 800efde:	4811      	ldr	r0, [pc, #68]	; (800f024 <netif_set_link_down+0x5c>)
 800efe0:	f00a f828 	bl	8019034 <iprintf>
 800efe4:	e017      	b.n	800f016 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efec:	f003 0304 	and.w	r3, r3, #4
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d010      	beq.n	800f016 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800effa:	f023 0304 	bic.w	r3, r3, #4
 800effe:	b2da      	uxtb	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	69db      	ldr	r3, [r3, #28]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d003      	beq.n	800f016 <netif_set_link_down+0x4e>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	69db      	ldr	r3, [r3, #28]
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	0801a52c 	.word	0x0801a52c
 800f020:	0801a738 	.word	0x0801a738
 800f024:	0801a57c 	.word	0x0801a57c

0800f028 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f028:	b480      	push	{r7}
 800f02a:	b083      	sub	sp, #12
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d002      	beq.n	800f03e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	683a      	ldr	r2, [r7, #0]
 800f03c:	61da      	str	r2, [r3, #28]
  }
}
 800f03e:	bf00      	nop
 800f040:	370c      	adds	r7, #12
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr

0800f04a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f04a:	b480      	push	{r7}
 800f04c:	b085      	sub	sp, #20
 800f04e:	af00      	add	r7, sp, #0
 800f050:	60f8      	str	r0, [r7, #12]
 800f052:	60b9      	str	r1, [r7, #8]
 800f054:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f056:	f06f 030b 	mvn.w	r3, #11
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3714      	adds	r7, #20
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr
	...

0800f068 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f068:	b480      	push	{r7}
 800f06a:	b085      	sub	sp, #20
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	4603      	mov	r3, r0
 800f070:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800f072:	79fb      	ldrb	r3, [r7, #7]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d013      	beq.n	800f0a0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800f078:	4b0d      	ldr	r3, [pc, #52]	; (800f0b0 <netif_get_by_index+0x48>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	60fb      	str	r3, [r7, #12]
 800f07e:	e00c      	b.n	800f09a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f086:	3301      	adds	r3, #1
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	79fa      	ldrb	r2, [r7, #7]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d101      	bne.n	800f094 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	e006      	b.n	800f0a2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	60fb      	str	r3, [r7, #12]
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d1ef      	bne.n	800f080 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800f0a0:	2300      	movs	r3, #0
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3714      	adds	r7, #20
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr
 800f0ae:	bf00      	nop
 800f0b0:	2400784c 	.word	0x2400784c

0800f0b4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f0ba:	f009 fe01 	bl	8018cc0 <sys_arch_protect>
 800f0be:	6038      	str	r0, [r7, #0]
 800f0c0:	4b0d      	ldr	r3, [pc, #52]	; (800f0f8 <pbuf_free_ooseq+0x44>)
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	701a      	strb	r2, [r3, #0]
 800f0c6:	6838      	ldr	r0, [r7, #0]
 800f0c8:	f009 fe08 	bl	8018cdc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f0cc:	4b0b      	ldr	r3, [pc, #44]	; (800f0fc <pbuf_free_ooseq+0x48>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	607b      	str	r3, [r7, #4]
 800f0d2:	e00a      	b.n	800f0ea <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d003      	beq.n	800f0e4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f002 fc21 	bl	8011924 <tcp_free_ooseq>
      return;
 800f0e2:	e005      	b.n	800f0f0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	607b      	str	r3, [r7, #4]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d1f1      	bne.n	800f0d4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800f0f0:	3708      	adds	r7, #8
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	24007854 	.word	0x24007854
 800f0fc:	2400785c 	.word	0x2400785c

0800f100 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f108:	f7ff ffd4 	bl	800f0b4 <pbuf_free_ooseq>
}
 800f10c:	bf00      	nop
 800f10e:	3708      	adds	r7, #8
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}

0800f114 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f11a:	f009 fdd1 	bl	8018cc0 <sys_arch_protect>
 800f11e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f120:	4b0f      	ldr	r3, [pc, #60]	; (800f160 <pbuf_pool_is_empty+0x4c>)
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f126:	4b0e      	ldr	r3, [pc, #56]	; (800f160 <pbuf_pool_is_empty+0x4c>)
 800f128:	2201      	movs	r2, #1
 800f12a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f009 fdd5 	bl	8018cdc <sys_arch_unprotect>

  if (!queued) {
 800f132:	78fb      	ldrb	r3, [r7, #3]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d10f      	bne.n	800f158 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f138:	2100      	movs	r1, #0
 800f13a:	480a      	ldr	r0, [pc, #40]	; (800f164 <pbuf_pool_is_empty+0x50>)
 800f13c:	f7fe fdee 	bl	800dd1c <tcpip_try_callback>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d008      	beq.n	800f158 <pbuf_pool_is_empty+0x44>
 800f146:	f009 fdbb 	bl	8018cc0 <sys_arch_protect>
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	4b04      	ldr	r3, [pc, #16]	; (800f160 <pbuf_pool_is_empty+0x4c>)
 800f14e:	2200      	movs	r2, #0
 800f150:	701a      	strb	r2, [r3, #0]
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f009 fdc2 	bl	8018cdc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f158:	bf00      	nop
 800f15a:	3708      	adds	r7, #8
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	24007854 	.word	0x24007854
 800f164:	0800f101 	.word	0x0800f101

0800f168 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f168:	b480      	push	{r7}
 800f16a:	b085      	sub	sp, #20
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	4611      	mov	r1, r2
 800f174:	461a      	mov	r2, r3
 800f176:	460b      	mov	r3, r1
 800f178:	80fb      	strh	r3, [r7, #6]
 800f17a:	4613      	mov	r3, r2
 800f17c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2200      	movs	r2, #0
 800f182:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	68ba      	ldr	r2, [r7, #8]
 800f188:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	88fa      	ldrh	r2, [r7, #6]
 800f18e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	88ba      	ldrh	r2, [r7, #4]
 800f194:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f196:	8b3b      	ldrh	r3, [r7, #24]
 800f198:	b2da      	uxtb	r2, r3
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	7f3a      	ldrb	r2, [r7, #28]
 800f1a2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	73da      	strb	r2, [r3, #15]
}
 800f1b0:	bf00      	nop
 800f1b2:	3714      	adds	r7, #20
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr

0800f1bc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b08c      	sub	sp, #48	; 0x30
 800f1c0:	af02      	add	r7, sp, #8
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	71fb      	strb	r3, [r7, #7]
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	80bb      	strh	r3, [r7, #4]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f1ce:	79fb      	ldrb	r3, [r7, #7]
 800f1d0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f1d2:	887b      	ldrh	r3, [r7, #2]
 800f1d4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f1d8:	d07f      	beq.n	800f2da <pbuf_alloc+0x11e>
 800f1da:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f1de:	f300 80c8 	bgt.w	800f372 <pbuf_alloc+0x1b6>
 800f1e2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f1e6:	d010      	beq.n	800f20a <pbuf_alloc+0x4e>
 800f1e8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f1ec:	f300 80c1 	bgt.w	800f372 <pbuf_alloc+0x1b6>
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d002      	beq.n	800f1fa <pbuf_alloc+0x3e>
 800f1f4:	2b41      	cmp	r3, #65	; 0x41
 800f1f6:	f040 80bc 	bne.w	800f372 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f1fa:	887a      	ldrh	r2, [r7, #2]
 800f1fc:	88bb      	ldrh	r3, [r7, #4]
 800f1fe:	4619      	mov	r1, r3
 800f200:	2000      	movs	r0, #0
 800f202:	f000 f8d1 	bl	800f3a8 <pbuf_alloc_reference>
 800f206:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800f208:	e0bd      	b.n	800f386 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f20a:	2300      	movs	r3, #0
 800f20c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800f20e:	2300      	movs	r3, #0
 800f210:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f212:	88bb      	ldrh	r3, [r7, #4]
 800f214:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f216:	200c      	movs	r0, #12
 800f218:	f7ff fb9a 	bl	800e950 <memp_malloc>
 800f21c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d109      	bne.n	800f238 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800f224:	f7ff ff76 	bl	800f114 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d002      	beq.n	800f234 <pbuf_alloc+0x78>
            pbuf_free(p);
 800f22e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f230:	f000 faa8 	bl	800f784 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f234:	2300      	movs	r3, #0
 800f236:	e0a7      	b.n	800f388 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f23a:	3303      	adds	r3, #3
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	f023 0303 	bic.w	r3, r3, #3
 800f242:	b29b      	uxth	r3, r3
 800f244:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800f248:	b29b      	uxth	r3, r3
 800f24a:	8b7a      	ldrh	r2, [r7, #26]
 800f24c:	4293      	cmp	r3, r2
 800f24e:	bf28      	it	cs
 800f250:	4613      	movcs	r3, r2
 800f252:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f256:	3310      	adds	r3, #16
 800f258:	693a      	ldr	r2, [r7, #16]
 800f25a:	4413      	add	r3, r2
 800f25c:	3303      	adds	r3, #3
 800f25e:	f023 0303 	bic.w	r3, r3, #3
 800f262:	4618      	mov	r0, r3
 800f264:	89f9      	ldrh	r1, [r7, #14]
 800f266:	8b7a      	ldrh	r2, [r7, #26]
 800f268:	2300      	movs	r3, #0
 800f26a:	9301      	str	r3, [sp, #4]
 800f26c:	887b      	ldrh	r3, [r7, #2]
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	460b      	mov	r3, r1
 800f272:	4601      	mov	r1, r0
 800f274:	6938      	ldr	r0, [r7, #16]
 800f276:	f7ff ff77 	bl	800f168 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	f003 0303 	and.w	r3, r3, #3
 800f282:	2b00      	cmp	r3, #0
 800f284:	d006      	beq.n	800f294 <pbuf_alloc+0xd8>
 800f286:	4b42      	ldr	r3, [pc, #264]	; (800f390 <pbuf_alloc+0x1d4>)
 800f288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f28c:	4941      	ldr	r1, [pc, #260]	; (800f394 <pbuf_alloc+0x1d8>)
 800f28e:	4842      	ldr	r0, [pc, #264]	; (800f398 <pbuf_alloc+0x1dc>)
 800f290:	f009 fed0 	bl	8019034 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f294:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f296:	3303      	adds	r3, #3
 800f298:	f023 0303 	bic.w	r3, r3, #3
 800f29c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f2a0:	d106      	bne.n	800f2b0 <pbuf_alloc+0xf4>
 800f2a2:	4b3b      	ldr	r3, [pc, #236]	; (800f390 <pbuf_alloc+0x1d4>)
 800f2a4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f2a8:	493c      	ldr	r1, [pc, #240]	; (800f39c <pbuf_alloc+0x1e0>)
 800f2aa:	483b      	ldr	r0, [pc, #236]	; (800f398 <pbuf_alloc+0x1dc>)
 800f2ac:	f009 fec2 	bl	8019034 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d102      	bne.n	800f2bc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	627b      	str	r3, [r7, #36]	; 0x24
 800f2ba:	e002      	b.n	800f2c2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	693a      	ldr	r2, [r7, #16]
 800f2c0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f2c6:	8b7a      	ldrh	r2, [r7, #26]
 800f2c8:	89fb      	ldrh	r3, [r7, #14]
 800f2ca:	1ad3      	subs	r3, r2, r3
 800f2cc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f2d2:	8b7b      	ldrh	r3, [r7, #26]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d19e      	bne.n	800f216 <pbuf_alloc+0x5a>
      break;
 800f2d8:	e055      	b.n	800f386 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f2da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2dc:	3303      	adds	r3, #3
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	f023 0303 	bic.w	r3, r3, #3
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	88bb      	ldrh	r3, [r7, #4]
 800f2e8:	3303      	adds	r3, #3
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	f023 0303 	bic.w	r3, r3, #3
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	4413      	add	r3, r2
 800f2f4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f2f6:	8b3b      	ldrh	r3, [r7, #24]
 800f2f8:	3310      	adds	r3, #16
 800f2fa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f2fc:	8b3a      	ldrh	r2, [r7, #24]
 800f2fe:	88bb      	ldrh	r3, [r7, #4]
 800f300:	3303      	adds	r3, #3
 800f302:	f023 0303 	bic.w	r3, r3, #3
 800f306:	429a      	cmp	r2, r3
 800f308:	d306      	bcc.n	800f318 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f30a:	8afa      	ldrh	r2, [r7, #22]
 800f30c:	88bb      	ldrh	r3, [r7, #4]
 800f30e:	3303      	adds	r3, #3
 800f310:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f314:	429a      	cmp	r2, r3
 800f316:	d201      	bcs.n	800f31c <pbuf_alloc+0x160>
        return NULL;
 800f318:	2300      	movs	r3, #0
 800f31a:	e035      	b.n	800f388 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f31c:	8afb      	ldrh	r3, [r7, #22]
 800f31e:	4618      	mov	r0, r3
 800f320:	f7ff f972 	bl	800e608 <mem_malloc>
 800f324:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800f326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d101      	bne.n	800f330 <pbuf_alloc+0x174>
        return NULL;
 800f32c:	2300      	movs	r3, #0
 800f32e:	e02b      	b.n	800f388 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f330:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f332:	3310      	adds	r3, #16
 800f334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f336:	4413      	add	r3, r2
 800f338:	3303      	adds	r3, #3
 800f33a:	f023 0303 	bic.w	r3, r3, #3
 800f33e:	4618      	mov	r0, r3
 800f340:	88b9      	ldrh	r1, [r7, #4]
 800f342:	88ba      	ldrh	r2, [r7, #4]
 800f344:	2300      	movs	r3, #0
 800f346:	9301      	str	r3, [sp, #4]
 800f348:	887b      	ldrh	r3, [r7, #2]
 800f34a:	9300      	str	r3, [sp, #0]
 800f34c:	460b      	mov	r3, r1
 800f34e:	4601      	mov	r1, r0
 800f350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f352:	f7ff ff09 	bl	800f168 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f358:	685b      	ldr	r3, [r3, #4]
 800f35a:	f003 0303 	and.w	r3, r3, #3
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d010      	beq.n	800f384 <pbuf_alloc+0x1c8>
 800f362:	4b0b      	ldr	r3, [pc, #44]	; (800f390 <pbuf_alloc+0x1d4>)
 800f364:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f368:	490d      	ldr	r1, [pc, #52]	; (800f3a0 <pbuf_alloc+0x1e4>)
 800f36a:	480b      	ldr	r0, [pc, #44]	; (800f398 <pbuf_alloc+0x1dc>)
 800f36c:	f009 fe62 	bl	8019034 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f370:	e008      	b.n	800f384 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f372:	4b07      	ldr	r3, [pc, #28]	; (800f390 <pbuf_alloc+0x1d4>)
 800f374:	f240 1227 	movw	r2, #295	; 0x127
 800f378:	490a      	ldr	r1, [pc, #40]	; (800f3a4 <pbuf_alloc+0x1e8>)
 800f37a:	4807      	ldr	r0, [pc, #28]	; (800f398 <pbuf_alloc+0x1dc>)
 800f37c:	f009 fe5a 	bl	8019034 <iprintf>
      return NULL;
 800f380:	2300      	movs	r3, #0
 800f382:	e001      	b.n	800f388 <pbuf_alloc+0x1cc>
      break;
 800f384:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3728      	adds	r7, #40	; 0x28
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	0801a75c 	.word	0x0801a75c
 800f394:	0801a78c 	.word	0x0801a78c
 800f398:	0801a7bc 	.word	0x0801a7bc
 800f39c:	0801a7e4 	.word	0x0801a7e4
 800f3a0:	0801a818 	.word	0x0801a818
 800f3a4:	0801a844 	.word	0x0801a844

0800f3a8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b086      	sub	sp, #24
 800f3ac:	af02      	add	r7, sp, #8
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	807b      	strh	r3, [r7, #2]
 800f3b4:	4613      	mov	r3, r2
 800f3b6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f3b8:	883b      	ldrh	r3, [r7, #0]
 800f3ba:	2b41      	cmp	r3, #65	; 0x41
 800f3bc:	d009      	beq.n	800f3d2 <pbuf_alloc_reference+0x2a>
 800f3be:	883b      	ldrh	r3, [r7, #0]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d006      	beq.n	800f3d2 <pbuf_alloc_reference+0x2a>
 800f3c4:	4b0f      	ldr	r3, [pc, #60]	; (800f404 <pbuf_alloc_reference+0x5c>)
 800f3c6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f3ca:	490f      	ldr	r1, [pc, #60]	; (800f408 <pbuf_alloc_reference+0x60>)
 800f3cc:	480f      	ldr	r0, [pc, #60]	; (800f40c <pbuf_alloc_reference+0x64>)
 800f3ce:	f009 fe31 	bl	8019034 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f3d2:	200b      	movs	r0, #11
 800f3d4:	f7ff fabc 	bl	800e950 <memp_malloc>
 800f3d8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d101      	bne.n	800f3e4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	e00b      	b.n	800f3fc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f3e4:	8879      	ldrh	r1, [r7, #2]
 800f3e6:	887a      	ldrh	r2, [r7, #2]
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	9301      	str	r3, [sp, #4]
 800f3ec:	883b      	ldrh	r3, [r7, #0]
 800f3ee:	9300      	str	r3, [sp, #0]
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	6879      	ldr	r1, [r7, #4]
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f7ff feb7 	bl	800f168 <pbuf_init_alloced_pbuf>
  return p;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3710      	adds	r7, #16
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	0801a75c 	.word	0x0801a75c
 800f408:	0801a860 	.word	0x0801a860
 800f40c:	0801a7bc 	.word	0x0801a7bc

0800f410 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b088      	sub	sp, #32
 800f414:	af02      	add	r7, sp, #8
 800f416:	607b      	str	r3, [r7, #4]
 800f418:	4603      	mov	r3, r0
 800f41a:	73fb      	strb	r3, [r7, #15]
 800f41c:	460b      	mov	r3, r1
 800f41e:	81bb      	strh	r3, [r7, #12]
 800f420:	4613      	mov	r3, r2
 800f422:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f424:	7bfb      	ldrb	r3, [r7, #15]
 800f426:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f428:	8a7b      	ldrh	r3, [r7, #18]
 800f42a:	3303      	adds	r3, #3
 800f42c:	f023 0203 	bic.w	r2, r3, #3
 800f430:	89bb      	ldrh	r3, [r7, #12]
 800f432:	441a      	add	r2, r3
 800f434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f436:	429a      	cmp	r2, r3
 800f438:	d901      	bls.n	800f43e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f43a:	2300      	movs	r3, #0
 800f43c:	e018      	b.n	800f470 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f43e:	6a3b      	ldr	r3, [r7, #32]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d007      	beq.n	800f454 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f444:	8a7b      	ldrh	r3, [r7, #18]
 800f446:	3303      	adds	r3, #3
 800f448:	f023 0303 	bic.w	r3, r3, #3
 800f44c:	6a3a      	ldr	r2, [r7, #32]
 800f44e:	4413      	add	r3, r2
 800f450:	617b      	str	r3, [r7, #20]
 800f452:	e001      	b.n	800f458 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f454:	2300      	movs	r3, #0
 800f456:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	89b9      	ldrh	r1, [r7, #12]
 800f45c:	89ba      	ldrh	r2, [r7, #12]
 800f45e:	2302      	movs	r3, #2
 800f460:	9301      	str	r3, [sp, #4]
 800f462:	897b      	ldrh	r3, [r7, #10]
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	460b      	mov	r3, r1
 800f468:	6979      	ldr	r1, [r7, #20]
 800f46a:	f7ff fe7d 	bl	800f168 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f46e:	687b      	ldr	r3, [r7, #4]
}
 800f470:	4618      	mov	r0, r3
 800f472:	3718      	adds	r7, #24
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}

0800f478 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	460b      	mov	r3, r1
 800f482:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d106      	bne.n	800f498 <pbuf_realloc+0x20>
 800f48a:	4b3a      	ldr	r3, [pc, #232]	; (800f574 <pbuf_realloc+0xfc>)
 800f48c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f490:	4939      	ldr	r1, [pc, #228]	; (800f578 <pbuf_realloc+0x100>)
 800f492:	483a      	ldr	r0, [pc, #232]	; (800f57c <pbuf_realloc+0x104>)
 800f494:	f009 fdce 	bl	8019034 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	891b      	ldrh	r3, [r3, #8]
 800f49c:	887a      	ldrh	r2, [r7, #2]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d263      	bcs.n	800f56a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	891a      	ldrh	r2, [r3, #8]
 800f4a6:	887b      	ldrh	r3, [r7, #2]
 800f4a8:	1ad3      	subs	r3, r2, r3
 800f4aa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f4ac:	887b      	ldrh	r3, [r7, #2]
 800f4ae:	817b      	strh	r3, [r7, #10]
  q = p;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f4b4:	e018      	b.n	800f4e8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	895b      	ldrh	r3, [r3, #10]
 800f4ba:	897a      	ldrh	r2, [r7, #10]
 800f4bc:	1ad3      	subs	r3, r2, r3
 800f4be:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	891a      	ldrh	r2, [r3, #8]
 800f4c4:	893b      	ldrh	r3, [r7, #8]
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	b29a      	uxth	r2, r3
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d106      	bne.n	800f4e8 <pbuf_realloc+0x70>
 800f4da:	4b26      	ldr	r3, [pc, #152]	; (800f574 <pbuf_realloc+0xfc>)
 800f4dc:	f240 12af 	movw	r2, #431	; 0x1af
 800f4e0:	4927      	ldr	r1, [pc, #156]	; (800f580 <pbuf_realloc+0x108>)
 800f4e2:	4826      	ldr	r0, [pc, #152]	; (800f57c <pbuf_realloc+0x104>)
 800f4e4:	f009 fda6 	bl	8019034 <iprintf>
  while (rem_len > q->len) {
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	895b      	ldrh	r3, [r3, #10]
 800f4ec:	897a      	ldrh	r2, [r7, #10]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d8e1      	bhi.n	800f4b6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	7b1b      	ldrb	r3, [r3, #12]
 800f4f6:	f003 030f 	and.w	r3, r3, #15
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d121      	bne.n	800f542 <pbuf_realloc+0xca>
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	895b      	ldrh	r3, [r3, #10]
 800f502:	897a      	ldrh	r2, [r7, #10]
 800f504:	429a      	cmp	r2, r3
 800f506:	d01c      	beq.n	800f542 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	7b5b      	ldrb	r3, [r3, #13]
 800f50c:	f003 0302 	and.w	r3, r3, #2
 800f510:	2b00      	cmp	r3, #0
 800f512:	d116      	bne.n	800f542 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	685a      	ldr	r2, [r3, #4]
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	1ad3      	subs	r3, r2, r3
 800f51c:	b29a      	uxth	r2, r3
 800f51e:	897b      	ldrh	r3, [r7, #10]
 800f520:	4413      	add	r3, r2
 800f522:	b29b      	uxth	r3, r3
 800f524:	4619      	mov	r1, r3
 800f526:	68f8      	ldr	r0, [r7, #12]
 800f528:	f7fe ff64 	bl	800e3f4 <mem_trim>
 800f52c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d106      	bne.n	800f542 <pbuf_realloc+0xca>
 800f534:	4b0f      	ldr	r3, [pc, #60]	; (800f574 <pbuf_realloc+0xfc>)
 800f536:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f53a:	4912      	ldr	r1, [pc, #72]	; (800f584 <pbuf_realloc+0x10c>)
 800f53c:	480f      	ldr	r0, [pc, #60]	; (800f57c <pbuf_realloc+0x104>)
 800f53e:	f009 fd79 	bl	8019034 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	897a      	ldrh	r2, [r7, #10]
 800f546:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	895a      	ldrh	r2, [r3, #10]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d004      	beq.n	800f562 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4618      	mov	r0, r3
 800f55e:	f000 f911 	bl	800f784 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2200      	movs	r2, #0
 800f566:	601a      	str	r2, [r3, #0]
 800f568:	e000      	b.n	800f56c <pbuf_realloc+0xf4>
    return;
 800f56a:	bf00      	nop

}
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	0801a75c 	.word	0x0801a75c
 800f578:	0801a874 	.word	0x0801a874
 800f57c:	0801a7bc 	.word	0x0801a7bc
 800f580:	0801a88c 	.word	0x0801a88c
 800f584:	0801a8a4 	.word	0x0801a8a4

0800f588 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	4613      	mov	r3, r2
 800f594:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d106      	bne.n	800f5aa <pbuf_add_header_impl+0x22>
 800f59c:	4b2b      	ldr	r3, [pc, #172]	; (800f64c <pbuf_add_header_impl+0xc4>)
 800f59e:	f240 12df 	movw	r2, #479	; 0x1df
 800f5a2:	492b      	ldr	r1, [pc, #172]	; (800f650 <pbuf_add_header_impl+0xc8>)
 800f5a4:	482b      	ldr	r0, [pc, #172]	; (800f654 <pbuf_add_header_impl+0xcc>)
 800f5a6:	f009 fd45 	bl	8019034 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d003      	beq.n	800f5b8 <pbuf_add_header_impl+0x30>
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5b6:	d301      	bcc.n	800f5bc <pbuf_add_header_impl+0x34>
    return 1;
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	e043      	b.n	800f644 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d101      	bne.n	800f5c6 <pbuf_add_header_impl+0x3e>
    return 0;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	e03e      	b.n	800f644 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	891a      	ldrh	r2, [r3, #8]
 800f5ce:	8a7b      	ldrh	r3, [r7, #18]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	8a7a      	ldrh	r2, [r7, #18]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d901      	bls.n	800f5de <pbuf_add_header_impl+0x56>
    return 1;
 800f5da:	2301      	movs	r3, #1
 800f5dc:	e032      	b.n	800f644 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	7b1b      	ldrb	r3, [r3, #12]
 800f5e2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f5e4:	8a3b      	ldrh	r3, [r7, #16]
 800f5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00c      	beq.n	800f608 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	685a      	ldr	r2, [r3, #4]
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	425b      	negs	r3, r3
 800f5f6:	4413      	add	r3, r2
 800f5f8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	3310      	adds	r3, #16
 800f5fe:	697a      	ldr	r2, [r7, #20]
 800f600:	429a      	cmp	r2, r3
 800f602:	d20d      	bcs.n	800f620 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f604:	2301      	movs	r3, #1
 800f606:	e01d      	b.n	800f644 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f608:	79fb      	ldrb	r3, [r7, #7]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d006      	beq.n	800f61c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	685a      	ldr	r2, [r3, #4]
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	425b      	negs	r3, r3
 800f616:	4413      	add	r3, r2
 800f618:	617b      	str	r3, [r7, #20]
 800f61a:	e001      	b.n	800f620 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f61c:	2301      	movs	r3, #1
 800f61e:	e011      	b.n	800f644 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	697a      	ldr	r2, [r7, #20]
 800f624:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	895a      	ldrh	r2, [r3, #10]
 800f62a:	8a7b      	ldrh	r3, [r7, #18]
 800f62c:	4413      	add	r3, r2
 800f62e:	b29a      	uxth	r2, r3
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	891a      	ldrh	r2, [r3, #8]
 800f638:	8a7b      	ldrh	r3, [r7, #18]
 800f63a:	4413      	add	r3, r2
 800f63c:	b29a      	uxth	r2, r3
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	811a      	strh	r2, [r3, #8]


  return 0;
 800f642:	2300      	movs	r3, #0
}
 800f644:	4618      	mov	r0, r3
 800f646:	3718      	adds	r7, #24
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	0801a75c 	.word	0x0801a75c
 800f650:	0801a8c0 	.word	0x0801a8c0
 800f654:	0801a7bc 	.word	0x0801a7bc

0800f658 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f662:	2200      	movs	r2, #0
 800f664:	6839      	ldr	r1, [r7, #0]
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f7ff ff8e 	bl	800f588 <pbuf_add_header_impl>
 800f66c:	4603      	mov	r3, r0
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
	...

0800f678 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d106      	bne.n	800f696 <pbuf_remove_header+0x1e>
 800f688:	4b20      	ldr	r3, [pc, #128]	; (800f70c <pbuf_remove_header+0x94>)
 800f68a:	f240 224b 	movw	r2, #587	; 0x24b
 800f68e:	4920      	ldr	r1, [pc, #128]	; (800f710 <pbuf_remove_header+0x98>)
 800f690:	4820      	ldr	r0, [pc, #128]	; (800f714 <pbuf_remove_header+0x9c>)
 800f692:	f009 fccf 	bl	8019034 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d003      	beq.n	800f6a4 <pbuf_remove_header+0x2c>
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6a2:	d301      	bcc.n	800f6a8 <pbuf_remove_header+0x30>
    return 1;
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	e02c      	b.n	800f702 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d101      	bne.n	800f6b2 <pbuf_remove_header+0x3a>
    return 0;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	e027      	b.n	800f702 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	895b      	ldrh	r3, [r3, #10]
 800f6ba:	89fa      	ldrh	r2, [r7, #14]
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d908      	bls.n	800f6d2 <pbuf_remove_header+0x5a>
 800f6c0:	4b12      	ldr	r3, [pc, #72]	; (800f70c <pbuf_remove_header+0x94>)
 800f6c2:	f240 2255 	movw	r2, #597	; 0x255
 800f6c6:	4914      	ldr	r1, [pc, #80]	; (800f718 <pbuf_remove_header+0xa0>)
 800f6c8:	4812      	ldr	r0, [pc, #72]	; (800f714 <pbuf_remove_header+0x9c>)
 800f6ca:	f009 fcb3 	bl	8019034 <iprintf>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e017      	b.n	800f702 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	685a      	ldr	r2, [r3, #4]
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	441a      	add	r2, r3
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	895a      	ldrh	r2, [r3, #10]
 800f6e8:	89fb      	ldrh	r3, [r7, #14]
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	891a      	ldrh	r2, [r3, #8]
 800f6f6:	89fb      	ldrh	r3, [r7, #14]
 800f6f8:	1ad3      	subs	r3, r2, r3
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f700:	2300      	movs	r3, #0
}
 800f702:	4618      	mov	r0, r3
 800f704:	3710      	adds	r7, #16
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	0801a75c 	.word	0x0801a75c
 800f710:	0801a8c0 	.word	0x0801a8c0
 800f714:	0801a7bc 	.word	0x0801a7bc
 800f718:	0801a8cc 	.word	0x0801a8cc

0800f71c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	460b      	mov	r3, r1
 800f726:	807b      	strh	r3, [r7, #2]
 800f728:	4613      	mov	r3, r2
 800f72a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f72c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f730:	2b00      	cmp	r3, #0
 800f732:	da08      	bge.n	800f746 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f734:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f738:	425b      	negs	r3, r3
 800f73a:	4619      	mov	r1, r3
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f7ff ff9b 	bl	800f678 <pbuf_remove_header>
 800f742:	4603      	mov	r3, r0
 800f744:	e007      	b.n	800f756 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f746:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f74a:	787a      	ldrb	r2, [r7, #1]
 800f74c:	4619      	mov	r1, r3
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7ff ff1a 	bl	800f588 <pbuf_add_header_impl>
 800f754:	4603      	mov	r3, r0
  }
}
 800f756:	4618      	mov	r0, r3
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}

0800f75e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f75e:	b580      	push	{r7, lr}
 800f760:	b082      	sub	sp, #8
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
 800f766:	460b      	mov	r3, r1
 800f768:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f76a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f76e:	2201      	movs	r2, #1
 800f770:	4619      	mov	r1, r3
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f7ff ffd2 	bl	800f71c <pbuf_header_impl>
 800f778:	4603      	mov	r3, r0
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3708      	adds	r7, #8
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
	...

0800f784 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b088      	sub	sp, #32
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d10b      	bne.n	800f7aa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d106      	bne.n	800f7a6 <pbuf_free+0x22>
 800f798:	4b3b      	ldr	r3, [pc, #236]	; (800f888 <pbuf_free+0x104>)
 800f79a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f79e:	493b      	ldr	r1, [pc, #236]	; (800f88c <pbuf_free+0x108>)
 800f7a0:	483b      	ldr	r0, [pc, #236]	; (800f890 <pbuf_free+0x10c>)
 800f7a2:	f009 fc47 	bl	8019034 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	e069      	b.n	800f87e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f7ae:	e062      	b.n	800f876 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f7b0:	f009 fa86 	bl	8018cc0 <sys_arch_protect>
 800f7b4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	7b9b      	ldrb	r3, [r3, #14]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d106      	bne.n	800f7cc <pbuf_free+0x48>
 800f7be:	4b32      	ldr	r3, [pc, #200]	; (800f888 <pbuf_free+0x104>)
 800f7c0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f7c4:	4933      	ldr	r1, [pc, #204]	; (800f894 <pbuf_free+0x110>)
 800f7c6:	4832      	ldr	r0, [pc, #200]	; (800f890 <pbuf_free+0x10c>)
 800f7c8:	f009 fc34 	bl	8019034 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	7b9b      	ldrb	r3, [r3, #14]
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	b2da      	uxtb	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	739a      	strb	r2, [r3, #14]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	7b9b      	ldrb	r3, [r3, #14]
 800f7dc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f7de:	69b8      	ldr	r0, [r7, #24]
 800f7e0:	f009 fa7c 	bl	8018cdc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f7e4:	7dfb      	ldrb	r3, [r7, #23]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d143      	bne.n	800f872 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	7b1b      	ldrb	r3, [r3, #12]
 800f7f4:	f003 030f 	and.w	r3, r3, #15
 800f7f8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	7b5b      	ldrb	r3, [r3, #13]
 800f7fe:	f003 0302 	and.w	r3, r3, #2
 800f802:	2b00      	cmp	r3, #0
 800f804:	d011      	beq.n	800f82a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	691b      	ldr	r3, [r3, #16]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d106      	bne.n	800f820 <pbuf_free+0x9c>
 800f812:	4b1d      	ldr	r3, [pc, #116]	; (800f888 <pbuf_free+0x104>)
 800f814:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f818:	491f      	ldr	r1, [pc, #124]	; (800f898 <pbuf_free+0x114>)
 800f81a:	481d      	ldr	r0, [pc, #116]	; (800f890 <pbuf_free+0x10c>)
 800f81c:	f009 fc0a 	bl	8019034 <iprintf>
        pc->custom_free_function(p);
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	691b      	ldr	r3, [r3, #16]
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	4798      	blx	r3
 800f828:	e01d      	b.n	800f866 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f82a:	7bfb      	ldrb	r3, [r7, #15]
 800f82c:	2b02      	cmp	r3, #2
 800f82e:	d104      	bne.n	800f83a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f830:	6879      	ldr	r1, [r7, #4]
 800f832:	200c      	movs	r0, #12
 800f834:	f7ff f902 	bl	800ea3c <memp_free>
 800f838:	e015      	b.n	800f866 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f83a:	7bfb      	ldrb	r3, [r7, #15]
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	d104      	bne.n	800f84a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f840:	6879      	ldr	r1, [r7, #4]
 800f842:	200b      	movs	r0, #11
 800f844:	f7ff f8fa 	bl	800ea3c <memp_free>
 800f848:	e00d      	b.n	800f866 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f84a:	7bfb      	ldrb	r3, [r7, #15]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d103      	bne.n	800f858 <pbuf_free+0xd4>
          mem_free(p);
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f7fe fd3f 	bl	800e2d4 <mem_free>
 800f856:	e006      	b.n	800f866 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f858:	4b0b      	ldr	r3, [pc, #44]	; (800f888 <pbuf_free+0x104>)
 800f85a:	f240 320f 	movw	r2, #783	; 0x30f
 800f85e:	490f      	ldr	r1, [pc, #60]	; (800f89c <pbuf_free+0x118>)
 800f860:	480b      	ldr	r0, [pc, #44]	; (800f890 <pbuf_free+0x10c>)
 800f862:	f009 fbe7 	bl	8019034 <iprintf>
        }
      }
      count++;
 800f866:	7ffb      	ldrb	r3, [r7, #31]
 800f868:	3301      	adds	r3, #1
 800f86a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	607b      	str	r3, [r7, #4]
 800f870:	e001      	b.n	800f876 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f872:	2300      	movs	r3, #0
 800f874:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d199      	bne.n	800f7b0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f87c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3720      	adds	r7, #32
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	0801a75c 	.word	0x0801a75c
 800f88c:	0801a8c0 	.word	0x0801a8c0
 800f890:	0801a7bc 	.word	0x0801a7bc
 800f894:	0801a8ec 	.word	0x0801a8ec
 800f898:	0801a904 	.word	0x0801a904
 800f89c:	0801a928 	.word	0x0801a928

0800f8a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f8ac:	e005      	b.n	800f8ba <pbuf_clen+0x1a>
    ++len;
 800f8ae:	89fb      	ldrh	r3, [r7, #14]
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d1f6      	bne.n	800f8ae <pbuf_clen+0xe>
  }
  return len;
 800f8c0:	89fb      	ldrh	r3, [r7, #14]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3714      	adds	r7, #20
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr
	...

0800f8d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d016      	beq.n	800f90c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f8de:	f009 f9ef 	bl	8018cc0 <sys_arch_protect>
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	7b9b      	ldrb	r3, [r3, #14]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	b2da      	uxtb	r2, r3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	739a      	strb	r2, [r3, #14]
 800f8f0:	68f8      	ldr	r0, [r7, #12]
 800f8f2:	f009 f9f3 	bl	8018cdc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	7b9b      	ldrb	r3, [r3, #14]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d106      	bne.n	800f90c <pbuf_ref+0x3c>
 800f8fe:	4b05      	ldr	r3, [pc, #20]	; (800f914 <pbuf_ref+0x44>)
 800f900:	f240 3242 	movw	r2, #834	; 0x342
 800f904:	4904      	ldr	r1, [pc, #16]	; (800f918 <pbuf_ref+0x48>)
 800f906:	4805      	ldr	r0, [pc, #20]	; (800f91c <pbuf_ref+0x4c>)
 800f908:	f009 fb94 	bl	8019034 <iprintf>
  }
}
 800f90c:	bf00      	nop
 800f90e:	3710      	adds	r7, #16
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	0801a75c 	.word	0x0801a75c
 800f918:	0801a93c 	.word	0x0801a93c
 800f91c:	0801a7bc 	.word	0x0801a7bc

0800f920 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d002      	beq.n	800f936 <pbuf_cat+0x16>
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d107      	bne.n	800f946 <pbuf_cat+0x26>
 800f936:	4b20      	ldr	r3, [pc, #128]	; (800f9b8 <pbuf_cat+0x98>)
 800f938:	f240 3259 	movw	r2, #857	; 0x359
 800f93c:	491f      	ldr	r1, [pc, #124]	; (800f9bc <pbuf_cat+0x9c>)
 800f93e:	4820      	ldr	r0, [pc, #128]	; (800f9c0 <pbuf_cat+0xa0>)
 800f940:	f009 fb78 	bl	8019034 <iprintf>
 800f944:	e034      	b.n	800f9b0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	60fb      	str	r3, [r7, #12]
 800f94a:	e00a      	b.n	800f962 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	891a      	ldrh	r2, [r3, #8]
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	891b      	ldrh	r3, [r3, #8]
 800f954:	4413      	add	r3, r2
 800f956:	b29a      	uxth	r2, r3
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	60fb      	str	r3, [r7, #12]
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d1f0      	bne.n	800f94c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	891a      	ldrh	r2, [r3, #8]
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	895b      	ldrh	r3, [r3, #10]
 800f972:	429a      	cmp	r2, r3
 800f974:	d006      	beq.n	800f984 <pbuf_cat+0x64>
 800f976:	4b10      	ldr	r3, [pc, #64]	; (800f9b8 <pbuf_cat+0x98>)
 800f978:	f240 3262 	movw	r2, #866	; 0x362
 800f97c:	4911      	ldr	r1, [pc, #68]	; (800f9c4 <pbuf_cat+0xa4>)
 800f97e:	4810      	ldr	r0, [pc, #64]	; (800f9c0 <pbuf_cat+0xa0>)
 800f980:	f009 fb58 	bl	8019034 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d006      	beq.n	800f99a <pbuf_cat+0x7a>
 800f98c:	4b0a      	ldr	r3, [pc, #40]	; (800f9b8 <pbuf_cat+0x98>)
 800f98e:	f240 3263 	movw	r2, #867	; 0x363
 800f992:	490d      	ldr	r1, [pc, #52]	; (800f9c8 <pbuf_cat+0xa8>)
 800f994:	480a      	ldr	r0, [pc, #40]	; (800f9c0 <pbuf_cat+0xa0>)
 800f996:	f009 fb4d 	bl	8019034 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	891a      	ldrh	r2, [r3, #8]
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	891b      	ldrh	r3, [r3, #8]
 800f9a2:	4413      	add	r3, r2
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	683a      	ldr	r2, [r7, #0]
 800f9ae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f9b0:	3710      	adds	r7, #16
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	0801a75c 	.word	0x0801a75c
 800f9bc:	0801a950 	.word	0x0801a950
 800f9c0:	0801a7bc 	.word	0x0801a7bc
 800f9c4:	0801a988 	.word	0x0801a988
 800f9c8:	0801a9b8 	.word	0x0801a9b8

0800f9cc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f9d6:	6839      	ldr	r1, [r7, #0]
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7ff ffa1 	bl	800f920 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f9de:	6838      	ldr	r0, [r7, #0]
 800f9e0:	f7ff ff76 	bl	800f8d0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f9e4:	bf00      	nop
 800f9e6:	3708      	adds	r7, #8
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b086      	sub	sp, #24
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	617b      	str	r3, [r7, #20]
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d008      	beq.n	800fa16 <pbuf_copy+0x2a>
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d005      	beq.n	800fa16 <pbuf_copy+0x2a>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	891a      	ldrh	r2, [r3, #8]
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	891b      	ldrh	r3, [r3, #8]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d209      	bcs.n	800fa2a <pbuf_copy+0x3e>
 800fa16:	4b57      	ldr	r3, [pc, #348]	; (800fb74 <pbuf_copy+0x188>)
 800fa18:	f240 32c9 	movw	r2, #969	; 0x3c9
 800fa1c:	4956      	ldr	r1, [pc, #344]	; (800fb78 <pbuf_copy+0x18c>)
 800fa1e:	4857      	ldr	r0, [pc, #348]	; (800fb7c <pbuf_copy+0x190>)
 800fa20:	f009 fb08 	bl	8019034 <iprintf>
 800fa24:	f06f 030f 	mvn.w	r3, #15
 800fa28:	e09f      	b.n	800fb6a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	895b      	ldrh	r3, [r3, #10]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	1ad2      	subs	r2, r2, r3
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	895b      	ldrh	r3, [r3, #10]
 800fa38:	4619      	mov	r1, r3
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	1acb      	subs	r3, r1, r3
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d306      	bcc.n	800fa50 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	895b      	ldrh	r3, [r3, #10]
 800fa46:	461a      	mov	r2, r3
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	1ad3      	subs	r3, r2, r3
 800fa4c:	60fb      	str	r3, [r7, #12]
 800fa4e:	e005      	b.n	800fa5c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	895b      	ldrh	r3, [r3, #10]
 800fa54:	461a      	mov	r2, r3
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	1ad3      	subs	r3, r2, r3
 800fa5a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	685a      	ldr	r2, [r3, #4]
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	18d0      	adds	r0, r2, r3
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	685a      	ldr	r2, [r3, #4]
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	4413      	add	r3, r2
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	4619      	mov	r1, r3
 800fa70:	f009 fa6f 	bl	8018f52 <memcpy>
    offset_to += len;
 800fa74:	697a      	ldr	r2, [r7, #20]
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	4413      	add	r3, r2
 800fa7a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800fa7c:	693a      	ldr	r2, [r7, #16]
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	4413      	add	r3, r2
 800fa82:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	895b      	ldrh	r3, [r3, #10]
 800fa88:	461a      	mov	r2, r3
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d906      	bls.n	800fa9e <pbuf_copy+0xb2>
 800fa90:	4b38      	ldr	r3, [pc, #224]	; (800fb74 <pbuf_copy+0x188>)
 800fa92:	f240 32d9 	movw	r2, #985	; 0x3d9
 800fa96:	493a      	ldr	r1, [pc, #232]	; (800fb80 <pbuf_copy+0x194>)
 800fa98:	4838      	ldr	r0, [pc, #224]	; (800fb7c <pbuf_copy+0x190>)
 800fa9a:	f009 facb 	bl	8019034 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	895b      	ldrh	r3, [r3, #10]
 800faa2:	461a      	mov	r2, r3
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d906      	bls.n	800fab8 <pbuf_copy+0xcc>
 800faaa:	4b32      	ldr	r3, [pc, #200]	; (800fb74 <pbuf_copy+0x188>)
 800faac:	f240 32da 	movw	r2, #986	; 0x3da
 800fab0:	4934      	ldr	r1, [pc, #208]	; (800fb84 <pbuf_copy+0x198>)
 800fab2:	4832      	ldr	r0, [pc, #200]	; (800fb7c <pbuf_copy+0x190>)
 800fab4:	f009 fabe 	bl	8019034 <iprintf>
    if (offset_from >= p_from->len) {
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	895b      	ldrh	r3, [r3, #10]
 800fabc:	461a      	mov	r2, r3
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d304      	bcc.n	800face <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800fac4:	2300      	movs	r3, #0
 800fac6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	895b      	ldrh	r3, [r3, #10]
 800fad2:	461a      	mov	r2, r3
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d114      	bne.n	800fb04 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800fada:	2300      	movs	r3, #0
 800fadc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d10c      	bne.n	800fb04 <pbuf_copy+0x118>
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d009      	beq.n	800fb04 <pbuf_copy+0x118>
 800faf0:	4b20      	ldr	r3, [pc, #128]	; (800fb74 <pbuf_copy+0x188>)
 800faf2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800faf6:	4924      	ldr	r1, [pc, #144]	; (800fb88 <pbuf_copy+0x19c>)
 800faf8:	4820      	ldr	r0, [pc, #128]	; (800fb7c <pbuf_copy+0x190>)
 800fafa:	f009 fa9b 	bl	8019034 <iprintf>
 800fafe:	f06f 030f 	mvn.w	r3, #15
 800fb02:	e032      	b.n	800fb6a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d013      	beq.n	800fb32 <pbuf_copy+0x146>
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	895a      	ldrh	r2, [r3, #10]
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	891b      	ldrh	r3, [r3, #8]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d10d      	bne.n	800fb32 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d009      	beq.n	800fb32 <pbuf_copy+0x146>
 800fb1e:	4b15      	ldr	r3, [pc, #84]	; (800fb74 <pbuf_copy+0x188>)
 800fb20:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800fb24:	4919      	ldr	r1, [pc, #100]	; (800fb8c <pbuf_copy+0x1a0>)
 800fb26:	4815      	ldr	r0, [pc, #84]	; (800fb7c <pbuf_copy+0x190>)
 800fb28:	f009 fa84 	bl	8019034 <iprintf>
 800fb2c:	f06f 0305 	mvn.w	r3, #5
 800fb30:	e01b      	b.n	800fb6a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d013      	beq.n	800fb60 <pbuf_copy+0x174>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	895a      	ldrh	r2, [r3, #10]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	891b      	ldrh	r3, [r3, #8]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d10d      	bne.n	800fb60 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d009      	beq.n	800fb60 <pbuf_copy+0x174>
 800fb4c:	4b09      	ldr	r3, [pc, #36]	; (800fb74 <pbuf_copy+0x188>)
 800fb4e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800fb52:	490e      	ldr	r1, [pc, #56]	; (800fb8c <pbuf_copy+0x1a0>)
 800fb54:	4809      	ldr	r0, [pc, #36]	; (800fb7c <pbuf_copy+0x190>)
 800fb56:	f009 fa6d 	bl	8019034 <iprintf>
 800fb5a:	f06f 0305 	mvn.w	r3, #5
 800fb5e:	e004      	b.n	800fb6a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	f47f af61 	bne.w	800fa2a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fb68:	2300      	movs	r3, #0
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3718      	adds	r7, #24
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}
 800fb72:	bf00      	nop
 800fb74:	0801a75c 	.word	0x0801a75c
 800fb78:	0801aa04 	.word	0x0801aa04
 800fb7c:	0801a7bc 	.word	0x0801a7bc
 800fb80:	0801aa34 	.word	0x0801aa34
 800fb84:	0801aa4c 	.word	0x0801aa4c
 800fb88:	0801aa68 	.word	0x0801aa68
 800fb8c:	0801aa78 	.word	0x0801aa78

0800fb90 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b088      	sub	sp, #32
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	4611      	mov	r1, r2
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	460b      	mov	r3, r1
 800fba0:	80fb      	strh	r3, [r7, #6]
 800fba2:	4613      	mov	r3, r2
 800fba4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800fba6:	2300      	movs	r3, #0
 800fba8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d108      	bne.n	800fbc6 <pbuf_copy_partial+0x36>
 800fbb4:	4b2b      	ldr	r3, [pc, #172]	; (800fc64 <pbuf_copy_partial+0xd4>)
 800fbb6:	f240 420a 	movw	r2, #1034	; 0x40a
 800fbba:	492b      	ldr	r1, [pc, #172]	; (800fc68 <pbuf_copy_partial+0xd8>)
 800fbbc:	482b      	ldr	r0, [pc, #172]	; (800fc6c <pbuf_copy_partial+0xdc>)
 800fbbe:	f009 fa39 	bl	8019034 <iprintf>
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	e04a      	b.n	800fc5c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d108      	bne.n	800fbde <pbuf_copy_partial+0x4e>
 800fbcc:	4b25      	ldr	r3, [pc, #148]	; (800fc64 <pbuf_copy_partial+0xd4>)
 800fbce:	f240 420b 	movw	r2, #1035	; 0x40b
 800fbd2:	4927      	ldr	r1, [pc, #156]	; (800fc70 <pbuf_copy_partial+0xe0>)
 800fbd4:	4825      	ldr	r0, [pc, #148]	; (800fc6c <pbuf_copy_partial+0xdc>)
 800fbd6:	f009 fa2d 	bl	8019034 <iprintf>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	e03e      	b.n	800fc5c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	61fb      	str	r3, [r7, #28]
 800fbe2:	e034      	b.n	800fc4e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800fbe4:	88bb      	ldrh	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d00a      	beq.n	800fc00 <pbuf_copy_partial+0x70>
 800fbea:	69fb      	ldr	r3, [r7, #28]
 800fbec:	895b      	ldrh	r3, [r3, #10]
 800fbee:	88ba      	ldrh	r2, [r7, #4]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d305      	bcc.n	800fc00 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	895b      	ldrh	r3, [r3, #10]
 800fbf8:	88ba      	ldrh	r2, [r7, #4]
 800fbfa:	1ad3      	subs	r3, r2, r3
 800fbfc:	80bb      	strh	r3, [r7, #4]
 800fbfe:	e023      	b.n	800fc48 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	895a      	ldrh	r2, [r3, #10]
 800fc04:	88bb      	ldrh	r3, [r7, #4]
 800fc06:	1ad3      	subs	r3, r2, r3
 800fc08:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800fc0a:	8b3a      	ldrh	r2, [r7, #24]
 800fc0c:	88fb      	ldrh	r3, [r7, #6]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d901      	bls.n	800fc16 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800fc12:	88fb      	ldrh	r3, [r7, #6]
 800fc14:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800fc16:	8b7b      	ldrh	r3, [r7, #26]
 800fc18:	68ba      	ldr	r2, [r7, #8]
 800fc1a:	18d0      	adds	r0, r2, r3
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	685a      	ldr	r2, [r3, #4]
 800fc20:	88bb      	ldrh	r3, [r7, #4]
 800fc22:	4413      	add	r3, r2
 800fc24:	8b3a      	ldrh	r2, [r7, #24]
 800fc26:	4619      	mov	r1, r3
 800fc28:	f009 f993 	bl	8018f52 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800fc2c:	8afa      	ldrh	r2, [r7, #22]
 800fc2e:	8b3b      	ldrh	r3, [r7, #24]
 800fc30:	4413      	add	r3, r2
 800fc32:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800fc34:	8b7a      	ldrh	r2, [r7, #26]
 800fc36:	8b3b      	ldrh	r3, [r7, #24]
 800fc38:	4413      	add	r3, r2
 800fc3a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800fc3c:	88fa      	ldrh	r2, [r7, #6]
 800fc3e:	8b3b      	ldrh	r3, [r7, #24]
 800fc40:	1ad3      	subs	r3, r2, r3
 800fc42:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800fc44:	2300      	movs	r3, #0
 800fc46:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	61fb      	str	r3, [r7, #28]
 800fc4e:	88fb      	ldrh	r3, [r7, #6]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d002      	beq.n	800fc5a <pbuf_copy_partial+0xca>
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d1c4      	bne.n	800fbe4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800fc5a:	8afb      	ldrh	r3, [r7, #22]
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3720      	adds	r7, #32
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	0801a75c 	.word	0x0801a75c
 800fc68:	0801aaa4 	.word	0x0801aaa4
 800fc6c:	0801a7bc 	.word	0x0801a7bc
 800fc70:	0801aac4 	.word	0x0801aac4

0800fc74 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b084      	sub	sp, #16
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	603a      	str	r2, [r7, #0]
 800fc7e:	71fb      	strb	r3, [r7, #7]
 800fc80:	460b      	mov	r3, r1
 800fc82:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	8919      	ldrh	r1, [r3, #8]
 800fc88:	88ba      	ldrh	r2, [r7, #4]
 800fc8a:	79fb      	ldrb	r3, [r7, #7]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7ff fa95 	bl	800f1bc <pbuf_alloc>
 800fc92:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d101      	bne.n	800fc9e <pbuf_clone+0x2a>
    return NULL;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	e011      	b.n	800fcc2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800fc9e:	6839      	ldr	r1, [r7, #0]
 800fca0:	68f8      	ldr	r0, [r7, #12]
 800fca2:	f7ff fea3 	bl	800f9ec <pbuf_copy>
 800fca6:	4603      	mov	r3, r0
 800fca8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800fcaa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d006      	beq.n	800fcc0 <pbuf_clone+0x4c>
 800fcb2:	4b06      	ldr	r3, [pc, #24]	; (800fccc <pbuf_clone+0x58>)
 800fcb4:	f240 5224 	movw	r2, #1316	; 0x524
 800fcb8:	4905      	ldr	r1, [pc, #20]	; (800fcd0 <pbuf_clone+0x5c>)
 800fcba:	4806      	ldr	r0, [pc, #24]	; (800fcd4 <pbuf_clone+0x60>)
 800fcbc:	f009 f9ba 	bl	8019034 <iprintf>
  return q;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3710      	adds	r7, #16
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	0801a75c 	.word	0x0801a75c
 800fcd0:	0801abd0 	.word	0x0801abd0
 800fcd4:	0801a7bc 	.word	0x0801a7bc

0800fcd8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fcdc:	f009 f9c2 	bl	8019064 <rand>
 800fce0:	4603      	mov	r3, r0
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fcee:	b29a      	uxth	r2, r3
 800fcf0:	4b01      	ldr	r3, [pc, #4]	; (800fcf8 <tcp_init+0x20>)
 800fcf2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fcf4:	bf00      	nop
 800fcf6:	bd80      	pop	{r7, pc}
 800fcf8:	24000030 	.word	0x24000030

0800fcfc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	7d1b      	ldrb	r3, [r3, #20]
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d105      	bne.n	800fd18 <tcp_free+0x1c>
 800fd0c:	4b06      	ldr	r3, [pc, #24]	; (800fd28 <tcp_free+0x2c>)
 800fd0e:	22d4      	movs	r2, #212	; 0xd4
 800fd10:	4906      	ldr	r1, [pc, #24]	; (800fd2c <tcp_free+0x30>)
 800fd12:	4807      	ldr	r0, [pc, #28]	; (800fd30 <tcp_free+0x34>)
 800fd14:	f009 f98e 	bl	8019034 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fd18:	6879      	ldr	r1, [r7, #4]
 800fd1a:	2001      	movs	r0, #1
 800fd1c:	f7fe fe8e 	bl	800ea3c <memp_free>
}
 800fd20:	bf00      	nop
 800fd22:	3708      	adds	r7, #8
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	0801ac5c 	.word	0x0801ac5c
 800fd2c:	0801ac8c 	.word	0x0801ac8c
 800fd30:	0801aca0 	.word	0x0801aca0

0800fd34 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	7d1b      	ldrb	r3, [r3, #20]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d105      	bne.n	800fd50 <tcp_free_listen+0x1c>
 800fd44:	4b06      	ldr	r3, [pc, #24]	; (800fd60 <tcp_free_listen+0x2c>)
 800fd46:	22df      	movs	r2, #223	; 0xdf
 800fd48:	4906      	ldr	r1, [pc, #24]	; (800fd64 <tcp_free_listen+0x30>)
 800fd4a:	4807      	ldr	r0, [pc, #28]	; (800fd68 <tcp_free_listen+0x34>)
 800fd4c:	f009 f972 	bl	8019034 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fd50:	6879      	ldr	r1, [r7, #4]
 800fd52:	2002      	movs	r0, #2
 800fd54:	f7fe fe72 	bl	800ea3c <memp_free>
}
 800fd58:	bf00      	nop
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	0801ac5c 	.word	0x0801ac5c
 800fd64:	0801acc8 	.word	0x0801acc8
 800fd68:	0801aca0 	.word	0x0801aca0

0800fd6c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fd70:	f001 f85c 	bl	8010e2c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fd74:	4b07      	ldr	r3, [pc, #28]	; (800fd94 <tcp_tmr+0x28>)
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	b2da      	uxtb	r2, r3
 800fd7c:	4b05      	ldr	r3, [pc, #20]	; (800fd94 <tcp_tmr+0x28>)
 800fd7e:	701a      	strb	r2, [r3, #0]
 800fd80:	4b04      	ldr	r3, [pc, #16]	; (800fd94 <tcp_tmr+0x28>)
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	f003 0301 	and.w	r3, r3, #1
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d001      	beq.n	800fd90 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fd8c:	f000 fd0e 	bl	80107ac <tcp_slowtmr>
  }
}
 800fd90:	bf00      	nop
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	24004121 	.word	0x24004121

0800fd98 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d105      	bne.n	800fdb4 <tcp_remove_listener+0x1c>
 800fda8:	4b0d      	ldr	r3, [pc, #52]	; (800fde0 <tcp_remove_listener+0x48>)
 800fdaa:	22ff      	movs	r2, #255	; 0xff
 800fdac:	490d      	ldr	r1, [pc, #52]	; (800fde4 <tcp_remove_listener+0x4c>)
 800fdae:	480e      	ldr	r0, [pc, #56]	; (800fde8 <tcp_remove_listener+0x50>)
 800fdb0:	f009 f940 	bl	8019034 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	60fb      	str	r3, [r7, #12]
 800fdb8:	e00a      	b.n	800fdd0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fdbe:	683a      	ldr	r2, [r7, #0]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d102      	bne.n	800fdca <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	60fb      	str	r3, [r7, #12]
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d1f1      	bne.n	800fdba <tcp_remove_listener+0x22>
    }
  }
}
 800fdd6:	bf00      	nop
 800fdd8:	bf00      	nop
 800fdda:	3710      	adds	r7, #16
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	0801ac5c 	.word	0x0801ac5c
 800fde4:	0801ace4 	.word	0x0801ace4
 800fde8:	0801aca0 	.word	0x0801aca0

0800fdec <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b084      	sub	sp, #16
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d106      	bne.n	800fe08 <tcp_listen_closed+0x1c>
 800fdfa:	4b14      	ldr	r3, [pc, #80]	; (800fe4c <tcp_listen_closed+0x60>)
 800fdfc:	f240 1211 	movw	r2, #273	; 0x111
 800fe00:	4913      	ldr	r1, [pc, #76]	; (800fe50 <tcp_listen_closed+0x64>)
 800fe02:	4814      	ldr	r0, [pc, #80]	; (800fe54 <tcp_listen_closed+0x68>)
 800fe04:	f009 f916 	bl	8019034 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	7d1b      	ldrb	r3, [r3, #20]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d006      	beq.n	800fe1e <tcp_listen_closed+0x32>
 800fe10:	4b0e      	ldr	r3, [pc, #56]	; (800fe4c <tcp_listen_closed+0x60>)
 800fe12:	f44f 7289 	mov.w	r2, #274	; 0x112
 800fe16:	4910      	ldr	r1, [pc, #64]	; (800fe58 <tcp_listen_closed+0x6c>)
 800fe18:	480e      	ldr	r0, [pc, #56]	; (800fe54 <tcp_listen_closed+0x68>)
 800fe1a:	f009 f90b 	bl	8019034 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fe1e:	2301      	movs	r3, #1
 800fe20:	60fb      	str	r3, [r7, #12]
 800fe22:	e00b      	b.n	800fe3c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fe24:	4a0d      	ldr	r2, [pc, #52]	; (800fe5c <tcp_listen_closed+0x70>)
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	6879      	ldr	r1, [r7, #4]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7ff ffb1 	bl	800fd98 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	60fb      	str	r3, [r7, #12]
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2b03      	cmp	r3, #3
 800fe40:	d9f0      	bls.n	800fe24 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fe42:	bf00      	nop
 800fe44:	bf00      	nop
 800fe46:	3710      	adds	r7, #16
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	0801ac5c 	.word	0x0801ac5c
 800fe50:	0801ad0c 	.word	0x0801ad0c
 800fe54:	0801aca0 	.word	0x0801aca0
 800fe58:	0801ad18 	.word	0x0801ad18
 800fe5c:	0801d48c 	.word	0x0801d48c

0800fe60 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fe60:	b5b0      	push	{r4, r5, r7, lr}
 800fe62:	b088      	sub	sp, #32
 800fe64:	af04      	add	r7, sp, #16
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	460b      	mov	r3, r1
 800fe6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d106      	bne.n	800fe80 <tcp_close_shutdown+0x20>
 800fe72:	4b63      	ldr	r3, [pc, #396]	; (8010000 <tcp_close_shutdown+0x1a0>)
 800fe74:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800fe78:	4962      	ldr	r1, [pc, #392]	; (8010004 <tcp_close_shutdown+0x1a4>)
 800fe7a:	4863      	ldr	r0, [pc, #396]	; (8010008 <tcp_close_shutdown+0x1a8>)
 800fe7c:	f009 f8da 	bl	8019034 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fe80:	78fb      	ldrb	r3, [r7, #3]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d066      	beq.n	800ff54 <tcp_close_shutdown+0xf4>
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	7d1b      	ldrb	r3, [r3, #20]
 800fe8a:	2b04      	cmp	r3, #4
 800fe8c:	d003      	beq.n	800fe96 <tcp_close_shutdown+0x36>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	7d1b      	ldrb	r3, [r3, #20]
 800fe92:	2b07      	cmp	r3, #7
 800fe94:	d15e      	bne.n	800ff54 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d104      	bne.n	800fea8 <tcp_close_shutdown+0x48>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fea2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fea6:	d055      	beq.n	800ff54 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	8b5b      	ldrh	r3, [r3, #26]
 800feac:	f003 0310 	and.w	r3, r3, #16
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d106      	bne.n	800fec2 <tcp_close_shutdown+0x62>
 800feb4:	4b52      	ldr	r3, [pc, #328]	; (8010000 <tcp_close_shutdown+0x1a0>)
 800feb6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800feba:	4954      	ldr	r1, [pc, #336]	; (801000c <tcp_close_shutdown+0x1ac>)
 800febc:	4852      	ldr	r0, [pc, #328]	; (8010008 <tcp_close_shutdown+0x1a8>)
 800febe:	f009 f8b9 	bl	8019034 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800feca:	687d      	ldr	r5, [r7, #4]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	3304      	adds	r3, #4
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	8ad2      	ldrh	r2, [r2, #22]
 800fed4:	6879      	ldr	r1, [r7, #4]
 800fed6:	8b09      	ldrh	r1, [r1, #24]
 800fed8:	9102      	str	r1, [sp, #8]
 800feda:	9201      	str	r2, [sp, #4]
 800fedc:	9300      	str	r3, [sp, #0]
 800fede:	462b      	mov	r3, r5
 800fee0:	4622      	mov	r2, r4
 800fee2:	4601      	mov	r1, r0
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f005 fd85 	bl	80159f4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f001 fb66 	bl	80115bc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fef0:	4b47      	ldr	r3, [pc, #284]	; (8010010 <tcp_close_shutdown+0x1b0>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d105      	bne.n	800ff06 <tcp_close_shutdown+0xa6>
 800fefa:	4b45      	ldr	r3, [pc, #276]	; (8010010 <tcp_close_shutdown+0x1b0>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	68db      	ldr	r3, [r3, #12]
 800ff00:	4a43      	ldr	r2, [pc, #268]	; (8010010 <tcp_close_shutdown+0x1b0>)
 800ff02:	6013      	str	r3, [r2, #0]
 800ff04:	e013      	b.n	800ff2e <tcp_close_shutdown+0xce>
 800ff06:	4b42      	ldr	r3, [pc, #264]	; (8010010 <tcp_close_shutdown+0x1b0>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	60fb      	str	r3, [r7, #12]
 800ff0c:	e00c      	b.n	800ff28 <tcp_close_shutdown+0xc8>
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	68db      	ldr	r3, [r3, #12]
 800ff12:	687a      	ldr	r2, [r7, #4]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d104      	bne.n	800ff22 <tcp_close_shutdown+0xc2>
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	68da      	ldr	r2, [r3, #12]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	60da      	str	r2, [r3, #12]
 800ff20:	e005      	b.n	800ff2e <tcp_close_shutdown+0xce>
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	68db      	ldr	r3, [r3, #12]
 800ff26:	60fb      	str	r3, [r7, #12]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d1ef      	bne.n	800ff0e <tcp_close_shutdown+0xae>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2200      	movs	r2, #0
 800ff32:	60da      	str	r2, [r3, #12]
 800ff34:	4b37      	ldr	r3, [pc, #220]	; (8010014 <tcp_close_shutdown+0x1b4>)
 800ff36:	2201      	movs	r2, #1
 800ff38:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ff3a:	4b37      	ldr	r3, [pc, #220]	; (8010018 <tcp_close_shutdown+0x1b8>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d102      	bne.n	800ff4a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ff44:	f003 fffa 	bl	8013f3c <tcp_trigger_input_pcb_close>
 800ff48:	e002      	b.n	800ff50 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f7ff fed6 	bl	800fcfc <tcp_free>
      }
      return ERR_OK;
 800ff50:	2300      	movs	r3, #0
 800ff52:	e050      	b.n	800fff6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	7d1b      	ldrb	r3, [r3, #20]
 800ff58:	2b02      	cmp	r3, #2
 800ff5a:	d03b      	beq.n	800ffd4 <tcp_close_shutdown+0x174>
 800ff5c:	2b02      	cmp	r3, #2
 800ff5e:	dc44      	bgt.n	800ffea <tcp_close_shutdown+0x18a>
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d002      	beq.n	800ff6a <tcp_close_shutdown+0x10a>
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d02a      	beq.n	800ffbe <tcp_close_shutdown+0x15e>
 800ff68:	e03f      	b.n	800ffea <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	8adb      	ldrh	r3, [r3, #22]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d021      	beq.n	800ffb6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ff72:	4b2a      	ldr	r3, [pc, #168]	; (801001c <tcp_close_shutdown+0x1bc>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d105      	bne.n	800ff88 <tcp_close_shutdown+0x128>
 800ff7c:	4b27      	ldr	r3, [pc, #156]	; (801001c <tcp_close_shutdown+0x1bc>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	68db      	ldr	r3, [r3, #12]
 800ff82:	4a26      	ldr	r2, [pc, #152]	; (801001c <tcp_close_shutdown+0x1bc>)
 800ff84:	6013      	str	r3, [r2, #0]
 800ff86:	e013      	b.n	800ffb0 <tcp_close_shutdown+0x150>
 800ff88:	4b24      	ldr	r3, [pc, #144]	; (801001c <tcp_close_shutdown+0x1bc>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	60bb      	str	r3, [r7, #8]
 800ff8e:	e00c      	b.n	800ffaa <tcp_close_shutdown+0x14a>
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d104      	bne.n	800ffa4 <tcp_close_shutdown+0x144>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	68da      	ldr	r2, [r3, #12]
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	60da      	str	r2, [r3, #12]
 800ffa2:	e005      	b.n	800ffb0 <tcp_close_shutdown+0x150>
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	60bb      	str	r3, [r7, #8]
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d1ef      	bne.n	800ff90 <tcp_close_shutdown+0x130>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f7ff fea0 	bl	800fcfc <tcp_free>
      break;
 800ffbc:	e01a      	b.n	800fff4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f7ff ff14 	bl	800fdec <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ffc4:	6879      	ldr	r1, [r7, #4]
 800ffc6:	4816      	ldr	r0, [pc, #88]	; (8010020 <tcp_close_shutdown+0x1c0>)
 800ffc8:	f001 fb48 	bl	801165c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f7ff feb1 	bl	800fd34 <tcp_free_listen>
      break;
 800ffd2:	e00f      	b.n	800fff4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ffd4:	6879      	ldr	r1, [r7, #4]
 800ffd6:	480e      	ldr	r0, [pc, #56]	; (8010010 <tcp_close_shutdown+0x1b0>)
 800ffd8:	f001 fb40 	bl	801165c <tcp_pcb_remove>
 800ffdc:	4b0d      	ldr	r3, [pc, #52]	; (8010014 <tcp_close_shutdown+0x1b4>)
 800ffde:	2201      	movs	r2, #1
 800ffe0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f7ff fe8a 	bl	800fcfc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ffe8:	e004      	b.n	800fff4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 f81a 	bl	8010024 <tcp_close_shutdown_fin>
 800fff0:	4603      	mov	r3, r0
 800fff2:	e000      	b.n	800fff6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bdb0      	pop	{r4, r5, r7, pc}
 800fffe:	bf00      	nop
 8010000:	0801ac5c 	.word	0x0801ac5c
 8010004:	0801ad30 	.word	0x0801ad30
 8010008:	0801aca0 	.word	0x0801aca0
 801000c:	0801ad50 	.word	0x0801ad50
 8010010:	2400785c 	.word	0x2400785c
 8010014:	24007858 	.word	0x24007858
 8010018:	24007870 	.word	0x24007870
 801001c:	24007868 	.word	0x24007868
 8010020:	24007864 	.word	0x24007864

08010024 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d106      	bne.n	8010040 <tcp_close_shutdown_fin+0x1c>
 8010032:	4b2e      	ldr	r3, [pc, #184]	; (80100ec <tcp_close_shutdown_fin+0xc8>)
 8010034:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010038:	492d      	ldr	r1, [pc, #180]	; (80100f0 <tcp_close_shutdown_fin+0xcc>)
 801003a:	482e      	ldr	r0, [pc, #184]	; (80100f4 <tcp_close_shutdown_fin+0xd0>)
 801003c:	f008 fffa 	bl	8019034 <iprintf>

  switch (pcb->state) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	7d1b      	ldrb	r3, [r3, #20]
 8010044:	2b07      	cmp	r3, #7
 8010046:	d020      	beq.n	801008a <tcp_close_shutdown_fin+0x66>
 8010048:	2b07      	cmp	r3, #7
 801004a:	dc2b      	bgt.n	80100a4 <tcp_close_shutdown_fin+0x80>
 801004c:	2b03      	cmp	r3, #3
 801004e:	d002      	beq.n	8010056 <tcp_close_shutdown_fin+0x32>
 8010050:	2b04      	cmp	r3, #4
 8010052:	d00d      	beq.n	8010070 <tcp_close_shutdown_fin+0x4c>
 8010054:	e026      	b.n	80100a4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f004 fdda 	bl	8014c10 <tcp_send_fin>
 801005c:	4603      	mov	r3, r0
 801005e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d11f      	bne.n	80100a8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2205      	movs	r2, #5
 801006c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801006e:	e01b      	b.n	80100a8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f004 fdcd 	bl	8014c10 <tcp_send_fin>
 8010076:	4603      	mov	r3, r0
 8010078:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801007a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d114      	bne.n	80100ac <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2205      	movs	r2, #5
 8010086:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010088:	e010      	b.n	80100ac <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f004 fdc0 	bl	8014c10 <tcp_send_fin>
 8010090:	4603      	mov	r3, r0
 8010092:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d109      	bne.n	80100b0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2209      	movs	r2, #9
 80100a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80100a2:	e005      	b.n	80100b0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80100a4:	2300      	movs	r3, #0
 80100a6:	e01c      	b.n	80100e2 <tcp_close_shutdown_fin+0xbe>
      break;
 80100a8:	bf00      	nop
 80100aa:	e002      	b.n	80100b2 <tcp_close_shutdown_fin+0x8e>
      break;
 80100ac:	bf00      	nop
 80100ae:	e000      	b.n	80100b2 <tcp_close_shutdown_fin+0x8e>
      break;
 80100b0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80100b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d103      	bne.n	80100c2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f004 fee6 	bl	8014e8c <tcp_output>
 80100c0:	e00d      	b.n	80100de <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80100c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ca:	d108      	bne.n	80100de <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	8b5b      	ldrh	r3, [r3, #26]
 80100d0:	f043 0308 	orr.w	r3, r3, #8
 80100d4:	b29a      	uxth	r2, r3
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80100da:	2300      	movs	r3, #0
 80100dc:	e001      	b.n	80100e2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80100de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3710      	adds	r7, #16
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	0801ac5c 	.word	0x0801ac5c
 80100f0:	0801ad0c 	.word	0x0801ad0c
 80100f4:	0801aca0 	.word	0x0801aca0

080100f8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b082      	sub	sp, #8
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d109      	bne.n	801011a <tcp_close+0x22>
 8010106:	4b0f      	ldr	r3, [pc, #60]	; (8010144 <tcp_close+0x4c>)
 8010108:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801010c:	490e      	ldr	r1, [pc, #56]	; (8010148 <tcp_close+0x50>)
 801010e:	480f      	ldr	r0, [pc, #60]	; (801014c <tcp_close+0x54>)
 8010110:	f008 ff90 	bl	8019034 <iprintf>
 8010114:	f06f 030f 	mvn.w	r3, #15
 8010118:	e00f      	b.n	801013a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	7d1b      	ldrb	r3, [r3, #20]
 801011e:	2b01      	cmp	r3, #1
 8010120:	d006      	beq.n	8010130 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	8b5b      	ldrh	r3, [r3, #26]
 8010126:	f043 0310 	orr.w	r3, r3, #16
 801012a:	b29a      	uxth	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010130:	2101      	movs	r1, #1
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f7ff fe94 	bl	800fe60 <tcp_close_shutdown>
 8010138:	4603      	mov	r3, r0
}
 801013a:	4618      	mov	r0, r3
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	0801ac5c 	.word	0x0801ac5c
 8010148:	0801ad6c 	.word	0x0801ad6c
 801014c:	0801aca0 	.word	0x0801aca0

08010150 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b08e      	sub	sp, #56	; 0x38
 8010154:	af04      	add	r7, sp, #16
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d107      	bne.n	8010170 <tcp_abandon+0x20>
 8010160:	4b52      	ldr	r3, [pc, #328]	; (80102ac <tcp_abandon+0x15c>)
 8010162:	f240 223d 	movw	r2, #573	; 0x23d
 8010166:	4952      	ldr	r1, [pc, #328]	; (80102b0 <tcp_abandon+0x160>)
 8010168:	4852      	ldr	r0, [pc, #328]	; (80102b4 <tcp_abandon+0x164>)
 801016a:	f008 ff63 	bl	8019034 <iprintf>
 801016e:	e099      	b.n	80102a4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	7d1b      	ldrb	r3, [r3, #20]
 8010174:	2b01      	cmp	r3, #1
 8010176:	d106      	bne.n	8010186 <tcp_abandon+0x36>
 8010178:	4b4c      	ldr	r3, [pc, #304]	; (80102ac <tcp_abandon+0x15c>)
 801017a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801017e:	494e      	ldr	r1, [pc, #312]	; (80102b8 <tcp_abandon+0x168>)
 8010180:	484c      	ldr	r0, [pc, #304]	; (80102b4 <tcp_abandon+0x164>)
 8010182:	f008 ff57 	bl	8019034 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	7d1b      	ldrb	r3, [r3, #20]
 801018a:	2b0a      	cmp	r3, #10
 801018c:	d107      	bne.n	801019e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801018e:	6879      	ldr	r1, [r7, #4]
 8010190:	484a      	ldr	r0, [pc, #296]	; (80102bc <tcp_abandon+0x16c>)
 8010192:	f001 fa63 	bl	801165c <tcp_pcb_remove>
    tcp_free(pcb);
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f7ff fdb0 	bl	800fcfc <tcp_free>
 801019c:	e082      	b.n	80102a4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801019e:	2300      	movs	r3, #0
 80101a0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80101a2:	2300      	movs	r3, #0
 80101a4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101aa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101b8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	691b      	ldr	r3, [r3, #16]
 80101be:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	7d1b      	ldrb	r3, [r3, #20]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d126      	bne.n	8010216 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	8adb      	ldrh	r3, [r3, #22]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d02e      	beq.n	801022e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80101d0:	4b3b      	ldr	r3, [pc, #236]	; (80102c0 <tcp_abandon+0x170>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d105      	bne.n	80101e6 <tcp_abandon+0x96>
 80101da:	4b39      	ldr	r3, [pc, #228]	; (80102c0 <tcp_abandon+0x170>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	4a37      	ldr	r2, [pc, #220]	; (80102c0 <tcp_abandon+0x170>)
 80101e2:	6013      	str	r3, [r2, #0]
 80101e4:	e013      	b.n	801020e <tcp_abandon+0xbe>
 80101e6:	4b36      	ldr	r3, [pc, #216]	; (80102c0 <tcp_abandon+0x170>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	61fb      	str	r3, [r7, #28]
 80101ec:	e00c      	b.n	8010208 <tcp_abandon+0xb8>
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	68db      	ldr	r3, [r3, #12]
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d104      	bne.n	8010202 <tcp_abandon+0xb2>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	68da      	ldr	r2, [r3, #12]
 80101fc:	69fb      	ldr	r3, [r7, #28]
 80101fe:	60da      	str	r2, [r3, #12]
 8010200:	e005      	b.n	801020e <tcp_abandon+0xbe>
 8010202:	69fb      	ldr	r3, [r7, #28]
 8010204:	68db      	ldr	r3, [r3, #12]
 8010206:	61fb      	str	r3, [r7, #28]
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d1ef      	bne.n	80101ee <tcp_abandon+0x9e>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2200      	movs	r2, #0
 8010212:	60da      	str	r2, [r3, #12]
 8010214:	e00b      	b.n	801022e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	8adb      	ldrh	r3, [r3, #22]
 801021e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010220:	6879      	ldr	r1, [r7, #4]
 8010222:	4828      	ldr	r0, [pc, #160]	; (80102c4 <tcp_abandon+0x174>)
 8010224:	f001 fa1a 	bl	801165c <tcp_pcb_remove>
 8010228:	4b27      	ldr	r3, [pc, #156]	; (80102c8 <tcp_abandon+0x178>)
 801022a:	2201      	movs	r2, #1
 801022c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010232:	2b00      	cmp	r3, #0
 8010234:	d004      	beq.n	8010240 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801023a:	4618      	mov	r0, r3
 801023c:	f000 fed6 	bl	8010fec <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010244:	2b00      	cmp	r3, #0
 8010246:	d004      	beq.n	8010252 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801024c:	4618      	mov	r0, r3
 801024e:	f000 fecd 	bl	8010fec <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010256:	2b00      	cmp	r3, #0
 8010258:	d004      	beq.n	8010264 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801025e:	4618      	mov	r0, r3
 8010260:	f000 fec4 	bl	8010fec <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00e      	beq.n	8010288 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801026a:	6879      	ldr	r1, [r7, #4]
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	3304      	adds	r3, #4
 8010270:	687a      	ldr	r2, [r7, #4]
 8010272:	8b12      	ldrh	r2, [r2, #24]
 8010274:	9202      	str	r2, [sp, #8]
 8010276:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010278:	9201      	str	r2, [sp, #4]
 801027a:	9300      	str	r3, [sp, #0]
 801027c:	460b      	mov	r3, r1
 801027e:	697a      	ldr	r2, [r7, #20]
 8010280:	69b9      	ldr	r1, [r7, #24]
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f005 fbb6 	bl	80159f4 <tcp_rst>
    }
    last_state = pcb->state;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	7d1b      	ldrb	r3, [r3, #20]
 801028c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f7ff fd34 	bl	800fcfc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d004      	beq.n	80102a4 <tcp_abandon+0x154>
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	f06f 010c 	mvn.w	r1, #12
 80102a0:	68f8      	ldr	r0, [r7, #12]
 80102a2:	4798      	blx	r3
  }
}
 80102a4:	3728      	adds	r7, #40	; 0x28
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	0801ac5c 	.word	0x0801ac5c
 80102b0:	0801ada0 	.word	0x0801ada0
 80102b4:	0801aca0 	.word	0x0801aca0
 80102b8:	0801adbc 	.word	0x0801adbc
 80102bc:	2400786c 	.word	0x2400786c
 80102c0:	24007868 	.word	0x24007868
 80102c4:	2400785c 	.word	0x2400785c
 80102c8:	24007858 	.word	0x24007858

080102cc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80102d4:	2101      	movs	r1, #1
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f7ff ff3a 	bl	8010150 <tcp_abandon>
}
 80102dc:	bf00      	nop
 80102de:	3708      	adds	r7, #8
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}

080102e4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b088      	sub	sp, #32
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	60f8      	str	r0, [r7, #12]
 80102ec:	60b9      	str	r1, [r7, #8]
 80102ee:	4613      	mov	r3, r2
 80102f0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80102f2:	2304      	movs	r3, #4
 80102f4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d101      	bne.n	8010300 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80102fc:	4b3e      	ldr	r3, [pc, #248]	; (80103f8 <tcp_bind+0x114>)
 80102fe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d109      	bne.n	801031a <tcp_bind+0x36>
 8010306:	4b3d      	ldr	r3, [pc, #244]	; (80103fc <tcp_bind+0x118>)
 8010308:	f240 22a9 	movw	r2, #681	; 0x2a9
 801030c:	493c      	ldr	r1, [pc, #240]	; (8010400 <tcp_bind+0x11c>)
 801030e:	483d      	ldr	r0, [pc, #244]	; (8010404 <tcp_bind+0x120>)
 8010310:	f008 fe90 	bl	8019034 <iprintf>
 8010314:	f06f 030f 	mvn.w	r3, #15
 8010318:	e06a      	b.n	80103f0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	7d1b      	ldrb	r3, [r3, #20]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d009      	beq.n	8010336 <tcp_bind+0x52>
 8010322:	4b36      	ldr	r3, [pc, #216]	; (80103fc <tcp_bind+0x118>)
 8010324:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010328:	4937      	ldr	r1, [pc, #220]	; (8010408 <tcp_bind+0x124>)
 801032a:	4836      	ldr	r0, [pc, #216]	; (8010404 <tcp_bind+0x120>)
 801032c:	f008 fe82 	bl	8019034 <iprintf>
 8010330:	f06f 0305 	mvn.w	r3, #5
 8010334:	e05c      	b.n	80103f0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8010336:	88fb      	ldrh	r3, [r7, #6]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d109      	bne.n	8010350 <tcp_bind+0x6c>
    port = tcp_new_port();
 801033c:	f000 f9f0 	bl	8010720 <tcp_new_port>
 8010340:	4603      	mov	r3, r0
 8010342:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010344:	88fb      	ldrh	r3, [r7, #6]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d135      	bne.n	80103b6 <tcp_bind+0xd2>
      return ERR_BUF;
 801034a:	f06f 0301 	mvn.w	r3, #1
 801034e:	e04f      	b.n	80103f0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010350:	2300      	movs	r3, #0
 8010352:	61fb      	str	r3, [r7, #28]
 8010354:	e02b      	b.n	80103ae <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010356:	4a2d      	ldr	r2, [pc, #180]	; (801040c <tcp_bind+0x128>)
 8010358:	69fb      	ldr	r3, [r7, #28]
 801035a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	61bb      	str	r3, [r7, #24]
 8010362:	e01e      	b.n	80103a2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	8adb      	ldrh	r3, [r3, #22]
 8010368:	88fa      	ldrh	r2, [r7, #6]
 801036a:	429a      	cmp	r2, r3
 801036c:	d116      	bne.n	801039c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801036e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010370:	2b00      	cmp	r3, #0
 8010372:	d010      	beq.n	8010396 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d00c      	beq.n	8010396 <tcp_bind+0xb2>
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d009      	beq.n	8010396 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d005      	beq.n	8010396 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010392:	429a      	cmp	r2, r3
 8010394:	d102      	bne.n	801039c <tcp_bind+0xb8>
              return ERR_USE;
 8010396:	f06f 0307 	mvn.w	r3, #7
 801039a:	e029      	b.n	80103f0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	61bb      	str	r3, [r7, #24]
 80103a2:	69bb      	ldr	r3, [r7, #24]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d1dd      	bne.n	8010364 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	3301      	adds	r3, #1
 80103ac:	61fb      	str	r3, [r7, #28]
 80103ae:	69fa      	ldr	r2, [r7, #28]
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	dbcf      	blt.n	8010356 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d00c      	beq.n	80103d6 <tcp_bind+0xf2>
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d008      	beq.n	80103d6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d002      	beq.n	80103d0 <tcp_bind+0xec>
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	e000      	b.n	80103d2 <tcp_bind+0xee>
 80103d0:	2300      	movs	r3, #0
 80103d2:	68fa      	ldr	r2, [r7, #12]
 80103d4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	88fa      	ldrh	r2, [r7, #6]
 80103da:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80103dc:	4b0c      	ldr	r3, [pc, #48]	; (8010410 <tcp_bind+0x12c>)
 80103de:	681a      	ldr	r2, [r3, #0]
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	60da      	str	r2, [r3, #12]
 80103e4:	4a0a      	ldr	r2, [pc, #40]	; (8010410 <tcp_bind+0x12c>)
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6013      	str	r3, [r2, #0]
 80103ea:	f005 fcc5 	bl	8015d78 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80103ee:	2300      	movs	r3, #0
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3720      	adds	r7, #32
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	0801d4b4 	.word	0x0801d4b4
 80103fc:	0801ac5c 	.word	0x0801ac5c
 8010400:	0801adf0 	.word	0x0801adf0
 8010404:	0801aca0 	.word	0x0801aca0
 8010408:	0801ae08 	.word	0x0801ae08
 801040c:	0801d48c 	.word	0x0801d48c
 8010410:	24007868 	.word	0x24007868

08010414 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b084      	sub	sp, #16
 8010418:	af00      	add	r7, sp, #0
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	60b9      	str	r1, [r7, #8]
 801041e:	4613      	mov	r3, r2
 8010420:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d106      	bne.n	8010436 <tcp_accept_null+0x22>
 8010428:	4b07      	ldr	r3, [pc, #28]	; (8010448 <tcp_accept_null+0x34>)
 801042a:	f240 320f 	movw	r2, #783	; 0x30f
 801042e:	4907      	ldr	r1, [pc, #28]	; (801044c <tcp_accept_null+0x38>)
 8010430:	4807      	ldr	r0, [pc, #28]	; (8010450 <tcp_accept_null+0x3c>)
 8010432:	f008 fdff 	bl	8019034 <iprintf>

  tcp_abort(pcb);
 8010436:	68b8      	ldr	r0, [r7, #8]
 8010438:	f7ff ff48 	bl	80102cc <tcp_abort>

  return ERR_ABRT;
 801043c:	f06f 030c 	mvn.w	r3, #12
}
 8010440:	4618      	mov	r0, r3
 8010442:	3710      	adds	r7, #16
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}
 8010448:	0801ac5c 	.word	0x0801ac5c
 801044c:	0801ae30 	.word	0x0801ae30
 8010450:	0801aca0 	.word	0x0801aca0

08010454 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b082      	sub	sp, #8
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	460b      	mov	r3, r1
 801045e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8010460:	78fb      	ldrb	r3, [r7, #3]
 8010462:	2200      	movs	r2, #0
 8010464:	4619      	mov	r1, r3
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 f806 	bl	8010478 <tcp_listen_with_backlog_and_err>
 801046c:	4603      	mov	r3, r0
}
 801046e:	4618      	mov	r0, r3
 8010470:	3708      	adds	r7, #8
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
	...

08010478 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b088      	sub	sp, #32
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	460b      	mov	r3, r1
 8010482:	607a      	str	r2, [r7, #4]
 8010484:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8010486:	2300      	movs	r3, #0
 8010488:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d109      	bne.n	80104a4 <tcp_listen_with_backlog_and_err+0x2c>
 8010490:	4b47      	ldr	r3, [pc, #284]	; (80105b0 <tcp_listen_with_backlog_and_err+0x138>)
 8010492:	f240 3259 	movw	r2, #857	; 0x359
 8010496:	4947      	ldr	r1, [pc, #284]	; (80105b4 <tcp_listen_with_backlog_and_err+0x13c>)
 8010498:	4847      	ldr	r0, [pc, #284]	; (80105b8 <tcp_listen_with_backlog_and_err+0x140>)
 801049a:	f008 fdcb 	bl	8019034 <iprintf>
 801049e:	23f0      	movs	r3, #240	; 0xf0
 80104a0:	76fb      	strb	r3, [r7, #27]
 80104a2:	e079      	b.n	8010598 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	7d1b      	ldrb	r3, [r3, #20]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d009      	beq.n	80104c0 <tcp_listen_with_backlog_and_err+0x48>
 80104ac:	4b40      	ldr	r3, [pc, #256]	; (80105b0 <tcp_listen_with_backlog_and_err+0x138>)
 80104ae:	f240 325a 	movw	r2, #858	; 0x35a
 80104b2:	4942      	ldr	r1, [pc, #264]	; (80105bc <tcp_listen_with_backlog_and_err+0x144>)
 80104b4:	4840      	ldr	r0, [pc, #256]	; (80105b8 <tcp_listen_with_backlog_and_err+0x140>)
 80104b6:	f008 fdbd 	bl	8019034 <iprintf>
 80104ba:	23f1      	movs	r3, #241	; 0xf1
 80104bc:	76fb      	strb	r3, [r7, #27]
 80104be:	e06b      	b.n	8010598 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	7d1b      	ldrb	r3, [r3, #20]
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	d104      	bne.n	80104d2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80104cc:	23f7      	movs	r3, #247	; 0xf7
 80104ce:	76fb      	strb	r3, [r7, #27]
    goto done;
 80104d0:	e062      	b.n	8010598 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80104d2:	2002      	movs	r0, #2
 80104d4:	f7fe fa3c 	bl	800e950 <memp_malloc>
 80104d8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d102      	bne.n	80104e6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80104e0:	23ff      	movs	r3, #255	; 0xff
 80104e2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80104e4:	e058      	b.n	8010598 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	691a      	ldr	r2, [r3, #16]
 80104ea:	69fb      	ldr	r3, [r7, #28]
 80104ec:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	8ada      	ldrh	r2, [r3, #22]
 80104f2:	69fb      	ldr	r3, [r7, #28]
 80104f4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80104f6:	69fb      	ldr	r3, [r7, #28]
 80104f8:	2201      	movs	r2, #1
 80104fa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	7d5a      	ldrb	r2, [r3, #21]
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	7a5a      	ldrb	r2, [r3, #9]
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	2200      	movs	r2, #0
 8010510:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	7ada      	ldrb	r2, [r3, #11]
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	7a9a      	ldrb	r2, [r3, #10]
 801051e:	69fb      	ldr	r3, [r7, #28]
 8010520:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	8adb      	ldrh	r3, [r3, #22]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d021      	beq.n	8010576 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8010532:	4b23      	ldr	r3, [pc, #140]	; (80105c0 <tcp_listen_with_backlog_and_err+0x148>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	68fa      	ldr	r2, [r7, #12]
 8010538:	429a      	cmp	r2, r3
 801053a:	d105      	bne.n	8010548 <tcp_listen_with_backlog_and_err+0xd0>
 801053c:	4b20      	ldr	r3, [pc, #128]	; (80105c0 <tcp_listen_with_backlog_and_err+0x148>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	68db      	ldr	r3, [r3, #12]
 8010542:	4a1f      	ldr	r2, [pc, #124]	; (80105c0 <tcp_listen_with_backlog_and_err+0x148>)
 8010544:	6013      	str	r3, [r2, #0]
 8010546:	e013      	b.n	8010570 <tcp_listen_with_backlog_and_err+0xf8>
 8010548:	4b1d      	ldr	r3, [pc, #116]	; (80105c0 <tcp_listen_with_backlog_and_err+0x148>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	617b      	str	r3, [r7, #20]
 801054e:	e00c      	b.n	801056a <tcp_listen_with_backlog_and_err+0xf2>
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	68db      	ldr	r3, [r3, #12]
 8010554:	68fa      	ldr	r2, [r7, #12]
 8010556:	429a      	cmp	r2, r3
 8010558:	d104      	bne.n	8010564 <tcp_listen_with_backlog_and_err+0xec>
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	68da      	ldr	r2, [r3, #12]
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	60da      	str	r2, [r3, #12]
 8010562:	e005      	b.n	8010570 <tcp_listen_with_backlog_and_err+0xf8>
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	68db      	ldr	r3, [r3, #12]
 8010568:	617b      	str	r3, [r7, #20]
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d1ef      	bne.n	8010550 <tcp_listen_with_backlog_and_err+0xd8>
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2200      	movs	r2, #0
 8010574:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8010576:	68f8      	ldr	r0, [r7, #12]
 8010578:	f7ff fbc0 	bl	800fcfc <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801057c:	69fb      	ldr	r3, [r7, #28]
 801057e:	4a11      	ldr	r2, [pc, #68]	; (80105c4 <tcp_listen_with_backlog_and_err+0x14c>)
 8010580:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8010582:	4b11      	ldr	r3, [pc, #68]	; (80105c8 <tcp_listen_with_backlog_and_err+0x150>)
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	69fb      	ldr	r3, [r7, #28]
 8010588:	60da      	str	r2, [r3, #12]
 801058a:	4a0f      	ldr	r2, [pc, #60]	; (80105c8 <tcp_listen_with_backlog_and_err+0x150>)
 801058c:	69fb      	ldr	r3, [r7, #28]
 801058e:	6013      	str	r3, [r2, #0]
 8010590:	f005 fbf2 	bl	8015d78 <tcp_timer_needed>
  res = ERR_OK;
 8010594:	2300      	movs	r3, #0
 8010596:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d002      	beq.n	80105a4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	7efa      	ldrb	r2, [r7, #27]
 80105a2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80105a4:	69fb      	ldr	r3, [r7, #28]
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3720      	adds	r7, #32
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	0801ac5c 	.word	0x0801ac5c
 80105b4:	0801ae50 	.word	0x0801ae50
 80105b8:	0801aca0 	.word	0x0801aca0
 80105bc:	0801ae80 	.word	0x0801ae80
 80105c0:	24007868 	.word	0x24007868
 80105c4:	08010415 	.word	0x08010415
 80105c8:	24007864 	.word	0x24007864

080105cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d106      	bne.n	80105e8 <tcp_update_rcv_ann_wnd+0x1c>
 80105da:	4b25      	ldr	r3, [pc, #148]	; (8010670 <tcp_update_rcv_ann_wnd+0xa4>)
 80105dc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80105e0:	4924      	ldr	r1, [pc, #144]	; (8010674 <tcp_update_rcv_ann_wnd+0xa8>)
 80105e2:	4825      	ldr	r0, [pc, #148]	; (8010678 <tcp_update_rcv_ann_wnd+0xac>)
 80105e4:	f008 fd26 	bl	8019034 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ec:	687a      	ldr	r2, [r7, #4]
 80105ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80105f0:	4413      	add	r3, r2
 80105f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105f8:	687a      	ldr	r2, [r7, #4]
 80105fa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80105fc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010600:	bf28      	it	cs
 8010602:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010606:	b292      	uxth	r2, r2
 8010608:	4413      	add	r3, r2
 801060a:	68fa      	ldr	r2, [r7, #12]
 801060c:	1ad3      	subs	r3, r2, r3
 801060e:	2b00      	cmp	r3, #0
 8010610:	db08      	blt.n	8010624 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801061e:	68fa      	ldr	r2, [r7, #12]
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	e020      	b.n	8010666 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801062c:	1ad3      	subs	r3, r2, r3
 801062e:	2b00      	cmp	r3, #0
 8010630:	dd03      	ble.n	801063a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010638:	e014      	b.n	8010664 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010642:	1ad3      	subs	r3, r2, r3
 8010644:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801064c:	d306      	bcc.n	801065c <tcp_update_rcv_ann_wnd+0x90>
 801064e:	4b08      	ldr	r3, [pc, #32]	; (8010670 <tcp_update_rcv_ann_wnd+0xa4>)
 8010650:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010654:	4909      	ldr	r1, [pc, #36]	; (801067c <tcp_update_rcv_ann_wnd+0xb0>)
 8010656:	4808      	ldr	r0, [pc, #32]	; (8010678 <tcp_update_rcv_ann_wnd+0xac>)
 8010658:	f008 fcec 	bl	8019034 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	b29a      	uxth	r2, r3
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010664:	2300      	movs	r3, #0
  }
}
 8010666:	4618      	mov	r0, r3
 8010668:	3710      	adds	r7, #16
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	0801ac5c 	.word	0x0801ac5c
 8010674:	0801aeb8 	.word	0x0801aeb8
 8010678:	0801aca0 	.word	0x0801aca0
 801067c:	0801aedc 	.word	0x0801aedc

08010680 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	460b      	mov	r3, r1
 801068a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d107      	bne.n	80106a2 <tcp_recved+0x22>
 8010692:	4b1f      	ldr	r3, [pc, #124]	; (8010710 <tcp_recved+0x90>)
 8010694:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010698:	491e      	ldr	r1, [pc, #120]	; (8010714 <tcp_recved+0x94>)
 801069a:	481f      	ldr	r0, [pc, #124]	; (8010718 <tcp_recved+0x98>)
 801069c:	f008 fcca 	bl	8019034 <iprintf>
 80106a0:	e032      	b.n	8010708 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	7d1b      	ldrb	r3, [r3, #20]
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d106      	bne.n	80106b8 <tcp_recved+0x38>
 80106aa:	4b19      	ldr	r3, [pc, #100]	; (8010710 <tcp_recved+0x90>)
 80106ac:	f240 32d2 	movw	r2, #978	; 0x3d2
 80106b0:	491a      	ldr	r1, [pc, #104]	; (801071c <tcp_recved+0x9c>)
 80106b2:	4819      	ldr	r0, [pc, #100]	; (8010718 <tcp_recved+0x98>)
 80106b4:	f008 fcbe 	bl	8019034 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80106bc:	887b      	ldrh	r3, [r7, #2]
 80106be:	4413      	add	r3, r2
 80106c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80106c2:	89fb      	ldrh	r3, [r7, #14]
 80106c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80106c8:	d804      	bhi.n	80106d4 <tcp_recved+0x54>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106ce:	89fa      	ldrh	r2, [r7, #14]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d204      	bcs.n	80106de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80106da:	851a      	strh	r2, [r3, #40]	; 0x28
 80106dc:	e002      	b.n	80106e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	89fa      	ldrh	r2, [r7, #14]
 80106e2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f7ff ff71 	bl	80105cc <tcp_update_rcv_ann_wnd>
 80106ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80106f2:	d309      	bcc.n	8010708 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	8b5b      	ldrh	r3, [r3, #26]
 80106f8:	f043 0302 	orr.w	r3, r3, #2
 80106fc:	b29a      	uxth	r2, r3
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f004 fbc2 	bl	8014e8c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010708:	3710      	adds	r7, #16
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	0801ac5c 	.word	0x0801ac5c
 8010714:	0801aef8 	.word	0x0801aef8
 8010718:	0801aca0 	.word	0x0801aca0
 801071c:	0801af10 	.word	0x0801af10

08010720 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010726:	2300      	movs	r3, #0
 8010728:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801072a:	4b1e      	ldr	r3, [pc, #120]	; (80107a4 <tcp_new_port+0x84>)
 801072c:	881b      	ldrh	r3, [r3, #0]
 801072e:	3301      	adds	r3, #1
 8010730:	b29a      	uxth	r2, r3
 8010732:	4b1c      	ldr	r3, [pc, #112]	; (80107a4 <tcp_new_port+0x84>)
 8010734:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010736:	4b1b      	ldr	r3, [pc, #108]	; (80107a4 <tcp_new_port+0x84>)
 8010738:	881b      	ldrh	r3, [r3, #0]
 801073a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801073e:	4293      	cmp	r3, r2
 8010740:	d103      	bne.n	801074a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010742:	4b18      	ldr	r3, [pc, #96]	; (80107a4 <tcp_new_port+0x84>)
 8010744:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010748:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801074a:	2300      	movs	r3, #0
 801074c:	71fb      	strb	r3, [r7, #7]
 801074e:	e01e      	b.n	801078e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010750:	79fb      	ldrb	r3, [r7, #7]
 8010752:	4a15      	ldr	r2, [pc, #84]	; (80107a8 <tcp_new_port+0x88>)
 8010754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	603b      	str	r3, [r7, #0]
 801075c:	e011      	b.n	8010782 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	8ada      	ldrh	r2, [r3, #22]
 8010762:	4b10      	ldr	r3, [pc, #64]	; (80107a4 <tcp_new_port+0x84>)
 8010764:	881b      	ldrh	r3, [r3, #0]
 8010766:	429a      	cmp	r2, r3
 8010768:	d108      	bne.n	801077c <tcp_new_port+0x5c>
        n++;
 801076a:	88bb      	ldrh	r3, [r7, #4]
 801076c:	3301      	adds	r3, #1
 801076e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010770:	88bb      	ldrh	r3, [r7, #4]
 8010772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010776:	d3d8      	bcc.n	801072a <tcp_new_port+0xa>
          return 0;
 8010778:	2300      	movs	r3, #0
 801077a:	e00d      	b.n	8010798 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	603b      	str	r3, [r7, #0]
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d1ea      	bne.n	801075e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010788:	79fb      	ldrb	r3, [r7, #7]
 801078a:	3301      	adds	r3, #1
 801078c:	71fb      	strb	r3, [r7, #7]
 801078e:	79fb      	ldrb	r3, [r7, #7]
 8010790:	2b03      	cmp	r3, #3
 8010792:	d9dd      	bls.n	8010750 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010794:	4b03      	ldr	r3, [pc, #12]	; (80107a4 <tcp_new_port+0x84>)
 8010796:	881b      	ldrh	r3, [r3, #0]
}
 8010798:	4618      	mov	r0, r3
 801079a:	370c      	adds	r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr
 80107a4:	24000030 	.word	0x24000030
 80107a8:	0801d48c 	.word	0x0801d48c

080107ac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80107ac:	b5b0      	push	{r4, r5, r7, lr}
 80107ae:	b090      	sub	sp, #64	; 0x40
 80107b0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80107b2:	2300      	movs	r3, #0
 80107b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80107b8:	4b94      	ldr	r3, [pc, #592]	; (8010a0c <tcp_slowtmr+0x260>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	3301      	adds	r3, #1
 80107be:	4a93      	ldr	r2, [pc, #588]	; (8010a0c <tcp_slowtmr+0x260>)
 80107c0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80107c2:	4b93      	ldr	r3, [pc, #588]	; (8010a10 <tcp_slowtmr+0x264>)
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	3301      	adds	r3, #1
 80107c8:	b2da      	uxtb	r2, r3
 80107ca:	4b91      	ldr	r3, [pc, #580]	; (8010a10 <tcp_slowtmr+0x264>)
 80107cc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80107ce:	2300      	movs	r3, #0
 80107d0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80107d2:	4b90      	ldr	r3, [pc, #576]	; (8010a14 <tcp_slowtmr+0x268>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80107d8:	e29d      	b.n	8010d16 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80107da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107dc:	7d1b      	ldrb	r3, [r3, #20]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d106      	bne.n	80107f0 <tcp_slowtmr+0x44>
 80107e2:	4b8d      	ldr	r3, [pc, #564]	; (8010a18 <tcp_slowtmr+0x26c>)
 80107e4:	f240 42be 	movw	r2, #1214	; 0x4be
 80107e8:	498c      	ldr	r1, [pc, #560]	; (8010a1c <tcp_slowtmr+0x270>)
 80107ea:	488d      	ldr	r0, [pc, #564]	; (8010a20 <tcp_slowtmr+0x274>)
 80107ec:	f008 fc22 	bl	8019034 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80107f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f2:	7d1b      	ldrb	r3, [r3, #20]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d106      	bne.n	8010806 <tcp_slowtmr+0x5a>
 80107f8:	4b87      	ldr	r3, [pc, #540]	; (8010a18 <tcp_slowtmr+0x26c>)
 80107fa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80107fe:	4989      	ldr	r1, [pc, #548]	; (8010a24 <tcp_slowtmr+0x278>)
 8010800:	4887      	ldr	r0, [pc, #540]	; (8010a20 <tcp_slowtmr+0x274>)
 8010802:	f008 fc17 	bl	8019034 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010808:	7d1b      	ldrb	r3, [r3, #20]
 801080a:	2b0a      	cmp	r3, #10
 801080c:	d106      	bne.n	801081c <tcp_slowtmr+0x70>
 801080e:	4b82      	ldr	r3, [pc, #520]	; (8010a18 <tcp_slowtmr+0x26c>)
 8010810:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010814:	4984      	ldr	r1, [pc, #528]	; (8010a28 <tcp_slowtmr+0x27c>)
 8010816:	4882      	ldr	r0, [pc, #520]	; (8010a20 <tcp_slowtmr+0x274>)
 8010818:	f008 fc0c 	bl	8019034 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801081e:	7f9a      	ldrb	r2, [r3, #30]
 8010820:	4b7b      	ldr	r3, [pc, #492]	; (8010a10 <tcp_slowtmr+0x264>)
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	429a      	cmp	r2, r3
 8010826:	d105      	bne.n	8010834 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010832:	e270      	b.n	8010d16 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010834:	4b76      	ldr	r3, [pc, #472]	; (8010a10 <tcp_slowtmr+0x264>)
 8010836:	781a      	ldrb	r2, [r3, #0]
 8010838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801083a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801083c:	2300      	movs	r3, #0
 801083e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010842:	2300      	movs	r3, #0
 8010844:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084a:	7d1b      	ldrb	r3, [r3, #20]
 801084c:	2b02      	cmp	r3, #2
 801084e:	d10a      	bne.n	8010866 <tcp_slowtmr+0xba>
 8010850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010852:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010856:	2b05      	cmp	r3, #5
 8010858:	d905      	bls.n	8010866 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801085a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801085e:	3301      	adds	r3, #1
 8010860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010864:	e11e      	b.n	8010aa4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010868:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801086c:	2b0b      	cmp	r3, #11
 801086e:	d905      	bls.n	801087c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010874:	3301      	adds	r3, #1
 8010876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801087a:	e113      	b.n	8010aa4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010882:	2b00      	cmp	r3, #0
 8010884:	d075      	beq.n	8010972 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801088a:	2b00      	cmp	r3, #0
 801088c:	d006      	beq.n	801089c <tcp_slowtmr+0xf0>
 801088e:	4b62      	ldr	r3, [pc, #392]	; (8010a18 <tcp_slowtmr+0x26c>)
 8010890:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010894:	4965      	ldr	r1, [pc, #404]	; (8010a2c <tcp_slowtmr+0x280>)
 8010896:	4862      	ldr	r0, [pc, #392]	; (8010a20 <tcp_slowtmr+0x274>)
 8010898:	f008 fbcc 	bl	8019034 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d106      	bne.n	80108b2 <tcp_slowtmr+0x106>
 80108a4:	4b5c      	ldr	r3, [pc, #368]	; (8010a18 <tcp_slowtmr+0x26c>)
 80108a6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80108aa:	4961      	ldr	r1, [pc, #388]	; (8010a30 <tcp_slowtmr+0x284>)
 80108ac:	485c      	ldr	r0, [pc, #368]	; (8010a20 <tcp_slowtmr+0x274>)
 80108ae:	f008 fbc1 	bl	8019034 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80108b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80108b8:	2b0b      	cmp	r3, #11
 80108ba:	d905      	bls.n	80108c8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80108bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108c0:	3301      	adds	r3, #1
 80108c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80108c6:	e0ed      	b.n	8010aa4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80108c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80108ce:	3b01      	subs	r3, #1
 80108d0:	4a58      	ldr	r2, [pc, #352]	; (8010a34 <tcp_slowtmr+0x288>)
 80108d2:	5cd3      	ldrb	r3, [r2, r3]
 80108d4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80108d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80108dc:	7c7a      	ldrb	r2, [r7, #17]
 80108de:	429a      	cmp	r2, r3
 80108e0:	d907      	bls.n	80108f2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80108e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80108e8:	3301      	adds	r3, #1
 80108ea:	b2da      	uxtb	r2, r3
 80108ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80108f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80108f8:	7c7a      	ldrb	r2, [r7, #17]
 80108fa:	429a      	cmp	r2, r3
 80108fc:	f200 80d2 	bhi.w	8010aa4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010900:	2301      	movs	r3, #1
 8010902:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010906:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801090a:	2b00      	cmp	r3, #0
 801090c:	d108      	bne.n	8010920 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801090e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010910:	f005 f964 	bl	8015bdc <tcp_zero_window_probe>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d014      	beq.n	8010944 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801091a:	2300      	movs	r3, #0
 801091c:	623b      	str	r3, [r7, #32]
 801091e:	e011      	b.n	8010944 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010922:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010926:	4619      	mov	r1, r3
 8010928:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801092a:	f004 f829 	bl	8014980 <tcp_split_unsent_seg>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d107      	bne.n	8010944 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010936:	f004 faa9 	bl	8014e8c <tcp_output>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d101      	bne.n	8010944 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010940:	2300      	movs	r3, #0
 8010942:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010944:	6a3b      	ldr	r3, [r7, #32]
 8010946:	2b00      	cmp	r3, #0
 8010948:	f000 80ac 	beq.w	8010aa4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801094e:	2200      	movs	r2, #0
 8010950:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010956:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801095a:	2b06      	cmp	r3, #6
 801095c:	f200 80a2 	bhi.w	8010aa4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010962:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010966:	3301      	adds	r3, #1
 8010968:	b2da      	uxtb	r2, r3
 801096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801096c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010970:	e098      	b.n	8010aa4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010974:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010978:	2b00      	cmp	r3, #0
 801097a:	db0f      	blt.n	801099c <tcp_slowtmr+0x1f0>
 801097c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010982:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010986:	4293      	cmp	r3, r2
 8010988:	d008      	beq.n	801099c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801098a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010990:	b29b      	uxth	r3, r3
 8010992:	3301      	adds	r3, #1
 8010994:	b29b      	uxth	r3, r3
 8010996:	b21a      	sxth	r2, r3
 8010998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801099a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801099e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80109a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80109a8:	429a      	cmp	r2, r3
 80109aa:	db7b      	blt.n	8010aa4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80109ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109ae:	f004 fd5f 	bl	8015470 <tcp_rexmit_rto_prepare>
 80109b2:	4603      	mov	r3, r0
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d007      	beq.n	80109c8 <tcp_slowtmr+0x21c>
 80109b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d171      	bne.n	8010aa4 <tcp_slowtmr+0x2f8>
 80109c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d06d      	beq.n	8010aa4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80109c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ca:	7d1b      	ldrb	r3, [r3, #20]
 80109cc:	2b02      	cmp	r3, #2
 80109ce:	d03a      	beq.n	8010a46 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80109d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109d6:	2b0c      	cmp	r3, #12
 80109d8:	bf28      	it	cs
 80109da:	230c      	movcs	r3, #12
 80109dc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80109de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80109e4:	10db      	asrs	r3, r3, #3
 80109e6:	b21b      	sxth	r3, r3
 80109e8:	461a      	mov	r2, r3
 80109ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80109f0:	4413      	add	r3, r2
 80109f2:	7efa      	ldrb	r2, [r7, #27]
 80109f4:	4910      	ldr	r1, [pc, #64]	; (8010a38 <tcp_slowtmr+0x28c>)
 80109f6:	5c8a      	ldrb	r2, [r1, r2]
 80109f8:	4093      	lsls	r3, r2
 80109fa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010a02:	4293      	cmp	r3, r2
 8010a04:	dc1a      	bgt.n	8010a3c <tcp_slowtmr+0x290>
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	b21a      	sxth	r2, r3
 8010a0a:	e019      	b.n	8010a40 <tcp_slowtmr+0x294>
 8010a0c:	24007860 	.word	0x24007860
 8010a10:	24004122 	.word	0x24004122
 8010a14:	2400785c 	.word	0x2400785c
 8010a18:	0801ac5c 	.word	0x0801ac5c
 8010a1c:	0801afa0 	.word	0x0801afa0
 8010a20:	0801aca0 	.word	0x0801aca0
 8010a24:	0801afcc 	.word	0x0801afcc
 8010a28:	0801aff8 	.word	0x0801aff8
 8010a2c:	0801b028 	.word	0x0801b028
 8010a30:	0801b05c 	.word	0x0801b05c
 8010a34:	0801d484 	.word	0x0801d484
 8010a38:	0801d474 	.word	0x0801d474
 8010a3c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8010a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a48:	2200      	movs	r2, #0
 8010a4a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	bf28      	it	cs
 8010a5c:	4613      	movcs	r3, r2
 8010a5e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010a60:	8a7b      	ldrh	r3, [r7, #18]
 8010a62:	085b      	lsrs	r3, r3, #1
 8010a64:	b29a      	uxth	r2, r3
 8010a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a68:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a76:	005b      	lsls	r3, r3, #1
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d206      	bcs.n	8010a8c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a82:	005b      	lsls	r3, r3, #1
 8010a84:	b29a      	uxth	r2, r3
 8010a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8010a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a98:	2200      	movs	r2, #0
 8010a9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8010a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010aa0:	f004 fd56 	bl	8015550 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa6:	7d1b      	ldrb	r3, [r3, #20]
 8010aa8:	2b06      	cmp	r3, #6
 8010aaa:	d111      	bne.n	8010ad0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aae:	8b5b      	ldrh	r3, [r3, #26]
 8010ab0:	f003 0310 	and.w	r3, r3, #16
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d00b      	beq.n	8010ad0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010ab8:	4b9c      	ldr	r3, [pc, #624]	; (8010d2c <tcp_slowtmr+0x580>)
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010abe:	6a1b      	ldr	r3, [r3, #32]
 8010ac0:	1ad3      	subs	r3, r2, r3
 8010ac2:	2b28      	cmp	r3, #40	; 0x28
 8010ac4:	d904      	bls.n	8010ad0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010aca:	3301      	adds	r3, #1
 8010acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad2:	7a5b      	ldrb	r3, [r3, #9]
 8010ad4:	f003 0308 	and.w	r3, r3, #8
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d04a      	beq.n	8010b72 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8010adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ade:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010ae0:	2b04      	cmp	r3, #4
 8010ae2:	d003      	beq.n	8010aec <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010ae8:	2b07      	cmp	r3, #7
 8010aea:	d142      	bne.n	8010b72 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010aec:	4b8f      	ldr	r3, [pc, #572]	; (8010d2c <tcp_slowtmr+0x580>)
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af2:	6a1b      	ldr	r3, [r3, #32]
 8010af4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010afc:	4b8c      	ldr	r3, [pc, #560]	; (8010d30 <tcp_slowtmr+0x584>)
 8010afe:	440b      	add	r3, r1
 8010b00:	498c      	ldr	r1, [pc, #560]	; (8010d34 <tcp_slowtmr+0x588>)
 8010b02:	fba1 1303 	umull	r1, r3, r1, r3
 8010b06:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d90a      	bls.n	8010b22 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b10:	3301      	adds	r3, #1
 8010b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8010b16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010b1a:	3301      	adds	r3, #1
 8010b1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010b20:	e027      	b.n	8010b72 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010b22:	4b82      	ldr	r3, [pc, #520]	; (8010d2c <tcp_slowtmr+0x580>)
 8010b24:	681a      	ldr	r2, [r3, #0]
 8010b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b28:	6a1b      	ldr	r3, [r3, #32]
 8010b2a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b2e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b34:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010b38:	4618      	mov	r0, r3
 8010b3a:	4b7f      	ldr	r3, [pc, #508]	; (8010d38 <tcp_slowtmr+0x58c>)
 8010b3c:	fb03 f300 	mul.w	r3, r3, r0
 8010b40:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010b42:	497c      	ldr	r1, [pc, #496]	; (8010d34 <tcp_slowtmr+0x588>)
 8010b44:	fba1 1303 	umull	r1, r3, r1, r3
 8010b48:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d911      	bls.n	8010b72 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8010b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b50:	f005 f804 	bl	8015b5c <tcp_keepalive>
 8010b54:	4603      	mov	r3, r0
 8010b56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8010b5a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d107      	bne.n	8010b72 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8010b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010b68:	3301      	adds	r3, #1
 8010b6a:	b2da      	uxtb	r2, r3
 8010b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b6e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8010b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d011      	beq.n	8010b9e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010b7a:	4b6c      	ldr	r3, [pc, #432]	; (8010d2c <tcp_slowtmr+0x580>)
 8010b7c:	681a      	ldr	r2, [r3, #0]
 8010b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b80:	6a1b      	ldr	r3, [r3, #32]
 8010b82:	1ad2      	subs	r2, r2, r3
 8010b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b86:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	005b      	lsls	r3, r3, #1
 8010b90:	440b      	add	r3, r1
 8010b92:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d302      	bcc.n	8010b9e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010b98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b9a:	f000 fec3 	bl	8011924 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8010b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba0:	7d1b      	ldrb	r3, [r3, #20]
 8010ba2:	2b03      	cmp	r3, #3
 8010ba4:	d10b      	bne.n	8010bbe <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010ba6:	4b61      	ldr	r3, [pc, #388]	; (8010d2c <tcp_slowtmr+0x580>)
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bac:	6a1b      	ldr	r3, [r3, #32]
 8010bae:	1ad3      	subs	r3, r2, r3
 8010bb0:	2b28      	cmp	r3, #40	; 0x28
 8010bb2:	d904      	bls.n	8010bbe <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bb8:	3301      	adds	r3, #1
 8010bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8010bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc0:	7d1b      	ldrb	r3, [r3, #20]
 8010bc2:	2b09      	cmp	r3, #9
 8010bc4:	d10b      	bne.n	8010bde <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010bc6:	4b59      	ldr	r3, [pc, #356]	; (8010d2c <tcp_slowtmr+0x580>)
 8010bc8:	681a      	ldr	r2, [r3, #0]
 8010bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bcc:	6a1b      	ldr	r3, [r3, #32]
 8010bce:	1ad3      	subs	r3, r2, r3
 8010bd0:	2bf0      	cmp	r3, #240	; 0xf0
 8010bd2:	d904      	bls.n	8010bde <tcp_slowtmr+0x432>
        ++pcb_remove;
 8010bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bd8:	3301      	adds	r3, #1
 8010bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d060      	beq.n	8010ca8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8010bee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bf0:	f000 fce4 	bl	80115bc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d010      	beq.n	8010c1c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010bfa:	4b50      	ldr	r3, [pc, #320]	; (8010d3c <tcp_slowtmr+0x590>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d106      	bne.n	8010c12 <tcp_slowtmr+0x466>
 8010c04:	4b4e      	ldr	r3, [pc, #312]	; (8010d40 <tcp_slowtmr+0x594>)
 8010c06:	f240 526d 	movw	r2, #1389	; 0x56d
 8010c0a:	494e      	ldr	r1, [pc, #312]	; (8010d44 <tcp_slowtmr+0x598>)
 8010c0c:	484e      	ldr	r0, [pc, #312]	; (8010d48 <tcp_slowtmr+0x59c>)
 8010c0e:	f008 fa11 	bl	8019034 <iprintf>
        prev->next = pcb->next;
 8010c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c14:	68da      	ldr	r2, [r3, #12]
 8010c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c18:	60da      	str	r2, [r3, #12]
 8010c1a:	e00f      	b.n	8010c3c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010c1c:	4b47      	ldr	r3, [pc, #284]	; (8010d3c <tcp_slowtmr+0x590>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d006      	beq.n	8010c34 <tcp_slowtmr+0x488>
 8010c26:	4b46      	ldr	r3, [pc, #280]	; (8010d40 <tcp_slowtmr+0x594>)
 8010c28:	f240 5271 	movw	r2, #1393	; 0x571
 8010c2c:	4947      	ldr	r1, [pc, #284]	; (8010d4c <tcp_slowtmr+0x5a0>)
 8010c2e:	4846      	ldr	r0, [pc, #280]	; (8010d48 <tcp_slowtmr+0x59c>)
 8010c30:	f008 fa00 	bl	8019034 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	4a40      	ldr	r2, [pc, #256]	; (8010d3c <tcp_slowtmr+0x590>)
 8010c3a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010c3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d013      	beq.n	8010c6c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c46:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c4a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010c4c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8010c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c50:	3304      	adds	r3, #4
 8010c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c54:	8ad2      	ldrh	r2, [r2, #22]
 8010c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c58:	8b09      	ldrh	r1, [r1, #24]
 8010c5a:	9102      	str	r1, [sp, #8]
 8010c5c:	9201      	str	r2, [sp, #4]
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	462b      	mov	r3, r5
 8010c62:	4622      	mov	r2, r4
 8010c64:	4601      	mov	r1, r0
 8010c66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c68:	f004 fec4 	bl	80159f4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6e:	691b      	ldr	r3, [r3, #16]
 8010c70:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c74:	7d1b      	ldrb	r3, [r3, #20]
 8010c76:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010c82:	6838      	ldr	r0, [r7, #0]
 8010c84:	f7ff f83a 	bl	800fcfc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010c88:	4b31      	ldr	r3, [pc, #196]	; (8010d50 <tcp_slowtmr+0x5a4>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d004      	beq.n	8010c9e <tcp_slowtmr+0x4f2>
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f06f 010c 	mvn.w	r1, #12
 8010c9a:	68b8      	ldr	r0, [r7, #8]
 8010c9c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010c9e:	4b2c      	ldr	r3, [pc, #176]	; (8010d50 <tcp_slowtmr+0x5a4>)
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d037      	beq.n	8010d16 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8010ca6:	e592      	b.n	80107ce <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010caa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb4:	7f1b      	ldrb	r3, [r3, #28]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	b2da      	uxtb	r2, r3
 8010cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cbc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc0:	7f1a      	ldrb	r2, [r3, #28]
 8010cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc4:	7f5b      	ldrb	r3, [r3, #29]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d325      	bcc.n	8010d16 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8010cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ccc:	2200      	movs	r2, #0
 8010cce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010cd0:	4b1f      	ldr	r3, [pc, #124]	; (8010d50 <tcp_slowtmr+0x5a4>)
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d00b      	beq.n	8010cf8 <tcp_slowtmr+0x54c>
 8010ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ce8:	6912      	ldr	r2, [r2, #16]
 8010cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010cec:	4610      	mov	r0, r2
 8010cee:	4798      	blx	r3
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010cf6:	e002      	b.n	8010cfe <tcp_slowtmr+0x552>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010cfe:	4b14      	ldr	r3, [pc, #80]	; (8010d50 <tcp_slowtmr+0x5a4>)
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d000      	beq.n	8010d08 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8010d06:	e562      	b.n	80107ce <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010d08:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d102      	bne.n	8010d16 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8010d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d12:	f004 f8bb 	bl	8014e8c <tcp_output>
  while (pcb != NULL) {
 8010d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f47f ad5e 	bne.w	80107da <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010d22:	4b0c      	ldr	r3, [pc, #48]	; (8010d54 <tcp_slowtmr+0x5a8>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010d28:	e069      	b.n	8010dfe <tcp_slowtmr+0x652>
 8010d2a:	bf00      	nop
 8010d2c:	24007860 	.word	0x24007860
 8010d30:	000a4cb8 	.word	0x000a4cb8
 8010d34:	10624dd3 	.word	0x10624dd3
 8010d38:	000124f8 	.word	0x000124f8
 8010d3c:	2400785c 	.word	0x2400785c
 8010d40:	0801ac5c 	.word	0x0801ac5c
 8010d44:	0801b094 	.word	0x0801b094
 8010d48:	0801aca0 	.word	0x0801aca0
 8010d4c:	0801b0c0 	.word	0x0801b0c0
 8010d50:	24007858 	.word	0x24007858
 8010d54:	2400786c 	.word	0x2400786c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5a:	7d1b      	ldrb	r3, [r3, #20]
 8010d5c:	2b0a      	cmp	r3, #10
 8010d5e:	d006      	beq.n	8010d6e <tcp_slowtmr+0x5c2>
 8010d60:	4b2b      	ldr	r3, [pc, #172]	; (8010e10 <tcp_slowtmr+0x664>)
 8010d62:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8010d66:	492b      	ldr	r1, [pc, #172]	; (8010e14 <tcp_slowtmr+0x668>)
 8010d68:	482b      	ldr	r0, [pc, #172]	; (8010e18 <tcp_slowtmr+0x66c>)
 8010d6a:	f008 f963 	bl	8019034 <iprintf>
    pcb_remove = 0;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010d74:	4b29      	ldr	r3, [pc, #164]	; (8010e1c <tcp_slowtmr+0x670>)
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7a:	6a1b      	ldr	r3, [r3, #32]
 8010d7c:	1ad3      	subs	r3, r2, r3
 8010d7e:	2bf0      	cmp	r3, #240	; 0xf0
 8010d80:	d904      	bls.n	8010d8c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8010d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d86:	3301      	adds	r3, #1
 8010d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d02f      	beq.n	8010df4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010d94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010d96:	f000 fc11 	bl	80115bc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d010      	beq.n	8010dc2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010da0:	4b1f      	ldr	r3, [pc, #124]	; (8010e20 <tcp_slowtmr+0x674>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d106      	bne.n	8010db8 <tcp_slowtmr+0x60c>
 8010daa:	4b19      	ldr	r3, [pc, #100]	; (8010e10 <tcp_slowtmr+0x664>)
 8010dac:	f240 52af 	movw	r2, #1455	; 0x5af
 8010db0:	491c      	ldr	r1, [pc, #112]	; (8010e24 <tcp_slowtmr+0x678>)
 8010db2:	4819      	ldr	r0, [pc, #100]	; (8010e18 <tcp_slowtmr+0x66c>)
 8010db4:	f008 f93e 	bl	8019034 <iprintf>
        prev->next = pcb->next;
 8010db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dba:	68da      	ldr	r2, [r3, #12]
 8010dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dbe:	60da      	str	r2, [r3, #12]
 8010dc0:	e00f      	b.n	8010de2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010dc2:	4b17      	ldr	r3, [pc, #92]	; (8010e20 <tcp_slowtmr+0x674>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d006      	beq.n	8010dda <tcp_slowtmr+0x62e>
 8010dcc:	4b10      	ldr	r3, [pc, #64]	; (8010e10 <tcp_slowtmr+0x664>)
 8010dce:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010dd2:	4915      	ldr	r1, [pc, #84]	; (8010e28 <tcp_slowtmr+0x67c>)
 8010dd4:	4810      	ldr	r0, [pc, #64]	; (8010e18 <tcp_slowtmr+0x66c>)
 8010dd6:	f008 f92d 	bl	8019034 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ddc:	68db      	ldr	r3, [r3, #12]
 8010dde:	4a10      	ldr	r2, [pc, #64]	; (8010e20 <tcp_slowtmr+0x674>)
 8010de0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de8:	68db      	ldr	r3, [r3, #12]
 8010dea:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010dec:	69f8      	ldr	r0, [r7, #28]
 8010dee:	f7fe ff85 	bl	800fcfc <tcp_free>
 8010df2:	e004      	b.n	8010dfe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d1a9      	bne.n	8010d58 <tcp_slowtmr+0x5ac>
    }
  }
}
 8010e04:	bf00      	nop
 8010e06:	bf00      	nop
 8010e08:	3730      	adds	r7, #48	; 0x30
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8010e0e:	bf00      	nop
 8010e10:	0801ac5c 	.word	0x0801ac5c
 8010e14:	0801b0ec 	.word	0x0801b0ec
 8010e18:	0801aca0 	.word	0x0801aca0
 8010e1c:	24007860 	.word	0x24007860
 8010e20:	2400786c 	.word	0x2400786c
 8010e24:	0801b11c 	.word	0x0801b11c
 8010e28:	0801b144 	.word	0x0801b144

08010e2c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b082      	sub	sp, #8
 8010e30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010e32:	4b2d      	ldr	r3, [pc, #180]	; (8010ee8 <tcp_fasttmr+0xbc>)
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	3301      	adds	r3, #1
 8010e38:	b2da      	uxtb	r2, r3
 8010e3a:	4b2b      	ldr	r3, [pc, #172]	; (8010ee8 <tcp_fasttmr+0xbc>)
 8010e3c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010e3e:	4b2b      	ldr	r3, [pc, #172]	; (8010eec <tcp_fasttmr+0xc0>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010e44:	e048      	b.n	8010ed8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	7f9a      	ldrb	r2, [r3, #30]
 8010e4a:	4b27      	ldr	r3, [pc, #156]	; (8010ee8 <tcp_fasttmr+0xbc>)
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d03f      	beq.n	8010ed2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010e52:	4b25      	ldr	r3, [pc, #148]	; (8010ee8 <tcp_fasttmr+0xbc>)
 8010e54:	781a      	ldrb	r2, [r3, #0]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	8b5b      	ldrh	r3, [r3, #26]
 8010e5e:	f003 0301 	and.w	r3, r3, #1
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d010      	beq.n	8010e88 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	8b5b      	ldrh	r3, [r3, #26]
 8010e6a:	f043 0302 	orr.w	r3, r3, #2
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f004 f809 	bl	8014e8c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	8b5b      	ldrh	r3, [r3, #26]
 8010e7e:	f023 0303 	bic.w	r3, r3, #3
 8010e82:	b29a      	uxth	r2, r3
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	8b5b      	ldrh	r3, [r3, #26]
 8010e8c:	f003 0308 	and.w	r3, r3, #8
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d009      	beq.n	8010ea8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	8b5b      	ldrh	r3, [r3, #26]
 8010e98:	f023 0308 	bic.w	r3, r3, #8
 8010e9c:	b29a      	uxth	r2, r3
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f7ff f8be 	bl	8010024 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	68db      	ldr	r3, [r3, #12]
 8010eac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d00a      	beq.n	8010ecc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010eb6:	4b0e      	ldr	r3, [pc, #56]	; (8010ef0 <tcp_fasttmr+0xc4>)
 8010eb8:	2200      	movs	r2, #0
 8010eba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 f819 	bl	8010ef4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010ec2:	4b0b      	ldr	r3, [pc, #44]	; (8010ef0 <tcp_fasttmr+0xc4>)
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d000      	beq.n	8010ecc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010eca:	e7b8      	b.n	8010e3e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	607b      	str	r3, [r7, #4]
 8010ed0:	e002      	b.n	8010ed8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	68db      	ldr	r3, [r3, #12]
 8010ed6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d1b3      	bne.n	8010e46 <tcp_fasttmr+0x1a>
    }
  }
}
 8010ede:	bf00      	nop
 8010ee0:	bf00      	nop
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	24004122 	.word	0x24004122
 8010eec:	2400785c 	.word	0x2400785c
 8010ef0:	24007858 	.word	0x24007858

08010ef4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010ef4:	b590      	push	{r4, r7, lr}
 8010ef6:	b085      	sub	sp, #20
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d109      	bne.n	8010f16 <tcp_process_refused_data+0x22>
 8010f02:	4b37      	ldr	r3, [pc, #220]	; (8010fe0 <tcp_process_refused_data+0xec>)
 8010f04:	f240 6209 	movw	r2, #1545	; 0x609
 8010f08:	4936      	ldr	r1, [pc, #216]	; (8010fe4 <tcp_process_refused_data+0xf0>)
 8010f0a:	4837      	ldr	r0, [pc, #220]	; (8010fe8 <tcp_process_refused_data+0xf4>)
 8010f0c:	f008 f892 	bl	8019034 <iprintf>
 8010f10:	f06f 030f 	mvn.w	r3, #15
 8010f14:	e060      	b.n	8010fd8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f1a:	7b5b      	ldrb	r3, [r3, #13]
 8010f1c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f22:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2200      	movs	r2, #0
 8010f28:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d00b      	beq.n	8010f4c <tcp_process_refused_data+0x58>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6918      	ldr	r0, [r3, #16]
 8010f3e:	2300      	movs	r3, #0
 8010f40:	68ba      	ldr	r2, [r7, #8]
 8010f42:	6879      	ldr	r1, [r7, #4]
 8010f44:	47a0      	blx	r4
 8010f46:	4603      	mov	r3, r0
 8010f48:	73fb      	strb	r3, [r7, #15]
 8010f4a:	e007      	b.n	8010f5c <tcp_process_refused_data+0x68>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	68ba      	ldr	r2, [r7, #8]
 8010f50:	6879      	ldr	r1, [r7, #4]
 8010f52:	2000      	movs	r0, #0
 8010f54:	f000 f8c2 	bl	80110dc <tcp_recv_null>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d12a      	bne.n	8010fba <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010f64:	7bbb      	ldrb	r3, [r7, #14]
 8010f66:	f003 0320 	and.w	r3, r3, #32
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d033      	beq.n	8010fd6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f72:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010f76:	d005      	beq.n	8010f84 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	b29a      	uxth	r2, r3
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d00b      	beq.n	8010fa6 <tcp_process_refused_data+0xb2>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6918      	ldr	r0, [r3, #16]
 8010f98:	2300      	movs	r3, #0
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	6879      	ldr	r1, [r7, #4]
 8010f9e:	47a0      	blx	r4
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	73fb      	strb	r3, [r7, #15]
 8010fa4:	e001      	b.n	8010faa <tcp_process_refused_data+0xb6>
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fae:	f113 0f0d 	cmn.w	r3, #13
 8010fb2:	d110      	bne.n	8010fd6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010fb4:	f06f 030c 	mvn.w	r3, #12
 8010fb8:	e00e      	b.n	8010fd8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fbe:	f113 0f0d 	cmn.w	r3, #13
 8010fc2:	d102      	bne.n	8010fca <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010fc4:	f06f 030c 	mvn.w	r3, #12
 8010fc8:	e006      	b.n	8010fd8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	68ba      	ldr	r2, [r7, #8]
 8010fce:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010fd0:	f06f 0304 	mvn.w	r3, #4
 8010fd4:	e000      	b.n	8010fd8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010fd6:	2300      	movs	r3, #0
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3714      	adds	r7, #20
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd90      	pop	{r4, r7, pc}
 8010fe0:	0801ac5c 	.word	0x0801ac5c
 8010fe4:	0801b16c 	.word	0x0801b16c
 8010fe8:	0801aca0 	.word	0x0801aca0

08010fec <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b084      	sub	sp, #16
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010ff4:	e007      	b.n	8011006 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f000 f80a 	bl	8011016 <tcp_seg_free>
    seg = next;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d1f4      	bne.n	8010ff6 <tcp_segs_free+0xa>
  }
}
 801100c:	bf00      	nop
 801100e:	bf00      	nop
 8011010:	3710      	adds	r7, #16
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}

08011016 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011016:	b580      	push	{r7, lr}
 8011018:	b082      	sub	sp, #8
 801101a:	af00      	add	r7, sp, #0
 801101c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d00c      	beq.n	801103e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d004      	beq.n	8011036 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	4618      	mov	r0, r3
 8011032:	f7fe fba7 	bl	800f784 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011036:	6879      	ldr	r1, [r7, #4]
 8011038:	2003      	movs	r0, #3
 801103a:	f7fd fcff 	bl	800ea3c <memp_free>
  }
}
 801103e:	bf00      	nop
 8011040:	3708      	adds	r7, #8
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}
	...

08011048 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	460b      	mov	r3, r1
 8011052:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d107      	bne.n	801106a <tcp_setprio+0x22>
 801105a:	4b07      	ldr	r3, [pc, #28]	; (8011078 <tcp_setprio+0x30>)
 801105c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8011060:	4906      	ldr	r1, [pc, #24]	; (801107c <tcp_setprio+0x34>)
 8011062:	4807      	ldr	r0, [pc, #28]	; (8011080 <tcp_setprio+0x38>)
 8011064:	f007 ffe6 	bl	8019034 <iprintf>
 8011068:	e002      	b.n	8011070 <tcp_setprio+0x28>

  pcb->prio = prio;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	78fa      	ldrb	r2, [r7, #3]
 801106e:	755a      	strb	r2, [r3, #21]
}
 8011070:	3708      	adds	r7, #8
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	0801ac5c 	.word	0x0801ac5c
 801107c:	0801b194 	.word	0x0801b194
 8011080:	0801aca0 	.word	0x0801aca0

08011084 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d106      	bne.n	80110a0 <tcp_seg_copy+0x1c>
 8011092:	4b0f      	ldr	r3, [pc, #60]	; (80110d0 <tcp_seg_copy+0x4c>)
 8011094:	f240 6282 	movw	r2, #1666	; 0x682
 8011098:	490e      	ldr	r1, [pc, #56]	; (80110d4 <tcp_seg_copy+0x50>)
 801109a:	480f      	ldr	r0, [pc, #60]	; (80110d8 <tcp_seg_copy+0x54>)
 801109c:	f007 ffca 	bl	8019034 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80110a0:	2003      	movs	r0, #3
 80110a2:	f7fd fc55 	bl	800e950 <memp_malloc>
 80110a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d101      	bne.n	80110b2 <tcp_seg_copy+0x2e>
    return NULL;
 80110ae:	2300      	movs	r3, #0
 80110b0:	e00a      	b.n	80110c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80110b2:	2210      	movs	r2, #16
 80110b4:	6879      	ldr	r1, [r7, #4]
 80110b6:	68f8      	ldr	r0, [r7, #12]
 80110b8:	f007 ff4b 	bl	8018f52 <memcpy>
  pbuf_ref(cseg->p);
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7fe fc05 	bl	800f8d0 <pbuf_ref>
  return cseg;
 80110c6:	68fb      	ldr	r3, [r7, #12]
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3710      	adds	r7, #16
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}
 80110d0:	0801ac5c 	.word	0x0801ac5c
 80110d4:	0801b1b0 	.word	0x0801b1b0
 80110d8:	0801aca0 	.word	0x0801aca0

080110dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b084      	sub	sp, #16
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	607a      	str	r2, [r7, #4]
 80110e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d109      	bne.n	8011104 <tcp_recv_null+0x28>
 80110f0:	4b12      	ldr	r3, [pc, #72]	; (801113c <tcp_recv_null+0x60>)
 80110f2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80110f6:	4912      	ldr	r1, [pc, #72]	; (8011140 <tcp_recv_null+0x64>)
 80110f8:	4812      	ldr	r0, [pc, #72]	; (8011144 <tcp_recv_null+0x68>)
 80110fa:	f007 ff9b 	bl	8019034 <iprintf>
 80110fe:	f06f 030f 	mvn.w	r3, #15
 8011102:	e016      	b.n	8011132 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d009      	beq.n	801111e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	891b      	ldrh	r3, [r3, #8]
 801110e:	4619      	mov	r1, r3
 8011110:	68b8      	ldr	r0, [r7, #8]
 8011112:	f7ff fab5 	bl	8010680 <tcp_recved>
    pbuf_free(p);
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f7fe fb34 	bl	800f784 <pbuf_free>
 801111c:	e008      	b.n	8011130 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801111e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d104      	bne.n	8011130 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011126:	68b8      	ldr	r0, [r7, #8]
 8011128:	f7fe ffe6 	bl	80100f8 <tcp_close>
 801112c:	4603      	mov	r3, r0
 801112e:	e000      	b.n	8011132 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011130:	2300      	movs	r3, #0
}
 8011132:	4618      	mov	r0, r3
 8011134:	3710      	adds	r7, #16
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	0801ac5c 	.word	0x0801ac5c
 8011140:	0801b1cc 	.word	0x0801b1cc
 8011144:	0801aca0 	.word	0x0801aca0

08011148 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b086      	sub	sp, #24
 801114c:	af00      	add	r7, sp, #0
 801114e:	4603      	mov	r3, r0
 8011150:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011156:	2b00      	cmp	r3, #0
 8011158:	db01      	blt.n	801115e <tcp_kill_prio+0x16>
 801115a:	79fb      	ldrb	r3, [r7, #7]
 801115c:	e000      	b.n	8011160 <tcp_kill_prio+0x18>
 801115e:	237f      	movs	r3, #127	; 0x7f
 8011160:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011162:	7afb      	ldrb	r3, [r7, #11]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d034      	beq.n	80111d2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011168:	7afb      	ldrb	r3, [r7, #11]
 801116a:	3b01      	subs	r3, #1
 801116c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801116e:	2300      	movs	r3, #0
 8011170:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011172:	2300      	movs	r3, #0
 8011174:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011176:	4b19      	ldr	r3, [pc, #100]	; (80111dc <tcp_kill_prio+0x94>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	617b      	str	r3, [r7, #20]
 801117c:	e01f      	b.n	80111be <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	7d5b      	ldrb	r3, [r3, #21]
 8011182:	7afa      	ldrb	r2, [r7, #11]
 8011184:	429a      	cmp	r2, r3
 8011186:	d80c      	bhi.n	80111a2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801118c:	7afa      	ldrb	r2, [r7, #11]
 801118e:	429a      	cmp	r2, r3
 8011190:	d112      	bne.n	80111b8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011192:	4b13      	ldr	r3, [pc, #76]	; (80111e0 <tcp_kill_prio+0x98>)
 8011194:	681a      	ldr	r2, [r3, #0]
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	6a1b      	ldr	r3, [r3, #32]
 801119a:	1ad3      	subs	r3, r2, r3
 801119c:	68fa      	ldr	r2, [r7, #12]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d80a      	bhi.n	80111b8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80111a2:	4b0f      	ldr	r3, [pc, #60]	; (80111e0 <tcp_kill_prio+0x98>)
 80111a4:	681a      	ldr	r2, [r3, #0]
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	6a1b      	ldr	r3, [r3, #32]
 80111aa:	1ad3      	subs	r3, r2, r3
 80111ac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	7d5b      	ldrb	r3, [r3, #21]
 80111b6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	617b      	str	r3, [r7, #20]
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d1dc      	bne.n	801117e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d004      	beq.n	80111d4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80111ca:	6938      	ldr	r0, [r7, #16]
 80111cc:	f7ff f87e 	bl	80102cc <tcp_abort>
 80111d0:	e000      	b.n	80111d4 <tcp_kill_prio+0x8c>
    return;
 80111d2:	bf00      	nop
  }
}
 80111d4:	3718      	adds	r7, #24
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	2400785c 	.word	0x2400785c
 80111e0:	24007860 	.word	0x24007860

080111e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b086      	sub	sp, #24
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	4603      	mov	r3, r0
 80111ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80111ee:	79fb      	ldrb	r3, [r7, #7]
 80111f0:	2b08      	cmp	r3, #8
 80111f2:	d009      	beq.n	8011208 <tcp_kill_state+0x24>
 80111f4:	79fb      	ldrb	r3, [r7, #7]
 80111f6:	2b09      	cmp	r3, #9
 80111f8:	d006      	beq.n	8011208 <tcp_kill_state+0x24>
 80111fa:	4b1a      	ldr	r3, [pc, #104]	; (8011264 <tcp_kill_state+0x80>)
 80111fc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011200:	4919      	ldr	r1, [pc, #100]	; (8011268 <tcp_kill_state+0x84>)
 8011202:	481a      	ldr	r0, [pc, #104]	; (801126c <tcp_kill_state+0x88>)
 8011204:	f007 ff16 	bl	8019034 <iprintf>

  inactivity = 0;
 8011208:	2300      	movs	r3, #0
 801120a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801120c:	2300      	movs	r3, #0
 801120e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011210:	4b17      	ldr	r3, [pc, #92]	; (8011270 <tcp_kill_state+0x8c>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	617b      	str	r3, [r7, #20]
 8011216:	e017      	b.n	8011248 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	7d1b      	ldrb	r3, [r3, #20]
 801121c:	79fa      	ldrb	r2, [r7, #7]
 801121e:	429a      	cmp	r2, r3
 8011220:	d10f      	bne.n	8011242 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011222:	4b14      	ldr	r3, [pc, #80]	; (8011274 <tcp_kill_state+0x90>)
 8011224:	681a      	ldr	r2, [r3, #0]
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	6a1b      	ldr	r3, [r3, #32]
 801122a:	1ad3      	subs	r3, r2, r3
 801122c:	68fa      	ldr	r2, [r7, #12]
 801122e:	429a      	cmp	r2, r3
 8011230:	d807      	bhi.n	8011242 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011232:	4b10      	ldr	r3, [pc, #64]	; (8011274 <tcp_kill_state+0x90>)
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	6a1b      	ldr	r3, [r3, #32]
 801123a:	1ad3      	subs	r3, r2, r3
 801123c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	617b      	str	r3, [r7, #20]
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d1e4      	bne.n	8011218 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d003      	beq.n	801125c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011254:	2100      	movs	r1, #0
 8011256:	6938      	ldr	r0, [r7, #16]
 8011258:	f7fe ff7a 	bl	8010150 <tcp_abandon>
  }
}
 801125c:	bf00      	nop
 801125e:	3718      	adds	r7, #24
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	0801ac5c 	.word	0x0801ac5c
 8011268:	0801b1e8 	.word	0x0801b1e8
 801126c:	0801aca0 	.word	0x0801aca0
 8011270:	2400785c 	.word	0x2400785c
 8011274:	24007860 	.word	0x24007860

08011278 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b084      	sub	sp, #16
 801127c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801127e:	2300      	movs	r3, #0
 8011280:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011282:	2300      	movs	r3, #0
 8011284:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011286:	4b12      	ldr	r3, [pc, #72]	; (80112d0 <tcp_kill_timewait+0x58>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	60fb      	str	r3, [r7, #12]
 801128c:	e012      	b.n	80112b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801128e:	4b11      	ldr	r3, [pc, #68]	; (80112d4 <tcp_kill_timewait+0x5c>)
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	6a1b      	ldr	r3, [r3, #32]
 8011296:	1ad3      	subs	r3, r2, r3
 8011298:	687a      	ldr	r2, [r7, #4]
 801129a:	429a      	cmp	r2, r3
 801129c:	d807      	bhi.n	80112ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801129e:	4b0d      	ldr	r3, [pc, #52]	; (80112d4 <tcp_kill_timewait+0x5c>)
 80112a0:	681a      	ldr	r2, [r3, #0]
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	6a1b      	ldr	r3, [r3, #32]
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	60fb      	str	r3, [r7, #12]
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d1e9      	bne.n	801128e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d002      	beq.n	80112c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80112c0:	68b8      	ldr	r0, [r7, #8]
 80112c2:	f7ff f803 	bl	80102cc <tcp_abort>
  }
}
 80112c6:	bf00      	nop
 80112c8:	3710      	adds	r7, #16
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	2400786c 	.word	0x2400786c
 80112d4:	24007860 	.word	0x24007860

080112d8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80112de:	4b10      	ldr	r3, [pc, #64]	; (8011320 <tcp_handle_closepend+0x48>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80112e4:	e014      	b.n	8011310 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	68db      	ldr	r3, [r3, #12]
 80112ea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	8b5b      	ldrh	r3, [r3, #26]
 80112f0:	f003 0308 	and.w	r3, r3, #8
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d009      	beq.n	801130c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	8b5b      	ldrh	r3, [r3, #26]
 80112fc:	f023 0308 	bic.w	r3, r3, #8
 8011300:	b29a      	uxth	r2, r3
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f7fe fe8c 	bl	8010024 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d1e7      	bne.n	80112e6 <tcp_handle_closepend+0xe>
  }
}
 8011316:	bf00      	nop
 8011318:	bf00      	nop
 801131a:	3708      	adds	r7, #8
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}
 8011320:	2400785c 	.word	0x2400785c

08011324 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	4603      	mov	r3, r0
 801132c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801132e:	2001      	movs	r0, #1
 8011330:	f7fd fb0e 	bl	800e950 <memp_malloc>
 8011334:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d126      	bne.n	801138a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801133c:	f7ff ffcc 	bl	80112d8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011340:	f7ff ff9a 	bl	8011278 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011344:	2001      	movs	r0, #1
 8011346:	f7fd fb03 	bl	800e950 <memp_malloc>
 801134a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d11b      	bne.n	801138a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011352:	2009      	movs	r0, #9
 8011354:	f7ff ff46 	bl	80111e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011358:	2001      	movs	r0, #1
 801135a:	f7fd faf9 	bl	800e950 <memp_malloc>
 801135e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d111      	bne.n	801138a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011366:	2008      	movs	r0, #8
 8011368:	f7ff ff3c 	bl	80111e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801136c:	2001      	movs	r0, #1
 801136e:	f7fd faef 	bl	800e950 <memp_malloc>
 8011372:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d107      	bne.n	801138a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801137a:	79fb      	ldrb	r3, [r7, #7]
 801137c:	4618      	mov	r0, r3
 801137e:	f7ff fee3 	bl	8011148 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011382:	2001      	movs	r0, #1
 8011384:	f7fd fae4 	bl	800e950 <memp_malloc>
 8011388:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d03f      	beq.n	8011410 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011390:	229c      	movs	r2, #156	; 0x9c
 8011392:	2100      	movs	r1, #0
 8011394:	68f8      	ldr	r0, [r7, #12]
 8011396:	f007 fdea 	bl	8018f6e <memset>
    pcb->prio = prio;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	79fa      	ldrb	r2, [r7, #7]
 801139e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80113a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80113b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	22ff      	movs	r2, #255	; 0xff
 80113be:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80113c6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	2206      	movs	r2, #6
 80113cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	2206      	movs	r2, #6
 80113d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113dc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2201      	movs	r2, #1
 80113e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80113e6:	4b0d      	ldr	r3, [pc, #52]	; (801141c <tcp_alloc+0xf8>)
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80113ee:	4b0c      	ldr	r3, [pc, #48]	; (8011420 <tcp_alloc+0xfc>)
 80113f0:	781a      	ldrb	r2, [r3, #0]
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80113fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	4a08      	ldr	r2, [pc, #32]	; (8011424 <tcp_alloc+0x100>)
 8011404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	4a07      	ldr	r2, [pc, #28]	; (8011428 <tcp_alloc+0x104>)
 801140c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011410:	68fb      	ldr	r3, [r7, #12]
}
 8011412:	4618      	mov	r0, r3
 8011414:	3710      	adds	r7, #16
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	24007860 	.word	0x24007860
 8011420:	24004122 	.word	0x24004122
 8011424:	080110dd 	.word	0x080110dd
 8011428:	006ddd00 	.word	0x006ddd00

0801142c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8011430:	2040      	movs	r0, #64	; 0x40
 8011432:	f7ff ff77 	bl	8011324 <tcp_alloc>
 8011436:	4603      	mov	r3, r0
}
 8011438:	4618      	mov	r0, r3
 801143a:	bd80      	pop	{r7, pc}

0801143c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801143c:	b480      	push	{r7}
 801143e:	b083      	sub	sp, #12
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d002      	beq.n	8011452 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	683a      	ldr	r2, [r7, #0]
 8011450:	611a      	str	r2, [r3, #16]
  }
}
 8011452:	bf00      	nop
 8011454:	370c      	adds	r7, #12
 8011456:	46bd      	mov	sp, r7
 8011458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145c:	4770      	bx	lr
	...

08011460 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d00e      	beq.n	801148e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	7d1b      	ldrb	r3, [r3, #20]
 8011474:	2b01      	cmp	r3, #1
 8011476:	d106      	bne.n	8011486 <tcp_recv+0x26>
 8011478:	4b07      	ldr	r3, [pc, #28]	; (8011498 <tcp_recv+0x38>)
 801147a:	f240 72df 	movw	r2, #2015	; 0x7df
 801147e:	4907      	ldr	r1, [pc, #28]	; (801149c <tcp_recv+0x3c>)
 8011480:	4807      	ldr	r0, [pc, #28]	; (80114a0 <tcp_recv+0x40>)
 8011482:	f007 fdd7 	bl	8019034 <iprintf>
    pcb->recv = recv;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	683a      	ldr	r2, [r7, #0]
 801148a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801148e:	bf00      	nop
 8011490:	3708      	adds	r7, #8
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}
 8011496:	bf00      	nop
 8011498:	0801ac5c 	.word	0x0801ac5c
 801149c:	0801b1f8 	.word	0x0801b1f8
 80114a0:	0801aca0 	.word	0x0801aca0

080114a4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d00e      	beq.n	80114d2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	7d1b      	ldrb	r3, [r3, #20]
 80114b8:	2b01      	cmp	r3, #1
 80114ba:	d106      	bne.n	80114ca <tcp_sent+0x26>
 80114bc:	4b07      	ldr	r3, [pc, #28]	; (80114dc <tcp_sent+0x38>)
 80114be:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80114c2:	4907      	ldr	r1, [pc, #28]	; (80114e0 <tcp_sent+0x3c>)
 80114c4:	4807      	ldr	r0, [pc, #28]	; (80114e4 <tcp_sent+0x40>)
 80114c6:	f007 fdb5 	bl	8019034 <iprintf>
    pcb->sent = sent;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	683a      	ldr	r2, [r7, #0]
 80114ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80114d2:	bf00      	nop
 80114d4:	3708      	adds	r7, #8
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
 80114da:	bf00      	nop
 80114dc:	0801ac5c 	.word	0x0801ac5c
 80114e0:	0801b220 	.word	0x0801b220
 80114e4:	0801aca0 	.word	0x0801aca0

080114e8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d00e      	beq.n	8011516 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	7d1b      	ldrb	r3, [r3, #20]
 80114fc:	2b01      	cmp	r3, #1
 80114fe:	d106      	bne.n	801150e <tcp_err+0x26>
 8011500:	4b07      	ldr	r3, [pc, #28]	; (8011520 <tcp_err+0x38>)
 8011502:	f640 020d 	movw	r2, #2061	; 0x80d
 8011506:	4907      	ldr	r1, [pc, #28]	; (8011524 <tcp_err+0x3c>)
 8011508:	4807      	ldr	r0, [pc, #28]	; (8011528 <tcp_err+0x40>)
 801150a:	f007 fd93 	bl	8019034 <iprintf>
    pcb->errf = err;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	683a      	ldr	r2, [r7, #0]
 8011512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8011516:	bf00      	nop
 8011518:	3708      	adds	r7, #8
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	0801ac5c 	.word	0x0801ac5c
 8011524:	0801b248 	.word	0x0801b248
 8011528:	0801aca0 	.word	0x0801aca0

0801152c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801152c:	b480      	push	{r7}
 801152e:	b085      	sub	sp, #20
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d008      	beq.n	801154e <tcp_accept+0x22>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	7d1b      	ldrb	r3, [r3, #20]
 8011540:	2b01      	cmp	r3, #1
 8011542:	d104      	bne.n	801154e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	683a      	ldr	r2, [r7, #0]
 801154c:	619a      	str	r2, [r3, #24]
  }
}
 801154e:	bf00      	nop
 8011550:	3714      	adds	r7, #20
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr
	...

0801155c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	60f8      	str	r0, [r7, #12]
 8011564:	60b9      	str	r1, [r7, #8]
 8011566:	4613      	mov	r3, r2
 8011568:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d107      	bne.n	8011580 <tcp_poll+0x24>
 8011570:	4b0e      	ldr	r3, [pc, #56]	; (80115ac <tcp_poll+0x50>)
 8011572:	f640 023d 	movw	r2, #2109	; 0x83d
 8011576:	490e      	ldr	r1, [pc, #56]	; (80115b0 <tcp_poll+0x54>)
 8011578:	480e      	ldr	r0, [pc, #56]	; (80115b4 <tcp_poll+0x58>)
 801157a:	f007 fd5b 	bl	8019034 <iprintf>
 801157e:	e011      	b.n	80115a4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	7d1b      	ldrb	r3, [r3, #20]
 8011584:	2b01      	cmp	r3, #1
 8011586:	d106      	bne.n	8011596 <tcp_poll+0x3a>
 8011588:	4b08      	ldr	r3, [pc, #32]	; (80115ac <tcp_poll+0x50>)
 801158a:	f640 023e 	movw	r2, #2110	; 0x83e
 801158e:	490a      	ldr	r1, [pc, #40]	; (80115b8 <tcp_poll+0x5c>)
 8011590:	4808      	ldr	r0, [pc, #32]	; (80115b4 <tcp_poll+0x58>)
 8011592:	f007 fd4f 	bl	8019034 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	68ba      	ldr	r2, [r7, #8]
 801159a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	79fa      	ldrb	r2, [r7, #7]
 80115a2:	775a      	strb	r2, [r3, #29]
}
 80115a4:	3710      	adds	r7, #16
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	0801ac5c 	.word	0x0801ac5c
 80115b0:	0801b270 	.word	0x0801b270
 80115b4:	0801aca0 	.word	0x0801aca0
 80115b8:	0801b288 	.word	0x0801b288

080115bc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d107      	bne.n	80115da <tcp_pcb_purge+0x1e>
 80115ca:	4b21      	ldr	r3, [pc, #132]	; (8011650 <tcp_pcb_purge+0x94>)
 80115cc:	f640 0251 	movw	r2, #2129	; 0x851
 80115d0:	4920      	ldr	r1, [pc, #128]	; (8011654 <tcp_pcb_purge+0x98>)
 80115d2:	4821      	ldr	r0, [pc, #132]	; (8011658 <tcp_pcb_purge+0x9c>)
 80115d4:	f007 fd2e 	bl	8019034 <iprintf>
 80115d8:	e037      	b.n	801164a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	7d1b      	ldrb	r3, [r3, #20]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d033      	beq.n	801164a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80115e6:	2b0a      	cmp	r3, #10
 80115e8:	d02f      	beq.n	801164a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	d02b      	beq.n	801164a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d007      	beq.n	801160a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115fe:	4618      	mov	r0, r3
 8011600:	f7fe f8c0 	bl	800f784 <pbuf_free>
      pcb->refused_data = NULL;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2200      	movs	r2, #0
 8011608:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801160e:	2b00      	cmp	r3, #0
 8011610:	d002      	beq.n	8011618 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f000 f986 	bl	8011924 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801161e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011624:	4618      	mov	r0, r3
 8011626:	f7ff fce1 	bl	8010fec <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801162e:	4618      	mov	r0, r3
 8011630:	f7ff fcdc 	bl	8010fec <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2200      	movs	r2, #0
 8011638:	66da      	str	r2, [r3, #108]	; 0x6c
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2200      	movs	r2, #0
 8011646:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	0801ac5c 	.word	0x0801ac5c
 8011654:	0801b2a8 	.word	0x0801b2a8
 8011658:	0801aca0 	.word	0x0801aca0

0801165c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b084      	sub	sp, #16
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d106      	bne.n	801167a <tcp_pcb_remove+0x1e>
 801166c:	4b3e      	ldr	r3, [pc, #248]	; (8011768 <tcp_pcb_remove+0x10c>)
 801166e:	f640 0283 	movw	r2, #2179	; 0x883
 8011672:	493e      	ldr	r1, [pc, #248]	; (801176c <tcp_pcb_remove+0x110>)
 8011674:	483e      	ldr	r0, [pc, #248]	; (8011770 <tcp_pcb_remove+0x114>)
 8011676:	f007 fcdd 	bl	8019034 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d106      	bne.n	801168e <tcp_pcb_remove+0x32>
 8011680:	4b39      	ldr	r3, [pc, #228]	; (8011768 <tcp_pcb_remove+0x10c>)
 8011682:	f640 0284 	movw	r2, #2180	; 0x884
 8011686:	493b      	ldr	r1, [pc, #236]	; (8011774 <tcp_pcb_remove+0x118>)
 8011688:	4839      	ldr	r0, [pc, #228]	; (8011770 <tcp_pcb_remove+0x114>)
 801168a:	f007 fcd3 	bl	8019034 <iprintf>

  TCP_RMV(pcblist, pcb);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	683a      	ldr	r2, [r7, #0]
 8011694:	429a      	cmp	r2, r3
 8011696:	d105      	bne.n	80116a4 <tcp_pcb_remove+0x48>
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	68da      	ldr	r2, [r3, #12]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	601a      	str	r2, [r3, #0]
 80116a2:	e013      	b.n	80116cc <tcp_pcb_remove+0x70>
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	60fb      	str	r3, [r7, #12]
 80116aa:	e00c      	b.n	80116c6 <tcp_pcb_remove+0x6a>
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	683a      	ldr	r2, [r7, #0]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d104      	bne.n	80116c0 <tcp_pcb_remove+0x64>
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	68da      	ldr	r2, [r3, #12]
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	60da      	str	r2, [r3, #12]
 80116be:	e005      	b.n	80116cc <tcp_pcb_remove+0x70>
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	68db      	ldr	r3, [r3, #12]
 80116c4:	60fb      	str	r3, [r7, #12]
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d1ef      	bne.n	80116ac <tcp_pcb_remove+0x50>
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	2200      	movs	r2, #0
 80116d0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80116d2:	6838      	ldr	r0, [r7, #0]
 80116d4:	f7ff ff72 	bl	80115bc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	7d1b      	ldrb	r3, [r3, #20]
 80116dc:	2b0a      	cmp	r3, #10
 80116de:	d013      	beq.n	8011708 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80116e4:	2b01      	cmp	r3, #1
 80116e6:	d00f      	beq.n	8011708 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	8b5b      	ldrh	r3, [r3, #26]
 80116ec:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d009      	beq.n	8011708 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	8b5b      	ldrh	r3, [r3, #26]
 80116f8:	f043 0302 	orr.w	r3, r3, #2
 80116fc:	b29a      	uxth	r2, r3
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011702:	6838      	ldr	r0, [r7, #0]
 8011704:	f003 fbc2 	bl	8014e8c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	7d1b      	ldrb	r3, [r3, #20]
 801170c:	2b01      	cmp	r3, #1
 801170e:	d020      	beq.n	8011752 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011714:	2b00      	cmp	r3, #0
 8011716:	d006      	beq.n	8011726 <tcp_pcb_remove+0xca>
 8011718:	4b13      	ldr	r3, [pc, #76]	; (8011768 <tcp_pcb_remove+0x10c>)
 801171a:	f640 0293 	movw	r2, #2195	; 0x893
 801171e:	4916      	ldr	r1, [pc, #88]	; (8011778 <tcp_pcb_remove+0x11c>)
 8011720:	4813      	ldr	r0, [pc, #76]	; (8011770 <tcp_pcb_remove+0x114>)
 8011722:	f007 fc87 	bl	8019034 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801172a:	2b00      	cmp	r3, #0
 801172c:	d006      	beq.n	801173c <tcp_pcb_remove+0xe0>
 801172e:	4b0e      	ldr	r3, [pc, #56]	; (8011768 <tcp_pcb_remove+0x10c>)
 8011730:	f640 0294 	movw	r2, #2196	; 0x894
 8011734:	4911      	ldr	r1, [pc, #68]	; (801177c <tcp_pcb_remove+0x120>)
 8011736:	480e      	ldr	r0, [pc, #56]	; (8011770 <tcp_pcb_remove+0x114>)
 8011738:	f007 fc7c 	bl	8019034 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011740:	2b00      	cmp	r3, #0
 8011742:	d006      	beq.n	8011752 <tcp_pcb_remove+0xf6>
 8011744:	4b08      	ldr	r3, [pc, #32]	; (8011768 <tcp_pcb_remove+0x10c>)
 8011746:	f640 0296 	movw	r2, #2198	; 0x896
 801174a:	490d      	ldr	r1, [pc, #52]	; (8011780 <tcp_pcb_remove+0x124>)
 801174c:	4808      	ldr	r0, [pc, #32]	; (8011770 <tcp_pcb_remove+0x114>)
 801174e:	f007 fc71 	bl	8019034 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	2200      	movs	r2, #0
 8011756:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	2200      	movs	r2, #0
 801175c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801175e:	bf00      	nop
 8011760:	3710      	adds	r7, #16
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	0801ac5c 	.word	0x0801ac5c
 801176c:	0801b2c4 	.word	0x0801b2c4
 8011770:	0801aca0 	.word	0x0801aca0
 8011774:	0801b2e0 	.word	0x0801b2e0
 8011778:	0801b300 	.word	0x0801b300
 801177c:	0801b318 	.word	0x0801b318
 8011780:	0801b334 	.word	0x0801b334

08011784 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d106      	bne.n	80117a0 <tcp_next_iss+0x1c>
 8011792:	4b0a      	ldr	r3, [pc, #40]	; (80117bc <tcp_next_iss+0x38>)
 8011794:	f640 02af 	movw	r2, #2223	; 0x8af
 8011798:	4909      	ldr	r1, [pc, #36]	; (80117c0 <tcp_next_iss+0x3c>)
 801179a:	480a      	ldr	r0, [pc, #40]	; (80117c4 <tcp_next_iss+0x40>)
 801179c:	f007 fc4a 	bl	8019034 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80117a0:	4b09      	ldr	r3, [pc, #36]	; (80117c8 <tcp_next_iss+0x44>)
 80117a2:	681a      	ldr	r2, [r3, #0]
 80117a4:	4b09      	ldr	r3, [pc, #36]	; (80117cc <tcp_next_iss+0x48>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	4413      	add	r3, r2
 80117aa:	4a07      	ldr	r2, [pc, #28]	; (80117c8 <tcp_next_iss+0x44>)
 80117ac:	6013      	str	r3, [r2, #0]
  return iss;
 80117ae:	4b06      	ldr	r3, [pc, #24]	; (80117c8 <tcp_next_iss+0x44>)
 80117b0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	3708      	adds	r7, #8
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bd80      	pop	{r7, pc}
 80117ba:	bf00      	nop
 80117bc:	0801ac5c 	.word	0x0801ac5c
 80117c0:	0801b34c 	.word	0x0801b34c
 80117c4:	0801aca0 	.word	0x0801aca0
 80117c8:	24000034 	.word	0x24000034
 80117cc:	24007860 	.word	0x24007860

080117d0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b086      	sub	sp, #24
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	4603      	mov	r3, r0
 80117d8:	60b9      	str	r1, [r7, #8]
 80117da:	607a      	str	r2, [r7, #4]
 80117dc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d106      	bne.n	80117f2 <tcp_eff_send_mss_netif+0x22>
 80117e4:	4b14      	ldr	r3, [pc, #80]	; (8011838 <tcp_eff_send_mss_netif+0x68>)
 80117e6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80117ea:	4914      	ldr	r1, [pc, #80]	; (801183c <tcp_eff_send_mss_netif+0x6c>)
 80117ec:	4814      	ldr	r0, [pc, #80]	; (8011840 <tcp_eff_send_mss_netif+0x70>)
 80117ee:	f007 fc21 	bl	8019034 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d101      	bne.n	80117fc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80117f8:	89fb      	ldrh	r3, [r7, #14]
 80117fa:	e019      	b.n	8011830 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011800:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011802:	8afb      	ldrh	r3, [r7, #22]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d012      	beq.n	801182e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011808:	2328      	movs	r3, #40	; 0x28
 801180a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801180c:	8afa      	ldrh	r2, [r7, #22]
 801180e:	8abb      	ldrh	r3, [r7, #20]
 8011810:	429a      	cmp	r2, r3
 8011812:	d904      	bls.n	801181e <tcp_eff_send_mss_netif+0x4e>
 8011814:	8afa      	ldrh	r2, [r7, #22]
 8011816:	8abb      	ldrh	r3, [r7, #20]
 8011818:	1ad3      	subs	r3, r2, r3
 801181a:	b29b      	uxth	r3, r3
 801181c:	e000      	b.n	8011820 <tcp_eff_send_mss_netif+0x50>
 801181e:	2300      	movs	r3, #0
 8011820:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011822:	8a7a      	ldrh	r2, [r7, #18]
 8011824:	89fb      	ldrh	r3, [r7, #14]
 8011826:	4293      	cmp	r3, r2
 8011828:	bf28      	it	cs
 801182a:	4613      	movcs	r3, r2
 801182c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801182e:	89fb      	ldrh	r3, [r7, #14]
}
 8011830:	4618      	mov	r0, r3
 8011832:	3718      	adds	r7, #24
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	0801ac5c 	.word	0x0801ac5c
 801183c:	0801b368 	.word	0x0801b368
 8011840:	0801aca0 	.word	0x0801aca0

08011844 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d119      	bne.n	801188c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011858:	4b10      	ldr	r3, [pc, #64]	; (801189c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801185a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801185e:	4910      	ldr	r1, [pc, #64]	; (80118a0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011860:	4810      	ldr	r0, [pc, #64]	; (80118a4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011862:	f007 fbe7 	bl	8019034 <iprintf>

  while (pcb != NULL) {
 8011866:	e011      	b.n	801188c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	429a      	cmp	r2, r3
 8011872:	d108      	bne.n	8011886 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	68db      	ldr	r3, [r3, #12]
 8011878:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801187a:	68f8      	ldr	r0, [r7, #12]
 801187c:	f7fe fd26 	bl	80102cc <tcp_abort>
      pcb = next;
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	60fb      	str	r3, [r7, #12]
 8011884:	e002      	b.n	801188c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	68db      	ldr	r3, [r3, #12]
 801188a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d1ea      	bne.n	8011868 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011892:	bf00      	nop
 8011894:	bf00      	nop
 8011896:	3710      	adds	r7, #16
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}
 801189c:	0801ac5c 	.word	0x0801ac5c
 80118a0:	0801b390 	.word	0x0801b390
 80118a4:	0801aca0 	.word	0x0801aca0

080118a8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d02a      	beq.n	801190e <tcp_netif_ip_addr_changed+0x66>
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d026      	beq.n	801190e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80118c0:	4b15      	ldr	r3, [pc, #84]	; (8011918 <tcp_netif_ip_addr_changed+0x70>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	4619      	mov	r1, r3
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f7ff ffbc 	bl	8011844 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80118cc:	4b13      	ldr	r3, [pc, #76]	; (801191c <tcp_netif_ip_addr_changed+0x74>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	4619      	mov	r1, r3
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f7ff ffb6 	bl	8011844 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d017      	beq.n	801190e <tcp_netif_ip_addr_changed+0x66>
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d013      	beq.n	801190e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80118e6:	4b0e      	ldr	r3, [pc, #56]	; (8011920 <tcp_netif_ip_addr_changed+0x78>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	60fb      	str	r3, [r7, #12]
 80118ec:	e00c      	b.n	8011908 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d103      	bne.n	8011902 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	681a      	ldr	r2, [r3, #0]
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	60fb      	str	r3, [r7, #12]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d1ef      	bne.n	80118ee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801190e:	bf00      	nop
 8011910:	3710      	adds	r7, #16
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}
 8011916:	bf00      	nop
 8011918:	2400785c 	.word	0x2400785c
 801191c:	24007868 	.word	0x24007868
 8011920:	24007864 	.word	0x24007864

08011924 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b082      	sub	sp, #8
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011930:	2b00      	cmp	r3, #0
 8011932:	d007      	beq.n	8011944 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011938:	4618      	mov	r0, r3
 801193a:	f7ff fb57 	bl	8010fec <tcp_segs_free>
    pcb->ooseq = NULL;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2200      	movs	r2, #0
 8011942:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011944:	bf00      	nop
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801194c:	b590      	push	{r4, r7, lr}
 801194e:	b08d      	sub	sp, #52	; 0x34
 8011950:	af04      	add	r7, sp, #16
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d105      	bne.n	8011968 <tcp_input+0x1c>
 801195c:	4b9b      	ldr	r3, [pc, #620]	; (8011bcc <tcp_input+0x280>)
 801195e:	2283      	movs	r2, #131	; 0x83
 8011960:	499b      	ldr	r1, [pc, #620]	; (8011bd0 <tcp_input+0x284>)
 8011962:	489c      	ldr	r0, [pc, #624]	; (8011bd4 <tcp_input+0x288>)
 8011964:	f007 fb66 	bl	8019034 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	4a9a      	ldr	r2, [pc, #616]	; (8011bd8 <tcp_input+0x28c>)
 801196e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	895b      	ldrh	r3, [r3, #10]
 8011974:	2b13      	cmp	r3, #19
 8011976:	f240 83c4 	bls.w	8012102 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801197a:	4b98      	ldr	r3, [pc, #608]	; (8011bdc <tcp_input+0x290>)
 801197c:	695b      	ldr	r3, [r3, #20]
 801197e:	4a97      	ldr	r2, [pc, #604]	; (8011bdc <tcp_input+0x290>)
 8011980:	6812      	ldr	r2, [r2, #0]
 8011982:	4611      	mov	r1, r2
 8011984:	4618      	mov	r0, r3
 8011986:	f006 f8c1 	bl	8017b0c <ip4_addr_isbroadcast_u32>
 801198a:	4603      	mov	r3, r0
 801198c:	2b00      	cmp	r3, #0
 801198e:	f040 83ba 	bne.w	8012106 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011992:	4b92      	ldr	r3, [pc, #584]	; (8011bdc <tcp_input+0x290>)
 8011994:	695b      	ldr	r3, [r3, #20]
 8011996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801199a:	2be0      	cmp	r3, #224	; 0xe0
 801199c:	f000 83b3 	beq.w	8012106 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80119a0:	4b8d      	ldr	r3, [pc, #564]	; (8011bd8 <tcp_input+0x28c>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	899b      	ldrh	r3, [r3, #12]
 80119a6:	b29b      	uxth	r3, r3
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7fc fa41 	bl	800de30 <lwip_htons>
 80119ae:	4603      	mov	r3, r0
 80119b0:	0b1b      	lsrs	r3, r3, #12
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	b2db      	uxtb	r3, r3
 80119b6:	009b      	lsls	r3, r3, #2
 80119b8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80119ba:	7cbb      	ldrb	r3, [r7, #18]
 80119bc:	2b13      	cmp	r3, #19
 80119be:	f240 83a4 	bls.w	801210a <tcp_input+0x7be>
 80119c2:	7cbb      	ldrb	r3, [r7, #18]
 80119c4:	b29a      	uxth	r2, r3
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	891b      	ldrh	r3, [r3, #8]
 80119ca:	429a      	cmp	r2, r3
 80119cc:	f200 839d 	bhi.w	801210a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80119d0:	7cbb      	ldrb	r3, [r7, #18]
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	3b14      	subs	r3, #20
 80119d6:	b29a      	uxth	r2, r3
 80119d8:	4b81      	ldr	r3, [pc, #516]	; (8011be0 <tcp_input+0x294>)
 80119da:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80119dc:	4b81      	ldr	r3, [pc, #516]	; (8011be4 <tcp_input+0x298>)
 80119de:	2200      	movs	r2, #0
 80119e0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	895a      	ldrh	r2, [r3, #10]
 80119e6:	7cbb      	ldrb	r3, [r7, #18]
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d309      	bcc.n	8011a02 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80119ee:	4b7c      	ldr	r3, [pc, #496]	; (8011be0 <tcp_input+0x294>)
 80119f0:	881a      	ldrh	r2, [r3, #0]
 80119f2:	4b7d      	ldr	r3, [pc, #500]	; (8011be8 <tcp_input+0x29c>)
 80119f4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80119f6:	7cbb      	ldrb	r3, [r7, #18]
 80119f8:	4619      	mov	r1, r3
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f7fd fe3c 	bl	800f678 <pbuf_remove_header>
 8011a00:	e04e      	b.n	8011aa0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d105      	bne.n	8011a16 <tcp_input+0xca>
 8011a0a:	4b70      	ldr	r3, [pc, #448]	; (8011bcc <tcp_input+0x280>)
 8011a0c:	22c2      	movs	r2, #194	; 0xc2
 8011a0e:	4977      	ldr	r1, [pc, #476]	; (8011bec <tcp_input+0x2a0>)
 8011a10:	4870      	ldr	r0, [pc, #448]	; (8011bd4 <tcp_input+0x288>)
 8011a12:	f007 fb0f 	bl	8019034 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011a16:	2114      	movs	r1, #20
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f7fd fe2d 	bl	800f678 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	895a      	ldrh	r2, [r3, #10]
 8011a22:	4b71      	ldr	r3, [pc, #452]	; (8011be8 <tcp_input+0x29c>)
 8011a24:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011a26:	4b6e      	ldr	r3, [pc, #440]	; (8011be0 <tcp_input+0x294>)
 8011a28:	881a      	ldrh	r2, [r3, #0]
 8011a2a:	4b6f      	ldr	r3, [pc, #444]	; (8011be8 <tcp_input+0x29c>)
 8011a2c:	881b      	ldrh	r3, [r3, #0]
 8011a2e:	1ad3      	subs	r3, r2, r3
 8011a30:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011a32:	4b6d      	ldr	r3, [pc, #436]	; (8011be8 <tcp_input+0x29c>)
 8011a34:	881b      	ldrh	r3, [r3, #0]
 8011a36:	4619      	mov	r1, r3
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7fd fe1d 	bl	800f678 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	895b      	ldrh	r3, [r3, #10]
 8011a44:	8a3a      	ldrh	r2, [r7, #16]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	f200 8361 	bhi.w	801210e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	685b      	ldr	r3, [r3, #4]
 8011a52:	4a64      	ldr	r2, [pc, #400]	; (8011be4 <tcp_input+0x298>)
 8011a54:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	8a3a      	ldrh	r2, [r7, #16]
 8011a5c:	4611      	mov	r1, r2
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7fd fe0a 	bl	800f678 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	891a      	ldrh	r2, [r3, #8]
 8011a68:	8a3b      	ldrh	r3, [r7, #16]
 8011a6a:	1ad3      	subs	r3, r2, r3
 8011a6c:	b29a      	uxth	r2, r3
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	895b      	ldrh	r3, [r3, #10]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d005      	beq.n	8011a86 <tcp_input+0x13a>
 8011a7a:	4b54      	ldr	r3, [pc, #336]	; (8011bcc <tcp_input+0x280>)
 8011a7c:	22df      	movs	r2, #223	; 0xdf
 8011a7e:	495c      	ldr	r1, [pc, #368]	; (8011bf0 <tcp_input+0x2a4>)
 8011a80:	4854      	ldr	r0, [pc, #336]	; (8011bd4 <tcp_input+0x288>)
 8011a82:	f007 fad7 	bl	8019034 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	891a      	ldrh	r2, [r3, #8]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	891b      	ldrh	r3, [r3, #8]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d005      	beq.n	8011aa0 <tcp_input+0x154>
 8011a94:	4b4d      	ldr	r3, [pc, #308]	; (8011bcc <tcp_input+0x280>)
 8011a96:	22e0      	movs	r2, #224	; 0xe0
 8011a98:	4956      	ldr	r1, [pc, #344]	; (8011bf4 <tcp_input+0x2a8>)
 8011a9a:	484e      	ldr	r0, [pc, #312]	; (8011bd4 <tcp_input+0x288>)
 8011a9c:	f007 faca 	bl	8019034 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011aa0:	4b4d      	ldr	r3, [pc, #308]	; (8011bd8 <tcp_input+0x28c>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	881b      	ldrh	r3, [r3, #0]
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	4a4b      	ldr	r2, [pc, #300]	; (8011bd8 <tcp_input+0x28c>)
 8011aaa:	6814      	ldr	r4, [r2, #0]
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7fc f9bf 	bl	800de30 <lwip_htons>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011ab6:	4b48      	ldr	r3, [pc, #288]	; (8011bd8 <tcp_input+0x28c>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	885b      	ldrh	r3, [r3, #2]
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	4a46      	ldr	r2, [pc, #280]	; (8011bd8 <tcp_input+0x28c>)
 8011ac0:	6814      	ldr	r4, [r2, #0]
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7fc f9b4 	bl	800de30 <lwip_htons>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011acc:	4b42      	ldr	r3, [pc, #264]	; (8011bd8 <tcp_input+0x28c>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	4a41      	ldr	r2, [pc, #260]	; (8011bd8 <tcp_input+0x28c>)
 8011ad4:	6814      	ldr	r4, [r2, #0]
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f7fc f9bf 	bl	800de5a <lwip_htonl>
 8011adc:	4603      	mov	r3, r0
 8011ade:	6063      	str	r3, [r4, #4]
 8011ae0:	6863      	ldr	r3, [r4, #4]
 8011ae2:	4a45      	ldr	r2, [pc, #276]	; (8011bf8 <tcp_input+0x2ac>)
 8011ae4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011ae6:	4b3c      	ldr	r3, [pc, #240]	; (8011bd8 <tcp_input+0x28c>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	689b      	ldr	r3, [r3, #8]
 8011aec:	4a3a      	ldr	r2, [pc, #232]	; (8011bd8 <tcp_input+0x28c>)
 8011aee:	6814      	ldr	r4, [r2, #0]
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7fc f9b2 	bl	800de5a <lwip_htonl>
 8011af6:	4603      	mov	r3, r0
 8011af8:	60a3      	str	r3, [r4, #8]
 8011afa:	68a3      	ldr	r3, [r4, #8]
 8011afc:	4a3f      	ldr	r2, [pc, #252]	; (8011bfc <tcp_input+0x2b0>)
 8011afe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011b00:	4b35      	ldr	r3, [pc, #212]	; (8011bd8 <tcp_input+0x28c>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	89db      	ldrh	r3, [r3, #14]
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	4a33      	ldr	r2, [pc, #204]	; (8011bd8 <tcp_input+0x28c>)
 8011b0a:	6814      	ldr	r4, [r2, #0]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7fc f98f 	bl	800de30 <lwip_htons>
 8011b12:	4603      	mov	r3, r0
 8011b14:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011b16:	4b30      	ldr	r3, [pc, #192]	; (8011bd8 <tcp_input+0x28c>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	899b      	ldrh	r3, [r3, #12]
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7fc f986 	bl	800de30 <lwip_htons>
 8011b24:	4603      	mov	r3, r0
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011b2c:	b2da      	uxtb	r2, r3
 8011b2e:	4b34      	ldr	r3, [pc, #208]	; (8011c00 <tcp_input+0x2b4>)
 8011b30:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	891a      	ldrh	r2, [r3, #8]
 8011b36:	4b33      	ldr	r3, [pc, #204]	; (8011c04 <tcp_input+0x2b8>)
 8011b38:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011b3a:	4b31      	ldr	r3, [pc, #196]	; (8011c00 <tcp_input+0x2b4>)
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	f003 0303 	and.w	r3, r3, #3
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d00c      	beq.n	8011b60 <tcp_input+0x214>
    tcplen++;
 8011b46:	4b2f      	ldr	r3, [pc, #188]	; (8011c04 <tcp_input+0x2b8>)
 8011b48:	881b      	ldrh	r3, [r3, #0]
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	b29a      	uxth	r2, r3
 8011b4e:	4b2d      	ldr	r3, [pc, #180]	; (8011c04 <tcp_input+0x2b8>)
 8011b50:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	891a      	ldrh	r2, [r3, #8]
 8011b56:	4b2b      	ldr	r3, [pc, #172]	; (8011c04 <tcp_input+0x2b8>)
 8011b58:	881b      	ldrh	r3, [r3, #0]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	f200 82d9 	bhi.w	8012112 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011b60:	2300      	movs	r3, #0
 8011b62:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b64:	4b28      	ldr	r3, [pc, #160]	; (8011c08 <tcp_input+0x2bc>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	61fb      	str	r3, [r7, #28]
 8011b6a:	e09d      	b.n	8011ca8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011b6c:	69fb      	ldr	r3, [r7, #28]
 8011b6e:	7d1b      	ldrb	r3, [r3, #20]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d105      	bne.n	8011b80 <tcp_input+0x234>
 8011b74:	4b15      	ldr	r3, [pc, #84]	; (8011bcc <tcp_input+0x280>)
 8011b76:	22fb      	movs	r2, #251	; 0xfb
 8011b78:	4924      	ldr	r1, [pc, #144]	; (8011c0c <tcp_input+0x2c0>)
 8011b7a:	4816      	ldr	r0, [pc, #88]	; (8011bd4 <tcp_input+0x288>)
 8011b7c:	f007 fa5a 	bl	8019034 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011b80:	69fb      	ldr	r3, [r7, #28]
 8011b82:	7d1b      	ldrb	r3, [r3, #20]
 8011b84:	2b0a      	cmp	r3, #10
 8011b86:	d105      	bne.n	8011b94 <tcp_input+0x248>
 8011b88:	4b10      	ldr	r3, [pc, #64]	; (8011bcc <tcp_input+0x280>)
 8011b8a:	22fc      	movs	r2, #252	; 0xfc
 8011b8c:	4920      	ldr	r1, [pc, #128]	; (8011c10 <tcp_input+0x2c4>)
 8011b8e:	4811      	ldr	r0, [pc, #68]	; (8011bd4 <tcp_input+0x288>)
 8011b90:	f007 fa50 	bl	8019034 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011b94:	69fb      	ldr	r3, [r7, #28]
 8011b96:	7d1b      	ldrb	r3, [r3, #20]
 8011b98:	2b01      	cmp	r3, #1
 8011b9a:	d105      	bne.n	8011ba8 <tcp_input+0x25c>
 8011b9c:	4b0b      	ldr	r3, [pc, #44]	; (8011bcc <tcp_input+0x280>)
 8011b9e:	22fd      	movs	r2, #253	; 0xfd
 8011ba0:	491c      	ldr	r1, [pc, #112]	; (8011c14 <tcp_input+0x2c8>)
 8011ba2:	480c      	ldr	r0, [pc, #48]	; (8011bd4 <tcp_input+0x288>)
 8011ba4:	f007 fa46 	bl	8019034 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011ba8:	69fb      	ldr	r3, [r7, #28]
 8011baa:	7a1b      	ldrb	r3, [r3, #8]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d033      	beq.n	8011c18 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011bb0:	69fb      	ldr	r3, [r7, #28]
 8011bb2:	7a1a      	ldrb	r2, [r3, #8]
 8011bb4:	4b09      	ldr	r3, [pc, #36]	; (8011bdc <tcp_input+0x290>)
 8011bb6:	685b      	ldr	r3, [r3, #4]
 8011bb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d029      	beq.n	8011c18 <tcp_input+0x2cc>
      prev = pcb;
 8011bc4:	69fb      	ldr	r3, [r7, #28]
 8011bc6:	61bb      	str	r3, [r7, #24]
      continue;
 8011bc8:	e06b      	b.n	8011ca2 <tcp_input+0x356>
 8011bca:	bf00      	nop
 8011bcc:	0801b3c4 	.word	0x0801b3c4
 8011bd0:	0801b3f8 	.word	0x0801b3f8
 8011bd4:	0801b410 	.word	0x0801b410
 8011bd8:	24004134 	.word	0x24004134
 8011bdc:	2400479c 	.word	0x2400479c
 8011be0:	24004138 	.word	0x24004138
 8011be4:	2400413c 	.word	0x2400413c
 8011be8:	2400413a 	.word	0x2400413a
 8011bec:	0801b438 	.word	0x0801b438
 8011bf0:	0801b448 	.word	0x0801b448
 8011bf4:	0801b454 	.word	0x0801b454
 8011bf8:	24004144 	.word	0x24004144
 8011bfc:	24004148 	.word	0x24004148
 8011c00:	24004150 	.word	0x24004150
 8011c04:	2400414e 	.word	0x2400414e
 8011c08:	2400785c 	.word	0x2400785c
 8011c0c:	0801b474 	.word	0x0801b474
 8011c10:	0801b49c 	.word	0x0801b49c
 8011c14:	0801b4c8 	.word	0x0801b4c8
    }

    if (pcb->remote_port == tcphdr->src &&
 8011c18:	69fb      	ldr	r3, [r7, #28]
 8011c1a:	8b1a      	ldrh	r2, [r3, #24]
 8011c1c:	4b94      	ldr	r3, [pc, #592]	; (8011e70 <tcp_input+0x524>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	881b      	ldrh	r3, [r3, #0]
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	429a      	cmp	r2, r3
 8011c26:	d13a      	bne.n	8011c9e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011c28:	69fb      	ldr	r3, [r7, #28]
 8011c2a:	8ada      	ldrh	r2, [r3, #22]
 8011c2c:	4b90      	ldr	r3, [pc, #576]	; (8011e70 <tcp_input+0x524>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	885b      	ldrh	r3, [r3, #2]
 8011c32:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d132      	bne.n	8011c9e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011c38:	69fb      	ldr	r3, [r7, #28]
 8011c3a:	685a      	ldr	r2, [r3, #4]
 8011c3c:	4b8d      	ldr	r3, [pc, #564]	; (8011e74 <tcp_input+0x528>)
 8011c3e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d12c      	bne.n	8011c9e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011c44:	69fb      	ldr	r3, [r7, #28]
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	4b8a      	ldr	r3, [pc, #552]	; (8011e74 <tcp_input+0x528>)
 8011c4a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d126      	bne.n	8011c9e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	69fa      	ldr	r2, [r7, #28]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d106      	bne.n	8011c68 <tcp_input+0x31c>
 8011c5a:	4b87      	ldr	r3, [pc, #540]	; (8011e78 <tcp_input+0x52c>)
 8011c5c:	f240 120d 	movw	r2, #269	; 0x10d
 8011c60:	4986      	ldr	r1, [pc, #536]	; (8011e7c <tcp_input+0x530>)
 8011c62:	4887      	ldr	r0, [pc, #540]	; (8011e80 <tcp_input+0x534>)
 8011c64:	f007 f9e6 	bl	8019034 <iprintf>
      if (prev != NULL) {
 8011c68:	69bb      	ldr	r3, [r7, #24]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d00a      	beq.n	8011c84 <tcp_input+0x338>
        prev->next = pcb->next;
 8011c6e:	69fb      	ldr	r3, [r7, #28]
 8011c70:	68da      	ldr	r2, [r3, #12]
 8011c72:	69bb      	ldr	r3, [r7, #24]
 8011c74:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011c76:	4b83      	ldr	r3, [pc, #524]	; (8011e84 <tcp_input+0x538>)
 8011c78:	681a      	ldr	r2, [r3, #0]
 8011c7a:	69fb      	ldr	r3, [r7, #28]
 8011c7c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011c7e:	4a81      	ldr	r2, [pc, #516]	; (8011e84 <tcp_input+0x538>)
 8011c80:	69fb      	ldr	r3, [r7, #28]
 8011c82:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011c84:	69fb      	ldr	r3, [r7, #28]
 8011c86:	68db      	ldr	r3, [r3, #12]
 8011c88:	69fa      	ldr	r2, [r7, #28]
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d111      	bne.n	8011cb2 <tcp_input+0x366>
 8011c8e:	4b7a      	ldr	r3, [pc, #488]	; (8011e78 <tcp_input+0x52c>)
 8011c90:	f240 1215 	movw	r2, #277	; 0x115
 8011c94:	497c      	ldr	r1, [pc, #496]	; (8011e88 <tcp_input+0x53c>)
 8011c96:	487a      	ldr	r0, [pc, #488]	; (8011e80 <tcp_input+0x534>)
 8011c98:	f007 f9cc 	bl	8019034 <iprintf>
      break;
 8011c9c:	e009      	b.n	8011cb2 <tcp_input+0x366>
    }
    prev = pcb;
 8011c9e:	69fb      	ldr	r3, [r7, #28]
 8011ca0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ca2:	69fb      	ldr	r3, [r7, #28]
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	61fb      	str	r3, [r7, #28]
 8011ca8:	69fb      	ldr	r3, [r7, #28]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	f47f af5e 	bne.w	8011b6c <tcp_input+0x220>
 8011cb0:	e000      	b.n	8011cb4 <tcp_input+0x368>
      break;
 8011cb2:	bf00      	nop
  }

  if (pcb == NULL) {
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f040 8095 	bne.w	8011de6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011cbc:	4b73      	ldr	r3, [pc, #460]	; (8011e8c <tcp_input+0x540>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	61fb      	str	r3, [r7, #28]
 8011cc2:	e03f      	b.n	8011d44 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011cc4:	69fb      	ldr	r3, [r7, #28]
 8011cc6:	7d1b      	ldrb	r3, [r3, #20]
 8011cc8:	2b0a      	cmp	r3, #10
 8011cca:	d006      	beq.n	8011cda <tcp_input+0x38e>
 8011ccc:	4b6a      	ldr	r3, [pc, #424]	; (8011e78 <tcp_input+0x52c>)
 8011cce:	f240 121f 	movw	r2, #287	; 0x11f
 8011cd2:	496f      	ldr	r1, [pc, #444]	; (8011e90 <tcp_input+0x544>)
 8011cd4:	486a      	ldr	r0, [pc, #424]	; (8011e80 <tcp_input+0x534>)
 8011cd6:	f007 f9ad 	bl	8019034 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011cda:	69fb      	ldr	r3, [r7, #28]
 8011cdc:	7a1b      	ldrb	r3, [r3, #8]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d009      	beq.n	8011cf6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011ce2:	69fb      	ldr	r3, [r7, #28]
 8011ce4:	7a1a      	ldrb	r2, [r3, #8]
 8011ce6:	4b63      	ldr	r3, [pc, #396]	; (8011e74 <tcp_input+0x528>)
 8011ce8:	685b      	ldr	r3, [r3, #4]
 8011cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011cee:	3301      	adds	r3, #1
 8011cf0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d122      	bne.n	8011d3c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011cf6:	69fb      	ldr	r3, [r7, #28]
 8011cf8:	8b1a      	ldrh	r2, [r3, #24]
 8011cfa:	4b5d      	ldr	r3, [pc, #372]	; (8011e70 <tcp_input+0x524>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	881b      	ldrh	r3, [r3, #0]
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d11b      	bne.n	8011d3e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011d06:	69fb      	ldr	r3, [r7, #28]
 8011d08:	8ada      	ldrh	r2, [r3, #22]
 8011d0a:	4b59      	ldr	r3, [pc, #356]	; (8011e70 <tcp_input+0x524>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	885b      	ldrh	r3, [r3, #2]
 8011d10:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d113      	bne.n	8011d3e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011d16:	69fb      	ldr	r3, [r7, #28]
 8011d18:	685a      	ldr	r2, [r3, #4]
 8011d1a:	4b56      	ldr	r3, [pc, #344]	; (8011e74 <tcp_input+0x528>)
 8011d1c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d10d      	bne.n	8011d3e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011d22:	69fb      	ldr	r3, [r7, #28]
 8011d24:	681a      	ldr	r2, [r3, #0]
 8011d26:	4b53      	ldr	r3, [pc, #332]	; (8011e74 <tcp_input+0x528>)
 8011d28:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d107      	bne.n	8011d3e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011d2e:	69f8      	ldr	r0, [r7, #28]
 8011d30:	f000 fb54 	bl	80123dc <tcp_timewait_input>
        }
        pbuf_free(p);
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f7fd fd25 	bl	800f784 <pbuf_free>
        return;
 8011d3a:	e1f0      	b.n	801211e <tcp_input+0x7d2>
        continue;
 8011d3c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d3e:	69fb      	ldr	r3, [r7, #28]
 8011d40:	68db      	ldr	r3, [r3, #12]
 8011d42:	61fb      	str	r3, [r7, #28]
 8011d44:	69fb      	ldr	r3, [r7, #28]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d1bc      	bne.n	8011cc4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011d4e:	4b51      	ldr	r3, [pc, #324]	; (8011e94 <tcp_input+0x548>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	617b      	str	r3, [r7, #20]
 8011d54:	e02a      	b.n	8011dac <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	7a1b      	ldrb	r3, [r3, #8]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d00c      	beq.n	8011d78 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	7a1a      	ldrb	r2, [r3, #8]
 8011d62:	4b44      	ldr	r3, [pc, #272]	; (8011e74 <tcp_input+0x528>)
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011d6a:	3301      	adds	r3, #1
 8011d6c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d002      	beq.n	8011d78 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	61bb      	str	r3, [r7, #24]
        continue;
 8011d76:	e016      	b.n	8011da6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	8ada      	ldrh	r2, [r3, #22]
 8011d7c:	4b3c      	ldr	r3, [pc, #240]	; (8011e70 <tcp_input+0x524>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	885b      	ldrh	r3, [r3, #2]
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d10c      	bne.n	8011da2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011d88:	697b      	ldr	r3, [r7, #20]
 8011d8a:	681a      	ldr	r2, [r3, #0]
 8011d8c:	4b39      	ldr	r3, [pc, #228]	; (8011e74 <tcp_input+0x528>)
 8011d8e:	695b      	ldr	r3, [r3, #20]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d00f      	beq.n	8011db4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d00d      	beq.n	8011db6 <tcp_input+0x46a>
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d009      	beq.n	8011db6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	68db      	ldr	r3, [r3, #12]
 8011daa:	617b      	str	r3, [r7, #20]
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d1d1      	bne.n	8011d56 <tcp_input+0x40a>
 8011db2:	e000      	b.n	8011db6 <tcp_input+0x46a>
            break;
 8011db4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d014      	beq.n	8011de6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011dbc:	69bb      	ldr	r3, [r7, #24]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d00a      	beq.n	8011dd8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	68da      	ldr	r2, [r3, #12]
 8011dc6:	69bb      	ldr	r3, [r7, #24]
 8011dc8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011dca:	4b32      	ldr	r3, [pc, #200]	; (8011e94 <tcp_input+0x548>)
 8011dcc:	681a      	ldr	r2, [r3, #0]
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011dd2:	4a30      	ldr	r2, [pc, #192]	; (8011e94 <tcp_input+0x548>)
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011dd8:	6978      	ldr	r0, [r7, #20]
 8011dda:	f000 fa01 	bl	80121e0 <tcp_listen_input>
      }
      pbuf_free(p);
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f7fd fcd0 	bl	800f784 <pbuf_free>
      return;
 8011de4:	e19b      	b.n	801211e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	f000 8160 	beq.w	80120ae <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011dee:	4b2a      	ldr	r3, [pc, #168]	; (8011e98 <tcp_input+0x54c>)
 8011df0:	2200      	movs	r2, #0
 8011df2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	891a      	ldrh	r2, [r3, #8]
 8011df8:	4b27      	ldr	r3, [pc, #156]	; (8011e98 <tcp_input+0x54c>)
 8011dfa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011dfc:	4a26      	ldr	r2, [pc, #152]	; (8011e98 <tcp_input+0x54c>)
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011e02:	4b1b      	ldr	r3, [pc, #108]	; (8011e70 <tcp_input+0x524>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	4a24      	ldr	r2, [pc, #144]	; (8011e98 <tcp_input+0x54c>)
 8011e08:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011e0a:	4b24      	ldr	r3, [pc, #144]	; (8011e9c <tcp_input+0x550>)
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011e10:	4b23      	ldr	r3, [pc, #140]	; (8011ea0 <tcp_input+0x554>)
 8011e12:	2200      	movs	r2, #0
 8011e14:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011e16:	4b23      	ldr	r3, [pc, #140]	; (8011ea4 <tcp_input+0x558>)
 8011e18:	2200      	movs	r2, #0
 8011e1a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011e1c:	4b22      	ldr	r3, [pc, #136]	; (8011ea8 <tcp_input+0x55c>)
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	f003 0308 	and.w	r3, r3, #8
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d006      	beq.n	8011e36 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	7b5b      	ldrb	r3, [r3, #13]
 8011e2c:	f043 0301 	orr.w	r3, r3, #1
 8011e30:	b2da      	uxtb	r2, r3
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d038      	beq.n	8011eb0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011e3e:	69f8      	ldr	r0, [r7, #28]
 8011e40:	f7ff f858 	bl	8010ef4 <tcp_process_refused_data>
 8011e44:	4603      	mov	r3, r0
 8011e46:	f113 0f0d 	cmn.w	r3, #13
 8011e4a:	d007      	beq.n	8011e5c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d02d      	beq.n	8011eb0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011e54:	4b15      	ldr	r3, [pc, #84]	; (8011eac <tcp_input+0x560>)
 8011e56:	881b      	ldrh	r3, [r3, #0]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d029      	beq.n	8011eb0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011e5c:	69fb      	ldr	r3, [r7, #28]
 8011e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	f040 8104 	bne.w	801206e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011e66:	69f8      	ldr	r0, [r7, #28]
 8011e68:	f003 fe16 	bl	8015a98 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011e6c:	e0ff      	b.n	801206e <tcp_input+0x722>
 8011e6e:	bf00      	nop
 8011e70:	24004134 	.word	0x24004134
 8011e74:	2400479c 	.word	0x2400479c
 8011e78:	0801b3c4 	.word	0x0801b3c4
 8011e7c:	0801b4f0 	.word	0x0801b4f0
 8011e80:	0801b410 	.word	0x0801b410
 8011e84:	2400785c 	.word	0x2400785c
 8011e88:	0801b51c 	.word	0x0801b51c
 8011e8c:	2400786c 	.word	0x2400786c
 8011e90:	0801b548 	.word	0x0801b548
 8011e94:	24007864 	.word	0x24007864
 8011e98:	24004124 	.word	0x24004124
 8011e9c:	24004154 	.word	0x24004154
 8011ea0:	24004151 	.word	0x24004151
 8011ea4:	2400414c 	.word	0x2400414c
 8011ea8:	24004150 	.word	0x24004150
 8011eac:	2400414e 	.word	0x2400414e
      }
    }
    tcp_input_pcb = pcb;
 8011eb0:	4a9c      	ldr	r2, [pc, #624]	; (8012124 <tcp_input+0x7d8>)
 8011eb2:	69fb      	ldr	r3, [r7, #28]
 8011eb4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011eb6:	69f8      	ldr	r0, [r7, #28]
 8011eb8:	f000 fb0a 	bl	80124d0 <tcp_process>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011ec0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ec4:	f113 0f0d 	cmn.w	r3, #13
 8011ec8:	f000 80d3 	beq.w	8012072 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8011ecc:	4b96      	ldr	r3, [pc, #600]	; (8012128 <tcp_input+0x7dc>)
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	f003 0308 	and.w	r3, r3, #8
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d015      	beq.n	8011f04 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d008      	beq.n	8011ef4 <tcp_input+0x5a8>
 8011ee2:	69fb      	ldr	r3, [r7, #28]
 8011ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ee8:	69fa      	ldr	r2, [r7, #28]
 8011eea:	6912      	ldr	r2, [r2, #16]
 8011eec:	f06f 010d 	mvn.w	r1, #13
 8011ef0:	4610      	mov	r0, r2
 8011ef2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011ef4:	69f9      	ldr	r1, [r7, #28]
 8011ef6:	488d      	ldr	r0, [pc, #564]	; (801212c <tcp_input+0x7e0>)
 8011ef8:	f7ff fbb0 	bl	801165c <tcp_pcb_remove>
        tcp_free(pcb);
 8011efc:	69f8      	ldr	r0, [r7, #28]
 8011efe:	f7fd fefd 	bl	800fcfc <tcp_free>
 8011f02:	e0c1      	b.n	8012088 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8011f04:	2300      	movs	r3, #0
 8011f06:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011f08:	4b89      	ldr	r3, [pc, #548]	; (8012130 <tcp_input+0x7e4>)
 8011f0a:	881b      	ldrh	r3, [r3, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d01d      	beq.n	8011f4c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011f10:	4b87      	ldr	r3, [pc, #540]	; (8012130 <tcp_input+0x7e4>)
 8011f12:	881b      	ldrh	r3, [r3, #0]
 8011f14:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011f16:	69fb      	ldr	r3, [r7, #28]
 8011f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d00a      	beq.n	8011f36 <tcp_input+0x5ea>
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011f26:	69fa      	ldr	r2, [r7, #28]
 8011f28:	6910      	ldr	r0, [r2, #16]
 8011f2a:	89fa      	ldrh	r2, [r7, #14]
 8011f2c:	69f9      	ldr	r1, [r7, #28]
 8011f2e:	4798      	blx	r3
 8011f30:	4603      	mov	r3, r0
 8011f32:	74fb      	strb	r3, [r7, #19]
 8011f34:	e001      	b.n	8011f3a <tcp_input+0x5ee>
 8011f36:	2300      	movs	r3, #0
 8011f38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011f3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f3e:	f113 0f0d 	cmn.w	r3, #13
 8011f42:	f000 8098 	beq.w	8012076 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011f46:	4b7a      	ldr	r3, [pc, #488]	; (8012130 <tcp_input+0x7e4>)
 8011f48:	2200      	movs	r2, #0
 8011f4a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011f4c:	69f8      	ldr	r0, [r7, #28]
 8011f4e:	f000 f907 	bl	8012160 <tcp_input_delayed_close>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	f040 8090 	bne.w	801207a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011f5a:	4b76      	ldr	r3, [pc, #472]	; (8012134 <tcp_input+0x7e8>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d041      	beq.n	8011fe6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d006      	beq.n	8011f78 <tcp_input+0x62c>
 8011f6a:	4b73      	ldr	r3, [pc, #460]	; (8012138 <tcp_input+0x7ec>)
 8011f6c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011f70:	4972      	ldr	r1, [pc, #456]	; (801213c <tcp_input+0x7f0>)
 8011f72:	4873      	ldr	r0, [pc, #460]	; (8012140 <tcp_input+0x7f4>)
 8011f74:	f007 f85e 	bl	8019034 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	8b5b      	ldrh	r3, [r3, #26]
 8011f7c:	f003 0310 	and.w	r3, r3, #16
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d008      	beq.n	8011f96 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011f84:	4b6b      	ldr	r3, [pc, #428]	; (8012134 <tcp_input+0x7e8>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7fd fbfb 	bl	800f784 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011f8e:	69f8      	ldr	r0, [r7, #28]
 8011f90:	f7fe f99c 	bl	80102cc <tcp_abort>
            goto aborted;
 8011f94:	e078      	b.n	8012088 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011f96:	69fb      	ldr	r3, [r7, #28]
 8011f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d00c      	beq.n	8011fba <tcp_input+0x66e>
 8011fa0:	69fb      	ldr	r3, [r7, #28]
 8011fa2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011fa6:	69fb      	ldr	r3, [r7, #28]
 8011fa8:	6918      	ldr	r0, [r3, #16]
 8011faa:	4b62      	ldr	r3, [pc, #392]	; (8012134 <tcp_input+0x7e8>)
 8011fac:	681a      	ldr	r2, [r3, #0]
 8011fae:	2300      	movs	r3, #0
 8011fb0:	69f9      	ldr	r1, [r7, #28]
 8011fb2:	47a0      	blx	r4
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	74fb      	strb	r3, [r7, #19]
 8011fb8:	e008      	b.n	8011fcc <tcp_input+0x680>
 8011fba:	4b5e      	ldr	r3, [pc, #376]	; (8012134 <tcp_input+0x7e8>)
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	69f9      	ldr	r1, [r7, #28]
 8011fc2:	2000      	movs	r0, #0
 8011fc4:	f7ff f88a 	bl	80110dc <tcp_recv_null>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011fcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011fd0:	f113 0f0d 	cmn.w	r3, #13
 8011fd4:	d053      	beq.n	801207e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011fd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d003      	beq.n	8011fe6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011fde:	4b55      	ldr	r3, [pc, #340]	; (8012134 <tcp_input+0x7e8>)
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011fe6:	4b50      	ldr	r3, [pc, #320]	; (8012128 <tcp_input+0x7dc>)
 8011fe8:	781b      	ldrb	r3, [r3, #0]
 8011fea:	f003 0320 	and.w	r3, r3, #32
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d030      	beq.n	8012054 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8011ff2:	69fb      	ldr	r3, [r7, #28]
 8011ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d009      	beq.n	801200e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011ffa:	69fb      	ldr	r3, [r7, #28]
 8011ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ffe:	7b5a      	ldrb	r2, [r3, #13]
 8012000:	69fb      	ldr	r3, [r7, #28]
 8012002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012004:	f042 0220 	orr.w	r2, r2, #32
 8012008:	b2d2      	uxtb	r2, r2
 801200a:	735a      	strb	r2, [r3, #13]
 801200c:	e022      	b.n	8012054 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801200e:	69fb      	ldr	r3, [r7, #28]
 8012010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012012:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012016:	d005      	beq.n	8012024 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8012018:	69fb      	ldr	r3, [r7, #28]
 801201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801201c:	3301      	adds	r3, #1
 801201e:	b29a      	uxth	r2, r3
 8012020:	69fb      	ldr	r3, [r7, #28]
 8012022:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801202a:	2b00      	cmp	r3, #0
 801202c:	d00b      	beq.n	8012046 <tcp_input+0x6fa>
 801202e:	69fb      	ldr	r3, [r7, #28]
 8012030:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012034:	69fb      	ldr	r3, [r7, #28]
 8012036:	6918      	ldr	r0, [r3, #16]
 8012038:	2300      	movs	r3, #0
 801203a:	2200      	movs	r2, #0
 801203c:	69f9      	ldr	r1, [r7, #28]
 801203e:	47a0      	blx	r4
 8012040:	4603      	mov	r3, r0
 8012042:	74fb      	strb	r3, [r7, #19]
 8012044:	e001      	b.n	801204a <tcp_input+0x6fe>
 8012046:	2300      	movs	r3, #0
 8012048:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801204a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801204e:	f113 0f0d 	cmn.w	r3, #13
 8012052:	d016      	beq.n	8012082 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012054:	4b33      	ldr	r3, [pc, #204]	; (8012124 <tcp_input+0x7d8>)
 8012056:	2200      	movs	r2, #0
 8012058:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801205a:	69f8      	ldr	r0, [r7, #28]
 801205c:	f000 f880 	bl	8012160 <tcp_input_delayed_close>
 8012060:	4603      	mov	r3, r0
 8012062:	2b00      	cmp	r3, #0
 8012064:	d10f      	bne.n	8012086 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012066:	69f8      	ldr	r0, [r7, #28]
 8012068:	f002 ff10 	bl	8014e8c <tcp_output>
 801206c:	e00c      	b.n	8012088 <tcp_input+0x73c>
        goto aborted;
 801206e:	bf00      	nop
 8012070:	e00a      	b.n	8012088 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012072:	bf00      	nop
 8012074:	e008      	b.n	8012088 <tcp_input+0x73c>
              goto aborted;
 8012076:	bf00      	nop
 8012078:	e006      	b.n	8012088 <tcp_input+0x73c>
          goto aborted;
 801207a:	bf00      	nop
 801207c:	e004      	b.n	8012088 <tcp_input+0x73c>
            goto aborted;
 801207e:	bf00      	nop
 8012080:	e002      	b.n	8012088 <tcp_input+0x73c>
              goto aborted;
 8012082:	bf00      	nop
 8012084:	e000      	b.n	8012088 <tcp_input+0x73c>
          goto aborted;
 8012086:	bf00      	nop
    tcp_input_pcb = NULL;
 8012088:	4b26      	ldr	r3, [pc, #152]	; (8012124 <tcp_input+0x7d8>)
 801208a:	2200      	movs	r2, #0
 801208c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801208e:	4b29      	ldr	r3, [pc, #164]	; (8012134 <tcp_input+0x7e8>)
 8012090:	2200      	movs	r2, #0
 8012092:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012094:	4b2b      	ldr	r3, [pc, #172]	; (8012144 <tcp_input+0x7f8>)
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d03f      	beq.n	801211c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801209c:	4b29      	ldr	r3, [pc, #164]	; (8012144 <tcp_input+0x7f8>)
 801209e:	685b      	ldr	r3, [r3, #4]
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7fd fb6f 	bl	800f784 <pbuf_free>
      inseg.p = NULL;
 80120a6:	4b27      	ldr	r3, [pc, #156]	; (8012144 <tcp_input+0x7f8>)
 80120a8:	2200      	movs	r2, #0
 80120aa:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80120ac:	e036      	b.n	801211c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80120ae:	4b26      	ldr	r3, [pc, #152]	; (8012148 <tcp_input+0x7fc>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	899b      	ldrh	r3, [r3, #12]
 80120b4:	b29b      	uxth	r3, r3
 80120b6:	4618      	mov	r0, r3
 80120b8:	f7fb feba 	bl	800de30 <lwip_htons>
 80120bc:	4603      	mov	r3, r0
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	f003 0304 	and.w	r3, r3, #4
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d118      	bne.n	80120fa <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120c8:	4b20      	ldr	r3, [pc, #128]	; (801214c <tcp_input+0x800>)
 80120ca:	6819      	ldr	r1, [r3, #0]
 80120cc:	4b20      	ldr	r3, [pc, #128]	; (8012150 <tcp_input+0x804>)
 80120ce:	881b      	ldrh	r3, [r3, #0]
 80120d0:	461a      	mov	r2, r3
 80120d2:	4b20      	ldr	r3, [pc, #128]	; (8012154 <tcp_input+0x808>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80120d8:	4b1b      	ldr	r3, [pc, #108]	; (8012148 <tcp_input+0x7fc>)
 80120da:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120dc:	885b      	ldrh	r3, [r3, #2]
 80120de:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80120e0:	4a19      	ldr	r2, [pc, #100]	; (8012148 <tcp_input+0x7fc>)
 80120e2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120e4:	8812      	ldrh	r2, [r2, #0]
 80120e6:	b292      	uxth	r2, r2
 80120e8:	9202      	str	r2, [sp, #8]
 80120ea:	9301      	str	r3, [sp, #4]
 80120ec:	4b1a      	ldr	r3, [pc, #104]	; (8012158 <tcp_input+0x80c>)
 80120ee:	9300      	str	r3, [sp, #0]
 80120f0:	4b1a      	ldr	r3, [pc, #104]	; (801215c <tcp_input+0x810>)
 80120f2:	4602      	mov	r2, r0
 80120f4:	2000      	movs	r0, #0
 80120f6:	f003 fc7d 	bl	80159f4 <tcp_rst>
    pbuf_free(p);
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f7fd fb42 	bl	800f784 <pbuf_free>
  return;
 8012100:	e00c      	b.n	801211c <tcp_input+0x7d0>
    goto dropped;
 8012102:	bf00      	nop
 8012104:	e006      	b.n	8012114 <tcp_input+0x7c8>
    goto dropped;
 8012106:	bf00      	nop
 8012108:	e004      	b.n	8012114 <tcp_input+0x7c8>
    goto dropped;
 801210a:	bf00      	nop
 801210c:	e002      	b.n	8012114 <tcp_input+0x7c8>
      goto dropped;
 801210e:	bf00      	nop
 8012110:	e000      	b.n	8012114 <tcp_input+0x7c8>
      goto dropped;
 8012112:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f7fd fb35 	bl	800f784 <pbuf_free>
 801211a:	e000      	b.n	801211e <tcp_input+0x7d2>
  return;
 801211c:	bf00      	nop
}
 801211e:	3724      	adds	r7, #36	; 0x24
 8012120:	46bd      	mov	sp, r7
 8012122:	bd90      	pop	{r4, r7, pc}
 8012124:	24007870 	.word	0x24007870
 8012128:	24004151 	.word	0x24004151
 801212c:	2400785c 	.word	0x2400785c
 8012130:	2400414c 	.word	0x2400414c
 8012134:	24004154 	.word	0x24004154
 8012138:	0801b3c4 	.word	0x0801b3c4
 801213c:	0801b578 	.word	0x0801b578
 8012140:	0801b410 	.word	0x0801b410
 8012144:	24004124 	.word	0x24004124
 8012148:	24004134 	.word	0x24004134
 801214c:	24004148 	.word	0x24004148
 8012150:	2400414e 	.word	0x2400414e
 8012154:	24004144 	.word	0x24004144
 8012158:	240047ac 	.word	0x240047ac
 801215c:	240047b0 	.word	0x240047b0

08012160 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d106      	bne.n	801217c <tcp_input_delayed_close+0x1c>
 801216e:	4b17      	ldr	r3, [pc, #92]	; (80121cc <tcp_input_delayed_close+0x6c>)
 8012170:	f240 225a 	movw	r2, #602	; 0x25a
 8012174:	4916      	ldr	r1, [pc, #88]	; (80121d0 <tcp_input_delayed_close+0x70>)
 8012176:	4817      	ldr	r0, [pc, #92]	; (80121d4 <tcp_input_delayed_close+0x74>)
 8012178:	f006 ff5c 	bl	8019034 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801217c:	4b16      	ldr	r3, [pc, #88]	; (80121d8 <tcp_input_delayed_close+0x78>)
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	f003 0310 	and.w	r3, r3, #16
 8012184:	2b00      	cmp	r3, #0
 8012186:	d01c      	beq.n	80121c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	8b5b      	ldrh	r3, [r3, #26]
 801218c:	f003 0310 	and.w	r3, r3, #16
 8012190:	2b00      	cmp	r3, #0
 8012192:	d10d      	bne.n	80121b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801219a:	2b00      	cmp	r3, #0
 801219c:	d008      	beq.n	80121b0 <tcp_input_delayed_close+0x50>
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121a4:	687a      	ldr	r2, [r7, #4]
 80121a6:	6912      	ldr	r2, [r2, #16]
 80121a8:	f06f 010e 	mvn.w	r1, #14
 80121ac:	4610      	mov	r0, r2
 80121ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80121b0:	6879      	ldr	r1, [r7, #4]
 80121b2:	480a      	ldr	r0, [pc, #40]	; (80121dc <tcp_input_delayed_close+0x7c>)
 80121b4:	f7ff fa52 	bl	801165c <tcp_pcb_remove>
    tcp_free(pcb);
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f7fd fd9f 	bl	800fcfc <tcp_free>
    return 1;
 80121be:	2301      	movs	r3, #1
 80121c0:	e000      	b.n	80121c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80121c2:	2300      	movs	r3, #0
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3708      	adds	r7, #8
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}
 80121cc:	0801b3c4 	.word	0x0801b3c4
 80121d0:	0801b594 	.word	0x0801b594
 80121d4:	0801b410 	.word	0x0801b410
 80121d8:	24004151 	.word	0x24004151
 80121dc:	2400785c 	.word	0x2400785c

080121e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80121e0:	b590      	push	{r4, r7, lr}
 80121e2:	b08b      	sub	sp, #44	; 0x2c
 80121e4:	af04      	add	r7, sp, #16
 80121e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80121e8:	4b6f      	ldr	r3, [pc, #444]	; (80123a8 <tcp_listen_input+0x1c8>)
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	f003 0304 	and.w	r3, r3, #4
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	f040 80d2 	bne.w	801239a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d106      	bne.n	801220a <tcp_listen_input+0x2a>
 80121fc:	4b6b      	ldr	r3, [pc, #428]	; (80123ac <tcp_listen_input+0x1cc>)
 80121fe:	f240 2281 	movw	r2, #641	; 0x281
 8012202:	496b      	ldr	r1, [pc, #428]	; (80123b0 <tcp_listen_input+0x1d0>)
 8012204:	486b      	ldr	r0, [pc, #428]	; (80123b4 <tcp_listen_input+0x1d4>)
 8012206:	f006 ff15 	bl	8019034 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801220a:	4b67      	ldr	r3, [pc, #412]	; (80123a8 <tcp_listen_input+0x1c8>)
 801220c:	781b      	ldrb	r3, [r3, #0]
 801220e:	f003 0310 	and.w	r3, r3, #16
 8012212:	2b00      	cmp	r3, #0
 8012214:	d019      	beq.n	801224a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012216:	4b68      	ldr	r3, [pc, #416]	; (80123b8 <tcp_listen_input+0x1d8>)
 8012218:	6819      	ldr	r1, [r3, #0]
 801221a:	4b68      	ldr	r3, [pc, #416]	; (80123bc <tcp_listen_input+0x1dc>)
 801221c:	881b      	ldrh	r3, [r3, #0]
 801221e:	461a      	mov	r2, r3
 8012220:	4b67      	ldr	r3, [pc, #412]	; (80123c0 <tcp_listen_input+0x1e0>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012226:	4b67      	ldr	r3, [pc, #412]	; (80123c4 <tcp_listen_input+0x1e4>)
 8012228:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801222a:	885b      	ldrh	r3, [r3, #2]
 801222c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801222e:	4a65      	ldr	r2, [pc, #404]	; (80123c4 <tcp_listen_input+0x1e4>)
 8012230:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012232:	8812      	ldrh	r2, [r2, #0]
 8012234:	b292      	uxth	r2, r2
 8012236:	9202      	str	r2, [sp, #8]
 8012238:	9301      	str	r3, [sp, #4]
 801223a:	4b63      	ldr	r3, [pc, #396]	; (80123c8 <tcp_listen_input+0x1e8>)
 801223c:	9300      	str	r3, [sp, #0]
 801223e:	4b63      	ldr	r3, [pc, #396]	; (80123cc <tcp_listen_input+0x1ec>)
 8012240:	4602      	mov	r2, r0
 8012242:	6878      	ldr	r0, [r7, #4]
 8012244:	f003 fbd6 	bl	80159f4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012248:	e0a9      	b.n	801239e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801224a:	4b57      	ldr	r3, [pc, #348]	; (80123a8 <tcp_listen_input+0x1c8>)
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	f003 0302 	and.w	r3, r3, #2
 8012252:	2b00      	cmp	r3, #0
 8012254:	f000 80a3 	beq.w	801239e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	7d5b      	ldrb	r3, [r3, #21]
 801225c:	4618      	mov	r0, r3
 801225e:	f7ff f861 	bl	8011324 <tcp_alloc>
 8012262:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d111      	bne.n	801228e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	699b      	ldr	r3, [r3, #24]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d00a      	beq.n	8012288 <tcp_listen_input+0xa8>
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	699b      	ldr	r3, [r3, #24]
 8012276:	687a      	ldr	r2, [r7, #4]
 8012278:	6910      	ldr	r0, [r2, #16]
 801227a:	f04f 32ff 	mov.w	r2, #4294967295
 801227e:	2100      	movs	r1, #0
 8012280:	4798      	blx	r3
 8012282:	4603      	mov	r3, r0
 8012284:	73bb      	strb	r3, [r7, #14]
      return;
 8012286:	e08b      	b.n	80123a0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012288:	23f0      	movs	r3, #240	; 0xf0
 801228a:	73bb      	strb	r3, [r7, #14]
      return;
 801228c:	e088      	b.n	80123a0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801228e:	4b50      	ldr	r3, [pc, #320]	; (80123d0 <tcp_listen_input+0x1f0>)
 8012290:	695a      	ldr	r2, [r3, #20]
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012296:	4b4e      	ldr	r3, [pc, #312]	; (80123d0 <tcp_listen_input+0x1f0>)
 8012298:	691a      	ldr	r2, [r3, #16]
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	8ada      	ldrh	r2, [r3, #22]
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80122a6:	4b47      	ldr	r3, [pc, #284]	; (80123c4 <tcp_listen_input+0x1e4>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	881b      	ldrh	r3, [r3, #0]
 80122ac:	b29a      	uxth	r2, r3
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	2203      	movs	r2, #3
 80122b6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80122b8:	4b41      	ldr	r3, [pc, #260]	; (80123c0 <tcp_listen_input+0x1e0>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	1c5a      	adds	r2, r3, #1
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80122ca:	6978      	ldr	r0, [r7, #20]
 80122cc:	f7ff fa5a 	bl	8011784 <tcp_next_iss>
 80122d0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	693a      	ldr	r2, [r7, #16]
 80122d6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	693a      	ldr	r2, [r7, #16]
 80122dc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	693a      	ldr	r2, [r7, #16]
 80122e2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	693a      	ldr	r2, [r7, #16]
 80122e8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80122ea:	4b35      	ldr	r3, [pc, #212]	; (80123c0 <tcp_listen_input+0x1e0>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	1e5a      	subs	r2, r3, #1
 80122f0:	697b      	ldr	r3, [r7, #20]
 80122f2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	691a      	ldr	r2, [r3, #16]
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	7a5b      	ldrb	r3, [r3, #9]
 8012306:	f003 030c 	and.w	r3, r3, #12
 801230a:	b2da      	uxtb	r2, r3
 801230c:	697b      	ldr	r3, [r7, #20]
 801230e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	7a1a      	ldrb	r2, [r3, #8]
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012318:	4b2e      	ldr	r3, [pc, #184]	; (80123d4 <tcp_listen_input+0x1f4>)
 801231a:	681a      	ldr	r2, [r3, #0]
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	60da      	str	r2, [r3, #12]
 8012320:	4a2c      	ldr	r2, [pc, #176]	; (80123d4 <tcp_listen_input+0x1f4>)
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	6013      	str	r3, [r2, #0]
 8012326:	f003 fd27 	bl	8015d78 <tcp_timer_needed>
 801232a:	4b2b      	ldr	r3, [pc, #172]	; (80123d8 <tcp_listen_input+0x1f8>)
 801232c:	2201      	movs	r2, #1
 801232e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012330:	6978      	ldr	r0, [r7, #20]
 8012332:	f001 fd8d 	bl	8013e50 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012336:	4b23      	ldr	r3, [pc, #140]	; (80123c4 <tcp_listen_input+0x1e4>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	89db      	ldrh	r3, [r3, #14]
 801233c:	b29a      	uxth	r2, r3
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	3304      	adds	r3, #4
 8012358:	4618      	mov	r0, r3
 801235a:	f005 f941 	bl	80175e0 <ip4_route>
 801235e:	4601      	mov	r1, r0
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	3304      	adds	r3, #4
 8012364:	461a      	mov	r2, r3
 8012366:	4620      	mov	r0, r4
 8012368:	f7ff fa32 	bl	80117d0 <tcp_eff_send_mss_netif>
 801236c:	4603      	mov	r3, r0
 801236e:	461a      	mov	r2, r3
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012374:	2112      	movs	r1, #18
 8012376:	6978      	ldr	r0, [r7, #20]
 8012378:	f002 fc9a 	bl	8014cb0 <tcp_enqueue_flags>
 801237c:	4603      	mov	r3, r0
 801237e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d004      	beq.n	8012392 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012388:	2100      	movs	r1, #0
 801238a:	6978      	ldr	r0, [r7, #20]
 801238c:	f7fd fee0 	bl	8010150 <tcp_abandon>
      return;
 8012390:	e006      	b.n	80123a0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012392:	6978      	ldr	r0, [r7, #20]
 8012394:	f002 fd7a 	bl	8014e8c <tcp_output>
  return;
 8012398:	e001      	b.n	801239e <tcp_listen_input+0x1be>
    return;
 801239a:	bf00      	nop
 801239c:	e000      	b.n	80123a0 <tcp_listen_input+0x1c0>
  return;
 801239e:	bf00      	nop
}
 80123a0:	371c      	adds	r7, #28
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd90      	pop	{r4, r7, pc}
 80123a6:	bf00      	nop
 80123a8:	24004150 	.word	0x24004150
 80123ac:	0801b3c4 	.word	0x0801b3c4
 80123b0:	0801b5bc 	.word	0x0801b5bc
 80123b4:	0801b410 	.word	0x0801b410
 80123b8:	24004148 	.word	0x24004148
 80123bc:	2400414e 	.word	0x2400414e
 80123c0:	24004144 	.word	0x24004144
 80123c4:	24004134 	.word	0x24004134
 80123c8:	240047ac 	.word	0x240047ac
 80123cc:	240047b0 	.word	0x240047b0
 80123d0:	2400479c 	.word	0x2400479c
 80123d4:	2400785c 	.word	0x2400785c
 80123d8:	24007858 	.word	0x24007858

080123dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af04      	add	r7, sp, #16
 80123e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80123e4:	4b2f      	ldr	r3, [pc, #188]	; (80124a4 <tcp_timewait_input+0xc8>)
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	f003 0304 	and.w	r3, r3, #4
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d153      	bne.n	8012498 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d106      	bne.n	8012404 <tcp_timewait_input+0x28>
 80123f6:	4b2c      	ldr	r3, [pc, #176]	; (80124a8 <tcp_timewait_input+0xcc>)
 80123f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80123fc:	492b      	ldr	r1, [pc, #172]	; (80124ac <tcp_timewait_input+0xd0>)
 80123fe:	482c      	ldr	r0, [pc, #176]	; (80124b0 <tcp_timewait_input+0xd4>)
 8012400:	f006 fe18 	bl	8019034 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012404:	4b27      	ldr	r3, [pc, #156]	; (80124a4 <tcp_timewait_input+0xc8>)
 8012406:	781b      	ldrb	r3, [r3, #0]
 8012408:	f003 0302 	and.w	r3, r3, #2
 801240c:	2b00      	cmp	r3, #0
 801240e:	d02a      	beq.n	8012466 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012410:	4b28      	ldr	r3, [pc, #160]	; (80124b4 <tcp_timewait_input+0xd8>)
 8012412:	681a      	ldr	r2, [r3, #0]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012418:	1ad3      	subs	r3, r2, r3
 801241a:	2b00      	cmp	r3, #0
 801241c:	db2d      	blt.n	801247a <tcp_timewait_input+0x9e>
 801241e:	4b25      	ldr	r3, [pc, #148]	; (80124b4 <tcp_timewait_input+0xd8>)
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012426:	6879      	ldr	r1, [r7, #4]
 8012428:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801242a:	440b      	add	r3, r1
 801242c:	1ad3      	subs	r3, r2, r3
 801242e:	2b00      	cmp	r3, #0
 8012430:	dc23      	bgt.n	801247a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012432:	4b21      	ldr	r3, [pc, #132]	; (80124b8 <tcp_timewait_input+0xdc>)
 8012434:	6819      	ldr	r1, [r3, #0]
 8012436:	4b21      	ldr	r3, [pc, #132]	; (80124bc <tcp_timewait_input+0xe0>)
 8012438:	881b      	ldrh	r3, [r3, #0]
 801243a:	461a      	mov	r2, r3
 801243c:	4b1d      	ldr	r3, [pc, #116]	; (80124b4 <tcp_timewait_input+0xd8>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012442:	4b1f      	ldr	r3, [pc, #124]	; (80124c0 <tcp_timewait_input+0xe4>)
 8012444:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012446:	885b      	ldrh	r3, [r3, #2]
 8012448:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801244a:	4a1d      	ldr	r2, [pc, #116]	; (80124c0 <tcp_timewait_input+0xe4>)
 801244c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801244e:	8812      	ldrh	r2, [r2, #0]
 8012450:	b292      	uxth	r2, r2
 8012452:	9202      	str	r2, [sp, #8]
 8012454:	9301      	str	r3, [sp, #4]
 8012456:	4b1b      	ldr	r3, [pc, #108]	; (80124c4 <tcp_timewait_input+0xe8>)
 8012458:	9300      	str	r3, [sp, #0]
 801245a:	4b1b      	ldr	r3, [pc, #108]	; (80124c8 <tcp_timewait_input+0xec>)
 801245c:	4602      	mov	r2, r0
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f003 fac8 	bl	80159f4 <tcp_rst>
      return;
 8012464:	e01b      	b.n	801249e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012466:	4b0f      	ldr	r3, [pc, #60]	; (80124a4 <tcp_timewait_input+0xc8>)
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	f003 0301 	and.w	r3, r3, #1
 801246e:	2b00      	cmp	r3, #0
 8012470:	d003      	beq.n	801247a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012472:	4b16      	ldr	r3, [pc, #88]	; (80124cc <tcp_timewait_input+0xf0>)
 8012474:	681a      	ldr	r2, [r3, #0]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801247a:	4b10      	ldr	r3, [pc, #64]	; (80124bc <tcp_timewait_input+0xe0>)
 801247c:	881b      	ldrh	r3, [r3, #0]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d00c      	beq.n	801249c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	8b5b      	ldrh	r3, [r3, #26]
 8012486:	f043 0302 	orr.w	r3, r3, #2
 801248a:	b29a      	uxth	r2, r3
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f002 fcfb 	bl	8014e8c <tcp_output>
  }
  return;
 8012496:	e001      	b.n	801249c <tcp_timewait_input+0xc0>
    return;
 8012498:	bf00      	nop
 801249a:	e000      	b.n	801249e <tcp_timewait_input+0xc2>
  return;
 801249c:	bf00      	nop
}
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	24004150 	.word	0x24004150
 80124a8:	0801b3c4 	.word	0x0801b3c4
 80124ac:	0801b5dc 	.word	0x0801b5dc
 80124b0:	0801b410 	.word	0x0801b410
 80124b4:	24004144 	.word	0x24004144
 80124b8:	24004148 	.word	0x24004148
 80124bc:	2400414e 	.word	0x2400414e
 80124c0:	24004134 	.word	0x24004134
 80124c4:	240047ac 	.word	0x240047ac
 80124c8:	240047b0 	.word	0x240047b0
 80124cc:	24007860 	.word	0x24007860

080124d0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80124d0:	b590      	push	{r4, r7, lr}
 80124d2:	b08d      	sub	sp, #52	; 0x34
 80124d4:	af04      	add	r7, sp, #16
 80124d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80124d8:	2300      	movs	r3, #0
 80124da:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80124dc:	2300      	movs	r3, #0
 80124de:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d106      	bne.n	80124f4 <tcp_process+0x24>
 80124e6:	4ba5      	ldr	r3, [pc, #660]	; (801277c <tcp_process+0x2ac>)
 80124e8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80124ec:	49a4      	ldr	r1, [pc, #656]	; (8012780 <tcp_process+0x2b0>)
 80124ee:	48a5      	ldr	r0, [pc, #660]	; (8012784 <tcp_process+0x2b4>)
 80124f0:	f006 fda0 	bl	8019034 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80124f4:	4ba4      	ldr	r3, [pc, #656]	; (8012788 <tcp_process+0x2b8>)
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	f003 0304 	and.w	r3, r3, #4
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d04e      	beq.n	801259e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	7d1b      	ldrb	r3, [r3, #20]
 8012504:	2b02      	cmp	r3, #2
 8012506:	d108      	bne.n	801251a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801250c:	4b9f      	ldr	r3, [pc, #636]	; (801278c <tcp_process+0x2bc>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	429a      	cmp	r2, r3
 8012512:	d123      	bne.n	801255c <tcp_process+0x8c>
        acceptable = 1;
 8012514:	2301      	movs	r3, #1
 8012516:	76fb      	strb	r3, [r7, #27]
 8012518:	e020      	b.n	801255c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801251e:	4b9c      	ldr	r3, [pc, #624]	; (8012790 <tcp_process+0x2c0>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	429a      	cmp	r2, r3
 8012524:	d102      	bne.n	801252c <tcp_process+0x5c>
        acceptable = 1;
 8012526:	2301      	movs	r3, #1
 8012528:	76fb      	strb	r3, [r7, #27]
 801252a:	e017      	b.n	801255c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801252c:	4b98      	ldr	r3, [pc, #608]	; (8012790 <tcp_process+0x2c0>)
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012534:	1ad3      	subs	r3, r2, r3
 8012536:	2b00      	cmp	r3, #0
 8012538:	db10      	blt.n	801255c <tcp_process+0x8c>
 801253a:	4b95      	ldr	r3, [pc, #596]	; (8012790 <tcp_process+0x2c0>)
 801253c:	681a      	ldr	r2, [r3, #0]
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012542:	6879      	ldr	r1, [r7, #4]
 8012544:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012546:	440b      	add	r3, r1
 8012548:	1ad3      	subs	r3, r2, r3
 801254a:	2b00      	cmp	r3, #0
 801254c:	dc06      	bgt.n	801255c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	8b5b      	ldrh	r3, [r3, #26]
 8012552:	f043 0302 	orr.w	r3, r3, #2
 8012556:	b29a      	uxth	r2, r3
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801255c:	7efb      	ldrb	r3, [r7, #27]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d01b      	beq.n	801259a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	7d1b      	ldrb	r3, [r3, #20]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d106      	bne.n	8012578 <tcp_process+0xa8>
 801256a:	4b84      	ldr	r3, [pc, #528]	; (801277c <tcp_process+0x2ac>)
 801256c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012570:	4988      	ldr	r1, [pc, #544]	; (8012794 <tcp_process+0x2c4>)
 8012572:	4884      	ldr	r0, [pc, #528]	; (8012784 <tcp_process+0x2b4>)
 8012574:	f006 fd5e 	bl	8019034 <iprintf>
      recv_flags |= TF_RESET;
 8012578:	4b87      	ldr	r3, [pc, #540]	; (8012798 <tcp_process+0x2c8>)
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	f043 0308 	orr.w	r3, r3, #8
 8012580:	b2da      	uxtb	r2, r3
 8012582:	4b85      	ldr	r3, [pc, #532]	; (8012798 <tcp_process+0x2c8>)
 8012584:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	8b5b      	ldrh	r3, [r3, #26]
 801258a:	f023 0301 	bic.w	r3, r3, #1
 801258e:	b29a      	uxth	r2, r3
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012594:	f06f 030d 	mvn.w	r3, #13
 8012598:	e37a      	b.n	8012c90 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801259a:	2300      	movs	r3, #0
 801259c:	e378      	b.n	8012c90 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801259e:	4b7a      	ldr	r3, [pc, #488]	; (8012788 <tcp_process+0x2b8>)
 80125a0:	781b      	ldrb	r3, [r3, #0]
 80125a2:	f003 0302 	and.w	r3, r3, #2
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d010      	beq.n	80125cc <tcp_process+0xfc>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	7d1b      	ldrb	r3, [r3, #20]
 80125ae:	2b02      	cmp	r3, #2
 80125b0:	d00c      	beq.n	80125cc <tcp_process+0xfc>
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	7d1b      	ldrb	r3, [r3, #20]
 80125b6:	2b03      	cmp	r3, #3
 80125b8:	d008      	beq.n	80125cc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	8b5b      	ldrh	r3, [r3, #26]
 80125be:	f043 0302 	orr.w	r3, r3, #2
 80125c2:	b29a      	uxth	r2, r3
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80125c8:	2300      	movs	r3, #0
 80125ca:	e361      	b.n	8012c90 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	8b5b      	ldrh	r3, [r3, #26]
 80125d0:	f003 0310 	and.w	r3, r3, #16
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d103      	bne.n	80125e0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80125d8:	4b70      	ldr	r3, [pc, #448]	; (801279c <tcp_process+0x2cc>)
 80125da:	681a      	ldr	r2, [r3, #0]
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2200      	movs	r2, #0
 80125e4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2200      	movs	r2, #0
 80125ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f001 fc2d 	bl	8013e50 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	7d1b      	ldrb	r3, [r3, #20]
 80125fa:	3b02      	subs	r3, #2
 80125fc:	2b07      	cmp	r3, #7
 80125fe:	f200 8337 	bhi.w	8012c70 <tcp_process+0x7a0>
 8012602:	a201      	add	r2, pc, #4	; (adr r2, 8012608 <tcp_process+0x138>)
 8012604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012608:	08012629 	.word	0x08012629
 801260c:	08012859 	.word	0x08012859
 8012610:	080129d1 	.word	0x080129d1
 8012614:	080129fb 	.word	0x080129fb
 8012618:	08012b1f 	.word	0x08012b1f
 801261c:	080129d1 	.word	0x080129d1
 8012620:	08012bab 	.word	0x08012bab
 8012624:	08012c3b 	.word	0x08012c3b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012628:	4b57      	ldr	r3, [pc, #348]	; (8012788 <tcp_process+0x2b8>)
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	f003 0310 	and.w	r3, r3, #16
 8012630:	2b00      	cmp	r3, #0
 8012632:	f000 80e4 	beq.w	80127fe <tcp_process+0x32e>
 8012636:	4b54      	ldr	r3, [pc, #336]	; (8012788 <tcp_process+0x2b8>)
 8012638:	781b      	ldrb	r3, [r3, #0]
 801263a:	f003 0302 	and.w	r3, r3, #2
 801263e:	2b00      	cmp	r3, #0
 8012640:	f000 80dd 	beq.w	80127fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012648:	1c5a      	adds	r2, r3, #1
 801264a:	4b50      	ldr	r3, [pc, #320]	; (801278c <tcp_process+0x2bc>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	429a      	cmp	r2, r3
 8012650:	f040 80d5 	bne.w	80127fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012654:	4b4e      	ldr	r3, [pc, #312]	; (8012790 <tcp_process+0x2c0>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	1c5a      	adds	r2, r3, #1
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012666:	4b49      	ldr	r3, [pc, #292]	; (801278c <tcp_process+0x2bc>)
 8012668:	681a      	ldr	r2, [r3, #0]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801266e:	4b4c      	ldr	r3, [pc, #304]	; (80127a0 <tcp_process+0x2d0>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	89db      	ldrh	r3, [r3, #14]
 8012674:	b29a      	uxth	r2, r3
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012688:	4b41      	ldr	r3, [pc, #260]	; (8012790 <tcp_process+0x2c0>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	1e5a      	subs	r2, r3, #1
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2204      	movs	r2, #4
 8012696:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	3304      	adds	r3, #4
 80126a0:	4618      	mov	r0, r3
 80126a2:	f004 ff9d 	bl	80175e0 <ip4_route>
 80126a6:	4601      	mov	r1, r0
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	3304      	adds	r3, #4
 80126ac:	461a      	mov	r2, r3
 80126ae:	4620      	mov	r0, r4
 80126b0:	f7ff f88e 	bl	80117d0 <tcp_eff_send_mss_netif>
 80126b4:	4603      	mov	r3, r0
 80126b6:	461a      	mov	r2, r3
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126c0:	009a      	lsls	r2, r3, #2
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126c6:	005b      	lsls	r3, r3, #1
 80126c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80126cc:	428b      	cmp	r3, r1
 80126ce:	bf38      	it	cc
 80126d0:	460b      	movcc	r3, r1
 80126d2:	429a      	cmp	r2, r3
 80126d4:	d204      	bcs.n	80126e0 <tcp_process+0x210>
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126da:	009b      	lsls	r3, r3, #2
 80126dc:	b29b      	uxth	r3, r3
 80126de:	e00d      	b.n	80126fc <tcp_process+0x22c>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126e4:	005b      	lsls	r3, r3, #1
 80126e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80126ea:	4293      	cmp	r3, r2
 80126ec:	d904      	bls.n	80126f8 <tcp_process+0x228>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126f2:	005b      	lsls	r3, r3, #1
 80126f4:	b29b      	uxth	r3, r3
 80126f6:	e001      	b.n	80126fc <tcp_process+0x22c>
 80126f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80126fc:	687a      	ldr	r2, [r7, #4]
 80126fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012708:	2b00      	cmp	r3, #0
 801270a:	d106      	bne.n	801271a <tcp_process+0x24a>
 801270c:	4b1b      	ldr	r3, [pc, #108]	; (801277c <tcp_process+0x2ac>)
 801270e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012712:	4924      	ldr	r1, [pc, #144]	; (80127a4 <tcp_process+0x2d4>)
 8012714:	481b      	ldr	r0, [pc, #108]	; (8012784 <tcp_process+0x2b4>)
 8012716:	f006 fc8d 	bl	8019034 <iprintf>
        --pcb->snd_queuelen;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012720:	3b01      	subs	r3, #1
 8012722:	b29a      	uxth	r2, r3
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801272e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012730:	69fb      	ldr	r3, [r7, #28]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d111      	bne.n	801275a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801273a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801273c:	69fb      	ldr	r3, [r7, #28]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d106      	bne.n	8012750 <tcp_process+0x280>
 8012742:	4b0e      	ldr	r3, [pc, #56]	; (801277c <tcp_process+0x2ac>)
 8012744:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012748:	4917      	ldr	r1, [pc, #92]	; (80127a8 <tcp_process+0x2d8>)
 801274a:	480e      	ldr	r0, [pc, #56]	; (8012784 <tcp_process+0x2b4>)
 801274c:	f006 fc72 	bl	8019034 <iprintf>
          pcb->unsent = rseg->next;
 8012750:	69fb      	ldr	r3, [r7, #28]
 8012752:	681a      	ldr	r2, [r3, #0]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	66da      	str	r2, [r3, #108]	; 0x6c
 8012758:	e003      	b.n	8012762 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012762:	69f8      	ldr	r0, [r7, #28]
 8012764:	f7fe fc57 	bl	8011016 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801276c:	2b00      	cmp	r3, #0
 801276e:	d11d      	bne.n	80127ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012776:	861a      	strh	r2, [r3, #48]	; 0x30
 8012778:	e01f      	b.n	80127ba <tcp_process+0x2ea>
 801277a:	bf00      	nop
 801277c:	0801b3c4 	.word	0x0801b3c4
 8012780:	0801b5fc 	.word	0x0801b5fc
 8012784:	0801b410 	.word	0x0801b410
 8012788:	24004150 	.word	0x24004150
 801278c:	24004148 	.word	0x24004148
 8012790:	24004144 	.word	0x24004144
 8012794:	0801b618 	.word	0x0801b618
 8012798:	24004151 	.word	0x24004151
 801279c:	24007860 	.word	0x24007860
 80127a0:	24004134 	.word	0x24004134
 80127a4:	0801b638 	.word	0x0801b638
 80127a8:	0801b650 	.word	0x0801b650
        } else {
          pcb->rtime = 0;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2200      	movs	r2, #0
 80127b0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2200      	movs	r2, #0
 80127b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d00a      	beq.n	80127da <tcp_process+0x30a>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	6910      	ldr	r0, [r2, #16]
 80127ce:	2200      	movs	r2, #0
 80127d0:	6879      	ldr	r1, [r7, #4]
 80127d2:	4798      	blx	r3
 80127d4:	4603      	mov	r3, r0
 80127d6:	76bb      	strb	r3, [r7, #26]
 80127d8:	e001      	b.n	80127de <tcp_process+0x30e>
 80127da:	2300      	movs	r3, #0
 80127dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80127de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80127e2:	f113 0f0d 	cmn.w	r3, #13
 80127e6:	d102      	bne.n	80127ee <tcp_process+0x31e>
          return ERR_ABRT;
 80127e8:	f06f 030c 	mvn.w	r3, #12
 80127ec:	e250      	b.n	8012c90 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	8b5b      	ldrh	r3, [r3, #26]
 80127f2:	f043 0302 	orr.w	r3, r3, #2
 80127f6:	b29a      	uxth	r2, r3
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80127fc:	e23a      	b.n	8012c74 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80127fe:	4b9d      	ldr	r3, [pc, #628]	; (8012a74 <tcp_process+0x5a4>)
 8012800:	781b      	ldrb	r3, [r3, #0]
 8012802:	f003 0310 	and.w	r3, r3, #16
 8012806:	2b00      	cmp	r3, #0
 8012808:	f000 8234 	beq.w	8012c74 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801280c:	4b9a      	ldr	r3, [pc, #616]	; (8012a78 <tcp_process+0x5a8>)
 801280e:	6819      	ldr	r1, [r3, #0]
 8012810:	4b9a      	ldr	r3, [pc, #616]	; (8012a7c <tcp_process+0x5ac>)
 8012812:	881b      	ldrh	r3, [r3, #0]
 8012814:	461a      	mov	r2, r3
 8012816:	4b9a      	ldr	r3, [pc, #616]	; (8012a80 <tcp_process+0x5b0>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801281c:	4b99      	ldr	r3, [pc, #612]	; (8012a84 <tcp_process+0x5b4>)
 801281e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012820:	885b      	ldrh	r3, [r3, #2]
 8012822:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012824:	4a97      	ldr	r2, [pc, #604]	; (8012a84 <tcp_process+0x5b4>)
 8012826:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012828:	8812      	ldrh	r2, [r2, #0]
 801282a:	b292      	uxth	r2, r2
 801282c:	9202      	str	r2, [sp, #8]
 801282e:	9301      	str	r3, [sp, #4]
 8012830:	4b95      	ldr	r3, [pc, #596]	; (8012a88 <tcp_process+0x5b8>)
 8012832:	9300      	str	r3, [sp, #0]
 8012834:	4b95      	ldr	r3, [pc, #596]	; (8012a8c <tcp_process+0x5bc>)
 8012836:	4602      	mov	r2, r0
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	f003 f8db 	bl	80159f4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012844:	2b05      	cmp	r3, #5
 8012846:	f200 8215 	bhi.w	8012c74 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2200      	movs	r2, #0
 801284e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f002 fea5 	bl	80155a0 <tcp_rexmit_rto>
      break;
 8012856:	e20d      	b.n	8012c74 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012858:	4b86      	ldr	r3, [pc, #536]	; (8012a74 <tcp_process+0x5a4>)
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	f003 0310 	and.w	r3, r3, #16
 8012860:	2b00      	cmp	r3, #0
 8012862:	f000 80a1 	beq.w	80129a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012866:	4b84      	ldr	r3, [pc, #528]	; (8012a78 <tcp_process+0x5a8>)
 8012868:	681a      	ldr	r2, [r3, #0]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801286e:	1ad3      	subs	r3, r2, r3
 8012870:	3b01      	subs	r3, #1
 8012872:	2b00      	cmp	r3, #0
 8012874:	db7e      	blt.n	8012974 <tcp_process+0x4a4>
 8012876:	4b80      	ldr	r3, [pc, #512]	; (8012a78 <tcp_process+0x5a8>)
 8012878:	681a      	ldr	r2, [r3, #0]
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801287e:	1ad3      	subs	r3, r2, r3
 8012880:	2b00      	cmp	r3, #0
 8012882:	dc77      	bgt.n	8012974 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2204      	movs	r2, #4
 8012888:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801288e:	2b00      	cmp	r3, #0
 8012890:	d102      	bne.n	8012898 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012892:	23fa      	movs	r3, #250	; 0xfa
 8012894:	76bb      	strb	r3, [r7, #26]
 8012896:	e01d      	b.n	80128d4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801289c:	699b      	ldr	r3, [r3, #24]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d106      	bne.n	80128b0 <tcp_process+0x3e0>
 80128a2:	4b7b      	ldr	r3, [pc, #492]	; (8012a90 <tcp_process+0x5c0>)
 80128a4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80128a8:	497a      	ldr	r1, [pc, #488]	; (8012a94 <tcp_process+0x5c4>)
 80128aa:	487b      	ldr	r0, [pc, #492]	; (8012a98 <tcp_process+0x5c8>)
 80128ac:	f006 fbc2 	bl	8019034 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128b4:	699b      	ldr	r3, [r3, #24]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d00a      	beq.n	80128d0 <tcp_process+0x400>
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128be:	699b      	ldr	r3, [r3, #24]
 80128c0:	687a      	ldr	r2, [r7, #4]
 80128c2:	6910      	ldr	r0, [r2, #16]
 80128c4:	2200      	movs	r2, #0
 80128c6:	6879      	ldr	r1, [r7, #4]
 80128c8:	4798      	blx	r3
 80128ca:	4603      	mov	r3, r0
 80128cc:	76bb      	strb	r3, [r7, #26]
 80128ce:	e001      	b.n	80128d4 <tcp_process+0x404>
 80128d0:	23f0      	movs	r3, #240	; 0xf0
 80128d2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80128d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d00a      	beq.n	80128f2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80128dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80128e0:	f113 0f0d 	cmn.w	r3, #13
 80128e4:	d002      	beq.n	80128ec <tcp_process+0x41c>
              tcp_abort(pcb);
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f7fd fcf0 	bl	80102cc <tcp_abort>
            }
            return ERR_ABRT;
 80128ec:	f06f 030c 	mvn.w	r3, #12
 80128f0:	e1ce      	b.n	8012c90 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f000 fae0 	bl	8012eb8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80128f8:	4b68      	ldr	r3, [pc, #416]	; (8012a9c <tcp_process+0x5cc>)
 80128fa:	881b      	ldrh	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d005      	beq.n	801290c <tcp_process+0x43c>
            recv_acked--;
 8012900:	4b66      	ldr	r3, [pc, #408]	; (8012a9c <tcp_process+0x5cc>)
 8012902:	881b      	ldrh	r3, [r3, #0]
 8012904:	3b01      	subs	r3, #1
 8012906:	b29a      	uxth	r2, r3
 8012908:	4b64      	ldr	r3, [pc, #400]	; (8012a9c <tcp_process+0x5cc>)
 801290a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012910:	009a      	lsls	r2, r3, #2
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012916:	005b      	lsls	r3, r3, #1
 8012918:	f241 111c 	movw	r1, #4380	; 0x111c
 801291c:	428b      	cmp	r3, r1
 801291e:	bf38      	it	cc
 8012920:	460b      	movcc	r3, r1
 8012922:	429a      	cmp	r2, r3
 8012924:	d204      	bcs.n	8012930 <tcp_process+0x460>
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801292a:	009b      	lsls	r3, r3, #2
 801292c:	b29b      	uxth	r3, r3
 801292e:	e00d      	b.n	801294c <tcp_process+0x47c>
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012934:	005b      	lsls	r3, r3, #1
 8012936:	f241 121c 	movw	r2, #4380	; 0x111c
 801293a:	4293      	cmp	r3, r2
 801293c:	d904      	bls.n	8012948 <tcp_process+0x478>
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012942:	005b      	lsls	r3, r3, #1
 8012944:	b29b      	uxth	r3, r3
 8012946:	e001      	b.n	801294c <tcp_process+0x47c>
 8012948:	f241 131c 	movw	r3, #4380	; 0x111c
 801294c:	687a      	ldr	r2, [r7, #4]
 801294e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012952:	4b53      	ldr	r3, [pc, #332]	; (8012aa0 <tcp_process+0x5d0>)
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	f003 0320 	and.w	r3, r3, #32
 801295a:	2b00      	cmp	r3, #0
 801295c:	d037      	beq.n	80129ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	8b5b      	ldrh	r3, [r3, #26]
 8012962:	f043 0302 	orr.w	r3, r3, #2
 8012966:	b29a      	uxth	r2, r3
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2207      	movs	r2, #7
 8012970:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012972:	e02c      	b.n	80129ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012974:	4b40      	ldr	r3, [pc, #256]	; (8012a78 <tcp_process+0x5a8>)
 8012976:	6819      	ldr	r1, [r3, #0]
 8012978:	4b40      	ldr	r3, [pc, #256]	; (8012a7c <tcp_process+0x5ac>)
 801297a:	881b      	ldrh	r3, [r3, #0]
 801297c:	461a      	mov	r2, r3
 801297e:	4b40      	ldr	r3, [pc, #256]	; (8012a80 <tcp_process+0x5b0>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012984:	4b3f      	ldr	r3, [pc, #252]	; (8012a84 <tcp_process+0x5b4>)
 8012986:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012988:	885b      	ldrh	r3, [r3, #2]
 801298a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801298c:	4a3d      	ldr	r2, [pc, #244]	; (8012a84 <tcp_process+0x5b4>)
 801298e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012990:	8812      	ldrh	r2, [r2, #0]
 8012992:	b292      	uxth	r2, r2
 8012994:	9202      	str	r2, [sp, #8]
 8012996:	9301      	str	r3, [sp, #4]
 8012998:	4b3b      	ldr	r3, [pc, #236]	; (8012a88 <tcp_process+0x5b8>)
 801299a:	9300      	str	r3, [sp, #0]
 801299c:	4b3b      	ldr	r3, [pc, #236]	; (8012a8c <tcp_process+0x5bc>)
 801299e:	4602      	mov	r2, r0
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f003 f827 	bl	80159f4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80129a6:	e167      	b.n	8012c78 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80129a8:	4b32      	ldr	r3, [pc, #200]	; (8012a74 <tcp_process+0x5a4>)
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	f003 0302 	and.w	r3, r3, #2
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	f000 8161 	beq.w	8012c78 <tcp_process+0x7a8>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ba:	1e5a      	subs	r2, r3, #1
 80129bc:	4b30      	ldr	r3, [pc, #192]	; (8012a80 <tcp_process+0x5b0>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	429a      	cmp	r2, r3
 80129c2:	f040 8159 	bne.w	8012c78 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f002 fe0c 	bl	80155e4 <tcp_rexmit>
      break;
 80129cc:	e154      	b.n	8012c78 <tcp_process+0x7a8>
 80129ce:	e153      	b.n	8012c78 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f000 fa71 	bl	8012eb8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80129d6:	4b32      	ldr	r3, [pc, #200]	; (8012aa0 <tcp_process+0x5d0>)
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	f003 0320 	and.w	r3, r3, #32
 80129de:	2b00      	cmp	r3, #0
 80129e0:	f000 814c 	beq.w	8012c7c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	8b5b      	ldrh	r3, [r3, #26]
 80129e8:	f043 0302 	orr.w	r3, r3, #2
 80129ec:	b29a      	uxth	r2, r3
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2207      	movs	r2, #7
 80129f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80129f8:	e140      	b.n	8012c7c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80129fa:	6878      	ldr	r0, [r7, #4]
 80129fc:	f000 fa5c 	bl	8012eb8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012a00:	4b27      	ldr	r3, [pc, #156]	; (8012aa0 <tcp_process+0x5d0>)
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	f003 0320 	and.w	r3, r3, #32
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d071      	beq.n	8012af0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012a0c:	4b19      	ldr	r3, [pc, #100]	; (8012a74 <tcp_process+0x5a4>)
 8012a0e:	781b      	ldrb	r3, [r3, #0]
 8012a10:	f003 0310 	and.w	r3, r3, #16
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d060      	beq.n	8012ada <tcp_process+0x60a>
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a1c:	4b16      	ldr	r3, [pc, #88]	; (8012a78 <tcp_process+0x5a8>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d15a      	bne.n	8012ada <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d156      	bne.n	8012ada <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	8b5b      	ldrh	r3, [r3, #26]
 8012a30:	f043 0302 	orr.w	r3, r3, #2
 8012a34:	b29a      	uxth	r2, r3
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f7fe fdbe 	bl	80115bc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012a40:	4b18      	ldr	r3, [pc, #96]	; (8012aa4 <tcp_process+0x5d4>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	687a      	ldr	r2, [r7, #4]
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d105      	bne.n	8012a56 <tcp_process+0x586>
 8012a4a:	4b16      	ldr	r3, [pc, #88]	; (8012aa4 <tcp_process+0x5d4>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	68db      	ldr	r3, [r3, #12]
 8012a50:	4a14      	ldr	r2, [pc, #80]	; (8012aa4 <tcp_process+0x5d4>)
 8012a52:	6013      	str	r3, [r2, #0]
 8012a54:	e02e      	b.n	8012ab4 <tcp_process+0x5e4>
 8012a56:	4b13      	ldr	r3, [pc, #76]	; (8012aa4 <tcp_process+0x5d4>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	617b      	str	r3, [r7, #20]
 8012a5c:	e027      	b.n	8012aae <tcp_process+0x5de>
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	68db      	ldr	r3, [r3, #12]
 8012a62:	687a      	ldr	r2, [r7, #4]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d11f      	bne.n	8012aa8 <tcp_process+0x5d8>
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	68da      	ldr	r2, [r3, #12]
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	60da      	str	r2, [r3, #12]
 8012a70:	e020      	b.n	8012ab4 <tcp_process+0x5e4>
 8012a72:	bf00      	nop
 8012a74:	24004150 	.word	0x24004150
 8012a78:	24004148 	.word	0x24004148
 8012a7c:	2400414e 	.word	0x2400414e
 8012a80:	24004144 	.word	0x24004144
 8012a84:	24004134 	.word	0x24004134
 8012a88:	240047ac 	.word	0x240047ac
 8012a8c:	240047b0 	.word	0x240047b0
 8012a90:	0801b3c4 	.word	0x0801b3c4
 8012a94:	0801b664 	.word	0x0801b664
 8012a98:	0801b410 	.word	0x0801b410
 8012a9c:	2400414c 	.word	0x2400414c
 8012aa0:	24004151 	.word	0x24004151
 8012aa4:	2400785c 	.word	0x2400785c
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	68db      	ldr	r3, [r3, #12]
 8012aac:	617b      	str	r3, [r7, #20]
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d1d4      	bne.n	8012a5e <tcp_process+0x58e>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	60da      	str	r2, [r3, #12]
 8012aba:	4b77      	ldr	r3, [pc, #476]	; (8012c98 <tcp_process+0x7c8>)
 8012abc:	2201      	movs	r2, #1
 8012abe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	220a      	movs	r2, #10
 8012ac4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012ac6:	4b75      	ldr	r3, [pc, #468]	; (8012c9c <tcp_process+0x7cc>)
 8012ac8:	681a      	ldr	r2, [r3, #0]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	60da      	str	r2, [r3, #12]
 8012ace:	4a73      	ldr	r2, [pc, #460]	; (8012c9c <tcp_process+0x7cc>)
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6013      	str	r3, [r2, #0]
 8012ad4:	f003 f950 	bl	8015d78 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012ad8:	e0d2      	b.n	8012c80 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	8b5b      	ldrh	r3, [r3, #26]
 8012ade:	f043 0302 	orr.w	r3, r3, #2
 8012ae2:	b29a      	uxth	r2, r3
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2208      	movs	r2, #8
 8012aec:	751a      	strb	r2, [r3, #20]
      break;
 8012aee:	e0c7      	b.n	8012c80 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012af0:	4b6b      	ldr	r3, [pc, #428]	; (8012ca0 <tcp_process+0x7d0>)
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	f003 0310 	and.w	r3, r3, #16
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f000 80c1 	beq.w	8012c80 <tcp_process+0x7b0>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012b02:	4b68      	ldr	r3, [pc, #416]	; (8012ca4 <tcp_process+0x7d4>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	429a      	cmp	r2, r3
 8012b08:	f040 80ba 	bne.w	8012c80 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	f040 80b5 	bne.w	8012c80 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2206      	movs	r2, #6
 8012b1a:	751a      	strb	r2, [r3, #20]
      break;
 8012b1c:	e0b0      	b.n	8012c80 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	f000 f9ca 	bl	8012eb8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012b24:	4b60      	ldr	r3, [pc, #384]	; (8012ca8 <tcp_process+0x7d8>)
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	f003 0320 	and.w	r3, r3, #32
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f000 80a9 	beq.w	8012c84 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	8b5b      	ldrh	r3, [r3, #26]
 8012b36:	f043 0302 	orr.w	r3, r3, #2
 8012b3a:	b29a      	uxth	r2, r3
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f7fe fd3b 	bl	80115bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012b46:	4b59      	ldr	r3, [pc, #356]	; (8012cac <tcp_process+0x7dc>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	687a      	ldr	r2, [r7, #4]
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d105      	bne.n	8012b5c <tcp_process+0x68c>
 8012b50:	4b56      	ldr	r3, [pc, #344]	; (8012cac <tcp_process+0x7dc>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	68db      	ldr	r3, [r3, #12]
 8012b56:	4a55      	ldr	r2, [pc, #340]	; (8012cac <tcp_process+0x7dc>)
 8012b58:	6013      	str	r3, [r2, #0]
 8012b5a:	e013      	b.n	8012b84 <tcp_process+0x6b4>
 8012b5c:	4b53      	ldr	r3, [pc, #332]	; (8012cac <tcp_process+0x7dc>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	613b      	str	r3, [r7, #16]
 8012b62:	e00c      	b.n	8012b7e <tcp_process+0x6ae>
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	68db      	ldr	r3, [r3, #12]
 8012b68:	687a      	ldr	r2, [r7, #4]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d104      	bne.n	8012b78 <tcp_process+0x6a8>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	68da      	ldr	r2, [r3, #12]
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	60da      	str	r2, [r3, #12]
 8012b76:	e005      	b.n	8012b84 <tcp_process+0x6b4>
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	68db      	ldr	r3, [r3, #12]
 8012b7c:	613b      	str	r3, [r7, #16]
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d1ef      	bne.n	8012b64 <tcp_process+0x694>
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2200      	movs	r2, #0
 8012b88:	60da      	str	r2, [r3, #12]
 8012b8a:	4b43      	ldr	r3, [pc, #268]	; (8012c98 <tcp_process+0x7c8>)
 8012b8c:	2201      	movs	r2, #1
 8012b8e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	220a      	movs	r2, #10
 8012b94:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012b96:	4b41      	ldr	r3, [pc, #260]	; (8012c9c <tcp_process+0x7cc>)
 8012b98:	681a      	ldr	r2, [r3, #0]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	60da      	str	r2, [r3, #12]
 8012b9e:	4a3f      	ldr	r2, [pc, #252]	; (8012c9c <tcp_process+0x7cc>)
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6013      	str	r3, [r2, #0]
 8012ba4:	f003 f8e8 	bl	8015d78 <tcp_timer_needed>
      }
      break;
 8012ba8:	e06c      	b.n	8012c84 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012baa:	6878      	ldr	r0, [r7, #4]
 8012bac:	f000 f984 	bl	8012eb8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012bb0:	4b3b      	ldr	r3, [pc, #236]	; (8012ca0 <tcp_process+0x7d0>)
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	f003 0310 	and.w	r3, r3, #16
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d065      	beq.n	8012c88 <tcp_process+0x7b8>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012bc0:	4b38      	ldr	r3, [pc, #224]	; (8012ca4 <tcp_process+0x7d4>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d15f      	bne.n	8012c88 <tcp_process+0x7b8>
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d15b      	bne.n	8012c88 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012bd0:	6878      	ldr	r0, [r7, #4]
 8012bd2:	f7fe fcf3 	bl	80115bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012bd6:	4b35      	ldr	r3, [pc, #212]	; (8012cac <tcp_process+0x7dc>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	687a      	ldr	r2, [r7, #4]
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d105      	bne.n	8012bec <tcp_process+0x71c>
 8012be0:	4b32      	ldr	r3, [pc, #200]	; (8012cac <tcp_process+0x7dc>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	68db      	ldr	r3, [r3, #12]
 8012be6:	4a31      	ldr	r2, [pc, #196]	; (8012cac <tcp_process+0x7dc>)
 8012be8:	6013      	str	r3, [r2, #0]
 8012bea:	e013      	b.n	8012c14 <tcp_process+0x744>
 8012bec:	4b2f      	ldr	r3, [pc, #188]	; (8012cac <tcp_process+0x7dc>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	60fb      	str	r3, [r7, #12]
 8012bf2:	e00c      	b.n	8012c0e <tcp_process+0x73e>
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	687a      	ldr	r2, [r7, #4]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d104      	bne.n	8012c08 <tcp_process+0x738>
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	68da      	ldr	r2, [r3, #12]
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	60da      	str	r2, [r3, #12]
 8012c06:	e005      	b.n	8012c14 <tcp_process+0x744>
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	68db      	ldr	r3, [r3, #12]
 8012c0c:	60fb      	str	r3, [r7, #12]
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d1ef      	bne.n	8012bf4 <tcp_process+0x724>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2200      	movs	r2, #0
 8012c18:	60da      	str	r2, [r3, #12]
 8012c1a:	4b1f      	ldr	r3, [pc, #124]	; (8012c98 <tcp_process+0x7c8>)
 8012c1c:	2201      	movs	r2, #1
 8012c1e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	220a      	movs	r2, #10
 8012c24:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012c26:	4b1d      	ldr	r3, [pc, #116]	; (8012c9c <tcp_process+0x7cc>)
 8012c28:	681a      	ldr	r2, [r3, #0]
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	60da      	str	r2, [r3, #12]
 8012c2e:	4a1b      	ldr	r2, [pc, #108]	; (8012c9c <tcp_process+0x7cc>)
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	6013      	str	r3, [r2, #0]
 8012c34:	f003 f8a0 	bl	8015d78 <tcp_timer_needed>
      }
      break;
 8012c38:	e026      	b.n	8012c88 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	f000 f93c 	bl	8012eb8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012c40:	4b17      	ldr	r3, [pc, #92]	; (8012ca0 <tcp_process+0x7d0>)
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	f003 0310 	and.w	r3, r3, #16
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d01f      	beq.n	8012c8c <tcp_process+0x7bc>
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012c50:	4b14      	ldr	r3, [pc, #80]	; (8012ca4 <tcp_process+0x7d4>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d119      	bne.n	8012c8c <tcp_process+0x7bc>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d115      	bne.n	8012c8c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012c60:	4b11      	ldr	r3, [pc, #68]	; (8012ca8 <tcp_process+0x7d8>)
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	f043 0310 	orr.w	r3, r3, #16
 8012c68:	b2da      	uxtb	r2, r3
 8012c6a:	4b0f      	ldr	r3, [pc, #60]	; (8012ca8 <tcp_process+0x7d8>)
 8012c6c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012c6e:	e00d      	b.n	8012c8c <tcp_process+0x7bc>
    default:
      break;
 8012c70:	bf00      	nop
 8012c72:	e00c      	b.n	8012c8e <tcp_process+0x7be>
      break;
 8012c74:	bf00      	nop
 8012c76:	e00a      	b.n	8012c8e <tcp_process+0x7be>
      break;
 8012c78:	bf00      	nop
 8012c7a:	e008      	b.n	8012c8e <tcp_process+0x7be>
      break;
 8012c7c:	bf00      	nop
 8012c7e:	e006      	b.n	8012c8e <tcp_process+0x7be>
      break;
 8012c80:	bf00      	nop
 8012c82:	e004      	b.n	8012c8e <tcp_process+0x7be>
      break;
 8012c84:	bf00      	nop
 8012c86:	e002      	b.n	8012c8e <tcp_process+0x7be>
      break;
 8012c88:	bf00      	nop
 8012c8a:	e000      	b.n	8012c8e <tcp_process+0x7be>
      break;
 8012c8c:	bf00      	nop
  }
  return ERR_OK;
 8012c8e:	2300      	movs	r3, #0
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3724      	adds	r7, #36	; 0x24
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd90      	pop	{r4, r7, pc}
 8012c98:	24007858 	.word	0x24007858
 8012c9c:	2400786c 	.word	0x2400786c
 8012ca0:	24004150 	.word	0x24004150
 8012ca4:	24004148 	.word	0x24004148
 8012ca8:	24004151 	.word	0x24004151
 8012cac:	2400785c 	.word	0x2400785c

08012cb0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012cb0:	b590      	push	{r4, r7, lr}
 8012cb2:	b085      	sub	sp, #20
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
 8012cb8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d106      	bne.n	8012cce <tcp_oos_insert_segment+0x1e>
 8012cc0:	4b3b      	ldr	r3, [pc, #236]	; (8012db0 <tcp_oos_insert_segment+0x100>)
 8012cc2:	f240 421f 	movw	r2, #1055	; 0x41f
 8012cc6:	493b      	ldr	r1, [pc, #236]	; (8012db4 <tcp_oos_insert_segment+0x104>)
 8012cc8:	483b      	ldr	r0, [pc, #236]	; (8012db8 <tcp_oos_insert_segment+0x108>)
 8012cca:	f006 f9b3 	bl	8019034 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	68db      	ldr	r3, [r3, #12]
 8012cd2:	899b      	ldrh	r3, [r3, #12]
 8012cd4:	b29b      	uxth	r3, r3
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7fb f8aa 	bl	800de30 <lwip_htons>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	b2db      	uxtb	r3, r3
 8012ce0:	f003 0301 	and.w	r3, r3, #1
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d028      	beq.n	8012d3a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012ce8:	6838      	ldr	r0, [r7, #0]
 8012cea:	f7fe f97f 	bl	8010fec <tcp_segs_free>
    next = NULL;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	603b      	str	r3, [r7, #0]
 8012cf2:	e056      	b.n	8012da2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	68db      	ldr	r3, [r3, #12]
 8012cf8:	899b      	ldrh	r3, [r3, #12]
 8012cfa:	b29b      	uxth	r3, r3
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7fb f897 	bl	800de30 <lwip_htons>
 8012d02:	4603      	mov	r3, r0
 8012d04:	b2db      	uxtb	r3, r3
 8012d06:	f003 0301 	and.w	r3, r3, #1
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d00d      	beq.n	8012d2a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	68db      	ldr	r3, [r3, #12]
 8012d12:	899b      	ldrh	r3, [r3, #12]
 8012d14:	b29c      	uxth	r4, r3
 8012d16:	2001      	movs	r0, #1
 8012d18:	f7fb f88a 	bl	800de30 <lwip_htons>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	461a      	mov	r2, r3
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	68db      	ldr	r3, [r3, #12]
 8012d24:	4322      	orrs	r2, r4
 8012d26:	b292      	uxth	r2, r2
 8012d28:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012d34:	68f8      	ldr	r0, [r7, #12]
 8012d36:	f7fe f96e 	bl	8011016 <tcp_seg_free>
    while (next &&
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d00e      	beq.n	8012d5e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	891b      	ldrh	r3, [r3, #8]
 8012d44:	461a      	mov	r2, r3
 8012d46:	4b1d      	ldr	r3, [pc, #116]	; (8012dbc <tcp_oos_insert_segment+0x10c>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	441a      	add	r2, r3
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	6839      	ldr	r1, [r7, #0]
 8012d54:	8909      	ldrh	r1, [r1, #8]
 8012d56:	440b      	add	r3, r1
 8012d58:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	daca      	bge.n	8012cf4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d01e      	beq.n	8012da2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	891b      	ldrh	r3, [r3, #8]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	4b14      	ldr	r3, [pc, #80]	; (8012dbc <tcp_oos_insert_segment+0x10c>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	441a      	add	r2, r3
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	68db      	ldr	r3, [r3, #12]
 8012d74:	685b      	ldr	r3, [r3, #4]
 8012d76:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	dd12      	ble.n	8012da2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012d7c:	683b      	ldr	r3, [r7, #0]
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	b29a      	uxth	r2, r3
 8012d84:	4b0d      	ldr	r3, [pc, #52]	; (8012dbc <tcp_oos_insert_segment+0x10c>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	b29a      	uxth	r2, r3
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	685a      	ldr	r2, [r3, #4]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	891b      	ldrh	r3, [r3, #8]
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	4610      	mov	r0, r2
 8012d9e:	f7fc fb6b 	bl	800f478 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	683a      	ldr	r2, [r7, #0]
 8012da6:	601a      	str	r2, [r3, #0]
}
 8012da8:	bf00      	nop
 8012daa:	3714      	adds	r7, #20
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd90      	pop	{r4, r7, pc}
 8012db0:	0801b3c4 	.word	0x0801b3c4
 8012db4:	0801b684 	.word	0x0801b684
 8012db8:	0801b410 	.word	0x0801b410
 8012dbc:	24004144 	.word	0x24004144

08012dc0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012dc0:	b5b0      	push	{r4, r5, r7, lr}
 8012dc2:	b086      	sub	sp, #24
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	60f8      	str	r0, [r7, #12]
 8012dc8:	60b9      	str	r1, [r7, #8]
 8012dca:	607a      	str	r2, [r7, #4]
 8012dcc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012dce:	e03e      	b.n	8012e4e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fc fd5e 	bl	800f8a0 <pbuf_clen>
 8012de4:	4603      	mov	r3, r0
 8012de6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012dee:	8a7a      	ldrh	r2, [r7, #18]
 8012df0:	429a      	cmp	r2, r3
 8012df2:	d906      	bls.n	8012e02 <tcp_free_acked_segments+0x42>
 8012df4:	4b2a      	ldr	r3, [pc, #168]	; (8012ea0 <tcp_free_acked_segments+0xe0>)
 8012df6:	f240 4257 	movw	r2, #1111	; 0x457
 8012dfa:	492a      	ldr	r1, [pc, #168]	; (8012ea4 <tcp_free_acked_segments+0xe4>)
 8012dfc:	482a      	ldr	r0, [pc, #168]	; (8012ea8 <tcp_free_acked_segments+0xe8>)
 8012dfe:	f006 f919 	bl	8019034 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012e08:	8a7b      	ldrh	r3, [r7, #18]
 8012e0a:	1ad3      	subs	r3, r2, r3
 8012e0c:	b29a      	uxth	r2, r3
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	891a      	ldrh	r2, [r3, #8]
 8012e18:	4b24      	ldr	r3, [pc, #144]	; (8012eac <tcp_free_acked_segments+0xec>)
 8012e1a:	881b      	ldrh	r3, [r3, #0]
 8012e1c:	4413      	add	r3, r2
 8012e1e:	b29a      	uxth	r2, r3
 8012e20:	4b22      	ldr	r3, [pc, #136]	; (8012eac <tcp_free_acked_segments+0xec>)
 8012e22:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012e24:	6978      	ldr	r0, [r7, #20]
 8012e26:	f7fe f8f6 	bl	8011016 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d00c      	beq.n	8012e4e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d109      	bne.n	8012e4e <tcp_free_acked_segments+0x8e>
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d106      	bne.n	8012e4e <tcp_free_acked_segments+0x8e>
 8012e40:	4b17      	ldr	r3, [pc, #92]	; (8012ea0 <tcp_free_acked_segments+0xe0>)
 8012e42:	f240 4261 	movw	r2, #1121	; 0x461
 8012e46:	491a      	ldr	r1, [pc, #104]	; (8012eb0 <tcp_free_acked_segments+0xf0>)
 8012e48:	4817      	ldr	r0, [pc, #92]	; (8012ea8 <tcp_free_acked_segments+0xe8>)
 8012e4a:	f006 f8f3 	bl	8019034 <iprintf>
  while (seg_list != NULL &&
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d020      	beq.n	8012e96 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	68db      	ldr	r3, [r3, #12]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fa fffd 	bl	800de5a <lwip_htonl>
 8012e60:	4604      	mov	r4, r0
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	891b      	ldrh	r3, [r3, #8]
 8012e66:	461d      	mov	r5, r3
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	68db      	ldr	r3, [r3, #12]
 8012e6c:	899b      	ldrh	r3, [r3, #12]
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7fa ffdd 	bl	800de30 <lwip_htons>
 8012e76:	4603      	mov	r3, r0
 8012e78:	b2db      	uxtb	r3, r3
 8012e7a:	f003 0303 	and.w	r3, r3, #3
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d001      	beq.n	8012e86 <tcp_free_acked_segments+0xc6>
 8012e82:	2301      	movs	r3, #1
 8012e84:	e000      	b.n	8012e88 <tcp_free_acked_segments+0xc8>
 8012e86:	2300      	movs	r3, #0
 8012e88:	442b      	add	r3, r5
 8012e8a:	18e2      	adds	r2, r4, r3
 8012e8c:	4b09      	ldr	r3, [pc, #36]	; (8012eb4 <tcp_free_acked_segments+0xf4>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	dd9c      	ble.n	8012dd0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012e96:	68bb      	ldr	r3, [r7, #8]
}
 8012e98:	4618      	mov	r0, r3
 8012e9a:	3718      	adds	r7, #24
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8012ea0:	0801b3c4 	.word	0x0801b3c4
 8012ea4:	0801b6ac 	.word	0x0801b6ac
 8012ea8:	0801b410 	.word	0x0801b410
 8012eac:	2400414c 	.word	0x2400414c
 8012eb0:	0801b6d4 	.word	0x0801b6d4
 8012eb4:	24004148 	.word	0x24004148

08012eb8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012eb8:	b5b0      	push	{r4, r5, r7, lr}
 8012eba:	b094      	sub	sp, #80	; 0x50
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d106      	bne.n	8012ed8 <tcp_receive+0x20>
 8012eca:	4ba6      	ldr	r3, [pc, #664]	; (8013164 <tcp_receive+0x2ac>)
 8012ecc:	f240 427b 	movw	r2, #1147	; 0x47b
 8012ed0:	49a5      	ldr	r1, [pc, #660]	; (8013168 <tcp_receive+0x2b0>)
 8012ed2:	48a6      	ldr	r0, [pc, #664]	; (801316c <tcp_receive+0x2b4>)
 8012ed4:	f006 f8ae 	bl	8019034 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	7d1b      	ldrb	r3, [r3, #20]
 8012edc:	2b03      	cmp	r3, #3
 8012ede:	d806      	bhi.n	8012eee <tcp_receive+0x36>
 8012ee0:	4ba0      	ldr	r3, [pc, #640]	; (8013164 <tcp_receive+0x2ac>)
 8012ee2:	f240 427c 	movw	r2, #1148	; 0x47c
 8012ee6:	49a2      	ldr	r1, [pc, #648]	; (8013170 <tcp_receive+0x2b8>)
 8012ee8:	48a0      	ldr	r0, [pc, #640]	; (801316c <tcp_receive+0x2b4>)
 8012eea:	f006 f8a3 	bl	8019034 <iprintf>

  if (flags & TCP_ACK) {
 8012eee:	4ba1      	ldr	r3, [pc, #644]	; (8013174 <tcp_receive+0x2bc>)
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	f003 0310 	and.w	r3, r3, #16
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f000 8263 	beq.w	80133c2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f02:	461a      	mov	r2, r3
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f08:	4413      	add	r3, r2
 8012f0a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f10:	4b99      	ldr	r3, [pc, #612]	; (8013178 <tcp_receive+0x2c0>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	1ad3      	subs	r3, r2, r3
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	db1b      	blt.n	8012f52 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f1e:	4b96      	ldr	r3, [pc, #600]	; (8013178 <tcp_receive+0x2c0>)
 8012f20:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d106      	bne.n	8012f34 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012f2a:	4b94      	ldr	r3, [pc, #592]	; (801317c <tcp_receive+0x2c4>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	1ad3      	subs	r3, r2, r3
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	db0e      	blt.n	8012f52 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012f38:	4b90      	ldr	r3, [pc, #576]	; (801317c <tcp_receive+0x2c4>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d125      	bne.n	8012f8c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012f40:	4b8f      	ldr	r3, [pc, #572]	; (8013180 <tcp_receive+0x2c8>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	89db      	ldrh	r3, [r3, #14]
 8012f46:	b29a      	uxth	r2, r3
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d91c      	bls.n	8012f8c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012f52:	4b8b      	ldr	r3, [pc, #556]	; (8013180 <tcp_receive+0x2c8>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	89db      	ldrh	r3, [r3, #14]
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d205      	bcs.n	8012f7c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012f7c:	4b7e      	ldr	r3, [pc, #504]	; (8013178 <tcp_receive+0x2c0>)
 8012f7e:	681a      	ldr	r2, [r3, #0]
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012f84:	4b7d      	ldr	r3, [pc, #500]	; (801317c <tcp_receive+0x2c4>)
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012f8c:	4b7b      	ldr	r3, [pc, #492]	; (801317c <tcp_receive+0x2c4>)
 8012f8e:	681a      	ldr	r2, [r3, #0]
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f94:	1ad3      	subs	r3, r2, r3
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	dc58      	bgt.n	801304c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012f9a:	4b7a      	ldr	r3, [pc, #488]	; (8013184 <tcp_receive+0x2cc>)
 8012f9c:	881b      	ldrh	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d14b      	bne.n	801303a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fa6:	687a      	ldr	r2, [r7, #4]
 8012fa8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012fac:	4413      	add	r3, r2
 8012fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d142      	bne.n	801303a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	db3d      	blt.n	801303a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012fc2:	4b6e      	ldr	r3, [pc, #440]	; (801317c <tcp_receive+0x2c4>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d137      	bne.n	801303a <tcp_receive+0x182>
              found_dupack = 1;
 8012fca:	2301      	movs	r3, #1
 8012fcc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012fd4:	2bff      	cmp	r3, #255	; 0xff
 8012fd6:	d007      	beq.n	8012fe8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012fde:	3301      	adds	r3, #1
 8012fe0:	b2da      	uxtb	r2, r3
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012fee:	2b03      	cmp	r3, #3
 8012ff0:	d91b      	bls.n	801302a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ffc:	4413      	add	r3, r2
 8012ffe:	b29a      	uxth	r2, r3
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013006:	429a      	cmp	r2, r3
 8013008:	d30a      	bcc.n	8013020 <tcp_receive+0x168>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013014:	4413      	add	r3, r2
 8013016:	b29a      	uxth	r2, r3
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801301e:	e004      	b.n	801302a <tcp_receive+0x172>
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013026:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013030:	2b02      	cmp	r3, #2
 8013032:	d902      	bls.n	801303a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f002 fb41 	bl	80156bc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801303a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801303c:	2b00      	cmp	r3, #0
 801303e:	f040 8160 	bne.w	8013302 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	2200      	movs	r2, #0
 8013046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801304a:	e15a      	b.n	8013302 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801304c:	4b4b      	ldr	r3, [pc, #300]	; (801317c <tcp_receive+0x2c4>)
 801304e:	681a      	ldr	r2, [r3, #0]
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013054:	1ad3      	subs	r3, r2, r3
 8013056:	3b01      	subs	r3, #1
 8013058:	2b00      	cmp	r3, #0
 801305a:	f2c0 814d 	blt.w	80132f8 <tcp_receive+0x440>
 801305e:	4b47      	ldr	r3, [pc, #284]	; (801317c <tcp_receive+0x2c4>)
 8013060:	681a      	ldr	r2, [r3, #0]
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013066:	1ad3      	subs	r3, r2, r3
 8013068:	2b00      	cmp	r3, #0
 801306a:	f300 8145 	bgt.w	80132f8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	8b5b      	ldrh	r3, [r3, #26]
 8013072:	f003 0304 	and.w	r3, r3, #4
 8013076:	2b00      	cmp	r3, #0
 8013078:	d010      	beq.n	801309c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	8b5b      	ldrh	r3, [r3, #26]
 801307e:	f023 0304 	bic.w	r3, r3, #4
 8013082:	b29a      	uxth	r2, r3
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2200      	movs	r2, #0
 8013098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2200      	movs	r2, #0
 80130a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80130aa:	10db      	asrs	r3, r3, #3
 80130ac:	b21b      	sxth	r3, r3
 80130ae:	b29a      	uxth	r2, r3
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80130b6:	b29b      	uxth	r3, r3
 80130b8:	4413      	add	r3, r2
 80130ba:	b29b      	uxth	r3, r3
 80130bc:	b21a      	sxth	r2, r3
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80130c4:	4b2d      	ldr	r3, [pc, #180]	; (801317c <tcp_receive+0x2c4>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	b29a      	uxth	r2, r3
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130ce:	b29b      	uxth	r3, r3
 80130d0:	1ad3      	subs	r3, r2, r3
 80130d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2200      	movs	r2, #0
 80130d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80130dc:	4b27      	ldr	r3, [pc, #156]	; (801317c <tcp_receive+0x2c4>)
 80130de:	681a      	ldr	r2, [r3, #0]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	7d1b      	ldrb	r3, [r3, #20]
 80130e8:	2b03      	cmp	r3, #3
 80130ea:	f240 8096 	bls.w	801321a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d244      	bcs.n	8013188 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	8b5b      	ldrh	r3, [r3, #26]
 8013102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013106:	2b00      	cmp	r3, #0
 8013108:	d001      	beq.n	801310e <tcp_receive+0x256>
 801310a:	2301      	movs	r3, #1
 801310c:	e000      	b.n	8013110 <tcp_receive+0x258>
 801310e:	2302      	movs	r3, #2
 8013110:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013114:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013118:	b29a      	uxth	r2, r3
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801311e:	fb12 f303 	smulbb	r3, r2, r3
 8013122:	b29b      	uxth	r3, r3
 8013124:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013126:	4293      	cmp	r3, r2
 8013128:	bf28      	it	cs
 801312a:	4613      	movcs	r3, r2
 801312c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013134:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013136:	4413      	add	r3, r2
 8013138:	b29a      	uxth	r2, r3
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013140:	429a      	cmp	r2, r3
 8013142:	d309      	bcc.n	8013158 <tcp_receive+0x2a0>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801314a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801314c:	4413      	add	r3, r2
 801314e:	b29a      	uxth	r2, r3
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013156:	e060      	b.n	801321a <tcp_receive+0x362>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801315e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013162:	e05a      	b.n	801321a <tcp_receive+0x362>
 8013164:	0801b3c4 	.word	0x0801b3c4
 8013168:	0801b6f4 	.word	0x0801b6f4
 801316c:	0801b410 	.word	0x0801b410
 8013170:	0801b710 	.word	0x0801b710
 8013174:	24004150 	.word	0x24004150
 8013178:	24004144 	.word	0x24004144
 801317c:	24004148 	.word	0x24004148
 8013180:	24004134 	.word	0x24004134
 8013184:	2400414e 	.word	0x2400414e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801318e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013190:	4413      	add	r3, r2
 8013192:	b29a      	uxth	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801319a:	429a      	cmp	r2, r3
 801319c:	d309      	bcc.n	80131b2 <tcp_receive+0x2fa>
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80131a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80131a6:	4413      	add	r3, r2
 80131a8:	b29a      	uxth	r2, r3
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80131b0:	e004      	b.n	80131bc <tcp_receive+0x304>
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d326      	bcc.n	801321a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80131d8:	1ad3      	subs	r3, r2, r3
 80131da:	b29a      	uxth	r2, r3
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131ec:	4413      	add	r3, r2
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d30a      	bcc.n	8013210 <tcp_receive+0x358>
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013204:	4413      	add	r3, r2
 8013206:	b29a      	uxth	r2, r3
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801320e:	e004      	b.n	801321a <tcp_receive+0x362>
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013216:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013222:	4a98      	ldr	r2, [pc, #608]	; (8013484 <tcp_receive+0x5cc>)
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f7ff fdcb 	bl	8012dc0 <tcp_free_acked_segments>
 801322a:	4602      	mov	r2, r0
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013238:	4a93      	ldr	r2, [pc, #588]	; (8013488 <tcp_receive+0x5d0>)
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f7ff fdc0 	bl	8012dc0 <tcp_free_acked_segments>
 8013240:	4602      	mov	r2, r0
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801324a:	2b00      	cmp	r3, #0
 801324c:	d104      	bne.n	8013258 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013254:	861a      	strh	r2, [r3, #48]	; 0x30
 8013256:	e002      	b.n	801325e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2200      	movs	r2, #0
 801325c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2200      	movs	r2, #0
 8013262:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013268:	2b00      	cmp	r3, #0
 801326a:	d103      	bne.n	8013274 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2200      	movs	r2, #0
 8013270:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801327a:	4b84      	ldr	r3, [pc, #528]	; (801348c <tcp_receive+0x5d4>)
 801327c:	881b      	ldrh	r3, [r3, #0]
 801327e:	4413      	add	r3, r2
 8013280:	b29a      	uxth	r2, r3
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	8b5b      	ldrh	r3, [r3, #26]
 801328c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013290:	2b00      	cmp	r3, #0
 8013292:	d035      	beq.n	8013300 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013298:	2b00      	cmp	r3, #0
 801329a:	d118      	bne.n	80132ce <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d00c      	beq.n	80132be <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132ac:	68db      	ldr	r3, [r3, #12]
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7fa fdd2 	bl	800de5a <lwip_htonl>
 80132b6:	4603      	mov	r3, r0
 80132b8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	dc20      	bgt.n	8013300 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	8b5b      	ldrh	r3, [r3, #26]
 80132c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80132c6:	b29a      	uxth	r2, r3
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80132cc:	e018      	b.n	8013300 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132d6:	68db      	ldr	r3, [r3, #12]
 80132d8:	685b      	ldr	r3, [r3, #4]
 80132da:	4618      	mov	r0, r3
 80132dc:	f7fa fdbd 	bl	800de5a <lwip_htonl>
 80132e0:	4603      	mov	r3, r0
 80132e2:	1ae3      	subs	r3, r4, r3
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	dc0b      	bgt.n	8013300 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	8b5b      	ldrh	r3, [r3, #26]
 80132ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80132f0:	b29a      	uxth	r2, r3
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80132f6:	e003      	b.n	8013300 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f002 fbcd 	bl	8015a98 <tcp_send_empty_ack>
 80132fe:	e000      	b.n	8013302 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013300:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013306:	2b00      	cmp	r3, #0
 8013308:	d05b      	beq.n	80133c2 <tcp_receive+0x50a>
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801330e:	4b60      	ldr	r3, [pc, #384]	; (8013490 <tcp_receive+0x5d8>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	1ad3      	subs	r3, r2, r3
 8013314:	2b00      	cmp	r3, #0
 8013316:	da54      	bge.n	80133c2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013318:	4b5e      	ldr	r3, [pc, #376]	; (8013494 <tcp_receive+0x5dc>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	b29a      	uxth	r2, r3
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013322:	b29b      	uxth	r3, r3
 8013324:	1ad3      	subs	r3, r2, r3
 8013326:	b29b      	uxth	r3, r3
 8013328:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801332c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013336:	10db      	asrs	r3, r3, #3
 8013338:	b21b      	sxth	r3, r3
 801333a:	b29b      	uxth	r3, r3
 801333c:	1ad3      	subs	r3, r2, r3
 801333e:	b29b      	uxth	r3, r3
 8013340:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801334a:	b29a      	uxth	r2, r3
 801334c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013350:	4413      	add	r3, r2
 8013352:	b29b      	uxth	r3, r3
 8013354:	b21a      	sxth	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801335a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801335e:	2b00      	cmp	r3, #0
 8013360:	da05      	bge.n	801336e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8013362:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013366:	425b      	negs	r3, r3
 8013368:	b29b      	uxth	r3, r3
 801336a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801336e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013378:	109b      	asrs	r3, r3, #2
 801337a:	b21b      	sxth	r3, r3
 801337c:	b29b      	uxth	r3, r3
 801337e:	1ad3      	subs	r3, r2, r3
 8013380:	b29b      	uxth	r3, r3
 8013382:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801338c:	b29a      	uxth	r2, r3
 801338e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013392:	4413      	add	r3, r2
 8013394:	b29b      	uxth	r3, r3
 8013396:	b21a      	sxth	r2, r3
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80133a2:	10db      	asrs	r3, r3, #3
 80133a4:	b21b      	sxth	r3, r3
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	4413      	add	r3, r2
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	b21a      	sxth	r2, r3
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2200      	movs	r2, #0
 80133c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80133c2:	4b35      	ldr	r3, [pc, #212]	; (8013498 <tcp_receive+0x5e0>)
 80133c4:	881b      	ldrh	r3, [r3, #0]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	f000 84e1 	beq.w	8013d8e <tcp_receive+0xed6>
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	7d1b      	ldrb	r3, [r3, #20]
 80133d0:	2b06      	cmp	r3, #6
 80133d2:	f200 84dc 	bhi.w	8013d8e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133da:	4b30      	ldr	r3, [pc, #192]	; (801349c <tcp_receive+0x5e4>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	1ad3      	subs	r3, r2, r3
 80133e0:	3b01      	subs	r3, #1
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	f2c0 808e 	blt.w	8013504 <tcp_receive+0x64c>
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133ec:	4b2a      	ldr	r3, [pc, #168]	; (8013498 <tcp_receive+0x5e0>)
 80133ee:	881b      	ldrh	r3, [r3, #0]
 80133f0:	4619      	mov	r1, r3
 80133f2:	4b2a      	ldr	r3, [pc, #168]	; (801349c <tcp_receive+0x5e4>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	440b      	add	r3, r1
 80133f8:	1ad3      	subs	r3, r2, r3
 80133fa:	3301      	adds	r3, #1
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	f300 8081 	bgt.w	8013504 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013402:	4b27      	ldr	r3, [pc, #156]	; (80134a0 <tcp_receive+0x5e8>)
 8013404:	685b      	ldr	r3, [r3, #4]
 8013406:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801340c:	4b23      	ldr	r3, [pc, #140]	; (801349c <tcp_receive+0x5e4>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	1ad3      	subs	r3, r2, r3
 8013412:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013414:	4b22      	ldr	r3, [pc, #136]	; (80134a0 <tcp_receive+0x5e8>)
 8013416:	685b      	ldr	r3, [r3, #4]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d106      	bne.n	801342a <tcp_receive+0x572>
 801341c:	4b21      	ldr	r3, [pc, #132]	; (80134a4 <tcp_receive+0x5ec>)
 801341e:	f240 5294 	movw	r2, #1428	; 0x594
 8013422:	4921      	ldr	r1, [pc, #132]	; (80134a8 <tcp_receive+0x5f0>)
 8013424:	4821      	ldr	r0, [pc, #132]	; (80134ac <tcp_receive+0x5f4>)
 8013426:	f005 fe05 	bl	8019034 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013430:	4293      	cmp	r3, r2
 8013432:	d906      	bls.n	8013442 <tcp_receive+0x58a>
 8013434:	4b1b      	ldr	r3, [pc, #108]	; (80134a4 <tcp_receive+0x5ec>)
 8013436:	f240 5295 	movw	r2, #1429	; 0x595
 801343a:	491d      	ldr	r1, [pc, #116]	; (80134b0 <tcp_receive+0x5f8>)
 801343c:	481b      	ldr	r0, [pc, #108]	; (80134ac <tcp_receive+0x5f4>)
 801343e:	f005 fdf9 	bl	8019034 <iprintf>
      off = (u16_t)off32;
 8013442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013444:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013448:	4b15      	ldr	r3, [pc, #84]	; (80134a0 <tcp_receive+0x5e8>)
 801344a:	685b      	ldr	r3, [r3, #4]
 801344c:	891b      	ldrh	r3, [r3, #8]
 801344e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013452:	429a      	cmp	r2, r3
 8013454:	d906      	bls.n	8013464 <tcp_receive+0x5ac>
 8013456:	4b13      	ldr	r3, [pc, #76]	; (80134a4 <tcp_receive+0x5ec>)
 8013458:	f240 5297 	movw	r2, #1431	; 0x597
 801345c:	4915      	ldr	r1, [pc, #84]	; (80134b4 <tcp_receive+0x5fc>)
 801345e:	4813      	ldr	r0, [pc, #76]	; (80134ac <tcp_receive+0x5f4>)
 8013460:	f005 fde8 	bl	8019034 <iprintf>
      inseg.len -= off;
 8013464:	4b0e      	ldr	r3, [pc, #56]	; (80134a0 <tcp_receive+0x5e8>)
 8013466:	891a      	ldrh	r2, [r3, #8]
 8013468:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801346c:	1ad3      	subs	r3, r2, r3
 801346e:	b29a      	uxth	r2, r3
 8013470:	4b0b      	ldr	r3, [pc, #44]	; (80134a0 <tcp_receive+0x5e8>)
 8013472:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013474:	4b0a      	ldr	r3, [pc, #40]	; (80134a0 <tcp_receive+0x5e8>)
 8013476:	685b      	ldr	r3, [r3, #4]
 8013478:	891a      	ldrh	r2, [r3, #8]
 801347a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801347e:	1ad3      	subs	r3, r2, r3
 8013480:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013482:	e029      	b.n	80134d8 <tcp_receive+0x620>
 8013484:	0801b72c 	.word	0x0801b72c
 8013488:	0801b734 	.word	0x0801b734
 801348c:	2400414c 	.word	0x2400414c
 8013490:	24004148 	.word	0x24004148
 8013494:	24007860 	.word	0x24007860
 8013498:	2400414e 	.word	0x2400414e
 801349c:	24004144 	.word	0x24004144
 80134a0:	24004124 	.word	0x24004124
 80134a4:	0801b3c4 	.word	0x0801b3c4
 80134a8:	0801b73c 	.word	0x0801b73c
 80134ac:	0801b410 	.word	0x0801b410
 80134b0:	0801b74c 	.word	0x0801b74c
 80134b4:	0801b75c 	.word	0x0801b75c
        off -= p->len;
 80134b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134ba:	895b      	ldrh	r3, [r3, #10]
 80134bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80134c0:	1ad3      	subs	r3, r2, r3
 80134c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80134c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80134ca:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80134cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134ce:	2200      	movs	r2, #0
 80134d0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80134d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80134d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134da:	895b      	ldrh	r3, [r3, #10]
 80134dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d8e9      	bhi.n	80134b8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80134e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134e8:	4619      	mov	r1, r3
 80134ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80134ec:	f7fc f8c4 	bl	800f678 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134f4:	4a91      	ldr	r2, [pc, #580]	; (801373c <tcp_receive+0x884>)
 80134f6:	6013      	str	r3, [r2, #0]
 80134f8:	4b91      	ldr	r3, [pc, #580]	; (8013740 <tcp_receive+0x888>)
 80134fa:	68db      	ldr	r3, [r3, #12]
 80134fc:	4a8f      	ldr	r2, [pc, #572]	; (801373c <tcp_receive+0x884>)
 80134fe:	6812      	ldr	r2, [r2, #0]
 8013500:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013502:	e00d      	b.n	8013520 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013504:	4b8d      	ldr	r3, [pc, #564]	; (801373c <tcp_receive+0x884>)
 8013506:	681a      	ldr	r2, [r3, #0]
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801350c:	1ad3      	subs	r3, r2, r3
 801350e:	2b00      	cmp	r3, #0
 8013510:	da06      	bge.n	8013520 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	8b5b      	ldrh	r3, [r3, #26]
 8013516:	f043 0302 	orr.w	r3, r3, #2
 801351a:	b29a      	uxth	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013520:	4b86      	ldr	r3, [pc, #536]	; (801373c <tcp_receive+0x884>)
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013528:	1ad3      	subs	r3, r2, r3
 801352a:	2b00      	cmp	r3, #0
 801352c:	f2c0 842a 	blt.w	8013d84 <tcp_receive+0xecc>
 8013530:	4b82      	ldr	r3, [pc, #520]	; (801373c <tcp_receive+0x884>)
 8013532:	681a      	ldr	r2, [r3, #0]
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013538:	6879      	ldr	r1, [r7, #4]
 801353a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801353c:	440b      	add	r3, r1
 801353e:	1ad3      	subs	r3, r2, r3
 8013540:	3301      	adds	r3, #1
 8013542:	2b00      	cmp	r3, #0
 8013544:	f300 841e 	bgt.w	8013d84 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801354c:	4b7b      	ldr	r3, [pc, #492]	; (801373c <tcp_receive+0x884>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	429a      	cmp	r2, r3
 8013552:	f040 829a 	bne.w	8013a8a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013556:	4b7a      	ldr	r3, [pc, #488]	; (8013740 <tcp_receive+0x888>)
 8013558:	891c      	ldrh	r4, [r3, #8]
 801355a:	4b79      	ldr	r3, [pc, #484]	; (8013740 <tcp_receive+0x888>)
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	899b      	ldrh	r3, [r3, #12]
 8013560:	b29b      	uxth	r3, r3
 8013562:	4618      	mov	r0, r3
 8013564:	f7fa fc64 	bl	800de30 <lwip_htons>
 8013568:	4603      	mov	r3, r0
 801356a:	b2db      	uxtb	r3, r3
 801356c:	f003 0303 	and.w	r3, r3, #3
 8013570:	2b00      	cmp	r3, #0
 8013572:	d001      	beq.n	8013578 <tcp_receive+0x6c0>
 8013574:	2301      	movs	r3, #1
 8013576:	e000      	b.n	801357a <tcp_receive+0x6c2>
 8013578:	2300      	movs	r3, #0
 801357a:	4423      	add	r3, r4
 801357c:	b29a      	uxth	r2, r3
 801357e:	4b71      	ldr	r3, [pc, #452]	; (8013744 <tcp_receive+0x88c>)
 8013580:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013586:	4b6f      	ldr	r3, [pc, #444]	; (8013744 <tcp_receive+0x88c>)
 8013588:	881b      	ldrh	r3, [r3, #0]
 801358a:	429a      	cmp	r2, r3
 801358c:	d275      	bcs.n	801367a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801358e:	4b6c      	ldr	r3, [pc, #432]	; (8013740 <tcp_receive+0x888>)
 8013590:	68db      	ldr	r3, [r3, #12]
 8013592:	899b      	ldrh	r3, [r3, #12]
 8013594:	b29b      	uxth	r3, r3
 8013596:	4618      	mov	r0, r3
 8013598:	f7fa fc4a 	bl	800de30 <lwip_htons>
 801359c:	4603      	mov	r3, r0
 801359e:	b2db      	uxtb	r3, r3
 80135a0:	f003 0301 	and.w	r3, r3, #1
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d01f      	beq.n	80135e8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80135a8:	4b65      	ldr	r3, [pc, #404]	; (8013740 <tcp_receive+0x888>)
 80135aa:	68db      	ldr	r3, [r3, #12]
 80135ac:	899b      	ldrh	r3, [r3, #12]
 80135ae:	b29b      	uxth	r3, r3
 80135b0:	b21b      	sxth	r3, r3
 80135b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80135b6:	b21c      	sxth	r4, r3
 80135b8:	4b61      	ldr	r3, [pc, #388]	; (8013740 <tcp_receive+0x888>)
 80135ba:	68db      	ldr	r3, [r3, #12]
 80135bc:	899b      	ldrh	r3, [r3, #12]
 80135be:	b29b      	uxth	r3, r3
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7fa fc35 	bl	800de30 <lwip_htons>
 80135c6:	4603      	mov	r3, r0
 80135c8:	b2db      	uxtb	r3, r3
 80135ca:	b29b      	uxth	r3, r3
 80135cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80135d0:	b29b      	uxth	r3, r3
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7fa fc2c 	bl	800de30 <lwip_htons>
 80135d8:	4603      	mov	r3, r0
 80135da:	b21b      	sxth	r3, r3
 80135dc:	4323      	orrs	r3, r4
 80135de:	b21a      	sxth	r2, r3
 80135e0:	4b57      	ldr	r3, [pc, #348]	; (8013740 <tcp_receive+0x888>)
 80135e2:	68db      	ldr	r3, [r3, #12]
 80135e4:	b292      	uxth	r2, r2
 80135e6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80135ec:	4b54      	ldr	r3, [pc, #336]	; (8013740 <tcp_receive+0x888>)
 80135ee:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80135f0:	4b53      	ldr	r3, [pc, #332]	; (8013740 <tcp_receive+0x888>)
 80135f2:	68db      	ldr	r3, [r3, #12]
 80135f4:	899b      	ldrh	r3, [r3, #12]
 80135f6:	b29b      	uxth	r3, r3
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7fa fc19 	bl	800de30 <lwip_htons>
 80135fe:	4603      	mov	r3, r0
 8013600:	b2db      	uxtb	r3, r3
 8013602:	f003 0302 	and.w	r3, r3, #2
 8013606:	2b00      	cmp	r3, #0
 8013608:	d005      	beq.n	8013616 <tcp_receive+0x75e>
            inseg.len -= 1;
 801360a:	4b4d      	ldr	r3, [pc, #308]	; (8013740 <tcp_receive+0x888>)
 801360c:	891b      	ldrh	r3, [r3, #8]
 801360e:	3b01      	subs	r3, #1
 8013610:	b29a      	uxth	r2, r3
 8013612:	4b4b      	ldr	r3, [pc, #300]	; (8013740 <tcp_receive+0x888>)
 8013614:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013616:	4b4a      	ldr	r3, [pc, #296]	; (8013740 <tcp_receive+0x888>)
 8013618:	685b      	ldr	r3, [r3, #4]
 801361a:	4a49      	ldr	r2, [pc, #292]	; (8013740 <tcp_receive+0x888>)
 801361c:	8912      	ldrh	r2, [r2, #8]
 801361e:	4611      	mov	r1, r2
 8013620:	4618      	mov	r0, r3
 8013622:	f7fb ff29 	bl	800f478 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013626:	4b46      	ldr	r3, [pc, #280]	; (8013740 <tcp_receive+0x888>)
 8013628:	891c      	ldrh	r4, [r3, #8]
 801362a:	4b45      	ldr	r3, [pc, #276]	; (8013740 <tcp_receive+0x888>)
 801362c:	68db      	ldr	r3, [r3, #12]
 801362e:	899b      	ldrh	r3, [r3, #12]
 8013630:	b29b      	uxth	r3, r3
 8013632:	4618      	mov	r0, r3
 8013634:	f7fa fbfc 	bl	800de30 <lwip_htons>
 8013638:	4603      	mov	r3, r0
 801363a:	b2db      	uxtb	r3, r3
 801363c:	f003 0303 	and.w	r3, r3, #3
 8013640:	2b00      	cmp	r3, #0
 8013642:	d001      	beq.n	8013648 <tcp_receive+0x790>
 8013644:	2301      	movs	r3, #1
 8013646:	e000      	b.n	801364a <tcp_receive+0x792>
 8013648:	2300      	movs	r3, #0
 801364a:	4423      	add	r3, r4
 801364c:	b29a      	uxth	r2, r3
 801364e:	4b3d      	ldr	r3, [pc, #244]	; (8013744 <tcp_receive+0x88c>)
 8013650:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013652:	4b3c      	ldr	r3, [pc, #240]	; (8013744 <tcp_receive+0x88c>)
 8013654:	881b      	ldrh	r3, [r3, #0]
 8013656:	461a      	mov	r2, r3
 8013658:	4b38      	ldr	r3, [pc, #224]	; (801373c <tcp_receive+0x884>)
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	441a      	add	r2, r3
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013662:	6879      	ldr	r1, [r7, #4]
 8013664:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013666:	440b      	add	r3, r1
 8013668:	429a      	cmp	r2, r3
 801366a:	d006      	beq.n	801367a <tcp_receive+0x7c2>
 801366c:	4b36      	ldr	r3, [pc, #216]	; (8013748 <tcp_receive+0x890>)
 801366e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013672:	4936      	ldr	r1, [pc, #216]	; (801374c <tcp_receive+0x894>)
 8013674:	4836      	ldr	r0, [pc, #216]	; (8013750 <tcp_receive+0x898>)
 8013676:	f005 fcdd 	bl	8019034 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801367e:	2b00      	cmp	r3, #0
 8013680:	f000 80e7 	beq.w	8013852 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013684:	4b2e      	ldr	r3, [pc, #184]	; (8013740 <tcp_receive+0x888>)
 8013686:	68db      	ldr	r3, [r3, #12]
 8013688:	899b      	ldrh	r3, [r3, #12]
 801368a:	b29b      	uxth	r3, r3
 801368c:	4618      	mov	r0, r3
 801368e:	f7fa fbcf 	bl	800de30 <lwip_htons>
 8013692:	4603      	mov	r3, r0
 8013694:	b2db      	uxtb	r3, r3
 8013696:	f003 0301 	and.w	r3, r3, #1
 801369a:	2b00      	cmp	r3, #0
 801369c:	d010      	beq.n	80136c0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801369e:	e00a      	b.n	80136b6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136a4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136aa:	681a      	ldr	r2, [r3, #0]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80136b0:	68f8      	ldr	r0, [r7, #12]
 80136b2:	f7fd fcb0 	bl	8011016 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d1f0      	bne.n	80136a0 <tcp_receive+0x7e8>
 80136be:	e0c8      	b.n	8013852 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136c4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80136c6:	e052      	b.n	801376e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80136c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	899b      	ldrh	r3, [r3, #12]
 80136ce:	b29b      	uxth	r3, r3
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7fa fbad 	bl	800de30 <lwip_htons>
 80136d6:	4603      	mov	r3, r0
 80136d8:	b2db      	uxtb	r3, r3
 80136da:	f003 0301 	and.w	r3, r3, #1
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d03d      	beq.n	801375e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80136e2:	4b17      	ldr	r3, [pc, #92]	; (8013740 <tcp_receive+0x888>)
 80136e4:	68db      	ldr	r3, [r3, #12]
 80136e6:	899b      	ldrh	r3, [r3, #12]
 80136e8:	b29b      	uxth	r3, r3
 80136ea:	4618      	mov	r0, r3
 80136ec:	f7fa fba0 	bl	800de30 <lwip_htons>
 80136f0:	4603      	mov	r3, r0
 80136f2:	b2db      	uxtb	r3, r3
 80136f4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d130      	bne.n	801375e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80136fc:	4b10      	ldr	r3, [pc, #64]	; (8013740 <tcp_receive+0x888>)
 80136fe:	68db      	ldr	r3, [r3, #12]
 8013700:	899b      	ldrh	r3, [r3, #12]
 8013702:	b29c      	uxth	r4, r3
 8013704:	2001      	movs	r0, #1
 8013706:	f7fa fb93 	bl	800de30 <lwip_htons>
 801370a:	4603      	mov	r3, r0
 801370c:	461a      	mov	r2, r3
 801370e:	4b0c      	ldr	r3, [pc, #48]	; (8013740 <tcp_receive+0x888>)
 8013710:	68db      	ldr	r3, [r3, #12]
 8013712:	4322      	orrs	r2, r4
 8013714:	b292      	uxth	r2, r2
 8013716:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013718:	4b09      	ldr	r3, [pc, #36]	; (8013740 <tcp_receive+0x888>)
 801371a:	891c      	ldrh	r4, [r3, #8]
 801371c:	4b08      	ldr	r3, [pc, #32]	; (8013740 <tcp_receive+0x888>)
 801371e:	68db      	ldr	r3, [r3, #12]
 8013720:	899b      	ldrh	r3, [r3, #12]
 8013722:	b29b      	uxth	r3, r3
 8013724:	4618      	mov	r0, r3
 8013726:	f7fa fb83 	bl	800de30 <lwip_htons>
 801372a:	4603      	mov	r3, r0
 801372c:	b2db      	uxtb	r3, r3
 801372e:	f003 0303 	and.w	r3, r3, #3
 8013732:	2b00      	cmp	r3, #0
 8013734:	d00e      	beq.n	8013754 <tcp_receive+0x89c>
 8013736:	2301      	movs	r3, #1
 8013738:	e00d      	b.n	8013756 <tcp_receive+0x89e>
 801373a:	bf00      	nop
 801373c:	24004144 	.word	0x24004144
 8013740:	24004124 	.word	0x24004124
 8013744:	2400414e 	.word	0x2400414e
 8013748:	0801b3c4 	.word	0x0801b3c4
 801374c:	0801b76c 	.word	0x0801b76c
 8013750:	0801b410 	.word	0x0801b410
 8013754:	2300      	movs	r3, #0
 8013756:	4423      	add	r3, r4
 8013758:	b29a      	uxth	r2, r3
 801375a:	4b98      	ldr	r3, [pc, #608]	; (80139bc <tcp_receive+0xb04>)
 801375c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013760:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013768:	6938      	ldr	r0, [r7, #16]
 801376a:	f7fd fc54 	bl	8011016 <tcp_seg_free>
            while (next &&
 801376e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013770:	2b00      	cmp	r3, #0
 8013772:	d00e      	beq.n	8013792 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013774:	4b91      	ldr	r3, [pc, #580]	; (80139bc <tcp_receive+0xb04>)
 8013776:	881b      	ldrh	r3, [r3, #0]
 8013778:	461a      	mov	r2, r3
 801377a:	4b91      	ldr	r3, [pc, #580]	; (80139c0 <tcp_receive+0xb08>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	441a      	add	r2, r3
 8013780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013782:	68db      	ldr	r3, [r3, #12]
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013788:	8909      	ldrh	r1, [r1, #8]
 801378a:	440b      	add	r3, r1
 801378c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801378e:	2b00      	cmp	r3, #0
 8013790:	da9a      	bge.n	80136c8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013794:	2b00      	cmp	r3, #0
 8013796:	d059      	beq.n	801384c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013798:	4b88      	ldr	r3, [pc, #544]	; (80139bc <tcp_receive+0xb04>)
 801379a:	881b      	ldrh	r3, [r3, #0]
 801379c:	461a      	mov	r2, r3
 801379e:	4b88      	ldr	r3, [pc, #544]	; (80139c0 <tcp_receive+0xb08>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	441a      	add	r2, r3
 80137a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	685b      	ldr	r3, [r3, #4]
 80137aa:	1ad3      	subs	r3, r2, r3
            if (next &&
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	dd4d      	ble.n	801384c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80137b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	b29a      	uxth	r2, r3
 80137b8:	4b81      	ldr	r3, [pc, #516]	; (80139c0 <tcp_receive+0xb08>)
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	b29b      	uxth	r3, r3
 80137be:	1ad3      	subs	r3, r2, r3
 80137c0:	b29a      	uxth	r2, r3
 80137c2:	4b80      	ldr	r3, [pc, #512]	; (80139c4 <tcp_receive+0xb0c>)
 80137c4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80137c6:	4b7f      	ldr	r3, [pc, #508]	; (80139c4 <tcp_receive+0xb0c>)
 80137c8:	68db      	ldr	r3, [r3, #12]
 80137ca:	899b      	ldrh	r3, [r3, #12]
 80137cc:	b29b      	uxth	r3, r3
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7fa fb2e 	bl	800de30 <lwip_htons>
 80137d4:	4603      	mov	r3, r0
 80137d6:	b2db      	uxtb	r3, r3
 80137d8:	f003 0302 	and.w	r3, r3, #2
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d005      	beq.n	80137ec <tcp_receive+0x934>
                inseg.len -= 1;
 80137e0:	4b78      	ldr	r3, [pc, #480]	; (80139c4 <tcp_receive+0xb0c>)
 80137e2:	891b      	ldrh	r3, [r3, #8]
 80137e4:	3b01      	subs	r3, #1
 80137e6:	b29a      	uxth	r2, r3
 80137e8:	4b76      	ldr	r3, [pc, #472]	; (80139c4 <tcp_receive+0xb0c>)
 80137ea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80137ec:	4b75      	ldr	r3, [pc, #468]	; (80139c4 <tcp_receive+0xb0c>)
 80137ee:	685b      	ldr	r3, [r3, #4]
 80137f0:	4a74      	ldr	r2, [pc, #464]	; (80139c4 <tcp_receive+0xb0c>)
 80137f2:	8912      	ldrh	r2, [r2, #8]
 80137f4:	4611      	mov	r1, r2
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7fb fe3e 	bl	800f478 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80137fc:	4b71      	ldr	r3, [pc, #452]	; (80139c4 <tcp_receive+0xb0c>)
 80137fe:	891c      	ldrh	r4, [r3, #8]
 8013800:	4b70      	ldr	r3, [pc, #448]	; (80139c4 <tcp_receive+0xb0c>)
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	899b      	ldrh	r3, [r3, #12]
 8013806:	b29b      	uxth	r3, r3
 8013808:	4618      	mov	r0, r3
 801380a:	f7fa fb11 	bl	800de30 <lwip_htons>
 801380e:	4603      	mov	r3, r0
 8013810:	b2db      	uxtb	r3, r3
 8013812:	f003 0303 	and.w	r3, r3, #3
 8013816:	2b00      	cmp	r3, #0
 8013818:	d001      	beq.n	801381e <tcp_receive+0x966>
 801381a:	2301      	movs	r3, #1
 801381c:	e000      	b.n	8013820 <tcp_receive+0x968>
 801381e:	2300      	movs	r3, #0
 8013820:	4423      	add	r3, r4
 8013822:	b29a      	uxth	r2, r3
 8013824:	4b65      	ldr	r3, [pc, #404]	; (80139bc <tcp_receive+0xb04>)
 8013826:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013828:	4b64      	ldr	r3, [pc, #400]	; (80139bc <tcp_receive+0xb04>)
 801382a:	881b      	ldrh	r3, [r3, #0]
 801382c:	461a      	mov	r2, r3
 801382e:	4b64      	ldr	r3, [pc, #400]	; (80139c0 <tcp_receive+0xb08>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	441a      	add	r2, r3
 8013834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013836:	68db      	ldr	r3, [r3, #12]
 8013838:	685b      	ldr	r3, [r3, #4]
 801383a:	429a      	cmp	r2, r3
 801383c:	d006      	beq.n	801384c <tcp_receive+0x994>
 801383e:	4b62      	ldr	r3, [pc, #392]	; (80139c8 <tcp_receive+0xb10>)
 8013840:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013844:	4961      	ldr	r1, [pc, #388]	; (80139cc <tcp_receive+0xb14>)
 8013846:	4862      	ldr	r0, [pc, #392]	; (80139d0 <tcp_receive+0xb18>)
 8013848:	f005 fbf4 	bl	8019034 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013850:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013852:	4b5a      	ldr	r3, [pc, #360]	; (80139bc <tcp_receive+0xb04>)
 8013854:	881b      	ldrh	r3, [r3, #0]
 8013856:	461a      	mov	r2, r3
 8013858:	4b59      	ldr	r3, [pc, #356]	; (80139c0 <tcp_receive+0xb08>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	441a      	add	r2, r3
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013866:	4b55      	ldr	r3, [pc, #340]	; (80139bc <tcp_receive+0xb04>)
 8013868:	881b      	ldrh	r3, [r3, #0]
 801386a:	429a      	cmp	r2, r3
 801386c:	d206      	bcs.n	801387c <tcp_receive+0x9c4>
 801386e:	4b56      	ldr	r3, [pc, #344]	; (80139c8 <tcp_receive+0xb10>)
 8013870:	f240 6207 	movw	r2, #1543	; 0x607
 8013874:	4957      	ldr	r1, [pc, #348]	; (80139d4 <tcp_receive+0xb1c>)
 8013876:	4856      	ldr	r0, [pc, #344]	; (80139d0 <tcp_receive+0xb18>)
 8013878:	f005 fbdc 	bl	8019034 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013880:	4b4e      	ldr	r3, [pc, #312]	; (80139bc <tcp_receive+0xb04>)
 8013882:	881b      	ldrh	r3, [r3, #0]
 8013884:	1ad3      	subs	r3, r2, r3
 8013886:	b29a      	uxth	r2, r3
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f7fc fe9d 	bl	80105cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013892:	4b4c      	ldr	r3, [pc, #304]	; (80139c4 <tcp_receive+0xb0c>)
 8013894:	685b      	ldr	r3, [r3, #4]
 8013896:	891b      	ldrh	r3, [r3, #8]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d006      	beq.n	80138aa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801389c:	4b49      	ldr	r3, [pc, #292]	; (80139c4 <tcp_receive+0xb0c>)
 801389e:	685b      	ldr	r3, [r3, #4]
 80138a0:	4a4d      	ldr	r2, [pc, #308]	; (80139d8 <tcp_receive+0xb20>)
 80138a2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80138a4:	4b47      	ldr	r3, [pc, #284]	; (80139c4 <tcp_receive+0xb0c>)
 80138a6:	2200      	movs	r2, #0
 80138a8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80138aa:	4b46      	ldr	r3, [pc, #280]	; (80139c4 <tcp_receive+0xb0c>)
 80138ac:	68db      	ldr	r3, [r3, #12]
 80138ae:	899b      	ldrh	r3, [r3, #12]
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7fa fabc 	bl	800de30 <lwip_htons>
 80138b8:	4603      	mov	r3, r0
 80138ba:	b2db      	uxtb	r3, r3
 80138bc:	f003 0301 	and.w	r3, r3, #1
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	f000 80b8 	beq.w	8013a36 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80138c6:	4b45      	ldr	r3, [pc, #276]	; (80139dc <tcp_receive+0xb24>)
 80138c8:	781b      	ldrb	r3, [r3, #0]
 80138ca:	f043 0320 	orr.w	r3, r3, #32
 80138ce:	b2da      	uxtb	r2, r3
 80138d0:	4b42      	ldr	r3, [pc, #264]	; (80139dc <tcp_receive+0xb24>)
 80138d2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80138d4:	e0af      	b.n	8013a36 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80138da:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80138e0:	68db      	ldr	r3, [r3, #12]
 80138e2:	685b      	ldr	r3, [r3, #4]
 80138e4:	4a36      	ldr	r2, [pc, #216]	; (80139c0 <tcp_receive+0xb08>)
 80138e6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	891b      	ldrh	r3, [r3, #8]
 80138ec:	461c      	mov	r4, r3
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	68db      	ldr	r3, [r3, #12]
 80138f2:	899b      	ldrh	r3, [r3, #12]
 80138f4:	b29b      	uxth	r3, r3
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7fa fa9a 	bl	800de30 <lwip_htons>
 80138fc:	4603      	mov	r3, r0
 80138fe:	b2db      	uxtb	r3, r3
 8013900:	f003 0303 	and.w	r3, r3, #3
 8013904:	2b00      	cmp	r3, #0
 8013906:	d001      	beq.n	801390c <tcp_receive+0xa54>
 8013908:	2301      	movs	r3, #1
 801390a:	e000      	b.n	801390e <tcp_receive+0xa56>
 801390c:	2300      	movs	r3, #0
 801390e:	191a      	adds	r2, r3, r4
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013914:	441a      	add	r2, r3
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801391e:	461c      	mov	r4, r3
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	891b      	ldrh	r3, [r3, #8]
 8013924:	461d      	mov	r5, r3
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	68db      	ldr	r3, [r3, #12]
 801392a:	899b      	ldrh	r3, [r3, #12]
 801392c:	b29b      	uxth	r3, r3
 801392e:	4618      	mov	r0, r3
 8013930:	f7fa fa7e 	bl	800de30 <lwip_htons>
 8013934:	4603      	mov	r3, r0
 8013936:	b2db      	uxtb	r3, r3
 8013938:	f003 0303 	and.w	r3, r3, #3
 801393c:	2b00      	cmp	r3, #0
 801393e:	d001      	beq.n	8013944 <tcp_receive+0xa8c>
 8013940:	2301      	movs	r3, #1
 8013942:	e000      	b.n	8013946 <tcp_receive+0xa8e>
 8013944:	2300      	movs	r3, #0
 8013946:	442b      	add	r3, r5
 8013948:	429c      	cmp	r4, r3
 801394a:	d206      	bcs.n	801395a <tcp_receive+0xaa2>
 801394c:	4b1e      	ldr	r3, [pc, #120]	; (80139c8 <tcp_receive+0xb10>)
 801394e:	f240 622b 	movw	r2, #1579	; 0x62b
 8013952:	4923      	ldr	r1, [pc, #140]	; (80139e0 <tcp_receive+0xb28>)
 8013954:	481e      	ldr	r0, [pc, #120]	; (80139d0 <tcp_receive+0xb18>)
 8013956:	f005 fb6d 	bl	8019034 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801395a:	68bb      	ldr	r3, [r7, #8]
 801395c:	891b      	ldrh	r3, [r3, #8]
 801395e:	461c      	mov	r4, r3
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	68db      	ldr	r3, [r3, #12]
 8013964:	899b      	ldrh	r3, [r3, #12]
 8013966:	b29b      	uxth	r3, r3
 8013968:	4618      	mov	r0, r3
 801396a:	f7fa fa61 	bl	800de30 <lwip_htons>
 801396e:	4603      	mov	r3, r0
 8013970:	b2db      	uxtb	r3, r3
 8013972:	f003 0303 	and.w	r3, r3, #3
 8013976:	2b00      	cmp	r3, #0
 8013978:	d001      	beq.n	801397e <tcp_receive+0xac6>
 801397a:	2301      	movs	r3, #1
 801397c:	e000      	b.n	8013980 <tcp_receive+0xac8>
 801397e:	2300      	movs	r3, #0
 8013980:	1919      	adds	r1, r3, r4
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013986:	b28b      	uxth	r3, r1
 8013988:	1ad3      	subs	r3, r2, r3
 801398a:	b29a      	uxth	r2, r3
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f7fc fe1b 	bl	80105cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	685b      	ldr	r3, [r3, #4]
 801399a:	891b      	ldrh	r3, [r3, #8]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d028      	beq.n	80139f2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80139a0:	4b0d      	ldr	r3, [pc, #52]	; (80139d8 <tcp_receive+0xb20>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d01d      	beq.n	80139e4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80139a8:	4b0b      	ldr	r3, [pc, #44]	; (80139d8 <tcp_receive+0xb20>)
 80139aa:	681a      	ldr	r2, [r3, #0]
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	685b      	ldr	r3, [r3, #4]
 80139b0:	4619      	mov	r1, r3
 80139b2:	4610      	mov	r0, r2
 80139b4:	f7fb ffb4 	bl	800f920 <pbuf_cat>
 80139b8:	e018      	b.n	80139ec <tcp_receive+0xb34>
 80139ba:	bf00      	nop
 80139bc:	2400414e 	.word	0x2400414e
 80139c0:	24004144 	.word	0x24004144
 80139c4:	24004124 	.word	0x24004124
 80139c8:	0801b3c4 	.word	0x0801b3c4
 80139cc:	0801b7a4 	.word	0x0801b7a4
 80139d0:	0801b410 	.word	0x0801b410
 80139d4:	0801b7e0 	.word	0x0801b7e0
 80139d8:	24004154 	.word	0x24004154
 80139dc:	24004151 	.word	0x24004151
 80139e0:	0801b800 	.word	0x0801b800
            } else {
              recv_data = cseg->p;
 80139e4:	68bb      	ldr	r3, [r7, #8]
 80139e6:	685b      	ldr	r3, [r3, #4]
 80139e8:	4a70      	ldr	r2, [pc, #448]	; (8013bac <tcp_receive+0xcf4>)
 80139ea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80139ec:	68bb      	ldr	r3, [r7, #8]
 80139ee:	2200      	movs	r2, #0
 80139f0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	68db      	ldr	r3, [r3, #12]
 80139f6:	899b      	ldrh	r3, [r3, #12]
 80139f8:	b29b      	uxth	r3, r3
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7fa fa18 	bl	800de30 <lwip_htons>
 8013a00:	4603      	mov	r3, r0
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	f003 0301 	and.w	r3, r3, #1
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d00d      	beq.n	8013a28 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013a0c:	4b68      	ldr	r3, [pc, #416]	; (8013bb0 <tcp_receive+0xcf8>)
 8013a0e:	781b      	ldrb	r3, [r3, #0]
 8013a10:	f043 0320 	orr.w	r3, r3, #32
 8013a14:	b2da      	uxtb	r2, r3
 8013a16:	4b66      	ldr	r3, [pc, #408]	; (8013bb0 <tcp_receive+0xcf8>)
 8013a18:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	7d1b      	ldrb	r3, [r3, #20]
 8013a1e:	2b04      	cmp	r3, #4
 8013a20:	d102      	bne.n	8013a28 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2207      	movs	r2, #7
 8013a26:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	681a      	ldr	r2, [r3, #0]
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013a30:	68b8      	ldr	r0, [r7, #8]
 8013a32:	f7fd faf0 	bl	8011016 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d008      	beq.n	8013a50 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a42:	68db      	ldr	r3, [r3, #12]
 8013a44:	685a      	ldr	r2, [r3, #4]
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	f43f af43 	beq.w	80138d6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	8b5b      	ldrh	r3, [r3, #26]
 8013a54:	f003 0301 	and.w	r3, r3, #1
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d00e      	beq.n	8013a7a <tcp_receive+0xbc2>
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	8b5b      	ldrh	r3, [r3, #26]
 8013a60:	f023 0301 	bic.w	r3, r3, #1
 8013a64:	b29a      	uxth	r2, r3
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	835a      	strh	r2, [r3, #26]
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	8b5b      	ldrh	r3, [r3, #26]
 8013a6e:	f043 0302 	orr.w	r3, r3, #2
 8013a72:	b29a      	uxth	r2, r3
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013a78:	e188      	b.n	8013d8c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	8b5b      	ldrh	r3, [r3, #26]
 8013a7e:	f043 0301 	orr.w	r3, r3, #1
 8013a82:	b29a      	uxth	r2, r3
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013a88:	e180      	b.n	8013d8c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d106      	bne.n	8013aa0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013a92:	4848      	ldr	r0, [pc, #288]	; (8013bb4 <tcp_receive+0xcfc>)
 8013a94:	f7fd faf6 	bl	8011084 <tcp_seg_copy>
 8013a98:	4602      	mov	r2, r0
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	675a      	str	r2, [r3, #116]	; 0x74
 8013a9e:	e16d      	b.n	8013d7c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013aa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8013aaa:	e157      	b.n	8013d5c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8013aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aae:	68db      	ldr	r3, [r3, #12]
 8013ab0:	685a      	ldr	r2, [r3, #4]
 8013ab2:	4b41      	ldr	r3, [pc, #260]	; (8013bb8 <tcp_receive+0xd00>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d11d      	bne.n	8013af6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013aba:	4b3e      	ldr	r3, [pc, #248]	; (8013bb4 <tcp_receive+0xcfc>)
 8013abc:	891a      	ldrh	r2, [r3, #8]
 8013abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac0:	891b      	ldrh	r3, [r3, #8]
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	f240 814f 	bls.w	8013d66 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013ac8:	483a      	ldr	r0, [pc, #232]	; (8013bb4 <tcp_receive+0xcfc>)
 8013aca:	f7fd fadb 	bl	8011084 <tcp_seg_copy>
 8013ace:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	f000 8149 	beq.w	8013d6a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8013ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d003      	beq.n	8013ae6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8013ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ae0:	697a      	ldr	r2, [r7, #20]
 8013ae2:	601a      	str	r2, [r3, #0]
 8013ae4:	e002      	b.n	8013aec <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	697a      	ldr	r2, [r7, #20]
 8013aea:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013aec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013aee:	6978      	ldr	r0, [r7, #20]
 8013af0:	f7ff f8de 	bl	8012cb0 <tcp_oos_insert_segment>
                }
                break;
 8013af4:	e139      	b.n	8013d6a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d117      	bne.n	8013b2c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013afc:	4b2e      	ldr	r3, [pc, #184]	; (8013bb8 <tcp_receive+0xd00>)
 8013afe:	681a      	ldr	r2, [r3, #0]
 8013b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b02:	68db      	ldr	r3, [r3, #12]
 8013b04:	685b      	ldr	r3, [r3, #4]
 8013b06:	1ad3      	subs	r3, r2, r3
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	da57      	bge.n	8013bbc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013b0c:	4829      	ldr	r0, [pc, #164]	; (8013bb4 <tcp_receive+0xcfc>)
 8013b0e:	f7fd fab9 	bl	8011084 <tcp_seg_copy>
 8013b12:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013b14:	69bb      	ldr	r3, [r7, #24]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	f000 8129 	beq.w	8013d6e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	69ba      	ldr	r2, [r7, #24]
 8013b20:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013b22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b24:	69b8      	ldr	r0, [r7, #24]
 8013b26:	f7ff f8c3 	bl	8012cb0 <tcp_oos_insert_segment>
                  }
                  break;
 8013b2a:	e120      	b.n	8013d6e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013b2c:	4b22      	ldr	r3, [pc, #136]	; (8013bb8 <tcp_receive+0xd00>)
 8013b2e:	681a      	ldr	r2, [r3, #0]
 8013b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b32:	68db      	ldr	r3, [r3, #12]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	1ad3      	subs	r3, r2, r3
 8013b38:	3b01      	subs	r3, #1
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	db3e      	blt.n	8013bbc <tcp_receive+0xd04>
 8013b3e:	4b1e      	ldr	r3, [pc, #120]	; (8013bb8 <tcp_receive+0xd00>)
 8013b40:	681a      	ldr	r2, [r3, #0]
 8013b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b44:	68db      	ldr	r3, [r3, #12]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	1ad3      	subs	r3, r2, r3
 8013b4a:	3301      	adds	r3, #1
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	dc35      	bgt.n	8013bbc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013b50:	4818      	ldr	r0, [pc, #96]	; (8013bb4 <tcp_receive+0xcfc>)
 8013b52:	f7fd fa97 	bl	8011084 <tcp_seg_copy>
 8013b56:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	f000 8109 	beq.w	8013d72 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b62:	68db      	ldr	r3, [r3, #12]
 8013b64:	685b      	ldr	r3, [r3, #4]
 8013b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b68:	8912      	ldrh	r2, [r2, #8]
 8013b6a:	441a      	add	r2, r3
 8013b6c:	4b12      	ldr	r3, [pc, #72]	; (8013bb8 <tcp_receive+0xd00>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	1ad3      	subs	r3, r2, r3
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	dd12      	ble.n	8013b9c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013b76:	4b10      	ldr	r3, [pc, #64]	; (8013bb8 <tcp_receive+0xd00>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	b29a      	uxth	r2, r3
 8013b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b7e:	68db      	ldr	r3, [r3, #12]
 8013b80:	685b      	ldr	r3, [r3, #4]
 8013b82:	b29b      	uxth	r3, r3
 8013b84:	1ad3      	subs	r3, r2, r3
 8013b86:	b29a      	uxth	r2, r3
 8013b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b8a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b8e:	685a      	ldr	r2, [r3, #4]
 8013b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b92:	891b      	ldrh	r3, [r3, #8]
 8013b94:	4619      	mov	r1, r3
 8013b96:	4610      	mov	r0, r2
 8013b98:	f7fb fc6e 	bl	800f478 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b9e:	69fa      	ldr	r2, [r7, #28]
 8013ba0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013ba2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013ba4:	69f8      	ldr	r0, [r7, #28]
 8013ba6:	f7ff f883 	bl	8012cb0 <tcp_oos_insert_segment>
                  }
                  break;
 8013baa:	e0e2      	b.n	8013d72 <tcp_receive+0xeba>
 8013bac:	24004154 	.word	0x24004154
 8013bb0:	24004151 	.word	0x24004151
 8013bb4:	24004124 	.word	0x24004124
 8013bb8:	24004144 	.word	0x24004144
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bbe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	f040 80c6 	bne.w	8013d56 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013bca:	4b80      	ldr	r3, [pc, #512]	; (8013dcc <tcp_receive+0xf14>)
 8013bcc:	681a      	ldr	r2, [r3, #0]
 8013bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd0:	68db      	ldr	r3, [r3, #12]
 8013bd2:	685b      	ldr	r3, [r3, #4]
 8013bd4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	f340 80bd 	ble.w	8013d56 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bde:	68db      	ldr	r3, [r3, #12]
 8013be0:	899b      	ldrh	r3, [r3, #12]
 8013be2:	b29b      	uxth	r3, r3
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7fa f923 	bl	800de30 <lwip_htons>
 8013bea:	4603      	mov	r3, r0
 8013bec:	b2db      	uxtb	r3, r3
 8013bee:	f003 0301 	and.w	r3, r3, #1
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	f040 80bf 	bne.w	8013d76 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013bf8:	4875      	ldr	r0, [pc, #468]	; (8013dd0 <tcp_receive+0xf18>)
 8013bfa:	f7fd fa43 	bl	8011084 <tcp_seg_copy>
 8013bfe:	4602      	mov	r2, r0
 8013c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c02:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	f000 80b6 	beq.w	8013d7a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c10:	68db      	ldr	r3, [r3, #12]
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c16:	8912      	ldrh	r2, [r2, #8]
 8013c18:	441a      	add	r2, r3
 8013c1a:	4b6c      	ldr	r3, [pc, #432]	; (8013dcc <tcp_receive+0xf14>)
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	1ad3      	subs	r3, r2, r3
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	dd12      	ble.n	8013c4a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013c24:	4b69      	ldr	r3, [pc, #420]	; (8013dcc <tcp_receive+0xf14>)
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	b29a      	uxth	r2, r3
 8013c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c2c:	68db      	ldr	r3, [r3, #12]
 8013c2e:	685b      	ldr	r3, [r3, #4]
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	1ad3      	subs	r3, r2, r3
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c38:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c3c:	685a      	ldr	r2, [r3, #4]
 8013c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c40:	891b      	ldrh	r3, [r3, #8]
 8013c42:	4619      	mov	r1, r3
 8013c44:	4610      	mov	r0, r2
 8013c46:	f7fb fc17 	bl	800f478 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013c4a:	4b62      	ldr	r3, [pc, #392]	; (8013dd4 <tcp_receive+0xf1c>)
 8013c4c:	881b      	ldrh	r3, [r3, #0]
 8013c4e:	461a      	mov	r2, r3
 8013c50:	4b5e      	ldr	r3, [pc, #376]	; (8013dcc <tcp_receive+0xf14>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	441a      	add	r2, r3
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c5a:	6879      	ldr	r1, [r7, #4]
 8013c5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013c5e:	440b      	add	r3, r1
 8013c60:	1ad3      	subs	r3, r2, r3
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	f340 8089 	ble.w	8013d7a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	899b      	ldrh	r3, [r3, #12]
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7fa f8dc 	bl	800de30 <lwip_htons>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	b2db      	uxtb	r3, r3
 8013c7c:	f003 0301 	and.w	r3, r3, #1
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d022      	beq.n	8013cca <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	68db      	ldr	r3, [r3, #12]
 8013c8a:	899b      	ldrh	r3, [r3, #12]
 8013c8c:	b29b      	uxth	r3, r3
 8013c8e:	b21b      	sxth	r3, r3
 8013c90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013c94:	b21c      	sxth	r4, r3
 8013c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	68db      	ldr	r3, [r3, #12]
 8013c9c:	899b      	ldrh	r3, [r3, #12]
 8013c9e:	b29b      	uxth	r3, r3
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7fa f8c5 	bl	800de30 <lwip_htons>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	b2db      	uxtb	r3, r3
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7fa f8bc 	bl	800de30 <lwip_htons>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	b21b      	sxth	r3, r3
 8013cbc:	4323      	orrs	r3, r4
 8013cbe:	b21a      	sxth	r2, r3
 8013cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	b292      	uxth	r2, r2
 8013cc8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cce:	b29a      	uxth	r2, r3
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013cd4:	4413      	add	r3, r2
 8013cd6:	b299      	uxth	r1, r3
 8013cd8:	4b3c      	ldr	r3, [pc, #240]	; (8013dcc <tcp_receive+0xf14>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	b29a      	uxth	r2, r3
 8013cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	1a8a      	subs	r2, r1, r2
 8013ce4:	b292      	uxth	r2, r2
 8013ce6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	685a      	ldr	r2, [r3, #4]
 8013cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	891b      	ldrh	r3, [r3, #8]
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	4610      	mov	r0, r2
 8013cf8:	f7fb fbbe 	bl	800f478 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	891c      	ldrh	r4, [r3, #8]
 8013d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	68db      	ldr	r3, [r3, #12]
 8013d08:	899b      	ldrh	r3, [r3, #12]
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7fa f88f 	bl	800de30 <lwip_htons>
 8013d12:	4603      	mov	r3, r0
 8013d14:	b2db      	uxtb	r3, r3
 8013d16:	f003 0303 	and.w	r3, r3, #3
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d001      	beq.n	8013d22 <tcp_receive+0xe6a>
 8013d1e:	2301      	movs	r3, #1
 8013d20:	e000      	b.n	8013d24 <tcp_receive+0xe6c>
 8013d22:	2300      	movs	r3, #0
 8013d24:	4423      	add	r3, r4
 8013d26:	b29a      	uxth	r2, r3
 8013d28:	4b2a      	ldr	r3, [pc, #168]	; (8013dd4 <tcp_receive+0xf1c>)
 8013d2a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013d2c:	4b29      	ldr	r3, [pc, #164]	; (8013dd4 <tcp_receive+0xf1c>)
 8013d2e:	881b      	ldrh	r3, [r3, #0]
 8013d30:	461a      	mov	r2, r3
 8013d32:	4b26      	ldr	r3, [pc, #152]	; (8013dcc <tcp_receive+0xf14>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	441a      	add	r2, r3
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d3c:	6879      	ldr	r1, [r7, #4]
 8013d3e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013d40:	440b      	add	r3, r1
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d019      	beq.n	8013d7a <tcp_receive+0xec2>
 8013d46:	4b24      	ldr	r3, [pc, #144]	; (8013dd8 <tcp_receive+0xf20>)
 8013d48:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8013d4c:	4923      	ldr	r1, [pc, #140]	; (8013ddc <tcp_receive+0xf24>)
 8013d4e:	4824      	ldr	r0, [pc, #144]	; (8013de0 <tcp_receive+0xf28>)
 8013d50:	f005 f970 	bl	8019034 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013d54:	e011      	b.n	8013d7a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8013d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	f47f aea4 	bne.w	8013aac <tcp_receive+0xbf4>
 8013d64:	e00a      	b.n	8013d7c <tcp_receive+0xec4>
                break;
 8013d66:	bf00      	nop
 8013d68:	e008      	b.n	8013d7c <tcp_receive+0xec4>
                break;
 8013d6a:	bf00      	nop
 8013d6c:	e006      	b.n	8013d7c <tcp_receive+0xec4>
                  break;
 8013d6e:	bf00      	nop
 8013d70:	e004      	b.n	8013d7c <tcp_receive+0xec4>
                  break;
 8013d72:	bf00      	nop
 8013d74:	e002      	b.n	8013d7c <tcp_receive+0xec4>
                  break;
 8013d76:	bf00      	nop
 8013d78:	e000      	b.n	8013d7c <tcp_receive+0xec4>
                break;
 8013d7a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f001 fe8b 	bl	8015a98 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013d82:	e003      	b.n	8013d8c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f001 fe87 	bl	8015a98 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013d8a:	e01a      	b.n	8013dc2 <tcp_receive+0xf0a>
 8013d8c:	e019      	b.n	8013dc2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013d8e:	4b0f      	ldr	r3, [pc, #60]	; (8013dcc <tcp_receive+0xf14>)
 8013d90:	681a      	ldr	r2, [r3, #0]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d96:	1ad3      	subs	r3, r2, r3
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	db0a      	blt.n	8013db2 <tcp_receive+0xefa>
 8013d9c:	4b0b      	ldr	r3, [pc, #44]	; (8013dcc <tcp_receive+0xf14>)
 8013d9e:	681a      	ldr	r2, [r3, #0]
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013da4:	6879      	ldr	r1, [r7, #4]
 8013da6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013da8:	440b      	add	r3, r1
 8013daa:	1ad3      	subs	r3, r2, r3
 8013dac:	3301      	adds	r3, #1
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	dd07      	ble.n	8013dc2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	8b5b      	ldrh	r3, [r3, #26]
 8013db6:	f043 0302 	orr.w	r3, r3, #2
 8013dba:	b29a      	uxth	r2, r3
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013dc0:	e7ff      	b.n	8013dc2 <tcp_receive+0xf0a>
 8013dc2:	bf00      	nop
 8013dc4:	3750      	adds	r7, #80	; 0x50
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8013dca:	bf00      	nop
 8013dcc:	24004144 	.word	0x24004144
 8013dd0:	24004124 	.word	0x24004124
 8013dd4:	2400414e 	.word	0x2400414e
 8013dd8:	0801b3c4 	.word	0x0801b3c4
 8013ddc:	0801b76c 	.word	0x0801b76c
 8013de0:	0801b410 	.word	0x0801b410

08013de4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013de4:	b480      	push	{r7}
 8013de6:	b083      	sub	sp, #12
 8013de8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013dea:	4b15      	ldr	r3, [pc, #84]	; (8013e40 <tcp_get_next_optbyte+0x5c>)
 8013dec:	881b      	ldrh	r3, [r3, #0]
 8013dee:	1c5a      	adds	r2, r3, #1
 8013df0:	b291      	uxth	r1, r2
 8013df2:	4a13      	ldr	r2, [pc, #76]	; (8013e40 <tcp_get_next_optbyte+0x5c>)
 8013df4:	8011      	strh	r1, [r2, #0]
 8013df6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013df8:	4b12      	ldr	r3, [pc, #72]	; (8013e44 <tcp_get_next_optbyte+0x60>)
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d004      	beq.n	8013e0a <tcp_get_next_optbyte+0x26>
 8013e00:	4b11      	ldr	r3, [pc, #68]	; (8013e48 <tcp_get_next_optbyte+0x64>)
 8013e02:	881b      	ldrh	r3, [r3, #0]
 8013e04:	88fa      	ldrh	r2, [r7, #6]
 8013e06:	429a      	cmp	r2, r3
 8013e08:	d208      	bcs.n	8013e1c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013e0a:	4b10      	ldr	r3, [pc, #64]	; (8013e4c <tcp_get_next_optbyte+0x68>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	3314      	adds	r3, #20
 8013e10:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013e12:	88fb      	ldrh	r3, [r7, #6]
 8013e14:	683a      	ldr	r2, [r7, #0]
 8013e16:	4413      	add	r3, r2
 8013e18:	781b      	ldrb	r3, [r3, #0]
 8013e1a:	e00b      	b.n	8013e34 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013e1c:	88fb      	ldrh	r3, [r7, #6]
 8013e1e:	b2da      	uxtb	r2, r3
 8013e20:	4b09      	ldr	r3, [pc, #36]	; (8013e48 <tcp_get_next_optbyte+0x64>)
 8013e22:	881b      	ldrh	r3, [r3, #0]
 8013e24:	b2db      	uxtb	r3, r3
 8013e26:	1ad3      	subs	r3, r2, r3
 8013e28:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013e2a:	4b06      	ldr	r3, [pc, #24]	; (8013e44 <tcp_get_next_optbyte+0x60>)
 8013e2c:	681a      	ldr	r2, [r3, #0]
 8013e2e:	797b      	ldrb	r3, [r7, #5]
 8013e30:	4413      	add	r3, r2
 8013e32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	370c      	adds	r7, #12
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3e:	4770      	bx	lr
 8013e40:	24004140 	.word	0x24004140
 8013e44:	2400413c 	.word	0x2400413c
 8013e48:	2400413a 	.word	0x2400413a
 8013e4c:	24004134 	.word	0x24004134

08013e50 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b084      	sub	sp, #16
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d106      	bne.n	8013e6c <tcp_parseopt+0x1c>
 8013e5e:	4b32      	ldr	r3, [pc, #200]	; (8013f28 <tcp_parseopt+0xd8>)
 8013e60:	f240 727d 	movw	r2, #1917	; 0x77d
 8013e64:	4931      	ldr	r1, [pc, #196]	; (8013f2c <tcp_parseopt+0xdc>)
 8013e66:	4832      	ldr	r0, [pc, #200]	; (8013f30 <tcp_parseopt+0xe0>)
 8013e68:	f005 f8e4 	bl	8019034 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013e6c:	4b31      	ldr	r3, [pc, #196]	; (8013f34 <tcp_parseopt+0xe4>)
 8013e6e:	881b      	ldrh	r3, [r3, #0]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d055      	beq.n	8013f20 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013e74:	4b30      	ldr	r3, [pc, #192]	; (8013f38 <tcp_parseopt+0xe8>)
 8013e76:	2200      	movs	r2, #0
 8013e78:	801a      	strh	r2, [r3, #0]
 8013e7a:	e045      	b.n	8013f08 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8013e7c:	f7ff ffb2 	bl	8013de4 <tcp_get_next_optbyte>
 8013e80:	4603      	mov	r3, r0
 8013e82:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013e84:	7bfb      	ldrb	r3, [r7, #15]
 8013e86:	2b02      	cmp	r3, #2
 8013e88:	d006      	beq.n	8013e98 <tcp_parseopt+0x48>
 8013e8a:	2b02      	cmp	r3, #2
 8013e8c:	dc2b      	bgt.n	8013ee6 <tcp_parseopt+0x96>
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d041      	beq.n	8013f16 <tcp_parseopt+0xc6>
 8013e92:	2b01      	cmp	r3, #1
 8013e94:	d127      	bne.n	8013ee6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013e96:	e037      	b.n	8013f08 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013e98:	f7ff ffa4 	bl	8013de4 <tcp_get_next_optbyte>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	2b04      	cmp	r3, #4
 8013ea0:	d13b      	bne.n	8013f1a <tcp_parseopt+0xca>
 8013ea2:	4b25      	ldr	r3, [pc, #148]	; (8013f38 <tcp_parseopt+0xe8>)
 8013ea4:	881b      	ldrh	r3, [r3, #0]
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	4a22      	ldr	r2, [pc, #136]	; (8013f34 <tcp_parseopt+0xe4>)
 8013eaa:	8812      	ldrh	r2, [r2, #0]
 8013eac:	4293      	cmp	r3, r2
 8013eae:	da34      	bge.n	8013f1a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013eb0:	f7ff ff98 	bl	8013de4 <tcp_get_next_optbyte>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	b29b      	uxth	r3, r3
 8013eb8:	021b      	lsls	r3, r3, #8
 8013eba:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013ebc:	f7ff ff92 	bl	8013de4 <tcp_get_next_optbyte>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	b29a      	uxth	r2, r3
 8013ec4:	89bb      	ldrh	r3, [r7, #12]
 8013ec6:	4313      	orrs	r3, r2
 8013ec8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013eca:	89bb      	ldrh	r3, [r7, #12]
 8013ecc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013ed0:	d804      	bhi.n	8013edc <tcp_parseopt+0x8c>
 8013ed2:	89bb      	ldrh	r3, [r7, #12]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d001      	beq.n	8013edc <tcp_parseopt+0x8c>
 8013ed8:	89ba      	ldrh	r2, [r7, #12]
 8013eda:	e001      	b.n	8013ee0 <tcp_parseopt+0x90>
 8013edc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013ee4:	e010      	b.n	8013f08 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013ee6:	f7ff ff7d 	bl	8013de4 <tcp_get_next_optbyte>
 8013eea:	4603      	mov	r3, r0
 8013eec:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013eee:	7afb      	ldrb	r3, [r7, #11]
 8013ef0:	2b01      	cmp	r3, #1
 8013ef2:	d914      	bls.n	8013f1e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013ef4:	7afb      	ldrb	r3, [r7, #11]
 8013ef6:	b29a      	uxth	r2, r3
 8013ef8:	4b0f      	ldr	r3, [pc, #60]	; (8013f38 <tcp_parseopt+0xe8>)
 8013efa:	881b      	ldrh	r3, [r3, #0]
 8013efc:	4413      	add	r3, r2
 8013efe:	b29b      	uxth	r3, r3
 8013f00:	3b02      	subs	r3, #2
 8013f02:	b29a      	uxth	r2, r3
 8013f04:	4b0c      	ldr	r3, [pc, #48]	; (8013f38 <tcp_parseopt+0xe8>)
 8013f06:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013f08:	4b0b      	ldr	r3, [pc, #44]	; (8013f38 <tcp_parseopt+0xe8>)
 8013f0a:	881a      	ldrh	r2, [r3, #0]
 8013f0c:	4b09      	ldr	r3, [pc, #36]	; (8013f34 <tcp_parseopt+0xe4>)
 8013f0e:	881b      	ldrh	r3, [r3, #0]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d3b3      	bcc.n	8013e7c <tcp_parseopt+0x2c>
 8013f14:	e004      	b.n	8013f20 <tcp_parseopt+0xd0>
          return;
 8013f16:	bf00      	nop
 8013f18:	e002      	b.n	8013f20 <tcp_parseopt+0xd0>
            return;
 8013f1a:	bf00      	nop
 8013f1c:	e000      	b.n	8013f20 <tcp_parseopt+0xd0>
            return;
 8013f1e:	bf00      	nop
      }
    }
  }
}
 8013f20:	3710      	adds	r7, #16
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	0801b3c4 	.word	0x0801b3c4
 8013f2c:	0801b828 	.word	0x0801b828
 8013f30:	0801b410 	.word	0x0801b410
 8013f34:	24004138 	.word	0x24004138
 8013f38:	24004140 	.word	0x24004140

08013f3c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013f3c:	b480      	push	{r7}
 8013f3e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013f40:	4b05      	ldr	r3, [pc, #20]	; (8013f58 <tcp_trigger_input_pcb_close+0x1c>)
 8013f42:	781b      	ldrb	r3, [r3, #0]
 8013f44:	f043 0310 	orr.w	r3, r3, #16
 8013f48:	b2da      	uxtb	r2, r3
 8013f4a:	4b03      	ldr	r3, [pc, #12]	; (8013f58 <tcp_trigger_input_pcb_close+0x1c>)
 8013f4c:	701a      	strb	r2, [r3, #0]
}
 8013f4e:	bf00      	nop
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr
 8013f58:	24004151 	.word	0x24004151

08013f5c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b084      	sub	sp, #16
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d00a      	beq.n	8013f84 <tcp_route+0x28>
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	7a1b      	ldrb	r3, [r3, #8]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d006      	beq.n	8013f84 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	7a1b      	ldrb	r3, [r3, #8]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7fb f874 	bl	800f068 <netif_get_by_index>
 8013f80:	4603      	mov	r3, r0
 8013f82:	e003      	b.n	8013f8c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f003 fb2b 	bl	80175e0 <ip4_route>
 8013f8a:	4603      	mov	r3, r0
  }
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	3710      	adds	r7, #16
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}

08013f94 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013f94:	b590      	push	{r4, r7, lr}
 8013f96:	b087      	sub	sp, #28
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	60f8      	str	r0, [r7, #12]
 8013f9c:	60b9      	str	r1, [r7, #8]
 8013f9e:	603b      	str	r3, [r7, #0]
 8013fa0:	4613      	mov	r3, r2
 8013fa2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d105      	bne.n	8013fb6 <tcp_create_segment+0x22>
 8013faa:	4b44      	ldr	r3, [pc, #272]	; (80140bc <tcp_create_segment+0x128>)
 8013fac:	22a3      	movs	r2, #163	; 0xa3
 8013fae:	4944      	ldr	r1, [pc, #272]	; (80140c0 <tcp_create_segment+0x12c>)
 8013fb0:	4844      	ldr	r0, [pc, #272]	; (80140c4 <tcp_create_segment+0x130>)
 8013fb2:	f005 f83f 	bl	8019034 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d105      	bne.n	8013fc8 <tcp_create_segment+0x34>
 8013fbc:	4b3f      	ldr	r3, [pc, #252]	; (80140bc <tcp_create_segment+0x128>)
 8013fbe:	22a4      	movs	r2, #164	; 0xa4
 8013fc0:	4941      	ldr	r1, [pc, #260]	; (80140c8 <tcp_create_segment+0x134>)
 8013fc2:	4840      	ldr	r0, [pc, #256]	; (80140c4 <tcp_create_segment+0x130>)
 8013fc4:	f005 f836 	bl	8019034 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013fc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013fcc:	009b      	lsls	r3, r3, #2
 8013fce:	b2db      	uxtb	r3, r3
 8013fd0:	f003 0304 	and.w	r3, r3, #4
 8013fd4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013fd6:	2003      	movs	r0, #3
 8013fd8:	f7fa fcba 	bl	800e950 <memp_malloc>
 8013fdc:	6138      	str	r0, [r7, #16]
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d104      	bne.n	8013fee <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013fe4:	68b8      	ldr	r0, [r7, #8]
 8013fe6:	f7fb fbcd 	bl	800f784 <pbuf_free>
    return NULL;
 8013fea:	2300      	movs	r3, #0
 8013fec:	e061      	b.n	80140b2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013ff4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013ff6:	693b      	ldr	r3, [r7, #16]
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	68ba      	ldr	r2, [r7, #8]
 8014000:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	891a      	ldrh	r2, [r3, #8]
 8014006:	7dfb      	ldrb	r3, [r7, #23]
 8014008:	b29b      	uxth	r3, r3
 801400a:	429a      	cmp	r2, r3
 801400c:	d205      	bcs.n	801401a <tcp_create_segment+0x86>
 801400e:	4b2b      	ldr	r3, [pc, #172]	; (80140bc <tcp_create_segment+0x128>)
 8014010:	22b0      	movs	r2, #176	; 0xb0
 8014012:	492e      	ldr	r1, [pc, #184]	; (80140cc <tcp_create_segment+0x138>)
 8014014:	482b      	ldr	r0, [pc, #172]	; (80140c4 <tcp_create_segment+0x130>)
 8014016:	f005 f80d 	bl	8019034 <iprintf>
  seg->len = p->tot_len - optlen;
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	891a      	ldrh	r2, [r3, #8]
 801401e:	7dfb      	ldrb	r3, [r7, #23]
 8014020:	b29b      	uxth	r3, r3
 8014022:	1ad3      	subs	r3, r2, r3
 8014024:	b29a      	uxth	r2, r3
 8014026:	693b      	ldr	r3, [r7, #16]
 8014028:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801402a:	2114      	movs	r1, #20
 801402c:	68b8      	ldr	r0, [r7, #8]
 801402e:	f7fb fb13 	bl	800f658 <pbuf_add_header>
 8014032:	4603      	mov	r3, r0
 8014034:	2b00      	cmp	r3, #0
 8014036:	d004      	beq.n	8014042 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014038:	6938      	ldr	r0, [r7, #16]
 801403a:	f7fc ffec 	bl	8011016 <tcp_seg_free>
    return NULL;
 801403e:	2300      	movs	r3, #0
 8014040:	e037      	b.n	80140b2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	685a      	ldr	r2, [r3, #4]
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	8ada      	ldrh	r2, [r3, #22]
 8014050:	693b      	ldr	r3, [r7, #16]
 8014052:	68dc      	ldr	r4, [r3, #12]
 8014054:	4610      	mov	r0, r2
 8014056:	f7f9 feeb 	bl	800de30 <lwip_htons>
 801405a:	4603      	mov	r3, r0
 801405c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	8b1a      	ldrh	r2, [r3, #24]
 8014062:	693b      	ldr	r3, [r7, #16]
 8014064:	68dc      	ldr	r4, [r3, #12]
 8014066:	4610      	mov	r0, r2
 8014068:	f7f9 fee2 	bl	800de30 <lwip_htons>
 801406c:	4603      	mov	r3, r0
 801406e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	68dc      	ldr	r4, [r3, #12]
 8014074:	6838      	ldr	r0, [r7, #0]
 8014076:	f7f9 fef0 	bl	800de5a <lwip_htonl>
 801407a:	4603      	mov	r3, r0
 801407c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801407e:	7dfb      	ldrb	r3, [r7, #23]
 8014080:	089b      	lsrs	r3, r3, #2
 8014082:	b2db      	uxtb	r3, r3
 8014084:	b29b      	uxth	r3, r3
 8014086:	3305      	adds	r3, #5
 8014088:	b29b      	uxth	r3, r3
 801408a:	031b      	lsls	r3, r3, #12
 801408c:	b29a      	uxth	r2, r3
 801408e:	79fb      	ldrb	r3, [r7, #7]
 8014090:	b29b      	uxth	r3, r3
 8014092:	4313      	orrs	r3, r2
 8014094:	b29a      	uxth	r2, r3
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	68dc      	ldr	r4, [r3, #12]
 801409a:	4610      	mov	r0, r2
 801409c:	f7f9 fec8 	bl	800de30 <lwip_htons>
 80140a0:	4603      	mov	r3, r0
 80140a2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80140a4:	693b      	ldr	r3, [r7, #16]
 80140a6:	68db      	ldr	r3, [r3, #12]
 80140a8:	2200      	movs	r2, #0
 80140aa:	749a      	strb	r2, [r3, #18]
 80140ac:	2200      	movs	r2, #0
 80140ae:	74da      	strb	r2, [r3, #19]
  return seg;
 80140b0:	693b      	ldr	r3, [r7, #16]
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	371c      	adds	r7, #28
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd90      	pop	{r4, r7, pc}
 80140ba:	bf00      	nop
 80140bc:	0801b844 	.word	0x0801b844
 80140c0:	0801b878 	.word	0x0801b878
 80140c4:	0801b898 	.word	0x0801b898
 80140c8:	0801b8c0 	.word	0x0801b8c0
 80140cc:	0801b8e4 	.word	0x0801b8e4

080140d0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b086      	sub	sp, #24
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	607b      	str	r3, [r7, #4]
 80140d8:	4603      	mov	r3, r0
 80140da:	73fb      	strb	r3, [r7, #15]
 80140dc:	460b      	mov	r3, r1
 80140de:	81bb      	strh	r3, [r7, #12]
 80140e0:	4613      	mov	r3, r2
 80140e2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80140e4:	89bb      	ldrh	r3, [r7, #12]
 80140e6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d105      	bne.n	80140fa <tcp_pbuf_prealloc+0x2a>
 80140ee:	4b30      	ldr	r3, [pc, #192]	; (80141b0 <tcp_pbuf_prealloc+0xe0>)
 80140f0:	22e8      	movs	r2, #232	; 0xe8
 80140f2:	4930      	ldr	r1, [pc, #192]	; (80141b4 <tcp_pbuf_prealloc+0xe4>)
 80140f4:	4830      	ldr	r0, [pc, #192]	; (80141b8 <tcp_pbuf_prealloc+0xe8>)
 80140f6:	f004 ff9d 	bl	8019034 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80140fa:	6a3b      	ldr	r3, [r7, #32]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d105      	bne.n	801410c <tcp_pbuf_prealloc+0x3c>
 8014100:	4b2b      	ldr	r3, [pc, #172]	; (80141b0 <tcp_pbuf_prealloc+0xe0>)
 8014102:	22e9      	movs	r2, #233	; 0xe9
 8014104:	492d      	ldr	r1, [pc, #180]	; (80141bc <tcp_pbuf_prealloc+0xec>)
 8014106:	482c      	ldr	r0, [pc, #176]	; (80141b8 <tcp_pbuf_prealloc+0xe8>)
 8014108:	f004 ff94 	bl	8019034 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801410c:	89ba      	ldrh	r2, [r7, #12]
 801410e:	897b      	ldrh	r3, [r7, #10]
 8014110:	429a      	cmp	r2, r3
 8014112:	d221      	bcs.n	8014158 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014118:	f003 0302 	and.w	r3, r3, #2
 801411c:	2b00      	cmp	r3, #0
 801411e:	d111      	bne.n	8014144 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8014120:	6a3b      	ldr	r3, [r7, #32]
 8014122:	8b5b      	ldrh	r3, [r3, #26]
 8014124:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014128:	2b00      	cmp	r3, #0
 801412a:	d115      	bne.n	8014158 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801412c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014130:	2b00      	cmp	r3, #0
 8014132:	d007      	beq.n	8014144 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014134:	6a3b      	ldr	r3, [r7, #32]
 8014136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8014138:	2b00      	cmp	r3, #0
 801413a:	d103      	bne.n	8014144 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801413c:	6a3b      	ldr	r3, [r7, #32]
 801413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8014140:	2b00      	cmp	r3, #0
 8014142:	d009      	beq.n	8014158 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014144:	89bb      	ldrh	r3, [r7, #12]
 8014146:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801414a:	f023 0203 	bic.w	r2, r3, #3
 801414e:	897b      	ldrh	r3, [r7, #10]
 8014150:	4293      	cmp	r3, r2
 8014152:	bf28      	it	cs
 8014154:	4613      	movcs	r3, r2
 8014156:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014158:	8af9      	ldrh	r1, [r7, #22]
 801415a:	7bfb      	ldrb	r3, [r7, #15]
 801415c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014160:	4618      	mov	r0, r3
 8014162:	f7fb f82b 	bl	800f1bc <pbuf_alloc>
 8014166:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014168:	693b      	ldr	r3, [r7, #16]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d101      	bne.n	8014172 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801416e:	2300      	movs	r3, #0
 8014170:	e019      	b.n	80141a6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014172:	693b      	ldr	r3, [r7, #16]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d006      	beq.n	8014188 <tcp_pbuf_prealloc+0xb8>
 801417a:	4b0d      	ldr	r3, [pc, #52]	; (80141b0 <tcp_pbuf_prealloc+0xe0>)
 801417c:	f240 120b 	movw	r2, #267	; 0x10b
 8014180:	490f      	ldr	r1, [pc, #60]	; (80141c0 <tcp_pbuf_prealloc+0xf0>)
 8014182:	480d      	ldr	r0, [pc, #52]	; (80141b8 <tcp_pbuf_prealloc+0xe8>)
 8014184:	f004 ff56 	bl	8019034 <iprintf>
  *oversize = p->len - length;
 8014188:	693b      	ldr	r3, [r7, #16]
 801418a:	895a      	ldrh	r2, [r3, #10]
 801418c:	89bb      	ldrh	r3, [r7, #12]
 801418e:	1ad3      	subs	r3, r2, r3
 8014190:	b29a      	uxth	r2, r3
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014196:	693b      	ldr	r3, [r7, #16]
 8014198:	89ba      	ldrh	r2, [r7, #12]
 801419a:	811a      	strh	r2, [r3, #8]
 801419c:	693b      	ldr	r3, [r7, #16]
 801419e:	891a      	ldrh	r2, [r3, #8]
 80141a0:	693b      	ldr	r3, [r7, #16]
 80141a2:	815a      	strh	r2, [r3, #10]
  return p;
 80141a4:	693b      	ldr	r3, [r7, #16]
}
 80141a6:	4618      	mov	r0, r3
 80141a8:	3718      	adds	r7, #24
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}
 80141ae:	bf00      	nop
 80141b0:	0801b844 	.word	0x0801b844
 80141b4:	0801b8fc 	.word	0x0801b8fc
 80141b8:	0801b898 	.word	0x0801b898
 80141bc:	0801b920 	.word	0x0801b920
 80141c0:	0801b940 	.word	0x0801b940

080141c4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
 80141cc:	460b      	mov	r3, r1
 80141ce:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d106      	bne.n	80141e4 <tcp_write_checks+0x20>
 80141d6:	4b33      	ldr	r3, [pc, #204]	; (80142a4 <tcp_write_checks+0xe0>)
 80141d8:	f240 1233 	movw	r2, #307	; 0x133
 80141dc:	4932      	ldr	r1, [pc, #200]	; (80142a8 <tcp_write_checks+0xe4>)
 80141de:	4833      	ldr	r0, [pc, #204]	; (80142ac <tcp_write_checks+0xe8>)
 80141e0:	f004 ff28 	bl	8019034 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	7d1b      	ldrb	r3, [r3, #20]
 80141e8:	2b04      	cmp	r3, #4
 80141ea:	d00e      	beq.n	801420a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80141f0:	2b07      	cmp	r3, #7
 80141f2:	d00a      	beq.n	801420a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80141f8:	2b02      	cmp	r3, #2
 80141fa:	d006      	beq.n	801420a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014200:	2b03      	cmp	r3, #3
 8014202:	d002      	beq.n	801420a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014204:	f06f 030a 	mvn.w	r3, #10
 8014208:	e048      	b.n	801429c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801420a:	887b      	ldrh	r3, [r7, #2]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d101      	bne.n	8014214 <tcp_write_checks+0x50>
    return ERR_OK;
 8014210:	2300      	movs	r3, #0
 8014212:	e043      	b.n	801429c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801421a:	887a      	ldrh	r2, [r7, #2]
 801421c:	429a      	cmp	r2, r3
 801421e:	d909      	bls.n	8014234 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	8b5b      	ldrh	r3, [r3, #26]
 8014224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014228:	b29a      	uxth	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801422e:	f04f 33ff 	mov.w	r3, #4294967295
 8014232:	e033      	b.n	801429c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801423a:	2b08      	cmp	r3, #8
 801423c:	d909      	bls.n	8014252 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	8b5b      	ldrh	r3, [r3, #26]
 8014242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014246:	b29a      	uxth	r2, r3
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801424c:	f04f 33ff 	mov.w	r3, #4294967295
 8014250:	e024      	b.n	801429c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014258:	2b00      	cmp	r3, #0
 801425a:	d00f      	beq.n	801427c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014260:	2b00      	cmp	r3, #0
 8014262:	d11a      	bne.n	801429a <tcp_write_checks+0xd6>
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014268:	2b00      	cmp	r3, #0
 801426a:	d116      	bne.n	801429a <tcp_write_checks+0xd6>
 801426c:	4b0d      	ldr	r3, [pc, #52]	; (80142a4 <tcp_write_checks+0xe0>)
 801426e:	f240 1255 	movw	r2, #341	; 0x155
 8014272:	490f      	ldr	r1, [pc, #60]	; (80142b0 <tcp_write_checks+0xec>)
 8014274:	480d      	ldr	r0, [pc, #52]	; (80142ac <tcp_write_checks+0xe8>)
 8014276:	f004 fedd 	bl	8019034 <iprintf>
 801427a:	e00e      	b.n	801429a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014280:	2b00      	cmp	r3, #0
 8014282:	d103      	bne.n	801428c <tcp_write_checks+0xc8>
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014288:	2b00      	cmp	r3, #0
 801428a:	d006      	beq.n	801429a <tcp_write_checks+0xd6>
 801428c:	4b05      	ldr	r3, [pc, #20]	; (80142a4 <tcp_write_checks+0xe0>)
 801428e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8014292:	4908      	ldr	r1, [pc, #32]	; (80142b4 <tcp_write_checks+0xf0>)
 8014294:	4805      	ldr	r0, [pc, #20]	; (80142ac <tcp_write_checks+0xe8>)
 8014296:	f004 fecd 	bl	8019034 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801429a:	2300      	movs	r3, #0
}
 801429c:	4618      	mov	r0, r3
 801429e:	3708      	adds	r7, #8
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	0801b844 	.word	0x0801b844
 80142a8:	0801b954 	.word	0x0801b954
 80142ac:	0801b898 	.word	0x0801b898
 80142b0:	0801b974 	.word	0x0801b974
 80142b4:	0801b9b0 	.word	0x0801b9b0

080142b8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80142b8:	b590      	push	{r4, r7, lr}
 80142ba:	b09b      	sub	sp, #108	; 0x6c
 80142bc:	af04      	add	r7, sp, #16
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	60b9      	str	r1, [r7, #8]
 80142c2:	4611      	mov	r1, r2
 80142c4:	461a      	mov	r2, r3
 80142c6:	460b      	mov	r3, r1
 80142c8:	80fb      	strh	r3, [r7, #6]
 80142ca:	4613      	mov	r3, r2
 80142cc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80142ce:	2300      	movs	r3, #0
 80142d0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80142d2:	2300      	movs	r3, #0
 80142d4:	653b      	str	r3, [r7, #80]	; 0x50
 80142d6:	2300      	movs	r3, #0
 80142d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80142da:	2300      	movs	r3, #0
 80142dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80142de:	2300      	movs	r3, #0
 80142e0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80142e2:	2300      	movs	r3, #0
 80142e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80142e8:	2300      	movs	r3, #0
 80142ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80142ee:	2300      	movs	r3, #0
 80142f0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80142f2:	2300      	movs	r3, #0
 80142f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80142f6:	2300      	movs	r3, #0
 80142f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d109      	bne.n	8014314 <tcp_write+0x5c>
 8014300:	4ba4      	ldr	r3, [pc, #656]	; (8014594 <tcp_write+0x2dc>)
 8014302:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8014306:	49a4      	ldr	r1, [pc, #656]	; (8014598 <tcp_write+0x2e0>)
 8014308:	48a4      	ldr	r0, [pc, #656]	; (801459c <tcp_write+0x2e4>)
 801430a:	f004 fe93 	bl	8019034 <iprintf>
 801430e:	f06f 030f 	mvn.w	r3, #15
 8014312:	e32a      	b.n	801496a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801431a:	085b      	lsrs	r3, r3, #1
 801431c:	b29a      	uxth	r2, r3
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014322:	4293      	cmp	r3, r2
 8014324:	bf28      	it	cs
 8014326:	4613      	movcs	r3, r2
 8014328:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801432a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801432c:	2b00      	cmp	r3, #0
 801432e:	d102      	bne.n	8014336 <tcp_write+0x7e>
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014334:	e000      	b.n	8014338 <tcp_write+0x80>
 8014336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014338:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d109      	bne.n	8014354 <tcp_write+0x9c>
 8014340:	4b94      	ldr	r3, [pc, #592]	; (8014594 <tcp_write+0x2dc>)
 8014342:	f240 12ad 	movw	r2, #429	; 0x1ad
 8014346:	4996      	ldr	r1, [pc, #600]	; (80145a0 <tcp_write+0x2e8>)
 8014348:	4894      	ldr	r0, [pc, #592]	; (801459c <tcp_write+0x2e4>)
 801434a:	f004 fe73 	bl	8019034 <iprintf>
 801434e:	f06f 030f 	mvn.w	r3, #15
 8014352:	e30a      	b.n	801496a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014354:	88fb      	ldrh	r3, [r7, #6]
 8014356:	4619      	mov	r1, r3
 8014358:	68f8      	ldr	r0, [r7, #12]
 801435a:	f7ff ff33 	bl	80141c4 <tcp_write_checks>
 801435e:	4603      	mov	r3, r0
 8014360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014364:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014368:	2b00      	cmp	r3, #0
 801436a:	d002      	beq.n	8014372 <tcp_write+0xba>
    return err;
 801436c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014370:	e2fb      	b.n	801496a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014378:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801437c:	2300      	movs	r3, #0
 801437e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014386:	2b00      	cmp	r3, #0
 8014388:	f000 80f6 	beq.w	8014578 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014390:	653b      	str	r3, [r7, #80]	; 0x50
 8014392:	e002      	b.n	801439a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8014394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801439a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d1f8      	bne.n	8014394 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80143a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143a4:	7a9b      	ldrb	r3, [r3, #10]
 80143a6:	009b      	lsls	r3, r3, #2
 80143a8:	b29b      	uxth	r3, r3
 80143aa:	f003 0304 	and.w	r3, r3, #4
 80143ae:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80143b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80143b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143b4:	891b      	ldrh	r3, [r3, #8]
 80143b6:	4619      	mov	r1, r3
 80143b8:	8c3b      	ldrh	r3, [r7, #32]
 80143ba:	440b      	add	r3, r1
 80143bc:	429a      	cmp	r2, r3
 80143be:	da06      	bge.n	80143ce <tcp_write+0x116>
 80143c0:	4b74      	ldr	r3, [pc, #464]	; (8014594 <tcp_write+0x2dc>)
 80143c2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80143c6:	4977      	ldr	r1, [pc, #476]	; (80145a4 <tcp_write+0x2ec>)
 80143c8:	4874      	ldr	r0, [pc, #464]	; (801459c <tcp_write+0x2e4>)
 80143ca:	f004 fe33 	bl	8019034 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80143ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143d0:	891a      	ldrh	r2, [r3, #8]
 80143d2:	8c3b      	ldrh	r3, [r7, #32]
 80143d4:	4413      	add	r3, r2
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80143da:	1ad3      	subs	r3, r2, r3
 80143dc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80143e4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80143e6:	8a7b      	ldrh	r3, [r7, #18]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d026      	beq.n	801443a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80143ec:	8a7b      	ldrh	r3, [r7, #18]
 80143ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80143f0:	429a      	cmp	r2, r3
 80143f2:	d206      	bcs.n	8014402 <tcp_write+0x14a>
 80143f4:	4b67      	ldr	r3, [pc, #412]	; (8014594 <tcp_write+0x2dc>)
 80143f6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80143fa:	496b      	ldr	r1, [pc, #428]	; (80145a8 <tcp_write+0x2f0>)
 80143fc:	4867      	ldr	r0, [pc, #412]	; (801459c <tcp_write+0x2e4>)
 80143fe:	f004 fe19 	bl	8019034 <iprintf>
      seg = last_unsent;
 8014402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014404:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014406:	8a7b      	ldrh	r3, [r7, #18]
 8014408:	88fa      	ldrh	r2, [r7, #6]
 801440a:	4293      	cmp	r3, r2
 801440c:	bf28      	it	cs
 801440e:	4613      	movcs	r3, r2
 8014410:	b29b      	uxth	r3, r3
 8014412:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014414:	4293      	cmp	r3, r2
 8014416:	bf28      	it	cs
 8014418:	4613      	movcs	r3, r2
 801441a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801441c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014420:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014422:	4413      	add	r3, r2
 8014424:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014428:	8a7a      	ldrh	r2, [r7, #18]
 801442a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801442c:	1ad3      	subs	r3, r2, r3
 801442e:	b29b      	uxth	r3, r3
 8014430:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014432:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014434:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014436:	1ad3      	subs	r3, r2, r3
 8014438:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801443a:	8a7b      	ldrh	r3, [r7, #18]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d00b      	beq.n	8014458 <tcp_write+0x1a0>
 8014440:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014444:	88fb      	ldrh	r3, [r7, #6]
 8014446:	429a      	cmp	r2, r3
 8014448:	d006      	beq.n	8014458 <tcp_write+0x1a0>
 801444a:	4b52      	ldr	r3, [pc, #328]	; (8014594 <tcp_write+0x2dc>)
 801444c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014450:	4956      	ldr	r1, [pc, #344]	; (80145ac <tcp_write+0x2f4>)
 8014452:	4852      	ldr	r0, [pc, #328]	; (801459c <tcp_write+0x2e4>)
 8014454:	f004 fdee 	bl	8019034 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014458:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801445c:	88fb      	ldrh	r3, [r7, #6]
 801445e:	429a      	cmp	r2, r3
 8014460:	f080 8167 	bcs.w	8014732 <tcp_write+0x47a>
 8014464:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014466:	2b00      	cmp	r3, #0
 8014468:	f000 8163 	beq.w	8014732 <tcp_write+0x47a>
 801446c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801446e:	891b      	ldrh	r3, [r3, #8]
 8014470:	2b00      	cmp	r3, #0
 8014472:	f000 815e 	beq.w	8014732 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014476:	88fa      	ldrh	r2, [r7, #6]
 8014478:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801447c:	1ad2      	subs	r2, r2, r3
 801447e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014480:	4293      	cmp	r3, r2
 8014482:	bfa8      	it	ge
 8014484:	4613      	movge	r3, r2
 8014486:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801448a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801448c:	797b      	ldrb	r3, [r7, #5]
 801448e:	f003 0301 	and.w	r3, r3, #1
 8014492:	2b00      	cmp	r3, #0
 8014494:	d027      	beq.n	80144e6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014496:	f107 0012 	add.w	r0, r7, #18
 801449a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801449c:	8bf9      	ldrh	r1, [r7, #30]
 801449e:	2301      	movs	r3, #1
 80144a0:	9302      	str	r3, [sp, #8]
 80144a2:	797b      	ldrb	r3, [r7, #5]
 80144a4:	9301      	str	r3, [sp, #4]
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	9300      	str	r3, [sp, #0]
 80144aa:	4603      	mov	r3, r0
 80144ac:	2000      	movs	r0, #0
 80144ae:	f7ff fe0f 	bl	80140d0 <tcp_pbuf_prealloc>
 80144b2:	6578      	str	r0, [r7, #84]	; 0x54
 80144b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	f000 8225 	beq.w	8014906 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80144bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144be:	6858      	ldr	r0, [r3, #4]
 80144c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80144c4:	68ba      	ldr	r2, [r7, #8]
 80144c6:	4413      	add	r3, r2
 80144c8:	8bfa      	ldrh	r2, [r7, #30]
 80144ca:	4619      	mov	r1, r3
 80144cc:	f004 fd41 	bl	8018f52 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80144d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80144d2:	f7fb f9e5 	bl	800f8a0 <pbuf_clen>
 80144d6:	4603      	mov	r3, r0
 80144d8:	461a      	mov	r2, r3
 80144da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80144de:	4413      	add	r3, r2
 80144e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80144e4:	e041      	b.n	801456a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80144e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144e8:	685b      	ldr	r3, [r3, #4]
 80144ea:	637b      	str	r3, [r7, #52]	; 0x34
 80144ec:	e002      	b.n	80144f4 <tcp_write+0x23c>
 80144ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	637b      	str	r3, [r7, #52]	; 0x34
 80144f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d1f8      	bne.n	80144ee <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80144fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144fe:	7b1b      	ldrb	r3, [r3, #12]
 8014500:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014504:	2b00      	cmp	r3, #0
 8014506:	d115      	bne.n	8014534 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801450a:	685b      	ldr	r3, [r3, #4]
 801450c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801450e:	8952      	ldrh	r2, [r2, #10]
 8014510:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014512:	68ba      	ldr	r2, [r7, #8]
 8014514:	429a      	cmp	r2, r3
 8014516:	d10d      	bne.n	8014534 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014518:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801451c:	2b00      	cmp	r3, #0
 801451e:	d006      	beq.n	801452e <tcp_write+0x276>
 8014520:	4b1c      	ldr	r3, [pc, #112]	; (8014594 <tcp_write+0x2dc>)
 8014522:	f240 2231 	movw	r2, #561	; 0x231
 8014526:	4922      	ldr	r1, [pc, #136]	; (80145b0 <tcp_write+0x2f8>)
 8014528:	481c      	ldr	r0, [pc, #112]	; (801459c <tcp_write+0x2e4>)
 801452a:	f004 fd83 	bl	8019034 <iprintf>
          extendlen = seglen;
 801452e:	8bfb      	ldrh	r3, [r7, #30]
 8014530:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014532:	e01a      	b.n	801456a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014534:	8bfb      	ldrh	r3, [r7, #30]
 8014536:	2201      	movs	r2, #1
 8014538:	4619      	mov	r1, r3
 801453a:	2000      	movs	r0, #0
 801453c:	f7fa fe3e 	bl	800f1bc <pbuf_alloc>
 8014540:	6578      	str	r0, [r7, #84]	; 0x54
 8014542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014544:	2b00      	cmp	r3, #0
 8014546:	f000 81e0 	beq.w	801490a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801454a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801454e:	68ba      	ldr	r2, [r7, #8]
 8014550:	441a      	add	r2, r3
 8014552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014554:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014556:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014558:	f7fb f9a2 	bl	800f8a0 <pbuf_clen>
 801455c:	4603      	mov	r3, r0
 801455e:	461a      	mov	r2, r3
 8014560:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014564:	4413      	add	r3, r2
 8014566:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801456a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801456e:	8bfb      	ldrh	r3, [r7, #30]
 8014570:	4413      	add	r3, r2
 8014572:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014576:	e0dc      	b.n	8014732 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801457e:	2b00      	cmp	r3, #0
 8014580:	f000 80d7 	beq.w	8014732 <tcp_write+0x47a>
 8014584:	4b03      	ldr	r3, [pc, #12]	; (8014594 <tcp_write+0x2dc>)
 8014586:	f240 224a 	movw	r2, #586	; 0x24a
 801458a:	490a      	ldr	r1, [pc, #40]	; (80145b4 <tcp_write+0x2fc>)
 801458c:	4803      	ldr	r0, [pc, #12]	; (801459c <tcp_write+0x2e4>)
 801458e:	f004 fd51 	bl	8019034 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014592:	e0ce      	b.n	8014732 <tcp_write+0x47a>
 8014594:	0801b844 	.word	0x0801b844
 8014598:	0801b9e4 	.word	0x0801b9e4
 801459c:	0801b898 	.word	0x0801b898
 80145a0:	0801b9fc 	.word	0x0801b9fc
 80145a4:	0801ba30 	.word	0x0801ba30
 80145a8:	0801ba48 	.word	0x0801ba48
 80145ac:	0801ba68 	.word	0x0801ba68
 80145b0:	0801ba88 	.word	0x0801ba88
 80145b4:	0801bab4 	.word	0x0801bab4
    struct pbuf *p;
    u16_t left = len - pos;
 80145b8:	88fa      	ldrh	r2, [r7, #6]
 80145ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80145be:	1ad3      	subs	r3, r2, r3
 80145c0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80145c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80145ca:	1ad3      	subs	r3, r2, r3
 80145cc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80145ce:	8b7a      	ldrh	r2, [r7, #26]
 80145d0:	8bbb      	ldrh	r3, [r7, #28]
 80145d2:	4293      	cmp	r3, r2
 80145d4:	bf28      	it	cs
 80145d6:	4613      	movcs	r3, r2
 80145d8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80145da:	797b      	ldrb	r3, [r7, #5]
 80145dc:	f003 0301 	and.w	r3, r3, #1
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d036      	beq.n	8014652 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80145e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80145e8:	b29a      	uxth	r2, r3
 80145ea:	8b3b      	ldrh	r3, [r7, #24]
 80145ec:	4413      	add	r3, r2
 80145ee:	b299      	uxth	r1, r3
 80145f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	bf0c      	ite	eq
 80145f6:	2301      	moveq	r3, #1
 80145f8:	2300      	movne	r3, #0
 80145fa:	b2db      	uxtb	r3, r3
 80145fc:	f107 0012 	add.w	r0, r7, #18
 8014600:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014602:	9302      	str	r3, [sp, #8]
 8014604:	797b      	ldrb	r3, [r7, #5]
 8014606:	9301      	str	r3, [sp, #4]
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	9300      	str	r3, [sp, #0]
 801460c:	4603      	mov	r3, r0
 801460e:	2036      	movs	r0, #54	; 0x36
 8014610:	f7ff fd5e 	bl	80140d0 <tcp_pbuf_prealloc>
 8014614:	6338      	str	r0, [r7, #48]	; 0x30
 8014616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014618:	2b00      	cmp	r3, #0
 801461a:	f000 8178 	beq.w	801490e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014620:	895b      	ldrh	r3, [r3, #10]
 8014622:	8b3a      	ldrh	r2, [r7, #24]
 8014624:	429a      	cmp	r2, r3
 8014626:	d906      	bls.n	8014636 <tcp_write+0x37e>
 8014628:	4b8c      	ldr	r3, [pc, #560]	; (801485c <tcp_write+0x5a4>)
 801462a:	f240 2266 	movw	r2, #614	; 0x266
 801462e:	498c      	ldr	r1, [pc, #560]	; (8014860 <tcp_write+0x5a8>)
 8014630:	488c      	ldr	r0, [pc, #560]	; (8014864 <tcp_write+0x5ac>)
 8014632:	f004 fcff 	bl	8019034 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014638:	685a      	ldr	r2, [r3, #4]
 801463a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801463e:	18d0      	adds	r0, r2, r3
 8014640:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014644:	68ba      	ldr	r2, [r7, #8]
 8014646:	4413      	add	r3, r2
 8014648:	8b3a      	ldrh	r2, [r7, #24]
 801464a:	4619      	mov	r1, r3
 801464c:	f004 fc81 	bl	8018f52 <memcpy>
 8014650:	e02f      	b.n	80146b2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014652:	8a7b      	ldrh	r3, [r7, #18]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d006      	beq.n	8014666 <tcp_write+0x3ae>
 8014658:	4b80      	ldr	r3, [pc, #512]	; (801485c <tcp_write+0x5a4>)
 801465a:	f240 2271 	movw	r2, #625	; 0x271
 801465e:	4982      	ldr	r1, [pc, #520]	; (8014868 <tcp_write+0x5b0>)
 8014660:	4880      	ldr	r0, [pc, #512]	; (8014864 <tcp_write+0x5ac>)
 8014662:	f004 fce7 	bl	8019034 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014666:	8b3b      	ldrh	r3, [r7, #24]
 8014668:	2201      	movs	r2, #1
 801466a:	4619      	mov	r1, r3
 801466c:	2036      	movs	r0, #54	; 0x36
 801466e:	f7fa fda5 	bl	800f1bc <pbuf_alloc>
 8014672:	6178      	str	r0, [r7, #20]
 8014674:	697b      	ldr	r3, [r7, #20]
 8014676:	2b00      	cmp	r3, #0
 8014678:	f000 814b 	beq.w	8014912 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801467c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014680:	68ba      	ldr	r2, [r7, #8]
 8014682:	441a      	add	r2, r3
 8014684:	697b      	ldr	r3, [r7, #20]
 8014686:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014688:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801468c:	b29b      	uxth	r3, r3
 801468e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014692:	4619      	mov	r1, r3
 8014694:	2036      	movs	r0, #54	; 0x36
 8014696:	f7fa fd91 	bl	800f1bc <pbuf_alloc>
 801469a:	6338      	str	r0, [r7, #48]	; 0x30
 801469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d103      	bne.n	80146aa <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80146a2:	6978      	ldr	r0, [r7, #20]
 80146a4:	f7fb f86e 	bl	800f784 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80146a8:	e136      	b.n	8014918 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80146aa:	6979      	ldr	r1, [r7, #20]
 80146ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146ae:	f7fb f937 	bl	800f920 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80146b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146b4:	f7fb f8f4 	bl	800f8a0 <pbuf_clen>
 80146b8:	4603      	mov	r3, r0
 80146ba:	461a      	mov	r2, r3
 80146bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80146c0:	4413      	add	r3, r2
 80146c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80146c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80146ca:	2b09      	cmp	r3, #9
 80146cc:	d903      	bls.n	80146d6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80146ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146d0:	f7fb f858 	bl	800f784 <pbuf_free>
      goto memerr;
 80146d4:	e120      	b.n	8014918 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80146da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80146de:	441a      	add	r2, r3
 80146e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80146e4:	9300      	str	r3, [sp, #0]
 80146e6:	4613      	mov	r3, r2
 80146e8:	2200      	movs	r2, #0
 80146ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80146ec:	68f8      	ldr	r0, [r7, #12]
 80146ee:	f7ff fc51 	bl	8013f94 <tcp_create_segment>
 80146f2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80146f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	f000 810d 	beq.w	8014916 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80146fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d102      	bne.n	8014708 <tcp_write+0x450>
      queue = seg;
 8014702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014704:	647b      	str	r3, [r7, #68]	; 0x44
 8014706:	e00c      	b.n	8014722 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801470a:	2b00      	cmp	r3, #0
 801470c:	d106      	bne.n	801471c <tcp_write+0x464>
 801470e:	4b53      	ldr	r3, [pc, #332]	; (801485c <tcp_write+0x5a4>)
 8014710:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014714:	4955      	ldr	r1, [pc, #340]	; (801486c <tcp_write+0x5b4>)
 8014716:	4853      	ldr	r0, [pc, #332]	; (8014864 <tcp_write+0x5ac>)
 8014718:	f004 fc8c 	bl	8019034 <iprintf>
      prev_seg->next = seg;
 801471c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801471e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014720:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014724:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014726:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801472a:	8b3b      	ldrh	r3, [r7, #24]
 801472c:	4413      	add	r3, r2
 801472e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8014732:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014736:	88fb      	ldrh	r3, [r7, #6]
 8014738:	429a      	cmp	r2, r3
 801473a:	f4ff af3d 	bcc.w	80145b8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801473e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014740:	2b00      	cmp	r3, #0
 8014742:	d02c      	beq.n	801479e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014746:	685b      	ldr	r3, [r3, #4]
 8014748:	62fb      	str	r3, [r7, #44]	; 0x2c
 801474a:	e01e      	b.n	801478a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801474e:	891a      	ldrh	r2, [r3, #8]
 8014750:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014752:	4413      	add	r3, r2
 8014754:	b29a      	uxth	r2, r3
 8014756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014758:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d110      	bne.n	8014784 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014768:	8952      	ldrh	r2, [r2, #10]
 801476a:	4413      	add	r3, r2
 801476c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801476e:	68b9      	ldr	r1, [r7, #8]
 8014770:	4618      	mov	r0, r3
 8014772:	f004 fbee 	bl	8018f52 <memcpy>
        p->len += oversize_used;
 8014776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014778:	895a      	ldrh	r2, [r3, #10]
 801477a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801477c:	4413      	add	r3, r2
 801477e:	b29a      	uxth	r2, r3
 8014780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014782:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	62fb      	str	r3, [r7, #44]	; 0x2c
 801478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801478c:	2b00      	cmp	r3, #0
 801478e:	d1dd      	bne.n	801474c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8014790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014792:	891a      	ldrh	r2, [r3, #8]
 8014794:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014796:	4413      	add	r3, r2
 8014798:	b29a      	uxth	r2, r3
 801479a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801479c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801479e:	8a7a      	ldrh	r2, [r7, #18]
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80147a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d018      	beq.n	80147de <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80147ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d106      	bne.n	80147c0 <tcp_write+0x508>
 80147b2:	4b2a      	ldr	r3, [pc, #168]	; (801485c <tcp_write+0x5a4>)
 80147b4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80147b8:	492d      	ldr	r1, [pc, #180]	; (8014870 <tcp_write+0x5b8>)
 80147ba:	482a      	ldr	r0, [pc, #168]	; (8014864 <tcp_write+0x5ac>)
 80147bc:	f004 fc3a 	bl	8019034 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80147c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147c2:	685b      	ldr	r3, [r3, #4]
 80147c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80147c6:	4618      	mov	r0, r3
 80147c8:	f7fb f8aa 	bl	800f920 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80147cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147ce:	891a      	ldrh	r2, [r3, #8]
 80147d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147d2:	891b      	ldrh	r3, [r3, #8]
 80147d4:	4413      	add	r3, r2
 80147d6:	b29a      	uxth	r2, r3
 80147d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147da:	811a      	strh	r2, [r3, #8]
 80147dc:	e037      	b.n	801484e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80147de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d034      	beq.n	801484e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80147e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d003      	beq.n	80147f2 <tcp_write+0x53a>
 80147ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147ec:	685b      	ldr	r3, [r3, #4]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d106      	bne.n	8014800 <tcp_write+0x548>
 80147f2:	4b1a      	ldr	r3, [pc, #104]	; (801485c <tcp_write+0x5a4>)
 80147f4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80147f8:	491e      	ldr	r1, [pc, #120]	; (8014874 <tcp_write+0x5bc>)
 80147fa:	481a      	ldr	r0, [pc, #104]	; (8014864 <tcp_write+0x5ac>)
 80147fc:	f004 fc1a 	bl	8019034 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014802:	685b      	ldr	r3, [r3, #4]
 8014804:	62bb      	str	r3, [r7, #40]	; 0x28
 8014806:	e009      	b.n	801481c <tcp_write+0x564>
      p->tot_len += extendlen;
 8014808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801480a:	891a      	ldrh	r2, [r3, #8]
 801480c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801480e:	4413      	add	r3, r2
 8014810:	b29a      	uxth	r2, r3
 8014812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014814:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	62bb      	str	r3, [r7, #40]	; 0x28
 801481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d1f1      	bne.n	8014808 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8014824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014826:	891a      	ldrh	r2, [r3, #8]
 8014828:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801482a:	4413      	add	r3, r2
 801482c:	b29a      	uxth	r2, r3
 801482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014830:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014834:	895a      	ldrh	r2, [r3, #10]
 8014836:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014838:	4413      	add	r3, r2
 801483a:	b29a      	uxth	r2, r3
 801483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801483e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014842:	891a      	ldrh	r2, [r3, #8]
 8014844:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014846:	4413      	add	r3, r2
 8014848:	b29a      	uxth	r2, r3
 801484a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801484c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801484e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014850:	2b00      	cmp	r3, #0
 8014852:	d111      	bne.n	8014878 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014858:	66da      	str	r2, [r3, #108]	; 0x6c
 801485a:	e010      	b.n	801487e <tcp_write+0x5c6>
 801485c:	0801b844 	.word	0x0801b844
 8014860:	0801bae4 	.word	0x0801bae4
 8014864:	0801b898 	.word	0x0801b898
 8014868:	0801bb24 	.word	0x0801bb24
 801486c:	0801bb34 	.word	0x0801bb34
 8014870:	0801bb48 	.word	0x0801bb48
 8014874:	0801bb80 	.word	0x0801bb80
  } else {
    last_unsent->next = queue;
 8014878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801487a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801487c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014882:	88fb      	ldrh	r3, [r7, #6]
 8014884:	441a      	add	r2, r3
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014890:	88fb      	ldrh	r3, [r7, #6]
 8014892:	1ad3      	subs	r3, r2, r3
 8014894:	b29a      	uxth	r2, r3
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80148a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d00e      	beq.n	80148ce <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d10a      	bne.n	80148ce <tcp_write+0x616>
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d106      	bne.n	80148ce <tcp_write+0x616>
 80148c0:	4b2c      	ldr	r3, [pc, #176]	; (8014974 <tcp_write+0x6bc>)
 80148c2:	f240 3212 	movw	r2, #786	; 0x312
 80148c6:	492c      	ldr	r1, [pc, #176]	; (8014978 <tcp_write+0x6c0>)
 80148c8:	482c      	ldr	r0, [pc, #176]	; (801497c <tcp_write+0x6c4>)
 80148ca:	f004 fbb3 	bl	8019034 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80148ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d016      	beq.n	8014902 <tcp_write+0x64a>
 80148d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148d6:	68db      	ldr	r3, [r3, #12]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d012      	beq.n	8014902 <tcp_write+0x64a>
 80148dc:	797b      	ldrb	r3, [r7, #5]
 80148de:	f003 0302 	and.w	r3, r3, #2
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d10d      	bne.n	8014902 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80148e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148e8:	68db      	ldr	r3, [r3, #12]
 80148ea:	899b      	ldrh	r3, [r3, #12]
 80148ec:	b29c      	uxth	r4, r3
 80148ee:	2008      	movs	r0, #8
 80148f0:	f7f9 fa9e 	bl	800de30 <lwip_htons>
 80148f4:	4603      	mov	r3, r0
 80148f6:	461a      	mov	r2, r3
 80148f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	4322      	orrs	r2, r4
 80148fe:	b292      	uxth	r2, r2
 8014900:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014902:	2300      	movs	r3, #0
 8014904:	e031      	b.n	801496a <tcp_write+0x6b2>
          goto memerr;
 8014906:	bf00      	nop
 8014908:	e006      	b.n	8014918 <tcp_write+0x660>
            goto memerr;
 801490a:	bf00      	nop
 801490c:	e004      	b.n	8014918 <tcp_write+0x660>
        goto memerr;
 801490e:	bf00      	nop
 8014910:	e002      	b.n	8014918 <tcp_write+0x660>
        goto memerr;
 8014912:	bf00      	nop
 8014914:	e000      	b.n	8014918 <tcp_write+0x660>
      goto memerr;
 8014916:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	8b5b      	ldrh	r3, [r3, #26]
 801491c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014920:	b29a      	uxth	r2, r3
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014928:	2b00      	cmp	r3, #0
 801492a:	d002      	beq.n	8014932 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801492c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801492e:	f7fa ff29 	bl	800f784 <pbuf_free>
  }
  if (queue != NULL) {
 8014932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014934:	2b00      	cmp	r3, #0
 8014936:	d002      	beq.n	801493e <tcp_write+0x686>
    tcp_segs_free(queue);
 8014938:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801493a:	f7fc fb57 	bl	8010fec <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014944:	2b00      	cmp	r3, #0
 8014946:	d00e      	beq.n	8014966 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801494c:	2b00      	cmp	r3, #0
 801494e:	d10a      	bne.n	8014966 <tcp_write+0x6ae>
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014954:	2b00      	cmp	r3, #0
 8014956:	d106      	bne.n	8014966 <tcp_write+0x6ae>
 8014958:	4b06      	ldr	r3, [pc, #24]	; (8014974 <tcp_write+0x6bc>)
 801495a:	f240 3227 	movw	r2, #807	; 0x327
 801495e:	4906      	ldr	r1, [pc, #24]	; (8014978 <tcp_write+0x6c0>)
 8014960:	4806      	ldr	r0, [pc, #24]	; (801497c <tcp_write+0x6c4>)
 8014962:	f004 fb67 	bl	8019034 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014966:	f04f 33ff 	mov.w	r3, #4294967295
}
 801496a:	4618      	mov	r0, r3
 801496c:	375c      	adds	r7, #92	; 0x5c
 801496e:	46bd      	mov	sp, r7
 8014970:	bd90      	pop	{r4, r7, pc}
 8014972:	bf00      	nop
 8014974:	0801b844 	.word	0x0801b844
 8014978:	0801bbb8 	.word	0x0801bbb8
 801497c:	0801b898 	.word	0x0801b898

08014980 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014980:	b590      	push	{r4, r7, lr}
 8014982:	b08b      	sub	sp, #44	; 0x2c
 8014984:	af02      	add	r7, sp, #8
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	460b      	mov	r3, r1
 801498a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801498c:	2300      	movs	r3, #0
 801498e:	61fb      	str	r3, [r7, #28]
 8014990:	2300      	movs	r3, #0
 8014992:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014994:	2300      	movs	r3, #0
 8014996:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d106      	bne.n	80149ac <tcp_split_unsent_seg+0x2c>
 801499e:	4b95      	ldr	r3, [pc, #596]	; (8014bf4 <tcp_split_unsent_seg+0x274>)
 80149a0:	f240 324b 	movw	r2, #843	; 0x34b
 80149a4:	4994      	ldr	r1, [pc, #592]	; (8014bf8 <tcp_split_unsent_seg+0x278>)
 80149a6:	4895      	ldr	r0, [pc, #596]	; (8014bfc <tcp_split_unsent_seg+0x27c>)
 80149a8:	f004 fb44 	bl	8019034 <iprintf>

  useg = pcb->unsent;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d102      	bne.n	80149be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80149b8:	f04f 33ff 	mov.w	r3, #4294967295
 80149bc:	e116      	b.n	8014bec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80149be:	887b      	ldrh	r3, [r7, #2]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d109      	bne.n	80149d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80149c4:	4b8b      	ldr	r3, [pc, #556]	; (8014bf4 <tcp_split_unsent_seg+0x274>)
 80149c6:	f240 3253 	movw	r2, #851	; 0x353
 80149ca:	498d      	ldr	r1, [pc, #564]	; (8014c00 <tcp_split_unsent_seg+0x280>)
 80149cc:	488b      	ldr	r0, [pc, #556]	; (8014bfc <tcp_split_unsent_seg+0x27c>)
 80149ce:	f004 fb31 	bl	8019034 <iprintf>
    return ERR_VAL;
 80149d2:	f06f 0305 	mvn.w	r3, #5
 80149d6:	e109      	b.n	8014bec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80149d8:	697b      	ldr	r3, [r7, #20]
 80149da:	891b      	ldrh	r3, [r3, #8]
 80149dc:	887a      	ldrh	r2, [r7, #2]
 80149de:	429a      	cmp	r2, r3
 80149e0:	d301      	bcc.n	80149e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80149e2:	2300      	movs	r3, #0
 80149e4:	e102      	b.n	8014bec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149ea:	887a      	ldrh	r2, [r7, #2]
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d906      	bls.n	80149fe <tcp_split_unsent_seg+0x7e>
 80149f0:	4b80      	ldr	r3, [pc, #512]	; (8014bf4 <tcp_split_unsent_seg+0x274>)
 80149f2:	f240 325b 	movw	r2, #859	; 0x35b
 80149f6:	4983      	ldr	r1, [pc, #524]	; (8014c04 <tcp_split_unsent_seg+0x284>)
 80149f8:	4880      	ldr	r0, [pc, #512]	; (8014bfc <tcp_split_unsent_seg+0x27c>)
 80149fa:	f004 fb1b 	bl	8019034 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80149fe:	697b      	ldr	r3, [r7, #20]
 8014a00:	891b      	ldrh	r3, [r3, #8]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d106      	bne.n	8014a14 <tcp_split_unsent_seg+0x94>
 8014a06:	4b7b      	ldr	r3, [pc, #492]	; (8014bf4 <tcp_split_unsent_seg+0x274>)
 8014a08:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014a0c:	497e      	ldr	r1, [pc, #504]	; (8014c08 <tcp_split_unsent_seg+0x288>)
 8014a0e:	487b      	ldr	r0, [pc, #492]	; (8014bfc <tcp_split_unsent_seg+0x27c>)
 8014a10:	f004 fb10 	bl	8019034 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	7a9b      	ldrb	r3, [r3, #10]
 8014a18:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014a1a:	7bfb      	ldrb	r3, [r7, #15]
 8014a1c:	009b      	lsls	r3, r3, #2
 8014a1e:	b2db      	uxtb	r3, r3
 8014a20:	f003 0304 	and.w	r3, r3, #4
 8014a24:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014a26:	697b      	ldr	r3, [r7, #20]
 8014a28:	891a      	ldrh	r2, [r3, #8]
 8014a2a:	887b      	ldrh	r3, [r7, #2]
 8014a2c:	1ad3      	subs	r3, r2, r3
 8014a2e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014a30:	7bbb      	ldrb	r3, [r7, #14]
 8014a32:	b29a      	uxth	r2, r3
 8014a34:	89bb      	ldrh	r3, [r7, #12]
 8014a36:	4413      	add	r3, r2
 8014a38:	b29b      	uxth	r3, r3
 8014a3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a3e:	4619      	mov	r1, r3
 8014a40:	2036      	movs	r0, #54	; 0x36
 8014a42:	f7fa fbbb 	bl	800f1bc <pbuf_alloc>
 8014a46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	f000 80b7 	beq.w	8014bbe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	685b      	ldr	r3, [r3, #4]
 8014a54:	891a      	ldrh	r2, [r3, #8]
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	891b      	ldrh	r3, [r3, #8]
 8014a5a:	1ad3      	subs	r3, r2, r3
 8014a5c:	b29a      	uxth	r2, r3
 8014a5e:	887b      	ldrh	r3, [r7, #2]
 8014a60:	4413      	add	r3, r2
 8014a62:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014a64:	697b      	ldr	r3, [r7, #20]
 8014a66:	6858      	ldr	r0, [r3, #4]
 8014a68:	693b      	ldr	r3, [r7, #16]
 8014a6a:	685a      	ldr	r2, [r3, #4]
 8014a6c:	7bbb      	ldrb	r3, [r7, #14]
 8014a6e:	18d1      	adds	r1, r2, r3
 8014a70:	897b      	ldrh	r3, [r7, #10]
 8014a72:	89ba      	ldrh	r2, [r7, #12]
 8014a74:	f7fb f88c 	bl	800fb90 <pbuf_copy_partial>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	461a      	mov	r2, r3
 8014a7c:	89bb      	ldrh	r3, [r7, #12]
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	f040 809f 	bne.w	8014bc2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	68db      	ldr	r3, [r3, #12]
 8014a88:	899b      	ldrh	r3, [r3, #12]
 8014a8a:	b29b      	uxth	r3, r3
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f7f9 f9cf 	bl	800de30 <lwip_htons>
 8014a92:	4603      	mov	r3, r0
 8014a94:	b2db      	uxtb	r3, r3
 8014a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014a9a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014aa0:	7efb      	ldrb	r3, [r7, #27]
 8014aa2:	f003 0308 	and.w	r3, r3, #8
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d007      	beq.n	8014aba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014aaa:	7efb      	ldrb	r3, [r7, #27]
 8014aac:	f023 0308 	bic.w	r3, r3, #8
 8014ab0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014ab2:	7ebb      	ldrb	r3, [r7, #26]
 8014ab4:	f043 0308 	orr.w	r3, r3, #8
 8014ab8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014aba:	7efb      	ldrb	r3, [r7, #27]
 8014abc:	f003 0301 	and.w	r3, r3, #1
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d007      	beq.n	8014ad4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014ac4:	7efb      	ldrb	r3, [r7, #27]
 8014ac6:	f023 0301 	bic.w	r3, r3, #1
 8014aca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014acc:	7ebb      	ldrb	r3, [r7, #26]
 8014ace:	f043 0301 	orr.w	r3, r3, #1
 8014ad2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014ad4:	697b      	ldr	r3, [r7, #20]
 8014ad6:	68db      	ldr	r3, [r3, #12]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	4618      	mov	r0, r3
 8014adc:	f7f9 f9bd 	bl	800de5a <lwip_htonl>
 8014ae0:	4602      	mov	r2, r0
 8014ae2:	887b      	ldrh	r3, [r7, #2]
 8014ae4:	18d1      	adds	r1, r2, r3
 8014ae6:	7eba      	ldrb	r2, [r7, #26]
 8014ae8:	7bfb      	ldrb	r3, [r7, #15]
 8014aea:	9300      	str	r3, [sp, #0]
 8014aec:	460b      	mov	r3, r1
 8014aee:	6939      	ldr	r1, [r7, #16]
 8014af0:	6878      	ldr	r0, [r7, #4]
 8014af2:	f7ff fa4f 	bl	8013f94 <tcp_create_segment>
 8014af6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d063      	beq.n	8014bc6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	685b      	ldr	r3, [r3, #4]
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fa fecc 	bl	800f8a0 <pbuf_clen>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	461a      	mov	r2, r3
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b12:	1a9b      	subs	r3, r3, r2
 8014b14:	b29a      	uxth	r2, r3
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014b1c:	697b      	ldr	r3, [r7, #20]
 8014b1e:	6858      	ldr	r0, [r3, #4]
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	891a      	ldrh	r2, [r3, #8]
 8014b26:	89bb      	ldrh	r3, [r7, #12]
 8014b28:	1ad3      	subs	r3, r2, r3
 8014b2a:	b29b      	uxth	r3, r3
 8014b2c:	4619      	mov	r1, r3
 8014b2e:	f7fa fca3 	bl	800f478 <pbuf_realloc>
  useg->len -= remainder;
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	891a      	ldrh	r2, [r3, #8]
 8014b36:	89bb      	ldrh	r3, [r7, #12]
 8014b38:	1ad3      	subs	r3, r2, r3
 8014b3a:	b29a      	uxth	r2, r3
 8014b3c:	697b      	ldr	r3, [r7, #20]
 8014b3e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014b40:	697b      	ldr	r3, [r7, #20]
 8014b42:	68db      	ldr	r3, [r3, #12]
 8014b44:	899b      	ldrh	r3, [r3, #12]
 8014b46:	b29c      	uxth	r4, r3
 8014b48:	7efb      	ldrb	r3, [r7, #27]
 8014b4a:	b29b      	uxth	r3, r3
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7f9 f96f 	bl	800de30 <lwip_htons>
 8014b52:	4603      	mov	r3, r0
 8014b54:	461a      	mov	r2, r3
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	68db      	ldr	r3, [r3, #12]
 8014b5a:	4322      	orrs	r2, r4
 8014b5c:	b292      	uxth	r2, r2
 8014b5e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	685b      	ldr	r3, [r3, #4]
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7fa fe9b 	bl	800f8a0 <pbuf_clen>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	461a      	mov	r2, r3
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b74:	4413      	add	r3, r2
 8014b76:	b29a      	uxth	r2, r3
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014b7e:	69fb      	ldr	r3, [r7, #28]
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7fa fe8c 	bl	800f8a0 <pbuf_clen>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	461a      	mov	r2, r3
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b92:	4413      	add	r3, r2
 8014b94:	b29a      	uxth	r2, r3
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	681a      	ldr	r2, [r3, #0]
 8014ba0:	69fb      	ldr	r3, [r7, #28]
 8014ba2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	69fa      	ldr	r2, [r7, #28]
 8014ba8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014baa:	69fb      	ldr	r3, [r7, #28]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d103      	bne.n	8014bba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	e016      	b.n	8014bec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014bbe:	bf00      	nop
 8014bc0:	e002      	b.n	8014bc8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014bc2:	bf00      	nop
 8014bc4:	e000      	b.n	8014bc8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014bc6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014bc8:	69fb      	ldr	r3, [r7, #28]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d006      	beq.n	8014bdc <tcp_split_unsent_seg+0x25c>
 8014bce:	4b09      	ldr	r3, [pc, #36]	; (8014bf4 <tcp_split_unsent_seg+0x274>)
 8014bd0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014bd4:	490d      	ldr	r1, [pc, #52]	; (8014c0c <tcp_split_unsent_seg+0x28c>)
 8014bd6:	4809      	ldr	r0, [pc, #36]	; (8014bfc <tcp_split_unsent_seg+0x27c>)
 8014bd8:	f004 fa2c 	bl	8019034 <iprintf>
  if (p != NULL) {
 8014bdc:	693b      	ldr	r3, [r7, #16]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d002      	beq.n	8014be8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014be2:	6938      	ldr	r0, [r7, #16]
 8014be4:	f7fa fdce 	bl	800f784 <pbuf_free>
  }

  return ERR_MEM;
 8014be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014bec:	4618      	mov	r0, r3
 8014bee:	3724      	adds	r7, #36	; 0x24
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bd90      	pop	{r4, r7, pc}
 8014bf4:	0801b844 	.word	0x0801b844
 8014bf8:	0801bbd8 	.word	0x0801bbd8
 8014bfc:	0801b898 	.word	0x0801b898
 8014c00:	0801bbfc 	.word	0x0801bbfc
 8014c04:	0801bc20 	.word	0x0801bc20
 8014c08:	0801bc30 	.word	0x0801bc30
 8014c0c:	0801bc40 	.word	0x0801bc40

08014c10 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014c10:	b590      	push	{r4, r7, lr}
 8014c12:	b085      	sub	sp, #20
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d106      	bne.n	8014c2c <tcp_send_fin+0x1c>
 8014c1e:	4b21      	ldr	r3, [pc, #132]	; (8014ca4 <tcp_send_fin+0x94>)
 8014c20:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014c24:	4920      	ldr	r1, [pc, #128]	; (8014ca8 <tcp_send_fin+0x98>)
 8014c26:	4821      	ldr	r0, [pc, #132]	; (8014cac <tcp_send_fin+0x9c>)
 8014c28:	f004 fa04 	bl	8019034 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d02e      	beq.n	8014c92 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c38:	60fb      	str	r3, [r7, #12]
 8014c3a:	e002      	b.n	8014c42 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d1f8      	bne.n	8014c3c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	68db      	ldr	r3, [r3, #12]
 8014c4e:	899b      	ldrh	r3, [r3, #12]
 8014c50:	b29b      	uxth	r3, r3
 8014c52:	4618      	mov	r0, r3
 8014c54:	f7f9 f8ec 	bl	800de30 <lwip_htons>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	b2db      	uxtb	r3, r3
 8014c5c:	f003 0307 	and.w	r3, r3, #7
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d116      	bne.n	8014c92 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	68db      	ldr	r3, [r3, #12]
 8014c68:	899b      	ldrh	r3, [r3, #12]
 8014c6a:	b29c      	uxth	r4, r3
 8014c6c:	2001      	movs	r0, #1
 8014c6e:	f7f9 f8df 	bl	800de30 <lwip_htons>
 8014c72:	4603      	mov	r3, r0
 8014c74:	461a      	mov	r2, r3
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	68db      	ldr	r3, [r3, #12]
 8014c7a:	4322      	orrs	r2, r4
 8014c7c:	b292      	uxth	r2, r2
 8014c7e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	8b5b      	ldrh	r3, [r3, #26]
 8014c84:	f043 0320 	orr.w	r3, r3, #32
 8014c88:	b29a      	uxth	r2, r3
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014c8e:	2300      	movs	r3, #0
 8014c90:	e004      	b.n	8014c9c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014c92:	2101      	movs	r1, #1
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f000 f80b 	bl	8014cb0 <tcp_enqueue_flags>
 8014c9a:	4603      	mov	r3, r0
}
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	3714      	adds	r7, #20
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd90      	pop	{r4, r7, pc}
 8014ca4:	0801b844 	.word	0x0801b844
 8014ca8:	0801bc4c 	.word	0x0801bc4c
 8014cac:	0801b898 	.word	0x0801b898

08014cb0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b08a      	sub	sp, #40	; 0x28
 8014cb4:	af02      	add	r7, sp, #8
 8014cb6:	6078      	str	r0, [r7, #4]
 8014cb8:	460b      	mov	r3, r1
 8014cba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014cc4:	78fb      	ldrb	r3, [r7, #3]
 8014cc6:	f003 0303 	and.w	r3, r3, #3
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d106      	bne.n	8014cdc <tcp_enqueue_flags+0x2c>
 8014cce:	4b67      	ldr	r3, [pc, #412]	; (8014e6c <tcp_enqueue_flags+0x1bc>)
 8014cd0:	f240 4211 	movw	r2, #1041	; 0x411
 8014cd4:	4966      	ldr	r1, [pc, #408]	; (8014e70 <tcp_enqueue_flags+0x1c0>)
 8014cd6:	4867      	ldr	r0, [pc, #412]	; (8014e74 <tcp_enqueue_flags+0x1c4>)
 8014cd8:	f004 f9ac 	bl	8019034 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d106      	bne.n	8014cf0 <tcp_enqueue_flags+0x40>
 8014ce2:	4b62      	ldr	r3, [pc, #392]	; (8014e6c <tcp_enqueue_flags+0x1bc>)
 8014ce4:	f240 4213 	movw	r2, #1043	; 0x413
 8014ce8:	4963      	ldr	r1, [pc, #396]	; (8014e78 <tcp_enqueue_flags+0x1c8>)
 8014cea:	4862      	ldr	r0, [pc, #392]	; (8014e74 <tcp_enqueue_flags+0x1c4>)
 8014cec:	f004 f9a2 	bl	8019034 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014cf0:	78fb      	ldrb	r3, [r7, #3]
 8014cf2:	f003 0302 	and.w	r3, r3, #2
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d001      	beq.n	8014cfe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014cfa:	2301      	movs	r3, #1
 8014cfc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014cfe:	7ffb      	ldrb	r3, [r7, #31]
 8014d00:	009b      	lsls	r3, r3, #2
 8014d02:	b2db      	uxtb	r3, r3
 8014d04:	f003 0304 	and.w	r3, r3, #4
 8014d08:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014d0a:	7dfb      	ldrb	r3, [r7, #23]
 8014d0c:	b29b      	uxth	r3, r3
 8014d0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d12:	4619      	mov	r1, r3
 8014d14:	2036      	movs	r0, #54	; 0x36
 8014d16:	f7fa fa51 	bl	800f1bc <pbuf_alloc>
 8014d1a:	6138      	str	r0, [r7, #16]
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d109      	bne.n	8014d36 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	8b5b      	ldrh	r3, [r3, #26]
 8014d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d2a:	b29a      	uxth	r2, r3
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014d30:	f04f 33ff 	mov.w	r3, #4294967295
 8014d34:	e095      	b.n	8014e62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	895a      	ldrh	r2, [r3, #10]
 8014d3a:	7dfb      	ldrb	r3, [r7, #23]
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d206      	bcs.n	8014d50 <tcp_enqueue_flags+0xa0>
 8014d42:	4b4a      	ldr	r3, [pc, #296]	; (8014e6c <tcp_enqueue_flags+0x1bc>)
 8014d44:	f240 4239 	movw	r2, #1081	; 0x439
 8014d48:	494c      	ldr	r1, [pc, #304]	; (8014e7c <tcp_enqueue_flags+0x1cc>)
 8014d4a:	484a      	ldr	r0, [pc, #296]	; (8014e74 <tcp_enqueue_flags+0x1c4>)
 8014d4c:	f004 f972 	bl	8019034 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014d54:	78fa      	ldrb	r2, [r7, #3]
 8014d56:	7ffb      	ldrb	r3, [r7, #31]
 8014d58:	9300      	str	r3, [sp, #0]
 8014d5a:	460b      	mov	r3, r1
 8014d5c:	6939      	ldr	r1, [r7, #16]
 8014d5e:	6878      	ldr	r0, [r7, #4]
 8014d60:	f7ff f918 	bl	8013f94 <tcp_create_segment>
 8014d64:	60f8      	str	r0, [r7, #12]
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d109      	bne.n	8014d80 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	8b5b      	ldrh	r3, [r3, #26]
 8014d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d74:	b29a      	uxth	r2, r3
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d7e:	e070      	b.n	8014e62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	68db      	ldr	r3, [r3, #12]
 8014d84:	f003 0303 	and.w	r3, r3, #3
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d006      	beq.n	8014d9a <tcp_enqueue_flags+0xea>
 8014d8c:	4b37      	ldr	r3, [pc, #220]	; (8014e6c <tcp_enqueue_flags+0x1bc>)
 8014d8e:	f240 4242 	movw	r2, #1090	; 0x442
 8014d92:	493b      	ldr	r1, [pc, #236]	; (8014e80 <tcp_enqueue_flags+0x1d0>)
 8014d94:	4837      	ldr	r0, [pc, #220]	; (8014e74 <tcp_enqueue_flags+0x1c4>)
 8014d96:	f004 f94d 	bl	8019034 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	891b      	ldrh	r3, [r3, #8]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d006      	beq.n	8014db0 <tcp_enqueue_flags+0x100>
 8014da2:	4b32      	ldr	r3, [pc, #200]	; (8014e6c <tcp_enqueue_flags+0x1bc>)
 8014da4:	f240 4243 	movw	r2, #1091	; 0x443
 8014da8:	4936      	ldr	r1, [pc, #216]	; (8014e84 <tcp_enqueue_flags+0x1d4>)
 8014daa:	4832      	ldr	r0, [pc, #200]	; (8014e74 <tcp_enqueue_flags+0x1c4>)
 8014dac:	f004 f942 	bl	8019034 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d103      	bne.n	8014dc0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	68fa      	ldr	r2, [r7, #12]
 8014dbc:	66da      	str	r2, [r3, #108]	; 0x6c
 8014dbe:	e00d      	b.n	8014ddc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dc4:	61bb      	str	r3, [r7, #24]
 8014dc6:	e002      	b.n	8014dce <tcp_enqueue_flags+0x11e>
 8014dc8:	69bb      	ldr	r3, [r7, #24]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	61bb      	str	r3, [r7, #24]
 8014dce:	69bb      	ldr	r3, [r7, #24]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d1f8      	bne.n	8014dc8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014dd6:	69bb      	ldr	r3, [r7, #24]
 8014dd8:	68fa      	ldr	r2, [r7, #12]
 8014dda:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	2200      	movs	r2, #0
 8014de0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014de4:	78fb      	ldrb	r3, [r7, #3]
 8014de6:	f003 0302 	and.w	r3, r3, #2
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d104      	bne.n	8014df8 <tcp_enqueue_flags+0x148>
 8014dee:	78fb      	ldrb	r3, [r7, #3]
 8014df0:	f003 0301 	and.w	r3, r3, #1
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d004      	beq.n	8014e02 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014dfc:	1c5a      	adds	r2, r3, #1
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014e02:	78fb      	ldrb	r3, [r7, #3]
 8014e04:	f003 0301 	and.w	r3, r3, #1
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d006      	beq.n	8014e1a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	8b5b      	ldrh	r3, [r3, #26]
 8014e10:	f043 0320 	orr.w	r3, r3, #32
 8014e14:	b29a      	uxth	r2, r3
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	685b      	ldr	r3, [r3, #4]
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7fa fd3e 	bl	800f8a0 <pbuf_clen>
 8014e24:	4603      	mov	r3, r0
 8014e26:	461a      	mov	r2, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e2e:	4413      	add	r3, r2
 8014e30:	b29a      	uxth	r2, r3
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d00e      	beq.n	8014e60 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d10a      	bne.n	8014e60 <tcp_enqueue_flags+0x1b0>
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d106      	bne.n	8014e60 <tcp_enqueue_flags+0x1b0>
 8014e52:	4b06      	ldr	r3, [pc, #24]	; (8014e6c <tcp_enqueue_flags+0x1bc>)
 8014e54:	f240 4265 	movw	r2, #1125	; 0x465
 8014e58:	490b      	ldr	r1, [pc, #44]	; (8014e88 <tcp_enqueue_flags+0x1d8>)
 8014e5a:	4806      	ldr	r0, [pc, #24]	; (8014e74 <tcp_enqueue_flags+0x1c4>)
 8014e5c:	f004 f8ea 	bl	8019034 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014e60:	2300      	movs	r3, #0
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3720      	adds	r7, #32
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	0801b844 	.word	0x0801b844
 8014e70:	0801bc68 	.word	0x0801bc68
 8014e74:	0801b898 	.word	0x0801b898
 8014e78:	0801bcc0 	.word	0x0801bcc0
 8014e7c:	0801bce0 	.word	0x0801bce0
 8014e80:	0801bd1c 	.word	0x0801bd1c
 8014e84:	0801bd34 	.word	0x0801bd34
 8014e88:	0801bd60 	.word	0x0801bd60

08014e8c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014e8c:	b5b0      	push	{r4, r5, r7, lr}
 8014e8e:	b08a      	sub	sp, #40	; 0x28
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d106      	bne.n	8014ea8 <tcp_output+0x1c>
 8014e9a:	4b9e      	ldr	r3, [pc, #632]	; (8015114 <tcp_output+0x288>)
 8014e9c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014ea0:	499d      	ldr	r1, [pc, #628]	; (8015118 <tcp_output+0x28c>)
 8014ea2:	489e      	ldr	r0, [pc, #632]	; (801511c <tcp_output+0x290>)
 8014ea4:	f004 f8c6 	bl	8019034 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	7d1b      	ldrb	r3, [r3, #20]
 8014eac:	2b01      	cmp	r3, #1
 8014eae:	d106      	bne.n	8014ebe <tcp_output+0x32>
 8014eb0:	4b98      	ldr	r3, [pc, #608]	; (8015114 <tcp_output+0x288>)
 8014eb2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014eb6:	499a      	ldr	r1, [pc, #616]	; (8015120 <tcp_output+0x294>)
 8014eb8:	4898      	ldr	r0, [pc, #608]	; (801511c <tcp_output+0x290>)
 8014eba:	f004 f8bb 	bl	8019034 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014ebe:	4b99      	ldr	r3, [pc, #612]	; (8015124 <tcp_output+0x298>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	687a      	ldr	r2, [r7, #4]
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	d101      	bne.n	8014ecc <tcp_output+0x40>
    return ERR_OK;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	e1ce      	b.n	801526a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014ed8:	4293      	cmp	r3, r2
 8014eda:	bf28      	it	cs
 8014edc:	4613      	movcs	r3, r2
 8014ede:	b29b      	uxth	r3, r3
 8014ee0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ee6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d10b      	bne.n	8014f06 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	8b5b      	ldrh	r3, [r3, #26]
 8014ef2:	f003 0302 	and.w	r3, r3, #2
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	f000 81aa 	beq.w	8015250 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f000 fdcb 	bl	8015a98 <tcp_send_empty_ack>
 8014f02:	4603      	mov	r3, r0
 8014f04:	e1b1      	b.n	801526a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014f06:	6879      	ldr	r1, [r7, #4]
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	3304      	adds	r3, #4
 8014f0c:	461a      	mov	r2, r3
 8014f0e:	6878      	ldr	r0, [r7, #4]
 8014f10:	f7ff f824 	bl	8013f5c <tcp_route>
 8014f14:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d102      	bne.n	8014f22 <tcp_output+0x96>
    return ERR_RTE;
 8014f1c:	f06f 0303 	mvn.w	r3, #3
 8014f20:	e1a3      	b.n	801526a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d003      	beq.n	8014f30 <tcp_output+0xa4>
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d111      	bne.n	8014f54 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d002      	beq.n	8014f3c <tcp_output+0xb0>
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	3304      	adds	r3, #4
 8014f3a:	e000      	b.n	8014f3e <tcp_output+0xb2>
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014f40:	693b      	ldr	r3, [r7, #16]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d102      	bne.n	8014f4c <tcp_output+0xc0>
      return ERR_RTE;
 8014f46:	f06f 0303 	mvn.w	r3, #3
 8014f4a:	e18e      	b.n	801526a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014f4c:	693b      	ldr	r3, [r7, #16]
 8014f4e:	681a      	ldr	r2, [r3, #0]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f56:	68db      	ldr	r3, [r3, #12]
 8014f58:	685b      	ldr	r3, [r3, #4]
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7f8 ff7d 	bl	800de5a <lwip_htonl>
 8014f60:	4602      	mov	r2, r0
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f66:	1ad3      	subs	r3, r2, r3
 8014f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f6a:	8912      	ldrh	r2, [r2, #8]
 8014f6c:	4413      	add	r3, r2
 8014f6e:	69ba      	ldr	r2, [r7, #24]
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d227      	bcs.n	8014fc4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014f7a:	461a      	mov	r2, r3
 8014f7c:	69bb      	ldr	r3, [r7, #24]
 8014f7e:	4293      	cmp	r3, r2
 8014f80:	d114      	bne.n	8014fac <tcp_output+0x120>
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d110      	bne.n	8014fac <tcp_output+0x120>
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d10b      	bne.n	8014fac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2200      	movs	r2, #0
 8014f98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	8b5b      	ldrh	r3, [r3, #26]
 8014fb0:	f003 0302 	and.w	r3, r3, #2
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	f000 814d 	beq.w	8015254 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f000 fd6c 	bl	8015a98 <tcp_send_empty_ack>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	e152      	b.n	801526a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fd0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014fd2:	6a3b      	ldr	r3, [r7, #32]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	f000 811c 	beq.w	8015212 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014fda:	e002      	b.n	8014fe2 <tcp_output+0x156>
 8014fdc:	6a3b      	ldr	r3, [r7, #32]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	623b      	str	r3, [r7, #32]
 8014fe2:	6a3b      	ldr	r3, [r7, #32]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d1f8      	bne.n	8014fdc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014fea:	e112      	b.n	8015212 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fee:	68db      	ldr	r3, [r3, #12]
 8014ff0:	899b      	ldrh	r3, [r3, #12]
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7f8 ff1b 	bl	800de30 <lwip_htons>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	b2db      	uxtb	r3, r3
 8014ffe:	f003 0304 	and.w	r3, r3, #4
 8015002:	2b00      	cmp	r3, #0
 8015004:	d006      	beq.n	8015014 <tcp_output+0x188>
 8015006:	4b43      	ldr	r3, [pc, #268]	; (8015114 <tcp_output+0x288>)
 8015008:	f240 5236 	movw	r2, #1334	; 0x536
 801500c:	4946      	ldr	r1, [pc, #280]	; (8015128 <tcp_output+0x29c>)
 801500e:	4843      	ldr	r0, [pc, #268]	; (801511c <tcp_output+0x290>)
 8015010:	f004 f810 	bl	8019034 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015018:	2b00      	cmp	r3, #0
 801501a:	d01f      	beq.n	801505c <tcp_output+0x1d0>
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	8b5b      	ldrh	r3, [r3, #26]
 8015020:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015024:	2b00      	cmp	r3, #0
 8015026:	d119      	bne.n	801505c <tcp_output+0x1d0>
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801502c:	2b00      	cmp	r3, #0
 801502e:	d00b      	beq.n	8015048 <tcp_output+0x1bc>
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d110      	bne.n	801505c <tcp_output+0x1d0>
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801503e:	891a      	ldrh	r2, [r3, #8]
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015044:	429a      	cmp	r2, r3
 8015046:	d209      	bcs.n	801505c <tcp_output+0x1d0>
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801504e:	2b00      	cmp	r3, #0
 8015050:	d004      	beq.n	801505c <tcp_output+0x1d0>
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015058:	2b08      	cmp	r3, #8
 801505a:	d901      	bls.n	8015060 <tcp_output+0x1d4>
 801505c:	2301      	movs	r3, #1
 801505e:	e000      	b.n	8015062 <tcp_output+0x1d6>
 8015060:	2300      	movs	r3, #0
 8015062:	2b00      	cmp	r3, #0
 8015064:	d106      	bne.n	8015074 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	8b5b      	ldrh	r3, [r3, #26]
 801506a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801506e:	2b00      	cmp	r3, #0
 8015070:	f000 80e4 	beq.w	801523c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	7d1b      	ldrb	r3, [r3, #20]
 8015078:	2b02      	cmp	r3, #2
 801507a:	d00d      	beq.n	8015098 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801507e:	68db      	ldr	r3, [r3, #12]
 8015080:	899b      	ldrh	r3, [r3, #12]
 8015082:	b29c      	uxth	r4, r3
 8015084:	2010      	movs	r0, #16
 8015086:	f7f8 fed3 	bl	800de30 <lwip_htons>
 801508a:	4603      	mov	r3, r0
 801508c:	461a      	mov	r2, r3
 801508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015090:	68db      	ldr	r3, [r3, #12]
 8015092:	4322      	orrs	r2, r4
 8015094:	b292      	uxth	r2, r2
 8015096:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015098:	697a      	ldr	r2, [r7, #20]
 801509a:	6879      	ldr	r1, [r7, #4]
 801509c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801509e:	f000 f909 	bl	80152b4 <tcp_output_segment>
 80150a2:	4603      	mov	r3, r0
 80150a4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80150a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d009      	beq.n	80150c2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	8b5b      	ldrh	r3, [r3, #26]
 80150b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150b6:	b29a      	uxth	r2, r3
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	835a      	strh	r2, [r3, #26]
      return err;
 80150bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80150c0:	e0d3      	b.n	801526a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80150c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c4:	681a      	ldr	r2, [r3, #0]
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	7d1b      	ldrb	r3, [r3, #20]
 80150ce:	2b02      	cmp	r3, #2
 80150d0:	d006      	beq.n	80150e0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	8b5b      	ldrh	r3, [r3, #26]
 80150d6:	f023 0303 	bic.w	r3, r3, #3
 80150da:	b29a      	uxth	r2, r3
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80150e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e2:	68db      	ldr	r3, [r3, #12]
 80150e4:	685b      	ldr	r3, [r3, #4]
 80150e6:	4618      	mov	r0, r3
 80150e8:	f7f8 feb7 	bl	800de5a <lwip_htonl>
 80150ec:	4604      	mov	r4, r0
 80150ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f0:	891b      	ldrh	r3, [r3, #8]
 80150f2:	461d      	mov	r5, r3
 80150f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f6:	68db      	ldr	r3, [r3, #12]
 80150f8:	899b      	ldrh	r3, [r3, #12]
 80150fa:	b29b      	uxth	r3, r3
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7f8 fe97 	bl	800de30 <lwip_htons>
 8015102:	4603      	mov	r3, r0
 8015104:	b2db      	uxtb	r3, r3
 8015106:	f003 0303 	and.w	r3, r3, #3
 801510a:	2b00      	cmp	r3, #0
 801510c:	d00e      	beq.n	801512c <tcp_output+0x2a0>
 801510e:	2301      	movs	r3, #1
 8015110:	e00d      	b.n	801512e <tcp_output+0x2a2>
 8015112:	bf00      	nop
 8015114:	0801b844 	.word	0x0801b844
 8015118:	0801bd88 	.word	0x0801bd88
 801511c:	0801b898 	.word	0x0801b898
 8015120:	0801bda0 	.word	0x0801bda0
 8015124:	24007870 	.word	0x24007870
 8015128:	0801bdc8 	.word	0x0801bdc8
 801512c:	2300      	movs	r3, #0
 801512e:	442b      	add	r3, r5
 8015130:	4423      	add	r3, r4
 8015132:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	1ad3      	subs	r3, r2, r3
 801513c:	2b00      	cmp	r3, #0
 801513e:	da02      	bge.n	8015146 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	68ba      	ldr	r2, [r7, #8]
 8015144:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015148:	891b      	ldrh	r3, [r3, #8]
 801514a:	461c      	mov	r4, r3
 801514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801514e:	68db      	ldr	r3, [r3, #12]
 8015150:	899b      	ldrh	r3, [r3, #12]
 8015152:	b29b      	uxth	r3, r3
 8015154:	4618      	mov	r0, r3
 8015156:	f7f8 fe6b 	bl	800de30 <lwip_htons>
 801515a:	4603      	mov	r3, r0
 801515c:	b2db      	uxtb	r3, r3
 801515e:	f003 0303 	and.w	r3, r3, #3
 8015162:	2b00      	cmp	r3, #0
 8015164:	d001      	beq.n	801516a <tcp_output+0x2de>
 8015166:	2301      	movs	r3, #1
 8015168:	e000      	b.n	801516c <tcp_output+0x2e0>
 801516a:	2300      	movs	r3, #0
 801516c:	4423      	add	r3, r4
 801516e:	2b00      	cmp	r3, #0
 8015170:	d049      	beq.n	8015206 <tcp_output+0x37a>
      seg->next = NULL;
 8015172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015174:	2200      	movs	r2, #0
 8015176:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801517c:	2b00      	cmp	r3, #0
 801517e:	d105      	bne.n	801518c <tcp_output+0x300>
        pcb->unacked = seg;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015184:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015188:	623b      	str	r3, [r7, #32]
 801518a:	e03f      	b.n	801520c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801518e:	68db      	ldr	r3, [r3, #12]
 8015190:	685b      	ldr	r3, [r3, #4]
 8015192:	4618      	mov	r0, r3
 8015194:	f7f8 fe61 	bl	800de5a <lwip_htonl>
 8015198:	4604      	mov	r4, r0
 801519a:	6a3b      	ldr	r3, [r7, #32]
 801519c:	68db      	ldr	r3, [r3, #12]
 801519e:	685b      	ldr	r3, [r3, #4]
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7f8 fe5a 	bl	800de5a <lwip_htonl>
 80151a6:	4603      	mov	r3, r0
 80151a8:	1ae3      	subs	r3, r4, r3
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	da24      	bge.n	80151f8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	3370      	adds	r3, #112	; 0x70
 80151b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80151b4:	e002      	b.n	80151bc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80151b6:	69fb      	ldr	r3, [r7, #28]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80151bc:	69fb      	ldr	r3, [r7, #28]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d011      	beq.n	80151e8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80151c4:	69fb      	ldr	r3, [r7, #28]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	68db      	ldr	r3, [r3, #12]
 80151ca:	685b      	ldr	r3, [r3, #4]
 80151cc:	4618      	mov	r0, r3
 80151ce:	f7f8 fe44 	bl	800de5a <lwip_htonl>
 80151d2:	4604      	mov	r4, r0
 80151d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	685b      	ldr	r3, [r3, #4]
 80151da:	4618      	mov	r0, r3
 80151dc:	f7f8 fe3d 	bl	800de5a <lwip_htonl>
 80151e0:	4603      	mov	r3, r0
 80151e2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	dbe6      	blt.n	80151b6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80151e8:	69fb      	ldr	r3, [r7, #28]
 80151ea:	681a      	ldr	r2, [r3, #0]
 80151ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80151f0:	69fb      	ldr	r3, [r7, #28]
 80151f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151f4:	601a      	str	r2, [r3, #0]
 80151f6:	e009      	b.n	801520c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80151f8:	6a3b      	ldr	r3, [r7, #32]
 80151fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151fc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80151fe:	6a3b      	ldr	r3, [r7, #32]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	623b      	str	r3, [r7, #32]
 8015204:	e002      	b.n	801520c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015206:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015208:	f7fb ff05 	bl	8011016 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015210:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015214:	2b00      	cmp	r3, #0
 8015216:	d012      	beq.n	801523e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801521a:	68db      	ldr	r3, [r3, #12]
 801521c:	685b      	ldr	r3, [r3, #4]
 801521e:	4618      	mov	r0, r3
 8015220:	f7f8 fe1b 	bl	800de5a <lwip_htonl>
 8015224:	4602      	mov	r2, r0
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801522a:	1ad3      	subs	r3, r2, r3
 801522c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801522e:	8912      	ldrh	r2, [r2, #8]
 8015230:	4413      	add	r3, r2
  while (seg != NULL &&
 8015232:	69ba      	ldr	r2, [r7, #24]
 8015234:	429a      	cmp	r2, r3
 8015236:	f4bf aed9 	bcs.w	8014fec <tcp_output+0x160>
 801523a:	e000      	b.n	801523e <tcp_output+0x3b2>
      break;
 801523c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015242:	2b00      	cmp	r3, #0
 8015244:	d108      	bne.n	8015258 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	2200      	movs	r2, #0
 801524a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801524e:	e004      	b.n	801525a <tcp_output+0x3ce>
    goto output_done;
 8015250:	bf00      	nop
 8015252:	e002      	b.n	801525a <tcp_output+0x3ce>
    goto output_done;
 8015254:	bf00      	nop
 8015256:	e000      	b.n	801525a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015258:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	8b5b      	ldrh	r3, [r3, #26]
 801525e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015262:	b29a      	uxth	r2, r3
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015268:	2300      	movs	r3, #0
}
 801526a:	4618      	mov	r0, r3
 801526c:	3728      	adds	r7, #40	; 0x28
 801526e:	46bd      	mov	sp, r7
 8015270:	bdb0      	pop	{r4, r5, r7, pc}
 8015272:	bf00      	nop

08015274 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b082      	sub	sp, #8
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d106      	bne.n	8015290 <tcp_output_segment_busy+0x1c>
 8015282:	4b09      	ldr	r3, [pc, #36]	; (80152a8 <tcp_output_segment_busy+0x34>)
 8015284:	f240 529a 	movw	r2, #1434	; 0x59a
 8015288:	4908      	ldr	r1, [pc, #32]	; (80152ac <tcp_output_segment_busy+0x38>)
 801528a:	4809      	ldr	r0, [pc, #36]	; (80152b0 <tcp_output_segment_busy+0x3c>)
 801528c:	f003 fed2 	bl	8019034 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	7b9b      	ldrb	r3, [r3, #14]
 8015296:	2b01      	cmp	r3, #1
 8015298:	d001      	beq.n	801529e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801529a:	2301      	movs	r3, #1
 801529c:	e000      	b.n	80152a0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801529e:	2300      	movs	r3, #0
}
 80152a0:	4618      	mov	r0, r3
 80152a2:	3708      	adds	r7, #8
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}
 80152a8:	0801b844 	.word	0x0801b844
 80152ac:	0801bde0 	.word	0x0801bde0
 80152b0:	0801b898 	.word	0x0801b898

080152b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80152b4:	b5b0      	push	{r4, r5, r7, lr}
 80152b6:	b08c      	sub	sp, #48	; 0x30
 80152b8:	af04      	add	r7, sp, #16
 80152ba:	60f8      	str	r0, [r7, #12]
 80152bc:	60b9      	str	r1, [r7, #8]
 80152be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d106      	bne.n	80152d4 <tcp_output_segment+0x20>
 80152c6:	4b63      	ldr	r3, [pc, #396]	; (8015454 <tcp_output_segment+0x1a0>)
 80152c8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80152cc:	4962      	ldr	r1, [pc, #392]	; (8015458 <tcp_output_segment+0x1a4>)
 80152ce:	4863      	ldr	r0, [pc, #396]	; (801545c <tcp_output_segment+0x1a8>)
 80152d0:	f003 feb0 	bl	8019034 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d106      	bne.n	80152e8 <tcp_output_segment+0x34>
 80152da:	4b5e      	ldr	r3, [pc, #376]	; (8015454 <tcp_output_segment+0x1a0>)
 80152dc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80152e0:	495f      	ldr	r1, [pc, #380]	; (8015460 <tcp_output_segment+0x1ac>)
 80152e2:	485e      	ldr	r0, [pc, #376]	; (801545c <tcp_output_segment+0x1a8>)
 80152e4:	f003 fea6 	bl	8019034 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d106      	bne.n	80152fc <tcp_output_segment+0x48>
 80152ee:	4b59      	ldr	r3, [pc, #356]	; (8015454 <tcp_output_segment+0x1a0>)
 80152f0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80152f4:	495b      	ldr	r1, [pc, #364]	; (8015464 <tcp_output_segment+0x1b0>)
 80152f6:	4859      	ldr	r0, [pc, #356]	; (801545c <tcp_output_segment+0x1a8>)
 80152f8:	f003 fe9c 	bl	8019034 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80152fc:	68f8      	ldr	r0, [r7, #12]
 80152fe:	f7ff ffb9 	bl	8015274 <tcp_output_segment_busy>
 8015302:	4603      	mov	r3, r0
 8015304:	2b00      	cmp	r3, #0
 8015306:	d001      	beq.n	801530c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015308:	2300      	movs	r3, #0
 801530a:	e09f      	b.n	801544c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	68dc      	ldr	r4, [r3, #12]
 8015314:	4610      	mov	r0, r2
 8015316:	f7f8 fda0 	bl	800de5a <lwip_htonl>
 801531a:	4603      	mov	r3, r0
 801531c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801531e:	68bb      	ldr	r3, [r7, #8]
 8015320:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	68dc      	ldr	r4, [r3, #12]
 8015326:	4610      	mov	r0, r2
 8015328:	f7f8 fd82 	bl	800de30 <lwip_htons>
 801532c:	4603      	mov	r3, r0
 801532e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015334:	68ba      	ldr	r2, [r7, #8]
 8015336:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015338:	441a      	add	r2, r3
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	68db      	ldr	r3, [r3, #12]
 8015342:	3314      	adds	r3, #20
 8015344:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	7a9b      	ldrb	r3, [r3, #10]
 801534a:	f003 0301 	and.w	r3, r3, #1
 801534e:	2b00      	cmp	r3, #0
 8015350:	d015      	beq.n	801537e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015352:	68bb      	ldr	r3, [r7, #8]
 8015354:	3304      	adds	r3, #4
 8015356:	461a      	mov	r2, r3
 8015358:	6879      	ldr	r1, [r7, #4]
 801535a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801535e:	f7fc fa37 	bl	80117d0 <tcp_eff_send_mss_netif>
 8015362:	4603      	mov	r3, r0
 8015364:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015366:	8b7b      	ldrh	r3, [r7, #26]
 8015368:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801536c:	4618      	mov	r0, r3
 801536e:	f7f8 fd74 	bl	800de5a <lwip_htonl>
 8015372:	4602      	mov	r2, r0
 8015374:	69fb      	ldr	r3, [r7, #28]
 8015376:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015378:	69fb      	ldr	r3, [r7, #28]
 801537a:	3304      	adds	r3, #4
 801537c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015384:	2b00      	cmp	r3, #0
 8015386:	da02      	bge.n	801538e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015388:	68bb      	ldr	r3, [r7, #8]
 801538a:	2200      	movs	r2, #0
 801538c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801538e:	68bb      	ldr	r3, [r7, #8]
 8015390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015392:	2b00      	cmp	r3, #0
 8015394:	d10c      	bne.n	80153b0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015396:	4b34      	ldr	r3, [pc, #208]	; (8015468 <tcp_output_segment+0x1b4>)
 8015398:	681a      	ldr	r2, [r3, #0]
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	68db      	ldr	r3, [r3, #12]
 80153a2:	685b      	ldr	r3, [r3, #4]
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7f8 fd58 	bl	800de5a <lwip_htonl>
 80153aa:	4602      	mov	r2, r0
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	68da      	ldr	r2, [r3, #12]
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	685b      	ldr	r3, [r3, #4]
 80153b8:	685b      	ldr	r3, [r3, #4]
 80153ba:	1ad3      	subs	r3, r2, r3
 80153bc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	685b      	ldr	r3, [r3, #4]
 80153c2:	8959      	ldrh	r1, [r3, #10]
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	685b      	ldr	r3, [r3, #4]
 80153c8:	8b3a      	ldrh	r2, [r7, #24]
 80153ca:	1a8a      	subs	r2, r1, r2
 80153cc:	b292      	uxth	r2, r2
 80153ce:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	8919      	ldrh	r1, [r3, #8]
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	685b      	ldr	r3, [r3, #4]
 80153da:	8b3a      	ldrh	r2, [r7, #24]
 80153dc:	1a8a      	subs	r2, r1, r2
 80153de:	b292      	uxth	r2, r2
 80153e0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	68fa      	ldr	r2, [r7, #12]
 80153e8:	68d2      	ldr	r2, [r2, #12]
 80153ea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	68db      	ldr	r3, [r3, #12]
 80153f0:	2200      	movs	r2, #0
 80153f2:	741a      	strb	r2, [r3, #16]
 80153f4:	2200      	movs	r2, #0
 80153f6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	68db      	ldr	r3, [r3, #12]
 80153fc:	f103 0214 	add.w	r2, r3, #20
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	7a9b      	ldrb	r3, [r3, #10]
 8015404:	009b      	lsls	r3, r3, #2
 8015406:	f003 0304 	and.w	r3, r3, #4
 801540a:	4413      	add	r3, r2
 801540c:	69fa      	ldr	r2, [r7, #28]
 801540e:	429a      	cmp	r2, r3
 8015410:	d006      	beq.n	8015420 <tcp_output_segment+0x16c>
 8015412:	4b10      	ldr	r3, [pc, #64]	; (8015454 <tcp_output_segment+0x1a0>)
 8015414:	f240 621c 	movw	r2, #1564	; 0x61c
 8015418:	4914      	ldr	r1, [pc, #80]	; (801546c <tcp_output_segment+0x1b8>)
 801541a:	4810      	ldr	r0, [pc, #64]	; (801545c <tcp_output_segment+0x1a8>)
 801541c:	f003 fe0a 	bl	8019034 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	6858      	ldr	r0, [r3, #4]
 8015424:	68b9      	ldr	r1, [r7, #8]
 8015426:	68bb      	ldr	r3, [r7, #8]
 8015428:	1d1c      	adds	r4, r3, #4
 801542a:	68bb      	ldr	r3, [r7, #8]
 801542c:	7add      	ldrb	r5, [r3, #11]
 801542e:	68bb      	ldr	r3, [r7, #8]
 8015430:	7a9b      	ldrb	r3, [r3, #10]
 8015432:	687a      	ldr	r2, [r7, #4]
 8015434:	9202      	str	r2, [sp, #8]
 8015436:	2206      	movs	r2, #6
 8015438:	9201      	str	r2, [sp, #4]
 801543a:	9300      	str	r3, [sp, #0]
 801543c:	462b      	mov	r3, r5
 801543e:	4622      	mov	r2, r4
 8015440:	f002 fa8c 	bl	801795c <ip4_output_if>
 8015444:	4603      	mov	r3, r0
 8015446:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015448:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801544c:	4618      	mov	r0, r3
 801544e:	3720      	adds	r7, #32
 8015450:	46bd      	mov	sp, r7
 8015452:	bdb0      	pop	{r4, r5, r7, pc}
 8015454:	0801b844 	.word	0x0801b844
 8015458:	0801be08 	.word	0x0801be08
 801545c:	0801b898 	.word	0x0801b898
 8015460:	0801be28 	.word	0x0801be28
 8015464:	0801be48 	.word	0x0801be48
 8015468:	24007860 	.word	0x24007860
 801546c:	0801be6c 	.word	0x0801be6c

08015470 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015470:	b5b0      	push	{r4, r5, r7, lr}
 8015472:	b084      	sub	sp, #16
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d106      	bne.n	801548c <tcp_rexmit_rto_prepare+0x1c>
 801547e:	4b31      	ldr	r3, [pc, #196]	; (8015544 <tcp_rexmit_rto_prepare+0xd4>)
 8015480:	f240 6263 	movw	r2, #1635	; 0x663
 8015484:	4930      	ldr	r1, [pc, #192]	; (8015548 <tcp_rexmit_rto_prepare+0xd8>)
 8015486:	4831      	ldr	r0, [pc, #196]	; (801554c <tcp_rexmit_rto_prepare+0xdc>)
 8015488:	f003 fdd4 	bl	8019034 <iprintf>

  if (pcb->unacked == NULL) {
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015490:	2b00      	cmp	r3, #0
 8015492:	d102      	bne.n	801549a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015494:	f06f 0305 	mvn.w	r3, #5
 8015498:	e050      	b.n	801553c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801549e:	60fb      	str	r3, [r7, #12]
 80154a0:	e00b      	b.n	80154ba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80154a2:	68f8      	ldr	r0, [r7, #12]
 80154a4:	f7ff fee6 	bl	8015274 <tcp_output_segment_busy>
 80154a8:	4603      	mov	r3, r0
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d002      	beq.n	80154b4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80154ae:	f06f 0305 	mvn.w	r3, #5
 80154b2:	e043      	b.n	801553c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	60fb      	str	r3, [r7, #12]
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d1ef      	bne.n	80154a2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80154c2:	68f8      	ldr	r0, [r7, #12]
 80154c4:	f7ff fed6 	bl	8015274 <tcp_output_segment_busy>
 80154c8:	4603      	mov	r3, r0
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d002      	beq.n	80154d4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80154ce:	f06f 0305 	mvn.w	r3, #5
 80154d2:	e033      	b.n	801553c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	2200      	movs	r2, #0
 80154e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	8b5b      	ldrh	r3, [r3, #26]
 80154ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80154f2:	b29a      	uxth	r2, r3
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	68db      	ldr	r3, [r3, #12]
 80154fc:	685b      	ldr	r3, [r3, #4]
 80154fe:	4618      	mov	r0, r3
 8015500:	f7f8 fcab 	bl	800de5a <lwip_htonl>
 8015504:	4604      	mov	r4, r0
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	891b      	ldrh	r3, [r3, #8]
 801550a:	461d      	mov	r5, r3
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	68db      	ldr	r3, [r3, #12]
 8015510:	899b      	ldrh	r3, [r3, #12]
 8015512:	b29b      	uxth	r3, r3
 8015514:	4618      	mov	r0, r3
 8015516:	f7f8 fc8b 	bl	800de30 <lwip_htons>
 801551a:	4603      	mov	r3, r0
 801551c:	b2db      	uxtb	r3, r3
 801551e:	f003 0303 	and.w	r3, r3, #3
 8015522:	2b00      	cmp	r3, #0
 8015524:	d001      	beq.n	801552a <tcp_rexmit_rto_prepare+0xba>
 8015526:	2301      	movs	r3, #1
 8015528:	e000      	b.n	801552c <tcp_rexmit_rto_prepare+0xbc>
 801552a:	2300      	movs	r3, #0
 801552c:	442b      	add	r3, r5
 801552e:	18e2      	adds	r2, r4, r3
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2200      	movs	r2, #0
 8015538:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801553a:	2300      	movs	r3, #0
}
 801553c:	4618      	mov	r0, r3
 801553e:	3710      	adds	r7, #16
 8015540:	46bd      	mov	sp, r7
 8015542:	bdb0      	pop	{r4, r5, r7, pc}
 8015544:	0801b844 	.word	0x0801b844
 8015548:	0801be80 	.word	0x0801be80
 801554c:	0801b898 	.word	0x0801b898

08015550 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b082      	sub	sp, #8
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d106      	bne.n	801556c <tcp_rexmit_rto_commit+0x1c>
 801555e:	4b0d      	ldr	r3, [pc, #52]	; (8015594 <tcp_rexmit_rto_commit+0x44>)
 8015560:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015564:	490c      	ldr	r1, [pc, #48]	; (8015598 <tcp_rexmit_rto_commit+0x48>)
 8015566:	480d      	ldr	r0, [pc, #52]	; (801559c <tcp_rexmit_rto_commit+0x4c>)
 8015568:	f003 fd64 	bl	8019034 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015572:	2bff      	cmp	r3, #255	; 0xff
 8015574:	d007      	beq.n	8015586 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801557c:	3301      	adds	r3, #1
 801557e:	b2da      	uxtb	r2, r3
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015586:	6878      	ldr	r0, [r7, #4]
 8015588:	f7ff fc80 	bl	8014e8c <tcp_output>
}
 801558c:	bf00      	nop
 801558e:	3708      	adds	r7, #8
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	0801b844 	.word	0x0801b844
 8015598:	0801bea4 	.word	0x0801bea4
 801559c:	0801b898 	.word	0x0801b898

080155a0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b082      	sub	sp, #8
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d106      	bne.n	80155bc <tcp_rexmit_rto+0x1c>
 80155ae:	4b0a      	ldr	r3, [pc, #40]	; (80155d8 <tcp_rexmit_rto+0x38>)
 80155b0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80155b4:	4909      	ldr	r1, [pc, #36]	; (80155dc <tcp_rexmit_rto+0x3c>)
 80155b6:	480a      	ldr	r0, [pc, #40]	; (80155e0 <tcp_rexmit_rto+0x40>)
 80155b8:	f003 fd3c 	bl	8019034 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	f7ff ff57 	bl	8015470 <tcp_rexmit_rto_prepare>
 80155c2:	4603      	mov	r3, r0
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d102      	bne.n	80155ce <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	f7ff ffc1 	bl	8015550 <tcp_rexmit_rto_commit>
  }
}
 80155ce:	bf00      	nop
 80155d0:	3708      	adds	r7, #8
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	bf00      	nop
 80155d8:	0801b844 	.word	0x0801b844
 80155dc:	0801bec8 	.word	0x0801bec8
 80155e0:	0801b898 	.word	0x0801b898

080155e4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80155e4:	b590      	push	{r4, r7, lr}
 80155e6:	b085      	sub	sp, #20
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d106      	bne.n	8015600 <tcp_rexmit+0x1c>
 80155f2:	4b2f      	ldr	r3, [pc, #188]	; (80156b0 <tcp_rexmit+0xcc>)
 80155f4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80155f8:	492e      	ldr	r1, [pc, #184]	; (80156b4 <tcp_rexmit+0xd0>)
 80155fa:	482f      	ldr	r0, [pc, #188]	; (80156b8 <tcp_rexmit+0xd4>)
 80155fc:	f003 fd1a 	bl	8019034 <iprintf>

  if (pcb->unacked == NULL) {
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015604:	2b00      	cmp	r3, #0
 8015606:	d102      	bne.n	801560e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015608:	f06f 0305 	mvn.w	r3, #5
 801560c:	e04c      	b.n	80156a8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015612:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015614:	68b8      	ldr	r0, [r7, #8]
 8015616:	f7ff fe2d 	bl	8015274 <tcp_output_segment_busy>
 801561a:	4603      	mov	r3, r0
 801561c:	2b00      	cmp	r3, #0
 801561e:	d002      	beq.n	8015626 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015620:	f06f 0305 	mvn.w	r3, #5
 8015624:	e040      	b.n	80156a8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	336c      	adds	r3, #108	; 0x6c
 8015632:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015634:	e002      	b.n	801563c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d011      	beq.n	8015668 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	68db      	ldr	r3, [r3, #12]
 801564a:	685b      	ldr	r3, [r3, #4]
 801564c:	4618      	mov	r0, r3
 801564e:	f7f8 fc04 	bl	800de5a <lwip_htonl>
 8015652:	4604      	mov	r4, r0
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	68db      	ldr	r3, [r3, #12]
 8015658:	685b      	ldr	r3, [r3, #4]
 801565a:	4618      	mov	r0, r3
 801565c:	f7f8 fbfd 	bl	800de5a <lwip_htonl>
 8015660:	4603      	mov	r3, r0
 8015662:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015664:	2b00      	cmp	r3, #0
 8015666:	dbe6      	blt.n	8015636 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	681a      	ldr	r2, [r3, #0]
 801566c:	68bb      	ldr	r3, [r7, #8]
 801566e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	68ba      	ldr	r2, [r7, #8]
 8015674:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d103      	bne.n	8015686 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	2200      	movs	r2, #0
 8015682:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801568c:	2bff      	cmp	r3, #255	; 0xff
 801568e:	d007      	beq.n	80156a0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015696:	3301      	adds	r3, #1
 8015698:	b2da      	uxtb	r2, r3
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	2200      	movs	r2, #0
 80156a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80156a6:	2300      	movs	r3, #0
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	3714      	adds	r7, #20
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd90      	pop	{r4, r7, pc}
 80156b0:	0801b844 	.word	0x0801b844
 80156b4:	0801bee4 	.word	0x0801bee4
 80156b8:	0801b898 	.word	0x0801b898

080156bc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b082      	sub	sp, #8
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d106      	bne.n	80156d8 <tcp_rexmit_fast+0x1c>
 80156ca:	4b2a      	ldr	r3, [pc, #168]	; (8015774 <tcp_rexmit_fast+0xb8>)
 80156cc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80156d0:	4929      	ldr	r1, [pc, #164]	; (8015778 <tcp_rexmit_fast+0xbc>)
 80156d2:	482a      	ldr	r0, [pc, #168]	; (801577c <tcp_rexmit_fast+0xc0>)
 80156d4:	f003 fcae 	bl	8019034 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d045      	beq.n	801576c <tcp_rexmit_fast+0xb0>
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	8b5b      	ldrh	r3, [r3, #26]
 80156e4:	f003 0304 	and.w	r3, r3, #4
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d13f      	bne.n	801576c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f7ff ff79 	bl	80155e4 <tcp_rexmit>
 80156f2:	4603      	mov	r3, r0
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d139      	bne.n	801576c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015704:	4293      	cmp	r3, r2
 8015706:	bf28      	it	cs
 8015708:	4613      	movcs	r3, r2
 801570a:	b29b      	uxth	r3, r3
 801570c:	2b00      	cmp	r3, #0
 801570e:	da00      	bge.n	8015712 <tcp_rexmit_fast+0x56>
 8015710:	3301      	adds	r3, #1
 8015712:	105b      	asrs	r3, r3, #1
 8015714:	b29a      	uxth	r2, r3
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015722:	461a      	mov	r2, r3
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015728:	005b      	lsls	r3, r3, #1
 801572a:	429a      	cmp	r2, r3
 801572c:	d206      	bcs.n	801573c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015732:	005b      	lsls	r3, r3, #1
 8015734:	b29a      	uxth	r2, r3
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015746:	4619      	mov	r1, r3
 8015748:	0049      	lsls	r1, r1, #1
 801574a:	440b      	add	r3, r1
 801574c:	b29b      	uxth	r3, r3
 801574e:	4413      	add	r3, r2
 8015750:	b29a      	uxth	r2, r3
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	8b5b      	ldrh	r3, [r3, #26]
 801575c:	f043 0304 	orr.w	r3, r3, #4
 8015760:	b29a      	uxth	r2, r3
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2200      	movs	r2, #0
 801576a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801576c:	bf00      	nop
 801576e:	3708      	adds	r7, #8
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}
 8015774:	0801b844 	.word	0x0801b844
 8015778:	0801befc 	.word	0x0801befc
 801577c:	0801b898 	.word	0x0801b898

08015780 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b086      	sub	sp, #24
 8015784:	af00      	add	r7, sp, #0
 8015786:	60f8      	str	r0, [r7, #12]
 8015788:	607b      	str	r3, [r7, #4]
 801578a:	460b      	mov	r3, r1
 801578c:	817b      	strh	r3, [r7, #10]
 801578e:	4613      	mov	r3, r2
 8015790:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015792:	897a      	ldrh	r2, [r7, #10]
 8015794:	893b      	ldrh	r3, [r7, #8]
 8015796:	4413      	add	r3, r2
 8015798:	b29b      	uxth	r3, r3
 801579a:	3314      	adds	r3, #20
 801579c:	b29b      	uxth	r3, r3
 801579e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80157a2:	4619      	mov	r1, r3
 80157a4:	2022      	movs	r0, #34	; 0x22
 80157a6:	f7f9 fd09 	bl	800f1bc <pbuf_alloc>
 80157aa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80157ac:	697b      	ldr	r3, [r7, #20]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d04d      	beq.n	801584e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80157b2:	897b      	ldrh	r3, [r7, #10]
 80157b4:	3313      	adds	r3, #19
 80157b6:	697a      	ldr	r2, [r7, #20]
 80157b8:	8952      	ldrh	r2, [r2, #10]
 80157ba:	4293      	cmp	r3, r2
 80157bc:	db06      	blt.n	80157cc <tcp_output_alloc_header_common+0x4c>
 80157be:	4b26      	ldr	r3, [pc, #152]	; (8015858 <tcp_output_alloc_header_common+0xd8>)
 80157c0:	f240 7223 	movw	r2, #1827	; 0x723
 80157c4:	4925      	ldr	r1, [pc, #148]	; (801585c <tcp_output_alloc_header_common+0xdc>)
 80157c6:	4826      	ldr	r0, [pc, #152]	; (8015860 <tcp_output_alloc_header_common+0xe0>)
 80157c8:	f003 fc34 	bl	8019034 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80157cc:	697b      	ldr	r3, [r7, #20]
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80157d2:	8c3b      	ldrh	r3, [r7, #32]
 80157d4:	4618      	mov	r0, r3
 80157d6:	f7f8 fb2b 	bl	800de30 <lwip_htons>
 80157da:	4603      	mov	r3, r0
 80157dc:	461a      	mov	r2, r3
 80157de:	693b      	ldr	r3, [r7, #16]
 80157e0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80157e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157e4:	4618      	mov	r0, r3
 80157e6:	f7f8 fb23 	bl	800de30 <lwip_htons>
 80157ea:	4603      	mov	r3, r0
 80157ec:	461a      	mov	r2, r3
 80157ee:	693b      	ldr	r3, [r7, #16]
 80157f0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80157f2:	693b      	ldr	r3, [r7, #16]
 80157f4:	687a      	ldr	r2, [r7, #4]
 80157f6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80157f8:	68f8      	ldr	r0, [r7, #12]
 80157fa:	f7f8 fb2e 	bl	800de5a <lwip_htonl>
 80157fe:	4602      	mov	r2, r0
 8015800:	693b      	ldr	r3, [r7, #16]
 8015802:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015804:	897b      	ldrh	r3, [r7, #10]
 8015806:	089b      	lsrs	r3, r3, #2
 8015808:	b29b      	uxth	r3, r3
 801580a:	3305      	adds	r3, #5
 801580c:	b29b      	uxth	r3, r3
 801580e:	031b      	lsls	r3, r3, #12
 8015810:	b29a      	uxth	r2, r3
 8015812:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015816:	b29b      	uxth	r3, r3
 8015818:	4313      	orrs	r3, r2
 801581a:	b29b      	uxth	r3, r3
 801581c:	4618      	mov	r0, r3
 801581e:	f7f8 fb07 	bl	800de30 <lwip_htons>
 8015822:	4603      	mov	r3, r0
 8015824:	461a      	mov	r2, r3
 8015826:	693b      	ldr	r3, [r7, #16]
 8015828:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801582a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801582c:	4618      	mov	r0, r3
 801582e:	f7f8 faff 	bl	800de30 <lwip_htons>
 8015832:	4603      	mov	r3, r0
 8015834:	461a      	mov	r2, r3
 8015836:	693b      	ldr	r3, [r7, #16]
 8015838:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801583a:	693b      	ldr	r3, [r7, #16]
 801583c:	2200      	movs	r2, #0
 801583e:	741a      	strb	r2, [r3, #16]
 8015840:	2200      	movs	r2, #0
 8015842:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015844:	693b      	ldr	r3, [r7, #16]
 8015846:	2200      	movs	r2, #0
 8015848:	749a      	strb	r2, [r3, #18]
 801584a:	2200      	movs	r2, #0
 801584c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801584e:	697b      	ldr	r3, [r7, #20]
}
 8015850:	4618      	mov	r0, r3
 8015852:	3718      	adds	r7, #24
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}
 8015858:	0801b844 	.word	0x0801b844
 801585c:	0801bf1c 	.word	0x0801bf1c
 8015860:	0801b898 	.word	0x0801b898

08015864 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015864:	b5b0      	push	{r4, r5, r7, lr}
 8015866:	b08a      	sub	sp, #40	; 0x28
 8015868:	af04      	add	r7, sp, #16
 801586a:	60f8      	str	r0, [r7, #12]
 801586c:	607b      	str	r3, [r7, #4]
 801586e:	460b      	mov	r3, r1
 8015870:	817b      	strh	r3, [r7, #10]
 8015872:	4613      	mov	r3, r2
 8015874:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d106      	bne.n	801588a <tcp_output_alloc_header+0x26>
 801587c:	4b15      	ldr	r3, [pc, #84]	; (80158d4 <tcp_output_alloc_header+0x70>)
 801587e:	f240 7242 	movw	r2, #1858	; 0x742
 8015882:	4915      	ldr	r1, [pc, #84]	; (80158d8 <tcp_output_alloc_header+0x74>)
 8015884:	4815      	ldr	r0, [pc, #84]	; (80158dc <tcp_output_alloc_header+0x78>)
 8015886:	f003 fbd5 	bl	8019034 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	8adb      	ldrh	r3, [r3, #22]
 8015892:	68fa      	ldr	r2, [r7, #12]
 8015894:	8b12      	ldrh	r2, [r2, #24]
 8015896:	68f9      	ldr	r1, [r7, #12]
 8015898:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801589a:	893d      	ldrh	r5, [r7, #8]
 801589c:	897c      	ldrh	r4, [r7, #10]
 801589e:	9103      	str	r1, [sp, #12]
 80158a0:	2110      	movs	r1, #16
 80158a2:	9102      	str	r1, [sp, #8]
 80158a4:	9201      	str	r2, [sp, #4]
 80158a6:	9300      	str	r3, [sp, #0]
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	462a      	mov	r2, r5
 80158ac:	4621      	mov	r1, r4
 80158ae:	f7ff ff67 	bl	8015780 <tcp_output_alloc_header_common>
 80158b2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d006      	beq.n	80158c8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158be:	68fa      	ldr	r2, [r7, #12]
 80158c0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80158c2:	441a      	add	r2, r3
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80158c8:	697b      	ldr	r3, [r7, #20]
}
 80158ca:	4618      	mov	r0, r3
 80158cc:	3718      	adds	r7, #24
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bdb0      	pop	{r4, r5, r7, pc}
 80158d2:	bf00      	nop
 80158d4:	0801b844 	.word	0x0801b844
 80158d8:	0801bf4c 	.word	0x0801bf4c
 80158dc:	0801b898 	.word	0x0801b898

080158e0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b088      	sub	sp, #32
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	60f8      	str	r0, [r7, #12]
 80158e8:	60b9      	str	r1, [r7, #8]
 80158ea:	4611      	mov	r1, r2
 80158ec:	461a      	mov	r2, r3
 80158ee:	460b      	mov	r3, r1
 80158f0:	71fb      	strb	r3, [r7, #7]
 80158f2:	4613      	mov	r3, r2
 80158f4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80158f6:	2300      	movs	r3, #0
 80158f8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80158fa:	68bb      	ldr	r3, [r7, #8]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d106      	bne.n	801590e <tcp_output_fill_options+0x2e>
 8015900:	4b13      	ldr	r3, [pc, #76]	; (8015950 <tcp_output_fill_options+0x70>)
 8015902:	f240 7256 	movw	r2, #1878	; 0x756
 8015906:	4913      	ldr	r1, [pc, #76]	; (8015954 <tcp_output_fill_options+0x74>)
 8015908:	4813      	ldr	r0, [pc, #76]	; (8015958 <tcp_output_fill_options+0x78>)
 801590a:	f003 fb93 	bl	8019034 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801590e:	68bb      	ldr	r3, [r7, #8]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015914:	69bb      	ldr	r3, [r7, #24]
 8015916:	3314      	adds	r3, #20
 8015918:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801591a:	69bb      	ldr	r3, [r7, #24]
 801591c:	f103 0214 	add.w	r2, r3, #20
 8015920:	8bfb      	ldrh	r3, [r7, #30]
 8015922:	009b      	lsls	r3, r3, #2
 8015924:	4619      	mov	r1, r3
 8015926:	79fb      	ldrb	r3, [r7, #7]
 8015928:	009b      	lsls	r3, r3, #2
 801592a:	f003 0304 	and.w	r3, r3, #4
 801592e:	440b      	add	r3, r1
 8015930:	4413      	add	r3, r2
 8015932:	697a      	ldr	r2, [r7, #20]
 8015934:	429a      	cmp	r2, r3
 8015936:	d006      	beq.n	8015946 <tcp_output_fill_options+0x66>
 8015938:	4b05      	ldr	r3, [pc, #20]	; (8015950 <tcp_output_fill_options+0x70>)
 801593a:	f240 7275 	movw	r2, #1909	; 0x775
 801593e:	4907      	ldr	r1, [pc, #28]	; (801595c <tcp_output_fill_options+0x7c>)
 8015940:	4805      	ldr	r0, [pc, #20]	; (8015958 <tcp_output_fill_options+0x78>)
 8015942:	f003 fb77 	bl	8019034 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015946:	bf00      	nop
 8015948:	3720      	adds	r7, #32
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}
 801594e:	bf00      	nop
 8015950:	0801b844 	.word	0x0801b844
 8015954:	0801bf74 	.word	0x0801bf74
 8015958:	0801b898 	.word	0x0801b898
 801595c:	0801be6c 	.word	0x0801be6c

08015960 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b08a      	sub	sp, #40	; 0x28
 8015964:	af04      	add	r7, sp, #16
 8015966:	60f8      	str	r0, [r7, #12]
 8015968:	60b9      	str	r1, [r7, #8]
 801596a:	607a      	str	r2, [r7, #4]
 801596c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d106      	bne.n	8015982 <tcp_output_control_segment+0x22>
 8015974:	4b1c      	ldr	r3, [pc, #112]	; (80159e8 <tcp_output_control_segment+0x88>)
 8015976:	f240 7287 	movw	r2, #1927	; 0x787
 801597a:	491c      	ldr	r1, [pc, #112]	; (80159ec <tcp_output_control_segment+0x8c>)
 801597c:	481c      	ldr	r0, [pc, #112]	; (80159f0 <tcp_output_control_segment+0x90>)
 801597e:	f003 fb59 	bl	8019034 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015982:	683a      	ldr	r2, [r7, #0]
 8015984:	6879      	ldr	r1, [r7, #4]
 8015986:	68f8      	ldr	r0, [r7, #12]
 8015988:	f7fe fae8 	bl	8013f5c <tcp_route>
 801598c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d102      	bne.n	801599a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015994:	23fc      	movs	r3, #252	; 0xfc
 8015996:	75fb      	strb	r3, [r7, #23]
 8015998:	e01c      	b.n	80159d4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d006      	beq.n	80159ae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	7adb      	ldrb	r3, [r3, #11]
 80159a4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	7a9b      	ldrb	r3, [r3, #10]
 80159aa:	757b      	strb	r3, [r7, #21]
 80159ac:	e003      	b.n	80159b6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80159ae:	23ff      	movs	r3, #255	; 0xff
 80159b0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80159b2:	2300      	movs	r3, #0
 80159b4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80159b6:	7dba      	ldrb	r2, [r7, #22]
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	9302      	str	r3, [sp, #8]
 80159bc:	2306      	movs	r3, #6
 80159be:	9301      	str	r3, [sp, #4]
 80159c0:	7d7b      	ldrb	r3, [r7, #21]
 80159c2:	9300      	str	r3, [sp, #0]
 80159c4:	4613      	mov	r3, r2
 80159c6:	683a      	ldr	r2, [r7, #0]
 80159c8:	6879      	ldr	r1, [r7, #4]
 80159ca:	68b8      	ldr	r0, [r7, #8]
 80159cc:	f001 ffc6 	bl	801795c <ip4_output_if>
 80159d0:	4603      	mov	r3, r0
 80159d2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80159d4:	68b8      	ldr	r0, [r7, #8]
 80159d6:	f7f9 fed5 	bl	800f784 <pbuf_free>
  return err;
 80159da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80159de:	4618      	mov	r0, r3
 80159e0:	3718      	adds	r7, #24
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bd80      	pop	{r7, pc}
 80159e6:	bf00      	nop
 80159e8:	0801b844 	.word	0x0801b844
 80159ec:	0801bf9c 	.word	0x0801bf9c
 80159f0:	0801b898 	.word	0x0801b898

080159f4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80159f4:	b590      	push	{r4, r7, lr}
 80159f6:	b08b      	sub	sp, #44	; 0x2c
 80159f8:	af04      	add	r7, sp, #16
 80159fa:	60f8      	str	r0, [r7, #12]
 80159fc:	60b9      	str	r1, [r7, #8]
 80159fe:	607a      	str	r2, [r7, #4]
 8015a00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015a02:	683b      	ldr	r3, [r7, #0]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d106      	bne.n	8015a16 <tcp_rst+0x22>
 8015a08:	4b1f      	ldr	r3, [pc, #124]	; (8015a88 <tcp_rst+0x94>)
 8015a0a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015a0e:	491f      	ldr	r1, [pc, #124]	; (8015a8c <tcp_rst+0x98>)
 8015a10:	481f      	ldr	r0, [pc, #124]	; (8015a90 <tcp_rst+0x9c>)
 8015a12:	f003 fb0f 	bl	8019034 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d106      	bne.n	8015a2a <tcp_rst+0x36>
 8015a1c:	4b1a      	ldr	r3, [pc, #104]	; (8015a88 <tcp_rst+0x94>)
 8015a1e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015a22:	491c      	ldr	r1, [pc, #112]	; (8015a94 <tcp_rst+0xa0>)
 8015a24:	481a      	ldr	r0, [pc, #104]	; (8015a90 <tcp_rst+0x9c>)
 8015a26:	f003 fb05 	bl	8019034 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015a2e:	f246 0308 	movw	r3, #24584	; 0x6008
 8015a32:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015a34:	7dfb      	ldrb	r3, [r7, #23]
 8015a36:	b29c      	uxth	r4, r3
 8015a38:	68b8      	ldr	r0, [r7, #8]
 8015a3a:	f7f8 fa0e 	bl	800de5a <lwip_htonl>
 8015a3e:	4602      	mov	r2, r0
 8015a40:	8abb      	ldrh	r3, [r7, #20]
 8015a42:	9303      	str	r3, [sp, #12]
 8015a44:	2314      	movs	r3, #20
 8015a46:	9302      	str	r3, [sp, #8]
 8015a48:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015a4a:	9301      	str	r3, [sp, #4]
 8015a4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015a4e:	9300      	str	r3, [sp, #0]
 8015a50:	4613      	mov	r3, r2
 8015a52:	2200      	movs	r2, #0
 8015a54:	4621      	mov	r1, r4
 8015a56:	6878      	ldr	r0, [r7, #4]
 8015a58:	f7ff fe92 	bl	8015780 <tcp_output_alloc_header_common>
 8015a5c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015a5e:	693b      	ldr	r3, [r7, #16]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d00c      	beq.n	8015a7e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015a64:	7dfb      	ldrb	r3, [r7, #23]
 8015a66:	2200      	movs	r2, #0
 8015a68:	6939      	ldr	r1, [r7, #16]
 8015a6a:	68f8      	ldr	r0, [r7, #12]
 8015a6c:	f7ff ff38 	bl	80158e0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a72:	683a      	ldr	r2, [r7, #0]
 8015a74:	6939      	ldr	r1, [r7, #16]
 8015a76:	68f8      	ldr	r0, [r7, #12]
 8015a78:	f7ff ff72 	bl	8015960 <tcp_output_control_segment>
 8015a7c:	e000      	b.n	8015a80 <tcp_rst+0x8c>
    return;
 8015a7e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015a80:	371c      	adds	r7, #28
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd90      	pop	{r4, r7, pc}
 8015a86:	bf00      	nop
 8015a88:	0801b844 	.word	0x0801b844
 8015a8c:	0801bfc8 	.word	0x0801bfc8
 8015a90:	0801b898 	.word	0x0801b898
 8015a94:	0801bfe4 	.word	0x0801bfe4

08015a98 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015a98:	b590      	push	{r4, r7, lr}
 8015a9a:	b087      	sub	sp, #28
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d106      	bne.n	8015abc <tcp_send_empty_ack+0x24>
 8015aae:	4b28      	ldr	r3, [pc, #160]	; (8015b50 <tcp_send_empty_ack+0xb8>)
 8015ab0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015ab4:	4927      	ldr	r1, [pc, #156]	; (8015b54 <tcp_send_empty_ack+0xbc>)
 8015ab6:	4828      	ldr	r0, [pc, #160]	; (8015b58 <tcp_send_empty_ack+0xc0>)
 8015ab8:	f003 fabc 	bl	8019034 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015abc:	7dfb      	ldrb	r3, [r7, #23]
 8015abe:	009b      	lsls	r3, r3, #2
 8015ac0:	b2db      	uxtb	r3, r3
 8015ac2:	f003 0304 	and.w	r3, r3, #4
 8015ac6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015ac8:	7d7b      	ldrb	r3, [r7, #21]
 8015aca:	b29c      	uxth	r4, r3
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f7f8 f9c2 	bl	800de5a <lwip_htonl>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	2200      	movs	r2, #0
 8015ada:	4621      	mov	r1, r4
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f7ff fec1 	bl	8015864 <tcp_output_alloc_header>
 8015ae2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015ae4:	693b      	ldr	r3, [r7, #16]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d109      	bne.n	8015afe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	8b5b      	ldrh	r3, [r3, #26]
 8015aee:	f043 0303 	orr.w	r3, r3, #3
 8015af2:	b29a      	uxth	r2, r3
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015af8:	f06f 0301 	mvn.w	r3, #1
 8015afc:	e023      	b.n	8015b46 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015afe:	7dbb      	ldrb	r3, [r7, #22]
 8015b00:	7dfa      	ldrb	r2, [r7, #23]
 8015b02:	6939      	ldr	r1, [r7, #16]
 8015b04:	6878      	ldr	r0, [r7, #4]
 8015b06:	f7ff feeb 	bl	80158e0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	3304      	adds	r3, #4
 8015b10:	6939      	ldr	r1, [r7, #16]
 8015b12:	6878      	ldr	r0, [r7, #4]
 8015b14:	f7ff ff24 	bl	8015960 <tcp_output_control_segment>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d007      	beq.n	8015b34 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	8b5b      	ldrh	r3, [r3, #26]
 8015b28:	f043 0303 	orr.w	r3, r3, #3
 8015b2c:	b29a      	uxth	r2, r3
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	835a      	strh	r2, [r3, #26]
 8015b32:	e006      	b.n	8015b42 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	8b5b      	ldrh	r3, [r3, #26]
 8015b38:	f023 0303 	bic.w	r3, r3, #3
 8015b3c:	b29a      	uxth	r2, r3
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	371c      	adds	r7, #28
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd90      	pop	{r4, r7, pc}
 8015b4e:	bf00      	nop
 8015b50:	0801b844 	.word	0x0801b844
 8015b54:	0801c000 	.word	0x0801c000
 8015b58:	0801b898 	.word	0x0801b898

08015b5c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015b5c:	b590      	push	{r4, r7, lr}
 8015b5e:	b087      	sub	sp, #28
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015b64:	2300      	movs	r3, #0
 8015b66:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d106      	bne.n	8015b7c <tcp_keepalive+0x20>
 8015b6e:	4b18      	ldr	r3, [pc, #96]	; (8015bd0 <tcp_keepalive+0x74>)
 8015b70:	f640 0224 	movw	r2, #2084	; 0x824
 8015b74:	4917      	ldr	r1, [pc, #92]	; (8015bd4 <tcp_keepalive+0x78>)
 8015b76:	4818      	ldr	r0, [pc, #96]	; (8015bd8 <tcp_keepalive+0x7c>)
 8015b78:	f003 fa5c 	bl	8019034 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015b7c:	7dfb      	ldrb	r3, [r7, #23]
 8015b7e:	b29c      	uxth	r4, r3
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b84:	3b01      	subs	r3, #1
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7f8 f967 	bl	800de5a <lwip_htonl>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	2200      	movs	r2, #0
 8015b90:	4621      	mov	r1, r4
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f7ff fe66 	bl	8015864 <tcp_output_alloc_header>
 8015b98:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d102      	bne.n	8015ba6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ba4:	e010      	b.n	8015bc8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015ba6:	7dfb      	ldrb	r3, [r7, #23]
 8015ba8:	2200      	movs	r2, #0
 8015baa:	6939      	ldr	r1, [r7, #16]
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f7ff fe97 	bl	80158e0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015bb2:	687a      	ldr	r2, [r7, #4]
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	3304      	adds	r3, #4
 8015bb8:	6939      	ldr	r1, [r7, #16]
 8015bba:	6878      	ldr	r0, [r7, #4]
 8015bbc:	f7ff fed0 	bl	8015960 <tcp_output_control_segment>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	371c      	adds	r7, #28
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd90      	pop	{r4, r7, pc}
 8015bd0:	0801b844 	.word	0x0801b844
 8015bd4:	0801c020 	.word	0x0801c020
 8015bd8:	0801b898 	.word	0x0801b898

08015bdc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015bdc:	b590      	push	{r4, r7, lr}
 8015bde:	b08b      	sub	sp, #44	; 0x2c
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015be4:	2300      	movs	r3, #0
 8015be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d106      	bne.n	8015bfe <tcp_zero_window_probe+0x22>
 8015bf0:	4b4c      	ldr	r3, [pc, #304]	; (8015d24 <tcp_zero_window_probe+0x148>)
 8015bf2:	f640 024f 	movw	r2, #2127	; 0x84f
 8015bf6:	494c      	ldr	r1, [pc, #304]	; (8015d28 <tcp_zero_window_probe+0x14c>)
 8015bf8:	484c      	ldr	r0, [pc, #304]	; (8015d2c <tcp_zero_window_probe+0x150>)
 8015bfa:	f003 fa1b 	bl	8019034 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c02:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015c04:	6a3b      	ldr	r3, [r7, #32]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d101      	bne.n	8015c0e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	e086      	b.n	8015d1c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015c14:	2bff      	cmp	r3, #255	; 0xff
 8015c16:	d007      	beq.n	8015c28 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015c1e:	3301      	adds	r3, #1
 8015c20:	b2da      	uxtb	r2, r3
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015c28:	6a3b      	ldr	r3, [r7, #32]
 8015c2a:	68db      	ldr	r3, [r3, #12]
 8015c2c:	899b      	ldrh	r3, [r3, #12]
 8015c2e:	b29b      	uxth	r3, r3
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7f8 f8fd 	bl	800de30 <lwip_htons>
 8015c36:	4603      	mov	r3, r0
 8015c38:	b2db      	uxtb	r3, r3
 8015c3a:	f003 0301 	and.w	r3, r3, #1
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d005      	beq.n	8015c4e <tcp_zero_window_probe+0x72>
 8015c42:	6a3b      	ldr	r3, [r7, #32]
 8015c44:	891b      	ldrh	r3, [r3, #8]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d101      	bne.n	8015c4e <tcp_zero_window_probe+0x72>
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	e000      	b.n	8015c50 <tcp_zero_window_probe+0x74>
 8015c4e:	2300      	movs	r3, #0
 8015c50:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015c52:	7ffb      	ldrb	r3, [r7, #31]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	bf0c      	ite	eq
 8015c58:	2301      	moveq	r3, #1
 8015c5a:	2300      	movne	r3, #0
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c64:	b299      	uxth	r1, r3
 8015c66:	6a3b      	ldr	r3, [r7, #32]
 8015c68:	68db      	ldr	r3, [r3, #12]
 8015c6a:	685b      	ldr	r3, [r3, #4]
 8015c6c:	8bba      	ldrh	r2, [r7, #28]
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	f7ff fdf8 	bl	8015864 <tcp_output_alloc_header>
 8015c74:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015c76:	69bb      	ldr	r3, [r7, #24]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d102      	bne.n	8015c82 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c80:	e04c      	b.n	8015d1c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015c82:	69bb      	ldr	r3, [r7, #24]
 8015c84:	685b      	ldr	r3, [r3, #4]
 8015c86:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015c88:	7ffb      	ldrb	r3, [r7, #31]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d011      	beq.n	8015cb2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015c8e:	697b      	ldr	r3, [r7, #20]
 8015c90:	899b      	ldrh	r3, [r3, #12]
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	b21b      	sxth	r3, r3
 8015c96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015c9a:	b21c      	sxth	r4, r3
 8015c9c:	2011      	movs	r0, #17
 8015c9e:	f7f8 f8c7 	bl	800de30 <lwip_htons>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	b21b      	sxth	r3, r3
 8015ca6:	4323      	orrs	r3, r4
 8015ca8:	b21b      	sxth	r3, r3
 8015caa:	b29a      	uxth	r2, r3
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	819a      	strh	r2, [r3, #12]
 8015cb0:	e010      	b.n	8015cd4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015cb2:	69bb      	ldr	r3, [r7, #24]
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	3314      	adds	r3, #20
 8015cb8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015cba:	6a3b      	ldr	r3, [r7, #32]
 8015cbc:	6858      	ldr	r0, [r3, #4]
 8015cbe:	6a3b      	ldr	r3, [r7, #32]
 8015cc0:	685b      	ldr	r3, [r3, #4]
 8015cc2:	891a      	ldrh	r2, [r3, #8]
 8015cc4:	6a3b      	ldr	r3, [r7, #32]
 8015cc6:	891b      	ldrh	r3, [r3, #8]
 8015cc8:	1ad3      	subs	r3, r2, r3
 8015cca:	b29b      	uxth	r3, r3
 8015ccc:	2201      	movs	r2, #1
 8015cce:	6939      	ldr	r1, [r7, #16]
 8015cd0:	f7f9 ff5e 	bl	800fb90 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015cd4:	6a3b      	ldr	r3, [r7, #32]
 8015cd6:	68db      	ldr	r3, [r3, #12]
 8015cd8:	685b      	ldr	r3, [r3, #4]
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f7f8 f8bd 	bl	800de5a <lwip_htonl>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	3301      	adds	r3, #1
 8015ce4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	1ad3      	subs	r3, r2, r3
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	da02      	bge.n	8015cf8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	68fa      	ldr	r2, [r7, #12]
 8015cf6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	69b9      	ldr	r1, [r7, #24]
 8015d00:	6878      	ldr	r0, [r7, #4]
 8015d02:	f7ff fded 	bl	80158e0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015d06:	687a      	ldr	r2, [r7, #4]
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	3304      	adds	r3, #4
 8015d0c:	69b9      	ldr	r1, [r7, #24]
 8015d0e:	6878      	ldr	r0, [r7, #4]
 8015d10:	f7ff fe26 	bl	8015960 <tcp_output_control_segment>
 8015d14:	4603      	mov	r3, r0
 8015d16:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015d18:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	372c      	adds	r7, #44	; 0x2c
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd90      	pop	{r4, r7, pc}
 8015d24:	0801b844 	.word	0x0801b844
 8015d28:	0801c03c 	.word	0x0801c03c
 8015d2c:	0801b898 	.word	0x0801b898

08015d30 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b082      	sub	sp, #8
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015d38:	f7fa f818 	bl	800fd6c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015d3c:	4b0a      	ldr	r3, [pc, #40]	; (8015d68 <tcpip_tcp_timer+0x38>)
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d103      	bne.n	8015d4c <tcpip_tcp_timer+0x1c>
 8015d44:	4b09      	ldr	r3, [pc, #36]	; (8015d6c <tcpip_tcp_timer+0x3c>)
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d005      	beq.n	8015d58 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	4908      	ldr	r1, [pc, #32]	; (8015d70 <tcpip_tcp_timer+0x40>)
 8015d50:	20fa      	movs	r0, #250	; 0xfa
 8015d52:	f000 f8f3 	bl	8015f3c <sys_timeout>
 8015d56:	e003      	b.n	8015d60 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015d58:	4b06      	ldr	r3, [pc, #24]	; (8015d74 <tcpip_tcp_timer+0x44>)
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	601a      	str	r2, [r3, #0]
  }
}
 8015d5e:	bf00      	nop
 8015d60:	bf00      	nop
 8015d62:	3708      	adds	r7, #8
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}
 8015d68:	2400785c 	.word	0x2400785c
 8015d6c:	2400786c 	.word	0x2400786c
 8015d70:	08015d31 	.word	0x08015d31
 8015d74:	24004160 	.word	0x24004160

08015d78 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015d7c:	4b0a      	ldr	r3, [pc, #40]	; (8015da8 <tcp_timer_needed+0x30>)
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d10f      	bne.n	8015da4 <tcp_timer_needed+0x2c>
 8015d84:	4b09      	ldr	r3, [pc, #36]	; (8015dac <tcp_timer_needed+0x34>)
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d103      	bne.n	8015d94 <tcp_timer_needed+0x1c>
 8015d8c:	4b08      	ldr	r3, [pc, #32]	; (8015db0 <tcp_timer_needed+0x38>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d007      	beq.n	8015da4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015d94:	4b04      	ldr	r3, [pc, #16]	; (8015da8 <tcp_timer_needed+0x30>)
 8015d96:	2201      	movs	r2, #1
 8015d98:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	4905      	ldr	r1, [pc, #20]	; (8015db4 <tcp_timer_needed+0x3c>)
 8015d9e:	20fa      	movs	r0, #250	; 0xfa
 8015da0:	f000 f8cc 	bl	8015f3c <sys_timeout>
  }
}
 8015da4:	bf00      	nop
 8015da6:	bd80      	pop	{r7, pc}
 8015da8:	24004160 	.word	0x24004160
 8015dac:	2400785c 	.word	0x2400785c
 8015db0:	2400786c 	.word	0x2400786c
 8015db4:	08015d31 	.word	0x08015d31

08015db8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b086      	sub	sp, #24
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	60f8      	str	r0, [r7, #12]
 8015dc0:	60b9      	str	r1, [r7, #8]
 8015dc2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015dc4:	200a      	movs	r0, #10
 8015dc6:	f7f8 fdc3 	bl	800e950 <memp_malloc>
 8015dca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015dcc:	693b      	ldr	r3, [r7, #16]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d109      	bne.n	8015de6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015dd2:	693b      	ldr	r3, [r7, #16]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d151      	bne.n	8015e7c <sys_timeout_abs+0xc4>
 8015dd8:	4b2a      	ldr	r3, [pc, #168]	; (8015e84 <sys_timeout_abs+0xcc>)
 8015dda:	22be      	movs	r2, #190	; 0xbe
 8015ddc:	492a      	ldr	r1, [pc, #168]	; (8015e88 <sys_timeout_abs+0xd0>)
 8015dde:	482b      	ldr	r0, [pc, #172]	; (8015e8c <sys_timeout_abs+0xd4>)
 8015de0:	f003 f928 	bl	8019034 <iprintf>
    return;
 8015de4:	e04a      	b.n	8015e7c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	2200      	movs	r2, #0
 8015dea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015dec:	693b      	ldr	r3, [r7, #16]
 8015dee:	68ba      	ldr	r2, [r7, #8]
 8015df0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	687a      	ldr	r2, [r7, #4]
 8015df6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	68fa      	ldr	r2, [r7, #12]
 8015dfc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015dfe:	4b24      	ldr	r3, [pc, #144]	; (8015e90 <sys_timeout_abs+0xd8>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d103      	bne.n	8015e0e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015e06:	4a22      	ldr	r2, [pc, #136]	; (8015e90 <sys_timeout_abs+0xd8>)
 8015e08:	693b      	ldr	r3, [r7, #16]
 8015e0a:	6013      	str	r3, [r2, #0]
    return;
 8015e0c:	e037      	b.n	8015e7e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	685a      	ldr	r2, [r3, #4]
 8015e12:	4b1f      	ldr	r3, [pc, #124]	; (8015e90 <sys_timeout_abs+0xd8>)
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	685b      	ldr	r3, [r3, #4]
 8015e18:	1ad3      	subs	r3, r2, r3
 8015e1a:	0fdb      	lsrs	r3, r3, #31
 8015e1c:	f003 0301 	and.w	r3, r3, #1
 8015e20:	b2db      	uxtb	r3, r3
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d007      	beq.n	8015e36 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015e26:	4b1a      	ldr	r3, [pc, #104]	; (8015e90 <sys_timeout_abs+0xd8>)
 8015e28:	681a      	ldr	r2, [r3, #0]
 8015e2a:	693b      	ldr	r3, [r7, #16]
 8015e2c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015e2e:	4a18      	ldr	r2, [pc, #96]	; (8015e90 <sys_timeout_abs+0xd8>)
 8015e30:	693b      	ldr	r3, [r7, #16]
 8015e32:	6013      	str	r3, [r2, #0]
 8015e34:	e023      	b.n	8015e7e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015e36:	4b16      	ldr	r3, [pc, #88]	; (8015e90 <sys_timeout_abs+0xd8>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	617b      	str	r3, [r7, #20]
 8015e3c:	e01a      	b.n	8015e74 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d00b      	beq.n	8015e5e <sys_timeout_abs+0xa6>
 8015e46:	693b      	ldr	r3, [r7, #16]
 8015e48:	685a      	ldr	r2, [r3, #4]
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	685b      	ldr	r3, [r3, #4]
 8015e50:	1ad3      	subs	r3, r2, r3
 8015e52:	0fdb      	lsrs	r3, r3, #31
 8015e54:	f003 0301 	and.w	r3, r3, #1
 8015e58:	b2db      	uxtb	r3, r3
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d007      	beq.n	8015e6e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015e5e:	697b      	ldr	r3, [r7, #20]
 8015e60:	681a      	ldr	r2, [r3, #0]
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015e66:	697b      	ldr	r3, [r7, #20]
 8015e68:	693a      	ldr	r2, [r7, #16]
 8015e6a:	601a      	str	r2, [r3, #0]
        break;
 8015e6c:	e007      	b.n	8015e7e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015e6e:	697b      	ldr	r3, [r7, #20]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	617b      	str	r3, [r7, #20]
 8015e74:	697b      	ldr	r3, [r7, #20]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d1e1      	bne.n	8015e3e <sys_timeout_abs+0x86>
 8015e7a:	e000      	b.n	8015e7e <sys_timeout_abs+0xc6>
    return;
 8015e7c:	bf00      	nop
      }
    }
  }
}
 8015e7e:	3718      	adds	r7, #24
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}
 8015e84:	0801c060 	.word	0x0801c060
 8015e88:	0801c094 	.word	0x0801c094
 8015e8c:	0801c0d4 	.word	0x0801c0d4
 8015e90:	24004158 	.word	0x24004158

08015e94 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b086      	sub	sp, #24
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015ea0:	697b      	ldr	r3, [r7, #20]
 8015ea2:	685b      	ldr	r3, [r3, #4]
 8015ea4:	4798      	blx	r3

  now = sys_now();
 8015ea6:	f7f4 fe15 	bl	800aad4 <sys_now>
 8015eaa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015eac:	697b      	ldr	r3, [r7, #20]
 8015eae:	681a      	ldr	r2, [r3, #0]
 8015eb0:	4b0f      	ldr	r3, [pc, #60]	; (8015ef0 <lwip_cyclic_timer+0x5c>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	4413      	add	r3, r2
 8015eb6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015eb8:	68fa      	ldr	r2, [r7, #12]
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	1ad3      	subs	r3, r2, r3
 8015ebe:	0fdb      	lsrs	r3, r3, #31
 8015ec0:	f003 0301 	and.w	r3, r3, #1
 8015ec4:	b2db      	uxtb	r3, r3
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d009      	beq.n	8015ede <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015eca:	697b      	ldr	r3, [r7, #20]
 8015ecc:	681a      	ldr	r2, [r3, #0]
 8015ece:	693b      	ldr	r3, [r7, #16]
 8015ed0:	4413      	add	r3, r2
 8015ed2:	687a      	ldr	r2, [r7, #4]
 8015ed4:	4907      	ldr	r1, [pc, #28]	; (8015ef4 <lwip_cyclic_timer+0x60>)
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f7ff ff6e 	bl	8015db8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015edc:	e004      	b.n	8015ee8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015ede:	687a      	ldr	r2, [r7, #4]
 8015ee0:	4904      	ldr	r1, [pc, #16]	; (8015ef4 <lwip_cyclic_timer+0x60>)
 8015ee2:	68f8      	ldr	r0, [r7, #12]
 8015ee4:	f7ff ff68 	bl	8015db8 <sys_timeout_abs>
}
 8015ee8:	bf00      	nop
 8015eea:	3718      	adds	r7, #24
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bd80      	pop	{r7, pc}
 8015ef0:	2400415c 	.word	0x2400415c
 8015ef4:	08015e95 	.word	0x08015e95

08015ef8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b082      	sub	sp, #8
 8015efc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015efe:	2301      	movs	r3, #1
 8015f00:	607b      	str	r3, [r7, #4]
 8015f02:	e00e      	b.n	8015f22 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015f04:	4a0b      	ldr	r2, [pc, #44]	; (8015f34 <sys_timeouts_init+0x3c>)
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	00db      	lsls	r3, r3, #3
 8015f10:	4a08      	ldr	r2, [pc, #32]	; (8015f34 <sys_timeouts_init+0x3c>)
 8015f12:	4413      	add	r3, r2
 8015f14:	461a      	mov	r2, r3
 8015f16:	4908      	ldr	r1, [pc, #32]	; (8015f38 <sys_timeouts_init+0x40>)
 8015f18:	f000 f810 	bl	8015f3c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	3301      	adds	r3, #1
 8015f20:	607b      	str	r3, [r7, #4]
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	2b02      	cmp	r3, #2
 8015f26:	d9ed      	bls.n	8015f04 <sys_timeouts_init+0xc>
  }
}
 8015f28:	bf00      	nop
 8015f2a:	bf00      	nop
 8015f2c:	3708      	adds	r7, #8
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bd80      	pop	{r7, pc}
 8015f32:	bf00      	nop
 8015f34:	0801d49c 	.word	0x0801d49c
 8015f38:	08015e95 	.word	0x08015e95

08015f3c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b086      	sub	sp, #24
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	60f8      	str	r0, [r7, #12]
 8015f44:	60b9      	str	r1, [r7, #8]
 8015f46:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015f4e:	d306      	bcc.n	8015f5e <sys_timeout+0x22>
 8015f50:	4b0a      	ldr	r3, [pc, #40]	; (8015f7c <sys_timeout+0x40>)
 8015f52:	f240 1229 	movw	r2, #297	; 0x129
 8015f56:	490a      	ldr	r1, [pc, #40]	; (8015f80 <sys_timeout+0x44>)
 8015f58:	480a      	ldr	r0, [pc, #40]	; (8015f84 <sys_timeout+0x48>)
 8015f5a:	f003 f86b 	bl	8019034 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015f5e:	f7f4 fdb9 	bl	800aad4 <sys_now>
 8015f62:	4602      	mov	r2, r0
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	4413      	add	r3, r2
 8015f68:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015f6a:	687a      	ldr	r2, [r7, #4]
 8015f6c:	68b9      	ldr	r1, [r7, #8]
 8015f6e:	6978      	ldr	r0, [r7, #20]
 8015f70:	f7ff ff22 	bl	8015db8 <sys_timeout_abs>
#endif
}
 8015f74:	bf00      	nop
 8015f76:	3718      	adds	r7, #24
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	0801c060 	.word	0x0801c060
 8015f80:	0801c0fc 	.word	0x0801c0fc
 8015f84:	0801c0d4 	.word	0x0801c0d4

08015f88 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b084      	sub	sp, #16
 8015f8c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015f8e:	f7f4 fda1 	bl	800aad4 <sys_now>
 8015f92:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015f94:	4b17      	ldr	r3, [pc, #92]	; (8015ff4 <sys_check_timeouts+0x6c>)
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015f9a:	68bb      	ldr	r3, [r7, #8]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d022      	beq.n	8015fe6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015fa0:	68bb      	ldr	r3, [r7, #8]
 8015fa2:	685b      	ldr	r3, [r3, #4]
 8015fa4:	68fa      	ldr	r2, [r7, #12]
 8015fa6:	1ad3      	subs	r3, r2, r3
 8015fa8:	0fdb      	lsrs	r3, r3, #31
 8015faa:	f003 0301 	and.w	r3, r3, #1
 8015fae:	b2db      	uxtb	r3, r3
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d11a      	bne.n	8015fea <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	4a0e      	ldr	r2, [pc, #56]	; (8015ff4 <sys_check_timeouts+0x6c>)
 8015fba:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015fbc:	68bb      	ldr	r3, [r7, #8]
 8015fbe:	689b      	ldr	r3, [r3, #8]
 8015fc0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015fc2:	68bb      	ldr	r3, [r7, #8]
 8015fc4:	68db      	ldr	r3, [r3, #12]
 8015fc6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015fc8:	68bb      	ldr	r3, [r7, #8]
 8015fca:	685b      	ldr	r3, [r3, #4]
 8015fcc:	4a0a      	ldr	r2, [pc, #40]	; (8015ff8 <sys_check_timeouts+0x70>)
 8015fce:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015fd0:	68b9      	ldr	r1, [r7, #8]
 8015fd2:	200a      	movs	r0, #10
 8015fd4:	f7f8 fd32 	bl	800ea3c <memp_free>
    if (handler != NULL) {
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d0da      	beq.n	8015f94 <sys_check_timeouts+0xc>
      handler(arg);
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	6838      	ldr	r0, [r7, #0]
 8015fe2:	4798      	blx	r3
  do {
 8015fe4:	e7d6      	b.n	8015f94 <sys_check_timeouts+0xc>
      return;
 8015fe6:	bf00      	nop
 8015fe8:	e000      	b.n	8015fec <sys_check_timeouts+0x64>
      return;
 8015fea:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015fec:	3710      	adds	r7, #16
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
 8015ff2:	bf00      	nop
 8015ff4:	24004158 	.word	0x24004158
 8015ff8:	2400415c 	.word	0x2400415c

08015ffc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b082      	sub	sp, #8
 8016000:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016002:	4b16      	ldr	r3, [pc, #88]	; (801605c <sys_timeouts_sleeptime+0x60>)
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d102      	bne.n	8016010 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801600a:	f04f 33ff 	mov.w	r3, #4294967295
 801600e:	e020      	b.n	8016052 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016010:	f7f4 fd60 	bl	800aad4 <sys_now>
 8016014:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016016:	4b11      	ldr	r3, [pc, #68]	; (801605c <sys_timeouts_sleeptime+0x60>)
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	685a      	ldr	r2, [r3, #4]
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	1ad3      	subs	r3, r2, r3
 8016020:	0fdb      	lsrs	r3, r3, #31
 8016022:	f003 0301 	and.w	r3, r3, #1
 8016026:	b2db      	uxtb	r3, r3
 8016028:	2b00      	cmp	r3, #0
 801602a:	d001      	beq.n	8016030 <sys_timeouts_sleeptime+0x34>
    return 0;
 801602c:	2300      	movs	r3, #0
 801602e:	e010      	b.n	8016052 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016030:	4b0a      	ldr	r3, [pc, #40]	; (801605c <sys_timeouts_sleeptime+0x60>)
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	685a      	ldr	r2, [r3, #4]
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	1ad3      	subs	r3, r2, r3
 801603a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801603c:	683b      	ldr	r3, [r7, #0]
 801603e:	2b00      	cmp	r3, #0
 8016040:	da06      	bge.n	8016050 <sys_timeouts_sleeptime+0x54>
 8016042:	4b07      	ldr	r3, [pc, #28]	; (8016060 <sys_timeouts_sleeptime+0x64>)
 8016044:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016048:	4906      	ldr	r1, [pc, #24]	; (8016064 <sys_timeouts_sleeptime+0x68>)
 801604a:	4807      	ldr	r0, [pc, #28]	; (8016068 <sys_timeouts_sleeptime+0x6c>)
 801604c:	f002 fff2 	bl	8019034 <iprintf>
    return ret;
 8016050:	683b      	ldr	r3, [r7, #0]
  }
}
 8016052:	4618      	mov	r0, r3
 8016054:	3708      	adds	r7, #8
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}
 801605a:	bf00      	nop
 801605c:	24004158 	.word	0x24004158
 8016060:	0801c060 	.word	0x0801c060
 8016064:	0801c134 	.word	0x0801c134
 8016068:	0801c0d4 	.word	0x0801c0d4

0801606c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016070:	f002 fff8 	bl	8019064 <rand>
 8016074:	4603      	mov	r3, r0
 8016076:	b29b      	uxth	r3, r3
 8016078:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801607c:	b29b      	uxth	r3, r3
 801607e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016082:	b29a      	uxth	r2, r3
 8016084:	4b01      	ldr	r3, [pc, #4]	; (801608c <udp_init+0x20>)
 8016086:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016088:	bf00      	nop
 801608a:	bd80      	pop	{r7, pc}
 801608c:	24000038 	.word	0x24000038

08016090 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b084      	sub	sp, #16
 8016094:	af00      	add	r7, sp, #0
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	4613      	mov	r3, r2
 801609c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d105      	bne.n	80160b0 <udp_input_local_match+0x20>
 80160a4:	4b27      	ldr	r3, [pc, #156]	; (8016144 <udp_input_local_match+0xb4>)
 80160a6:	2287      	movs	r2, #135	; 0x87
 80160a8:	4927      	ldr	r1, [pc, #156]	; (8016148 <udp_input_local_match+0xb8>)
 80160aa:	4828      	ldr	r0, [pc, #160]	; (801614c <udp_input_local_match+0xbc>)
 80160ac:	f002 ffc2 	bl	8019034 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d105      	bne.n	80160c2 <udp_input_local_match+0x32>
 80160b6:	4b23      	ldr	r3, [pc, #140]	; (8016144 <udp_input_local_match+0xb4>)
 80160b8:	2288      	movs	r2, #136	; 0x88
 80160ba:	4925      	ldr	r1, [pc, #148]	; (8016150 <udp_input_local_match+0xc0>)
 80160bc:	4823      	ldr	r0, [pc, #140]	; (801614c <udp_input_local_match+0xbc>)
 80160be:	f002 ffb9 	bl	8019034 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	7a1b      	ldrb	r3, [r3, #8]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d00b      	beq.n	80160e2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	7a1a      	ldrb	r2, [r3, #8]
 80160ce:	4b21      	ldr	r3, [pc, #132]	; (8016154 <udp_input_local_match+0xc4>)
 80160d0:	685b      	ldr	r3, [r3, #4]
 80160d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80160d6:	3301      	adds	r3, #1
 80160d8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80160da:	429a      	cmp	r2, r3
 80160dc:	d001      	beq.n	80160e2 <udp_input_local_match+0x52>
    return 0;
 80160de:	2300      	movs	r3, #0
 80160e0:	e02b      	b.n	801613a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80160e2:	79fb      	ldrb	r3, [r7, #7]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d018      	beq.n	801611a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d013      	beq.n	8016116 <udp_input_local_match+0x86>
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d00f      	beq.n	8016116 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80160f6:	4b17      	ldr	r3, [pc, #92]	; (8016154 <udp_input_local_match+0xc4>)
 80160f8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80160fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160fe:	d00a      	beq.n	8016116 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	681a      	ldr	r2, [r3, #0]
 8016104:	4b13      	ldr	r3, [pc, #76]	; (8016154 <udp_input_local_match+0xc4>)
 8016106:	695b      	ldr	r3, [r3, #20]
 8016108:	405a      	eors	r2, r3
 801610a:	68bb      	ldr	r3, [r7, #8]
 801610c:	3308      	adds	r3, #8
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016112:	2b00      	cmp	r3, #0
 8016114:	d110      	bne.n	8016138 <udp_input_local_match+0xa8>
          return 1;
 8016116:	2301      	movs	r3, #1
 8016118:	e00f      	b.n	801613a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d009      	beq.n	8016134 <udp_input_local_match+0xa4>
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d005      	beq.n	8016134 <udp_input_local_match+0xa4>
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	681a      	ldr	r2, [r3, #0]
 801612c:	4b09      	ldr	r3, [pc, #36]	; (8016154 <udp_input_local_match+0xc4>)
 801612e:	695b      	ldr	r3, [r3, #20]
 8016130:	429a      	cmp	r2, r3
 8016132:	d101      	bne.n	8016138 <udp_input_local_match+0xa8>
        return 1;
 8016134:	2301      	movs	r3, #1
 8016136:	e000      	b.n	801613a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016138:	2300      	movs	r3, #0
}
 801613a:	4618      	mov	r0, r3
 801613c:	3710      	adds	r7, #16
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}
 8016142:	bf00      	nop
 8016144:	0801c148 	.word	0x0801c148
 8016148:	0801c178 	.word	0x0801c178
 801614c:	0801c19c 	.word	0x0801c19c
 8016150:	0801c1c4 	.word	0x0801c1c4
 8016154:	2400479c 	.word	0x2400479c

08016158 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016158:	b590      	push	{r4, r7, lr}
 801615a:	b08d      	sub	sp, #52	; 0x34
 801615c:	af02      	add	r7, sp, #8
 801615e:	6078      	str	r0, [r7, #4]
 8016160:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016162:	2300      	movs	r3, #0
 8016164:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d105      	bne.n	8016178 <udp_input+0x20>
 801616c:	4b7c      	ldr	r3, [pc, #496]	; (8016360 <udp_input+0x208>)
 801616e:	22cf      	movs	r2, #207	; 0xcf
 8016170:	497c      	ldr	r1, [pc, #496]	; (8016364 <udp_input+0x20c>)
 8016172:	487d      	ldr	r0, [pc, #500]	; (8016368 <udp_input+0x210>)
 8016174:	f002 ff5e 	bl	8019034 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016178:	683b      	ldr	r3, [r7, #0]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d105      	bne.n	801618a <udp_input+0x32>
 801617e:	4b78      	ldr	r3, [pc, #480]	; (8016360 <udp_input+0x208>)
 8016180:	22d0      	movs	r2, #208	; 0xd0
 8016182:	497a      	ldr	r1, [pc, #488]	; (801636c <udp_input+0x214>)
 8016184:	4878      	ldr	r0, [pc, #480]	; (8016368 <udp_input+0x210>)
 8016186:	f002 ff55 	bl	8019034 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	895b      	ldrh	r3, [r3, #10]
 801618e:	2b07      	cmp	r3, #7
 8016190:	d803      	bhi.n	801619a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f7f9 faf6 	bl	800f784 <pbuf_free>
    goto end;
 8016198:	e0de      	b.n	8016358 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	685b      	ldr	r3, [r3, #4]
 801619e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80161a0:	4b73      	ldr	r3, [pc, #460]	; (8016370 <udp_input+0x218>)
 80161a2:	695b      	ldr	r3, [r3, #20]
 80161a4:	4a72      	ldr	r2, [pc, #456]	; (8016370 <udp_input+0x218>)
 80161a6:	6812      	ldr	r2, [r2, #0]
 80161a8:	4611      	mov	r1, r2
 80161aa:	4618      	mov	r0, r3
 80161ac:	f001 fcae 	bl	8017b0c <ip4_addr_isbroadcast_u32>
 80161b0:	4603      	mov	r3, r0
 80161b2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80161b4:	697b      	ldr	r3, [r7, #20]
 80161b6:	881b      	ldrh	r3, [r3, #0]
 80161b8:	b29b      	uxth	r3, r3
 80161ba:	4618      	mov	r0, r3
 80161bc:	f7f7 fe38 	bl	800de30 <lwip_htons>
 80161c0:	4603      	mov	r3, r0
 80161c2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80161c4:	697b      	ldr	r3, [r7, #20]
 80161c6:	885b      	ldrh	r3, [r3, #2]
 80161c8:	b29b      	uxth	r3, r3
 80161ca:	4618      	mov	r0, r3
 80161cc:	f7f7 fe30 	bl	800de30 <lwip_htons>
 80161d0:	4603      	mov	r3, r0
 80161d2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80161d4:	2300      	movs	r3, #0
 80161d6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80161d8:	2300      	movs	r3, #0
 80161da:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80161dc:	2300      	movs	r3, #0
 80161de:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80161e0:	4b64      	ldr	r3, [pc, #400]	; (8016374 <udp_input+0x21c>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	627b      	str	r3, [r7, #36]	; 0x24
 80161e6:	e054      	b.n	8016292 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80161e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ea:	8a5b      	ldrh	r3, [r3, #18]
 80161ec:	89fa      	ldrh	r2, [r7, #14]
 80161ee:	429a      	cmp	r2, r3
 80161f0:	d14a      	bne.n	8016288 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80161f2:	7cfb      	ldrb	r3, [r7, #19]
 80161f4:	461a      	mov	r2, r3
 80161f6:	6839      	ldr	r1, [r7, #0]
 80161f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161fa:	f7ff ff49 	bl	8016090 <udp_input_local_match>
 80161fe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016200:	2b00      	cmp	r3, #0
 8016202:	d041      	beq.n	8016288 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016206:	7c1b      	ldrb	r3, [r3, #16]
 8016208:	f003 0304 	and.w	r3, r3, #4
 801620c:	2b00      	cmp	r3, #0
 801620e:	d11d      	bne.n	801624c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016210:	69fb      	ldr	r3, [r7, #28]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d102      	bne.n	801621c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016218:	61fb      	str	r3, [r7, #28]
 801621a:	e017      	b.n	801624c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801621c:	7cfb      	ldrb	r3, [r7, #19]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d014      	beq.n	801624c <udp_input+0xf4>
 8016222:	4b53      	ldr	r3, [pc, #332]	; (8016370 <udp_input+0x218>)
 8016224:	695b      	ldr	r3, [r3, #20]
 8016226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801622a:	d10f      	bne.n	801624c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801622c:	69fb      	ldr	r3, [r7, #28]
 801622e:	681a      	ldr	r2, [r3, #0]
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	3304      	adds	r3, #4
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	429a      	cmp	r2, r3
 8016238:	d008      	beq.n	801624c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801623c:	681a      	ldr	r2, [r3, #0]
 801623e:	683b      	ldr	r3, [r7, #0]
 8016240:	3304      	adds	r3, #4
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	429a      	cmp	r2, r3
 8016246:	d101      	bne.n	801624c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624e:	8a9b      	ldrh	r3, [r3, #20]
 8016250:	8a3a      	ldrh	r2, [r7, #16]
 8016252:	429a      	cmp	r2, r3
 8016254:	d118      	bne.n	8016288 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016258:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801625a:	2b00      	cmp	r3, #0
 801625c:	d005      	beq.n	801626a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016260:	685a      	ldr	r2, [r3, #4]
 8016262:	4b43      	ldr	r3, [pc, #268]	; (8016370 <udp_input+0x218>)
 8016264:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016266:	429a      	cmp	r2, r3
 8016268:	d10e      	bne.n	8016288 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801626a:	6a3b      	ldr	r3, [r7, #32]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d014      	beq.n	801629a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016272:	68da      	ldr	r2, [r3, #12]
 8016274:	6a3b      	ldr	r3, [r7, #32]
 8016276:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016278:	4b3e      	ldr	r3, [pc, #248]	; (8016374 <udp_input+0x21c>)
 801627a:	681a      	ldr	r2, [r3, #0]
 801627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801627e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016280:	4a3c      	ldr	r2, [pc, #240]	; (8016374 <udp_input+0x21c>)
 8016282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016284:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016286:	e008      	b.n	801629a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801628a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801628e:	68db      	ldr	r3, [r3, #12]
 8016290:	627b      	str	r3, [r7, #36]	; 0x24
 8016292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016294:	2b00      	cmp	r3, #0
 8016296:	d1a7      	bne.n	80161e8 <udp_input+0x90>
 8016298:	e000      	b.n	801629c <udp_input+0x144>
        break;
 801629a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d101      	bne.n	80162a6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80162a2:	69fb      	ldr	r3, [r7, #28]
 80162a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80162a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d002      	beq.n	80162b2 <udp_input+0x15a>
    for_us = 1;
 80162ac:	2301      	movs	r3, #1
 80162ae:	76fb      	strb	r3, [r7, #27]
 80162b0:	e00a      	b.n	80162c8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	3304      	adds	r3, #4
 80162b6:	681a      	ldr	r2, [r3, #0]
 80162b8:	4b2d      	ldr	r3, [pc, #180]	; (8016370 <udp_input+0x218>)
 80162ba:	695b      	ldr	r3, [r3, #20]
 80162bc:	429a      	cmp	r2, r3
 80162be:	bf0c      	ite	eq
 80162c0:	2301      	moveq	r3, #1
 80162c2:	2300      	movne	r3, #0
 80162c4:	b2db      	uxtb	r3, r3
 80162c6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80162c8:	7efb      	ldrb	r3, [r7, #27]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d041      	beq.n	8016352 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80162ce:	2108      	movs	r1, #8
 80162d0:	6878      	ldr	r0, [r7, #4]
 80162d2:	f7f9 f9d1 	bl	800f678 <pbuf_remove_header>
 80162d6:	4603      	mov	r3, r0
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d00a      	beq.n	80162f2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80162dc:	4b20      	ldr	r3, [pc, #128]	; (8016360 <udp_input+0x208>)
 80162de:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80162e2:	4925      	ldr	r1, [pc, #148]	; (8016378 <udp_input+0x220>)
 80162e4:	4820      	ldr	r0, [pc, #128]	; (8016368 <udp_input+0x210>)
 80162e6:	f002 fea5 	bl	8019034 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f7f9 fa4a 	bl	800f784 <pbuf_free>
      goto end;
 80162f0:	e032      	b.n	8016358 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80162f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d012      	beq.n	801631e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80162f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fa:	699b      	ldr	r3, [r3, #24]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d00a      	beq.n	8016316 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016302:	699c      	ldr	r4, [r3, #24]
 8016304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016306:	69d8      	ldr	r0, [r3, #28]
 8016308:	8a3b      	ldrh	r3, [r7, #16]
 801630a:	9300      	str	r3, [sp, #0]
 801630c:	4b1b      	ldr	r3, [pc, #108]	; (801637c <udp_input+0x224>)
 801630e:	687a      	ldr	r2, [r7, #4]
 8016310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016312:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016314:	e021      	b.n	801635a <udp_input+0x202>
        pbuf_free(p);
 8016316:	6878      	ldr	r0, [r7, #4]
 8016318:	f7f9 fa34 	bl	800f784 <pbuf_free>
        goto end;
 801631c:	e01c      	b.n	8016358 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801631e:	7cfb      	ldrb	r3, [r7, #19]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d112      	bne.n	801634a <udp_input+0x1f2>
 8016324:	4b12      	ldr	r3, [pc, #72]	; (8016370 <udp_input+0x218>)
 8016326:	695b      	ldr	r3, [r3, #20]
 8016328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801632c:	2be0      	cmp	r3, #224	; 0xe0
 801632e:	d00c      	beq.n	801634a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016330:	4b0f      	ldr	r3, [pc, #60]	; (8016370 <udp_input+0x218>)
 8016332:	899b      	ldrh	r3, [r3, #12]
 8016334:	3308      	adds	r3, #8
 8016336:	b29b      	uxth	r3, r3
 8016338:	b21b      	sxth	r3, r3
 801633a:	4619      	mov	r1, r3
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f7f9 fa0e 	bl	800f75e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016342:	2103      	movs	r1, #3
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f001 f8b7 	bl	80174b8 <icmp_dest_unreach>
      pbuf_free(p);
 801634a:	6878      	ldr	r0, [r7, #4]
 801634c:	f7f9 fa1a 	bl	800f784 <pbuf_free>
  return;
 8016350:	e003      	b.n	801635a <udp_input+0x202>
    pbuf_free(p);
 8016352:	6878      	ldr	r0, [r7, #4]
 8016354:	f7f9 fa16 	bl	800f784 <pbuf_free>
  return;
 8016358:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801635a:	372c      	adds	r7, #44	; 0x2c
 801635c:	46bd      	mov	sp, r7
 801635e:	bd90      	pop	{r4, r7, pc}
 8016360:	0801c148 	.word	0x0801c148
 8016364:	0801c1ec 	.word	0x0801c1ec
 8016368:	0801c19c 	.word	0x0801c19c
 801636c:	0801c204 	.word	0x0801c204
 8016370:	2400479c 	.word	0x2400479c
 8016374:	24007874 	.word	0x24007874
 8016378:	0801c220 	.word	0x0801c220
 801637c:	240047ac 	.word	0x240047ac

08016380 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016380:	b480      	push	{r7}
 8016382:	b085      	sub	sp, #20
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d01e      	beq.n	80163ce <udp_netif_ip_addr_changed+0x4e>
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d01a      	beq.n	80163ce <udp_netif_ip_addr_changed+0x4e>
 8016398:	683b      	ldr	r3, [r7, #0]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d017      	beq.n	80163ce <udp_netif_ip_addr_changed+0x4e>
 801639e:	683b      	ldr	r3, [r7, #0]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d013      	beq.n	80163ce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80163a6:	4b0d      	ldr	r3, [pc, #52]	; (80163dc <udp_netif_ip_addr_changed+0x5c>)
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	60fb      	str	r3, [r7, #12]
 80163ac:	e00c      	b.n	80163c8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d103      	bne.n	80163c2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80163ba:	683b      	ldr	r3, [r7, #0]
 80163bc:	681a      	ldr	r2, [r3, #0]
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	68db      	ldr	r3, [r3, #12]
 80163c6:	60fb      	str	r3, [r7, #12]
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d1ef      	bne.n	80163ae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80163ce:	bf00      	nop
 80163d0:	3714      	adds	r7, #20
 80163d2:	46bd      	mov	sp, r7
 80163d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d8:	4770      	bx	lr
 80163da:	bf00      	nop
 80163dc:	24007874 	.word	0x24007874

080163e0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b082      	sub	sp, #8
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80163e8:	4915      	ldr	r1, [pc, #84]	; (8016440 <etharp_free_entry+0x60>)
 80163ea:	687a      	ldr	r2, [r7, #4]
 80163ec:	4613      	mov	r3, r2
 80163ee:	005b      	lsls	r3, r3, #1
 80163f0:	4413      	add	r3, r2
 80163f2:	00db      	lsls	r3, r3, #3
 80163f4:	440b      	add	r3, r1
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d013      	beq.n	8016424 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80163fc:	4910      	ldr	r1, [pc, #64]	; (8016440 <etharp_free_entry+0x60>)
 80163fe:	687a      	ldr	r2, [r7, #4]
 8016400:	4613      	mov	r3, r2
 8016402:	005b      	lsls	r3, r3, #1
 8016404:	4413      	add	r3, r2
 8016406:	00db      	lsls	r3, r3, #3
 8016408:	440b      	add	r3, r1
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	4618      	mov	r0, r3
 801640e:	f7f9 f9b9 	bl	800f784 <pbuf_free>
    arp_table[i].q = NULL;
 8016412:	490b      	ldr	r1, [pc, #44]	; (8016440 <etharp_free_entry+0x60>)
 8016414:	687a      	ldr	r2, [r7, #4]
 8016416:	4613      	mov	r3, r2
 8016418:	005b      	lsls	r3, r3, #1
 801641a:	4413      	add	r3, r2
 801641c:	00db      	lsls	r3, r3, #3
 801641e:	440b      	add	r3, r1
 8016420:	2200      	movs	r2, #0
 8016422:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016424:	4906      	ldr	r1, [pc, #24]	; (8016440 <etharp_free_entry+0x60>)
 8016426:	687a      	ldr	r2, [r7, #4]
 8016428:	4613      	mov	r3, r2
 801642a:	005b      	lsls	r3, r3, #1
 801642c:	4413      	add	r3, r2
 801642e:	00db      	lsls	r3, r3, #3
 8016430:	440b      	add	r3, r1
 8016432:	3314      	adds	r3, #20
 8016434:	2200      	movs	r2, #0
 8016436:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016438:	bf00      	nop
 801643a:	3708      	adds	r7, #8
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}
 8016440:	24004164 	.word	0x24004164

08016444 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b082      	sub	sp, #8
 8016448:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801644a:	2300      	movs	r3, #0
 801644c:	607b      	str	r3, [r7, #4]
 801644e:	e096      	b.n	801657e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016450:	494f      	ldr	r1, [pc, #316]	; (8016590 <etharp_tmr+0x14c>)
 8016452:	687a      	ldr	r2, [r7, #4]
 8016454:	4613      	mov	r3, r2
 8016456:	005b      	lsls	r3, r3, #1
 8016458:	4413      	add	r3, r2
 801645a:	00db      	lsls	r3, r3, #3
 801645c:	440b      	add	r3, r1
 801645e:	3314      	adds	r3, #20
 8016460:	781b      	ldrb	r3, [r3, #0]
 8016462:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016464:	78fb      	ldrb	r3, [r7, #3]
 8016466:	2b00      	cmp	r3, #0
 8016468:	f000 8086 	beq.w	8016578 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801646c:	4948      	ldr	r1, [pc, #288]	; (8016590 <etharp_tmr+0x14c>)
 801646e:	687a      	ldr	r2, [r7, #4]
 8016470:	4613      	mov	r3, r2
 8016472:	005b      	lsls	r3, r3, #1
 8016474:	4413      	add	r3, r2
 8016476:	00db      	lsls	r3, r3, #3
 8016478:	440b      	add	r3, r1
 801647a:	3312      	adds	r3, #18
 801647c:	881b      	ldrh	r3, [r3, #0]
 801647e:	3301      	adds	r3, #1
 8016480:	b298      	uxth	r0, r3
 8016482:	4943      	ldr	r1, [pc, #268]	; (8016590 <etharp_tmr+0x14c>)
 8016484:	687a      	ldr	r2, [r7, #4]
 8016486:	4613      	mov	r3, r2
 8016488:	005b      	lsls	r3, r3, #1
 801648a:	4413      	add	r3, r2
 801648c:	00db      	lsls	r3, r3, #3
 801648e:	440b      	add	r3, r1
 8016490:	3312      	adds	r3, #18
 8016492:	4602      	mov	r2, r0
 8016494:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016496:	493e      	ldr	r1, [pc, #248]	; (8016590 <etharp_tmr+0x14c>)
 8016498:	687a      	ldr	r2, [r7, #4]
 801649a:	4613      	mov	r3, r2
 801649c:	005b      	lsls	r3, r3, #1
 801649e:	4413      	add	r3, r2
 80164a0:	00db      	lsls	r3, r3, #3
 80164a2:	440b      	add	r3, r1
 80164a4:	3312      	adds	r3, #18
 80164a6:	881b      	ldrh	r3, [r3, #0]
 80164a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80164ac:	d215      	bcs.n	80164da <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80164ae:	4938      	ldr	r1, [pc, #224]	; (8016590 <etharp_tmr+0x14c>)
 80164b0:	687a      	ldr	r2, [r7, #4]
 80164b2:	4613      	mov	r3, r2
 80164b4:	005b      	lsls	r3, r3, #1
 80164b6:	4413      	add	r3, r2
 80164b8:	00db      	lsls	r3, r3, #3
 80164ba:	440b      	add	r3, r1
 80164bc:	3314      	adds	r3, #20
 80164be:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80164c0:	2b01      	cmp	r3, #1
 80164c2:	d10e      	bne.n	80164e2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80164c4:	4932      	ldr	r1, [pc, #200]	; (8016590 <etharp_tmr+0x14c>)
 80164c6:	687a      	ldr	r2, [r7, #4]
 80164c8:	4613      	mov	r3, r2
 80164ca:	005b      	lsls	r3, r3, #1
 80164cc:	4413      	add	r3, r2
 80164ce:	00db      	lsls	r3, r3, #3
 80164d0:	440b      	add	r3, r1
 80164d2:	3312      	adds	r3, #18
 80164d4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80164d6:	2b04      	cmp	r3, #4
 80164d8:	d903      	bls.n	80164e2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f7ff ff80 	bl	80163e0 <etharp_free_entry>
 80164e0:	e04a      	b.n	8016578 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80164e2:	492b      	ldr	r1, [pc, #172]	; (8016590 <etharp_tmr+0x14c>)
 80164e4:	687a      	ldr	r2, [r7, #4]
 80164e6:	4613      	mov	r3, r2
 80164e8:	005b      	lsls	r3, r3, #1
 80164ea:	4413      	add	r3, r2
 80164ec:	00db      	lsls	r3, r3, #3
 80164ee:	440b      	add	r3, r1
 80164f0:	3314      	adds	r3, #20
 80164f2:	781b      	ldrb	r3, [r3, #0]
 80164f4:	2b03      	cmp	r3, #3
 80164f6:	d10a      	bne.n	801650e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80164f8:	4925      	ldr	r1, [pc, #148]	; (8016590 <etharp_tmr+0x14c>)
 80164fa:	687a      	ldr	r2, [r7, #4]
 80164fc:	4613      	mov	r3, r2
 80164fe:	005b      	lsls	r3, r3, #1
 8016500:	4413      	add	r3, r2
 8016502:	00db      	lsls	r3, r3, #3
 8016504:	440b      	add	r3, r1
 8016506:	3314      	adds	r3, #20
 8016508:	2204      	movs	r2, #4
 801650a:	701a      	strb	r2, [r3, #0]
 801650c:	e034      	b.n	8016578 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801650e:	4920      	ldr	r1, [pc, #128]	; (8016590 <etharp_tmr+0x14c>)
 8016510:	687a      	ldr	r2, [r7, #4]
 8016512:	4613      	mov	r3, r2
 8016514:	005b      	lsls	r3, r3, #1
 8016516:	4413      	add	r3, r2
 8016518:	00db      	lsls	r3, r3, #3
 801651a:	440b      	add	r3, r1
 801651c:	3314      	adds	r3, #20
 801651e:	781b      	ldrb	r3, [r3, #0]
 8016520:	2b04      	cmp	r3, #4
 8016522:	d10a      	bne.n	801653a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016524:	491a      	ldr	r1, [pc, #104]	; (8016590 <etharp_tmr+0x14c>)
 8016526:	687a      	ldr	r2, [r7, #4]
 8016528:	4613      	mov	r3, r2
 801652a:	005b      	lsls	r3, r3, #1
 801652c:	4413      	add	r3, r2
 801652e:	00db      	lsls	r3, r3, #3
 8016530:	440b      	add	r3, r1
 8016532:	3314      	adds	r3, #20
 8016534:	2202      	movs	r2, #2
 8016536:	701a      	strb	r2, [r3, #0]
 8016538:	e01e      	b.n	8016578 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801653a:	4915      	ldr	r1, [pc, #84]	; (8016590 <etharp_tmr+0x14c>)
 801653c:	687a      	ldr	r2, [r7, #4]
 801653e:	4613      	mov	r3, r2
 8016540:	005b      	lsls	r3, r3, #1
 8016542:	4413      	add	r3, r2
 8016544:	00db      	lsls	r3, r3, #3
 8016546:	440b      	add	r3, r1
 8016548:	3314      	adds	r3, #20
 801654a:	781b      	ldrb	r3, [r3, #0]
 801654c:	2b01      	cmp	r3, #1
 801654e:	d113      	bne.n	8016578 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016550:	490f      	ldr	r1, [pc, #60]	; (8016590 <etharp_tmr+0x14c>)
 8016552:	687a      	ldr	r2, [r7, #4]
 8016554:	4613      	mov	r3, r2
 8016556:	005b      	lsls	r3, r3, #1
 8016558:	4413      	add	r3, r2
 801655a:	00db      	lsls	r3, r3, #3
 801655c:	440b      	add	r3, r1
 801655e:	3308      	adds	r3, #8
 8016560:	6818      	ldr	r0, [r3, #0]
 8016562:	687a      	ldr	r2, [r7, #4]
 8016564:	4613      	mov	r3, r2
 8016566:	005b      	lsls	r3, r3, #1
 8016568:	4413      	add	r3, r2
 801656a:	00db      	lsls	r3, r3, #3
 801656c:	4a08      	ldr	r2, [pc, #32]	; (8016590 <etharp_tmr+0x14c>)
 801656e:	4413      	add	r3, r2
 8016570:	3304      	adds	r3, #4
 8016572:	4619      	mov	r1, r3
 8016574:	f000 fe6e 	bl	8017254 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	3301      	adds	r3, #1
 801657c:	607b      	str	r3, [r7, #4]
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	2b09      	cmp	r3, #9
 8016582:	f77f af65 	ble.w	8016450 <etharp_tmr+0xc>
      }
    }
  }
}
 8016586:	bf00      	nop
 8016588:	bf00      	nop
 801658a:	3708      	adds	r7, #8
 801658c:	46bd      	mov	sp, r7
 801658e:	bd80      	pop	{r7, pc}
 8016590:	24004164 	.word	0x24004164

08016594 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b08a      	sub	sp, #40	; 0x28
 8016598:	af00      	add	r7, sp, #0
 801659a:	60f8      	str	r0, [r7, #12]
 801659c:	460b      	mov	r3, r1
 801659e:	607a      	str	r2, [r7, #4]
 80165a0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80165a2:	230a      	movs	r3, #10
 80165a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80165a6:	230a      	movs	r3, #10
 80165a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80165aa:	230a      	movs	r3, #10
 80165ac:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80165ae:	2300      	movs	r3, #0
 80165b0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80165b2:	230a      	movs	r3, #10
 80165b4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80165b6:	2300      	movs	r3, #0
 80165b8:	83bb      	strh	r3, [r7, #28]
 80165ba:	2300      	movs	r3, #0
 80165bc:	837b      	strh	r3, [r7, #26]
 80165be:	2300      	movs	r3, #0
 80165c0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165c2:	2300      	movs	r3, #0
 80165c4:	843b      	strh	r3, [r7, #32]
 80165c6:	e0ae      	b.n	8016726 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80165c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165cc:	49a6      	ldr	r1, [pc, #664]	; (8016868 <etharp_find_entry+0x2d4>)
 80165ce:	4613      	mov	r3, r2
 80165d0:	005b      	lsls	r3, r3, #1
 80165d2:	4413      	add	r3, r2
 80165d4:	00db      	lsls	r3, r3, #3
 80165d6:	440b      	add	r3, r1
 80165d8:	3314      	adds	r3, #20
 80165da:	781b      	ldrb	r3, [r3, #0]
 80165dc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80165de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80165e2:	2b0a      	cmp	r3, #10
 80165e4:	d105      	bne.n	80165f2 <etharp_find_entry+0x5e>
 80165e6:	7dfb      	ldrb	r3, [r7, #23]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d102      	bne.n	80165f2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80165ec:	8c3b      	ldrh	r3, [r7, #32]
 80165ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80165f0:	e095      	b.n	801671e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80165f2:	7dfb      	ldrb	r3, [r7, #23]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	f000 8092 	beq.w	801671e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80165fa:	7dfb      	ldrb	r3, [r7, #23]
 80165fc:	2b01      	cmp	r3, #1
 80165fe:	d009      	beq.n	8016614 <etharp_find_entry+0x80>
 8016600:	7dfb      	ldrb	r3, [r7, #23]
 8016602:	2b01      	cmp	r3, #1
 8016604:	d806      	bhi.n	8016614 <etharp_find_entry+0x80>
 8016606:	4b99      	ldr	r3, [pc, #612]	; (801686c <etharp_find_entry+0x2d8>)
 8016608:	f240 1223 	movw	r2, #291	; 0x123
 801660c:	4998      	ldr	r1, [pc, #608]	; (8016870 <etharp_find_entry+0x2dc>)
 801660e:	4899      	ldr	r0, [pc, #612]	; (8016874 <etharp_find_entry+0x2e0>)
 8016610:	f002 fd10 	bl	8019034 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d020      	beq.n	801665c <etharp_find_entry+0xc8>
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	6819      	ldr	r1, [r3, #0]
 801661e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016622:	4891      	ldr	r0, [pc, #580]	; (8016868 <etharp_find_entry+0x2d4>)
 8016624:	4613      	mov	r3, r2
 8016626:	005b      	lsls	r3, r3, #1
 8016628:	4413      	add	r3, r2
 801662a:	00db      	lsls	r3, r3, #3
 801662c:	4403      	add	r3, r0
 801662e:	3304      	adds	r3, #4
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	4299      	cmp	r1, r3
 8016634:	d112      	bne.n	801665c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d00c      	beq.n	8016656 <etharp_find_entry+0xc2>
 801663c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016640:	4989      	ldr	r1, [pc, #548]	; (8016868 <etharp_find_entry+0x2d4>)
 8016642:	4613      	mov	r3, r2
 8016644:	005b      	lsls	r3, r3, #1
 8016646:	4413      	add	r3, r2
 8016648:	00db      	lsls	r3, r3, #3
 801664a:	440b      	add	r3, r1
 801664c:	3308      	adds	r3, #8
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	687a      	ldr	r2, [r7, #4]
 8016652:	429a      	cmp	r2, r3
 8016654:	d102      	bne.n	801665c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016656:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801665a:	e100      	b.n	801685e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801665c:	7dfb      	ldrb	r3, [r7, #23]
 801665e:	2b01      	cmp	r3, #1
 8016660:	d140      	bne.n	80166e4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016662:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016666:	4980      	ldr	r1, [pc, #512]	; (8016868 <etharp_find_entry+0x2d4>)
 8016668:	4613      	mov	r3, r2
 801666a:	005b      	lsls	r3, r3, #1
 801666c:	4413      	add	r3, r2
 801666e:	00db      	lsls	r3, r3, #3
 8016670:	440b      	add	r3, r1
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d01a      	beq.n	80166ae <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016678:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801667c:	497a      	ldr	r1, [pc, #488]	; (8016868 <etharp_find_entry+0x2d4>)
 801667e:	4613      	mov	r3, r2
 8016680:	005b      	lsls	r3, r3, #1
 8016682:	4413      	add	r3, r2
 8016684:	00db      	lsls	r3, r3, #3
 8016686:	440b      	add	r3, r1
 8016688:	3312      	adds	r3, #18
 801668a:	881b      	ldrh	r3, [r3, #0]
 801668c:	8bba      	ldrh	r2, [r7, #28]
 801668e:	429a      	cmp	r2, r3
 8016690:	d845      	bhi.n	801671e <etharp_find_entry+0x18a>
            old_queue = i;
 8016692:	8c3b      	ldrh	r3, [r7, #32]
 8016694:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016696:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801669a:	4973      	ldr	r1, [pc, #460]	; (8016868 <etharp_find_entry+0x2d4>)
 801669c:	4613      	mov	r3, r2
 801669e:	005b      	lsls	r3, r3, #1
 80166a0:	4413      	add	r3, r2
 80166a2:	00db      	lsls	r3, r3, #3
 80166a4:	440b      	add	r3, r1
 80166a6:	3312      	adds	r3, #18
 80166a8:	881b      	ldrh	r3, [r3, #0]
 80166aa:	83bb      	strh	r3, [r7, #28]
 80166ac:	e037      	b.n	801671e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80166ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166b2:	496d      	ldr	r1, [pc, #436]	; (8016868 <etharp_find_entry+0x2d4>)
 80166b4:	4613      	mov	r3, r2
 80166b6:	005b      	lsls	r3, r3, #1
 80166b8:	4413      	add	r3, r2
 80166ba:	00db      	lsls	r3, r3, #3
 80166bc:	440b      	add	r3, r1
 80166be:	3312      	adds	r3, #18
 80166c0:	881b      	ldrh	r3, [r3, #0]
 80166c2:	8b7a      	ldrh	r2, [r7, #26]
 80166c4:	429a      	cmp	r2, r3
 80166c6:	d82a      	bhi.n	801671e <etharp_find_entry+0x18a>
            old_pending = i;
 80166c8:	8c3b      	ldrh	r3, [r7, #32]
 80166ca:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80166cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166d0:	4965      	ldr	r1, [pc, #404]	; (8016868 <etharp_find_entry+0x2d4>)
 80166d2:	4613      	mov	r3, r2
 80166d4:	005b      	lsls	r3, r3, #1
 80166d6:	4413      	add	r3, r2
 80166d8:	00db      	lsls	r3, r3, #3
 80166da:	440b      	add	r3, r1
 80166dc:	3312      	adds	r3, #18
 80166de:	881b      	ldrh	r3, [r3, #0]
 80166e0:	837b      	strh	r3, [r7, #26]
 80166e2:	e01c      	b.n	801671e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80166e4:	7dfb      	ldrb	r3, [r7, #23]
 80166e6:	2b01      	cmp	r3, #1
 80166e8:	d919      	bls.n	801671e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80166ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166ee:	495e      	ldr	r1, [pc, #376]	; (8016868 <etharp_find_entry+0x2d4>)
 80166f0:	4613      	mov	r3, r2
 80166f2:	005b      	lsls	r3, r3, #1
 80166f4:	4413      	add	r3, r2
 80166f6:	00db      	lsls	r3, r3, #3
 80166f8:	440b      	add	r3, r1
 80166fa:	3312      	adds	r3, #18
 80166fc:	881b      	ldrh	r3, [r3, #0]
 80166fe:	8b3a      	ldrh	r2, [r7, #24]
 8016700:	429a      	cmp	r2, r3
 8016702:	d80c      	bhi.n	801671e <etharp_find_entry+0x18a>
            old_stable = i;
 8016704:	8c3b      	ldrh	r3, [r7, #32]
 8016706:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016708:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801670c:	4956      	ldr	r1, [pc, #344]	; (8016868 <etharp_find_entry+0x2d4>)
 801670e:	4613      	mov	r3, r2
 8016710:	005b      	lsls	r3, r3, #1
 8016712:	4413      	add	r3, r2
 8016714:	00db      	lsls	r3, r3, #3
 8016716:	440b      	add	r3, r1
 8016718:	3312      	adds	r3, #18
 801671a:	881b      	ldrh	r3, [r3, #0]
 801671c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801671e:	8c3b      	ldrh	r3, [r7, #32]
 8016720:	3301      	adds	r3, #1
 8016722:	b29b      	uxth	r3, r3
 8016724:	843b      	strh	r3, [r7, #32]
 8016726:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801672a:	2b09      	cmp	r3, #9
 801672c:	f77f af4c 	ble.w	80165c8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016730:	7afb      	ldrb	r3, [r7, #11]
 8016732:	f003 0302 	and.w	r3, r3, #2
 8016736:	2b00      	cmp	r3, #0
 8016738:	d108      	bne.n	801674c <etharp_find_entry+0x1b8>
 801673a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801673e:	2b0a      	cmp	r3, #10
 8016740:	d107      	bne.n	8016752 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016742:	7afb      	ldrb	r3, [r7, #11]
 8016744:	f003 0301 	and.w	r3, r3, #1
 8016748:	2b00      	cmp	r3, #0
 801674a:	d102      	bne.n	8016752 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801674c:	f04f 33ff 	mov.w	r3, #4294967295
 8016750:	e085      	b.n	801685e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016752:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016756:	2b09      	cmp	r3, #9
 8016758:	dc02      	bgt.n	8016760 <etharp_find_entry+0x1cc>
    i = empty;
 801675a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801675c:	843b      	strh	r3, [r7, #32]
 801675e:	e039      	b.n	80167d4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016760:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016764:	2b09      	cmp	r3, #9
 8016766:	dc14      	bgt.n	8016792 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801676a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801676c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016770:	493d      	ldr	r1, [pc, #244]	; (8016868 <etharp_find_entry+0x2d4>)
 8016772:	4613      	mov	r3, r2
 8016774:	005b      	lsls	r3, r3, #1
 8016776:	4413      	add	r3, r2
 8016778:	00db      	lsls	r3, r3, #3
 801677a:	440b      	add	r3, r1
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d018      	beq.n	80167b4 <etharp_find_entry+0x220>
 8016782:	4b3a      	ldr	r3, [pc, #232]	; (801686c <etharp_find_entry+0x2d8>)
 8016784:	f240 126d 	movw	r2, #365	; 0x16d
 8016788:	493b      	ldr	r1, [pc, #236]	; (8016878 <etharp_find_entry+0x2e4>)
 801678a:	483a      	ldr	r0, [pc, #232]	; (8016874 <etharp_find_entry+0x2e0>)
 801678c:	f002 fc52 	bl	8019034 <iprintf>
 8016790:	e010      	b.n	80167b4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016792:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016796:	2b09      	cmp	r3, #9
 8016798:	dc02      	bgt.n	80167a0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801679a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801679c:	843b      	strh	r3, [r7, #32]
 801679e:	e009      	b.n	80167b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80167a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80167a4:	2b09      	cmp	r3, #9
 80167a6:	dc02      	bgt.n	80167ae <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80167a8:	8bfb      	ldrh	r3, [r7, #30]
 80167aa:	843b      	strh	r3, [r7, #32]
 80167ac:	e002      	b.n	80167b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80167ae:	f04f 33ff 	mov.w	r3, #4294967295
 80167b2:	e054      	b.n	801685e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80167b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80167b8:	2b09      	cmp	r3, #9
 80167ba:	dd06      	ble.n	80167ca <etharp_find_entry+0x236>
 80167bc:	4b2b      	ldr	r3, [pc, #172]	; (801686c <etharp_find_entry+0x2d8>)
 80167be:	f240 127f 	movw	r2, #383	; 0x17f
 80167c2:	492e      	ldr	r1, [pc, #184]	; (801687c <etharp_find_entry+0x2e8>)
 80167c4:	482b      	ldr	r0, [pc, #172]	; (8016874 <etharp_find_entry+0x2e0>)
 80167c6:	f002 fc35 	bl	8019034 <iprintf>
    etharp_free_entry(i);
 80167ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80167ce:	4618      	mov	r0, r3
 80167d0:	f7ff fe06 	bl	80163e0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80167d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80167d8:	2b09      	cmp	r3, #9
 80167da:	dd06      	ble.n	80167ea <etharp_find_entry+0x256>
 80167dc:	4b23      	ldr	r3, [pc, #140]	; (801686c <etharp_find_entry+0x2d8>)
 80167de:	f240 1283 	movw	r2, #387	; 0x183
 80167e2:	4926      	ldr	r1, [pc, #152]	; (801687c <etharp_find_entry+0x2e8>)
 80167e4:	4823      	ldr	r0, [pc, #140]	; (8016874 <etharp_find_entry+0x2e0>)
 80167e6:	f002 fc25 	bl	8019034 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80167ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167ee:	491e      	ldr	r1, [pc, #120]	; (8016868 <etharp_find_entry+0x2d4>)
 80167f0:	4613      	mov	r3, r2
 80167f2:	005b      	lsls	r3, r3, #1
 80167f4:	4413      	add	r3, r2
 80167f6:	00db      	lsls	r3, r3, #3
 80167f8:	440b      	add	r3, r1
 80167fa:	3314      	adds	r3, #20
 80167fc:	781b      	ldrb	r3, [r3, #0]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d006      	beq.n	8016810 <etharp_find_entry+0x27c>
 8016802:	4b1a      	ldr	r3, [pc, #104]	; (801686c <etharp_find_entry+0x2d8>)
 8016804:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016808:	491d      	ldr	r1, [pc, #116]	; (8016880 <etharp_find_entry+0x2ec>)
 801680a:	481a      	ldr	r0, [pc, #104]	; (8016874 <etharp_find_entry+0x2e0>)
 801680c:	f002 fc12 	bl	8019034 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d00b      	beq.n	801682e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016816:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	6819      	ldr	r1, [r3, #0]
 801681e:	4812      	ldr	r0, [pc, #72]	; (8016868 <etharp_find_entry+0x2d4>)
 8016820:	4613      	mov	r3, r2
 8016822:	005b      	lsls	r3, r3, #1
 8016824:	4413      	add	r3, r2
 8016826:	00db      	lsls	r3, r3, #3
 8016828:	4403      	add	r3, r0
 801682a:	3304      	adds	r3, #4
 801682c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801682e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016832:	490d      	ldr	r1, [pc, #52]	; (8016868 <etharp_find_entry+0x2d4>)
 8016834:	4613      	mov	r3, r2
 8016836:	005b      	lsls	r3, r3, #1
 8016838:	4413      	add	r3, r2
 801683a:	00db      	lsls	r3, r3, #3
 801683c:	440b      	add	r3, r1
 801683e:	3312      	adds	r3, #18
 8016840:	2200      	movs	r2, #0
 8016842:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016844:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016848:	4907      	ldr	r1, [pc, #28]	; (8016868 <etharp_find_entry+0x2d4>)
 801684a:	4613      	mov	r3, r2
 801684c:	005b      	lsls	r3, r3, #1
 801684e:	4413      	add	r3, r2
 8016850:	00db      	lsls	r3, r3, #3
 8016852:	440b      	add	r3, r1
 8016854:	3308      	adds	r3, #8
 8016856:	687a      	ldr	r2, [r7, #4]
 8016858:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801685a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801685e:	4618      	mov	r0, r3
 8016860:	3728      	adds	r7, #40	; 0x28
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	24004164 	.word	0x24004164
 801686c:	0801c4ac 	.word	0x0801c4ac
 8016870:	0801c4e4 	.word	0x0801c4e4
 8016874:	0801c524 	.word	0x0801c524
 8016878:	0801c54c 	.word	0x0801c54c
 801687c:	0801c564 	.word	0x0801c564
 8016880:	0801c578 	.word	0x0801c578

08016884 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b088      	sub	sp, #32
 8016888:	af02      	add	r7, sp, #8
 801688a:	60f8      	str	r0, [r7, #12]
 801688c:	60b9      	str	r1, [r7, #8]
 801688e:	607a      	str	r2, [r7, #4]
 8016890:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016898:	2b06      	cmp	r3, #6
 801689a:	d006      	beq.n	80168aa <etharp_update_arp_entry+0x26>
 801689c:	4b48      	ldr	r3, [pc, #288]	; (80169c0 <etharp_update_arp_entry+0x13c>)
 801689e:	f240 12a9 	movw	r2, #425	; 0x1a9
 80168a2:	4948      	ldr	r1, [pc, #288]	; (80169c4 <etharp_update_arp_entry+0x140>)
 80168a4:	4848      	ldr	r0, [pc, #288]	; (80169c8 <etharp_update_arp_entry+0x144>)
 80168a6:	f002 fbc5 	bl	8019034 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80168aa:	68bb      	ldr	r3, [r7, #8]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d012      	beq.n	80168d6 <etharp_update_arp_entry+0x52>
 80168b0:	68bb      	ldr	r3, [r7, #8]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d00e      	beq.n	80168d6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80168b8:	68bb      	ldr	r3, [r7, #8]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	68f9      	ldr	r1, [r7, #12]
 80168be:	4618      	mov	r0, r3
 80168c0:	f001 f924 	bl	8017b0c <ip4_addr_isbroadcast_u32>
 80168c4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d105      	bne.n	80168d6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80168ca:	68bb      	ldr	r3, [r7, #8]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80168d2:	2be0      	cmp	r3, #224	; 0xe0
 80168d4:	d102      	bne.n	80168dc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80168d6:	f06f 030f 	mvn.w	r3, #15
 80168da:	e06c      	b.n	80169b6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80168dc:	78fb      	ldrb	r3, [r7, #3]
 80168de:	68fa      	ldr	r2, [r7, #12]
 80168e0:	4619      	mov	r1, r3
 80168e2:	68b8      	ldr	r0, [r7, #8]
 80168e4:	f7ff fe56 	bl	8016594 <etharp_find_entry>
 80168e8:	4603      	mov	r3, r0
 80168ea:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80168ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	da02      	bge.n	80168fa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80168f4:	8afb      	ldrh	r3, [r7, #22]
 80168f6:	b25b      	sxtb	r3, r3
 80168f8:	e05d      	b.n	80169b6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80168fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168fe:	4933      	ldr	r1, [pc, #204]	; (80169cc <etharp_update_arp_entry+0x148>)
 8016900:	4613      	mov	r3, r2
 8016902:	005b      	lsls	r3, r3, #1
 8016904:	4413      	add	r3, r2
 8016906:	00db      	lsls	r3, r3, #3
 8016908:	440b      	add	r3, r1
 801690a:	3314      	adds	r3, #20
 801690c:	2202      	movs	r2, #2
 801690e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016910:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016914:	492d      	ldr	r1, [pc, #180]	; (80169cc <etharp_update_arp_entry+0x148>)
 8016916:	4613      	mov	r3, r2
 8016918:	005b      	lsls	r3, r3, #1
 801691a:	4413      	add	r3, r2
 801691c:	00db      	lsls	r3, r3, #3
 801691e:	440b      	add	r3, r1
 8016920:	3308      	adds	r3, #8
 8016922:	68fa      	ldr	r2, [r7, #12]
 8016924:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016926:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801692a:	4613      	mov	r3, r2
 801692c:	005b      	lsls	r3, r3, #1
 801692e:	4413      	add	r3, r2
 8016930:	00db      	lsls	r3, r3, #3
 8016932:	3308      	adds	r3, #8
 8016934:	4a25      	ldr	r2, [pc, #148]	; (80169cc <etharp_update_arp_entry+0x148>)
 8016936:	4413      	add	r3, r2
 8016938:	3304      	adds	r3, #4
 801693a:	2206      	movs	r2, #6
 801693c:	6879      	ldr	r1, [r7, #4]
 801693e:	4618      	mov	r0, r3
 8016940:	f002 fb07 	bl	8018f52 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016944:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016948:	4920      	ldr	r1, [pc, #128]	; (80169cc <etharp_update_arp_entry+0x148>)
 801694a:	4613      	mov	r3, r2
 801694c:	005b      	lsls	r3, r3, #1
 801694e:	4413      	add	r3, r2
 8016950:	00db      	lsls	r3, r3, #3
 8016952:	440b      	add	r3, r1
 8016954:	3312      	adds	r3, #18
 8016956:	2200      	movs	r2, #0
 8016958:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801695a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801695e:	491b      	ldr	r1, [pc, #108]	; (80169cc <etharp_update_arp_entry+0x148>)
 8016960:	4613      	mov	r3, r2
 8016962:	005b      	lsls	r3, r3, #1
 8016964:	4413      	add	r3, r2
 8016966:	00db      	lsls	r3, r3, #3
 8016968:	440b      	add	r3, r1
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d021      	beq.n	80169b4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016970:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016974:	4915      	ldr	r1, [pc, #84]	; (80169cc <etharp_update_arp_entry+0x148>)
 8016976:	4613      	mov	r3, r2
 8016978:	005b      	lsls	r3, r3, #1
 801697a:	4413      	add	r3, r2
 801697c:	00db      	lsls	r3, r3, #3
 801697e:	440b      	add	r3, r1
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016984:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016988:	4910      	ldr	r1, [pc, #64]	; (80169cc <etharp_update_arp_entry+0x148>)
 801698a:	4613      	mov	r3, r2
 801698c:	005b      	lsls	r3, r3, #1
 801698e:	4413      	add	r3, r2
 8016990:	00db      	lsls	r3, r3, #3
 8016992:	440b      	add	r3, r1
 8016994:	2200      	movs	r2, #0
 8016996:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801699e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80169a2:	9300      	str	r3, [sp, #0]
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	6939      	ldr	r1, [r7, #16]
 80169a8:	68f8      	ldr	r0, [r7, #12]
 80169aa:	f002 f849 	bl	8018a40 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80169ae:	6938      	ldr	r0, [r7, #16]
 80169b0:	f7f8 fee8 	bl	800f784 <pbuf_free>
  }
  return ERR_OK;
 80169b4:	2300      	movs	r3, #0
}
 80169b6:	4618      	mov	r0, r3
 80169b8:	3718      	adds	r7, #24
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bd80      	pop	{r7, pc}
 80169be:	bf00      	nop
 80169c0:	0801c4ac 	.word	0x0801c4ac
 80169c4:	0801c5a4 	.word	0x0801c5a4
 80169c8:	0801c524 	.word	0x0801c524
 80169cc:	24004164 	.word	0x24004164

080169d0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b084      	sub	sp, #16
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80169d8:	2300      	movs	r3, #0
 80169da:	60fb      	str	r3, [r7, #12]
 80169dc:	e01e      	b.n	8016a1c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80169de:	4913      	ldr	r1, [pc, #76]	; (8016a2c <etharp_cleanup_netif+0x5c>)
 80169e0:	68fa      	ldr	r2, [r7, #12]
 80169e2:	4613      	mov	r3, r2
 80169e4:	005b      	lsls	r3, r3, #1
 80169e6:	4413      	add	r3, r2
 80169e8:	00db      	lsls	r3, r3, #3
 80169ea:	440b      	add	r3, r1
 80169ec:	3314      	adds	r3, #20
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80169f2:	7afb      	ldrb	r3, [r7, #11]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d00e      	beq.n	8016a16 <etharp_cleanup_netif+0x46>
 80169f8:	490c      	ldr	r1, [pc, #48]	; (8016a2c <etharp_cleanup_netif+0x5c>)
 80169fa:	68fa      	ldr	r2, [r7, #12]
 80169fc:	4613      	mov	r3, r2
 80169fe:	005b      	lsls	r3, r3, #1
 8016a00:	4413      	add	r3, r2
 8016a02:	00db      	lsls	r3, r3, #3
 8016a04:	440b      	add	r3, r1
 8016a06:	3308      	adds	r3, #8
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	687a      	ldr	r2, [r7, #4]
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	d102      	bne.n	8016a16 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016a10:	68f8      	ldr	r0, [r7, #12]
 8016a12:	f7ff fce5 	bl	80163e0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	3301      	adds	r3, #1
 8016a1a:	60fb      	str	r3, [r7, #12]
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	2b09      	cmp	r3, #9
 8016a20:	dddd      	ble.n	80169de <etharp_cleanup_netif+0xe>
    }
  }
}
 8016a22:	bf00      	nop
 8016a24:	bf00      	nop
 8016a26:	3710      	adds	r7, #16
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd80      	pop	{r7, pc}
 8016a2c:	24004164 	.word	0x24004164

08016a30 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016a30:	b5b0      	push	{r4, r5, r7, lr}
 8016a32:	b08a      	sub	sp, #40	; 0x28
 8016a34:	af04      	add	r7, sp, #16
 8016a36:	6078      	str	r0, [r7, #4]
 8016a38:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d107      	bne.n	8016a50 <etharp_input+0x20>
 8016a40:	4b3d      	ldr	r3, [pc, #244]	; (8016b38 <etharp_input+0x108>)
 8016a42:	f240 228a 	movw	r2, #650	; 0x28a
 8016a46:	493d      	ldr	r1, [pc, #244]	; (8016b3c <etharp_input+0x10c>)
 8016a48:	483d      	ldr	r0, [pc, #244]	; (8016b40 <etharp_input+0x110>)
 8016a4a:	f002 faf3 	bl	8019034 <iprintf>
 8016a4e:	e06f      	b.n	8016b30 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016a56:	693b      	ldr	r3, [r7, #16]
 8016a58:	881b      	ldrh	r3, [r3, #0]
 8016a5a:	b29b      	uxth	r3, r3
 8016a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016a60:	d10c      	bne.n	8016a7c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016a62:	693b      	ldr	r3, [r7, #16]
 8016a64:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016a66:	2b06      	cmp	r3, #6
 8016a68:	d108      	bne.n	8016a7c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016a6a:	693b      	ldr	r3, [r7, #16]
 8016a6c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016a6e:	2b04      	cmp	r3, #4
 8016a70:	d104      	bne.n	8016a7c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016a72:	693b      	ldr	r3, [r7, #16]
 8016a74:	885b      	ldrh	r3, [r3, #2]
 8016a76:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016a78:	2b08      	cmp	r3, #8
 8016a7a:	d003      	beq.n	8016a84 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016a7c:	6878      	ldr	r0, [r7, #4]
 8016a7e:	f7f8 fe81 	bl	800f784 <pbuf_free>
    return;
 8016a82:	e055      	b.n	8016b30 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016a84:	693b      	ldr	r3, [r7, #16]
 8016a86:	330e      	adds	r3, #14
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016a8c:	693b      	ldr	r3, [r7, #16]
 8016a8e:	3318      	adds	r3, #24
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016a94:	683b      	ldr	r3, [r7, #0]
 8016a96:	3304      	adds	r3, #4
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d102      	bne.n	8016aa4 <etharp_input+0x74>
    for_us = 0;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	75fb      	strb	r3, [r7, #23]
 8016aa2:	e009      	b.n	8016ab8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016aa4:	68ba      	ldr	r2, [r7, #8]
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	3304      	adds	r3, #4
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	429a      	cmp	r2, r3
 8016aae:	bf0c      	ite	eq
 8016ab0:	2301      	moveq	r3, #1
 8016ab2:	2300      	movne	r3, #0
 8016ab4:	b2db      	uxtb	r3, r3
 8016ab6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016ab8:	693b      	ldr	r3, [r7, #16]
 8016aba:	f103 0208 	add.w	r2, r3, #8
 8016abe:	7dfb      	ldrb	r3, [r7, #23]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d001      	beq.n	8016ac8 <etharp_input+0x98>
 8016ac4:	2301      	movs	r3, #1
 8016ac6:	e000      	b.n	8016aca <etharp_input+0x9a>
 8016ac8:	2302      	movs	r3, #2
 8016aca:	f107 010c 	add.w	r1, r7, #12
 8016ace:	6838      	ldr	r0, [r7, #0]
 8016ad0:	f7ff fed8 	bl	8016884 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016ad4:	693b      	ldr	r3, [r7, #16]
 8016ad6:	88db      	ldrh	r3, [r3, #6]
 8016ad8:	b29b      	uxth	r3, r3
 8016ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ade:	d003      	beq.n	8016ae8 <etharp_input+0xb8>
 8016ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ae4:	d01e      	beq.n	8016b24 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016ae6:	e020      	b.n	8016b2a <etharp_input+0xfa>
      if (for_us) {
 8016ae8:	7dfb      	ldrb	r3, [r7, #23]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d01c      	beq.n	8016b28 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016aee:	683b      	ldr	r3, [r7, #0]
 8016af0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016afa:	683b      	ldr	r3, [r7, #0]
 8016afc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016b00:	683b      	ldr	r3, [r7, #0]
 8016b02:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016b04:	693a      	ldr	r2, [r7, #16]
 8016b06:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016b08:	2102      	movs	r1, #2
 8016b0a:	9103      	str	r1, [sp, #12]
 8016b0c:	f107 010c 	add.w	r1, r7, #12
 8016b10:	9102      	str	r1, [sp, #8]
 8016b12:	9201      	str	r2, [sp, #4]
 8016b14:	9300      	str	r3, [sp, #0]
 8016b16:	462b      	mov	r3, r5
 8016b18:	4622      	mov	r2, r4
 8016b1a:	4601      	mov	r1, r0
 8016b1c:	6838      	ldr	r0, [r7, #0]
 8016b1e:	f000 faeb 	bl	80170f8 <etharp_raw>
      break;
 8016b22:	e001      	b.n	8016b28 <etharp_input+0xf8>
      break;
 8016b24:	bf00      	nop
 8016b26:	e000      	b.n	8016b2a <etharp_input+0xfa>
      break;
 8016b28:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	f7f8 fe2a 	bl	800f784 <pbuf_free>
}
 8016b30:	3718      	adds	r7, #24
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bdb0      	pop	{r4, r5, r7, pc}
 8016b36:	bf00      	nop
 8016b38:	0801c4ac 	.word	0x0801c4ac
 8016b3c:	0801c5fc 	.word	0x0801c5fc
 8016b40:	0801c524 	.word	0x0801c524

08016b44 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016b44:	b580      	push	{r7, lr}
 8016b46:	b086      	sub	sp, #24
 8016b48:	af02      	add	r7, sp, #8
 8016b4a:	60f8      	str	r0, [r7, #12]
 8016b4c:	60b9      	str	r1, [r7, #8]
 8016b4e:	4613      	mov	r3, r2
 8016b50:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016b52:	79fa      	ldrb	r2, [r7, #7]
 8016b54:	4944      	ldr	r1, [pc, #272]	; (8016c68 <etharp_output_to_arp_index+0x124>)
 8016b56:	4613      	mov	r3, r2
 8016b58:	005b      	lsls	r3, r3, #1
 8016b5a:	4413      	add	r3, r2
 8016b5c:	00db      	lsls	r3, r3, #3
 8016b5e:	440b      	add	r3, r1
 8016b60:	3314      	adds	r3, #20
 8016b62:	781b      	ldrb	r3, [r3, #0]
 8016b64:	2b01      	cmp	r3, #1
 8016b66:	d806      	bhi.n	8016b76 <etharp_output_to_arp_index+0x32>
 8016b68:	4b40      	ldr	r3, [pc, #256]	; (8016c6c <etharp_output_to_arp_index+0x128>)
 8016b6a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016b6e:	4940      	ldr	r1, [pc, #256]	; (8016c70 <etharp_output_to_arp_index+0x12c>)
 8016b70:	4840      	ldr	r0, [pc, #256]	; (8016c74 <etharp_output_to_arp_index+0x130>)
 8016b72:	f002 fa5f 	bl	8019034 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016b76:	79fa      	ldrb	r2, [r7, #7]
 8016b78:	493b      	ldr	r1, [pc, #236]	; (8016c68 <etharp_output_to_arp_index+0x124>)
 8016b7a:	4613      	mov	r3, r2
 8016b7c:	005b      	lsls	r3, r3, #1
 8016b7e:	4413      	add	r3, r2
 8016b80:	00db      	lsls	r3, r3, #3
 8016b82:	440b      	add	r3, r1
 8016b84:	3314      	adds	r3, #20
 8016b86:	781b      	ldrb	r3, [r3, #0]
 8016b88:	2b02      	cmp	r3, #2
 8016b8a:	d153      	bne.n	8016c34 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016b8c:	79fa      	ldrb	r2, [r7, #7]
 8016b8e:	4936      	ldr	r1, [pc, #216]	; (8016c68 <etharp_output_to_arp_index+0x124>)
 8016b90:	4613      	mov	r3, r2
 8016b92:	005b      	lsls	r3, r3, #1
 8016b94:	4413      	add	r3, r2
 8016b96:	00db      	lsls	r3, r3, #3
 8016b98:	440b      	add	r3, r1
 8016b9a:	3312      	adds	r3, #18
 8016b9c:	881b      	ldrh	r3, [r3, #0]
 8016b9e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016ba2:	d919      	bls.n	8016bd8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016ba4:	79fa      	ldrb	r2, [r7, #7]
 8016ba6:	4613      	mov	r3, r2
 8016ba8:	005b      	lsls	r3, r3, #1
 8016baa:	4413      	add	r3, r2
 8016bac:	00db      	lsls	r3, r3, #3
 8016bae:	4a2e      	ldr	r2, [pc, #184]	; (8016c68 <etharp_output_to_arp_index+0x124>)
 8016bb0:	4413      	add	r3, r2
 8016bb2:	3304      	adds	r3, #4
 8016bb4:	4619      	mov	r1, r3
 8016bb6:	68f8      	ldr	r0, [r7, #12]
 8016bb8:	f000 fb4c 	bl	8017254 <etharp_request>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d138      	bne.n	8016c34 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016bc2:	79fa      	ldrb	r2, [r7, #7]
 8016bc4:	4928      	ldr	r1, [pc, #160]	; (8016c68 <etharp_output_to_arp_index+0x124>)
 8016bc6:	4613      	mov	r3, r2
 8016bc8:	005b      	lsls	r3, r3, #1
 8016bca:	4413      	add	r3, r2
 8016bcc:	00db      	lsls	r3, r3, #3
 8016bce:	440b      	add	r3, r1
 8016bd0:	3314      	adds	r3, #20
 8016bd2:	2203      	movs	r2, #3
 8016bd4:	701a      	strb	r2, [r3, #0]
 8016bd6:	e02d      	b.n	8016c34 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016bd8:	79fa      	ldrb	r2, [r7, #7]
 8016bda:	4923      	ldr	r1, [pc, #140]	; (8016c68 <etharp_output_to_arp_index+0x124>)
 8016bdc:	4613      	mov	r3, r2
 8016bde:	005b      	lsls	r3, r3, #1
 8016be0:	4413      	add	r3, r2
 8016be2:	00db      	lsls	r3, r3, #3
 8016be4:	440b      	add	r3, r1
 8016be6:	3312      	adds	r3, #18
 8016be8:	881b      	ldrh	r3, [r3, #0]
 8016bea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016bee:	d321      	bcc.n	8016c34 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016bf0:	79fa      	ldrb	r2, [r7, #7]
 8016bf2:	4613      	mov	r3, r2
 8016bf4:	005b      	lsls	r3, r3, #1
 8016bf6:	4413      	add	r3, r2
 8016bf8:	00db      	lsls	r3, r3, #3
 8016bfa:	4a1b      	ldr	r2, [pc, #108]	; (8016c68 <etharp_output_to_arp_index+0x124>)
 8016bfc:	4413      	add	r3, r2
 8016bfe:	1d19      	adds	r1, r3, #4
 8016c00:	79fa      	ldrb	r2, [r7, #7]
 8016c02:	4613      	mov	r3, r2
 8016c04:	005b      	lsls	r3, r3, #1
 8016c06:	4413      	add	r3, r2
 8016c08:	00db      	lsls	r3, r3, #3
 8016c0a:	3308      	adds	r3, #8
 8016c0c:	4a16      	ldr	r2, [pc, #88]	; (8016c68 <etharp_output_to_arp_index+0x124>)
 8016c0e:	4413      	add	r3, r2
 8016c10:	3304      	adds	r3, #4
 8016c12:	461a      	mov	r2, r3
 8016c14:	68f8      	ldr	r0, [r7, #12]
 8016c16:	f000 fafb 	bl	8017210 <etharp_request_dst>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d109      	bne.n	8016c34 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016c20:	79fa      	ldrb	r2, [r7, #7]
 8016c22:	4911      	ldr	r1, [pc, #68]	; (8016c68 <etharp_output_to_arp_index+0x124>)
 8016c24:	4613      	mov	r3, r2
 8016c26:	005b      	lsls	r3, r3, #1
 8016c28:	4413      	add	r3, r2
 8016c2a:	00db      	lsls	r3, r3, #3
 8016c2c:	440b      	add	r3, r1
 8016c2e:	3314      	adds	r3, #20
 8016c30:	2203      	movs	r2, #3
 8016c32:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016c3a:	79fa      	ldrb	r2, [r7, #7]
 8016c3c:	4613      	mov	r3, r2
 8016c3e:	005b      	lsls	r3, r3, #1
 8016c40:	4413      	add	r3, r2
 8016c42:	00db      	lsls	r3, r3, #3
 8016c44:	3308      	adds	r3, #8
 8016c46:	4a08      	ldr	r2, [pc, #32]	; (8016c68 <etharp_output_to_arp_index+0x124>)
 8016c48:	4413      	add	r3, r2
 8016c4a:	3304      	adds	r3, #4
 8016c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016c50:	9200      	str	r2, [sp, #0]
 8016c52:	460a      	mov	r2, r1
 8016c54:	68b9      	ldr	r1, [r7, #8]
 8016c56:	68f8      	ldr	r0, [r7, #12]
 8016c58:	f001 fef2 	bl	8018a40 <ethernet_output>
 8016c5c:	4603      	mov	r3, r0
}
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3710      	adds	r7, #16
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bd80      	pop	{r7, pc}
 8016c66:	bf00      	nop
 8016c68:	24004164 	.word	0x24004164
 8016c6c:	0801c4ac 	.word	0x0801c4ac
 8016c70:	0801c61c 	.word	0x0801c61c
 8016c74:	0801c524 	.word	0x0801c524

08016c78 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b08a      	sub	sp, #40	; 0x28
 8016c7c:	af02      	add	r7, sp, #8
 8016c7e:	60f8      	str	r0, [r7, #12]
 8016c80:	60b9      	str	r1, [r7, #8]
 8016c82:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d106      	bne.n	8016c9c <etharp_output+0x24>
 8016c8e:	4b73      	ldr	r3, [pc, #460]	; (8016e5c <etharp_output+0x1e4>)
 8016c90:	f240 321e 	movw	r2, #798	; 0x31e
 8016c94:	4972      	ldr	r1, [pc, #456]	; (8016e60 <etharp_output+0x1e8>)
 8016c96:	4873      	ldr	r0, [pc, #460]	; (8016e64 <etharp_output+0x1ec>)
 8016c98:	f002 f9cc 	bl	8019034 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016c9c:	68bb      	ldr	r3, [r7, #8]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d106      	bne.n	8016cb0 <etharp_output+0x38>
 8016ca2:	4b6e      	ldr	r3, [pc, #440]	; (8016e5c <etharp_output+0x1e4>)
 8016ca4:	f240 321f 	movw	r2, #799	; 0x31f
 8016ca8:	496f      	ldr	r1, [pc, #444]	; (8016e68 <etharp_output+0x1f0>)
 8016caa:	486e      	ldr	r0, [pc, #440]	; (8016e64 <etharp_output+0x1ec>)
 8016cac:	f002 f9c2 	bl	8019034 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d106      	bne.n	8016cc4 <etharp_output+0x4c>
 8016cb6:	4b69      	ldr	r3, [pc, #420]	; (8016e5c <etharp_output+0x1e4>)
 8016cb8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016cbc:	496b      	ldr	r1, [pc, #428]	; (8016e6c <etharp_output+0x1f4>)
 8016cbe:	4869      	ldr	r0, [pc, #420]	; (8016e64 <etharp_output+0x1ec>)
 8016cc0:	f002 f9b8 	bl	8019034 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	68f9      	ldr	r1, [r7, #12]
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f000 ff1e 	bl	8017b0c <ip4_addr_isbroadcast_u32>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d002      	beq.n	8016cdc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016cd6:	4b66      	ldr	r3, [pc, #408]	; (8016e70 <etharp_output+0x1f8>)
 8016cd8:	61fb      	str	r3, [r7, #28]
 8016cda:	e0af      	b.n	8016e3c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ce4:	2be0      	cmp	r3, #224	; 0xe0
 8016ce6:	d118      	bne.n	8016d1a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016ce8:	2301      	movs	r3, #1
 8016cea:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016cec:	2300      	movs	r3, #0
 8016cee:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016cf0:	235e      	movs	r3, #94	; 0x5e
 8016cf2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	3301      	adds	r3, #1
 8016cf8:	781b      	ldrb	r3, [r3, #0]
 8016cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016cfe:	b2db      	uxtb	r3, r3
 8016d00:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	3302      	adds	r3, #2
 8016d06:	781b      	ldrb	r3, [r3, #0]
 8016d08:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	3303      	adds	r3, #3
 8016d0e:	781b      	ldrb	r3, [r3, #0]
 8016d10:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016d12:	f107 0310 	add.w	r3, r7, #16
 8016d16:	61fb      	str	r3, [r7, #28]
 8016d18:	e090      	b.n	8016e3c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	681a      	ldr	r2, [r3, #0]
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	3304      	adds	r3, #4
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	405a      	eors	r2, r3
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	3308      	adds	r3, #8
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	4013      	ands	r3, r2
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d012      	beq.n	8016d58 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016d38:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016d3c:	4293      	cmp	r3, r2
 8016d3e:	d00b      	beq.n	8016d58 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	330c      	adds	r3, #12
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d003      	beq.n	8016d52 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	330c      	adds	r3, #12
 8016d4e:	61bb      	str	r3, [r7, #24]
 8016d50:	e002      	b.n	8016d58 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016d52:	f06f 0303 	mvn.w	r3, #3
 8016d56:	e07d      	b.n	8016e54 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016d58:	4b46      	ldr	r3, [pc, #280]	; (8016e74 <etharp_output+0x1fc>)
 8016d5a:	781b      	ldrb	r3, [r3, #0]
 8016d5c:	4619      	mov	r1, r3
 8016d5e:	4a46      	ldr	r2, [pc, #280]	; (8016e78 <etharp_output+0x200>)
 8016d60:	460b      	mov	r3, r1
 8016d62:	005b      	lsls	r3, r3, #1
 8016d64:	440b      	add	r3, r1
 8016d66:	00db      	lsls	r3, r3, #3
 8016d68:	4413      	add	r3, r2
 8016d6a:	3314      	adds	r3, #20
 8016d6c:	781b      	ldrb	r3, [r3, #0]
 8016d6e:	2b01      	cmp	r3, #1
 8016d70:	d925      	bls.n	8016dbe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016d72:	4b40      	ldr	r3, [pc, #256]	; (8016e74 <etharp_output+0x1fc>)
 8016d74:	781b      	ldrb	r3, [r3, #0]
 8016d76:	4619      	mov	r1, r3
 8016d78:	4a3f      	ldr	r2, [pc, #252]	; (8016e78 <etharp_output+0x200>)
 8016d7a:	460b      	mov	r3, r1
 8016d7c:	005b      	lsls	r3, r3, #1
 8016d7e:	440b      	add	r3, r1
 8016d80:	00db      	lsls	r3, r3, #3
 8016d82:	4413      	add	r3, r2
 8016d84:	3308      	adds	r3, #8
 8016d86:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016d88:	68fa      	ldr	r2, [r7, #12]
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	d117      	bne.n	8016dbe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016d8e:	69bb      	ldr	r3, [r7, #24]
 8016d90:	681a      	ldr	r2, [r3, #0]
 8016d92:	4b38      	ldr	r3, [pc, #224]	; (8016e74 <etharp_output+0x1fc>)
 8016d94:	781b      	ldrb	r3, [r3, #0]
 8016d96:	4618      	mov	r0, r3
 8016d98:	4937      	ldr	r1, [pc, #220]	; (8016e78 <etharp_output+0x200>)
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	005b      	lsls	r3, r3, #1
 8016d9e:	4403      	add	r3, r0
 8016da0:	00db      	lsls	r3, r3, #3
 8016da2:	440b      	add	r3, r1
 8016da4:	3304      	adds	r3, #4
 8016da6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016da8:	429a      	cmp	r2, r3
 8016daa:	d108      	bne.n	8016dbe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016dac:	4b31      	ldr	r3, [pc, #196]	; (8016e74 <etharp_output+0x1fc>)
 8016dae:	781b      	ldrb	r3, [r3, #0]
 8016db0:	461a      	mov	r2, r3
 8016db2:	68b9      	ldr	r1, [r7, #8]
 8016db4:	68f8      	ldr	r0, [r7, #12]
 8016db6:	f7ff fec5 	bl	8016b44 <etharp_output_to_arp_index>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	e04a      	b.n	8016e54 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	75fb      	strb	r3, [r7, #23]
 8016dc2:	e031      	b.n	8016e28 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016dc4:	7dfa      	ldrb	r2, [r7, #23]
 8016dc6:	492c      	ldr	r1, [pc, #176]	; (8016e78 <etharp_output+0x200>)
 8016dc8:	4613      	mov	r3, r2
 8016dca:	005b      	lsls	r3, r3, #1
 8016dcc:	4413      	add	r3, r2
 8016dce:	00db      	lsls	r3, r3, #3
 8016dd0:	440b      	add	r3, r1
 8016dd2:	3314      	adds	r3, #20
 8016dd4:	781b      	ldrb	r3, [r3, #0]
 8016dd6:	2b01      	cmp	r3, #1
 8016dd8:	d923      	bls.n	8016e22 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016dda:	7dfa      	ldrb	r2, [r7, #23]
 8016ddc:	4926      	ldr	r1, [pc, #152]	; (8016e78 <etharp_output+0x200>)
 8016dde:	4613      	mov	r3, r2
 8016de0:	005b      	lsls	r3, r3, #1
 8016de2:	4413      	add	r3, r2
 8016de4:	00db      	lsls	r3, r3, #3
 8016de6:	440b      	add	r3, r1
 8016de8:	3308      	adds	r3, #8
 8016dea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016dec:	68fa      	ldr	r2, [r7, #12]
 8016dee:	429a      	cmp	r2, r3
 8016df0:	d117      	bne.n	8016e22 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016df2:	69bb      	ldr	r3, [r7, #24]
 8016df4:	6819      	ldr	r1, [r3, #0]
 8016df6:	7dfa      	ldrb	r2, [r7, #23]
 8016df8:	481f      	ldr	r0, [pc, #124]	; (8016e78 <etharp_output+0x200>)
 8016dfa:	4613      	mov	r3, r2
 8016dfc:	005b      	lsls	r3, r3, #1
 8016dfe:	4413      	add	r3, r2
 8016e00:	00db      	lsls	r3, r3, #3
 8016e02:	4403      	add	r3, r0
 8016e04:	3304      	adds	r3, #4
 8016e06:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016e08:	4299      	cmp	r1, r3
 8016e0a:	d10a      	bne.n	8016e22 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016e0c:	4a19      	ldr	r2, [pc, #100]	; (8016e74 <etharp_output+0x1fc>)
 8016e0e:	7dfb      	ldrb	r3, [r7, #23]
 8016e10:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016e12:	7dfb      	ldrb	r3, [r7, #23]
 8016e14:	461a      	mov	r2, r3
 8016e16:	68b9      	ldr	r1, [r7, #8]
 8016e18:	68f8      	ldr	r0, [r7, #12]
 8016e1a:	f7ff fe93 	bl	8016b44 <etharp_output_to_arp_index>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	e018      	b.n	8016e54 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016e22:	7dfb      	ldrb	r3, [r7, #23]
 8016e24:	3301      	adds	r3, #1
 8016e26:	75fb      	strb	r3, [r7, #23]
 8016e28:	7dfb      	ldrb	r3, [r7, #23]
 8016e2a:	2b09      	cmp	r3, #9
 8016e2c:	d9ca      	bls.n	8016dc4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016e2e:	68ba      	ldr	r2, [r7, #8]
 8016e30:	69b9      	ldr	r1, [r7, #24]
 8016e32:	68f8      	ldr	r0, [r7, #12]
 8016e34:	f000 f822 	bl	8016e7c <etharp_query>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	e00b      	b.n	8016e54 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016e46:	9300      	str	r3, [sp, #0]
 8016e48:	69fb      	ldr	r3, [r7, #28]
 8016e4a:	68b9      	ldr	r1, [r7, #8]
 8016e4c:	68f8      	ldr	r0, [r7, #12]
 8016e4e:	f001 fdf7 	bl	8018a40 <ethernet_output>
 8016e52:	4603      	mov	r3, r0
}
 8016e54:	4618      	mov	r0, r3
 8016e56:	3720      	adds	r7, #32
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	bd80      	pop	{r7, pc}
 8016e5c:	0801c4ac 	.word	0x0801c4ac
 8016e60:	0801c5fc 	.word	0x0801c5fc
 8016e64:	0801c524 	.word	0x0801c524
 8016e68:	0801c64c 	.word	0x0801c64c
 8016e6c:	0801c5ec 	.word	0x0801c5ec
 8016e70:	0801d4b8 	.word	0x0801d4b8
 8016e74:	24004254 	.word	0x24004254
 8016e78:	24004164 	.word	0x24004164

08016e7c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b08c      	sub	sp, #48	; 0x30
 8016e80:	af02      	add	r7, sp, #8
 8016e82:	60f8      	str	r0, [r7, #12]
 8016e84:	60b9      	str	r1, [r7, #8]
 8016e86:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	3326      	adds	r3, #38	; 0x26
 8016e8c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016e8e:	23ff      	movs	r3, #255	; 0xff
 8016e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016e94:	2300      	movs	r3, #0
 8016e96:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016e98:	68bb      	ldr	r3, [r7, #8]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	68f9      	ldr	r1, [r7, #12]
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f000 fe34 	bl	8017b0c <ip4_addr_isbroadcast_u32>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d10c      	bne.n	8016ec4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016eaa:	68bb      	ldr	r3, [r7, #8]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016eb2:	2be0      	cmp	r3, #224	; 0xe0
 8016eb4:	d006      	beq.n	8016ec4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016eb6:	68bb      	ldr	r3, [r7, #8]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d003      	beq.n	8016ec4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d102      	bne.n	8016eca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016ec4:	f06f 030f 	mvn.w	r3, #15
 8016ec8:	e101      	b.n	80170ce <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016eca:	68fa      	ldr	r2, [r7, #12]
 8016ecc:	2101      	movs	r1, #1
 8016ece:	68b8      	ldr	r0, [r7, #8]
 8016ed0:	f7ff fb60 	bl	8016594 <etharp_find_entry>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016ed8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	da02      	bge.n	8016ee6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016ee0:	8a7b      	ldrh	r3, [r7, #18]
 8016ee2:	b25b      	sxtb	r3, r3
 8016ee4:	e0f3      	b.n	80170ce <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016ee6:	8a7b      	ldrh	r3, [r7, #18]
 8016ee8:	2b7e      	cmp	r3, #126	; 0x7e
 8016eea:	d906      	bls.n	8016efa <etharp_query+0x7e>
 8016eec:	4b7a      	ldr	r3, [pc, #488]	; (80170d8 <etharp_query+0x25c>)
 8016eee:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016ef2:	497a      	ldr	r1, [pc, #488]	; (80170dc <etharp_query+0x260>)
 8016ef4:	487a      	ldr	r0, [pc, #488]	; (80170e0 <etharp_query+0x264>)
 8016ef6:	f002 f89d 	bl	8019034 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016efa:	8a7b      	ldrh	r3, [r7, #18]
 8016efc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016efe:	7c7a      	ldrb	r2, [r7, #17]
 8016f00:	4978      	ldr	r1, [pc, #480]	; (80170e4 <etharp_query+0x268>)
 8016f02:	4613      	mov	r3, r2
 8016f04:	005b      	lsls	r3, r3, #1
 8016f06:	4413      	add	r3, r2
 8016f08:	00db      	lsls	r3, r3, #3
 8016f0a:	440b      	add	r3, r1
 8016f0c:	3314      	adds	r3, #20
 8016f0e:	781b      	ldrb	r3, [r3, #0]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d115      	bne.n	8016f40 <etharp_query+0xc4>
    is_new_entry = 1;
 8016f14:	2301      	movs	r3, #1
 8016f16:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016f18:	7c7a      	ldrb	r2, [r7, #17]
 8016f1a:	4972      	ldr	r1, [pc, #456]	; (80170e4 <etharp_query+0x268>)
 8016f1c:	4613      	mov	r3, r2
 8016f1e:	005b      	lsls	r3, r3, #1
 8016f20:	4413      	add	r3, r2
 8016f22:	00db      	lsls	r3, r3, #3
 8016f24:	440b      	add	r3, r1
 8016f26:	3314      	adds	r3, #20
 8016f28:	2201      	movs	r2, #1
 8016f2a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016f2c:	7c7a      	ldrb	r2, [r7, #17]
 8016f2e:	496d      	ldr	r1, [pc, #436]	; (80170e4 <etharp_query+0x268>)
 8016f30:	4613      	mov	r3, r2
 8016f32:	005b      	lsls	r3, r3, #1
 8016f34:	4413      	add	r3, r2
 8016f36:	00db      	lsls	r3, r3, #3
 8016f38:	440b      	add	r3, r1
 8016f3a:	3308      	adds	r3, #8
 8016f3c:	68fa      	ldr	r2, [r7, #12]
 8016f3e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016f40:	7c7a      	ldrb	r2, [r7, #17]
 8016f42:	4968      	ldr	r1, [pc, #416]	; (80170e4 <etharp_query+0x268>)
 8016f44:	4613      	mov	r3, r2
 8016f46:	005b      	lsls	r3, r3, #1
 8016f48:	4413      	add	r3, r2
 8016f4a:	00db      	lsls	r3, r3, #3
 8016f4c:	440b      	add	r3, r1
 8016f4e:	3314      	adds	r3, #20
 8016f50:	781b      	ldrb	r3, [r3, #0]
 8016f52:	2b01      	cmp	r3, #1
 8016f54:	d011      	beq.n	8016f7a <etharp_query+0xfe>
 8016f56:	7c7a      	ldrb	r2, [r7, #17]
 8016f58:	4962      	ldr	r1, [pc, #392]	; (80170e4 <etharp_query+0x268>)
 8016f5a:	4613      	mov	r3, r2
 8016f5c:	005b      	lsls	r3, r3, #1
 8016f5e:	4413      	add	r3, r2
 8016f60:	00db      	lsls	r3, r3, #3
 8016f62:	440b      	add	r3, r1
 8016f64:	3314      	adds	r3, #20
 8016f66:	781b      	ldrb	r3, [r3, #0]
 8016f68:	2b01      	cmp	r3, #1
 8016f6a:	d806      	bhi.n	8016f7a <etharp_query+0xfe>
 8016f6c:	4b5a      	ldr	r3, [pc, #360]	; (80170d8 <etharp_query+0x25c>)
 8016f6e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016f72:	495d      	ldr	r1, [pc, #372]	; (80170e8 <etharp_query+0x26c>)
 8016f74:	485a      	ldr	r0, [pc, #360]	; (80170e0 <etharp_query+0x264>)
 8016f76:	f002 f85d 	bl	8019034 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016f7a:	6a3b      	ldr	r3, [r7, #32]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d102      	bne.n	8016f86 <etharp_query+0x10a>
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d10c      	bne.n	8016fa0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016f86:	68b9      	ldr	r1, [r7, #8]
 8016f88:	68f8      	ldr	r0, [r7, #12]
 8016f8a:	f000 f963 	bl	8017254 <etharp_request>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d102      	bne.n	8016fa0 <etharp_query+0x124>
      return result;
 8016f9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016f9e:	e096      	b.n	80170ce <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d106      	bne.n	8016fb4 <etharp_query+0x138>
 8016fa6:	4b4c      	ldr	r3, [pc, #304]	; (80170d8 <etharp_query+0x25c>)
 8016fa8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016fac:	494f      	ldr	r1, [pc, #316]	; (80170ec <etharp_query+0x270>)
 8016fae:	484c      	ldr	r0, [pc, #304]	; (80170e0 <etharp_query+0x264>)
 8016fb0:	f002 f840 	bl	8019034 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016fb4:	7c7a      	ldrb	r2, [r7, #17]
 8016fb6:	494b      	ldr	r1, [pc, #300]	; (80170e4 <etharp_query+0x268>)
 8016fb8:	4613      	mov	r3, r2
 8016fba:	005b      	lsls	r3, r3, #1
 8016fbc:	4413      	add	r3, r2
 8016fbe:	00db      	lsls	r3, r3, #3
 8016fc0:	440b      	add	r3, r1
 8016fc2:	3314      	adds	r3, #20
 8016fc4:	781b      	ldrb	r3, [r3, #0]
 8016fc6:	2b01      	cmp	r3, #1
 8016fc8:	d917      	bls.n	8016ffa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016fca:	4a49      	ldr	r2, [pc, #292]	; (80170f0 <etharp_query+0x274>)
 8016fcc:	7c7b      	ldrb	r3, [r7, #17]
 8016fce:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016fd0:	7c7a      	ldrb	r2, [r7, #17]
 8016fd2:	4613      	mov	r3, r2
 8016fd4:	005b      	lsls	r3, r3, #1
 8016fd6:	4413      	add	r3, r2
 8016fd8:	00db      	lsls	r3, r3, #3
 8016fda:	3308      	adds	r3, #8
 8016fdc:	4a41      	ldr	r2, [pc, #260]	; (80170e4 <etharp_query+0x268>)
 8016fde:	4413      	add	r3, r2
 8016fe0:	3304      	adds	r3, #4
 8016fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016fe6:	9200      	str	r2, [sp, #0]
 8016fe8:	697a      	ldr	r2, [r7, #20]
 8016fea:	6879      	ldr	r1, [r7, #4]
 8016fec:	68f8      	ldr	r0, [r7, #12]
 8016fee:	f001 fd27 	bl	8018a40 <ethernet_output>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ff8:	e067      	b.n	80170ca <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016ffa:	7c7a      	ldrb	r2, [r7, #17]
 8016ffc:	4939      	ldr	r1, [pc, #228]	; (80170e4 <etharp_query+0x268>)
 8016ffe:	4613      	mov	r3, r2
 8017000:	005b      	lsls	r3, r3, #1
 8017002:	4413      	add	r3, r2
 8017004:	00db      	lsls	r3, r3, #3
 8017006:	440b      	add	r3, r1
 8017008:	3314      	adds	r3, #20
 801700a:	781b      	ldrb	r3, [r3, #0]
 801700c:	2b01      	cmp	r3, #1
 801700e:	d15c      	bne.n	80170ca <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017010:	2300      	movs	r3, #0
 8017012:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017018:	e01c      	b.n	8017054 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801701a:	69fb      	ldr	r3, [r7, #28]
 801701c:	895a      	ldrh	r2, [r3, #10]
 801701e:	69fb      	ldr	r3, [r7, #28]
 8017020:	891b      	ldrh	r3, [r3, #8]
 8017022:	429a      	cmp	r2, r3
 8017024:	d10a      	bne.n	801703c <etharp_query+0x1c0>
 8017026:	69fb      	ldr	r3, [r7, #28]
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d006      	beq.n	801703c <etharp_query+0x1c0>
 801702e:	4b2a      	ldr	r3, [pc, #168]	; (80170d8 <etharp_query+0x25c>)
 8017030:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017034:	492f      	ldr	r1, [pc, #188]	; (80170f4 <etharp_query+0x278>)
 8017036:	482a      	ldr	r0, [pc, #168]	; (80170e0 <etharp_query+0x264>)
 8017038:	f001 fffc 	bl	8019034 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801703c:	69fb      	ldr	r3, [r7, #28]
 801703e:	7b1b      	ldrb	r3, [r3, #12]
 8017040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017044:	2b00      	cmp	r3, #0
 8017046:	d002      	beq.n	801704e <etharp_query+0x1d2>
        copy_needed = 1;
 8017048:	2301      	movs	r3, #1
 801704a:	61bb      	str	r3, [r7, #24]
        break;
 801704c:	e005      	b.n	801705a <etharp_query+0x1de>
      }
      p = p->next;
 801704e:	69fb      	ldr	r3, [r7, #28]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017054:	69fb      	ldr	r3, [r7, #28]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d1df      	bne.n	801701a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801705a:	69bb      	ldr	r3, [r7, #24]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d007      	beq.n	8017070 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017060:	687a      	ldr	r2, [r7, #4]
 8017062:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017066:	200e      	movs	r0, #14
 8017068:	f7f8 fe04 	bl	800fc74 <pbuf_clone>
 801706c:	61f8      	str	r0, [r7, #28]
 801706e:	e004      	b.n	801707a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017074:	69f8      	ldr	r0, [r7, #28]
 8017076:	f7f8 fc2b 	bl	800f8d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801707a:	69fb      	ldr	r3, [r7, #28]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d021      	beq.n	80170c4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017080:	7c7a      	ldrb	r2, [r7, #17]
 8017082:	4918      	ldr	r1, [pc, #96]	; (80170e4 <etharp_query+0x268>)
 8017084:	4613      	mov	r3, r2
 8017086:	005b      	lsls	r3, r3, #1
 8017088:	4413      	add	r3, r2
 801708a:	00db      	lsls	r3, r3, #3
 801708c:	440b      	add	r3, r1
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d00a      	beq.n	80170aa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017094:	7c7a      	ldrb	r2, [r7, #17]
 8017096:	4913      	ldr	r1, [pc, #76]	; (80170e4 <etharp_query+0x268>)
 8017098:	4613      	mov	r3, r2
 801709a:	005b      	lsls	r3, r3, #1
 801709c:	4413      	add	r3, r2
 801709e:	00db      	lsls	r3, r3, #3
 80170a0:	440b      	add	r3, r1
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	4618      	mov	r0, r3
 80170a6:	f7f8 fb6d 	bl	800f784 <pbuf_free>
      }
      arp_table[i].q = p;
 80170aa:	7c7a      	ldrb	r2, [r7, #17]
 80170ac:	490d      	ldr	r1, [pc, #52]	; (80170e4 <etharp_query+0x268>)
 80170ae:	4613      	mov	r3, r2
 80170b0:	005b      	lsls	r3, r3, #1
 80170b2:	4413      	add	r3, r2
 80170b4:	00db      	lsls	r3, r3, #3
 80170b6:	440b      	add	r3, r1
 80170b8:	69fa      	ldr	r2, [r7, #28]
 80170ba:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80170bc:	2300      	movs	r3, #0
 80170be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80170c2:	e002      	b.n	80170ca <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80170c4:	23ff      	movs	r3, #255	; 0xff
 80170c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80170ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80170ce:	4618      	mov	r0, r3
 80170d0:	3728      	adds	r7, #40	; 0x28
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd80      	pop	{r7, pc}
 80170d6:	bf00      	nop
 80170d8:	0801c4ac 	.word	0x0801c4ac
 80170dc:	0801c658 	.word	0x0801c658
 80170e0:	0801c524 	.word	0x0801c524
 80170e4:	24004164 	.word	0x24004164
 80170e8:	0801c668 	.word	0x0801c668
 80170ec:	0801c64c 	.word	0x0801c64c
 80170f0:	24004254 	.word	0x24004254
 80170f4:	0801c690 	.word	0x0801c690

080170f8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b08a      	sub	sp, #40	; 0x28
 80170fc:	af02      	add	r7, sp, #8
 80170fe:	60f8      	str	r0, [r7, #12]
 8017100:	60b9      	str	r1, [r7, #8]
 8017102:	607a      	str	r2, [r7, #4]
 8017104:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017106:	2300      	movs	r3, #0
 8017108:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d106      	bne.n	801711e <etharp_raw+0x26>
 8017110:	4b3a      	ldr	r3, [pc, #232]	; (80171fc <etharp_raw+0x104>)
 8017112:	f240 4257 	movw	r2, #1111	; 0x457
 8017116:	493a      	ldr	r1, [pc, #232]	; (8017200 <etharp_raw+0x108>)
 8017118:	483a      	ldr	r0, [pc, #232]	; (8017204 <etharp_raw+0x10c>)
 801711a:	f001 ff8b 	bl	8019034 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801711e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017122:	211c      	movs	r1, #28
 8017124:	200e      	movs	r0, #14
 8017126:	f7f8 f849 	bl	800f1bc <pbuf_alloc>
 801712a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801712c:	69bb      	ldr	r3, [r7, #24]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d102      	bne.n	8017138 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017132:	f04f 33ff 	mov.w	r3, #4294967295
 8017136:	e05d      	b.n	80171f4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017138:	69bb      	ldr	r3, [r7, #24]
 801713a:	895b      	ldrh	r3, [r3, #10]
 801713c:	2b1b      	cmp	r3, #27
 801713e:	d806      	bhi.n	801714e <etharp_raw+0x56>
 8017140:	4b2e      	ldr	r3, [pc, #184]	; (80171fc <etharp_raw+0x104>)
 8017142:	f240 4262 	movw	r2, #1122	; 0x462
 8017146:	4930      	ldr	r1, [pc, #192]	; (8017208 <etharp_raw+0x110>)
 8017148:	482e      	ldr	r0, [pc, #184]	; (8017204 <etharp_raw+0x10c>)
 801714a:	f001 ff73 	bl	8019034 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801714e:	69bb      	ldr	r3, [r7, #24]
 8017150:	685b      	ldr	r3, [r3, #4]
 8017152:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017154:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017156:	4618      	mov	r0, r3
 8017158:	f7f6 fe6a 	bl	800de30 <lwip_htons>
 801715c:	4603      	mov	r3, r0
 801715e:	461a      	mov	r2, r3
 8017160:	697b      	ldr	r3, [r7, #20]
 8017162:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801716a:	2b06      	cmp	r3, #6
 801716c:	d006      	beq.n	801717c <etharp_raw+0x84>
 801716e:	4b23      	ldr	r3, [pc, #140]	; (80171fc <etharp_raw+0x104>)
 8017170:	f240 4269 	movw	r2, #1129	; 0x469
 8017174:	4925      	ldr	r1, [pc, #148]	; (801720c <etharp_raw+0x114>)
 8017176:	4823      	ldr	r0, [pc, #140]	; (8017204 <etharp_raw+0x10c>)
 8017178:	f001 ff5c 	bl	8019034 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801717c:	697b      	ldr	r3, [r7, #20]
 801717e:	3308      	adds	r3, #8
 8017180:	2206      	movs	r2, #6
 8017182:	6839      	ldr	r1, [r7, #0]
 8017184:	4618      	mov	r0, r3
 8017186:	f001 fee4 	bl	8018f52 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801718a:	697b      	ldr	r3, [r7, #20]
 801718c:	3312      	adds	r3, #18
 801718e:	2206      	movs	r2, #6
 8017190:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017192:	4618      	mov	r0, r3
 8017194:	f001 fedd 	bl	8018f52 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017198:	697b      	ldr	r3, [r7, #20]
 801719a:	330e      	adds	r3, #14
 801719c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801719e:	6812      	ldr	r2, [r2, #0]
 80171a0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80171a2:	697b      	ldr	r3, [r7, #20]
 80171a4:	3318      	adds	r3, #24
 80171a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171a8:	6812      	ldr	r2, [r2, #0]
 80171aa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80171ac:	697b      	ldr	r3, [r7, #20]
 80171ae:	2200      	movs	r2, #0
 80171b0:	701a      	strb	r2, [r3, #0]
 80171b2:	2200      	movs	r2, #0
 80171b4:	f042 0201 	orr.w	r2, r2, #1
 80171b8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80171ba:	697b      	ldr	r3, [r7, #20]
 80171bc:	2200      	movs	r2, #0
 80171be:	f042 0208 	orr.w	r2, r2, #8
 80171c2:	709a      	strb	r2, [r3, #2]
 80171c4:	2200      	movs	r2, #0
 80171c6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80171c8:	697b      	ldr	r3, [r7, #20]
 80171ca:	2206      	movs	r2, #6
 80171cc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80171ce:	697b      	ldr	r3, [r7, #20]
 80171d0:	2204      	movs	r2, #4
 80171d2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80171d4:	f640 0306 	movw	r3, #2054	; 0x806
 80171d8:	9300      	str	r3, [sp, #0]
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	68ba      	ldr	r2, [r7, #8]
 80171de:	69b9      	ldr	r1, [r7, #24]
 80171e0:	68f8      	ldr	r0, [r7, #12]
 80171e2:	f001 fc2d 	bl	8018a40 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80171e6:	69b8      	ldr	r0, [r7, #24]
 80171e8:	f7f8 facc 	bl	800f784 <pbuf_free>
  p = NULL;
 80171ec:	2300      	movs	r3, #0
 80171ee:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80171f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80171f4:	4618      	mov	r0, r3
 80171f6:	3720      	adds	r7, #32
 80171f8:	46bd      	mov	sp, r7
 80171fa:	bd80      	pop	{r7, pc}
 80171fc:	0801c4ac 	.word	0x0801c4ac
 8017200:	0801c5fc 	.word	0x0801c5fc
 8017204:	0801c524 	.word	0x0801c524
 8017208:	0801c6ac 	.word	0x0801c6ac
 801720c:	0801c6e0 	.word	0x0801c6e0

08017210 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017210:	b580      	push	{r7, lr}
 8017212:	b088      	sub	sp, #32
 8017214:	af04      	add	r7, sp, #16
 8017216:	60f8      	str	r0, [r7, #12]
 8017218:	60b9      	str	r1, [r7, #8]
 801721a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801722c:	2201      	movs	r2, #1
 801722e:	9203      	str	r2, [sp, #12]
 8017230:	68ba      	ldr	r2, [r7, #8]
 8017232:	9202      	str	r2, [sp, #8]
 8017234:	4a06      	ldr	r2, [pc, #24]	; (8017250 <etharp_request_dst+0x40>)
 8017236:	9201      	str	r2, [sp, #4]
 8017238:	9300      	str	r3, [sp, #0]
 801723a:	4603      	mov	r3, r0
 801723c:	687a      	ldr	r2, [r7, #4]
 801723e:	68f8      	ldr	r0, [r7, #12]
 8017240:	f7ff ff5a 	bl	80170f8 <etharp_raw>
 8017244:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017246:	4618      	mov	r0, r3
 8017248:	3710      	adds	r7, #16
 801724a:	46bd      	mov	sp, r7
 801724c:	bd80      	pop	{r7, pc}
 801724e:	bf00      	nop
 8017250:	0801d4c0 	.word	0x0801d4c0

08017254 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b082      	sub	sp, #8
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
 801725c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801725e:	4a05      	ldr	r2, [pc, #20]	; (8017274 <etharp_request+0x20>)
 8017260:	6839      	ldr	r1, [r7, #0]
 8017262:	6878      	ldr	r0, [r7, #4]
 8017264:	f7ff ffd4 	bl	8017210 <etharp_request_dst>
 8017268:	4603      	mov	r3, r0
}
 801726a:	4618      	mov	r0, r3
 801726c:	3708      	adds	r7, #8
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
 8017272:	bf00      	nop
 8017274:	0801d4b8 	.word	0x0801d4b8

08017278 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b08e      	sub	sp, #56	; 0x38
 801727c:	af04      	add	r7, sp, #16
 801727e:	6078      	str	r0, [r7, #4]
 8017280:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017282:	4b87      	ldr	r3, [pc, #540]	; (80174a0 <icmp_input+0x228>)
 8017284:	689b      	ldr	r3, [r3, #8]
 8017286:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801728a:	781b      	ldrb	r3, [r3, #0]
 801728c:	f003 030f 	and.w	r3, r3, #15
 8017290:	b2db      	uxtb	r3, r3
 8017292:	009b      	lsls	r3, r3, #2
 8017294:	b2db      	uxtb	r3, r3
 8017296:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017298:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801729a:	2b13      	cmp	r3, #19
 801729c:	f240 80e8 	bls.w	8017470 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	895b      	ldrh	r3, [r3, #10]
 80172a4:	2b03      	cmp	r3, #3
 80172a6:	f240 80e5 	bls.w	8017474 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	685b      	ldr	r3, [r3, #4]
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80172b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	f000 80d2 	beq.w	8017462 <icmp_input+0x1ea>
 80172be:	2b08      	cmp	r3, #8
 80172c0:	f040 80d2 	bne.w	8017468 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80172c4:	4b77      	ldr	r3, [pc, #476]	; (80174a4 <icmp_input+0x22c>)
 80172c6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80172c8:	4b75      	ldr	r3, [pc, #468]	; (80174a0 <icmp_input+0x228>)
 80172ca:	695b      	ldr	r3, [r3, #20]
 80172cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80172d0:	2be0      	cmp	r3, #224	; 0xe0
 80172d2:	f000 80d6 	beq.w	8017482 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80172d6:	4b72      	ldr	r3, [pc, #456]	; (80174a0 <icmp_input+0x228>)
 80172d8:	695b      	ldr	r3, [r3, #20]
 80172da:	4a71      	ldr	r2, [pc, #452]	; (80174a0 <icmp_input+0x228>)
 80172dc:	6812      	ldr	r2, [r2, #0]
 80172de:	4611      	mov	r1, r2
 80172e0:	4618      	mov	r0, r3
 80172e2:	f000 fc13 	bl	8017b0c <ip4_addr_isbroadcast_u32>
 80172e6:	4603      	mov	r3, r0
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	f040 80cc 	bne.w	8017486 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	891b      	ldrh	r3, [r3, #8]
 80172f2:	2b07      	cmp	r3, #7
 80172f4:	f240 80c0 	bls.w	8017478 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80172f8:	6878      	ldr	r0, [r7, #4]
 80172fa:	f7f6 fe36 	bl	800df6a <inet_chksum_pbuf>
 80172fe:	4603      	mov	r3, r0
 8017300:	2b00      	cmp	r3, #0
 8017302:	d003      	beq.n	801730c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f7f8 fa3d 	bl	800f784 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801730a:	e0c5      	b.n	8017498 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801730c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801730e:	330e      	adds	r3, #14
 8017310:	4619      	mov	r1, r3
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f7f8 f9a0 	bl	800f658 <pbuf_add_header>
 8017318:	4603      	mov	r3, r0
 801731a:	2b00      	cmp	r3, #0
 801731c:	d04b      	beq.n	80173b6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	891a      	ldrh	r2, [r3, #8]
 8017322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017324:	4413      	add	r3, r2
 8017326:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	891b      	ldrh	r3, [r3, #8]
 801732c:	8b7a      	ldrh	r2, [r7, #26]
 801732e:	429a      	cmp	r2, r3
 8017330:	f0c0 80ab 	bcc.w	801748a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017334:	8b7b      	ldrh	r3, [r7, #26]
 8017336:	f44f 7220 	mov.w	r2, #640	; 0x280
 801733a:	4619      	mov	r1, r3
 801733c:	200e      	movs	r0, #14
 801733e:	f7f7 ff3d 	bl	800f1bc <pbuf_alloc>
 8017342:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	2b00      	cmp	r3, #0
 8017348:	f000 80a1 	beq.w	801748e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801734c:	697b      	ldr	r3, [r7, #20]
 801734e:	895b      	ldrh	r3, [r3, #10]
 8017350:	461a      	mov	r2, r3
 8017352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017354:	3308      	adds	r3, #8
 8017356:	429a      	cmp	r2, r3
 8017358:	d203      	bcs.n	8017362 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801735a:	6978      	ldr	r0, [r7, #20]
 801735c:	f7f8 fa12 	bl	800f784 <pbuf_free>
          goto icmperr;
 8017360:	e096      	b.n	8017490 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017362:	697b      	ldr	r3, [r7, #20]
 8017364:	685b      	ldr	r3, [r3, #4]
 8017366:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801736a:	4618      	mov	r0, r3
 801736c:	f001 fdf1 	bl	8018f52 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017372:	4619      	mov	r1, r3
 8017374:	6978      	ldr	r0, [r7, #20]
 8017376:	f7f8 f97f 	bl	800f678 <pbuf_remove_header>
 801737a:	4603      	mov	r3, r0
 801737c:	2b00      	cmp	r3, #0
 801737e:	d009      	beq.n	8017394 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017380:	4b49      	ldr	r3, [pc, #292]	; (80174a8 <icmp_input+0x230>)
 8017382:	22b6      	movs	r2, #182	; 0xb6
 8017384:	4949      	ldr	r1, [pc, #292]	; (80174ac <icmp_input+0x234>)
 8017386:	484a      	ldr	r0, [pc, #296]	; (80174b0 <icmp_input+0x238>)
 8017388:	f001 fe54 	bl	8019034 <iprintf>
          pbuf_free(r);
 801738c:	6978      	ldr	r0, [r7, #20]
 801738e:	f7f8 f9f9 	bl	800f784 <pbuf_free>
          goto icmperr;
 8017392:	e07d      	b.n	8017490 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017394:	6879      	ldr	r1, [r7, #4]
 8017396:	6978      	ldr	r0, [r7, #20]
 8017398:	f7f8 fb28 	bl	800f9ec <pbuf_copy>
 801739c:	4603      	mov	r3, r0
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d003      	beq.n	80173aa <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80173a2:	6978      	ldr	r0, [r7, #20]
 80173a4:	f7f8 f9ee 	bl	800f784 <pbuf_free>
          goto icmperr;
 80173a8:	e072      	b.n	8017490 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	f7f8 f9ea 	bl	800f784 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80173b0:	697b      	ldr	r3, [r7, #20]
 80173b2:	607b      	str	r3, [r7, #4]
 80173b4:	e00f      	b.n	80173d6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80173b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173b8:	330e      	adds	r3, #14
 80173ba:	4619      	mov	r1, r3
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	f7f8 f95b 	bl	800f678 <pbuf_remove_header>
 80173c2:	4603      	mov	r3, r0
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d006      	beq.n	80173d6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80173c8:	4b37      	ldr	r3, [pc, #220]	; (80174a8 <icmp_input+0x230>)
 80173ca:	22c7      	movs	r2, #199	; 0xc7
 80173cc:	4939      	ldr	r1, [pc, #228]	; (80174b4 <icmp_input+0x23c>)
 80173ce:	4838      	ldr	r0, [pc, #224]	; (80174b0 <icmp_input+0x238>)
 80173d0:	f001 fe30 	bl	8019034 <iprintf>
          goto icmperr;
 80173d4:	e05c      	b.n	8017490 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	685b      	ldr	r3, [r3, #4]
 80173da:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80173dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173de:	4619      	mov	r1, r3
 80173e0:	6878      	ldr	r0, [r7, #4]
 80173e2:	f7f8 f939 	bl	800f658 <pbuf_add_header>
 80173e6:	4603      	mov	r3, r0
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d13c      	bne.n	8017466 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	685b      	ldr	r3, [r3, #4]
 80173f0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80173f2:	69fb      	ldr	r3, [r7, #28]
 80173f4:	681a      	ldr	r2, [r3, #0]
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80173fa:	4b29      	ldr	r3, [pc, #164]	; (80174a0 <icmp_input+0x228>)
 80173fc:	691a      	ldr	r2, [r3, #16]
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017402:	693b      	ldr	r3, [r7, #16]
 8017404:	2200      	movs	r2, #0
 8017406:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017408:	693b      	ldr	r3, [r7, #16]
 801740a:	885b      	ldrh	r3, [r3, #2]
 801740c:	b29b      	uxth	r3, r3
 801740e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017412:	4293      	cmp	r3, r2
 8017414:	d907      	bls.n	8017426 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017416:	693b      	ldr	r3, [r7, #16]
 8017418:	885b      	ldrh	r3, [r3, #2]
 801741a:	b29b      	uxth	r3, r3
 801741c:	3309      	adds	r3, #9
 801741e:	b29a      	uxth	r2, r3
 8017420:	693b      	ldr	r3, [r7, #16]
 8017422:	805a      	strh	r2, [r3, #2]
 8017424:	e006      	b.n	8017434 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	885b      	ldrh	r3, [r3, #2]
 801742a:	b29b      	uxth	r3, r3
 801742c:	3308      	adds	r3, #8
 801742e:	b29a      	uxth	r2, r3
 8017430:	693b      	ldr	r3, [r7, #16]
 8017432:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	22ff      	movs	r2, #255	; 0xff
 8017438:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	2200      	movs	r2, #0
 801743e:	729a      	strb	r2, [r3, #10]
 8017440:	2200      	movs	r2, #0
 8017442:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017444:	683b      	ldr	r3, [r7, #0]
 8017446:	9302      	str	r3, [sp, #8]
 8017448:	2301      	movs	r3, #1
 801744a:	9301      	str	r3, [sp, #4]
 801744c:	2300      	movs	r3, #0
 801744e:	9300      	str	r3, [sp, #0]
 8017450:	23ff      	movs	r3, #255	; 0xff
 8017452:	2200      	movs	r2, #0
 8017454:	69f9      	ldr	r1, [r7, #28]
 8017456:	6878      	ldr	r0, [r7, #4]
 8017458:	f000 fa80 	bl	801795c <ip4_output_if>
 801745c:	4603      	mov	r3, r0
 801745e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017460:	e001      	b.n	8017466 <icmp_input+0x1ee>
      break;
 8017462:	bf00      	nop
 8017464:	e000      	b.n	8017468 <icmp_input+0x1f0>
      break;
 8017466:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017468:	6878      	ldr	r0, [r7, #4]
 801746a:	f7f8 f98b 	bl	800f784 <pbuf_free>
  return;
 801746e:	e013      	b.n	8017498 <icmp_input+0x220>
    goto lenerr;
 8017470:	bf00      	nop
 8017472:	e002      	b.n	801747a <icmp_input+0x202>
    goto lenerr;
 8017474:	bf00      	nop
 8017476:	e000      	b.n	801747a <icmp_input+0x202>
        goto lenerr;
 8017478:	bf00      	nop
lenerr:
  pbuf_free(p);
 801747a:	6878      	ldr	r0, [r7, #4]
 801747c:	f7f8 f982 	bl	800f784 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017480:	e00a      	b.n	8017498 <icmp_input+0x220>
        goto icmperr;
 8017482:	bf00      	nop
 8017484:	e004      	b.n	8017490 <icmp_input+0x218>
        goto icmperr;
 8017486:	bf00      	nop
 8017488:	e002      	b.n	8017490 <icmp_input+0x218>
          goto icmperr;
 801748a:	bf00      	nop
 801748c:	e000      	b.n	8017490 <icmp_input+0x218>
          goto icmperr;
 801748e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017490:	6878      	ldr	r0, [r7, #4]
 8017492:	f7f8 f977 	bl	800f784 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017496:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017498:	3728      	adds	r7, #40	; 0x28
 801749a:	46bd      	mov	sp, r7
 801749c:	bd80      	pop	{r7, pc}
 801749e:	bf00      	nop
 80174a0:	2400479c 	.word	0x2400479c
 80174a4:	240047b0 	.word	0x240047b0
 80174a8:	0801c724 	.word	0x0801c724
 80174ac:	0801c75c 	.word	0x0801c75c
 80174b0:	0801c794 	.word	0x0801c794
 80174b4:	0801c7bc 	.word	0x0801c7bc

080174b8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b082      	sub	sp, #8
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
 80174c0:	460b      	mov	r3, r1
 80174c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80174c4:	78fb      	ldrb	r3, [r7, #3]
 80174c6:	461a      	mov	r2, r3
 80174c8:	2103      	movs	r1, #3
 80174ca:	6878      	ldr	r0, [r7, #4]
 80174cc:	f000 f814 	bl	80174f8 <icmp_send_response>
}
 80174d0:	bf00      	nop
 80174d2:	3708      	adds	r7, #8
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd80      	pop	{r7, pc}

080174d8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b082      	sub	sp, #8
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
 80174e0:	460b      	mov	r3, r1
 80174e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80174e4:	78fb      	ldrb	r3, [r7, #3]
 80174e6:	461a      	mov	r2, r3
 80174e8:	210b      	movs	r1, #11
 80174ea:	6878      	ldr	r0, [r7, #4]
 80174ec:	f000 f804 	bl	80174f8 <icmp_send_response>
}
 80174f0:	bf00      	nop
 80174f2:	3708      	adds	r7, #8
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd80      	pop	{r7, pc}

080174f8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b08c      	sub	sp, #48	; 0x30
 80174fc:	af04      	add	r7, sp, #16
 80174fe:	6078      	str	r0, [r7, #4]
 8017500:	460b      	mov	r3, r1
 8017502:	70fb      	strb	r3, [r7, #3]
 8017504:	4613      	mov	r3, r2
 8017506:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017508:	f44f 7220 	mov.w	r2, #640	; 0x280
 801750c:	2124      	movs	r1, #36	; 0x24
 801750e:	2022      	movs	r0, #34	; 0x22
 8017510:	f7f7 fe54 	bl	800f1bc <pbuf_alloc>
 8017514:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017516:	69fb      	ldr	r3, [r7, #28]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d056      	beq.n	80175ca <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801751c:	69fb      	ldr	r3, [r7, #28]
 801751e:	895b      	ldrh	r3, [r3, #10]
 8017520:	2b23      	cmp	r3, #35	; 0x23
 8017522:	d806      	bhi.n	8017532 <icmp_send_response+0x3a>
 8017524:	4b2b      	ldr	r3, [pc, #172]	; (80175d4 <icmp_send_response+0xdc>)
 8017526:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801752a:	492b      	ldr	r1, [pc, #172]	; (80175d8 <icmp_send_response+0xe0>)
 801752c:	482b      	ldr	r0, [pc, #172]	; (80175dc <icmp_send_response+0xe4>)
 801752e:	f001 fd81 	bl	8019034 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	685b      	ldr	r3, [r3, #4]
 8017536:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017538:	69fb      	ldr	r3, [r7, #28]
 801753a:	685b      	ldr	r3, [r3, #4]
 801753c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801753e:	697b      	ldr	r3, [r7, #20]
 8017540:	78fa      	ldrb	r2, [r7, #3]
 8017542:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017544:	697b      	ldr	r3, [r7, #20]
 8017546:	78ba      	ldrb	r2, [r7, #2]
 8017548:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801754a:	697b      	ldr	r3, [r7, #20]
 801754c:	2200      	movs	r2, #0
 801754e:	711a      	strb	r2, [r3, #4]
 8017550:	2200      	movs	r2, #0
 8017552:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017554:	697b      	ldr	r3, [r7, #20]
 8017556:	2200      	movs	r2, #0
 8017558:	719a      	strb	r2, [r3, #6]
 801755a:	2200      	movs	r2, #0
 801755c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801755e:	69fb      	ldr	r3, [r7, #28]
 8017560:	685b      	ldr	r3, [r3, #4]
 8017562:	f103 0008 	add.w	r0, r3, #8
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	685b      	ldr	r3, [r3, #4]
 801756a:	221c      	movs	r2, #28
 801756c:	4619      	mov	r1, r3
 801756e:	f001 fcf0 	bl	8018f52 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017572:	69bb      	ldr	r3, [r7, #24]
 8017574:	68db      	ldr	r3, [r3, #12]
 8017576:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017578:	f107 030c 	add.w	r3, r7, #12
 801757c:	4618      	mov	r0, r3
 801757e:	f000 f82f 	bl	80175e0 <ip4_route>
 8017582:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017584:	693b      	ldr	r3, [r7, #16]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d01b      	beq.n	80175c2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801758a:	697b      	ldr	r3, [r7, #20]
 801758c:	2200      	movs	r2, #0
 801758e:	709a      	strb	r2, [r3, #2]
 8017590:	2200      	movs	r2, #0
 8017592:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017594:	69fb      	ldr	r3, [r7, #28]
 8017596:	895b      	ldrh	r3, [r3, #10]
 8017598:	4619      	mov	r1, r3
 801759a:	6978      	ldr	r0, [r7, #20]
 801759c:	f7f6 fcd3 	bl	800df46 <inet_chksum>
 80175a0:	4603      	mov	r3, r0
 80175a2:	461a      	mov	r2, r3
 80175a4:	697b      	ldr	r3, [r7, #20]
 80175a6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80175a8:	f107 020c 	add.w	r2, r7, #12
 80175ac:	693b      	ldr	r3, [r7, #16]
 80175ae:	9302      	str	r3, [sp, #8]
 80175b0:	2301      	movs	r3, #1
 80175b2:	9301      	str	r3, [sp, #4]
 80175b4:	2300      	movs	r3, #0
 80175b6:	9300      	str	r3, [sp, #0]
 80175b8:	23ff      	movs	r3, #255	; 0xff
 80175ba:	2100      	movs	r1, #0
 80175bc:	69f8      	ldr	r0, [r7, #28]
 80175be:	f000 f9cd 	bl	801795c <ip4_output_if>
  }
  pbuf_free(q);
 80175c2:	69f8      	ldr	r0, [r7, #28]
 80175c4:	f7f8 f8de 	bl	800f784 <pbuf_free>
 80175c8:	e000      	b.n	80175cc <icmp_send_response+0xd4>
    return;
 80175ca:	bf00      	nop
}
 80175cc:	3720      	adds	r7, #32
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}
 80175d2:	bf00      	nop
 80175d4:	0801c724 	.word	0x0801c724
 80175d8:	0801c7f0 	.word	0x0801c7f0
 80175dc:	0801c794 	.word	0x0801c794

080175e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80175e0:	b480      	push	{r7}
 80175e2:	b085      	sub	sp, #20
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80175e8:	4b33      	ldr	r3, [pc, #204]	; (80176b8 <ip4_route+0xd8>)
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	60fb      	str	r3, [r7, #12]
 80175ee:	e036      	b.n	801765e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80175f6:	f003 0301 	and.w	r3, r3, #1
 80175fa:	b2db      	uxtb	r3, r3
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d02b      	beq.n	8017658 <ip4_route+0x78>
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017606:	089b      	lsrs	r3, r3, #2
 8017608:	f003 0301 	and.w	r3, r3, #1
 801760c:	b2db      	uxtb	r3, r3
 801760e:	2b00      	cmp	r3, #0
 8017610:	d022      	beq.n	8017658 <ip4_route+0x78>
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	3304      	adds	r3, #4
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d01d      	beq.n	8017658 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	681a      	ldr	r2, [r3, #0]
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	3304      	adds	r3, #4
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	405a      	eors	r2, r3
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	3308      	adds	r3, #8
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	4013      	ands	r3, r2
 8017630:	2b00      	cmp	r3, #0
 8017632:	d101      	bne.n	8017638 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	e038      	b.n	80176aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801763e:	f003 0302 	and.w	r3, r3, #2
 8017642:	2b00      	cmp	r3, #0
 8017644:	d108      	bne.n	8017658 <ip4_route+0x78>
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	681a      	ldr	r2, [r3, #0]
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	330c      	adds	r3, #12
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	429a      	cmp	r2, r3
 8017652:	d101      	bne.n	8017658 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	e028      	b.n	80176aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	60fb      	str	r3, [r7, #12]
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d1c5      	bne.n	80175f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017664:	4b15      	ldr	r3, [pc, #84]	; (80176bc <ip4_route+0xdc>)
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d01a      	beq.n	80176a2 <ip4_route+0xc2>
 801766c:	4b13      	ldr	r3, [pc, #76]	; (80176bc <ip4_route+0xdc>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017674:	f003 0301 	and.w	r3, r3, #1
 8017678:	2b00      	cmp	r3, #0
 801767a:	d012      	beq.n	80176a2 <ip4_route+0xc2>
 801767c:	4b0f      	ldr	r3, [pc, #60]	; (80176bc <ip4_route+0xdc>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017684:	f003 0304 	and.w	r3, r3, #4
 8017688:	2b00      	cmp	r3, #0
 801768a:	d00a      	beq.n	80176a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801768c:	4b0b      	ldr	r3, [pc, #44]	; (80176bc <ip4_route+0xdc>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	3304      	adds	r3, #4
 8017692:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017694:	2b00      	cmp	r3, #0
 8017696:	d004      	beq.n	80176a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	b2db      	uxtb	r3, r3
 801769e:	2b7f      	cmp	r3, #127	; 0x7f
 80176a0:	d101      	bne.n	80176a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80176a2:	2300      	movs	r3, #0
 80176a4:	e001      	b.n	80176aa <ip4_route+0xca>
  }

  return netif_default;
 80176a6:	4b05      	ldr	r3, [pc, #20]	; (80176bc <ip4_route+0xdc>)
 80176a8:	681b      	ldr	r3, [r3, #0]
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	3714      	adds	r7, #20
 80176ae:	46bd      	mov	sp, r7
 80176b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b4:	4770      	bx	lr
 80176b6:	bf00      	nop
 80176b8:	2400784c 	.word	0x2400784c
 80176bc:	24007850 	.word	0x24007850

080176c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b082      	sub	sp, #8
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80176ce:	f003 0301 	and.w	r3, r3, #1
 80176d2:	b2db      	uxtb	r3, r3
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d016      	beq.n	8017706 <ip4_input_accept+0x46>
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	3304      	adds	r3, #4
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d011      	beq.n	8017706 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80176e2:	4b0b      	ldr	r3, [pc, #44]	; (8017710 <ip4_input_accept+0x50>)
 80176e4:	695a      	ldr	r2, [r3, #20]
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	3304      	adds	r3, #4
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	429a      	cmp	r2, r3
 80176ee:	d008      	beq.n	8017702 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80176f0:	4b07      	ldr	r3, [pc, #28]	; (8017710 <ip4_input_accept+0x50>)
 80176f2:	695b      	ldr	r3, [r3, #20]
 80176f4:	6879      	ldr	r1, [r7, #4]
 80176f6:	4618      	mov	r0, r3
 80176f8:	f000 fa08 	bl	8017b0c <ip4_addr_isbroadcast_u32>
 80176fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d001      	beq.n	8017706 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017702:	2301      	movs	r3, #1
 8017704:	e000      	b.n	8017708 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017706:	2300      	movs	r3, #0
}
 8017708:	4618      	mov	r0, r3
 801770a:	3708      	adds	r7, #8
 801770c:	46bd      	mov	sp, r7
 801770e:	bd80      	pop	{r7, pc}
 8017710:	2400479c 	.word	0x2400479c

08017714 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b086      	sub	sp, #24
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]
 801771c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	685b      	ldr	r3, [r3, #4]
 8017722:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017724:	697b      	ldr	r3, [r7, #20]
 8017726:	781b      	ldrb	r3, [r3, #0]
 8017728:	091b      	lsrs	r3, r3, #4
 801772a:	b2db      	uxtb	r3, r3
 801772c:	2b04      	cmp	r3, #4
 801772e:	d004      	beq.n	801773a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017730:	6878      	ldr	r0, [r7, #4]
 8017732:	f7f8 f827 	bl	800f784 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017736:	2300      	movs	r3, #0
 8017738:	e107      	b.n	801794a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801773a:	697b      	ldr	r3, [r7, #20]
 801773c:	781b      	ldrb	r3, [r3, #0]
 801773e:	f003 030f 	and.w	r3, r3, #15
 8017742:	b2db      	uxtb	r3, r3
 8017744:	009b      	lsls	r3, r3, #2
 8017746:	b2db      	uxtb	r3, r3
 8017748:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801774a:	697b      	ldr	r3, [r7, #20]
 801774c:	885b      	ldrh	r3, [r3, #2]
 801774e:	b29b      	uxth	r3, r3
 8017750:	4618      	mov	r0, r3
 8017752:	f7f6 fb6d 	bl	800de30 <lwip_htons>
 8017756:	4603      	mov	r3, r0
 8017758:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	891b      	ldrh	r3, [r3, #8]
 801775e:	89ba      	ldrh	r2, [r7, #12]
 8017760:	429a      	cmp	r2, r3
 8017762:	d204      	bcs.n	801776e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017764:	89bb      	ldrh	r3, [r7, #12]
 8017766:	4619      	mov	r1, r3
 8017768:	6878      	ldr	r0, [r7, #4]
 801776a:	f7f7 fe85 	bl	800f478 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	895b      	ldrh	r3, [r3, #10]
 8017772:	89fa      	ldrh	r2, [r7, #14]
 8017774:	429a      	cmp	r2, r3
 8017776:	d807      	bhi.n	8017788 <ip4_input+0x74>
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	891b      	ldrh	r3, [r3, #8]
 801777c:	89ba      	ldrh	r2, [r7, #12]
 801777e:	429a      	cmp	r2, r3
 8017780:	d802      	bhi.n	8017788 <ip4_input+0x74>
 8017782:	89fb      	ldrh	r3, [r7, #14]
 8017784:	2b13      	cmp	r3, #19
 8017786:	d804      	bhi.n	8017792 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017788:	6878      	ldr	r0, [r7, #4]
 801778a:	f7f7 fffb 	bl	800f784 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801778e:	2300      	movs	r3, #0
 8017790:	e0db      	b.n	801794a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017792:	697b      	ldr	r3, [r7, #20]
 8017794:	691b      	ldr	r3, [r3, #16]
 8017796:	4a6f      	ldr	r2, [pc, #444]	; (8017954 <ip4_input+0x240>)
 8017798:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801779a:	697b      	ldr	r3, [r7, #20]
 801779c:	68db      	ldr	r3, [r3, #12]
 801779e:	4a6d      	ldr	r2, [pc, #436]	; (8017954 <ip4_input+0x240>)
 80177a0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80177a2:	4b6c      	ldr	r3, [pc, #432]	; (8017954 <ip4_input+0x240>)
 80177a4:	695b      	ldr	r3, [r3, #20]
 80177a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80177aa:	2be0      	cmp	r3, #224	; 0xe0
 80177ac:	d112      	bne.n	80177d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80177ae:	683b      	ldr	r3, [r7, #0]
 80177b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80177b4:	f003 0301 	and.w	r3, r3, #1
 80177b8:	b2db      	uxtb	r3, r3
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d007      	beq.n	80177ce <ip4_input+0xba>
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	3304      	adds	r3, #4
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d002      	beq.n	80177ce <ip4_input+0xba>
      netif = inp;
 80177c8:	683b      	ldr	r3, [r7, #0]
 80177ca:	613b      	str	r3, [r7, #16]
 80177cc:	e02a      	b.n	8017824 <ip4_input+0x110>
    } else {
      netif = NULL;
 80177ce:	2300      	movs	r3, #0
 80177d0:	613b      	str	r3, [r7, #16]
 80177d2:	e027      	b.n	8017824 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80177d4:	6838      	ldr	r0, [r7, #0]
 80177d6:	f7ff ff73 	bl	80176c0 <ip4_input_accept>
 80177da:	4603      	mov	r3, r0
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d002      	beq.n	80177e6 <ip4_input+0xd2>
      netif = inp;
 80177e0:	683b      	ldr	r3, [r7, #0]
 80177e2:	613b      	str	r3, [r7, #16]
 80177e4:	e01e      	b.n	8017824 <ip4_input+0x110>
    } else {
      netif = NULL;
 80177e6:	2300      	movs	r3, #0
 80177e8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80177ea:	4b5a      	ldr	r3, [pc, #360]	; (8017954 <ip4_input+0x240>)
 80177ec:	695b      	ldr	r3, [r3, #20]
 80177ee:	b2db      	uxtb	r3, r3
 80177f0:	2b7f      	cmp	r3, #127	; 0x7f
 80177f2:	d017      	beq.n	8017824 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80177f4:	4b58      	ldr	r3, [pc, #352]	; (8017958 <ip4_input+0x244>)
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	613b      	str	r3, [r7, #16]
 80177fa:	e00e      	b.n	801781a <ip4_input+0x106>
          if (netif == inp) {
 80177fc:	693a      	ldr	r2, [r7, #16]
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	429a      	cmp	r2, r3
 8017802:	d006      	beq.n	8017812 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017804:	6938      	ldr	r0, [r7, #16]
 8017806:	f7ff ff5b 	bl	80176c0 <ip4_input_accept>
 801780a:	4603      	mov	r3, r0
 801780c:	2b00      	cmp	r3, #0
 801780e:	d108      	bne.n	8017822 <ip4_input+0x10e>
 8017810:	e000      	b.n	8017814 <ip4_input+0x100>
            continue;
 8017812:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017814:	693b      	ldr	r3, [r7, #16]
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	613b      	str	r3, [r7, #16]
 801781a:	693b      	ldr	r3, [r7, #16]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d1ed      	bne.n	80177fc <ip4_input+0xe8>
 8017820:	e000      	b.n	8017824 <ip4_input+0x110>
            break;
 8017822:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017824:	4b4b      	ldr	r3, [pc, #300]	; (8017954 <ip4_input+0x240>)
 8017826:	691b      	ldr	r3, [r3, #16]
 8017828:	6839      	ldr	r1, [r7, #0]
 801782a:	4618      	mov	r0, r3
 801782c:	f000 f96e 	bl	8017b0c <ip4_addr_isbroadcast_u32>
 8017830:	4603      	mov	r3, r0
 8017832:	2b00      	cmp	r3, #0
 8017834:	d105      	bne.n	8017842 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017836:	4b47      	ldr	r3, [pc, #284]	; (8017954 <ip4_input+0x240>)
 8017838:	691b      	ldr	r3, [r3, #16]
 801783a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801783e:	2be0      	cmp	r3, #224	; 0xe0
 8017840:	d104      	bne.n	801784c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017842:	6878      	ldr	r0, [r7, #4]
 8017844:	f7f7 ff9e 	bl	800f784 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017848:	2300      	movs	r3, #0
 801784a:	e07e      	b.n	801794a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801784c:	693b      	ldr	r3, [r7, #16]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d104      	bne.n	801785c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017852:	6878      	ldr	r0, [r7, #4]
 8017854:	f7f7 ff96 	bl	800f784 <pbuf_free>
    return ERR_OK;
 8017858:	2300      	movs	r3, #0
 801785a:	e076      	b.n	801794a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801785c:	697b      	ldr	r3, [r7, #20]
 801785e:	88db      	ldrh	r3, [r3, #6]
 8017860:	b29b      	uxth	r3, r3
 8017862:	461a      	mov	r2, r3
 8017864:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017868:	4013      	ands	r3, r2
 801786a:	2b00      	cmp	r3, #0
 801786c:	d00b      	beq.n	8017886 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801786e:	6878      	ldr	r0, [r7, #4]
 8017870:	f000 fd24 	bl	80182bc <ip4_reass>
 8017874:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d101      	bne.n	8017880 <ip4_input+0x16c>
      return ERR_OK;
 801787c:	2300      	movs	r3, #0
 801787e:	e064      	b.n	801794a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	685b      	ldr	r3, [r3, #4]
 8017884:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017886:	4a33      	ldr	r2, [pc, #204]	; (8017954 <ip4_input+0x240>)
 8017888:	693b      	ldr	r3, [r7, #16]
 801788a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801788c:	4a31      	ldr	r2, [pc, #196]	; (8017954 <ip4_input+0x240>)
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017892:	4a30      	ldr	r2, [pc, #192]	; (8017954 <ip4_input+0x240>)
 8017894:	697b      	ldr	r3, [r7, #20]
 8017896:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017898:	697b      	ldr	r3, [r7, #20]
 801789a:	781b      	ldrb	r3, [r3, #0]
 801789c:	f003 030f 	and.w	r3, r3, #15
 80178a0:	b2db      	uxtb	r3, r3
 80178a2:	009b      	lsls	r3, r3, #2
 80178a4:	b2db      	uxtb	r3, r3
 80178a6:	b29a      	uxth	r2, r3
 80178a8:	4b2a      	ldr	r3, [pc, #168]	; (8017954 <ip4_input+0x240>)
 80178aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80178ac:	89fb      	ldrh	r3, [r7, #14]
 80178ae:	4619      	mov	r1, r3
 80178b0:	6878      	ldr	r0, [r7, #4]
 80178b2:	f7f7 fee1 	bl	800f678 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80178b6:	697b      	ldr	r3, [r7, #20]
 80178b8:	7a5b      	ldrb	r3, [r3, #9]
 80178ba:	2b11      	cmp	r3, #17
 80178bc:	d006      	beq.n	80178cc <ip4_input+0x1b8>
 80178be:	2b11      	cmp	r3, #17
 80178c0:	dc13      	bgt.n	80178ea <ip4_input+0x1d6>
 80178c2:	2b01      	cmp	r3, #1
 80178c4:	d00c      	beq.n	80178e0 <ip4_input+0x1cc>
 80178c6:	2b06      	cmp	r3, #6
 80178c8:	d005      	beq.n	80178d6 <ip4_input+0x1c2>
 80178ca:	e00e      	b.n	80178ea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80178cc:	6839      	ldr	r1, [r7, #0]
 80178ce:	6878      	ldr	r0, [r7, #4]
 80178d0:	f7fe fc42 	bl	8016158 <udp_input>
        break;
 80178d4:	e026      	b.n	8017924 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80178d6:	6839      	ldr	r1, [r7, #0]
 80178d8:	6878      	ldr	r0, [r7, #4]
 80178da:	f7fa f837 	bl	801194c <tcp_input>
        break;
 80178de:	e021      	b.n	8017924 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80178e0:	6839      	ldr	r1, [r7, #0]
 80178e2:	6878      	ldr	r0, [r7, #4]
 80178e4:	f7ff fcc8 	bl	8017278 <icmp_input>
        break;
 80178e8:	e01c      	b.n	8017924 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80178ea:	4b1a      	ldr	r3, [pc, #104]	; (8017954 <ip4_input+0x240>)
 80178ec:	695b      	ldr	r3, [r3, #20]
 80178ee:	6939      	ldr	r1, [r7, #16]
 80178f0:	4618      	mov	r0, r3
 80178f2:	f000 f90b 	bl	8017b0c <ip4_addr_isbroadcast_u32>
 80178f6:	4603      	mov	r3, r0
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d10f      	bne.n	801791c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80178fc:	4b15      	ldr	r3, [pc, #84]	; (8017954 <ip4_input+0x240>)
 80178fe:	695b      	ldr	r3, [r3, #20]
 8017900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017904:	2be0      	cmp	r3, #224	; 0xe0
 8017906:	d009      	beq.n	801791c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017908:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801790c:	4619      	mov	r1, r3
 801790e:	6878      	ldr	r0, [r7, #4]
 8017910:	f7f7 ff25 	bl	800f75e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017914:	2102      	movs	r1, #2
 8017916:	6878      	ldr	r0, [r7, #4]
 8017918:	f7ff fdce 	bl	80174b8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801791c:	6878      	ldr	r0, [r7, #4]
 801791e:	f7f7 ff31 	bl	800f784 <pbuf_free>
        break;
 8017922:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017924:	4b0b      	ldr	r3, [pc, #44]	; (8017954 <ip4_input+0x240>)
 8017926:	2200      	movs	r2, #0
 8017928:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801792a:	4b0a      	ldr	r3, [pc, #40]	; (8017954 <ip4_input+0x240>)
 801792c:	2200      	movs	r2, #0
 801792e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017930:	4b08      	ldr	r3, [pc, #32]	; (8017954 <ip4_input+0x240>)
 8017932:	2200      	movs	r2, #0
 8017934:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017936:	4b07      	ldr	r3, [pc, #28]	; (8017954 <ip4_input+0x240>)
 8017938:	2200      	movs	r2, #0
 801793a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801793c:	4b05      	ldr	r3, [pc, #20]	; (8017954 <ip4_input+0x240>)
 801793e:	2200      	movs	r2, #0
 8017940:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017942:	4b04      	ldr	r3, [pc, #16]	; (8017954 <ip4_input+0x240>)
 8017944:	2200      	movs	r2, #0
 8017946:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017948:	2300      	movs	r3, #0
}
 801794a:	4618      	mov	r0, r3
 801794c:	3718      	adds	r7, #24
 801794e:	46bd      	mov	sp, r7
 8017950:	bd80      	pop	{r7, pc}
 8017952:	bf00      	nop
 8017954:	2400479c 	.word	0x2400479c
 8017958:	2400784c 	.word	0x2400784c

0801795c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b08a      	sub	sp, #40	; 0x28
 8017960:	af04      	add	r7, sp, #16
 8017962:	60f8      	str	r0, [r7, #12]
 8017964:	60b9      	str	r1, [r7, #8]
 8017966:	607a      	str	r2, [r7, #4]
 8017968:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801796a:	68bb      	ldr	r3, [r7, #8]
 801796c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d009      	beq.n	8017988 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017974:	68bb      	ldr	r3, [r7, #8]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d003      	beq.n	8017982 <ip4_output_if+0x26>
 801797a:	68bb      	ldr	r3, [r7, #8]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d102      	bne.n	8017988 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017984:	3304      	adds	r3, #4
 8017986:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017988:	78fa      	ldrb	r2, [r7, #3]
 801798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801798c:	9302      	str	r3, [sp, #8]
 801798e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017992:	9301      	str	r3, [sp, #4]
 8017994:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017998:	9300      	str	r3, [sp, #0]
 801799a:	4613      	mov	r3, r2
 801799c:	687a      	ldr	r2, [r7, #4]
 801799e:	6979      	ldr	r1, [r7, #20]
 80179a0:	68f8      	ldr	r0, [r7, #12]
 80179a2:	f000 f805 	bl	80179b0 <ip4_output_if_src>
 80179a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80179a8:	4618      	mov	r0, r3
 80179aa:	3718      	adds	r7, #24
 80179ac:	46bd      	mov	sp, r7
 80179ae:	bd80      	pop	{r7, pc}

080179b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80179b0:	b580      	push	{r7, lr}
 80179b2:	b088      	sub	sp, #32
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	60f8      	str	r0, [r7, #12]
 80179b8:	60b9      	str	r1, [r7, #8]
 80179ba:	607a      	str	r2, [r7, #4]
 80179bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	7b9b      	ldrb	r3, [r3, #14]
 80179c2:	2b01      	cmp	r3, #1
 80179c4:	d006      	beq.n	80179d4 <ip4_output_if_src+0x24>
 80179c6:	4b4b      	ldr	r3, [pc, #300]	; (8017af4 <ip4_output_if_src+0x144>)
 80179c8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80179cc:	494a      	ldr	r1, [pc, #296]	; (8017af8 <ip4_output_if_src+0x148>)
 80179ce:	484b      	ldr	r0, [pc, #300]	; (8017afc <ip4_output_if_src+0x14c>)
 80179d0:	f001 fb30 	bl	8019034 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d060      	beq.n	8017a9c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80179da:	2314      	movs	r3, #20
 80179dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80179de:	2114      	movs	r1, #20
 80179e0:	68f8      	ldr	r0, [r7, #12]
 80179e2:	f7f7 fe39 	bl	800f658 <pbuf_add_header>
 80179e6:	4603      	mov	r3, r0
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d002      	beq.n	80179f2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80179ec:	f06f 0301 	mvn.w	r3, #1
 80179f0:	e07c      	b.n	8017aec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	685b      	ldr	r3, [r3, #4]
 80179f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	895b      	ldrh	r3, [r3, #10]
 80179fc:	2b13      	cmp	r3, #19
 80179fe:	d806      	bhi.n	8017a0e <ip4_output_if_src+0x5e>
 8017a00:	4b3c      	ldr	r3, [pc, #240]	; (8017af4 <ip4_output_if_src+0x144>)
 8017a02:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017a06:	493e      	ldr	r1, [pc, #248]	; (8017b00 <ip4_output_if_src+0x150>)
 8017a08:	483c      	ldr	r0, [pc, #240]	; (8017afc <ip4_output_if_src+0x14c>)
 8017a0a:	f001 fb13 	bl	8019034 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017a0e:	69fb      	ldr	r3, [r7, #28]
 8017a10:	78fa      	ldrb	r2, [r7, #3]
 8017a12:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017a14:	69fb      	ldr	r3, [r7, #28]
 8017a16:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017a1a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	681a      	ldr	r2, [r3, #0]
 8017a20:	69fb      	ldr	r3, [r7, #28]
 8017a22:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017a24:	8b7b      	ldrh	r3, [r7, #26]
 8017a26:	089b      	lsrs	r3, r3, #2
 8017a28:	b29b      	uxth	r3, r3
 8017a2a:	b2db      	uxtb	r3, r3
 8017a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a30:	b2da      	uxtb	r2, r3
 8017a32:	69fb      	ldr	r3, [r7, #28]
 8017a34:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017a36:	69fb      	ldr	r3, [r7, #28]
 8017a38:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017a3c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	891b      	ldrh	r3, [r3, #8]
 8017a42:	4618      	mov	r0, r3
 8017a44:	f7f6 f9f4 	bl	800de30 <lwip_htons>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	461a      	mov	r2, r3
 8017a4c:	69fb      	ldr	r3, [r7, #28]
 8017a4e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017a50:	69fb      	ldr	r3, [r7, #28]
 8017a52:	2200      	movs	r2, #0
 8017a54:	719a      	strb	r2, [r3, #6]
 8017a56:	2200      	movs	r2, #0
 8017a58:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017a5a:	4b2a      	ldr	r3, [pc, #168]	; (8017b04 <ip4_output_if_src+0x154>)
 8017a5c:	881b      	ldrh	r3, [r3, #0]
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f7f6 f9e6 	bl	800de30 <lwip_htons>
 8017a64:	4603      	mov	r3, r0
 8017a66:	461a      	mov	r2, r3
 8017a68:	69fb      	ldr	r3, [r7, #28]
 8017a6a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017a6c:	4b25      	ldr	r3, [pc, #148]	; (8017b04 <ip4_output_if_src+0x154>)
 8017a6e:	881b      	ldrh	r3, [r3, #0]
 8017a70:	3301      	adds	r3, #1
 8017a72:	b29a      	uxth	r2, r3
 8017a74:	4b23      	ldr	r3, [pc, #140]	; (8017b04 <ip4_output_if_src+0x154>)
 8017a76:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017a78:	68bb      	ldr	r3, [r7, #8]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d104      	bne.n	8017a88 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017a7e:	4b22      	ldr	r3, [pc, #136]	; (8017b08 <ip4_output_if_src+0x158>)
 8017a80:	681a      	ldr	r2, [r3, #0]
 8017a82:	69fb      	ldr	r3, [r7, #28]
 8017a84:	60da      	str	r2, [r3, #12]
 8017a86:	e003      	b.n	8017a90 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017a88:	68bb      	ldr	r3, [r7, #8]
 8017a8a:	681a      	ldr	r2, [r3, #0]
 8017a8c:	69fb      	ldr	r3, [r7, #28]
 8017a8e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017a90:	69fb      	ldr	r3, [r7, #28]
 8017a92:	2200      	movs	r2, #0
 8017a94:	729a      	strb	r2, [r3, #10]
 8017a96:	2200      	movs	r2, #0
 8017a98:	72da      	strb	r2, [r3, #11]
 8017a9a:	e00f      	b.n	8017abc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	895b      	ldrh	r3, [r3, #10]
 8017aa0:	2b13      	cmp	r3, #19
 8017aa2:	d802      	bhi.n	8017aaa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017aa4:	f06f 0301 	mvn.w	r3, #1
 8017aa8:	e020      	b.n	8017aec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	685b      	ldr	r3, [r3, #4]
 8017aae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017ab0:	69fb      	ldr	r3, [r7, #28]
 8017ab2:	691b      	ldr	r3, [r3, #16]
 8017ab4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017ab6:	f107 0314 	add.w	r3, r7, #20
 8017aba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017abe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d00c      	beq.n	8017ade <ip4_output_if_src+0x12e>
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	891a      	ldrh	r2, [r3, #8]
 8017ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d906      	bls.n	8017ade <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017ad0:	687a      	ldr	r2, [r7, #4]
 8017ad2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017ad4:	68f8      	ldr	r0, [r7, #12]
 8017ad6:	f000 fddf 	bl	8018698 <ip4_frag>
 8017ada:	4603      	mov	r3, r0
 8017adc:	e006      	b.n	8017aec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ae0:	695b      	ldr	r3, [r3, #20]
 8017ae2:	687a      	ldr	r2, [r7, #4]
 8017ae4:	68f9      	ldr	r1, [r7, #12]
 8017ae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ae8:	4798      	blx	r3
 8017aea:	4603      	mov	r3, r0
}
 8017aec:	4618      	mov	r0, r3
 8017aee:	3720      	adds	r7, #32
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}
 8017af4:	0801c81c 	.word	0x0801c81c
 8017af8:	0801c850 	.word	0x0801c850
 8017afc:	0801c85c 	.word	0x0801c85c
 8017b00:	0801c884 	.word	0x0801c884
 8017b04:	24004256 	.word	0x24004256
 8017b08:	0801d4b4 	.word	0x0801d4b4

08017b0c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017b0c:	b480      	push	{r7}
 8017b0e:	b085      	sub	sp, #20
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
 8017b14:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b20:	d002      	beq.n	8017b28 <ip4_addr_isbroadcast_u32+0x1c>
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d101      	bne.n	8017b2c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017b28:	2301      	movs	r3, #1
 8017b2a:	e02a      	b.n	8017b82 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017b2c:	683b      	ldr	r3, [r7, #0]
 8017b2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017b32:	f003 0302 	and.w	r3, r3, #2
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d101      	bne.n	8017b3e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	e021      	b.n	8017b82 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017b3e:	683b      	ldr	r3, [r7, #0]
 8017b40:	3304      	adds	r3, #4
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	687a      	ldr	r2, [r7, #4]
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d101      	bne.n	8017b4e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	e019      	b.n	8017b82 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017b4e:	68fa      	ldr	r2, [r7, #12]
 8017b50:	683b      	ldr	r3, [r7, #0]
 8017b52:	3304      	adds	r3, #4
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	405a      	eors	r2, r3
 8017b58:	683b      	ldr	r3, [r7, #0]
 8017b5a:	3308      	adds	r3, #8
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	4013      	ands	r3, r2
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d10d      	bne.n	8017b80 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017b64:	683b      	ldr	r3, [r7, #0]
 8017b66:	3308      	adds	r3, #8
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	43da      	mvns	r2, r3
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017b70:	683b      	ldr	r3, [r7, #0]
 8017b72:	3308      	adds	r3, #8
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017b78:	429a      	cmp	r2, r3
 8017b7a:	d101      	bne.n	8017b80 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017b7c:	2301      	movs	r3, #1
 8017b7e:	e000      	b.n	8017b82 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017b80:	2300      	movs	r3, #0
  }
}
 8017b82:	4618      	mov	r0, r3
 8017b84:	3714      	adds	r7, #20
 8017b86:	46bd      	mov	sp, r7
 8017b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8c:	4770      	bx	lr
	...

08017b90 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b082      	sub	sp, #8
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8017b98:	2210      	movs	r2, #16
 8017b9a:	4904      	ldr	r1, [pc, #16]	; (8017bac <ip4addr_ntoa+0x1c>)
 8017b9c:	6878      	ldr	r0, [r7, #4]
 8017b9e:	f000 f807 	bl	8017bb0 <ip4addr_ntoa_r>
 8017ba2:	4603      	mov	r3, r0
}
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	3708      	adds	r7, #8
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}
 8017bac:	24004258 	.word	0x24004258

08017bb0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8017bb0:	b480      	push	{r7}
 8017bb2:	b08d      	sub	sp, #52	; 0x34
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	60f8      	str	r0, [r7, #12]
 8017bb8:	60b9      	str	r1, [r7, #8]
 8017bba:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8017bc6:	68bb      	ldr	r3, [r7, #8]
 8017bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8017bca:	f107 0318 	add.w	r3, r7, #24
 8017bce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017bd6:	e059      	b.n	8017c8c <ip4addr_ntoa_r+0xdc>
    i = 0;
 8017bd8:	2300      	movs	r3, #0
 8017bda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8017bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017be0:	781a      	ldrb	r2, [r3, #0]
 8017be2:	4b33      	ldr	r3, [pc, #204]	; (8017cb0 <ip4addr_ntoa_r+0x100>)
 8017be4:	fba3 1302 	umull	r1, r3, r3, r2
 8017be8:	08d9      	lsrs	r1, r3, #3
 8017bea:	460b      	mov	r3, r1
 8017bec:	009b      	lsls	r3, r3, #2
 8017bee:	440b      	add	r3, r1
 8017bf0:	005b      	lsls	r3, r3, #1
 8017bf2:	1ad3      	subs	r3, r2, r3
 8017bf4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8017bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bf8:	781b      	ldrb	r3, [r3, #0]
 8017bfa:	4a2d      	ldr	r2, [pc, #180]	; (8017cb0 <ip4addr_ntoa_r+0x100>)
 8017bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8017c00:	08db      	lsrs	r3, r3, #3
 8017c02:	b2da      	uxtb	r2, r3
 8017c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c06:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8017c08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c0c:	1c5a      	adds	r2, r3, #1
 8017c0e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8017c12:	4619      	mov	r1, r3
 8017c14:	7ffb      	ldrb	r3, [r7, #31]
 8017c16:	3330      	adds	r3, #48	; 0x30
 8017c18:	b2da      	uxtb	r2, r3
 8017c1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017c1e:	440b      	add	r3, r1
 8017c20:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8017c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c26:	781b      	ldrb	r3, [r3, #0]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d1d8      	bne.n	8017bde <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8017c2c:	e012      	b.n	8017c54 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8017c2e:	6a3b      	ldr	r3, [r7, #32]
 8017c30:	1c5a      	adds	r2, r3, #1
 8017c32:	623a      	str	r2, [r7, #32]
 8017c34:	687a      	ldr	r2, [r7, #4]
 8017c36:	429a      	cmp	r2, r3
 8017c38:	dc01      	bgt.n	8017c3e <ip4addr_ntoa_r+0x8e>
        return NULL;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	e031      	b.n	8017ca2 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8017c3e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c44:	1c59      	adds	r1, r3, #1
 8017c46:	62f9      	str	r1, [r7, #44]	; 0x2c
 8017c48:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8017c4c:	440a      	add	r2, r1
 8017c4e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8017c52:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8017c54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c58:	1e5a      	subs	r2, r3, #1
 8017c5a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d1e5      	bne.n	8017c2e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8017c62:	6a3b      	ldr	r3, [r7, #32]
 8017c64:	1c5a      	adds	r2, r3, #1
 8017c66:	623a      	str	r2, [r7, #32]
 8017c68:	687a      	ldr	r2, [r7, #4]
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	dc01      	bgt.n	8017c72 <ip4addr_ntoa_r+0xc2>
      return NULL;
 8017c6e:	2300      	movs	r3, #0
 8017c70:	e017      	b.n	8017ca2 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8017c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c74:	1c5a      	adds	r2, r3, #1
 8017c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017c78:	222e      	movs	r2, #46	; 0x2e
 8017c7a:	701a      	strb	r2, [r3, #0]
    ap++;
 8017c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c7e:	3301      	adds	r3, #1
 8017c80:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8017c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c86:	3301      	adds	r3, #1
 8017c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c90:	2b03      	cmp	r3, #3
 8017c92:	d9a1      	bls.n	8017bd8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8017c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c96:	3b01      	subs	r3, #1
 8017c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	701a      	strb	r2, [r3, #0]
  return buf;
 8017ca0:	68bb      	ldr	r3, [r7, #8]
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3734      	adds	r7, #52	; 0x34
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cac:	4770      	bx	lr
 8017cae:	bf00      	nop
 8017cb0:	cccccccd 	.word	0xcccccccd

08017cb4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b084      	sub	sp, #16
 8017cb8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017cba:	2300      	movs	r3, #0
 8017cbc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017cbe:	4b12      	ldr	r3, [pc, #72]	; (8017d08 <ip_reass_tmr+0x54>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017cc4:	e018      	b.n	8017cf8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	7fdb      	ldrb	r3, [r3, #31]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d00b      	beq.n	8017ce6 <ip_reass_tmr+0x32>
      r->timer--;
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	7fdb      	ldrb	r3, [r3, #31]
 8017cd2:	3b01      	subs	r3, #1
 8017cd4:	b2da      	uxtb	r2, r3
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	60fb      	str	r3, [r7, #12]
 8017ce4:	e008      	b.n	8017cf8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017cf0:	68b9      	ldr	r1, [r7, #8]
 8017cf2:	6878      	ldr	r0, [r7, #4]
 8017cf4:	f000 f80a 	bl	8017d0c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d1e3      	bne.n	8017cc6 <ip_reass_tmr+0x12>
    }
  }
}
 8017cfe:	bf00      	nop
 8017d00:	bf00      	nop
 8017d02:	3710      	adds	r7, #16
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd80      	pop	{r7, pc}
 8017d08:	24004268 	.word	0x24004268

08017d0c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b088      	sub	sp, #32
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
 8017d14:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017d16:	2300      	movs	r3, #0
 8017d18:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017d1a:	683a      	ldr	r2, [r7, #0]
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	429a      	cmp	r2, r3
 8017d20:	d105      	bne.n	8017d2e <ip_reass_free_complete_datagram+0x22>
 8017d22:	4b45      	ldr	r3, [pc, #276]	; (8017e38 <ip_reass_free_complete_datagram+0x12c>)
 8017d24:	22ab      	movs	r2, #171	; 0xab
 8017d26:	4945      	ldr	r1, [pc, #276]	; (8017e3c <ip_reass_free_complete_datagram+0x130>)
 8017d28:	4845      	ldr	r0, [pc, #276]	; (8017e40 <ip_reass_free_complete_datagram+0x134>)
 8017d2a:	f001 f983 	bl	8019034 <iprintf>
  if (prev != NULL) {
 8017d2e:	683b      	ldr	r3, [r7, #0]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d00a      	beq.n	8017d4a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	687a      	ldr	r2, [r7, #4]
 8017d3a:	429a      	cmp	r2, r3
 8017d3c:	d005      	beq.n	8017d4a <ip_reass_free_complete_datagram+0x3e>
 8017d3e:	4b3e      	ldr	r3, [pc, #248]	; (8017e38 <ip_reass_free_complete_datagram+0x12c>)
 8017d40:	22ad      	movs	r2, #173	; 0xad
 8017d42:	4940      	ldr	r1, [pc, #256]	; (8017e44 <ip_reass_free_complete_datagram+0x138>)
 8017d44:	483e      	ldr	r0, [pc, #248]	; (8017e40 <ip_reass_free_complete_datagram+0x134>)
 8017d46:	f001 f975 	bl	8019034 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	685b      	ldr	r3, [r3, #4]
 8017d4e:	685b      	ldr	r3, [r3, #4]
 8017d50:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017d52:	697b      	ldr	r3, [r7, #20]
 8017d54:	889b      	ldrh	r3, [r3, #4]
 8017d56:	b29b      	uxth	r3, r3
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d12a      	bne.n	8017db2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	685b      	ldr	r3, [r3, #4]
 8017d60:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017d62:	697b      	ldr	r3, [r7, #20]
 8017d64:	681a      	ldr	r2, [r3, #0]
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017d6a:	69bb      	ldr	r3, [r7, #24]
 8017d6c:	6858      	ldr	r0, [r3, #4]
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	3308      	adds	r3, #8
 8017d72:	2214      	movs	r2, #20
 8017d74:	4619      	mov	r1, r3
 8017d76:	f001 f8ec 	bl	8018f52 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017d7a:	2101      	movs	r1, #1
 8017d7c:	69b8      	ldr	r0, [r7, #24]
 8017d7e:	f7ff fbab 	bl	80174d8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017d82:	69b8      	ldr	r0, [r7, #24]
 8017d84:	f7f7 fd8c 	bl	800f8a0 <pbuf_clen>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017d8c:	8bfa      	ldrh	r2, [r7, #30]
 8017d8e:	8a7b      	ldrh	r3, [r7, #18]
 8017d90:	4413      	add	r3, r2
 8017d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d96:	db05      	blt.n	8017da4 <ip_reass_free_complete_datagram+0x98>
 8017d98:	4b27      	ldr	r3, [pc, #156]	; (8017e38 <ip_reass_free_complete_datagram+0x12c>)
 8017d9a:	22bc      	movs	r2, #188	; 0xbc
 8017d9c:	492a      	ldr	r1, [pc, #168]	; (8017e48 <ip_reass_free_complete_datagram+0x13c>)
 8017d9e:	4828      	ldr	r0, [pc, #160]	; (8017e40 <ip_reass_free_complete_datagram+0x134>)
 8017da0:	f001 f948 	bl	8019034 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017da4:	8bfa      	ldrh	r2, [r7, #30]
 8017da6:	8a7b      	ldrh	r3, [r7, #18]
 8017da8:	4413      	add	r3, r2
 8017daa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017dac:	69b8      	ldr	r0, [r7, #24]
 8017dae:	f7f7 fce9 	bl	800f784 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	685b      	ldr	r3, [r3, #4]
 8017db6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017db8:	e01f      	b.n	8017dfa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017dba:	69bb      	ldr	r3, [r7, #24]
 8017dbc:	685b      	ldr	r3, [r3, #4]
 8017dbe:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017dc0:	69bb      	ldr	r3, [r7, #24]
 8017dc2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017dc4:	697b      	ldr	r3, [r7, #20]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017dca:	68f8      	ldr	r0, [r7, #12]
 8017dcc:	f7f7 fd68 	bl	800f8a0 <pbuf_clen>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017dd4:	8bfa      	ldrh	r2, [r7, #30]
 8017dd6:	8a7b      	ldrh	r3, [r7, #18]
 8017dd8:	4413      	add	r3, r2
 8017dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017dde:	db05      	blt.n	8017dec <ip_reass_free_complete_datagram+0xe0>
 8017de0:	4b15      	ldr	r3, [pc, #84]	; (8017e38 <ip_reass_free_complete_datagram+0x12c>)
 8017de2:	22cc      	movs	r2, #204	; 0xcc
 8017de4:	4918      	ldr	r1, [pc, #96]	; (8017e48 <ip_reass_free_complete_datagram+0x13c>)
 8017de6:	4816      	ldr	r0, [pc, #88]	; (8017e40 <ip_reass_free_complete_datagram+0x134>)
 8017de8:	f001 f924 	bl	8019034 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017dec:	8bfa      	ldrh	r2, [r7, #30]
 8017dee:	8a7b      	ldrh	r3, [r7, #18]
 8017df0:	4413      	add	r3, r2
 8017df2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017df4:	68f8      	ldr	r0, [r7, #12]
 8017df6:	f7f7 fcc5 	bl	800f784 <pbuf_free>
  while (p != NULL) {
 8017dfa:	69bb      	ldr	r3, [r7, #24]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d1dc      	bne.n	8017dba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017e00:	6839      	ldr	r1, [r7, #0]
 8017e02:	6878      	ldr	r0, [r7, #4]
 8017e04:	f000 f8c2 	bl	8017f8c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017e08:	4b10      	ldr	r3, [pc, #64]	; (8017e4c <ip_reass_free_complete_datagram+0x140>)
 8017e0a:	881b      	ldrh	r3, [r3, #0]
 8017e0c:	8bfa      	ldrh	r2, [r7, #30]
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	d905      	bls.n	8017e1e <ip_reass_free_complete_datagram+0x112>
 8017e12:	4b09      	ldr	r3, [pc, #36]	; (8017e38 <ip_reass_free_complete_datagram+0x12c>)
 8017e14:	22d2      	movs	r2, #210	; 0xd2
 8017e16:	490e      	ldr	r1, [pc, #56]	; (8017e50 <ip_reass_free_complete_datagram+0x144>)
 8017e18:	4809      	ldr	r0, [pc, #36]	; (8017e40 <ip_reass_free_complete_datagram+0x134>)
 8017e1a:	f001 f90b 	bl	8019034 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017e1e:	4b0b      	ldr	r3, [pc, #44]	; (8017e4c <ip_reass_free_complete_datagram+0x140>)
 8017e20:	881a      	ldrh	r2, [r3, #0]
 8017e22:	8bfb      	ldrh	r3, [r7, #30]
 8017e24:	1ad3      	subs	r3, r2, r3
 8017e26:	b29a      	uxth	r2, r3
 8017e28:	4b08      	ldr	r3, [pc, #32]	; (8017e4c <ip_reass_free_complete_datagram+0x140>)
 8017e2a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017e2c:	8bfb      	ldrh	r3, [r7, #30]
}
 8017e2e:	4618      	mov	r0, r3
 8017e30:	3720      	adds	r7, #32
 8017e32:	46bd      	mov	sp, r7
 8017e34:	bd80      	pop	{r7, pc}
 8017e36:	bf00      	nop
 8017e38:	0801c8b4 	.word	0x0801c8b4
 8017e3c:	0801c8f0 	.word	0x0801c8f0
 8017e40:	0801c8fc 	.word	0x0801c8fc
 8017e44:	0801c924 	.word	0x0801c924
 8017e48:	0801c938 	.word	0x0801c938
 8017e4c:	2400426c 	.word	0x2400426c
 8017e50:	0801c958 	.word	0x0801c958

08017e54 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b08a      	sub	sp, #40	; 0x28
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	6078      	str	r0, [r7, #4]
 8017e5c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017e5e:	2300      	movs	r3, #0
 8017e60:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017e62:	2300      	movs	r3, #0
 8017e64:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017e66:	2300      	movs	r3, #0
 8017e68:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017e72:	4b28      	ldr	r3, [pc, #160]	; (8017f14 <ip_reass_remove_oldest_datagram+0xc0>)
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017e78:	e030      	b.n	8017edc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7c:	695a      	ldr	r2, [r3, #20]
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	68db      	ldr	r3, [r3, #12]
 8017e82:	429a      	cmp	r2, r3
 8017e84:	d10c      	bne.n	8017ea0 <ip_reass_remove_oldest_datagram+0x4c>
 8017e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e88:	699a      	ldr	r2, [r3, #24]
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	691b      	ldr	r3, [r3, #16]
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	d106      	bne.n	8017ea0 <ip_reass_remove_oldest_datagram+0x4c>
 8017e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e94:	899a      	ldrh	r2, [r3, #12]
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	889b      	ldrh	r3, [r3, #4]
 8017e9a:	b29b      	uxth	r3, r3
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	d014      	beq.n	8017eca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017ea0:	693b      	ldr	r3, [r7, #16]
 8017ea2:	3301      	adds	r3, #1
 8017ea4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017ea6:	6a3b      	ldr	r3, [r7, #32]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d104      	bne.n	8017eb6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017eb0:	69fb      	ldr	r3, [r7, #28]
 8017eb2:	61bb      	str	r3, [r7, #24]
 8017eb4:	e009      	b.n	8017eca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eb8:	7fda      	ldrb	r2, [r3, #31]
 8017eba:	6a3b      	ldr	r3, [r7, #32]
 8017ebc:	7fdb      	ldrb	r3, [r3, #31]
 8017ebe:	429a      	cmp	r2, r3
 8017ec0:	d803      	bhi.n	8017eca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017ec6:	69fb      	ldr	r3, [r7, #28]
 8017ec8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d001      	beq.n	8017ed6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d1cb      	bne.n	8017e7a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017ee2:	6a3b      	ldr	r3, [r7, #32]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d008      	beq.n	8017efa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017ee8:	69b9      	ldr	r1, [r7, #24]
 8017eea:	6a38      	ldr	r0, [r7, #32]
 8017eec:	f7ff ff0e 	bl	8017d0c <ip_reass_free_complete_datagram>
 8017ef0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017ef2:	697a      	ldr	r2, [r7, #20]
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	4413      	add	r3, r2
 8017ef8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017efa:	697a      	ldr	r2, [r7, #20]
 8017efc:	683b      	ldr	r3, [r7, #0]
 8017efe:	429a      	cmp	r2, r3
 8017f00:	da02      	bge.n	8017f08 <ip_reass_remove_oldest_datagram+0xb4>
 8017f02:	693b      	ldr	r3, [r7, #16]
 8017f04:	2b01      	cmp	r3, #1
 8017f06:	dcac      	bgt.n	8017e62 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017f08:	697b      	ldr	r3, [r7, #20]
}
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	3728      	adds	r7, #40	; 0x28
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}
 8017f12:	bf00      	nop
 8017f14:	24004268 	.word	0x24004268

08017f18 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b084      	sub	sp, #16
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
 8017f20:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017f22:	2004      	movs	r0, #4
 8017f24:	f7f6 fd14 	bl	800e950 <memp_malloc>
 8017f28:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d110      	bne.n	8017f52 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017f30:	6839      	ldr	r1, [r7, #0]
 8017f32:	6878      	ldr	r0, [r7, #4]
 8017f34:	f7ff ff8e 	bl	8017e54 <ip_reass_remove_oldest_datagram>
 8017f38:	4602      	mov	r2, r0
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	4293      	cmp	r3, r2
 8017f3e:	dc03      	bgt.n	8017f48 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017f40:	2004      	movs	r0, #4
 8017f42:	f7f6 fd05 	bl	800e950 <memp_malloc>
 8017f46:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d101      	bne.n	8017f52 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	e016      	b.n	8017f80 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017f52:	2220      	movs	r2, #32
 8017f54:	2100      	movs	r1, #0
 8017f56:	68f8      	ldr	r0, [r7, #12]
 8017f58:	f001 f809 	bl	8018f6e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	220f      	movs	r2, #15
 8017f60:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017f62:	4b09      	ldr	r3, [pc, #36]	; (8017f88 <ip_reass_enqueue_new_datagram+0x70>)
 8017f64:	681a      	ldr	r2, [r3, #0]
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017f6a:	4a07      	ldr	r2, [pc, #28]	; (8017f88 <ip_reass_enqueue_new_datagram+0x70>)
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	3308      	adds	r3, #8
 8017f74:	2214      	movs	r2, #20
 8017f76:	6879      	ldr	r1, [r7, #4]
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f000 ffea 	bl	8018f52 <memcpy>
  return ipr;
 8017f7e:	68fb      	ldr	r3, [r7, #12]
}
 8017f80:	4618      	mov	r0, r3
 8017f82:	3710      	adds	r7, #16
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}
 8017f88:	24004268 	.word	0x24004268

08017f8c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b082      	sub	sp, #8
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
 8017f94:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017f96:	4b10      	ldr	r3, [pc, #64]	; (8017fd8 <ip_reass_dequeue_datagram+0x4c>)
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	687a      	ldr	r2, [r7, #4]
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d104      	bne.n	8017faa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	4a0c      	ldr	r2, [pc, #48]	; (8017fd8 <ip_reass_dequeue_datagram+0x4c>)
 8017fa6:	6013      	str	r3, [r2, #0]
 8017fa8:	e00d      	b.n	8017fc6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d106      	bne.n	8017fbe <ip_reass_dequeue_datagram+0x32>
 8017fb0:	4b0a      	ldr	r3, [pc, #40]	; (8017fdc <ip_reass_dequeue_datagram+0x50>)
 8017fb2:	f240 1245 	movw	r2, #325	; 0x145
 8017fb6:	490a      	ldr	r1, [pc, #40]	; (8017fe0 <ip_reass_dequeue_datagram+0x54>)
 8017fb8:	480a      	ldr	r0, [pc, #40]	; (8017fe4 <ip_reass_dequeue_datagram+0x58>)
 8017fba:	f001 f83b 	bl	8019034 <iprintf>
    prev->next = ipr->next;
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	681a      	ldr	r2, [r3, #0]
 8017fc2:	683b      	ldr	r3, [r7, #0]
 8017fc4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017fc6:	6879      	ldr	r1, [r7, #4]
 8017fc8:	2004      	movs	r0, #4
 8017fca:	f7f6 fd37 	bl	800ea3c <memp_free>
}
 8017fce:	bf00      	nop
 8017fd0:	3708      	adds	r7, #8
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd80      	pop	{r7, pc}
 8017fd6:	bf00      	nop
 8017fd8:	24004268 	.word	0x24004268
 8017fdc:	0801c8b4 	.word	0x0801c8b4
 8017fe0:	0801c97c 	.word	0x0801c97c
 8017fe4:	0801c8fc 	.word	0x0801c8fc

08017fe8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b08c      	sub	sp, #48	; 0x30
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	60f8      	str	r0, [r7, #12]
 8017ff0:	60b9      	str	r1, [r7, #8]
 8017ff2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017ff8:	2301      	movs	r3, #1
 8017ffa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017ffc:	68bb      	ldr	r3, [r7, #8]
 8017ffe:	685b      	ldr	r3, [r3, #4]
 8018000:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018002:	69fb      	ldr	r3, [r7, #28]
 8018004:	885b      	ldrh	r3, [r3, #2]
 8018006:	b29b      	uxth	r3, r3
 8018008:	4618      	mov	r0, r3
 801800a:	f7f5 ff11 	bl	800de30 <lwip_htons>
 801800e:	4603      	mov	r3, r0
 8018010:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018012:	69fb      	ldr	r3, [r7, #28]
 8018014:	781b      	ldrb	r3, [r3, #0]
 8018016:	f003 030f 	and.w	r3, r3, #15
 801801a:	b2db      	uxtb	r3, r3
 801801c:	009b      	lsls	r3, r3, #2
 801801e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018020:	7e7b      	ldrb	r3, [r7, #25]
 8018022:	b29b      	uxth	r3, r3
 8018024:	8b7a      	ldrh	r2, [r7, #26]
 8018026:	429a      	cmp	r2, r3
 8018028:	d202      	bcs.n	8018030 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801802a:	f04f 33ff 	mov.w	r3, #4294967295
 801802e:	e135      	b.n	801829c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018030:	7e7b      	ldrb	r3, [r7, #25]
 8018032:	b29b      	uxth	r3, r3
 8018034:	8b7a      	ldrh	r2, [r7, #26]
 8018036:	1ad3      	subs	r3, r2, r3
 8018038:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801803a:	69fb      	ldr	r3, [r7, #28]
 801803c:	88db      	ldrh	r3, [r3, #6]
 801803e:	b29b      	uxth	r3, r3
 8018040:	4618      	mov	r0, r3
 8018042:	f7f5 fef5 	bl	800de30 <lwip_htons>
 8018046:	4603      	mov	r3, r0
 8018048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801804c:	b29b      	uxth	r3, r3
 801804e:	00db      	lsls	r3, r3, #3
 8018050:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018052:	68bb      	ldr	r3, [r7, #8]
 8018054:	685b      	ldr	r3, [r3, #4]
 8018056:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801805a:	2200      	movs	r2, #0
 801805c:	701a      	strb	r2, [r3, #0]
 801805e:	2200      	movs	r2, #0
 8018060:	705a      	strb	r2, [r3, #1]
 8018062:	2200      	movs	r2, #0
 8018064:	709a      	strb	r2, [r3, #2]
 8018066:	2200      	movs	r2, #0
 8018068:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801806c:	8afa      	ldrh	r2, [r7, #22]
 801806e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018070:	8afa      	ldrh	r2, [r7, #22]
 8018072:	8b7b      	ldrh	r3, [r7, #26]
 8018074:	4413      	add	r3, r2
 8018076:	b29a      	uxth	r2, r3
 8018078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801807a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801807c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801807e:	88db      	ldrh	r3, [r3, #6]
 8018080:	b29b      	uxth	r3, r3
 8018082:	8afa      	ldrh	r2, [r7, #22]
 8018084:	429a      	cmp	r2, r3
 8018086:	d902      	bls.n	801808e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018088:	f04f 33ff 	mov.w	r3, #4294967295
 801808c:	e106      	b.n	801829c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	685b      	ldr	r3, [r3, #4]
 8018092:	627b      	str	r3, [r7, #36]	; 0x24
 8018094:	e068      	b.n	8018168 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018098:	685b      	ldr	r3, [r3, #4]
 801809a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801809c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801809e:	889b      	ldrh	r3, [r3, #4]
 80180a0:	b29a      	uxth	r2, r3
 80180a2:	693b      	ldr	r3, [r7, #16]
 80180a4:	889b      	ldrh	r3, [r3, #4]
 80180a6:	b29b      	uxth	r3, r3
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d235      	bcs.n	8018118 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80180ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80180b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d020      	beq.n	80180fa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80180b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ba:	889b      	ldrh	r3, [r3, #4]
 80180bc:	b29a      	uxth	r2, r3
 80180be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180c0:	88db      	ldrh	r3, [r3, #6]
 80180c2:	b29b      	uxth	r3, r3
 80180c4:	429a      	cmp	r2, r3
 80180c6:	d307      	bcc.n	80180d8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80180c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ca:	88db      	ldrh	r3, [r3, #6]
 80180cc:	b29a      	uxth	r2, r3
 80180ce:	693b      	ldr	r3, [r7, #16]
 80180d0:	889b      	ldrh	r3, [r3, #4]
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	429a      	cmp	r2, r3
 80180d6:	d902      	bls.n	80180de <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80180d8:	f04f 33ff 	mov.w	r3, #4294967295
 80180dc:	e0de      	b.n	801829c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80180de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180e0:	68ba      	ldr	r2, [r7, #8]
 80180e2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80180e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180e6:	88db      	ldrh	r3, [r3, #6]
 80180e8:	b29a      	uxth	r2, r3
 80180ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ec:	889b      	ldrh	r3, [r3, #4]
 80180ee:	b29b      	uxth	r3, r3
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d03d      	beq.n	8018170 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80180f4:	2300      	movs	r3, #0
 80180f6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80180f8:	e03a      	b.n	8018170 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80180fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180fc:	88db      	ldrh	r3, [r3, #6]
 80180fe:	b29a      	uxth	r2, r3
 8018100:	693b      	ldr	r3, [r7, #16]
 8018102:	889b      	ldrh	r3, [r3, #4]
 8018104:	b29b      	uxth	r3, r3
 8018106:	429a      	cmp	r2, r3
 8018108:	d902      	bls.n	8018110 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801810a:	f04f 33ff 	mov.w	r3, #4294967295
 801810e:	e0c5      	b.n	801829c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	68ba      	ldr	r2, [r7, #8]
 8018114:	605a      	str	r2, [r3, #4]
      break;
 8018116:	e02b      	b.n	8018170 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801811a:	889b      	ldrh	r3, [r3, #4]
 801811c:	b29a      	uxth	r2, r3
 801811e:	693b      	ldr	r3, [r7, #16]
 8018120:	889b      	ldrh	r3, [r3, #4]
 8018122:	b29b      	uxth	r3, r3
 8018124:	429a      	cmp	r2, r3
 8018126:	d102      	bne.n	801812e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018128:	f04f 33ff 	mov.w	r3, #4294967295
 801812c:	e0b6      	b.n	801829c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018130:	889b      	ldrh	r3, [r3, #4]
 8018132:	b29a      	uxth	r2, r3
 8018134:	693b      	ldr	r3, [r7, #16]
 8018136:	88db      	ldrh	r3, [r3, #6]
 8018138:	b29b      	uxth	r3, r3
 801813a:	429a      	cmp	r2, r3
 801813c:	d202      	bcs.n	8018144 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801813e:	f04f 33ff 	mov.w	r3, #4294967295
 8018142:	e0ab      	b.n	801829c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018146:	2b00      	cmp	r3, #0
 8018148:	d009      	beq.n	801815e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801814c:	88db      	ldrh	r3, [r3, #6]
 801814e:	b29a      	uxth	r2, r3
 8018150:	693b      	ldr	r3, [r7, #16]
 8018152:	889b      	ldrh	r3, [r3, #4]
 8018154:	b29b      	uxth	r3, r3
 8018156:	429a      	cmp	r2, r3
 8018158:	d001      	beq.n	801815e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801815a:	2300      	movs	r3, #0
 801815c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801815e:	693b      	ldr	r3, [r7, #16]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018164:	693b      	ldr	r3, [r7, #16]
 8018166:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801816a:	2b00      	cmp	r3, #0
 801816c:	d193      	bne.n	8018096 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801816e:	e000      	b.n	8018172 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018170:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018174:	2b00      	cmp	r3, #0
 8018176:	d12d      	bne.n	80181d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801817a:	2b00      	cmp	r3, #0
 801817c:	d01c      	beq.n	80181b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018180:	88db      	ldrh	r3, [r3, #6]
 8018182:	b29a      	uxth	r2, r3
 8018184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018186:	889b      	ldrh	r3, [r3, #4]
 8018188:	b29b      	uxth	r3, r3
 801818a:	429a      	cmp	r2, r3
 801818c:	d906      	bls.n	801819c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801818e:	4b45      	ldr	r3, [pc, #276]	; (80182a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018190:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018194:	4944      	ldr	r1, [pc, #272]	; (80182a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018196:	4845      	ldr	r0, [pc, #276]	; (80182ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018198:	f000 ff4c 	bl	8019034 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801819e:	68ba      	ldr	r2, [r7, #8]
 80181a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80181a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a4:	88db      	ldrh	r3, [r3, #6]
 80181a6:	b29a      	uxth	r2, r3
 80181a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181aa:	889b      	ldrh	r3, [r3, #4]
 80181ac:	b29b      	uxth	r3, r3
 80181ae:	429a      	cmp	r2, r3
 80181b0:	d010      	beq.n	80181d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80181b2:	2300      	movs	r3, #0
 80181b4:	623b      	str	r3, [r7, #32]
 80181b6:	e00d      	b.n	80181d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	685b      	ldr	r3, [r3, #4]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d006      	beq.n	80181ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80181c0:	4b38      	ldr	r3, [pc, #224]	; (80182a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80181c2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80181c6:	493a      	ldr	r1, [pc, #232]	; (80182b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80181c8:	4838      	ldr	r0, [pc, #224]	; (80182ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80181ca:	f000 ff33 	bl	8019034 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	68ba      	ldr	r2, [r7, #8]
 80181d2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d105      	bne.n	80181e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	7f9b      	ldrb	r3, [r3, #30]
 80181de:	f003 0301 	and.w	r3, r3, #1
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d059      	beq.n	801829a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80181e6:	6a3b      	ldr	r3, [r7, #32]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d04f      	beq.n	801828c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	685b      	ldr	r3, [r3, #4]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d006      	beq.n	8018202 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	685b      	ldr	r3, [r3, #4]
 80181f8:	685b      	ldr	r3, [r3, #4]
 80181fa:	889b      	ldrh	r3, [r3, #4]
 80181fc:	b29b      	uxth	r3, r3
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d002      	beq.n	8018208 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018202:	2300      	movs	r3, #0
 8018204:	623b      	str	r3, [r7, #32]
 8018206:	e041      	b.n	801828c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801820a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018212:	e012      	b.n	801823a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018216:	685b      	ldr	r3, [r3, #4]
 8018218:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801821c:	88db      	ldrh	r3, [r3, #6]
 801821e:	b29a      	uxth	r2, r3
 8018220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018222:	889b      	ldrh	r3, [r3, #4]
 8018224:	b29b      	uxth	r3, r3
 8018226:	429a      	cmp	r2, r3
 8018228:	d002      	beq.n	8018230 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801822a:	2300      	movs	r3, #0
 801822c:	623b      	str	r3, [r7, #32]
            break;
 801822e:	e007      	b.n	8018240 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018232:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801823c:	2b00      	cmp	r3, #0
 801823e:	d1e9      	bne.n	8018214 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018240:	6a3b      	ldr	r3, [r7, #32]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d022      	beq.n	801828c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	685b      	ldr	r3, [r3, #4]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d106      	bne.n	801825c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801824e:	4b15      	ldr	r3, [pc, #84]	; (80182a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018250:	f240 12df 	movw	r2, #479	; 0x1df
 8018254:	4917      	ldr	r1, [pc, #92]	; (80182b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018256:	4815      	ldr	r0, [pc, #84]	; (80182ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018258:	f000 feec 	bl	8019034 <iprintf>
          LWIP_ASSERT("sanity check",
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	685b      	ldr	r3, [r3, #4]
 8018260:	685b      	ldr	r3, [r3, #4]
 8018262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018264:	429a      	cmp	r2, r3
 8018266:	d106      	bne.n	8018276 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018268:	4b0e      	ldr	r3, [pc, #56]	; (80182a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801826a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801826e:	4911      	ldr	r1, [pc, #68]	; (80182b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018270:	480e      	ldr	r0, [pc, #56]	; (80182ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018272:	f000 fedf 	bl	8019034 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d006      	beq.n	801828c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801827e:	4b09      	ldr	r3, [pc, #36]	; (80182a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018280:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018284:	490c      	ldr	r1, [pc, #48]	; (80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018286:	4809      	ldr	r0, [pc, #36]	; (80182ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018288:	f000 fed4 	bl	8019034 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801828c:	6a3b      	ldr	r3, [r7, #32]
 801828e:	2b00      	cmp	r3, #0
 8018290:	bf14      	ite	ne
 8018292:	2301      	movne	r3, #1
 8018294:	2300      	moveq	r3, #0
 8018296:	b2db      	uxtb	r3, r3
 8018298:	e000      	b.n	801829c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801829a:	2300      	movs	r3, #0
}
 801829c:	4618      	mov	r0, r3
 801829e:	3730      	adds	r7, #48	; 0x30
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}
 80182a4:	0801c8b4 	.word	0x0801c8b4
 80182a8:	0801c998 	.word	0x0801c998
 80182ac:	0801c8fc 	.word	0x0801c8fc
 80182b0:	0801c9b8 	.word	0x0801c9b8
 80182b4:	0801c9f0 	.word	0x0801c9f0
 80182b8:	0801ca00 	.word	0x0801ca00

080182bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b08e      	sub	sp, #56	; 0x38
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	685b      	ldr	r3, [r3, #4]
 80182c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80182ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182cc:	781b      	ldrb	r3, [r3, #0]
 80182ce:	f003 030f 	and.w	r3, r3, #15
 80182d2:	b2db      	uxtb	r3, r3
 80182d4:	009b      	lsls	r3, r3, #2
 80182d6:	b2db      	uxtb	r3, r3
 80182d8:	2b14      	cmp	r3, #20
 80182da:	f040 8167 	bne.w	80185ac <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80182de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182e0:	88db      	ldrh	r3, [r3, #6]
 80182e2:	b29b      	uxth	r3, r3
 80182e4:	4618      	mov	r0, r3
 80182e6:	f7f5 fda3 	bl	800de30 <lwip_htons>
 80182ea:	4603      	mov	r3, r0
 80182ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80182f0:	b29b      	uxth	r3, r3
 80182f2:	00db      	lsls	r3, r3, #3
 80182f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80182f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182f8:	885b      	ldrh	r3, [r3, #2]
 80182fa:	b29b      	uxth	r3, r3
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7f5 fd97 	bl	800de30 <lwip_htons>
 8018302:	4603      	mov	r3, r0
 8018304:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018308:	781b      	ldrb	r3, [r3, #0]
 801830a:	f003 030f 	and.w	r3, r3, #15
 801830e:	b2db      	uxtb	r3, r3
 8018310:	009b      	lsls	r3, r3, #2
 8018312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018316:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801831a:	b29b      	uxth	r3, r3
 801831c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801831e:	429a      	cmp	r2, r3
 8018320:	f0c0 8146 	bcc.w	80185b0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018324:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018328:	b29b      	uxth	r3, r3
 801832a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801832c:	1ad3      	subs	r3, r2, r3
 801832e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018330:	6878      	ldr	r0, [r7, #4]
 8018332:	f7f7 fab5 	bl	800f8a0 <pbuf_clen>
 8018336:	4603      	mov	r3, r0
 8018338:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801833a:	4b9f      	ldr	r3, [pc, #636]	; (80185b8 <ip4_reass+0x2fc>)
 801833c:	881b      	ldrh	r3, [r3, #0]
 801833e:	461a      	mov	r2, r3
 8018340:	8c3b      	ldrh	r3, [r7, #32]
 8018342:	4413      	add	r3, r2
 8018344:	2b0a      	cmp	r3, #10
 8018346:	dd10      	ble.n	801836a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018348:	8c3b      	ldrh	r3, [r7, #32]
 801834a:	4619      	mov	r1, r3
 801834c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801834e:	f7ff fd81 	bl	8017e54 <ip_reass_remove_oldest_datagram>
 8018352:	4603      	mov	r3, r0
 8018354:	2b00      	cmp	r3, #0
 8018356:	f000 812d 	beq.w	80185b4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801835a:	4b97      	ldr	r3, [pc, #604]	; (80185b8 <ip4_reass+0x2fc>)
 801835c:	881b      	ldrh	r3, [r3, #0]
 801835e:	461a      	mov	r2, r3
 8018360:	8c3b      	ldrh	r3, [r7, #32]
 8018362:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018364:	2b0a      	cmp	r3, #10
 8018366:	f300 8125 	bgt.w	80185b4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801836a:	4b94      	ldr	r3, [pc, #592]	; (80185bc <ip4_reass+0x300>)
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	633b      	str	r3, [r7, #48]	; 0x30
 8018370:	e015      	b.n	801839e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018374:	695a      	ldr	r2, [r3, #20]
 8018376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018378:	68db      	ldr	r3, [r3, #12]
 801837a:	429a      	cmp	r2, r3
 801837c:	d10c      	bne.n	8018398 <ip4_reass+0xdc>
 801837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018380:	699a      	ldr	r2, [r3, #24]
 8018382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018384:	691b      	ldr	r3, [r3, #16]
 8018386:	429a      	cmp	r2, r3
 8018388:	d106      	bne.n	8018398 <ip4_reass+0xdc>
 801838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801838c:	899a      	ldrh	r2, [r3, #12]
 801838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018390:	889b      	ldrh	r3, [r3, #4]
 8018392:	b29b      	uxth	r3, r3
 8018394:	429a      	cmp	r2, r3
 8018396:	d006      	beq.n	80183a6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	633b      	str	r3, [r7, #48]	; 0x30
 801839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d1e6      	bne.n	8018372 <ip4_reass+0xb6>
 80183a4:	e000      	b.n	80183a8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80183a6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80183a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d109      	bne.n	80183c2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80183ae:	8c3b      	ldrh	r3, [r7, #32]
 80183b0:	4619      	mov	r1, r3
 80183b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80183b4:	f7ff fdb0 	bl	8017f18 <ip_reass_enqueue_new_datagram>
 80183b8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80183ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d11c      	bne.n	80183fa <ip4_reass+0x13e>
      goto nullreturn;
 80183c0:	e109      	b.n	80185d6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80183c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183c4:	88db      	ldrh	r3, [r3, #6]
 80183c6:	b29b      	uxth	r3, r3
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7f5 fd31 	bl	800de30 <lwip_htons>
 80183ce:	4603      	mov	r3, r0
 80183d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d110      	bne.n	80183fa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80183d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183da:	89db      	ldrh	r3, [r3, #14]
 80183dc:	4618      	mov	r0, r3
 80183de:	f7f5 fd27 	bl	800de30 <lwip_htons>
 80183e2:	4603      	mov	r3, r0
 80183e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d006      	beq.n	80183fa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80183ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ee:	3308      	adds	r3, #8
 80183f0:	2214      	movs	r2, #20
 80183f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80183f4:	4618      	mov	r0, r3
 80183f6:	f000 fdac 	bl	8018f52 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80183fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183fc:	88db      	ldrh	r3, [r3, #6]
 80183fe:	b29b      	uxth	r3, r3
 8018400:	f003 0320 	and.w	r3, r3, #32
 8018404:	2b00      	cmp	r3, #0
 8018406:	bf0c      	ite	eq
 8018408:	2301      	moveq	r3, #1
 801840a:	2300      	movne	r3, #0
 801840c:	b2db      	uxtb	r3, r3
 801840e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018410:	69fb      	ldr	r3, [r7, #28]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d00e      	beq.n	8018434 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018416:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801841a:	4413      	add	r3, r2
 801841c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801841e:	8b7a      	ldrh	r2, [r7, #26]
 8018420:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018422:	429a      	cmp	r2, r3
 8018424:	f0c0 80a0 	bcc.w	8018568 <ip4_reass+0x2ac>
 8018428:	8b7b      	ldrh	r3, [r7, #26]
 801842a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801842e:	4293      	cmp	r3, r2
 8018430:	f200 809a 	bhi.w	8018568 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018434:	69fa      	ldr	r2, [r7, #28]
 8018436:	6879      	ldr	r1, [r7, #4]
 8018438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801843a:	f7ff fdd5 	bl	8017fe8 <ip_reass_chain_frag_into_datagram_and_validate>
 801843e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018440:	697b      	ldr	r3, [r7, #20]
 8018442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018446:	f000 8091 	beq.w	801856c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801844a:	4b5b      	ldr	r3, [pc, #364]	; (80185b8 <ip4_reass+0x2fc>)
 801844c:	881a      	ldrh	r2, [r3, #0]
 801844e:	8c3b      	ldrh	r3, [r7, #32]
 8018450:	4413      	add	r3, r2
 8018452:	b29a      	uxth	r2, r3
 8018454:	4b58      	ldr	r3, [pc, #352]	; (80185b8 <ip4_reass+0x2fc>)
 8018456:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018458:	69fb      	ldr	r3, [r7, #28]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d00d      	beq.n	801847a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801845e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018462:	4413      	add	r3, r2
 8018464:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018468:	8a7a      	ldrh	r2, [r7, #18]
 801846a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801846e:	7f9b      	ldrb	r3, [r3, #30]
 8018470:	f043 0301 	orr.w	r3, r3, #1
 8018474:	b2da      	uxtb	r2, r3
 8018476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018478:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801847a:	697b      	ldr	r3, [r7, #20]
 801847c:	2b01      	cmp	r3, #1
 801847e:	d171      	bne.n	8018564 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018482:	8b9b      	ldrh	r3, [r3, #28]
 8018484:	3314      	adds	r3, #20
 8018486:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801848a:	685b      	ldr	r3, [r3, #4]
 801848c:	685b      	ldr	r3, [r3, #4]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018494:	685b      	ldr	r3, [r3, #4]
 8018496:	685b      	ldr	r3, [r3, #4]
 8018498:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801849c:	3308      	adds	r3, #8
 801849e:	2214      	movs	r2, #20
 80184a0:	4619      	mov	r1, r3
 80184a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184a4:	f000 fd55 	bl	8018f52 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80184a8:	8a3b      	ldrh	r3, [r7, #16]
 80184aa:	4618      	mov	r0, r3
 80184ac:	f7f5 fcc0 	bl	800de30 <lwip_htons>
 80184b0:	4603      	mov	r3, r0
 80184b2:	461a      	mov	r2, r3
 80184b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80184b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ba:	2200      	movs	r2, #0
 80184bc:	719a      	strb	r2, [r3, #6]
 80184be:	2200      	movs	r2, #0
 80184c0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80184c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184c4:	2200      	movs	r2, #0
 80184c6:	729a      	strb	r2, [r3, #10]
 80184c8:	2200      	movs	r2, #0
 80184ca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80184cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184ce:	685b      	ldr	r3, [r3, #4]
 80184d0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80184d2:	e00d      	b.n	80184f0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80184d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184d6:	685b      	ldr	r3, [r3, #4]
 80184d8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80184da:	2114      	movs	r1, #20
 80184dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80184de:	f7f7 f8cb 	bl	800f678 <pbuf_remove_header>
      pbuf_cat(p, r);
 80184e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80184e4:	6878      	ldr	r0, [r7, #4]
 80184e6:	f7f7 fa1b 	bl	800f920 <pbuf_cat>
      r = iprh->next_pbuf;
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80184f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d1ee      	bne.n	80184d4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80184f6:	4b31      	ldr	r3, [pc, #196]	; (80185bc <ip4_reass+0x300>)
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d102      	bne.n	8018506 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018500:	2300      	movs	r3, #0
 8018502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018504:	e010      	b.n	8018528 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018506:	4b2d      	ldr	r3, [pc, #180]	; (80185bc <ip4_reass+0x300>)
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801850c:	e007      	b.n	801851e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018514:	429a      	cmp	r2, r3
 8018516:	d006      	beq.n	8018526 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018520:	2b00      	cmp	r3, #0
 8018522:	d1f4      	bne.n	801850e <ip4_reass+0x252>
 8018524:	e000      	b.n	8018528 <ip4_reass+0x26c>
          break;
 8018526:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018528:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801852a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801852c:	f7ff fd2e 	bl	8017f8c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018530:	6878      	ldr	r0, [r7, #4]
 8018532:	f7f7 f9b5 	bl	800f8a0 <pbuf_clen>
 8018536:	4603      	mov	r3, r0
 8018538:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801853a:	4b1f      	ldr	r3, [pc, #124]	; (80185b8 <ip4_reass+0x2fc>)
 801853c:	881b      	ldrh	r3, [r3, #0]
 801853e:	8c3a      	ldrh	r2, [r7, #32]
 8018540:	429a      	cmp	r2, r3
 8018542:	d906      	bls.n	8018552 <ip4_reass+0x296>
 8018544:	4b1e      	ldr	r3, [pc, #120]	; (80185c0 <ip4_reass+0x304>)
 8018546:	f240 229b 	movw	r2, #667	; 0x29b
 801854a:	491e      	ldr	r1, [pc, #120]	; (80185c4 <ip4_reass+0x308>)
 801854c:	481e      	ldr	r0, [pc, #120]	; (80185c8 <ip4_reass+0x30c>)
 801854e:	f000 fd71 	bl	8019034 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018552:	4b19      	ldr	r3, [pc, #100]	; (80185b8 <ip4_reass+0x2fc>)
 8018554:	881a      	ldrh	r2, [r3, #0]
 8018556:	8c3b      	ldrh	r3, [r7, #32]
 8018558:	1ad3      	subs	r3, r2, r3
 801855a:	b29a      	uxth	r2, r3
 801855c:	4b16      	ldr	r3, [pc, #88]	; (80185b8 <ip4_reass+0x2fc>)
 801855e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	e03c      	b.n	80185de <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018564:	2300      	movs	r3, #0
 8018566:	e03a      	b.n	80185de <ip4_reass+0x322>
      goto nullreturn_ipr;
 8018568:	bf00      	nop
 801856a:	e000      	b.n	801856e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801856c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018570:	2b00      	cmp	r3, #0
 8018572:	d106      	bne.n	8018582 <ip4_reass+0x2c6>
 8018574:	4b12      	ldr	r3, [pc, #72]	; (80185c0 <ip4_reass+0x304>)
 8018576:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801857a:	4914      	ldr	r1, [pc, #80]	; (80185cc <ip4_reass+0x310>)
 801857c:	4812      	ldr	r0, [pc, #72]	; (80185c8 <ip4_reass+0x30c>)
 801857e:	f000 fd59 	bl	8019034 <iprintf>
  if (ipr->p == NULL) {
 8018582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018584:	685b      	ldr	r3, [r3, #4]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d124      	bne.n	80185d4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801858a:	4b0c      	ldr	r3, [pc, #48]	; (80185bc <ip4_reass+0x300>)
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018590:	429a      	cmp	r2, r3
 8018592:	d006      	beq.n	80185a2 <ip4_reass+0x2e6>
 8018594:	4b0a      	ldr	r3, [pc, #40]	; (80185c0 <ip4_reass+0x304>)
 8018596:	f240 22ab 	movw	r2, #683	; 0x2ab
 801859a:	490d      	ldr	r1, [pc, #52]	; (80185d0 <ip4_reass+0x314>)
 801859c:	480a      	ldr	r0, [pc, #40]	; (80185c8 <ip4_reass+0x30c>)
 801859e:	f000 fd49 	bl	8019034 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80185a2:	2100      	movs	r1, #0
 80185a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80185a6:	f7ff fcf1 	bl	8017f8c <ip_reass_dequeue_datagram>
 80185aa:	e014      	b.n	80185d6 <ip4_reass+0x31a>
    goto nullreturn;
 80185ac:	bf00      	nop
 80185ae:	e012      	b.n	80185d6 <ip4_reass+0x31a>
    goto nullreturn;
 80185b0:	bf00      	nop
 80185b2:	e010      	b.n	80185d6 <ip4_reass+0x31a>
      goto nullreturn;
 80185b4:	bf00      	nop
 80185b6:	e00e      	b.n	80185d6 <ip4_reass+0x31a>
 80185b8:	2400426c 	.word	0x2400426c
 80185bc:	24004268 	.word	0x24004268
 80185c0:	0801c8b4 	.word	0x0801c8b4
 80185c4:	0801ca24 	.word	0x0801ca24
 80185c8:	0801c8fc 	.word	0x0801c8fc
 80185cc:	0801ca40 	.word	0x0801ca40
 80185d0:	0801ca4c 	.word	0x0801ca4c
  }

nullreturn:
 80185d4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80185d6:	6878      	ldr	r0, [r7, #4]
 80185d8:	f7f7 f8d4 	bl	800f784 <pbuf_free>
  return NULL;
 80185dc:	2300      	movs	r3, #0
}
 80185de:	4618      	mov	r0, r3
 80185e0:	3738      	adds	r7, #56	; 0x38
 80185e2:	46bd      	mov	sp, r7
 80185e4:	bd80      	pop	{r7, pc}
 80185e6:	bf00      	nop

080185e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80185ec:	2005      	movs	r0, #5
 80185ee:	f7f6 f9af 	bl	800e950 <memp_malloc>
 80185f2:	4603      	mov	r3, r0
}
 80185f4:	4618      	mov	r0, r3
 80185f6:	bd80      	pop	{r7, pc}

080185f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b082      	sub	sp, #8
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d106      	bne.n	8018614 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018606:	4b07      	ldr	r3, [pc, #28]	; (8018624 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018608:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801860c:	4906      	ldr	r1, [pc, #24]	; (8018628 <ip_frag_free_pbuf_custom_ref+0x30>)
 801860e:	4807      	ldr	r0, [pc, #28]	; (801862c <ip_frag_free_pbuf_custom_ref+0x34>)
 8018610:	f000 fd10 	bl	8019034 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018614:	6879      	ldr	r1, [r7, #4]
 8018616:	2005      	movs	r0, #5
 8018618:	f7f6 fa10 	bl	800ea3c <memp_free>
}
 801861c:	bf00      	nop
 801861e:	3708      	adds	r7, #8
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}
 8018624:	0801c8b4 	.word	0x0801c8b4
 8018628:	0801ca6c 	.word	0x0801ca6c
 801862c:	0801c8fc 	.word	0x0801c8fc

08018630 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b084      	sub	sp, #16
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d106      	bne.n	8018650 <ipfrag_free_pbuf_custom+0x20>
 8018642:	4b11      	ldr	r3, [pc, #68]	; (8018688 <ipfrag_free_pbuf_custom+0x58>)
 8018644:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018648:	4910      	ldr	r1, [pc, #64]	; (801868c <ipfrag_free_pbuf_custom+0x5c>)
 801864a:	4811      	ldr	r0, [pc, #68]	; (8018690 <ipfrag_free_pbuf_custom+0x60>)
 801864c:	f000 fcf2 	bl	8019034 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018650:	68fa      	ldr	r2, [r7, #12]
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	429a      	cmp	r2, r3
 8018656:	d006      	beq.n	8018666 <ipfrag_free_pbuf_custom+0x36>
 8018658:	4b0b      	ldr	r3, [pc, #44]	; (8018688 <ipfrag_free_pbuf_custom+0x58>)
 801865a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801865e:	490d      	ldr	r1, [pc, #52]	; (8018694 <ipfrag_free_pbuf_custom+0x64>)
 8018660:	480b      	ldr	r0, [pc, #44]	; (8018690 <ipfrag_free_pbuf_custom+0x60>)
 8018662:	f000 fce7 	bl	8019034 <iprintf>
  if (pcr->original != NULL) {
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	695b      	ldr	r3, [r3, #20]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d004      	beq.n	8018678 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	695b      	ldr	r3, [r3, #20]
 8018672:	4618      	mov	r0, r3
 8018674:	f7f7 f886 	bl	800f784 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018678:	68f8      	ldr	r0, [r7, #12]
 801867a:	f7ff ffbd 	bl	80185f8 <ip_frag_free_pbuf_custom_ref>
}
 801867e:	bf00      	nop
 8018680:	3710      	adds	r7, #16
 8018682:	46bd      	mov	sp, r7
 8018684:	bd80      	pop	{r7, pc}
 8018686:	bf00      	nop
 8018688:	0801c8b4 	.word	0x0801c8b4
 801868c:	0801ca78 	.word	0x0801ca78
 8018690:	0801c8fc 	.word	0x0801c8fc
 8018694:	0801ca84 	.word	0x0801ca84

08018698 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b094      	sub	sp, #80	; 0x50
 801869c:	af02      	add	r7, sp, #8
 801869e:	60f8      	str	r0, [r7, #12]
 80186a0:	60b9      	str	r1, [r7, #8]
 80186a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80186a4:	2300      	movs	r3, #0
 80186a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80186aa:	68bb      	ldr	r3, [r7, #8]
 80186ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80186ae:	3b14      	subs	r3, #20
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	da00      	bge.n	80186b6 <ip4_frag+0x1e>
 80186b4:	3307      	adds	r3, #7
 80186b6:	10db      	asrs	r3, r3, #3
 80186b8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80186ba:	2314      	movs	r3, #20
 80186bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	685b      	ldr	r3, [r3, #4]
 80186c2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80186c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80186c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ca:	781b      	ldrb	r3, [r3, #0]
 80186cc:	f003 030f 	and.w	r3, r3, #15
 80186d0:	b2db      	uxtb	r3, r3
 80186d2:	009b      	lsls	r3, r3, #2
 80186d4:	b2db      	uxtb	r3, r3
 80186d6:	2b14      	cmp	r3, #20
 80186d8:	d002      	beq.n	80186e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80186da:	f06f 0305 	mvn.w	r3, #5
 80186de:	e110      	b.n	8018902 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	895b      	ldrh	r3, [r3, #10]
 80186e4:	2b13      	cmp	r3, #19
 80186e6:	d809      	bhi.n	80186fc <ip4_frag+0x64>
 80186e8:	4b88      	ldr	r3, [pc, #544]	; (801890c <ip4_frag+0x274>)
 80186ea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80186ee:	4988      	ldr	r1, [pc, #544]	; (8018910 <ip4_frag+0x278>)
 80186f0:	4888      	ldr	r0, [pc, #544]	; (8018914 <ip4_frag+0x27c>)
 80186f2:	f000 fc9f 	bl	8019034 <iprintf>
 80186f6:	f06f 0305 	mvn.w	r3, #5
 80186fa:	e102      	b.n	8018902 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80186fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186fe:	88db      	ldrh	r3, [r3, #6]
 8018700:	b29b      	uxth	r3, r3
 8018702:	4618      	mov	r0, r3
 8018704:	f7f5 fb94 	bl	800de30 <lwip_htons>
 8018708:	4603      	mov	r3, r0
 801870a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801870c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801870e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018712:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018716:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801871c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	891b      	ldrh	r3, [r3, #8]
 8018722:	3b14      	subs	r3, #20
 8018724:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018728:	e0e1      	b.n	80188ee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801872a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801872c:	00db      	lsls	r3, r3, #3
 801872e:	b29b      	uxth	r3, r3
 8018730:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018734:	4293      	cmp	r3, r2
 8018736:	bf28      	it	cs
 8018738:	4613      	movcs	r3, r2
 801873a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801873c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018740:	2114      	movs	r1, #20
 8018742:	200e      	movs	r0, #14
 8018744:	f7f6 fd3a 	bl	800f1bc <pbuf_alloc>
 8018748:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801874c:	2b00      	cmp	r3, #0
 801874e:	f000 80d5 	beq.w	80188fc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018754:	895b      	ldrh	r3, [r3, #10]
 8018756:	2b13      	cmp	r3, #19
 8018758:	d806      	bhi.n	8018768 <ip4_frag+0xd0>
 801875a:	4b6c      	ldr	r3, [pc, #432]	; (801890c <ip4_frag+0x274>)
 801875c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018760:	496d      	ldr	r1, [pc, #436]	; (8018918 <ip4_frag+0x280>)
 8018762:	486c      	ldr	r0, [pc, #432]	; (8018914 <ip4_frag+0x27c>)
 8018764:	f000 fc66 	bl	8019034 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801876a:	685b      	ldr	r3, [r3, #4]
 801876c:	2214      	movs	r2, #20
 801876e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018770:	4618      	mov	r0, r3
 8018772:	f000 fbee 	bl	8018f52 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018778:	685b      	ldr	r3, [r3, #4]
 801877a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801877c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801877e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018782:	e064      	b.n	801884e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	895a      	ldrh	r2, [r3, #10]
 8018788:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801878a:	1ad3      	subs	r3, r2, r3
 801878c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	895b      	ldrh	r3, [r3, #10]
 8018792:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018794:	429a      	cmp	r2, r3
 8018796:	d906      	bls.n	80187a6 <ip4_frag+0x10e>
 8018798:	4b5c      	ldr	r3, [pc, #368]	; (801890c <ip4_frag+0x274>)
 801879a:	f240 322d 	movw	r2, #813	; 0x32d
 801879e:	495f      	ldr	r1, [pc, #380]	; (801891c <ip4_frag+0x284>)
 80187a0:	485c      	ldr	r0, [pc, #368]	; (8018914 <ip4_frag+0x27c>)
 80187a2:	f000 fc47 	bl	8019034 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80187a6:	8bfa      	ldrh	r2, [r7, #30]
 80187a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80187ac:	4293      	cmp	r3, r2
 80187ae:	bf28      	it	cs
 80187b0:	4613      	movcs	r3, r2
 80187b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80187b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d105      	bne.n	80187ca <ip4_frag+0x132>
        poff = 0;
 80187be:	2300      	movs	r3, #0
 80187c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	60fb      	str	r3, [r7, #12]
        continue;
 80187c8:	e041      	b.n	801884e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80187ca:	f7ff ff0d 	bl	80185e8 <ip_frag_alloc_pbuf_custom_ref>
 80187ce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80187d0:	69bb      	ldr	r3, [r7, #24]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d103      	bne.n	80187de <ip4_frag+0x146>
        pbuf_free(rambuf);
 80187d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80187d8:	f7f6 ffd4 	bl	800f784 <pbuf_free>
        goto memerr;
 80187dc:	e08f      	b.n	80188fe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80187de:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80187e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80187e6:	4413      	add	r3, r2
 80187e8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80187ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80187f0:	9201      	str	r2, [sp, #4]
 80187f2:	9300      	str	r3, [sp, #0]
 80187f4:	4603      	mov	r3, r0
 80187f6:	2241      	movs	r2, #65	; 0x41
 80187f8:	2000      	movs	r0, #0
 80187fa:	f7f6 fe09 	bl	800f410 <pbuf_alloced_custom>
 80187fe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018800:	697b      	ldr	r3, [r7, #20]
 8018802:	2b00      	cmp	r3, #0
 8018804:	d106      	bne.n	8018814 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018806:	69b8      	ldr	r0, [r7, #24]
 8018808:	f7ff fef6 	bl	80185f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801880c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801880e:	f7f6 ffb9 	bl	800f784 <pbuf_free>
        goto memerr;
 8018812:	e074      	b.n	80188fe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018814:	68f8      	ldr	r0, [r7, #12]
 8018816:	f7f7 f85b 	bl	800f8d0 <pbuf_ref>
      pcr->original = p;
 801881a:	69bb      	ldr	r3, [r7, #24]
 801881c:	68fa      	ldr	r2, [r7, #12]
 801881e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018820:	69bb      	ldr	r3, [r7, #24]
 8018822:	4a3f      	ldr	r2, [pc, #252]	; (8018920 <ip4_frag+0x288>)
 8018824:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018826:	6979      	ldr	r1, [r7, #20]
 8018828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801882a:	f7f7 f879 	bl	800f920 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801882e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018832:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018836:	1ad3      	subs	r3, r2, r3
 8018838:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801883c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018840:	2b00      	cmp	r3, #0
 8018842:	d004      	beq.n	801884e <ip4_frag+0x1b6>
        poff = 0;
 8018844:	2300      	movs	r3, #0
 8018846:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801884e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018852:	2b00      	cmp	r3, #0
 8018854:	d196      	bne.n	8018784 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018856:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018858:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801885c:	4413      	add	r3, r2
 801885e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018860:	68bb      	ldr	r3, [r7, #8]
 8018862:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018864:	f1a3 0213 	sub.w	r2, r3, #19
 8018868:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801886c:	429a      	cmp	r2, r3
 801886e:	bfcc      	ite	gt
 8018870:	2301      	movgt	r3, #1
 8018872:	2300      	movle	r3, #0
 8018874:	b2db      	uxtb	r3, r3
 8018876:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018878:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801887c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018880:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018882:	6a3b      	ldr	r3, [r7, #32]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d002      	beq.n	801888e <ip4_frag+0x1f6>
 8018888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801888a:	2b00      	cmp	r3, #0
 801888c:	d003      	beq.n	8018896 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801888e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018894:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018896:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018898:	4618      	mov	r0, r3
 801889a:	f7f5 fac9 	bl	800de30 <lwip_htons>
 801889e:	4603      	mov	r3, r0
 80188a0:	461a      	mov	r2, r3
 80188a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80188a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80188a8:	3314      	adds	r3, #20
 80188aa:	b29b      	uxth	r3, r3
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7f5 fabf 	bl	800de30 <lwip_htons>
 80188b2:	4603      	mov	r3, r0
 80188b4:	461a      	mov	r2, r3
 80188b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80188ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188bc:	2200      	movs	r2, #0
 80188be:	729a      	strb	r2, [r3, #10]
 80188c0:	2200      	movs	r2, #0
 80188c2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80188c4:	68bb      	ldr	r3, [r7, #8]
 80188c6:	695b      	ldr	r3, [r3, #20]
 80188c8:	687a      	ldr	r2, [r7, #4]
 80188ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80188cc:	68b8      	ldr	r0, [r7, #8]
 80188ce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80188d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80188d2:	f7f6 ff57 	bl	800f784 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80188d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80188da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80188dc:	1ad3      	subs	r3, r2, r3
 80188de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80188e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80188e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80188e8:	4413      	add	r3, r2
 80188ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80188ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	f47f af19 	bne.w	801872a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80188f8:	2300      	movs	r3, #0
 80188fa:	e002      	b.n	8018902 <ip4_frag+0x26a>
      goto memerr;
 80188fc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80188fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018902:	4618      	mov	r0, r3
 8018904:	3748      	adds	r7, #72	; 0x48
 8018906:	46bd      	mov	sp, r7
 8018908:	bd80      	pop	{r7, pc}
 801890a:	bf00      	nop
 801890c:	0801c8b4 	.word	0x0801c8b4
 8018910:	0801ca90 	.word	0x0801ca90
 8018914:	0801c8fc 	.word	0x0801c8fc
 8018918:	0801caac 	.word	0x0801caac
 801891c:	0801cacc 	.word	0x0801cacc
 8018920:	08018631 	.word	0x08018631

08018924 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b086      	sub	sp, #24
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
 801892c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801892e:	230e      	movs	r3, #14
 8018930:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	895b      	ldrh	r3, [r3, #10]
 8018936:	2b0e      	cmp	r3, #14
 8018938:	d96e      	bls.n	8018a18 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	7bdb      	ldrb	r3, [r3, #15]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d106      	bne.n	8018950 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018948:	3301      	adds	r3, #1
 801894a:	b2da      	uxtb	r2, r3
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	685b      	ldr	r3, [r3, #4]
 8018954:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018956:	693b      	ldr	r3, [r7, #16]
 8018958:	7b1a      	ldrb	r2, [r3, #12]
 801895a:	7b5b      	ldrb	r3, [r3, #13]
 801895c:	021b      	lsls	r3, r3, #8
 801895e:	4313      	orrs	r3, r2
 8018960:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018962:	693b      	ldr	r3, [r7, #16]
 8018964:	781b      	ldrb	r3, [r3, #0]
 8018966:	f003 0301 	and.w	r3, r3, #1
 801896a:	2b00      	cmp	r3, #0
 801896c:	d023      	beq.n	80189b6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801896e:	693b      	ldr	r3, [r7, #16]
 8018970:	781b      	ldrb	r3, [r3, #0]
 8018972:	2b01      	cmp	r3, #1
 8018974:	d10f      	bne.n	8018996 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018976:	693b      	ldr	r3, [r7, #16]
 8018978:	785b      	ldrb	r3, [r3, #1]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d11b      	bne.n	80189b6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801897e:	693b      	ldr	r3, [r7, #16]
 8018980:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018982:	2b5e      	cmp	r3, #94	; 0x5e
 8018984:	d117      	bne.n	80189b6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	7b5b      	ldrb	r3, [r3, #13]
 801898a:	f043 0310 	orr.w	r3, r3, #16
 801898e:	b2da      	uxtb	r2, r3
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	735a      	strb	r2, [r3, #13]
 8018994:	e00f      	b.n	80189b6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018996:	693b      	ldr	r3, [r7, #16]
 8018998:	2206      	movs	r2, #6
 801899a:	4928      	ldr	r1, [pc, #160]	; (8018a3c <ethernet_input+0x118>)
 801899c:	4618      	mov	r0, r3
 801899e:	f000 faca 	bl	8018f36 <memcmp>
 80189a2:	4603      	mov	r3, r0
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d106      	bne.n	80189b6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	7b5b      	ldrb	r3, [r3, #13]
 80189ac:	f043 0308 	orr.w	r3, r3, #8
 80189b0:	b2da      	uxtb	r2, r3
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80189b6:	89fb      	ldrh	r3, [r7, #14]
 80189b8:	2b08      	cmp	r3, #8
 80189ba:	d003      	beq.n	80189c4 <ethernet_input+0xa0>
 80189bc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80189c0:	d014      	beq.n	80189ec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80189c2:	e032      	b.n	8018a2a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80189c4:	683b      	ldr	r3, [r7, #0]
 80189c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80189ca:	f003 0308 	and.w	r3, r3, #8
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d024      	beq.n	8018a1c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80189d2:	8afb      	ldrh	r3, [r7, #22]
 80189d4:	4619      	mov	r1, r3
 80189d6:	6878      	ldr	r0, [r7, #4]
 80189d8:	f7f6 fe4e 	bl	800f678 <pbuf_remove_header>
 80189dc:	4603      	mov	r3, r0
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d11e      	bne.n	8018a20 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80189e2:	6839      	ldr	r1, [r7, #0]
 80189e4:	6878      	ldr	r0, [r7, #4]
 80189e6:	f7fe fe95 	bl	8017714 <ip4_input>
      break;
 80189ea:	e013      	b.n	8018a14 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80189ec:	683b      	ldr	r3, [r7, #0]
 80189ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80189f2:	f003 0308 	and.w	r3, r3, #8
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d014      	beq.n	8018a24 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80189fa:	8afb      	ldrh	r3, [r7, #22]
 80189fc:	4619      	mov	r1, r3
 80189fe:	6878      	ldr	r0, [r7, #4]
 8018a00:	f7f6 fe3a 	bl	800f678 <pbuf_remove_header>
 8018a04:	4603      	mov	r3, r0
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d10e      	bne.n	8018a28 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018a0a:	6839      	ldr	r1, [r7, #0]
 8018a0c:	6878      	ldr	r0, [r7, #4]
 8018a0e:	f7fe f80f 	bl	8016a30 <etharp_input>
      break;
 8018a12:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018a14:	2300      	movs	r3, #0
 8018a16:	e00c      	b.n	8018a32 <ethernet_input+0x10e>
    goto free_and_return;
 8018a18:	bf00      	nop
 8018a1a:	e006      	b.n	8018a2a <ethernet_input+0x106>
        goto free_and_return;
 8018a1c:	bf00      	nop
 8018a1e:	e004      	b.n	8018a2a <ethernet_input+0x106>
        goto free_and_return;
 8018a20:	bf00      	nop
 8018a22:	e002      	b.n	8018a2a <ethernet_input+0x106>
        goto free_and_return;
 8018a24:	bf00      	nop
 8018a26:	e000      	b.n	8018a2a <ethernet_input+0x106>
        goto free_and_return;
 8018a28:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018a2a:	6878      	ldr	r0, [r7, #4]
 8018a2c:	f7f6 feaa 	bl	800f784 <pbuf_free>
  return ERR_OK;
 8018a30:	2300      	movs	r3, #0
}
 8018a32:	4618      	mov	r0, r3
 8018a34:	3718      	adds	r7, #24
 8018a36:	46bd      	mov	sp, r7
 8018a38:	bd80      	pop	{r7, pc}
 8018a3a:	bf00      	nop
 8018a3c:	0801d4b8 	.word	0x0801d4b8

08018a40 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b086      	sub	sp, #24
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	60f8      	str	r0, [r7, #12]
 8018a48:	60b9      	str	r1, [r7, #8]
 8018a4a:	607a      	str	r2, [r7, #4]
 8018a4c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018a4e:	8c3b      	ldrh	r3, [r7, #32]
 8018a50:	4618      	mov	r0, r3
 8018a52:	f7f5 f9ed 	bl	800de30 <lwip_htons>
 8018a56:	4603      	mov	r3, r0
 8018a58:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018a5a:	210e      	movs	r1, #14
 8018a5c:	68b8      	ldr	r0, [r7, #8]
 8018a5e:	f7f6 fdfb 	bl	800f658 <pbuf_add_header>
 8018a62:	4603      	mov	r3, r0
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d125      	bne.n	8018ab4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018a68:	68bb      	ldr	r3, [r7, #8]
 8018a6a:	685b      	ldr	r3, [r3, #4]
 8018a6c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018a6e:	693b      	ldr	r3, [r7, #16]
 8018a70:	8afa      	ldrh	r2, [r7, #22]
 8018a72:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018a74:	693b      	ldr	r3, [r7, #16]
 8018a76:	2206      	movs	r2, #6
 8018a78:	6839      	ldr	r1, [r7, #0]
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	f000 fa69 	bl	8018f52 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018a80:	693b      	ldr	r3, [r7, #16]
 8018a82:	3306      	adds	r3, #6
 8018a84:	2206      	movs	r2, #6
 8018a86:	6879      	ldr	r1, [r7, #4]
 8018a88:	4618      	mov	r0, r3
 8018a8a:	f000 fa62 	bl	8018f52 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018a94:	2b06      	cmp	r3, #6
 8018a96:	d006      	beq.n	8018aa6 <ethernet_output+0x66>
 8018a98:	4b0a      	ldr	r3, [pc, #40]	; (8018ac4 <ethernet_output+0x84>)
 8018a9a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018a9e:	490a      	ldr	r1, [pc, #40]	; (8018ac8 <ethernet_output+0x88>)
 8018aa0:	480a      	ldr	r0, [pc, #40]	; (8018acc <ethernet_output+0x8c>)
 8018aa2:	f000 fac7 	bl	8019034 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	699b      	ldr	r3, [r3, #24]
 8018aaa:	68b9      	ldr	r1, [r7, #8]
 8018aac:	68f8      	ldr	r0, [r7, #12]
 8018aae:	4798      	blx	r3
 8018ab0:	4603      	mov	r3, r0
 8018ab2:	e002      	b.n	8018aba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018ab4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018ab6:	f06f 0301 	mvn.w	r3, #1
}
 8018aba:	4618      	mov	r0, r3
 8018abc:	3718      	adds	r7, #24
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	bd80      	pop	{r7, pc}
 8018ac2:	bf00      	nop
 8018ac4:	0801cadc 	.word	0x0801cadc
 8018ac8:	0801cb14 	.word	0x0801cb14
 8018acc:	0801cb48 	.word	0x0801cb48

08018ad0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b086      	sub	sp, #24
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
 8018ad8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018ada:	683b      	ldr	r3, [r7, #0]
 8018adc:	60bb      	str	r3, [r7, #8]
 8018ade:	2304      	movs	r3, #4
 8018ae0:	60fb      	str	r3, [r7, #12]
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	613b      	str	r3, [r7, #16]
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018aea:	f107 0308 	add.w	r3, r7, #8
 8018aee:	2100      	movs	r1, #0
 8018af0:	4618      	mov	r0, r3
 8018af2:	f7f2 fabf 	bl	800b074 <osMessageCreate>
 8018af6:	4602      	mov	r2, r0
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d102      	bne.n	8018b0a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018b04:	f04f 33ff 	mov.w	r3, #4294967295
 8018b08:	e000      	b.n	8018b0c <sys_mbox_new+0x3c>

  return ERR_OK;
 8018b0a:	2300      	movs	r3, #0
}
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	3718      	adds	r7, #24
 8018b10:	46bd      	mov	sp, r7
 8018b12:	bd80      	pop	{r7, pc}

08018b14 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b084      	sub	sp, #16
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
 8018b1c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	6839      	ldr	r1, [r7, #0]
 8018b24:	2200      	movs	r2, #0
 8018b26:	4618      	mov	r0, r3
 8018b28:	f7f2 facc 	bl	800b0c4 <osMessagePut>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d102      	bne.n	8018b38 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018b32:	2300      	movs	r3, #0
 8018b34:	73fb      	strb	r3, [r7, #15]
 8018b36:	e001      	b.n	8018b3c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018b38:	23ff      	movs	r3, #255	; 0xff
 8018b3a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018b40:	4618      	mov	r0, r3
 8018b42:	3710      	adds	r7, #16
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd80      	pop	{r7, pc}

08018b48 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b08c      	sub	sp, #48	; 0x30
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	61f8      	str	r0, [r7, #28]
 8018b50:	61b9      	str	r1, [r7, #24]
 8018b52:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018b54:	f7f2 f8cb 	bl	800acee <osKernelSysTick>
 8018b58:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018b5a:	697b      	ldr	r3, [r7, #20]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d017      	beq.n	8018b90 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018b60:	69fb      	ldr	r3, [r7, #28]
 8018b62:	6819      	ldr	r1, [r3, #0]
 8018b64:	f107 0320 	add.w	r3, r7, #32
 8018b68:	697a      	ldr	r2, [r7, #20]
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	f7f2 faea 	bl	800b144 <osMessageGet>

    if(event.status == osEventMessage)
 8018b70:	6a3b      	ldr	r3, [r7, #32]
 8018b72:	2b10      	cmp	r3, #16
 8018b74:	d109      	bne.n	8018b8a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b78:	461a      	mov	r2, r3
 8018b7a:	69bb      	ldr	r3, [r7, #24]
 8018b7c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018b7e:	f7f2 f8b6 	bl	800acee <osKernelSysTick>
 8018b82:	4602      	mov	r2, r0
 8018b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b86:	1ad3      	subs	r3, r2, r3
 8018b88:	e019      	b.n	8018bbe <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8018b8e:	e016      	b.n	8018bbe <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018b90:	69fb      	ldr	r3, [r7, #28]
 8018b92:	6819      	ldr	r1, [r3, #0]
 8018b94:	463b      	mov	r3, r7
 8018b96:	f04f 32ff 	mov.w	r2, #4294967295
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	f7f2 fad2 	bl	800b144 <osMessageGet>
 8018ba0:	f107 0320 	add.w	r3, r7, #32
 8018ba4:	463a      	mov	r2, r7
 8018ba6:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ba8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bae:	461a      	mov	r2, r3
 8018bb0:	69bb      	ldr	r3, [r7, #24]
 8018bb2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018bb4:	f7f2 f89b 	bl	800acee <osKernelSysTick>
 8018bb8:	4602      	mov	r2, r0
 8018bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bbc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018bbe:	4618      	mov	r0, r3
 8018bc0:	3730      	adds	r7, #48	; 0x30
 8018bc2:	46bd      	mov	sp, r7
 8018bc4:	bd80      	pop	{r7, pc}

08018bc6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018bc6:	b480      	push	{r7}
 8018bc8:	b083      	sub	sp, #12
 8018bca:	af00      	add	r7, sp, #0
 8018bcc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d101      	bne.n	8018bda <sys_mbox_valid+0x14>
    return 0;
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	e000      	b.n	8018bdc <sys_mbox_valid+0x16>
  else
    return 1;
 8018bda:	2301      	movs	r3, #1
}
 8018bdc:	4618      	mov	r0, r3
 8018bde:	370c      	adds	r7, #12
 8018be0:	46bd      	mov	sp, r7
 8018be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be6:	4770      	bx	lr

08018be8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018bec:	4803      	ldr	r0, [pc, #12]	; (8018bfc <sys_init+0x14>)
 8018bee:	f7f2 f8ee 	bl	800adce <osMutexCreate>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	4a02      	ldr	r2, [pc, #8]	; (8018c00 <sys_init+0x18>)
 8018bf6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018bf8:	bf00      	nop
 8018bfa:	bd80      	pop	{r7, pc}
 8018bfc:	0801d4c8 	.word	0x0801d4c8
 8018c00:	2400787c 	.word	0x2400787c

08018c04 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b084      	sub	sp, #16
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018c0c:	2300      	movs	r3, #0
 8018c0e:	60bb      	str	r3, [r7, #8]
 8018c10:	2300      	movs	r3, #0
 8018c12:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018c14:	f107 0308 	add.w	r3, r7, #8
 8018c18:	4618      	mov	r0, r3
 8018c1a:	f7f2 f8d8 	bl	800adce <osMutexCreate>
 8018c1e:	4602      	mov	r2, r0
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d102      	bne.n	8018c32 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8018c30:	e000      	b.n	8018c34 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018c32:	2300      	movs	r3, #0
}
 8018c34:	4618      	mov	r0, r3
 8018c36:	3710      	adds	r7, #16
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	bd80      	pop	{r7, pc}

08018c3c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b082      	sub	sp, #8
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	f04f 31ff 	mov.w	r1, #4294967295
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	f7f2 f8d7 	bl	800ae00 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018c52:	bf00      	nop
 8018c54:	3708      	adds	r7, #8
 8018c56:	46bd      	mov	sp, r7
 8018c58:	bd80      	pop	{r7, pc}

08018c5a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018c5a:	b580      	push	{r7, lr}
 8018c5c:	b082      	sub	sp, #8
 8018c5e:	af00      	add	r7, sp, #0
 8018c60:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	4618      	mov	r0, r3
 8018c68:	f7f2 f918 	bl	800ae9c <osMutexRelease>
}
 8018c6c:	bf00      	nop
 8018c6e:	3708      	adds	r7, #8
 8018c70:	46bd      	mov	sp, r7
 8018c72:	bd80      	pop	{r7, pc}

08018c74 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b08c      	sub	sp, #48	; 0x30
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	60f8      	str	r0, [r7, #12]
 8018c7c:	60b9      	str	r1, [r7, #8]
 8018c7e:	607a      	str	r2, [r7, #4]
 8018c80:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018c82:	f107 0314 	add.w	r3, r7, #20
 8018c86:	2200      	movs	r2, #0
 8018c88:	601a      	str	r2, [r3, #0]
 8018c8a:	605a      	str	r2, [r3, #4]
 8018c8c:	609a      	str	r2, [r3, #8]
 8018c8e:	60da      	str	r2, [r3, #12]
 8018c90:	611a      	str	r2, [r3, #16]
 8018c92:	615a      	str	r2, [r3, #20]
 8018c94:	619a      	str	r2, [r3, #24]
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	617b      	str	r3, [r7, #20]
 8018c9a:	68bb      	ldr	r3, [r7, #8]
 8018c9c:	61bb      	str	r3, [r7, #24]
 8018c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ca0:	b21b      	sxth	r3, r3
 8018ca2:	83bb      	strh	r3, [r7, #28]
 8018ca4:	683b      	ldr	r3, [r7, #0]
 8018ca6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018ca8:	f107 0314 	add.w	r3, r7, #20
 8018cac:	6879      	ldr	r1, [r7, #4]
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f7f2 f82d 	bl	800ad0e <osThreadCreate>
 8018cb4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	3730      	adds	r7, #48	; 0x30
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	bd80      	pop	{r7, pc}
	...

08018cc0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018cc4:	4b04      	ldr	r3, [pc, #16]	; (8018cd8 <sys_arch_protect+0x18>)
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f7f2 f897 	bl	800ae00 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018cd2:	2301      	movs	r3, #1
}
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	bd80      	pop	{r7, pc}
 8018cd8:	2400787c 	.word	0x2400787c

08018cdc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b082      	sub	sp, #8
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018ce4:	4b04      	ldr	r3, [pc, #16]	; (8018cf8 <sys_arch_unprotect+0x1c>)
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	4618      	mov	r0, r3
 8018cea:	f7f2 f8d7 	bl	800ae9c <osMutexRelease>
}
 8018cee:	bf00      	nop
 8018cf0:	3708      	adds	r7, #8
 8018cf2:	46bd      	mov	sp, r7
 8018cf4:	bd80      	pop	{r7, pc}
 8018cf6:	bf00      	nop
 8018cf8:	2400787c 	.word	0x2400787c

08018cfc <std>:
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	b510      	push	{r4, lr}
 8018d00:	4604      	mov	r4, r0
 8018d02:	e9c0 3300 	strd	r3, r3, [r0]
 8018d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018d0a:	6083      	str	r3, [r0, #8]
 8018d0c:	8181      	strh	r1, [r0, #12]
 8018d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8018d10:	81c2      	strh	r2, [r0, #14]
 8018d12:	6183      	str	r3, [r0, #24]
 8018d14:	4619      	mov	r1, r3
 8018d16:	2208      	movs	r2, #8
 8018d18:	305c      	adds	r0, #92	; 0x5c
 8018d1a:	f000 f928 	bl	8018f6e <memset>
 8018d1e:	4b05      	ldr	r3, [pc, #20]	; (8018d34 <std+0x38>)
 8018d20:	6263      	str	r3, [r4, #36]	; 0x24
 8018d22:	4b05      	ldr	r3, [pc, #20]	; (8018d38 <std+0x3c>)
 8018d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8018d26:	4b05      	ldr	r3, [pc, #20]	; (8018d3c <std+0x40>)
 8018d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018d2a:	4b05      	ldr	r3, [pc, #20]	; (8018d40 <std+0x44>)
 8018d2c:	6224      	str	r4, [r4, #32]
 8018d2e:	6323      	str	r3, [r4, #48]	; 0x30
 8018d30:	bd10      	pop	{r4, pc}
 8018d32:	bf00      	nop
 8018d34:	080191d9 	.word	0x080191d9
 8018d38:	080191fb 	.word	0x080191fb
 8018d3c:	08019233 	.word	0x08019233
 8018d40:	08019257 	.word	0x08019257

08018d44 <_cleanup_r>:
 8018d44:	4901      	ldr	r1, [pc, #4]	; (8018d4c <_cleanup_r+0x8>)
 8018d46:	f000 b8af 	b.w	8018ea8 <_fwalk_reent>
 8018d4a:	bf00      	nop
 8018d4c:	08019421 	.word	0x08019421

08018d50 <__sfmoreglue>:
 8018d50:	b570      	push	{r4, r5, r6, lr}
 8018d52:	1e4a      	subs	r2, r1, #1
 8018d54:	2568      	movs	r5, #104	; 0x68
 8018d56:	4355      	muls	r5, r2
 8018d58:	460e      	mov	r6, r1
 8018d5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018d5e:	f000 f90f 	bl	8018f80 <_malloc_r>
 8018d62:	4604      	mov	r4, r0
 8018d64:	b140      	cbz	r0, 8018d78 <__sfmoreglue+0x28>
 8018d66:	2100      	movs	r1, #0
 8018d68:	e9c0 1600 	strd	r1, r6, [r0]
 8018d6c:	300c      	adds	r0, #12
 8018d6e:	60a0      	str	r0, [r4, #8]
 8018d70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018d74:	f000 f8fb 	bl	8018f6e <memset>
 8018d78:	4620      	mov	r0, r4
 8018d7a:	bd70      	pop	{r4, r5, r6, pc}

08018d7c <__sfp_lock_acquire>:
 8018d7c:	4801      	ldr	r0, [pc, #4]	; (8018d84 <__sfp_lock_acquire+0x8>)
 8018d7e:	f000 b8d8 	b.w	8018f32 <__retarget_lock_acquire_recursive>
 8018d82:	bf00      	nop
 8018d84:	24007888 	.word	0x24007888

08018d88 <__sfp_lock_release>:
 8018d88:	4801      	ldr	r0, [pc, #4]	; (8018d90 <__sfp_lock_release+0x8>)
 8018d8a:	f000 b8d3 	b.w	8018f34 <__retarget_lock_release_recursive>
 8018d8e:	bf00      	nop
 8018d90:	24007888 	.word	0x24007888

08018d94 <__sinit_lock_acquire>:
 8018d94:	4801      	ldr	r0, [pc, #4]	; (8018d9c <__sinit_lock_acquire+0x8>)
 8018d96:	f000 b8cc 	b.w	8018f32 <__retarget_lock_acquire_recursive>
 8018d9a:	bf00      	nop
 8018d9c:	24007883 	.word	0x24007883

08018da0 <__sinit_lock_release>:
 8018da0:	4801      	ldr	r0, [pc, #4]	; (8018da8 <__sinit_lock_release+0x8>)
 8018da2:	f000 b8c7 	b.w	8018f34 <__retarget_lock_release_recursive>
 8018da6:	bf00      	nop
 8018da8:	24007883 	.word	0x24007883

08018dac <__sinit>:
 8018dac:	b510      	push	{r4, lr}
 8018dae:	4604      	mov	r4, r0
 8018db0:	f7ff fff0 	bl	8018d94 <__sinit_lock_acquire>
 8018db4:	69a3      	ldr	r3, [r4, #24]
 8018db6:	b11b      	cbz	r3, 8018dc0 <__sinit+0x14>
 8018db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018dbc:	f7ff bff0 	b.w	8018da0 <__sinit_lock_release>
 8018dc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018dc4:	6523      	str	r3, [r4, #80]	; 0x50
 8018dc6:	4b13      	ldr	r3, [pc, #76]	; (8018e14 <__sinit+0x68>)
 8018dc8:	4a13      	ldr	r2, [pc, #76]	; (8018e18 <__sinit+0x6c>)
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8018dce:	42a3      	cmp	r3, r4
 8018dd0:	bf04      	itt	eq
 8018dd2:	2301      	moveq	r3, #1
 8018dd4:	61a3      	streq	r3, [r4, #24]
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	f000 f820 	bl	8018e1c <__sfp>
 8018ddc:	6060      	str	r0, [r4, #4]
 8018dde:	4620      	mov	r0, r4
 8018de0:	f000 f81c 	bl	8018e1c <__sfp>
 8018de4:	60a0      	str	r0, [r4, #8]
 8018de6:	4620      	mov	r0, r4
 8018de8:	f000 f818 	bl	8018e1c <__sfp>
 8018dec:	2200      	movs	r2, #0
 8018dee:	60e0      	str	r0, [r4, #12]
 8018df0:	2104      	movs	r1, #4
 8018df2:	6860      	ldr	r0, [r4, #4]
 8018df4:	f7ff ff82 	bl	8018cfc <std>
 8018df8:	68a0      	ldr	r0, [r4, #8]
 8018dfa:	2201      	movs	r2, #1
 8018dfc:	2109      	movs	r1, #9
 8018dfe:	f7ff ff7d 	bl	8018cfc <std>
 8018e02:	68e0      	ldr	r0, [r4, #12]
 8018e04:	2202      	movs	r2, #2
 8018e06:	2112      	movs	r1, #18
 8018e08:	f7ff ff78 	bl	8018cfc <std>
 8018e0c:	2301      	movs	r3, #1
 8018e0e:	61a3      	str	r3, [r4, #24]
 8018e10:	e7d2      	b.n	8018db8 <__sinit+0xc>
 8018e12:	bf00      	nop
 8018e14:	0801d530 	.word	0x0801d530
 8018e18:	08018d45 	.word	0x08018d45

08018e1c <__sfp>:
 8018e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e1e:	4607      	mov	r7, r0
 8018e20:	f7ff ffac 	bl	8018d7c <__sfp_lock_acquire>
 8018e24:	4b1e      	ldr	r3, [pc, #120]	; (8018ea0 <__sfp+0x84>)
 8018e26:	681e      	ldr	r6, [r3, #0]
 8018e28:	69b3      	ldr	r3, [r6, #24]
 8018e2a:	b913      	cbnz	r3, 8018e32 <__sfp+0x16>
 8018e2c:	4630      	mov	r0, r6
 8018e2e:	f7ff ffbd 	bl	8018dac <__sinit>
 8018e32:	3648      	adds	r6, #72	; 0x48
 8018e34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018e38:	3b01      	subs	r3, #1
 8018e3a:	d503      	bpl.n	8018e44 <__sfp+0x28>
 8018e3c:	6833      	ldr	r3, [r6, #0]
 8018e3e:	b30b      	cbz	r3, 8018e84 <__sfp+0x68>
 8018e40:	6836      	ldr	r6, [r6, #0]
 8018e42:	e7f7      	b.n	8018e34 <__sfp+0x18>
 8018e44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018e48:	b9d5      	cbnz	r5, 8018e80 <__sfp+0x64>
 8018e4a:	4b16      	ldr	r3, [pc, #88]	; (8018ea4 <__sfp+0x88>)
 8018e4c:	60e3      	str	r3, [r4, #12]
 8018e4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018e52:	6665      	str	r5, [r4, #100]	; 0x64
 8018e54:	f000 f86c 	bl	8018f30 <__retarget_lock_init_recursive>
 8018e58:	f7ff ff96 	bl	8018d88 <__sfp_lock_release>
 8018e5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018e60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018e64:	6025      	str	r5, [r4, #0]
 8018e66:	61a5      	str	r5, [r4, #24]
 8018e68:	2208      	movs	r2, #8
 8018e6a:	4629      	mov	r1, r5
 8018e6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018e70:	f000 f87d 	bl	8018f6e <memset>
 8018e74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018e78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018e7c:	4620      	mov	r0, r4
 8018e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e80:	3468      	adds	r4, #104	; 0x68
 8018e82:	e7d9      	b.n	8018e38 <__sfp+0x1c>
 8018e84:	2104      	movs	r1, #4
 8018e86:	4638      	mov	r0, r7
 8018e88:	f7ff ff62 	bl	8018d50 <__sfmoreglue>
 8018e8c:	4604      	mov	r4, r0
 8018e8e:	6030      	str	r0, [r6, #0]
 8018e90:	2800      	cmp	r0, #0
 8018e92:	d1d5      	bne.n	8018e40 <__sfp+0x24>
 8018e94:	f7ff ff78 	bl	8018d88 <__sfp_lock_release>
 8018e98:	230c      	movs	r3, #12
 8018e9a:	603b      	str	r3, [r7, #0]
 8018e9c:	e7ee      	b.n	8018e7c <__sfp+0x60>
 8018e9e:	bf00      	nop
 8018ea0:	0801d530 	.word	0x0801d530
 8018ea4:	ffff0001 	.word	0xffff0001

08018ea8 <_fwalk_reent>:
 8018ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018eac:	4606      	mov	r6, r0
 8018eae:	4688      	mov	r8, r1
 8018eb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018eb4:	2700      	movs	r7, #0
 8018eb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018eba:	f1b9 0901 	subs.w	r9, r9, #1
 8018ebe:	d505      	bpl.n	8018ecc <_fwalk_reent+0x24>
 8018ec0:	6824      	ldr	r4, [r4, #0]
 8018ec2:	2c00      	cmp	r4, #0
 8018ec4:	d1f7      	bne.n	8018eb6 <_fwalk_reent+0xe>
 8018ec6:	4638      	mov	r0, r7
 8018ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ecc:	89ab      	ldrh	r3, [r5, #12]
 8018ece:	2b01      	cmp	r3, #1
 8018ed0:	d907      	bls.n	8018ee2 <_fwalk_reent+0x3a>
 8018ed2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018ed6:	3301      	adds	r3, #1
 8018ed8:	d003      	beq.n	8018ee2 <_fwalk_reent+0x3a>
 8018eda:	4629      	mov	r1, r5
 8018edc:	4630      	mov	r0, r6
 8018ede:	47c0      	blx	r8
 8018ee0:	4307      	orrs	r7, r0
 8018ee2:	3568      	adds	r5, #104	; 0x68
 8018ee4:	e7e9      	b.n	8018eba <_fwalk_reent+0x12>
	...

08018ee8 <__libc_init_array>:
 8018ee8:	b570      	push	{r4, r5, r6, lr}
 8018eea:	4d0d      	ldr	r5, [pc, #52]	; (8018f20 <__libc_init_array+0x38>)
 8018eec:	4c0d      	ldr	r4, [pc, #52]	; (8018f24 <__libc_init_array+0x3c>)
 8018eee:	1b64      	subs	r4, r4, r5
 8018ef0:	10a4      	asrs	r4, r4, #2
 8018ef2:	2600      	movs	r6, #0
 8018ef4:	42a6      	cmp	r6, r4
 8018ef6:	d109      	bne.n	8018f0c <__libc_init_array+0x24>
 8018ef8:	4d0b      	ldr	r5, [pc, #44]	; (8018f28 <__libc_init_array+0x40>)
 8018efa:	4c0c      	ldr	r4, [pc, #48]	; (8018f2c <__libc_init_array+0x44>)
 8018efc:	f000 ffe6 	bl	8019ecc <_init>
 8018f00:	1b64      	subs	r4, r4, r5
 8018f02:	10a4      	asrs	r4, r4, #2
 8018f04:	2600      	movs	r6, #0
 8018f06:	42a6      	cmp	r6, r4
 8018f08:	d105      	bne.n	8018f16 <__libc_init_array+0x2e>
 8018f0a:	bd70      	pop	{r4, r5, r6, pc}
 8018f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018f10:	4798      	blx	r3
 8018f12:	3601      	adds	r6, #1
 8018f14:	e7ee      	b.n	8018ef4 <__libc_init_array+0xc>
 8018f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8018f1a:	4798      	blx	r3
 8018f1c:	3601      	adds	r6, #1
 8018f1e:	e7f2      	b.n	8018f06 <__libc_init_array+0x1e>
 8018f20:	0801d624 	.word	0x0801d624
 8018f24:	0801d624 	.word	0x0801d624
 8018f28:	0801d624 	.word	0x0801d624
 8018f2c:	0801d628 	.word	0x0801d628

08018f30 <__retarget_lock_init_recursive>:
 8018f30:	4770      	bx	lr

08018f32 <__retarget_lock_acquire_recursive>:
 8018f32:	4770      	bx	lr

08018f34 <__retarget_lock_release_recursive>:
 8018f34:	4770      	bx	lr

08018f36 <memcmp>:
 8018f36:	b530      	push	{r4, r5, lr}
 8018f38:	3901      	subs	r1, #1
 8018f3a:	2400      	movs	r4, #0
 8018f3c:	42a2      	cmp	r2, r4
 8018f3e:	d101      	bne.n	8018f44 <memcmp+0xe>
 8018f40:	2000      	movs	r0, #0
 8018f42:	e005      	b.n	8018f50 <memcmp+0x1a>
 8018f44:	5d03      	ldrb	r3, [r0, r4]
 8018f46:	3401      	adds	r4, #1
 8018f48:	5d0d      	ldrb	r5, [r1, r4]
 8018f4a:	42ab      	cmp	r3, r5
 8018f4c:	d0f6      	beq.n	8018f3c <memcmp+0x6>
 8018f4e:	1b58      	subs	r0, r3, r5
 8018f50:	bd30      	pop	{r4, r5, pc}

08018f52 <memcpy>:
 8018f52:	440a      	add	r2, r1
 8018f54:	4291      	cmp	r1, r2
 8018f56:	f100 33ff 	add.w	r3, r0, #4294967295
 8018f5a:	d100      	bne.n	8018f5e <memcpy+0xc>
 8018f5c:	4770      	bx	lr
 8018f5e:	b510      	push	{r4, lr}
 8018f60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018f68:	4291      	cmp	r1, r2
 8018f6a:	d1f9      	bne.n	8018f60 <memcpy+0xe>
 8018f6c:	bd10      	pop	{r4, pc}

08018f6e <memset>:
 8018f6e:	4402      	add	r2, r0
 8018f70:	4603      	mov	r3, r0
 8018f72:	4293      	cmp	r3, r2
 8018f74:	d100      	bne.n	8018f78 <memset+0xa>
 8018f76:	4770      	bx	lr
 8018f78:	f803 1b01 	strb.w	r1, [r3], #1
 8018f7c:	e7f9      	b.n	8018f72 <memset+0x4>
	...

08018f80 <_malloc_r>:
 8018f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f82:	1ccd      	adds	r5, r1, #3
 8018f84:	f025 0503 	bic.w	r5, r5, #3
 8018f88:	3508      	adds	r5, #8
 8018f8a:	2d0c      	cmp	r5, #12
 8018f8c:	bf38      	it	cc
 8018f8e:	250c      	movcc	r5, #12
 8018f90:	2d00      	cmp	r5, #0
 8018f92:	4606      	mov	r6, r0
 8018f94:	db01      	blt.n	8018f9a <_malloc_r+0x1a>
 8018f96:	42a9      	cmp	r1, r5
 8018f98:	d903      	bls.n	8018fa2 <_malloc_r+0x22>
 8018f9a:	230c      	movs	r3, #12
 8018f9c:	6033      	str	r3, [r6, #0]
 8018f9e:	2000      	movs	r0, #0
 8018fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fa2:	f000 faa5 	bl	80194f0 <__malloc_lock>
 8018fa6:	4921      	ldr	r1, [pc, #132]	; (801902c <_malloc_r+0xac>)
 8018fa8:	680a      	ldr	r2, [r1, #0]
 8018faa:	4614      	mov	r4, r2
 8018fac:	b99c      	cbnz	r4, 8018fd6 <_malloc_r+0x56>
 8018fae:	4f20      	ldr	r7, [pc, #128]	; (8019030 <_malloc_r+0xb0>)
 8018fb0:	683b      	ldr	r3, [r7, #0]
 8018fb2:	b923      	cbnz	r3, 8018fbe <_malloc_r+0x3e>
 8018fb4:	4621      	mov	r1, r4
 8018fb6:	4630      	mov	r0, r6
 8018fb8:	f000 f8fe 	bl	80191b8 <_sbrk_r>
 8018fbc:	6038      	str	r0, [r7, #0]
 8018fbe:	4629      	mov	r1, r5
 8018fc0:	4630      	mov	r0, r6
 8018fc2:	f000 f8f9 	bl	80191b8 <_sbrk_r>
 8018fc6:	1c43      	adds	r3, r0, #1
 8018fc8:	d123      	bne.n	8019012 <_malloc_r+0x92>
 8018fca:	230c      	movs	r3, #12
 8018fcc:	6033      	str	r3, [r6, #0]
 8018fce:	4630      	mov	r0, r6
 8018fd0:	f000 fa94 	bl	80194fc <__malloc_unlock>
 8018fd4:	e7e3      	b.n	8018f9e <_malloc_r+0x1e>
 8018fd6:	6823      	ldr	r3, [r4, #0]
 8018fd8:	1b5b      	subs	r3, r3, r5
 8018fda:	d417      	bmi.n	801900c <_malloc_r+0x8c>
 8018fdc:	2b0b      	cmp	r3, #11
 8018fde:	d903      	bls.n	8018fe8 <_malloc_r+0x68>
 8018fe0:	6023      	str	r3, [r4, #0]
 8018fe2:	441c      	add	r4, r3
 8018fe4:	6025      	str	r5, [r4, #0]
 8018fe6:	e004      	b.n	8018ff2 <_malloc_r+0x72>
 8018fe8:	6863      	ldr	r3, [r4, #4]
 8018fea:	42a2      	cmp	r2, r4
 8018fec:	bf0c      	ite	eq
 8018fee:	600b      	streq	r3, [r1, #0]
 8018ff0:	6053      	strne	r3, [r2, #4]
 8018ff2:	4630      	mov	r0, r6
 8018ff4:	f000 fa82 	bl	80194fc <__malloc_unlock>
 8018ff8:	f104 000b 	add.w	r0, r4, #11
 8018ffc:	1d23      	adds	r3, r4, #4
 8018ffe:	f020 0007 	bic.w	r0, r0, #7
 8019002:	1ac2      	subs	r2, r0, r3
 8019004:	d0cc      	beq.n	8018fa0 <_malloc_r+0x20>
 8019006:	1a1b      	subs	r3, r3, r0
 8019008:	50a3      	str	r3, [r4, r2]
 801900a:	e7c9      	b.n	8018fa0 <_malloc_r+0x20>
 801900c:	4622      	mov	r2, r4
 801900e:	6864      	ldr	r4, [r4, #4]
 8019010:	e7cc      	b.n	8018fac <_malloc_r+0x2c>
 8019012:	1cc4      	adds	r4, r0, #3
 8019014:	f024 0403 	bic.w	r4, r4, #3
 8019018:	42a0      	cmp	r0, r4
 801901a:	d0e3      	beq.n	8018fe4 <_malloc_r+0x64>
 801901c:	1a21      	subs	r1, r4, r0
 801901e:	4630      	mov	r0, r6
 8019020:	f000 f8ca 	bl	80191b8 <_sbrk_r>
 8019024:	3001      	adds	r0, #1
 8019026:	d1dd      	bne.n	8018fe4 <_malloc_r+0x64>
 8019028:	e7cf      	b.n	8018fca <_malloc_r+0x4a>
 801902a:	bf00      	nop
 801902c:	24004270 	.word	0x24004270
 8019030:	24004274 	.word	0x24004274

08019034 <iprintf>:
 8019034:	b40f      	push	{r0, r1, r2, r3}
 8019036:	4b0a      	ldr	r3, [pc, #40]	; (8019060 <iprintf+0x2c>)
 8019038:	b513      	push	{r0, r1, r4, lr}
 801903a:	681c      	ldr	r4, [r3, #0]
 801903c:	b124      	cbz	r4, 8019048 <iprintf+0x14>
 801903e:	69a3      	ldr	r3, [r4, #24]
 8019040:	b913      	cbnz	r3, 8019048 <iprintf+0x14>
 8019042:	4620      	mov	r0, r4
 8019044:	f7ff feb2 	bl	8018dac <__sinit>
 8019048:	ab05      	add	r3, sp, #20
 801904a:	9a04      	ldr	r2, [sp, #16]
 801904c:	68a1      	ldr	r1, [r4, #8]
 801904e:	9301      	str	r3, [sp, #4]
 8019050:	4620      	mov	r0, r4
 8019052:	f000 fad3 	bl	80195fc <_vfiprintf_r>
 8019056:	b002      	add	sp, #8
 8019058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801905c:	b004      	add	sp, #16
 801905e:	4770      	bx	lr
 8019060:	2400003c 	.word	0x2400003c

08019064 <rand>:
 8019064:	4b17      	ldr	r3, [pc, #92]	; (80190c4 <rand+0x60>)
 8019066:	b510      	push	{r4, lr}
 8019068:	681c      	ldr	r4, [r3, #0]
 801906a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801906c:	b9b3      	cbnz	r3, 801909c <rand+0x38>
 801906e:	2018      	movs	r0, #24
 8019070:	f000 fa36 	bl	80194e0 <malloc>
 8019074:	63a0      	str	r0, [r4, #56]	; 0x38
 8019076:	b928      	cbnz	r0, 8019084 <rand+0x20>
 8019078:	4602      	mov	r2, r0
 801907a:	4b13      	ldr	r3, [pc, #76]	; (80190c8 <rand+0x64>)
 801907c:	4813      	ldr	r0, [pc, #76]	; (80190cc <rand+0x68>)
 801907e:	214e      	movs	r1, #78	; 0x4e
 8019080:	f000 f91a 	bl	80192b8 <__assert_func>
 8019084:	4a12      	ldr	r2, [pc, #72]	; (80190d0 <rand+0x6c>)
 8019086:	4b13      	ldr	r3, [pc, #76]	; (80190d4 <rand+0x70>)
 8019088:	e9c0 2300 	strd	r2, r3, [r0]
 801908c:	4b12      	ldr	r3, [pc, #72]	; (80190d8 <rand+0x74>)
 801908e:	6083      	str	r3, [r0, #8]
 8019090:	230b      	movs	r3, #11
 8019092:	8183      	strh	r3, [r0, #12]
 8019094:	2201      	movs	r2, #1
 8019096:	2300      	movs	r3, #0
 8019098:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801909c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801909e:	480f      	ldr	r0, [pc, #60]	; (80190dc <rand+0x78>)
 80190a0:	690a      	ldr	r2, [r1, #16]
 80190a2:	694b      	ldr	r3, [r1, #20]
 80190a4:	4c0e      	ldr	r4, [pc, #56]	; (80190e0 <rand+0x7c>)
 80190a6:	4350      	muls	r0, r2
 80190a8:	fb04 0003 	mla	r0, r4, r3, r0
 80190ac:	fba2 3404 	umull	r3, r4, r2, r4
 80190b0:	1c5a      	adds	r2, r3, #1
 80190b2:	4404      	add	r4, r0
 80190b4:	f144 0000 	adc.w	r0, r4, #0
 80190b8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80190bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80190c0:	bd10      	pop	{r4, pc}
 80190c2:	bf00      	nop
 80190c4:	2400003c 	.word	0x2400003c
 80190c8:	0801d534 	.word	0x0801d534
 80190cc:	0801d54b 	.word	0x0801d54b
 80190d0:	abcd330e 	.word	0xabcd330e
 80190d4:	e66d1234 	.word	0xe66d1234
 80190d8:	0005deec 	.word	0x0005deec
 80190dc:	5851f42d 	.word	0x5851f42d
 80190e0:	4c957f2d 	.word	0x4c957f2d

080190e4 <cleanup_glue>:
 80190e4:	b538      	push	{r3, r4, r5, lr}
 80190e6:	460c      	mov	r4, r1
 80190e8:	6809      	ldr	r1, [r1, #0]
 80190ea:	4605      	mov	r5, r0
 80190ec:	b109      	cbz	r1, 80190f2 <cleanup_glue+0xe>
 80190ee:	f7ff fff9 	bl	80190e4 <cleanup_glue>
 80190f2:	4621      	mov	r1, r4
 80190f4:	4628      	mov	r0, r5
 80190f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80190fa:	f000 ba05 	b.w	8019508 <_free_r>
	...

08019100 <_reclaim_reent>:
 8019100:	4b2c      	ldr	r3, [pc, #176]	; (80191b4 <_reclaim_reent+0xb4>)
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	4283      	cmp	r3, r0
 8019106:	b570      	push	{r4, r5, r6, lr}
 8019108:	4604      	mov	r4, r0
 801910a:	d051      	beq.n	80191b0 <_reclaim_reent+0xb0>
 801910c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801910e:	b143      	cbz	r3, 8019122 <_reclaim_reent+0x22>
 8019110:	68db      	ldr	r3, [r3, #12]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d14a      	bne.n	80191ac <_reclaim_reent+0xac>
 8019116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019118:	6819      	ldr	r1, [r3, #0]
 801911a:	b111      	cbz	r1, 8019122 <_reclaim_reent+0x22>
 801911c:	4620      	mov	r0, r4
 801911e:	f000 f9f3 	bl	8019508 <_free_r>
 8019122:	6961      	ldr	r1, [r4, #20]
 8019124:	b111      	cbz	r1, 801912c <_reclaim_reent+0x2c>
 8019126:	4620      	mov	r0, r4
 8019128:	f000 f9ee 	bl	8019508 <_free_r>
 801912c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801912e:	b111      	cbz	r1, 8019136 <_reclaim_reent+0x36>
 8019130:	4620      	mov	r0, r4
 8019132:	f000 f9e9 	bl	8019508 <_free_r>
 8019136:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019138:	b111      	cbz	r1, 8019140 <_reclaim_reent+0x40>
 801913a:	4620      	mov	r0, r4
 801913c:	f000 f9e4 	bl	8019508 <_free_r>
 8019140:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019142:	b111      	cbz	r1, 801914a <_reclaim_reent+0x4a>
 8019144:	4620      	mov	r0, r4
 8019146:	f000 f9df 	bl	8019508 <_free_r>
 801914a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801914c:	b111      	cbz	r1, 8019154 <_reclaim_reent+0x54>
 801914e:	4620      	mov	r0, r4
 8019150:	f000 f9da 	bl	8019508 <_free_r>
 8019154:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8019156:	b111      	cbz	r1, 801915e <_reclaim_reent+0x5e>
 8019158:	4620      	mov	r0, r4
 801915a:	f000 f9d5 	bl	8019508 <_free_r>
 801915e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019160:	b111      	cbz	r1, 8019168 <_reclaim_reent+0x68>
 8019162:	4620      	mov	r0, r4
 8019164:	f000 f9d0 	bl	8019508 <_free_r>
 8019168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801916a:	b111      	cbz	r1, 8019172 <_reclaim_reent+0x72>
 801916c:	4620      	mov	r0, r4
 801916e:	f000 f9cb 	bl	8019508 <_free_r>
 8019172:	69a3      	ldr	r3, [r4, #24]
 8019174:	b1e3      	cbz	r3, 80191b0 <_reclaim_reent+0xb0>
 8019176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019178:	4620      	mov	r0, r4
 801917a:	4798      	blx	r3
 801917c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801917e:	b1b9      	cbz	r1, 80191b0 <_reclaim_reent+0xb0>
 8019180:	4620      	mov	r0, r4
 8019182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019186:	f7ff bfad 	b.w	80190e4 <cleanup_glue>
 801918a:	5949      	ldr	r1, [r1, r5]
 801918c:	b941      	cbnz	r1, 80191a0 <_reclaim_reent+0xa0>
 801918e:	3504      	adds	r5, #4
 8019190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019192:	2d80      	cmp	r5, #128	; 0x80
 8019194:	68d9      	ldr	r1, [r3, #12]
 8019196:	d1f8      	bne.n	801918a <_reclaim_reent+0x8a>
 8019198:	4620      	mov	r0, r4
 801919a:	f000 f9b5 	bl	8019508 <_free_r>
 801919e:	e7ba      	b.n	8019116 <_reclaim_reent+0x16>
 80191a0:	680e      	ldr	r6, [r1, #0]
 80191a2:	4620      	mov	r0, r4
 80191a4:	f000 f9b0 	bl	8019508 <_free_r>
 80191a8:	4631      	mov	r1, r6
 80191aa:	e7ef      	b.n	801918c <_reclaim_reent+0x8c>
 80191ac:	2500      	movs	r5, #0
 80191ae:	e7ef      	b.n	8019190 <_reclaim_reent+0x90>
 80191b0:	bd70      	pop	{r4, r5, r6, pc}
 80191b2:	bf00      	nop
 80191b4:	2400003c 	.word	0x2400003c

080191b8 <_sbrk_r>:
 80191b8:	b538      	push	{r3, r4, r5, lr}
 80191ba:	4d06      	ldr	r5, [pc, #24]	; (80191d4 <_sbrk_r+0x1c>)
 80191bc:	2300      	movs	r3, #0
 80191be:	4604      	mov	r4, r0
 80191c0:	4608      	mov	r0, r1
 80191c2:	602b      	str	r3, [r5, #0]
 80191c4:	f7e8 fd0e 	bl	8001be4 <_sbrk>
 80191c8:	1c43      	adds	r3, r0, #1
 80191ca:	d102      	bne.n	80191d2 <_sbrk_r+0x1a>
 80191cc:	682b      	ldr	r3, [r5, #0]
 80191ce:	b103      	cbz	r3, 80191d2 <_sbrk_r+0x1a>
 80191d0:	6023      	str	r3, [r4, #0]
 80191d2:	bd38      	pop	{r3, r4, r5, pc}
 80191d4:	24007878 	.word	0x24007878

080191d8 <__sread>:
 80191d8:	b510      	push	{r4, lr}
 80191da:	460c      	mov	r4, r1
 80191dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191e0:	f000 fcd0 	bl	8019b84 <_read_r>
 80191e4:	2800      	cmp	r0, #0
 80191e6:	bfab      	itete	ge
 80191e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80191ea:	89a3      	ldrhlt	r3, [r4, #12]
 80191ec:	181b      	addge	r3, r3, r0
 80191ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80191f2:	bfac      	ite	ge
 80191f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80191f6:	81a3      	strhlt	r3, [r4, #12]
 80191f8:	bd10      	pop	{r4, pc}

080191fa <__swrite>:
 80191fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191fe:	461f      	mov	r7, r3
 8019200:	898b      	ldrh	r3, [r1, #12]
 8019202:	05db      	lsls	r3, r3, #23
 8019204:	4605      	mov	r5, r0
 8019206:	460c      	mov	r4, r1
 8019208:	4616      	mov	r6, r2
 801920a:	d505      	bpl.n	8019218 <__swrite+0x1e>
 801920c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019210:	2302      	movs	r3, #2
 8019212:	2200      	movs	r2, #0
 8019214:	f000 f952 	bl	80194bc <_lseek_r>
 8019218:	89a3      	ldrh	r3, [r4, #12]
 801921a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801921e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019222:	81a3      	strh	r3, [r4, #12]
 8019224:	4632      	mov	r2, r6
 8019226:	463b      	mov	r3, r7
 8019228:	4628      	mov	r0, r5
 801922a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801922e:	f000 b831 	b.w	8019294 <_write_r>

08019232 <__sseek>:
 8019232:	b510      	push	{r4, lr}
 8019234:	460c      	mov	r4, r1
 8019236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801923a:	f000 f93f 	bl	80194bc <_lseek_r>
 801923e:	1c43      	adds	r3, r0, #1
 8019240:	89a3      	ldrh	r3, [r4, #12]
 8019242:	bf15      	itete	ne
 8019244:	6560      	strne	r0, [r4, #84]	; 0x54
 8019246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801924a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801924e:	81a3      	strheq	r3, [r4, #12]
 8019250:	bf18      	it	ne
 8019252:	81a3      	strhne	r3, [r4, #12]
 8019254:	bd10      	pop	{r4, pc}

08019256 <__sclose>:
 8019256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801925a:	f000 b84b 	b.w	80192f4 <_close_r>

0801925e <strcpy>:
 801925e:	4603      	mov	r3, r0
 8019260:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019264:	f803 2b01 	strb.w	r2, [r3], #1
 8019268:	2a00      	cmp	r2, #0
 801926a:	d1f9      	bne.n	8019260 <strcpy+0x2>
 801926c:	4770      	bx	lr

0801926e <strncpy>:
 801926e:	b510      	push	{r4, lr}
 8019270:	3901      	subs	r1, #1
 8019272:	4603      	mov	r3, r0
 8019274:	b132      	cbz	r2, 8019284 <strncpy+0x16>
 8019276:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801927a:	f803 4b01 	strb.w	r4, [r3], #1
 801927e:	3a01      	subs	r2, #1
 8019280:	2c00      	cmp	r4, #0
 8019282:	d1f7      	bne.n	8019274 <strncpy+0x6>
 8019284:	441a      	add	r2, r3
 8019286:	2100      	movs	r1, #0
 8019288:	4293      	cmp	r3, r2
 801928a:	d100      	bne.n	801928e <strncpy+0x20>
 801928c:	bd10      	pop	{r4, pc}
 801928e:	f803 1b01 	strb.w	r1, [r3], #1
 8019292:	e7f9      	b.n	8019288 <strncpy+0x1a>

08019294 <_write_r>:
 8019294:	b538      	push	{r3, r4, r5, lr}
 8019296:	4d07      	ldr	r5, [pc, #28]	; (80192b4 <_write_r+0x20>)
 8019298:	4604      	mov	r4, r0
 801929a:	4608      	mov	r0, r1
 801929c:	4611      	mov	r1, r2
 801929e:	2200      	movs	r2, #0
 80192a0:	602a      	str	r2, [r5, #0]
 80192a2:	461a      	mov	r2, r3
 80192a4:	f7e8 fc4d 	bl	8001b42 <_write>
 80192a8:	1c43      	adds	r3, r0, #1
 80192aa:	d102      	bne.n	80192b2 <_write_r+0x1e>
 80192ac:	682b      	ldr	r3, [r5, #0]
 80192ae:	b103      	cbz	r3, 80192b2 <_write_r+0x1e>
 80192b0:	6023      	str	r3, [r4, #0]
 80192b2:	bd38      	pop	{r3, r4, r5, pc}
 80192b4:	24007878 	.word	0x24007878

080192b8 <__assert_func>:
 80192b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80192ba:	4614      	mov	r4, r2
 80192bc:	461a      	mov	r2, r3
 80192be:	4b09      	ldr	r3, [pc, #36]	; (80192e4 <__assert_func+0x2c>)
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	4605      	mov	r5, r0
 80192c4:	68d8      	ldr	r0, [r3, #12]
 80192c6:	b14c      	cbz	r4, 80192dc <__assert_func+0x24>
 80192c8:	4b07      	ldr	r3, [pc, #28]	; (80192e8 <__assert_func+0x30>)
 80192ca:	9100      	str	r1, [sp, #0]
 80192cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80192d0:	4906      	ldr	r1, [pc, #24]	; (80192ec <__assert_func+0x34>)
 80192d2:	462b      	mov	r3, r5
 80192d4:	f000 f8e0 	bl	8019498 <fiprintf>
 80192d8:	f000 fd26 	bl	8019d28 <abort>
 80192dc:	4b04      	ldr	r3, [pc, #16]	; (80192f0 <__assert_func+0x38>)
 80192de:	461c      	mov	r4, r3
 80192e0:	e7f3      	b.n	80192ca <__assert_func+0x12>
 80192e2:	bf00      	nop
 80192e4:	2400003c 	.word	0x2400003c
 80192e8:	0801d5aa 	.word	0x0801d5aa
 80192ec:	0801d5b7 	.word	0x0801d5b7
 80192f0:	0801d5e5 	.word	0x0801d5e5

080192f4 <_close_r>:
 80192f4:	b538      	push	{r3, r4, r5, lr}
 80192f6:	4d06      	ldr	r5, [pc, #24]	; (8019310 <_close_r+0x1c>)
 80192f8:	2300      	movs	r3, #0
 80192fa:	4604      	mov	r4, r0
 80192fc:	4608      	mov	r0, r1
 80192fe:	602b      	str	r3, [r5, #0]
 8019300:	f7e8 fc3b 	bl	8001b7a <_close>
 8019304:	1c43      	adds	r3, r0, #1
 8019306:	d102      	bne.n	801930e <_close_r+0x1a>
 8019308:	682b      	ldr	r3, [r5, #0]
 801930a:	b103      	cbz	r3, 801930e <_close_r+0x1a>
 801930c:	6023      	str	r3, [r4, #0]
 801930e:	bd38      	pop	{r3, r4, r5, pc}
 8019310:	24007878 	.word	0x24007878

08019314 <__sflush_r>:
 8019314:	898a      	ldrh	r2, [r1, #12]
 8019316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801931a:	4605      	mov	r5, r0
 801931c:	0710      	lsls	r0, r2, #28
 801931e:	460c      	mov	r4, r1
 8019320:	d458      	bmi.n	80193d4 <__sflush_r+0xc0>
 8019322:	684b      	ldr	r3, [r1, #4]
 8019324:	2b00      	cmp	r3, #0
 8019326:	dc05      	bgt.n	8019334 <__sflush_r+0x20>
 8019328:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801932a:	2b00      	cmp	r3, #0
 801932c:	dc02      	bgt.n	8019334 <__sflush_r+0x20>
 801932e:	2000      	movs	r0, #0
 8019330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019336:	2e00      	cmp	r6, #0
 8019338:	d0f9      	beq.n	801932e <__sflush_r+0x1a>
 801933a:	2300      	movs	r3, #0
 801933c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019340:	682f      	ldr	r7, [r5, #0]
 8019342:	602b      	str	r3, [r5, #0]
 8019344:	d032      	beq.n	80193ac <__sflush_r+0x98>
 8019346:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019348:	89a3      	ldrh	r3, [r4, #12]
 801934a:	075a      	lsls	r2, r3, #29
 801934c:	d505      	bpl.n	801935a <__sflush_r+0x46>
 801934e:	6863      	ldr	r3, [r4, #4]
 8019350:	1ac0      	subs	r0, r0, r3
 8019352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019354:	b10b      	cbz	r3, 801935a <__sflush_r+0x46>
 8019356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019358:	1ac0      	subs	r0, r0, r3
 801935a:	2300      	movs	r3, #0
 801935c:	4602      	mov	r2, r0
 801935e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019360:	6a21      	ldr	r1, [r4, #32]
 8019362:	4628      	mov	r0, r5
 8019364:	47b0      	blx	r6
 8019366:	1c43      	adds	r3, r0, #1
 8019368:	89a3      	ldrh	r3, [r4, #12]
 801936a:	d106      	bne.n	801937a <__sflush_r+0x66>
 801936c:	6829      	ldr	r1, [r5, #0]
 801936e:	291d      	cmp	r1, #29
 8019370:	d82c      	bhi.n	80193cc <__sflush_r+0xb8>
 8019372:	4a2a      	ldr	r2, [pc, #168]	; (801941c <__sflush_r+0x108>)
 8019374:	40ca      	lsrs	r2, r1
 8019376:	07d6      	lsls	r6, r2, #31
 8019378:	d528      	bpl.n	80193cc <__sflush_r+0xb8>
 801937a:	2200      	movs	r2, #0
 801937c:	6062      	str	r2, [r4, #4]
 801937e:	04d9      	lsls	r1, r3, #19
 8019380:	6922      	ldr	r2, [r4, #16]
 8019382:	6022      	str	r2, [r4, #0]
 8019384:	d504      	bpl.n	8019390 <__sflush_r+0x7c>
 8019386:	1c42      	adds	r2, r0, #1
 8019388:	d101      	bne.n	801938e <__sflush_r+0x7a>
 801938a:	682b      	ldr	r3, [r5, #0]
 801938c:	b903      	cbnz	r3, 8019390 <__sflush_r+0x7c>
 801938e:	6560      	str	r0, [r4, #84]	; 0x54
 8019390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019392:	602f      	str	r7, [r5, #0]
 8019394:	2900      	cmp	r1, #0
 8019396:	d0ca      	beq.n	801932e <__sflush_r+0x1a>
 8019398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801939c:	4299      	cmp	r1, r3
 801939e:	d002      	beq.n	80193a6 <__sflush_r+0x92>
 80193a0:	4628      	mov	r0, r5
 80193a2:	f000 f8b1 	bl	8019508 <_free_r>
 80193a6:	2000      	movs	r0, #0
 80193a8:	6360      	str	r0, [r4, #52]	; 0x34
 80193aa:	e7c1      	b.n	8019330 <__sflush_r+0x1c>
 80193ac:	6a21      	ldr	r1, [r4, #32]
 80193ae:	2301      	movs	r3, #1
 80193b0:	4628      	mov	r0, r5
 80193b2:	47b0      	blx	r6
 80193b4:	1c41      	adds	r1, r0, #1
 80193b6:	d1c7      	bne.n	8019348 <__sflush_r+0x34>
 80193b8:	682b      	ldr	r3, [r5, #0]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d0c4      	beq.n	8019348 <__sflush_r+0x34>
 80193be:	2b1d      	cmp	r3, #29
 80193c0:	d001      	beq.n	80193c6 <__sflush_r+0xb2>
 80193c2:	2b16      	cmp	r3, #22
 80193c4:	d101      	bne.n	80193ca <__sflush_r+0xb6>
 80193c6:	602f      	str	r7, [r5, #0]
 80193c8:	e7b1      	b.n	801932e <__sflush_r+0x1a>
 80193ca:	89a3      	ldrh	r3, [r4, #12]
 80193cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80193d0:	81a3      	strh	r3, [r4, #12]
 80193d2:	e7ad      	b.n	8019330 <__sflush_r+0x1c>
 80193d4:	690f      	ldr	r7, [r1, #16]
 80193d6:	2f00      	cmp	r7, #0
 80193d8:	d0a9      	beq.n	801932e <__sflush_r+0x1a>
 80193da:	0793      	lsls	r3, r2, #30
 80193dc:	680e      	ldr	r6, [r1, #0]
 80193de:	bf08      	it	eq
 80193e0:	694b      	ldreq	r3, [r1, #20]
 80193e2:	600f      	str	r7, [r1, #0]
 80193e4:	bf18      	it	ne
 80193e6:	2300      	movne	r3, #0
 80193e8:	eba6 0807 	sub.w	r8, r6, r7
 80193ec:	608b      	str	r3, [r1, #8]
 80193ee:	f1b8 0f00 	cmp.w	r8, #0
 80193f2:	dd9c      	ble.n	801932e <__sflush_r+0x1a>
 80193f4:	6a21      	ldr	r1, [r4, #32]
 80193f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80193f8:	4643      	mov	r3, r8
 80193fa:	463a      	mov	r2, r7
 80193fc:	4628      	mov	r0, r5
 80193fe:	47b0      	blx	r6
 8019400:	2800      	cmp	r0, #0
 8019402:	dc06      	bgt.n	8019412 <__sflush_r+0xfe>
 8019404:	89a3      	ldrh	r3, [r4, #12]
 8019406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801940a:	81a3      	strh	r3, [r4, #12]
 801940c:	f04f 30ff 	mov.w	r0, #4294967295
 8019410:	e78e      	b.n	8019330 <__sflush_r+0x1c>
 8019412:	4407      	add	r7, r0
 8019414:	eba8 0800 	sub.w	r8, r8, r0
 8019418:	e7e9      	b.n	80193ee <__sflush_r+0xda>
 801941a:	bf00      	nop
 801941c:	20400001 	.word	0x20400001

08019420 <_fflush_r>:
 8019420:	b538      	push	{r3, r4, r5, lr}
 8019422:	690b      	ldr	r3, [r1, #16]
 8019424:	4605      	mov	r5, r0
 8019426:	460c      	mov	r4, r1
 8019428:	b913      	cbnz	r3, 8019430 <_fflush_r+0x10>
 801942a:	2500      	movs	r5, #0
 801942c:	4628      	mov	r0, r5
 801942e:	bd38      	pop	{r3, r4, r5, pc}
 8019430:	b118      	cbz	r0, 801943a <_fflush_r+0x1a>
 8019432:	6983      	ldr	r3, [r0, #24]
 8019434:	b90b      	cbnz	r3, 801943a <_fflush_r+0x1a>
 8019436:	f7ff fcb9 	bl	8018dac <__sinit>
 801943a:	4b14      	ldr	r3, [pc, #80]	; (801948c <_fflush_r+0x6c>)
 801943c:	429c      	cmp	r4, r3
 801943e:	d11b      	bne.n	8019478 <_fflush_r+0x58>
 8019440:	686c      	ldr	r4, [r5, #4]
 8019442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019446:	2b00      	cmp	r3, #0
 8019448:	d0ef      	beq.n	801942a <_fflush_r+0xa>
 801944a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801944c:	07d0      	lsls	r0, r2, #31
 801944e:	d404      	bmi.n	801945a <_fflush_r+0x3a>
 8019450:	0599      	lsls	r1, r3, #22
 8019452:	d402      	bmi.n	801945a <_fflush_r+0x3a>
 8019454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019456:	f7ff fd6c 	bl	8018f32 <__retarget_lock_acquire_recursive>
 801945a:	4628      	mov	r0, r5
 801945c:	4621      	mov	r1, r4
 801945e:	f7ff ff59 	bl	8019314 <__sflush_r>
 8019462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019464:	07da      	lsls	r2, r3, #31
 8019466:	4605      	mov	r5, r0
 8019468:	d4e0      	bmi.n	801942c <_fflush_r+0xc>
 801946a:	89a3      	ldrh	r3, [r4, #12]
 801946c:	059b      	lsls	r3, r3, #22
 801946e:	d4dd      	bmi.n	801942c <_fflush_r+0xc>
 8019470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019472:	f7ff fd5f 	bl	8018f34 <__retarget_lock_release_recursive>
 8019476:	e7d9      	b.n	801942c <_fflush_r+0xc>
 8019478:	4b05      	ldr	r3, [pc, #20]	; (8019490 <_fflush_r+0x70>)
 801947a:	429c      	cmp	r4, r3
 801947c:	d101      	bne.n	8019482 <_fflush_r+0x62>
 801947e:	68ac      	ldr	r4, [r5, #8]
 8019480:	e7df      	b.n	8019442 <_fflush_r+0x22>
 8019482:	4b04      	ldr	r3, [pc, #16]	; (8019494 <_fflush_r+0x74>)
 8019484:	429c      	cmp	r4, r3
 8019486:	bf08      	it	eq
 8019488:	68ec      	ldreq	r4, [r5, #12]
 801948a:	e7da      	b.n	8019442 <_fflush_r+0x22>
 801948c:	0801d4f0 	.word	0x0801d4f0
 8019490:	0801d510 	.word	0x0801d510
 8019494:	0801d4d0 	.word	0x0801d4d0

08019498 <fiprintf>:
 8019498:	b40e      	push	{r1, r2, r3}
 801949a:	b503      	push	{r0, r1, lr}
 801949c:	4601      	mov	r1, r0
 801949e:	ab03      	add	r3, sp, #12
 80194a0:	4805      	ldr	r0, [pc, #20]	; (80194b8 <fiprintf+0x20>)
 80194a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80194a6:	6800      	ldr	r0, [r0, #0]
 80194a8:	9301      	str	r3, [sp, #4]
 80194aa:	f000 f8a7 	bl	80195fc <_vfiprintf_r>
 80194ae:	b002      	add	sp, #8
 80194b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80194b4:	b003      	add	sp, #12
 80194b6:	4770      	bx	lr
 80194b8:	2400003c 	.word	0x2400003c

080194bc <_lseek_r>:
 80194bc:	b538      	push	{r3, r4, r5, lr}
 80194be:	4d07      	ldr	r5, [pc, #28]	; (80194dc <_lseek_r+0x20>)
 80194c0:	4604      	mov	r4, r0
 80194c2:	4608      	mov	r0, r1
 80194c4:	4611      	mov	r1, r2
 80194c6:	2200      	movs	r2, #0
 80194c8:	602a      	str	r2, [r5, #0]
 80194ca:	461a      	mov	r2, r3
 80194cc:	f7e8 fb7c 	bl	8001bc8 <_lseek>
 80194d0:	1c43      	adds	r3, r0, #1
 80194d2:	d102      	bne.n	80194da <_lseek_r+0x1e>
 80194d4:	682b      	ldr	r3, [r5, #0]
 80194d6:	b103      	cbz	r3, 80194da <_lseek_r+0x1e>
 80194d8:	6023      	str	r3, [r4, #0]
 80194da:	bd38      	pop	{r3, r4, r5, pc}
 80194dc:	24007878 	.word	0x24007878

080194e0 <malloc>:
 80194e0:	4b02      	ldr	r3, [pc, #8]	; (80194ec <malloc+0xc>)
 80194e2:	4601      	mov	r1, r0
 80194e4:	6818      	ldr	r0, [r3, #0]
 80194e6:	f7ff bd4b 	b.w	8018f80 <_malloc_r>
 80194ea:	bf00      	nop
 80194ec:	2400003c 	.word	0x2400003c

080194f0 <__malloc_lock>:
 80194f0:	4801      	ldr	r0, [pc, #4]	; (80194f8 <__malloc_lock+0x8>)
 80194f2:	f7ff bd1e 	b.w	8018f32 <__retarget_lock_acquire_recursive>
 80194f6:	bf00      	nop
 80194f8:	24007884 	.word	0x24007884

080194fc <__malloc_unlock>:
 80194fc:	4801      	ldr	r0, [pc, #4]	; (8019504 <__malloc_unlock+0x8>)
 80194fe:	f7ff bd19 	b.w	8018f34 <__retarget_lock_release_recursive>
 8019502:	bf00      	nop
 8019504:	24007884 	.word	0x24007884

08019508 <_free_r>:
 8019508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801950a:	2900      	cmp	r1, #0
 801950c:	d048      	beq.n	80195a0 <_free_r+0x98>
 801950e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019512:	9001      	str	r0, [sp, #4]
 8019514:	2b00      	cmp	r3, #0
 8019516:	f1a1 0404 	sub.w	r4, r1, #4
 801951a:	bfb8      	it	lt
 801951c:	18e4      	addlt	r4, r4, r3
 801951e:	f7ff ffe7 	bl	80194f0 <__malloc_lock>
 8019522:	4a20      	ldr	r2, [pc, #128]	; (80195a4 <_free_r+0x9c>)
 8019524:	9801      	ldr	r0, [sp, #4]
 8019526:	6813      	ldr	r3, [r2, #0]
 8019528:	4615      	mov	r5, r2
 801952a:	b933      	cbnz	r3, 801953a <_free_r+0x32>
 801952c:	6063      	str	r3, [r4, #4]
 801952e:	6014      	str	r4, [r2, #0]
 8019530:	b003      	add	sp, #12
 8019532:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019536:	f7ff bfe1 	b.w	80194fc <__malloc_unlock>
 801953a:	42a3      	cmp	r3, r4
 801953c:	d90b      	bls.n	8019556 <_free_r+0x4e>
 801953e:	6821      	ldr	r1, [r4, #0]
 8019540:	1862      	adds	r2, r4, r1
 8019542:	4293      	cmp	r3, r2
 8019544:	bf04      	itt	eq
 8019546:	681a      	ldreq	r2, [r3, #0]
 8019548:	685b      	ldreq	r3, [r3, #4]
 801954a:	6063      	str	r3, [r4, #4]
 801954c:	bf04      	itt	eq
 801954e:	1852      	addeq	r2, r2, r1
 8019550:	6022      	streq	r2, [r4, #0]
 8019552:	602c      	str	r4, [r5, #0]
 8019554:	e7ec      	b.n	8019530 <_free_r+0x28>
 8019556:	461a      	mov	r2, r3
 8019558:	685b      	ldr	r3, [r3, #4]
 801955a:	b10b      	cbz	r3, 8019560 <_free_r+0x58>
 801955c:	42a3      	cmp	r3, r4
 801955e:	d9fa      	bls.n	8019556 <_free_r+0x4e>
 8019560:	6811      	ldr	r1, [r2, #0]
 8019562:	1855      	adds	r5, r2, r1
 8019564:	42a5      	cmp	r5, r4
 8019566:	d10b      	bne.n	8019580 <_free_r+0x78>
 8019568:	6824      	ldr	r4, [r4, #0]
 801956a:	4421      	add	r1, r4
 801956c:	1854      	adds	r4, r2, r1
 801956e:	42a3      	cmp	r3, r4
 8019570:	6011      	str	r1, [r2, #0]
 8019572:	d1dd      	bne.n	8019530 <_free_r+0x28>
 8019574:	681c      	ldr	r4, [r3, #0]
 8019576:	685b      	ldr	r3, [r3, #4]
 8019578:	6053      	str	r3, [r2, #4]
 801957a:	4421      	add	r1, r4
 801957c:	6011      	str	r1, [r2, #0]
 801957e:	e7d7      	b.n	8019530 <_free_r+0x28>
 8019580:	d902      	bls.n	8019588 <_free_r+0x80>
 8019582:	230c      	movs	r3, #12
 8019584:	6003      	str	r3, [r0, #0]
 8019586:	e7d3      	b.n	8019530 <_free_r+0x28>
 8019588:	6825      	ldr	r5, [r4, #0]
 801958a:	1961      	adds	r1, r4, r5
 801958c:	428b      	cmp	r3, r1
 801958e:	bf04      	itt	eq
 8019590:	6819      	ldreq	r1, [r3, #0]
 8019592:	685b      	ldreq	r3, [r3, #4]
 8019594:	6063      	str	r3, [r4, #4]
 8019596:	bf04      	itt	eq
 8019598:	1949      	addeq	r1, r1, r5
 801959a:	6021      	streq	r1, [r4, #0]
 801959c:	6054      	str	r4, [r2, #4]
 801959e:	e7c7      	b.n	8019530 <_free_r+0x28>
 80195a0:	b003      	add	sp, #12
 80195a2:	bd30      	pop	{r4, r5, pc}
 80195a4:	24004270 	.word	0x24004270

080195a8 <__sfputc_r>:
 80195a8:	6893      	ldr	r3, [r2, #8]
 80195aa:	3b01      	subs	r3, #1
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	b410      	push	{r4}
 80195b0:	6093      	str	r3, [r2, #8]
 80195b2:	da08      	bge.n	80195c6 <__sfputc_r+0x1e>
 80195b4:	6994      	ldr	r4, [r2, #24]
 80195b6:	42a3      	cmp	r3, r4
 80195b8:	db01      	blt.n	80195be <__sfputc_r+0x16>
 80195ba:	290a      	cmp	r1, #10
 80195bc:	d103      	bne.n	80195c6 <__sfputc_r+0x1e>
 80195be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195c2:	f000 baf1 	b.w	8019ba8 <__swbuf_r>
 80195c6:	6813      	ldr	r3, [r2, #0]
 80195c8:	1c58      	adds	r0, r3, #1
 80195ca:	6010      	str	r0, [r2, #0]
 80195cc:	7019      	strb	r1, [r3, #0]
 80195ce:	4608      	mov	r0, r1
 80195d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195d4:	4770      	bx	lr

080195d6 <__sfputs_r>:
 80195d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195d8:	4606      	mov	r6, r0
 80195da:	460f      	mov	r7, r1
 80195dc:	4614      	mov	r4, r2
 80195de:	18d5      	adds	r5, r2, r3
 80195e0:	42ac      	cmp	r4, r5
 80195e2:	d101      	bne.n	80195e8 <__sfputs_r+0x12>
 80195e4:	2000      	movs	r0, #0
 80195e6:	e007      	b.n	80195f8 <__sfputs_r+0x22>
 80195e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195ec:	463a      	mov	r2, r7
 80195ee:	4630      	mov	r0, r6
 80195f0:	f7ff ffda 	bl	80195a8 <__sfputc_r>
 80195f4:	1c43      	adds	r3, r0, #1
 80195f6:	d1f3      	bne.n	80195e0 <__sfputs_r+0xa>
 80195f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080195fc <_vfiprintf_r>:
 80195fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019600:	460d      	mov	r5, r1
 8019602:	b09d      	sub	sp, #116	; 0x74
 8019604:	4614      	mov	r4, r2
 8019606:	4698      	mov	r8, r3
 8019608:	4606      	mov	r6, r0
 801960a:	b118      	cbz	r0, 8019614 <_vfiprintf_r+0x18>
 801960c:	6983      	ldr	r3, [r0, #24]
 801960e:	b90b      	cbnz	r3, 8019614 <_vfiprintf_r+0x18>
 8019610:	f7ff fbcc 	bl	8018dac <__sinit>
 8019614:	4b89      	ldr	r3, [pc, #548]	; (801983c <_vfiprintf_r+0x240>)
 8019616:	429d      	cmp	r5, r3
 8019618:	d11b      	bne.n	8019652 <_vfiprintf_r+0x56>
 801961a:	6875      	ldr	r5, [r6, #4]
 801961c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801961e:	07d9      	lsls	r1, r3, #31
 8019620:	d405      	bmi.n	801962e <_vfiprintf_r+0x32>
 8019622:	89ab      	ldrh	r3, [r5, #12]
 8019624:	059a      	lsls	r2, r3, #22
 8019626:	d402      	bmi.n	801962e <_vfiprintf_r+0x32>
 8019628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801962a:	f7ff fc82 	bl	8018f32 <__retarget_lock_acquire_recursive>
 801962e:	89ab      	ldrh	r3, [r5, #12]
 8019630:	071b      	lsls	r3, r3, #28
 8019632:	d501      	bpl.n	8019638 <_vfiprintf_r+0x3c>
 8019634:	692b      	ldr	r3, [r5, #16]
 8019636:	b9eb      	cbnz	r3, 8019674 <_vfiprintf_r+0x78>
 8019638:	4629      	mov	r1, r5
 801963a:	4630      	mov	r0, r6
 801963c:	f000 fb06 	bl	8019c4c <__swsetup_r>
 8019640:	b1c0      	cbz	r0, 8019674 <_vfiprintf_r+0x78>
 8019642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019644:	07dc      	lsls	r4, r3, #31
 8019646:	d50e      	bpl.n	8019666 <_vfiprintf_r+0x6a>
 8019648:	f04f 30ff 	mov.w	r0, #4294967295
 801964c:	b01d      	add	sp, #116	; 0x74
 801964e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019652:	4b7b      	ldr	r3, [pc, #492]	; (8019840 <_vfiprintf_r+0x244>)
 8019654:	429d      	cmp	r5, r3
 8019656:	d101      	bne.n	801965c <_vfiprintf_r+0x60>
 8019658:	68b5      	ldr	r5, [r6, #8]
 801965a:	e7df      	b.n	801961c <_vfiprintf_r+0x20>
 801965c:	4b79      	ldr	r3, [pc, #484]	; (8019844 <_vfiprintf_r+0x248>)
 801965e:	429d      	cmp	r5, r3
 8019660:	bf08      	it	eq
 8019662:	68f5      	ldreq	r5, [r6, #12]
 8019664:	e7da      	b.n	801961c <_vfiprintf_r+0x20>
 8019666:	89ab      	ldrh	r3, [r5, #12]
 8019668:	0598      	lsls	r0, r3, #22
 801966a:	d4ed      	bmi.n	8019648 <_vfiprintf_r+0x4c>
 801966c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801966e:	f7ff fc61 	bl	8018f34 <__retarget_lock_release_recursive>
 8019672:	e7e9      	b.n	8019648 <_vfiprintf_r+0x4c>
 8019674:	2300      	movs	r3, #0
 8019676:	9309      	str	r3, [sp, #36]	; 0x24
 8019678:	2320      	movs	r3, #32
 801967a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801967e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019682:	2330      	movs	r3, #48	; 0x30
 8019684:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019848 <_vfiprintf_r+0x24c>
 8019688:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801968c:	f04f 0901 	mov.w	r9, #1
 8019690:	4623      	mov	r3, r4
 8019692:	469a      	mov	sl, r3
 8019694:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019698:	b10a      	cbz	r2, 801969e <_vfiprintf_r+0xa2>
 801969a:	2a25      	cmp	r2, #37	; 0x25
 801969c:	d1f9      	bne.n	8019692 <_vfiprintf_r+0x96>
 801969e:	ebba 0b04 	subs.w	fp, sl, r4
 80196a2:	d00b      	beq.n	80196bc <_vfiprintf_r+0xc0>
 80196a4:	465b      	mov	r3, fp
 80196a6:	4622      	mov	r2, r4
 80196a8:	4629      	mov	r1, r5
 80196aa:	4630      	mov	r0, r6
 80196ac:	f7ff ff93 	bl	80195d6 <__sfputs_r>
 80196b0:	3001      	adds	r0, #1
 80196b2:	f000 80aa 	beq.w	801980a <_vfiprintf_r+0x20e>
 80196b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196b8:	445a      	add	r2, fp
 80196ba:	9209      	str	r2, [sp, #36]	; 0x24
 80196bc:	f89a 3000 	ldrb.w	r3, [sl]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	f000 80a2 	beq.w	801980a <_vfiprintf_r+0x20e>
 80196c6:	2300      	movs	r3, #0
 80196c8:	f04f 32ff 	mov.w	r2, #4294967295
 80196cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80196d0:	f10a 0a01 	add.w	sl, sl, #1
 80196d4:	9304      	str	r3, [sp, #16]
 80196d6:	9307      	str	r3, [sp, #28]
 80196d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80196dc:	931a      	str	r3, [sp, #104]	; 0x68
 80196de:	4654      	mov	r4, sl
 80196e0:	2205      	movs	r2, #5
 80196e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196e6:	4858      	ldr	r0, [pc, #352]	; (8019848 <_vfiprintf_r+0x24c>)
 80196e8:	f7e6 fe1a 	bl	8000320 <memchr>
 80196ec:	9a04      	ldr	r2, [sp, #16]
 80196ee:	b9d8      	cbnz	r0, 8019728 <_vfiprintf_r+0x12c>
 80196f0:	06d1      	lsls	r1, r2, #27
 80196f2:	bf44      	itt	mi
 80196f4:	2320      	movmi	r3, #32
 80196f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80196fa:	0713      	lsls	r3, r2, #28
 80196fc:	bf44      	itt	mi
 80196fe:	232b      	movmi	r3, #43	; 0x2b
 8019700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019704:	f89a 3000 	ldrb.w	r3, [sl]
 8019708:	2b2a      	cmp	r3, #42	; 0x2a
 801970a:	d015      	beq.n	8019738 <_vfiprintf_r+0x13c>
 801970c:	9a07      	ldr	r2, [sp, #28]
 801970e:	4654      	mov	r4, sl
 8019710:	2000      	movs	r0, #0
 8019712:	f04f 0c0a 	mov.w	ip, #10
 8019716:	4621      	mov	r1, r4
 8019718:	f811 3b01 	ldrb.w	r3, [r1], #1
 801971c:	3b30      	subs	r3, #48	; 0x30
 801971e:	2b09      	cmp	r3, #9
 8019720:	d94e      	bls.n	80197c0 <_vfiprintf_r+0x1c4>
 8019722:	b1b0      	cbz	r0, 8019752 <_vfiprintf_r+0x156>
 8019724:	9207      	str	r2, [sp, #28]
 8019726:	e014      	b.n	8019752 <_vfiprintf_r+0x156>
 8019728:	eba0 0308 	sub.w	r3, r0, r8
 801972c:	fa09 f303 	lsl.w	r3, r9, r3
 8019730:	4313      	orrs	r3, r2
 8019732:	9304      	str	r3, [sp, #16]
 8019734:	46a2      	mov	sl, r4
 8019736:	e7d2      	b.n	80196de <_vfiprintf_r+0xe2>
 8019738:	9b03      	ldr	r3, [sp, #12]
 801973a:	1d19      	adds	r1, r3, #4
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	9103      	str	r1, [sp, #12]
 8019740:	2b00      	cmp	r3, #0
 8019742:	bfbb      	ittet	lt
 8019744:	425b      	neglt	r3, r3
 8019746:	f042 0202 	orrlt.w	r2, r2, #2
 801974a:	9307      	strge	r3, [sp, #28]
 801974c:	9307      	strlt	r3, [sp, #28]
 801974e:	bfb8      	it	lt
 8019750:	9204      	strlt	r2, [sp, #16]
 8019752:	7823      	ldrb	r3, [r4, #0]
 8019754:	2b2e      	cmp	r3, #46	; 0x2e
 8019756:	d10c      	bne.n	8019772 <_vfiprintf_r+0x176>
 8019758:	7863      	ldrb	r3, [r4, #1]
 801975a:	2b2a      	cmp	r3, #42	; 0x2a
 801975c:	d135      	bne.n	80197ca <_vfiprintf_r+0x1ce>
 801975e:	9b03      	ldr	r3, [sp, #12]
 8019760:	1d1a      	adds	r2, r3, #4
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	9203      	str	r2, [sp, #12]
 8019766:	2b00      	cmp	r3, #0
 8019768:	bfb8      	it	lt
 801976a:	f04f 33ff 	movlt.w	r3, #4294967295
 801976e:	3402      	adds	r4, #2
 8019770:	9305      	str	r3, [sp, #20]
 8019772:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019858 <_vfiprintf_r+0x25c>
 8019776:	7821      	ldrb	r1, [r4, #0]
 8019778:	2203      	movs	r2, #3
 801977a:	4650      	mov	r0, sl
 801977c:	f7e6 fdd0 	bl	8000320 <memchr>
 8019780:	b140      	cbz	r0, 8019794 <_vfiprintf_r+0x198>
 8019782:	2340      	movs	r3, #64	; 0x40
 8019784:	eba0 000a 	sub.w	r0, r0, sl
 8019788:	fa03 f000 	lsl.w	r0, r3, r0
 801978c:	9b04      	ldr	r3, [sp, #16]
 801978e:	4303      	orrs	r3, r0
 8019790:	3401      	adds	r4, #1
 8019792:	9304      	str	r3, [sp, #16]
 8019794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019798:	482c      	ldr	r0, [pc, #176]	; (801984c <_vfiprintf_r+0x250>)
 801979a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801979e:	2206      	movs	r2, #6
 80197a0:	f7e6 fdbe 	bl	8000320 <memchr>
 80197a4:	2800      	cmp	r0, #0
 80197a6:	d03f      	beq.n	8019828 <_vfiprintf_r+0x22c>
 80197a8:	4b29      	ldr	r3, [pc, #164]	; (8019850 <_vfiprintf_r+0x254>)
 80197aa:	bb1b      	cbnz	r3, 80197f4 <_vfiprintf_r+0x1f8>
 80197ac:	9b03      	ldr	r3, [sp, #12]
 80197ae:	3307      	adds	r3, #7
 80197b0:	f023 0307 	bic.w	r3, r3, #7
 80197b4:	3308      	adds	r3, #8
 80197b6:	9303      	str	r3, [sp, #12]
 80197b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197ba:	443b      	add	r3, r7
 80197bc:	9309      	str	r3, [sp, #36]	; 0x24
 80197be:	e767      	b.n	8019690 <_vfiprintf_r+0x94>
 80197c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80197c4:	460c      	mov	r4, r1
 80197c6:	2001      	movs	r0, #1
 80197c8:	e7a5      	b.n	8019716 <_vfiprintf_r+0x11a>
 80197ca:	2300      	movs	r3, #0
 80197cc:	3401      	adds	r4, #1
 80197ce:	9305      	str	r3, [sp, #20]
 80197d0:	4619      	mov	r1, r3
 80197d2:	f04f 0c0a 	mov.w	ip, #10
 80197d6:	4620      	mov	r0, r4
 80197d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80197dc:	3a30      	subs	r2, #48	; 0x30
 80197de:	2a09      	cmp	r2, #9
 80197e0:	d903      	bls.n	80197ea <_vfiprintf_r+0x1ee>
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d0c5      	beq.n	8019772 <_vfiprintf_r+0x176>
 80197e6:	9105      	str	r1, [sp, #20]
 80197e8:	e7c3      	b.n	8019772 <_vfiprintf_r+0x176>
 80197ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80197ee:	4604      	mov	r4, r0
 80197f0:	2301      	movs	r3, #1
 80197f2:	e7f0      	b.n	80197d6 <_vfiprintf_r+0x1da>
 80197f4:	ab03      	add	r3, sp, #12
 80197f6:	9300      	str	r3, [sp, #0]
 80197f8:	462a      	mov	r2, r5
 80197fa:	4b16      	ldr	r3, [pc, #88]	; (8019854 <_vfiprintf_r+0x258>)
 80197fc:	a904      	add	r1, sp, #16
 80197fe:	4630      	mov	r0, r6
 8019800:	f3af 8000 	nop.w
 8019804:	4607      	mov	r7, r0
 8019806:	1c78      	adds	r0, r7, #1
 8019808:	d1d6      	bne.n	80197b8 <_vfiprintf_r+0x1bc>
 801980a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801980c:	07d9      	lsls	r1, r3, #31
 801980e:	d405      	bmi.n	801981c <_vfiprintf_r+0x220>
 8019810:	89ab      	ldrh	r3, [r5, #12]
 8019812:	059a      	lsls	r2, r3, #22
 8019814:	d402      	bmi.n	801981c <_vfiprintf_r+0x220>
 8019816:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019818:	f7ff fb8c 	bl	8018f34 <__retarget_lock_release_recursive>
 801981c:	89ab      	ldrh	r3, [r5, #12]
 801981e:	065b      	lsls	r3, r3, #25
 8019820:	f53f af12 	bmi.w	8019648 <_vfiprintf_r+0x4c>
 8019824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019826:	e711      	b.n	801964c <_vfiprintf_r+0x50>
 8019828:	ab03      	add	r3, sp, #12
 801982a:	9300      	str	r3, [sp, #0]
 801982c:	462a      	mov	r2, r5
 801982e:	4b09      	ldr	r3, [pc, #36]	; (8019854 <_vfiprintf_r+0x258>)
 8019830:	a904      	add	r1, sp, #16
 8019832:	4630      	mov	r0, r6
 8019834:	f000 f880 	bl	8019938 <_printf_i>
 8019838:	e7e4      	b.n	8019804 <_vfiprintf_r+0x208>
 801983a:	bf00      	nop
 801983c:	0801d4f0 	.word	0x0801d4f0
 8019840:	0801d510 	.word	0x0801d510
 8019844:	0801d4d0 	.word	0x0801d4d0
 8019848:	0801d5e6 	.word	0x0801d5e6
 801984c:	0801d5f0 	.word	0x0801d5f0
 8019850:	00000000 	.word	0x00000000
 8019854:	080195d7 	.word	0x080195d7
 8019858:	0801d5ec 	.word	0x0801d5ec

0801985c <_printf_common>:
 801985c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019860:	4616      	mov	r6, r2
 8019862:	4699      	mov	r9, r3
 8019864:	688a      	ldr	r2, [r1, #8]
 8019866:	690b      	ldr	r3, [r1, #16]
 8019868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801986c:	4293      	cmp	r3, r2
 801986e:	bfb8      	it	lt
 8019870:	4613      	movlt	r3, r2
 8019872:	6033      	str	r3, [r6, #0]
 8019874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019878:	4607      	mov	r7, r0
 801987a:	460c      	mov	r4, r1
 801987c:	b10a      	cbz	r2, 8019882 <_printf_common+0x26>
 801987e:	3301      	adds	r3, #1
 8019880:	6033      	str	r3, [r6, #0]
 8019882:	6823      	ldr	r3, [r4, #0]
 8019884:	0699      	lsls	r1, r3, #26
 8019886:	bf42      	ittt	mi
 8019888:	6833      	ldrmi	r3, [r6, #0]
 801988a:	3302      	addmi	r3, #2
 801988c:	6033      	strmi	r3, [r6, #0]
 801988e:	6825      	ldr	r5, [r4, #0]
 8019890:	f015 0506 	ands.w	r5, r5, #6
 8019894:	d106      	bne.n	80198a4 <_printf_common+0x48>
 8019896:	f104 0a19 	add.w	sl, r4, #25
 801989a:	68e3      	ldr	r3, [r4, #12]
 801989c:	6832      	ldr	r2, [r6, #0]
 801989e:	1a9b      	subs	r3, r3, r2
 80198a0:	42ab      	cmp	r3, r5
 80198a2:	dc26      	bgt.n	80198f2 <_printf_common+0x96>
 80198a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80198a8:	1e13      	subs	r3, r2, #0
 80198aa:	6822      	ldr	r2, [r4, #0]
 80198ac:	bf18      	it	ne
 80198ae:	2301      	movne	r3, #1
 80198b0:	0692      	lsls	r2, r2, #26
 80198b2:	d42b      	bmi.n	801990c <_printf_common+0xb0>
 80198b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80198b8:	4649      	mov	r1, r9
 80198ba:	4638      	mov	r0, r7
 80198bc:	47c0      	blx	r8
 80198be:	3001      	adds	r0, #1
 80198c0:	d01e      	beq.n	8019900 <_printf_common+0xa4>
 80198c2:	6823      	ldr	r3, [r4, #0]
 80198c4:	68e5      	ldr	r5, [r4, #12]
 80198c6:	6832      	ldr	r2, [r6, #0]
 80198c8:	f003 0306 	and.w	r3, r3, #6
 80198cc:	2b04      	cmp	r3, #4
 80198ce:	bf08      	it	eq
 80198d0:	1aad      	subeq	r5, r5, r2
 80198d2:	68a3      	ldr	r3, [r4, #8]
 80198d4:	6922      	ldr	r2, [r4, #16]
 80198d6:	bf0c      	ite	eq
 80198d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80198dc:	2500      	movne	r5, #0
 80198de:	4293      	cmp	r3, r2
 80198e0:	bfc4      	itt	gt
 80198e2:	1a9b      	subgt	r3, r3, r2
 80198e4:	18ed      	addgt	r5, r5, r3
 80198e6:	2600      	movs	r6, #0
 80198e8:	341a      	adds	r4, #26
 80198ea:	42b5      	cmp	r5, r6
 80198ec:	d11a      	bne.n	8019924 <_printf_common+0xc8>
 80198ee:	2000      	movs	r0, #0
 80198f0:	e008      	b.n	8019904 <_printf_common+0xa8>
 80198f2:	2301      	movs	r3, #1
 80198f4:	4652      	mov	r2, sl
 80198f6:	4649      	mov	r1, r9
 80198f8:	4638      	mov	r0, r7
 80198fa:	47c0      	blx	r8
 80198fc:	3001      	adds	r0, #1
 80198fe:	d103      	bne.n	8019908 <_printf_common+0xac>
 8019900:	f04f 30ff 	mov.w	r0, #4294967295
 8019904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019908:	3501      	adds	r5, #1
 801990a:	e7c6      	b.n	801989a <_printf_common+0x3e>
 801990c:	18e1      	adds	r1, r4, r3
 801990e:	1c5a      	adds	r2, r3, #1
 8019910:	2030      	movs	r0, #48	; 0x30
 8019912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019916:	4422      	add	r2, r4
 8019918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801991c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019920:	3302      	adds	r3, #2
 8019922:	e7c7      	b.n	80198b4 <_printf_common+0x58>
 8019924:	2301      	movs	r3, #1
 8019926:	4622      	mov	r2, r4
 8019928:	4649      	mov	r1, r9
 801992a:	4638      	mov	r0, r7
 801992c:	47c0      	blx	r8
 801992e:	3001      	adds	r0, #1
 8019930:	d0e6      	beq.n	8019900 <_printf_common+0xa4>
 8019932:	3601      	adds	r6, #1
 8019934:	e7d9      	b.n	80198ea <_printf_common+0x8e>
	...

08019938 <_printf_i>:
 8019938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801993c:	460c      	mov	r4, r1
 801993e:	4691      	mov	r9, r2
 8019940:	7e27      	ldrb	r7, [r4, #24]
 8019942:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019944:	2f78      	cmp	r7, #120	; 0x78
 8019946:	4680      	mov	r8, r0
 8019948:	469a      	mov	sl, r3
 801994a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801994e:	d807      	bhi.n	8019960 <_printf_i+0x28>
 8019950:	2f62      	cmp	r7, #98	; 0x62
 8019952:	d80a      	bhi.n	801996a <_printf_i+0x32>
 8019954:	2f00      	cmp	r7, #0
 8019956:	f000 80d8 	beq.w	8019b0a <_printf_i+0x1d2>
 801995a:	2f58      	cmp	r7, #88	; 0x58
 801995c:	f000 80a3 	beq.w	8019aa6 <_printf_i+0x16e>
 8019960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019968:	e03a      	b.n	80199e0 <_printf_i+0xa8>
 801996a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801996e:	2b15      	cmp	r3, #21
 8019970:	d8f6      	bhi.n	8019960 <_printf_i+0x28>
 8019972:	a001      	add	r0, pc, #4	; (adr r0, 8019978 <_printf_i+0x40>)
 8019974:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019978:	080199d1 	.word	0x080199d1
 801997c:	080199e5 	.word	0x080199e5
 8019980:	08019961 	.word	0x08019961
 8019984:	08019961 	.word	0x08019961
 8019988:	08019961 	.word	0x08019961
 801998c:	08019961 	.word	0x08019961
 8019990:	080199e5 	.word	0x080199e5
 8019994:	08019961 	.word	0x08019961
 8019998:	08019961 	.word	0x08019961
 801999c:	08019961 	.word	0x08019961
 80199a0:	08019961 	.word	0x08019961
 80199a4:	08019af1 	.word	0x08019af1
 80199a8:	08019a15 	.word	0x08019a15
 80199ac:	08019ad3 	.word	0x08019ad3
 80199b0:	08019961 	.word	0x08019961
 80199b4:	08019961 	.word	0x08019961
 80199b8:	08019b13 	.word	0x08019b13
 80199bc:	08019961 	.word	0x08019961
 80199c0:	08019a15 	.word	0x08019a15
 80199c4:	08019961 	.word	0x08019961
 80199c8:	08019961 	.word	0x08019961
 80199cc:	08019adb 	.word	0x08019adb
 80199d0:	680b      	ldr	r3, [r1, #0]
 80199d2:	1d1a      	adds	r2, r3, #4
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	600a      	str	r2, [r1, #0]
 80199d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80199dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80199e0:	2301      	movs	r3, #1
 80199e2:	e0a3      	b.n	8019b2c <_printf_i+0x1f4>
 80199e4:	6825      	ldr	r5, [r4, #0]
 80199e6:	6808      	ldr	r0, [r1, #0]
 80199e8:	062e      	lsls	r6, r5, #24
 80199ea:	f100 0304 	add.w	r3, r0, #4
 80199ee:	d50a      	bpl.n	8019a06 <_printf_i+0xce>
 80199f0:	6805      	ldr	r5, [r0, #0]
 80199f2:	600b      	str	r3, [r1, #0]
 80199f4:	2d00      	cmp	r5, #0
 80199f6:	da03      	bge.n	8019a00 <_printf_i+0xc8>
 80199f8:	232d      	movs	r3, #45	; 0x2d
 80199fa:	426d      	negs	r5, r5
 80199fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a00:	485e      	ldr	r0, [pc, #376]	; (8019b7c <_printf_i+0x244>)
 8019a02:	230a      	movs	r3, #10
 8019a04:	e019      	b.n	8019a3a <_printf_i+0x102>
 8019a06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019a0a:	6805      	ldr	r5, [r0, #0]
 8019a0c:	600b      	str	r3, [r1, #0]
 8019a0e:	bf18      	it	ne
 8019a10:	b22d      	sxthne	r5, r5
 8019a12:	e7ef      	b.n	80199f4 <_printf_i+0xbc>
 8019a14:	680b      	ldr	r3, [r1, #0]
 8019a16:	6825      	ldr	r5, [r4, #0]
 8019a18:	1d18      	adds	r0, r3, #4
 8019a1a:	6008      	str	r0, [r1, #0]
 8019a1c:	0628      	lsls	r0, r5, #24
 8019a1e:	d501      	bpl.n	8019a24 <_printf_i+0xec>
 8019a20:	681d      	ldr	r5, [r3, #0]
 8019a22:	e002      	b.n	8019a2a <_printf_i+0xf2>
 8019a24:	0669      	lsls	r1, r5, #25
 8019a26:	d5fb      	bpl.n	8019a20 <_printf_i+0xe8>
 8019a28:	881d      	ldrh	r5, [r3, #0]
 8019a2a:	4854      	ldr	r0, [pc, #336]	; (8019b7c <_printf_i+0x244>)
 8019a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8019a2e:	bf0c      	ite	eq
 8019a30:	2308      	moveq	r3, #8
 8019a32:	230a      	movne	r3, #10
 8019a34:	2100      	movs	r1, #0
 8019a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019a3a:	6866      	ldr	r6, [r4, #4]
 8019a3c:	60a6      	str	r6, [r4, #8]
 8019a3e:	2e00      	cmp	r6, #0
 8019a40:	bfa2      	ittt	ge
 8019a42:	6821      	ldrge	r1, [r4, #0]
 8019a44:	f021 0104 	bicge.w	r1, r1, #4
 8019a48:	6021      	strge	r1, [r4, #0]
 8019a4a:	b90d      	cbnz	r5, 8019a50 <_printf_i+0x118>
 8019a4c:	2e00      	cmp	r6, #0
 8019a4e:	d04d      	beq.n	8019aec <_printf_i+0x1b4>
 8019a50:	4616      	mov	r6, r2
 8019a52:	fbb5 f1f3 	udiv	r1, r5, r3
 8019a56:	fb03 5711 	mls	r7, r3, r1, r5
 8019a5a:	5dc7      	ldrb	r7, [r0, r7]
 8019a5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019a60:	462f      	mov	r7, r5
 8019a62:	42bb      	cmp	r3, r7
 8019a64:	460d      	mov	r5, r1
 8019a66:	d9f4      	bls.n	8019a52 <_printf_i+0x11a>
 8019a68:	2b08      	cmp	r3, #8
 8019a6a:	d10b      	bne.n	8019a84 <_printf_i+0x14c>
 8019a6c:	6823      	ldr	r3, [r4, #0]
 8019a6e:	07df      	lsls	r7, r3, #31
 8019a70:	d508      	bpl.n	8019a84 <_printf_i+0x14c>
 8019a72:	6923      	ldr	r3, [r4, #16]
 8019a74:	6861      	ldr	r1, [r4, #4]
 8019a76:	4299      	cmp	r1, r3
 8019a78:	bfde      	ittt	le
 8019a7a:	2330      	movle	r3, #48	; 0x30
 8019a7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019a80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019a84:	1b92      	subs	r2, r2, r6
 8019a86:	6122      	str	r2, [r4, #16]
 8019a88:	f8cd a000 	str.w	sl, [sp]
 8019a8c:	464b      	mov	r3, r9
 8019a8e:	aa03      	add	r2, sp, #12
 8019a90:	4621      	mov	r1, r4
 8019a92:	4640      	mov	r0, r8
 8019a94:	f7ff fee2 	bl	801985c <_printf_common>
 8019a98:	3001      	adds	r0, #1
 8019a9a:	d14c      	bne.n	8019b36 <_printf_i+0x1fe>
 8019a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8019aa0:	b004      	add	sp, #16
 8019aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019aa6:	4835      	ldr	r0, [pc, #212]	; (8019b7c <_printf_i+0x244>)
 8019aa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019aac:	6823      	ldr	r3, [r4, #0]
 8019aae:	680e      	ldr	r6, [r1, #0]
 8019ab0:	061f      	lsls	r7, r3, #24
 8019ab2:	f856 5b04 	ldr.w	r5, [r6], #4
 8019ab6:	600e      	str	r6, [r1, #0]
 8019ab8:	d514      	bpl.n	8019ae4 <_printf_i+0x1ac>
 8019aba:	07d9      	lsls	r1, r3, #31
 8019abc:	bf44      	itt	mi
 8019abe:	f043 0320 	orrmi.w	r3, r3, #32
 8019ac2:	6023      	strmi	r3, [r4, #0]
 8019ac4:	b91d      	cbnz	r5, 8019ace <_printf_i+0x196>
 8019ac6:	6823      	ldr	r3, [r4, #0]
 8019ac8:	f023 0320 	bic.w	r3, r3, #32
 8019acc:	6023      	str	r3, [r4, #0]
 8019ace:	2310      	movs	r3, #16
 8019ad0:	e7b0      	b.n	8019a34 <_printf_i+0xfc>
 8019ad2:	6823      	ldr	r3, [r4, #0]
 8019ad4:	f043 0320 	orr.w	r3, r3, #32
 8019ad8:	6023      	str	r3, [r4, #0]
 8019ada:	2378      	movs	r3, #120	; 0x78
 8019adc:	4828      	ldr	r0, [pc, #160]	; (8019b80 <_printf_i+0x248>)
 8019ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019ae2:	e7e3      	b.n	8019aac <_printf_i+0x174>
 8019ae4:	065e      	lsls	r6, r3, #25
 8019ae6:	bf48      	it	mi
 8019ae8:	b2ad      	uxthmi	r5, r5
 8019aea:	e7e6      	b.n	8019aba <_printf_i+0x182>
 8019aec:	4616      	mov	r6, r2
 8019aee:	e7bb      	b.n	8019a68 <_printf_i+0x130>
 8019af0:	680b      	ldr	r3, [r1, #0]
 8019af2:	6826      	ldr	r6, [r4, #0]
 8019af4:	6960      	ldr	r0, [r4, #20]
 8019af6:	1d1d      	adds	r5, r3, #4
 8019af8:	600d      	str	r5, [r1, #0]
 8019afa:	0635      	lsls	r5, r6, #24
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	d501      	bpl.n	8019b04 <_printf_i+0x1cc>
 8019b00:	6018      	str	r0, [r3, #0]
 8019b02:	e002      	b.n	8019b0a <_printf_i+0x1d2>
 8019b04:	0671      	lsls	r1, r6, #25
 8019b06:	d5fb      	bpl.n	8019b00 <_printf_i+0x1c8>
 8019b08:	8018      	strh	r0, [r3, #0]
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	6123      	str	r3, [r4, #16]
 8019b0e:	4616      	mov	r6, r2
 8019b10:	e7ba      	b.n	8019a88 <_printf_i+0x150>
 8019b12:	680b      	ldr	r3, [r1, #0]
 8019b14:	1d1a      	adds	r2, r3, #4
 8019b16:	600a      	str	r2, [r1, #0]
 8019b18:	681e      	ldr	r6, [r3, #0]
 8019b1a:	6862      	ldr	r2, [r4, #4]
 8019b1c:	2100      	movs	r1, #0
 8019b1e:	4630      	mov	r0, r6
 8019b20:	f7e6 fbfe 	bl	8000320 <memchr>
 8019b24:	b108      	cbz	r0, 8019b2a <_printf_i+0x1f2>
 8019b26:	1b80      	subs	r0, r0, r6
 8019b28:	6060      	str	r0, [r4, #4]
 8019b2a:	6863      	ldr	r3, [r4, #4]
 8019b2c:	6123      	str	r3, [r4, #16]
 8019b2e:	2300      	movs	r3, #0
 8019b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b34:	e7a8      	b.n	8019a88 <_printf_i+0x150>
 8019b36:	6923      	ldr	r3, [r4, #16]
 8019b38:	4632      	mov	r2, r6
 8019b3a:	4649      	mov	r1, r9
 8019b3c:	4640      	mov	r0, r8
 8019b3e:	47d0      	blx	sl
 8019b40:	3001      	adds	r0, #1
 8019b42:	d0ab      	beq.n	8019a9c <_printf_i+0x164>
 8019b44:	6823      	ldr	r3, [r4, #0]
 8019b46:	079b      	lsls	r3, r3, #30
 8019b48:	d413      	bmi.n	8019b72 <_printf_i+0x23a>
 8019b4a:	68e0      	ldr	r0, [r4, #12]
 8019b4c:	9b03      	ldr	r3, [sp, #12]
 8019b4e:	4298      	cmp	r0, r3
 8019b50:	bfb8      	it	lt
 8019b52:	4618      	movlt	r0, r3
 8019b54:	e7a4      	b.n	8019aa0 <_printf_i+0x168>
 8019b56:	2301      	movs	r3, #1
 8019b58:	4632      	mov	r2, r6
 8019b5a:	4649      	mov	r1, r9
 8019b5c:	4640      	mov	r0, r8
 8019b5e:	47d0      	blx	sl
 8019b60:	3001      	adds	r0, #1
 8019b62:	d09b      	beq.n	8019a9c <_printf_i+0x164>
 8019b64:	3501      	adds	r5, #1
 8019b66:	68e3      	ldr	r3, [r4, #12]
 8019b68:	9903      	ldr	r1, [sp, #12]
 8019b6a:	1a5b      	subs	r3, r3, r1
 8019b6c:	42ab      	cmp	r3, r5
 8019b6e:	dcf2      	bgt.n	8019b56 <_printf_i+0x21e>
 8019b70:	e7eb      	b.n	8019b4a <_printf_i+0x212>
 8019b72:	2500      	movs	r5, #0
 8019b74:	f104 0619 	add.w	r6, r4, #25
 8019b78:	e7f5      	b.n	8019b66 <_printf_i+0x22e>
 8019b7a:	bf00      	nop
 8019b7c:	0801d5f7 	.word	0x0801d5f7
 8019b80:	0801d608 	.word	0x0801d608

08019b84 <_read_r>:
 8019b84:	b538      	push	{r3, r4, r5, lr}
 8019b86:	4d07      	ldr	r5, [pc, #28]	; (8019ba4 <_read_r+0x20>)
 8019b88:	4604      	mov	r4, r0
 8019b8a:	4608      	mov	r0, r1
 8019b8c:	4611      	mov	r1, r2
 8019b8e:	2200      	movs	r2, #0
 8019b90:	602a      	str	r2, [r5, #0]
 8019b92:	461a      	mov	r2, r3
 8019b94:	f7e7 ffb8 	bl	8001b08 <_read>
 8019b98:	1c43      	adds	r3, r0, #1
 8019b9a:	d102      	bne.n	8019ba2 <_read_r+0x1e>
 8019b9c:	682b      	ldr	r3, [r5, #0]
 8019b9e:	b103      	cbz	r3, 8019ba2 <_read_r+0x1e>
 8019ba0:	6023      	str	r3, [r4, #0]
 8019ba2:	bd38      	pop	{r3, r4, r5, pc}
 8019ba4:	24007878 	.word	0x24007878

08019ba8 <__swbuf_r>:
 8019ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019baa:	460e      	mov	r6, r1
 8019bac:	4614      	mov	r4, r2
 8019bae:	4605      	mov	r5, r0
 8019bb0:	b118      	cbz	r0, 8019bba <__swbuf_r+0x12>
 8019bb2:	6983      	ldr	r3, [r0, #24]
 8019bb4:	b90b      	cbnz	r3, 8019bba <__swbuf_r+0x12>
 8019bb6:	f7ff f8f9 	bl	8018dac <__sinit>
 8019bba:	4b21      	ldr	r3, [pc, #132]	; (8019c40 <__swbuf_r+0x98>)
 8019bbc:	429c      	cmp	r4, r3
 8019bbe:	d12b      	bne.n	8019c18 <__swbuf_r+0x70>
 8019bc0:	686c      	ldr	r4, [r5, #4]
 8019bc2:	69a3      	ldr	r3, [r4, #24]
 8019bc4:	60a3      	str	r3, [r4, #8]
 8019bc6:	89a3      	ldrh	r3, [r4, #12]
 8019bc8:	071a      	lsls	r2, r3, #28
 8019bca:	d52f      	bpl.n	8019c2c <__swbuf_r+0x84>
 8019bcc:	6923      	ldr	r3, [r4, #16]
 8019bce:	b36b      	cbz	r3, 8019c2c <__swbuf_r+0x84>
 8019bd0:	6923      	ldr	r3, [r4, #16]
 8019bd2:	6820      	ldr	r0, [r4, #0]
 8019bd4:	1ac0      	subs	r0, r0, r3
 8019bd6:	6963      	ldr	r3, [r4, #20]
 8019bd8:	b2f6      	uxtb	r6, r6
 8019bda:	4283      	cmp	r3, r0
 8019bdc:	4637      	mov	r7, r6
 8019bde:	dc04      	bgt.n	8019bea <__swbuf_r+0x42>
 8019be0:	4621      	mov	r1, r4
 8019be2:	4628      	mov	r0, r5
 8019be4:	f7ff fc1c 	bl	8019420 <_fflush_r>
 8019be8:	bb30      	cbnz	r0, 8019c38 <__swbuf_r+0x90>
 8019bea:	68a3      	ldr	r3, [r4, #8]
 8019bec:	3b01      	subs	r3, #1
 8019bee:	60a3      	str	r3, [r4, #8]
 8019bf0:	6823      	ldr	r3, [r4, #0]
 8019bf2:	1c5a      	adds	r2, r3, #1
 8019bf4:	6022      	str	r2, [r4, #0]
 8019bf6:	701e      	strb	r6, [r3, #0]
 8019bf8:	6963      	ldr	r3, [r4, #20]
 8019bfa:	3001      	adds	r0, #1
 8019bfc:	4283      	cmp	r3, r0
 8019bfe:	d004      	beq.n	8019c0a <__swbuf_r+0x62>
 8019c00:	89a3      	ldrh	r3, [r4, #12]
 8019c02:	07db      	lsls	r3, r3, #31
 8019c04:	d506      	bpl.n	8019c14 <__swbuf_r+0x6c>
 8019c06:	2e0a      	cmp	r6, #10
 8019c08:	d104      	bne.n	8019c14 <__swbuf_r+0x6c>
 8019c0a:	4621      	mov	r1, r4
 8019c0c:	4628      	mov	r0, r5
 8019c0e:	f7ff fc07 	bl	8019420 <_fflush_r>
 8019c12:	b988      	cbnz	r0, 8019c38 <__swbuf_r+0x90>
 8019c14:	4638      	mov	r0, r7
 8019c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c18:	4b0a      	ldr	r3, [pc, #40]	; (8019c44 <__swbuf_r+0x9c>)
 8019c1a:	429c      	cmp	r4, r3
 8019c1c:	d101      	bne.n	8019c22 <__swbuf_r+0x7a>
 8019c1e:	68ac      	ldr	r4, [r5, #8]
 8019c20:	e7cf      	b.n	8019bc2 <__swbuf_r+0x1a>
 8019c22:	4b09      	ldr	r3, [pc, #36]	; (8019c48 <__swbuf_r+0xa0>)
 8019c24:	429c      	cmp	r4, r3
 8019c26:	bf08      	it	eq
 8019c28:	68ec      	ldreq	r4, [r5, #12]
 8019c2a:	e7ca      	b.n	8019bc2 <__swbuf_r+0x1a>
 8019c2c:	4621      	mov	r1, r4
 8019c2e:	4628      	mov	r0, r5
 8019c30:	f000 f80c 	bl	8019c4c <__swsetup_r>
 8019c34:	2800      	cmp	r0, #0
 8019c36:	d0cb      	beq.n	8019bd0 <__swbuf_r+0x28>
 8019c38:	f04f 37ff 	mov.w	r7, #4294967295
 8019c3c:	e7ea      	b.n	8019c14 <__swbuf_r+0x6c>
 8019c3e:	bf00      	nop
 8019c40:	0801d4f0 	.word	0x0801d4f0
 8019c44:	0801d510 	.word	0x0801d510
 8019c48:	0801d4d0 	.word	0x0801d4d0

08019c4c <__swsetup_r>:
 8019c4c:	4b32      	ldr	r3, [pc, #200]	; (8019d18 <__swsetup_r+0xcc>)
 8019c4e:	b570      	push	{r4, r5, r6, lr}
 8019c50:	681d      	ldr	r5, [r3, #0]
 8019c52:	4606      	mov	r6, r0
 8019c54:	460c      	mov	r4, r1
 8019c56:	b125      	cbz	r5, 8019c62 <__swsetup_r+0x16>
 8019c58:	69ab      	ldr	r3, [r5, #24]
 8019c5a:	b913      	cbnz	r3, 8019c62 <__swsetup_r+0x16>
 8019c5c:	4628      	mov	r0, r5
 8019c5e:	f7ff f8a5 	bl	8018dac <__sinit>
 8019c62:	4b2e      	ldr	r3, [pc, #184]	; (8019d1c <__swsetup_r+0xd0>)
 8019c64:	429c      	cmp	r4, r3
 8019c66:	d10f      	bne.n	8019c88 <__swsetup_r+0x3c>
 8019c68:	686c      	ldr	r4, [r5, #4]
 8019c6a:	89a3      	ldrh	r3, [r4, #12]
 8019c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019c70:	0719      	lsls	r1, r3, #28
 8019c72:	d42c      	bmi.n	8019cce <__swsetup_r+0x82>
 8019c74:	06dd      	lsls	r5, r3, #27
 8019c76:	d411      	bmi.n	8019c9c <__swsetup_r+0x50>
 8019c78:	2309      	movs	r3, #9
 8019c7a:	6033      	str	r3, [r6, #0]
 8019c7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019c80:	81a3      	strh	r3, [r4, #12]
 8019c82:	f04f 30ff 	mov.w	r0, #4294967295
 8019c86:	e03e      	b.n	8019d06 <__swsetup_r+0xba>
 8019c88:	4b25      	ldr	r3, [pc, #148]	; (8019d20 <__swsetup_r+0xd4>)
 8019c8a:	429c      	cmp	r4, r3
 8019c8c:	d101      	bne.n	8019c92 <__swsetup_r+0x46>
 8019c8e:	68ac      	ldr	r4, [r5, #8]
 8019c90:	e7eb      	b.n	8019c6a <__swsetup_r+0x1e>
 8019c92:	4b24      	ldr	r3, [pc, #144]	; (8019d24 <__swsetup_r+0xd8>)
 8019c94:	429c      	cmp	r4, r3
 8019c96:	bf08      	it	eq
 8019c98:	68ec      	ldreq	r4, [r5, #12]
 8019c9a:	e7e6      	b.n	8019c6a <__swsetup_r+0x1e>
 8019c9c:	0758      	lsls	r0, r3, #29
 8019c9e:	d512      	bpl.n	8019cc6 <__swsetup_r+0x7a>
 8019ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ca2:	b141      	cbz	r1, 8019cb6 <__swsetup_r+0x6a>
 8019ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ca8:	4299      	cmp	r1, r3
 8019caa:	d002      	beq.n	8019cb2 <__swsetup_r+0x66>
 8019cac:	4630      	mov	r0, r6
 8019cae:	f7ff fc2b 	bl	8019508 <_free_r>
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	6363      	str	r3, [r4, #52]	; 0x34
 8019cb6:	89a3      	ldrh	r3, [r4, #12]
 8019cb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019cbc:	81a3      	strh	r3, [r4, #12]
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	6063      	str	r3, [r4, #4]
 8019cc2:	6923      	ldr	r3, [r4, #16]
 8019cc4:	6023      	str	r3, [r4, #0]
 8019cc6:	89a3      	ldrh	r3, [r4, #12]
 8019cc8:	f043 0308 	orr.w	r3, r3, #8
 8019ccc:	81a3      	strh	r3, [r4, #12]
 8019cce:	6923      	ldr	r3, [r4, #16]
 8019cd0:	b94b      	cbnz	r3, 8019ce6 <__swsetup_r+0x9a>
 8019cd2:	89a3      	ldrh	r3, [r4, #12]
 8019cd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019cdc:	d003      	beq.n	8019ce6 <__swsetup_r+0x9a>
 8019cde:	4621      	mov	r1, r4
 8019ce0:	4630      	mov	r0, r6
 8019ce2:	f000 f84d 	bl	8019d80 <__smakebuf_r>
 8019ce6:	89a0      	ldrh	r0, [r4, #12]
 8019ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019cec:	f010 0301 	ands.w	r3, r0, #1
 8019cf0:	d00a      	beq.n	8019d08 <__swsetup_r+0xbc>
 8019cf2:	2300      	movs	r3, #0
 8019cf4:	60a3      	str	r3, [r4, #8]
 8019cf6:	6963      	ldr	r3, [r4, #20]
 8019cf8:	425b      	negs	r3, r3
 8019cfa:	61a3      	str	r3, [r4, #24]
 8019cfc:	6923      	ldr	r3, [r4, #16]
 8019cfe:	b943      	cbnz	r3, 8019d12 <__swsetup_r+0xc6>
 8019d00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019d04:	d1ba      	bne.n	8019c7c <__swsetup_r+0x30>
 8019d06:	bd70      	pop	{r4, r5, r6, pc}
 8019d08:	0781      	lsls	r1, r0, #30
 8019d0a:	bf58      	it	pl
 8019d0c:	6963      	ldrpl	r3, [r4, #20]
 8019d0e:	60a3      	str	r3, [r4, #8]
 8019d10:	e7f4      	b.n	8019cfc <__swsetup_r+0xb0>
 8019d12:	2000      	movs	r0, #0
 8019d14:	e7f7      	b.n	8019d06 <__swsetup_r+0xba>
 8019d16:	bf00      	nop
 8019d18:	2400003c 	.word	0x2400003c
 8019d1c:	0801d4f0 	.word	0x0801d4f0
 8019d20:	0801d510 	.word	0x0801d510
 8019d24:	0801d4d0 	.word	0x0801d4d0

08019d28 <abort>:
 8019d28:	b508      	push	{r3, lr}
 8019d2a:	2006      	movs	r0, #6
 8019d2c:	f000 f890 	bl	8019e50 <raise>
 8019d30:	2001      	movs	r0, #1
 8019d32:	f7e7 fedf 	bl	8001af4 <_exit>

08019d36 <__swhatbuf_r>:
 8019d36:	b570      	push	{r4, r5, r6, lr}
 8019d38:	460e      	mov	r6, r1
 8019d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d3e:	2900      	cmp	r1, #0
 8019d40:	b096      	sub	sp, #88	; 0x58
 8019d42:	4614      	mov	r4, r2
 8019d44:	461d      	mov	r5, r3
 8019d46:	da07      	bge.n	8019d58 <__swhatbuf_r+0x22>
 8019d48:	2300      	movs	r3, #0
 8019d4a:	602b      	str	r3, [r5, #0]
 8019d4c:	89b3      	ldrh	r3, [r6, #12]
 8019d4e:	061a      	lsls	r2, r3, #24
 8019d50:	d410      	bmi.n	8019d74 <__swhatbuf_r+0x3e>
 8019d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019d56:	e00e      	b.n	8019d76 <__swhatbuf_r+0x40>
 8019d58:	466a      	mov	r2, sp
 8019d5a:	f000 f895 	bl	8019e88 <_fstat_r>
 8019d5e:	2800      	cmp	r0, #0
 8019d60:	dbf2      	blt.n	8019d48 <__swhatbuf_r+0x12>
 8019d62:	9a01      	ldr	r2, [sp, #4]
 8019d64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019d68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019d6c:	425a      	negs	r2, r3
 8019d6e:	415a      	adcs	r2, r3
 8019d70:	602a      	str	r2, [r5, #0]
 8019d72:	e7ee      	b.n	8019d52 <__swhatbuf_r+0x1c>
 8019d74:	2340      	movs	r3, #64	; 0x40
 8019d76:	2000      	movs	r0, #0
 8019d78:	6023      	str	r3, [r4, #0]
 8019d7a:	b016      	add	sp, #88	; 0x58
 8019d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019d80 <__smakebuf_r>:
 8019d80:	898b      	ldrh	r3, [r1, #12]
 8019d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019d84:	079d      	lsls	r5, r3, #30
 8019d86:	4606      	mov	r6, r0
 8019d88:	460c      	mov	r4, r1
 8019d8a:	d507      	bpl.n	8019d9c <__smakebuf_r+0x1c>
 8019d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019d90:	6023      	str	r3, [r4, #0]
 8019d92:	6123      	str	r3, [r4, #16]
 8019d94:	2301      	movs	r3, #1
 8019d96:	6163      	str	r3, [r4, #20]
 8019d98:	b002      	add	sp, #8
 8019d9a:	bd70      	pop	{r4, r5, r6, pc}
 8019d9c:	ab01      	add	r3, sp, #4
 8019d9e:	466a      	mov	r2, sp
 8019da0:	f7ff ffc9 	bl	8019d36 <__swhatbuf_r>
 8019da4:	9900      	ldr	r1, [sp, #0]
 8019da6:	4605      	mov	r5, r0
 8019da8:	4630      	mov	r0, r6
 8019daa:	f7ff f8e9 	bl	8018f80 <_malloc_r>
 8019dae:	b948      	cbnz	r0, 8019dc4 <__smakebuf_r+0x44>
 8019db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019db4:	059a      	lsls	r2, r3, #22
 8019db6:	d4ef      	bmi.n	8019d98 <__smakebuf_r+0x18>
 8019db8:	f023 0303 	bic.w	r3, r3, #3
 8019dbc:	f043 0302 	orr.w	r3, r3, #2
 8019dc0:	81a3      	strh	r3, [r4, #12]
 8019dc2:	e7e3      	b.n	8019d8c <__smakebuf_r+0xc>
 8019dc4:	4b0d      	ldr	r3, [pc, #52]	; (8019dfc <__smakebuf_r+0x7c>)
 8019dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8019dc8:	89a3      	ldrh	r3, [r4, #12]
 8019dca:	6020      	str	r0, [r4, #0]
 8019dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019dd0:	81a3      	strh	r3, [r4, #12]
 8019dd2:	9b00      	ldr	r3, [sp, #0]
 8019dd4:	6163      	str	r3, [r4, #20]
 8019dd6:	9b01      	ldr	r3, [sp, #4]
 8019dd8:	6120      	str	r0, [r4, #16]
 8019dda:	b15b      	cbz	r3, 8019df4 <__smakebuf_r+0x74>
 8019ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019de0:	4630      	mov	r0, r6
 8019de2:	f000 f863 	bl	8019eac <_isatty_r>
 8019de6:	b128      	cbz	r0, 8019df4 <__smakebuf_r+0x74>
 8019de8:	89a3      	ldrh	r3, [r4, #12]
 8019dea:	f023 0303 	bic.w	r3, r3, #3
 8019dee:	f043 0301 	orr.w	r3, r3, #1
 8019df2:	81a3      	strh	r3, [r4, #12]
 8019df4:	89a0      	ldrh	r0, [r4, #12]
 8019df6:	4305      	orrs	r5, r0
 8019df8:	81a5      	strh	r5, [r4, #12]
 8019dfa:	e7cd      	b.n	8019d98 <__smakebuf_r+0x18>
 8019dfc:	08018d45 	.word	0x08018d45

08019e00 <_raise_r>:
 8019e00:	291f      	cmp	r1, #31
 8019e02:	b538      	push	{r3, r4, r5, lr}
 8019e04:	4604      	mov	r4, r0
 8019e06:	460d      	mov	r5, r1
 8019e08:	d904      	bls.n	8019e14 <_raise_r+0x14>
 8019e0a:	2316      	movs	r3, #22
 8019e0c:	6003      	str	r3, [r0, #0]
 8019e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8019e12:	bd38      	pop	{r3, r4, r5, pc}
 8019e14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019e16:	b112      	cbz	r2, 8019e1e <_raise_r+0x1e>
 8019e18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019e1c:	b94b      	cbnz	r3, 8019e32 <_raise_r+0x32>
 8019e1e:	4620      	mov	r0, r4
 8019e20:	f000 f830 	bl	8019e84 <_getpid_r>
 8019e24:	462a      	mov	r2, r5
 8019e26:	4601      	mov	r1, r0
 8019e28:	4620      	mov	r0, r4
 8019e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e2e:	f000 b817 	b.w	8019e60 <_kill_r>
 8019e32:	2b01      	cmp	r3, #1
 8019e34:	d00a      	beq.n	8019e4c <_raise_r+0x4c>
 8019e36:	1c59      	adds	r1, r3, #1
 8019e38:	d103      	bne.n	8019e42 <_raise_r+0x42>
 8019e3a:	2316      	movs	r3, #22
 8019e3c:	6003      	str	r3, [r0, #0]
 8019e3e:	2001      	movs	r0, #1
 8019e40:	e7e7      	b.n	8019e12 <_raise_r+0x12>
 8019e42:	2400      	movs	r4, #0
 8019e44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019e48:	4628      	mov	r0, r5
 8019e4a:	4798      	blx	r3
 8019e4c:	2000      	movs	r0, #0
 8019e4e:	e7e0      	b.n	8019e12 <_raise_r+0x12>

08019e50 <raise>:
 8019e50:	4b02      	ldr	r3, [pc, #8]	; (8019e5c <raise+0xc>)
 8019e52:	4601      	mov	r1, r0
 8019e54:	6818      	ldr	r0, [r3, #0]
 8019e56:	f7ff bfd3 	b.w	8019e00 <_raise_r>
 8019e5a:	bf00      	nop
 8019e5c:	2400003c 	.word	0x2400003c

08019e60 <_kill_r>:
 8019e60:	b538      	push	{r3, r4, r5, lr}
 8019e62:	4d07      	ldr	r5, [pc, #28]	; (8019e80 <_kill_r+0x20>)
 8019e64:	2300      	movs	r3, #0
 8019e66:	4604      	mov	r4, r0
 8019e68:	4608      	mov	r0, r1
 8019e6a:	4611      	mov	r1, r2
 8019e6c:	602b      	str	r3, [r5, #0]
 8019e6e:	f7e7 fe2f 	bl	8001ad0 <_kill>
 8019e72:	1c43      	adds	r3, r0, #1
 8019e74:	d102      	bne.n	8019e7c <_kill_r+0x1c>
 8019e76:	682b      	ldr	r3, [r5, #0]
 8019e78:	b103      	cbz	r3, 8019e7c <_kill_r+0x1c>
 8019e7a:	6023      	str	r3, [r4, #0]
 8019e7c:	bd38      	pop	{r3, r4, r5, pc}
 8019e7e:	bf00      	nop
 8019e80:	24007878 	.word	0x24007878

08019e84 <_getpid_r>:
 8019e84:	f7e7 be1c 	b.w	8001ac0 <_getpid>

08019e88 <_fstat_r>:
 8019e88:	b538      	push	{r3, r4, r5, lr}
 8019e8a:	4d07      	ldr	r5, [pc, #28]	; (8019ea8 <_fstat_r+0x20>)
 8019e8c:	2300      	movs	r3, #0
 8019e8e:	4604      	mov	r4, r0
 8019e90:	4608      	mov	r0, r1
 8019e92:	4611      	mov	r1, r2
 8019e94:	602b      	str	r3, [r5, #0]
 8019e96:	f7e7 fe7c 	bl	8001b92 <_fstat>
 8019e9a:	1c43      	adds	r3, r0, #1
 8019e9c:	d102      	bne.n	8019ea4 <_fstat_r+0x1c>
 8019e9e:	682b      	ldr	r3, [r5, #0]
 8019ea0:	b103      	cbz	r3, 8019ea4 <_fstat_r+0x1c>
 8019ea2:	6023      	str	r3, [r4, #0]
 8019ea4:	bd38      	pop	{r3, r4, r5, pc}
 8019ea6:	bf00      	nop
 8019ea8:	24007878 	.word	0x24007878

08019eac <_isatty_r>:
 8019eac:	b538      	push	{r3, r4, r5, lr}
 8019eae:	4d06      	ldr	r5, [pc, #24]	; (8019ec8 <_isatty_r+0x1c>)
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	4604      	mov	r4, r0
 8019eb4:	4608      	mov	r0, r1
 8019eb6:	602b      	str	r3, [r5, #0]
 8019eb8:	f7e7 fe7b 	bl	8001bb2 <_isatty>
 8019ebc:	1c43      	adds	r3, r0, #1
 8019ebe:	d102      	bne.n	8019ec6 <_isatty_r+0x1a>
 8019ec0:	682b      	ldr	r3, [r5, #0]
 8019ec2:	b103      	cbz	r3, 8019ec6 <_isatty_r+0x1a>
 8019ec4:	6023      	str	r3, [r4, #0]
 8019ec6:	bd38      	pop	{r3, r4, r5, pc}
 8019ec8:	24007878 	.word	0x24007878

08019ecc <_init>:
 8019ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ece:	bf00      	nop
 8019ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ed2:	bc08      	pop	{r3}
 8019ed4:	469e      	mov	lr, r3
 8019ed6:	4770      	bx	lr

08019ed8 <_fini>:
 8019ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eda:	bf00      	nop
 8019edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ede:	bc08      	pop	{r3}
 8019ee0:	469e      	mov	lr, r3
 8019ee2:	4770      	bx	lr
