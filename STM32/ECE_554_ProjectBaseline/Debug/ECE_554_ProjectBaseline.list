
ECE_554_ProjectBaseline.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000198d0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004454  08019ba0  08019ba0  00029ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801dff4  0801dff4  0002dff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801dffc  0801dffc  0002dffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e000  0801e000  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a8  24000000  0801e004  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007788  240000a8  0801e0ac  000300a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24007830  0801e0ac  00037830  2**0
                  ALLOC
  9 .lwip_sec     000018d0  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0006ec0b  00000000  00000000  000300d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000ad2c  00000000  00000000  0009ece1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c68  00000000  00000000  000a9a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002a30  00000000  00000000  000ac678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00047df5  00000000  00000000  000af0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004665f  00000000  00000000  000f6e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001804a1  00000000  00000000  0013d4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002bd99d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c174  00000000  00000000  002bd9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000a8 	.word	0x240000a8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08019b88 	.word	0x08019b88

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000ac 	.word	0x240000ac
 800030c:	08019b88 	.word	0x08019b88

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af02      	add	r7, sp, #8
 80006be:	4604      	mov	r4, r0
 80006c0:	4608      	mov	r0, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	461a      	mov	r2, r3
 80006c6:	4623      	mov	r3, r4
 80006c8:	80fb      	strh	r3, [r7, #6]
 80006ca:	4603      	mov	r3, r0
 80006cc:	80bb      	strh	r3, [r7, #4]
 80006ce:	460b      	mov	r3, r1
 80006d0:	807b      	strh	r3, [r7, #2]
 80006d2:	4613      	mov	r3, r2
 80006d4:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80006d6:	88f8      	ldrh	r0, [r7, #6]
 80006d8:	88b9      	ldrh	r1, [r7, #4]
 80006da:	887a      	ldrh	r2, [r7, #2]
 80006dc:	883c      	ldrh	r4, [r7, #0]
 80006de:	8b3b      	ldrh	r3, [r7, #24]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4623      	mov	r3, r4
 80006e4:	f000 fa88 	bl	8000bf8 <ST7735_FillRectangle>
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <fillScreen+0x2c>)
 80006fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <fillScreen+0x30>)
 8000702:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	460b      	mov	r3, r1
 800070c:	2100      	movs	r1, #0
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ffd2 	bl	80006b8 <fillRect>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	24004228 	.word	0x24004228
 8000720:	2400422c 	.word	0x2400422c

08000724 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2101      	movs	r1, #1
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <ST7735_Select+0x14>)
 800072e:	f004 ff7f 	bl	8005630 <HAL_GPIO_WritePin>
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	58020800 	.word	0x58020800

0800073c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2101      	movs	r1, #1
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <ST7735_Unselect+0x14>)
 8000746:	f004 ff73 	bl	8005630 <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	58020800 	.word	0x58020800

08000754 <ST7735_Reset>:

void ST7735_Reset()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2108      	movs	r1, #8
 800075c:	4806      	ldr	r0, [pc, #24]	; (8000778 <ST7735_Reset+0x24>)
 800075e:	f004 ff67 	bl	8005630 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000762:	2005      	movs	r0, #5
 8000764:	f001 fff2 	bl	800274c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2108      	movs	r1, #8
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <ST7735_Reset+0x24>)
 800076e:	f004 ff5f 	bl	8005630 <HAL_GPIO_WritePin>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	58020800 	.word	0x58020800

0800077c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2108      	movs	r1, #8
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <ST7735_WriteCommand+0x2c>)
 800078c:	f004 ff50 	bl	8005630 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000790:	1df9      	adds	r1, r7, #7
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	2201      	movs	r2, #1
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <ST7735_WriteCommand+0x30>)
 800079a:	f007 fb6d 	bl	8007e78 <HAL_SPI_Transmit>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	58020000 	.word	0x58020000
 80007ac:	24004394 	.word	0x24004394

080007b0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2108      	movs	r1, #8
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <ST7735_WriteData+0x2c>)
 80007c0:	f004 ff36 	bl	8005630 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <ST7735_WriteData+0x30>)
 80007d0:	f007 fb52 	bl	8007e78 <HAL_SPI_Transmit>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	58020000 	.word	0x58020000
 80007e0:	24004394 	.word	0x24004394

080007e4 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80007f6:	e034      	b.n	8000862 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000802:	7afb      	ldrb	r3, [r7, #11]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ffb9 	bl	800077c <ST7735_WriteCommand>

        numArgs = *addr++;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000814:	7abb      	ldrb	r3, [r7, #10]
 8000816:	b29b      	uxth	r3, r3
 8000818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800081e:	7abb      	ldrb	r3, [r7, #10]
 8000820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000824:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000826:	7abb      	ldrb	r3, [r7, #10]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d008      	beq.n	800083e <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800082c:	7abb      	ldrb	r3, [r7, #10]
 800082e:	4619      	mov	r1, r3
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ffbd 	bl	80007b0 <ST7735_WriteData>
            addr += numArgs;
 8000836:	7abb      	ldrb	r3, [r7, #10]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800083e:	89bb      	ldrh	r3, [r7, #12]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00e      	beq.n	8000862 <DisplayInit+0x7e>
            ms = *addr++;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800084e:	89bb      	ldrh	r3, [r7, #12]
 8000850:	2bff      	cmp	r3, #255	; 0xff
 8000852:	d102      	bne.n	800085a <DisplayInit+0x76>
 8000854:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000858:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800085a:	89bb      	ldrh	r3, [r7, #12]
 800085c:	4618      	mov	r0, r3
 800085e:	f001 ff75 	bl	800274c <HAL_Delay>
    while(numCommands--) {
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	73fa      	strb	r2, [r7, #15]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1c5      	bne.n	80007f8 <DisplayInit+0x14>
        }
    }
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	4604      	mov	r4, r0
 8000880:	4608      	mov	r0, r1
 8000882:	4611      	mov	r1, r2
 8000884:	461a      	mov	r2, r3
 8000886:	4623      	mov	r3, r4
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	4603      	mov	r3, r0
 800088c:	71bb      	strb	r3, [r7, #6]
 800088e:	460b      	mov	r3, r1
 8000890:	717b      	strb	r3, [r7, #5]
 8000892:	4613      	mov	r3, r2
 8000894:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000896:	202a      	movs	r0, #42	; 0x2a
 8000898:	f7ff ff70 	bl	800077c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800089c:	2300      	movs	r3, #0
 800089e:	733b      	strb	r3, [r7, #12]
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <ST7735_SetAddressWindow+0x88>)
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4413      	add	r3, r2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	737b      	strb	r3, [r7, #13]
 80008ac:	2300      	movs	r3, #0
 80008ae:	73bb      	strb	r3, [r7, #14]
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <ST7735_SetAddressWindow+0x88>)
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	797b      	ldrb	r3, [r7, #5]
 80008b6:	4413      	add	r3, r2
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2104      	movs	r1, #4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff74 	bl	80007b0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80008c8:	202b      	movs	r0, #43	; 0x2b
 80008ca:	f7ff ff57 	bl	800077c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <ST7735_SetAddressWindow+0x8c>)
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	4413      	add	r3, r2
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <ST7735_SetAddressWindow+0x8c>)
 80008dc:	781a      	ldrb	r2, [r3, #0]
 80008de:	793b      	ldrb	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2104      	movs	r1, #4
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff5f 	bl	80007b0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80008f2:	202c      	movs	r0, #44	; 0x2c
 80008f4:	f7ff ff42 	bl	800077c <ST7735_WriteCommand>
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	24004220 	.word	0x24004220
 8000904:	24004224 	.word	0x24004224

08000908 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000912:	f7ff ff07 	bl	8000724 <ST7735_Select>
    ST7735_Reset();
 8000916:	f7ff ff1d 	bl	8000754 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <ST7735_Init+0x44>)
 800091c:	f7ff ff62 	bl	80007e4 <DisplayInit>
    DisplayInit(init_cmds2);
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <ST7735_Init+0x48>)
 8000922:	f7ff ff5f 	bl	80007e4 <DisplayInit>
    DisplayInit(init_cmds3);
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <ST7735_Init+0x4c>)
 8000928:	f7ff ff5c 	bl	80007e4 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <ST7735_Init+0x50>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <ST7735_Init+0x54>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f810 	bl	8000960 <ST7735_SetRotation>
    ST7735_Unselect();
 8000940:	f7ff fefc 	bl	800073c <ST7735_Unselect>

}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	0801c7ec 	.word	0x0801c7ec
 8000950:	0801c824 	.word	0x0801c824
 8000954:	0801c834 	.word	0x0801c834
 8000958:	24004221 	.word	0x24004221
 800095c:	24004225 	.word	0x24004225

08000960 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <ST7735_SetRotation+0xe4>)
 8000978:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800097a:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <ST7735_SetRotation+0xe4>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d84e      	bhi.n	8000a20 <ST7735_SetRotation+0xc0>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <ST7735_SetRotation+0x28>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000999 	.word	0x08000999
 800098c:	080009bb 	.word	0x080009bb
 8000990:	080009dd 	.word	0x080009dd
 8000994:	080009ff 	.word	0x080009ff
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000998:	23c0      	movs	r3, #192	; 0xc0
 800099a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <ST7735_SetRotation+0xe8>)
 800099e:	22a0      	movs	r2, #160	; 0xa0
 80009a0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <ST7735_SetRotation+0xec>)
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <ST7735_SetRotation+0xf0>)
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <ST7735_SetRotation+0xf4>)
 80009ae:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <ST7735_SetRotation+0xf8>)
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <ST7735_SetRotation+0xfc>)
 80009b6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009b8:	e032      	b.n	8000a20 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009ba:	23a0      	movs	r3, #160	; 0xa0
 80009bc:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <ST7735_SetRotation+0xec>)
 80009c0:	22a0      	movs	r2, #160	; 0xa0
 80009c2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <ST7735_SetRotation+0xe8>)
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <ST7735_SetRotation+0xf0>)
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <ST7735_SetRotation+0xfc>)
 80009d0:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <ST7735_SetRotation+0xf8>)
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <ST7735_SetRotation+0xf4>)
 80009d8:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009da:	e021      	b.n	8000a20 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <ST7735_SetRotation+0xe8>)
 80009e2:	22a0      	movs	r2, #160	; 0xa0
 80009e4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <ST7735_SetRotation+0xec>)
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <ST7735_SetRotation+0xf0>)
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <ST7735_SetRotation+0xf4>)
 80009f2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <ST7735_SetRotation+0xf8>)
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <ST7735_SetRotation+0xfc>)
 80009fa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009fc:	e010      	b.n	8000a20 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009fe:	2360      	movs	r3, #96	; 0x60
 8000a00:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <ST7735_SetRotation+0xec>)
 8000a04:	22a0      	movs	r2, #160	; 0xa0
 8000a06:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <ST7735_SetRotation+0xe8>)
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <ST7735_SetRotation+0xf0>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <ST7735_SetRotation+0xfc>)
 8000a14:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <ST7735_SetRotation+0xf8>)
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <ST7735_SetRotation+0xf4>)
 8000a1c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a1e:	bf00      	nop
  }
  ST7735_Select();
 8000a20:	f7ff fe80 	bl	8000724 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a24:	2036      	movs	r0, #54	; 0x36
 8000a26:	f7ff fea9 	bl	800077c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a2a:	f107 030f 	add.w	r3, r7, #15
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff febd 	bl	80007b0 <ST7735_WriteData>
  ST7735_Unselect();
 8000a36:	f7ff fe81 	bl	800073c <ST7735_Unselect>
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	24004226 	.word	0x24004226
 8000a48:	2400422c 	.word	0x2400422c
 8000a4c:	24004228 	.word	0x24004228
 8000a50:	24004221 	.word	0x24004221
 8000a54:	24004220 	.word	0x24004220
 8000a58:	24004225 	.word	0x24004225
 8000a5c:	24004224 	.word	0x24004224

08000a60 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a60:	b082      	sub	sp, #8
 8000a62:	b590      	push	{r4, r7, lr}
 8000a64:	b089      	sub	sp, #36	; 0x24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	80bb      	strh	r3, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	b2d8      	uxtb	r0, r3
 8000a7a:	88bb      	ldrh	r3, [r7, #4]
 8000a7c:	b2d9      	uxtb	r1, r3
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a86:	4413      	add	r3, r2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	b2dc      	uxtb	r4, r3
 8000a8e:	88bb      	ldrh	r3, [r7, #4]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a96:	4413      	add	r3, r2
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4622      	mov	r2, r4
 8000aa0:	f7ff feea 	bl	8000878 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
 8000aa8:	e043      	b.n	8000b32 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	3b20      	subs	r3, #32
 8000ab0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000ab4:	fb01 f303 	mul.w	r3, r1, r3
 8000ab8:	4619      	mov	r1, r3
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	440b      	add	r3, r1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	e029      	b.n	8000b20 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00e      	beq.n	8000afa <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000adc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	743b      	strb	r3, [r7, #16]
 8000ae6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2102      	movs	r1, #2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fe5c 	bl	80007b0 <ST7735_WriteData>
 8000af8:	e00f      	b.n	8000b1a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000afa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	733b      	strb	r3, [r7, #12]
 8000b06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2102      	movs	r1, #2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe4b 	bl	80007b0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b24:	461a      	mov	r2, r3
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d3cf      	bcc.n	8000acc <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b36:	461a      	mov	r2, r3
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d3b5      	bcc.n	8000aaa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b3e:	bf00      	nop
 8000b40:	bf00      	nop
 8000b42:	3724      	adds	r7, #36	; 0x24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b4a:	b002      	add	sp, #8
 8000b4c:	4770      	bx	lr
	...

08000b50 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b50:	b082      	sub	sp, #8
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af04      	add	r7, sp, #16
 8000b58:	603a      	str	r2, [r7, #0]
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	80fb      	strh	r3, [r7, #6]
 8000b60:	460b      	mov	r3, r1
 8000b62:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000b64:	f7ff fdde 	bl	8000724 <ST7735_Select>

    while(*str) {
 8000b68:	e033      	b.n	8000bd2 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	7d3a      	ldrb	r2, [r7, #20]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <ST7735_WriteString+0xa0>)
 8000b72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	db16      	blt.n	8000ba8 <ST7735_WriteString+0x58>
            x = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b7e:	7d7b      	ldrb	r3, [r7, #21]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	7d7a      	ldrb	r2, [r7, #21]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <ST7735_WriteString+0xa4>)
 8000b90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b94:	4293      	cmp	r3, r2
 8000b96:	da21      	bge.n	8000bdc <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b20      	cmp	r3, #32
 8000b9e:	d103      	bne.n	8000ba8 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	603b      	str	r3, [r7, #0]
                continue;
 8000ba6:	e014      	b.n	8000bd2 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	88b9      	ldrh	r1, [r7, #4]
 8000bae:	88f8      	ldrh	r0, [r7, #6]
 8000bb0:	8c3b      	ldrh	r3, [r7, #32]
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	8bbb      	ldrh	r3, [r7, #28]
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f7ff ff4f 	bl	8000a60 <ST7735_WriteChar>
        x += font.width;
 8000bc2:	7d3b      	ldrb	r3, [r7, #20]
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	4413      	add	r3, r2
 8000bca:	80fb      	strh	r3, [r7, #6]
        str++;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1c7      	bne.n	8000b6a <ST7735_WriteString+0x1a>
 8000bda:	e000      	b.n	8000bde <ST7735_WriteString+0x8e>
                break;
 8000bdc:	bf00      	nop
    }

    ST7735_Unselect();
 8000bde:	f7ff fdad 	bl	800073c <ST7735_Unselect>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bec:	b002      	add	sp, #8
 8000bee:	4770      	bx	lr
 8000bf0:	24004228 	.word	0x24004228
 8000bf4:	2400422c 	.word	0x2400422c

08000bf8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	4611      	mov	r1, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	4623      	mov	r3, r4
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	807b      	strh	r3, [r7, #2]
 8000c12:	4613      	mov	r3, r2
 8000c14:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <ST7735_FillRectangle+0x100>)
 8000c1a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	da66      	bge.n	8000cf0 <ST7735_FillRectangle+0xf8>
 8000c22:	88bb      	ldrh	r3, [r7, #4]
 8000c24:	4a35      	ldr	r2, [pc, #212]	; (8000cfc <ST7735_FillRectangle+0x104>)
 8000c26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	da60      	bge.n	8000cf0 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000c2e:	88fa      	ldrh	r2, [r7, #6]
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a30      	ldr	r2, [pc, #192]	; (8000cf8 <ST7735_FillRectangle+0x100>)
 8000c36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	dd06      	ble.n	8000c4c <ST7735_FillRectangle+0x54>
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <ST7735_FillRectangle+0x100>)
 8000c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000c4c:	88ba      	ldrh	r2, [r7, #4]
 8000c4e:	883b      	ldrh	r3, [r7, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a2a      	ldr	r2, [pc, #168]	; (8000cfc <ST7735_FillRectangle+0x104>)
 8000c54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	dd06      	ble.n	8000c6a <ST7735_FillRectangle+0x72>
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <ST7735_FillRectangle+0x104>)
 8000c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000c6a:	f7ff fd5b 	bl	8000724 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	b2d8      	uxtb	r0, r3
 8000c72:	88bb      	ldrh	r3, [r7, #4]
 8000c74:	b2d9      	uxtb	r1, r3
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4413      	add	r3, r2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	3b01      	subs	r3, #1
 8000c84:	b2dc      	uxtb	r4, r3
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	883b      	ldrh	r3, [r7, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	3b01      	subs	r3, #1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4622      	mov	r2, r4
 8000c98:	f7ff fdee 	bl	8000878 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c9c:	8c3b      	ldrh	r3, [r7, #32]
 8000c9e:	0a1b      	lsrs	r3, r3, #8
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	733b      	strb	r3, [r7, #12]
 8000ca6:	8c3b      	ldrh	r3, [r7, #32]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2108      	movs	r1, #8
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <ST7735_FillRectangle+0x108>)
 8000cb2:	f004 fcbd 	bl	8005630 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000cb6:	883b      	ldrh	r3, [r7, #0]
 8000cb8:	80bb      	strh	r3, [r7, #4]
 8000cba:	e013      	b.n	8000ce4 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	80fb      	strh	r3, [r7, #6]
 8000cc0:	e00a      	b.n	8000cd8 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000cc2:	f107 010c 	add.w	r1, r7, #12
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	2202      	movs	r2, #2
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <ST7735_FillRectangle+0x10c>)
 8000cce:	f007 f8d3 	bl	8007e78 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	80fb      	strh	r3, [r7, #6]
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f1      	bne.n	8000cc2 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	80bb      	strh	r3, [r7, #4]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1e8      	bne.n	8000cbc <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000cea:	f7ff fd27 	bl	800073c <ST7735_Unselect>
 8000cee:	e000      	b.n	8000cf2 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8000cf0:	bf00      	nop
}
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd90      	pop	{r4, r7, pc}
 8000cf8:	24004228 	.word	0x24004228
 8000cfc:	2400422c 	.word	0x2400422c
 8000d00:	58020000 	.word	0x58020000
 8000d04:	24004394 	.word	0x24004394

08000d08 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d0e:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <MX_FDCAN1_Init+0xc4>)
 8000d10:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d32:	2202      	movs	r2, #2
 8000d34:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d38:	2208      	movs	r2, #8
 8000d3a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d3e:	221f      	movs	r2, #31
 8000d40:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d44:	2208      	movs	r2, #8
 8000d46:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d86:	2204      	movs	r2, #4
 8000d88:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d92:	2204      	movs	r2, #4
 8000d94:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_FDCAN1_Init+0xc0>)
 8000db6:	f003 fd09 	bl	80047cc <HAL_FDCAN_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000dc0:	f000 fc78 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	24004238 	.word	0x24004238
 8000dcc:	4000a000 	.word	0x4000a000

08000dd0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0b6      	sub	sp, #216	; 0xd8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	22b4      	movs	r2, #180	; 0xb4
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f017 fe93 	bl	8018b1c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a2d      	ldr	r2, [pc, #180]	; (8000eb0 <HAL_FDCAN_MspInit+0xe0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d152      	bne.n	8000ea6 <HAL_FDCAN_MspInit+0xd6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e04:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000e0a:	2319      	movs	r3, #25
 8000e0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 5;
 8000e12:	2305      	movs	r3, #5
 8000e14:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e1a:	23c0      	movs	r3, #192	; 0xc0
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000e26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e2a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 fbff 	bl	8006634 <HAL_RCCEx_PeriphCLKConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8000e3c:	f000 fc3a 	bl	80016b4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_FDCAN_MspInit+0xe4>)
 8000e42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e46:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <HAL_FDCAN_MspInit+0xe4>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_FDCAN_MspInit+0xe4>)
 8000e52:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_FDCAN_MspInit+0xe4>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <HAL_FDCAN_MspInit+0xe4>)
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_FDCAN_MspInit+0xe4>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e94:	2309      	movs	r3, #9
 8000e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_FDCAN_MspInit+0xe8>)
 8000ea2:	f004 fa1d 	bl	80052e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	37d8      	adds	r7, #216	; 0xd8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	4000a000 	.word	0x4000a000
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58020c00 	.word	0x58020c00

08000ebc <FDCAN1_MSG_config>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void FDCAN1_MSG_config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	//Prepare CAN data
	myTxData[0] = 0xFF;
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <FDCAN1_MSG_config+0xa8>)
 8000ec4:	22ff      	movs	r2, #255	; 0xff
 8000ec6:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x00;
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <FDCAN1_MSG_config+0xa8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFF;
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <FDCAN1_MSG_config+0xa8>)
 8000ed0:	22ff      	movs	r2, #255	; 0xff
 8000ed2:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x00;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <FDCAN1_MSG_config+0xa8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	70da      	strb	r2, [r3, #3]

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x123;
 8000eea:	f240 1323 	movw	r3, #291	; 0x123
 8000eee:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000ef0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ef4:	617b      	str	r3, [r7, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481b      	ldr	r0, [pc, #108]	; (8000f68 <FDCAN1_MSG_config+0xac>)
 8000efc:	f003 fe48 	bl	8004b90 <HAL_FDCAN_ConfigFilter>


	/* Configure global filter to reject all non-matching frames */
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000f00:	2301      	movs	r3, #1
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	2202      	movs	r2, #2
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4817      	ldr	r0, [pc, #92]	; (8000f68 <FDCAN1_MSG_config+0xac>)
 8000f0c:	f003 feb6 	bl	8004c7c <HAL_FDCAN_ConfigGlobalFilter>

	/* Start the FDCAN module */
	HAL_FDCAN_Start(&hfdcan1);
 8000f10:	4815      	ldr	r0, [pc, #84]	; (8000f68 <FDCAN1_MSG_config+0xac>)
 8000f12:	f003 fee0 	bl	8004cd6 <HAL_FDCAN_Start>

	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4813      	ldr	r0, [pc, #76]	; (8000f68 <FDCAN1_MSG_config+0xac>)
 8000f1c:	f003 ff62 	bl	8004de4 <HAL_FDCAN_ActivateNotification>

	/* Prepare Tx Header */
	TxHeader.Identifier = 0x322;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f22:	f240 3222 	movw	r2, #802	; 0x322
 8000f26:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f3a:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <FDCAN1_MSG_config+0xb0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	24004230 	.word	0x24004230
 8000f68:	24004238 	.word	0x24004238
 8000f6c:	24004344 	.word	0x24004344

08000f70 <Toggle_CAN_Data>:


void Toggle_CAN_Data(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	if(myTxData[0] == 0x00)
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10c      	bne.n	8000f96 <Toggle_CAN_Data+0x26>
	{
		myTxData[0] = 0xFF;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f7e:	22ff      	movs	r2, #255	; 0xff
 8000f80:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0x00;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0xFF;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f8a:	22ff      	movs	r2, #255	; 0xff
 8000f8c:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0x00;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	70da      	strb	r2, [r3, #3]
		myTxData[0] = 0x00;
		myTxData[1] = 0xFF;
		myTxData[2] = 0x00;
		myTxData[3] = 0xFF;
	}
}
 8000f94:	e00b      	b.n	8000fae <Toggle_CAN_Data+0x3e>
		myTxData[0] = 0x00;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0xFF;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000f9e:	22ff      	movs	r2, #255	; 0xff
 8000fa0:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0x00;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0xFF;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <Toggle_CAN_Data+0x48>)
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	70da      	strb	r2, [r3, #3]
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	24004230 	.word	0x24004230

08000fbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <vApplicationGetIdleTaskMemory+0x30>)
 8000fd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	240000c4 	.word	0x240000c4
 8000fec:	24000118 	.word	0x24000118

08000ff0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <MX_FREERTOS_Init+0x30>)
 8000ff8:	1d3c      	adds	r4, r7, #4
 8000ffa:	461d      	mov	r5, r3
 8000ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001000:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001004:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f009 fd7a 	bl	800ab06 <osThreadCreate>
 8001012:	4603      	mov	r3, r0
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <MX_FREERTOS_Init+0x34>)
 8001016:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bdb0      	pop	{r4, r5, r7, pc}
 8001020:	08019bac 	.word	0x08019bac
 8001024:	24004390 	.word	0x24004390

08001028 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af04      	add	r7, sp, #16
 800102e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001030:	f008 ff66 	bl	8009f00 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  SM_STATES state = INIT;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]

  //Start Timer
  HAL_TIM_Base_Start(&htim6);
 8001038:	4830      	ldr	r0, [pc, #192]	; (80010fc <StartDefaultTask+0xd4>)
 800103a:	f007 fa4f 	bl	80084dc <HAL_TIM_Base_Start>

  //Get current time
  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <StartDefaultTask+0xd4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <StartDefaultTask+0xd8>)
 8001048:	801a      	strh	r2, [r3, #0]

  //Start the TCP Server
  tcp_server_init();
 800104a:	f000 fe11 	bl	8001c70 <tcp_server_init>

  /* Infinite loop */
  for(;;)
  {
	  if(state == INIT)
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d12f      	bne.n	80010b4 <StartDefaultTask+0x8c>
	  {
		  ST7735_SetRotation(2);
 8001054:	2002      	movs	r0, #2
 8001056:	f7ff fc83 	bl	8000960 <ST7735_SetRotation>
		  ST7735_WriteString(0, 0, "Hello Ethernet!", Font_7x10, WHITE,BLACK);
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <StartDefaultTask+0xdc>)
 800105c:	2200      	movs	r2, #0
 800105e:	9202      	str	r2, [sp, #8]
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	9201      	str	r2, [sp, #4]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	9200      	str	r2, [sp, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <StartDefaultTask+0xe0>)
 800106e:	2100      	movs	r1, #0
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fd6d 	bl	8000b50 <ST7735_WriteString>
		  ST7735_WriteString(0, 12, "Hello CAN!", Font_7x10, WHITE,BLACK);
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <StartDefaultTask+0xdc>)
 8001078:	2200      	movs	r2, #0
 800107a:	9202      	str	r2, [sp, #8]
 800107c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001080:	9201      	str	r2, [sp, #4]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	9200      	str	r2, [sp, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a20      	ldr	r2, [pc, #128]	; (800110c <StartDefaultTask+0xe4>)
 800108a:	210c      	movs	r1, #12
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff fd5f 	bl	8000b50 <ST7735_WriteString>
		  ST7735_WriteString(0, 24, "Hello SPI!", Font_7x10, WHITE,BLACK);
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <StartDefaultTask+0xdc>)
 8001094:	2200      	movs	r2, #0
 8001096:	9202      	str	r2, [sp, #8]
 8001098:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109c:	9201      	str	r2, [sp, #4]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	9200      	str	r2, [sp, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <StartDefaultTask+0xe8>)
 80010a6:	2118      	movs	r1, #24
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fd51 	bl	8000b50 <ST7735_WriteString>
		  state = IDLE;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e01f      	b.n	80010f4 <StartDefaultTask+0xcc>
	  }
	  else if(state == IDLE)
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d11c      	bne.n	80010f4 <StartDefaultTask+0xcc>
	  {
		  if(__HAL_TIM_GET_COUNTER(&htim6) - timer_val >= 10000)
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <StartDefaultTask+0xd4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <StartDefaultTask+0xd8>)
 80010c2:	8812      	ldrh	r2, [r2, #0]
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d910      	bls.n	80010f0 <StartDefaultTask+0xc8>
		  {
			  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80010ce:	2102      	movs	r1, #2
 80010d0:	4810      	ldr	r0, [pc, #64]	; (8001114 <StartDefaultTask+0xec>)
 80010d2:	f004 fac6 	bl	8005662 <HAL_GPIO_TogglePin>
			  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <StartDefaultTask+0xd4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <StartDefaultTask+0xd8>)
 80010e0:	801a      	strh	r2, [r3, #0]

			  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 80010e2:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <StartDefaultTask+0xf0>)
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <StartDefaultTask+0xf4>)
 80010e6:	480e      	ldr	r0, [pc, #56]	; (8001120 <StartDefaultTask+0xf8>)
 80010e8:	f003 fe20 	bl	8004d2c <HAL_FDCAN_AddMessageToTxFifoQ>
			  Toggle_CAN_Data();
 80010ec:	f7ff ff40 	bl	8000f70 <Toggle_CAN_Data>
		  }
		  state = IDLE;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
	  }

	  osDelay(1);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f009 fd52 	bl	800ab9e <osDelay>
	  if(state == INIT)
 80010fa:	e7a8      	b.n	800104e <StartDefaultTask+0x26>
 80010fc:	24004468 	.word	0x24004468
 8001100:	240042d8 	.word	0x240042d8
 8001104:	24000000 	.word	0x24000000
 8001108:	08019bc8 	.word	0x08019bc8
 800110c:	08019bd8 	.word	0x08019bd8
 8001110:	08019be4 	.word	0x08019be4
 8001114:	58021000 	.word	0x58021000
 8001118:	24004230 	.word	0x24004230
 800111c:	24004344 	.word	0x24004344
 8001120:	24004238 	.word	0x24004238

08001124 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	4b8f      	ldr	r3, [pc, #572]	; (8001378 <MX_GPIO_Init+0x254>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	4a8d      	ldr	r2, [pc, #564]	; (8001378 <MX_GPIO_Init+0x254>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114a:	4b8b      	ldr	r3, [pc, #556]	; (8001378 <MX_GPIO_Init+0x254>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001158:	4b87      	ldr	r3, [pc, #540]	; (8001378 <MX_GPIO_Init+0x254>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115e:	4a86      	ldr	r2, [pc, #536]	; (8001378 <MX_GPIO_Init+0x254>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001168:	4b83      	ldr	r3, [pc, #524]	; (8001378 <MX_GPIO_Init+0x254>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b80      	ldr	r3, [pc, #512]	; (8001378 <MX_GPIO_Init+0x254>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	4a7e      	ldr	r2, [pc, #504]	; (8001378 <MX_GPIO_Init+0x254>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001186:	4b7c      	ldr	r3, [pc, #496]	; (8001378 <MX_GPIO_Init+0x254>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b78      	ldr	r3, [pc, #480]	; (8001378 <MX_GPIO_Init+0x254>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119a:	4a77      	ldr	r2, [pc, #476]	; (8001378 <MX_GPIO_Init+0x254>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a4:	4b74      	ldr	r3, [pc, #464]	; (8001378 <MX_GPIO_Init+0x254>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b2:	4b71      	ldr	r3, [pc, #452]	; (8001378 <MX_GPIO_Init+0x254>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b8:	4a6f      	ldr	r2, [pc, #444]	; (8001378 <MX_GPIO_Init+0x254>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c2:	4b6d      	ldr	r3, [pc, #436]	; (8001378 <MX_GPIO_Init+0x254>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011d0:	4b69      	ldr	r3, [pc, #420]	; (8001378 <MX_GPIO_Init+0x254>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d6:	4a68      	ldr	r2, [pc, #416]	; (8001378 <MX_GPIO_Init+0x254>)
 80011d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e0:	4b65      	ldr	r3, [pc, #404]	; (8001378 <MX_GPIO_Init+0x254>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ee:	4b62      	ldr	r3, [pc, #392]	; (8001378 <MX_GPIO_Init+0x254>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	4a60      	ldr	r2, [pc, #384]	; (8001378 <MX_GPIO_Init+0x254>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fe:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <MX_GPIO_Init+0x254>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2109      	movs	r1, #9
 8001210:	485a      	ldr	r0, [pc, #360]	; (800137c <MX_GPIO_Init+0x258>)
 8001212:	f004 fa0d 	bl	8005630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2108      	movs	r1, #8
 800121a:	4859      	ldr	r0, [pc, #356]	; (8001380 <MX_GPIO_Init+0x25c>)
 800121c:	f004 fa08 	bl	8005630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f244 0101 	movw	r1, #16385	; 0x4001
 8001226:	4857      	ldr	r0, [pc, #348]	; (8001384 <MX_GPIO_Init+0x260>)
 8001228:	f004 fa02 	bl	8005630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001232:	4855      	ldr	r0, [pc, #340]	; (8001388 <MX_GPIO_Init+0x264>)
 8001234:	f004 f9fc 	bl	8005630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2102      	movs	r1, #2
 800123c:	4853      	ldr	r0, [pc, #332]	; (800138c <MX_GPIO_Init+0x268>)
 800123e:	f004 f9f7 	bl	8005630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4849      	ldr	r0, [pc, #292]	; (800137c <MX_GPIO_Init+0x258>)
 8001258:	f004 f842 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800125c:	2309      	movs	r3, #9
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4842      	ldr	r0, [pc, #264]	; (800137c <MX_GPIO_Init+0x258>)
 8001274:	f004 f834 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001278:	2308      	movs	r3, #8
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	483c      	ldr	r0, [pc, #240]	; (8001380 <MX_GPIO_Init+0x25c>)
 8001290:	f004 f826 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001294:	f244 0301 	movw	r3, #16385	; 0x4001
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4835      	ldr	r0, [pc, #212]	; (8001384 <MX_GPIO_Init+0x260>)
 80012ae:	f004 f817 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80012b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	482f      	ldr	r0, [pc, #188]	; (8001388 <MX_GPIO_Init+0x264>)
 80012cc:	f004 f808 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	482a      	ldr	r0, [pc, #168]	; (8001390 <MX_GPIO_Init+0x26c>)
 80012e6:	f003 fffb 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80012ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4820      	ldr	r0, [pc, #128]	; (8001380 <MX_GPIO_Init+0x25c>)
 8001300:	f003 ffee 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001316:	230a      	movs	r3, #10
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	4817      	ldr	r0, [pc, #92]	; (8001380 <MX_GPIO_Init+0x25c>)
 8001322:	f003 ffdd 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800132c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001330:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	480f      	ldr	r0, [pc, #60]	; (800137c <MX_GPIO_Init+0x258>)
 800133e:	f003 ffcf 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001342:	2302      	movs	r3, #2
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <MX_GPIO_Init+0x268>)
 800135a:	f003 ffc1 	bl	80052e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2105      	movs	r1, #5
 8001362:	2028      	movs	r0, #40	; 0x28
 8001364:	f001 fae2 	bl	800292c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001368:	2028      	movs	r0, #40	; 0x28
 800136a:	f001 faf9 	bl	8002960 <HAL_NVIC_EnableIRQ>

}
 800136e:	bf00      	nop
 8001370:	3730      	adds	r7, #48	; 0x30
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	58024400 	.word	0x58024400
 800137c:	58020800 	.word	0x58020800
 8001380:	58020000 	.word	0x58020000
 8001384:	58020400 	.word	0x58020400
 8001388:	58020c00 	.word	0x58020c00
 800138c:	58021000 	.word	0x58021000
 8001390:	58021800 	.word	0x58021800

08001394 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af04      	add	r7, sp, #16
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN1_Pin) /* Interrupt only for BTN1_Pin (1st button from left to right in the breadboard) */
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a4:	d133      	bne.n	800140e <HAL_GPIO_EXTI_Callback+0x7a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80013a6:	2101      	movs	r1, #1
 80013a8:	481b      	ldr	r0, [pc, #108]	; (8001418 <HAL_GPIO_EXTI_Callback+0x84>)
 80013aa:	f004 f95a 	bl	8005662 <HAL_GPIO_TogglePin>

		if(globalCluster.btn1_flag == 0)
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_GPIO_EXTI_Callback+0x88>)
 80013b0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d115      	bne.n	80013e4 <HAL_GPIO_EXTI_Callback+0x50>
		{
			fillScreen(BLACK);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff f999 	bl	80006f0 <fillScreen>
			ST7735_WriteString(0, 0, "BTN1 ON!", Font_11x18, RED,BLACK);
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_GPIO_EXTI_Callback+0x8c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	9202      	str	r2, [sp, #8]
 80013c4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80013c8:	9201      	str	r2, [sp, #4]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_GPIO_EXTI_Callback+0x90>)
 80013d2:	2100      	movs	r1, #0
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fbbb 	bl	8000b50 <ST7735_WriteString>
			globalCluster.btn1_flag = 1;
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_GPIO_EXTI_Callback+0x88>)
 80013dc:	2201      	movs	r2, #1
 80013de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			ST7735_WriteString(0, 0, "BTN1 OFF!", Font_11x18, RED,BLACK);
			globalCluster.btn1_flag = 0;
		}
	}

}
 80013e2:	e014      	b.n	800140e <HAL_GPIO_EXTI_Callback+0x7a>
			fillScreen(BLACK);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff f983 	bl	80006f0 <fillScreen>
			ST7735_WriteString(0, 0, "BTN1 OFF!", Font_11x18, RED,BLACK);
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_GPIO_EXTI_Callback+0x8c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	9202      	str	r2, [sp, #8]
 80013f0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80013f4:	9201      	str	r2, [sp, #4]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	9200      	str	r2, [sp, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_GPIO_EXTI_Callback+0x94>)
 80013fe:	2100      	movs	r1, #0
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fba5 	bl	8000b50 <ST7735_WriteString>
			globalCluster.btn1_flag = 0;
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_GPIO_EXTI_Callback+0x88>)
 8001408:	2200      	movs	r2, #0
 800140a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	58020400 	.word	0x58020400
 800141c:	240042dc 	.word	0x240042dc
 8001420:	24000008 	.word	0x24000008
 8001424:	08019bf0 	.word	0x08019bf0
 8001428:	08019bfc 	.word	0x08019bfc

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001432:	f000 f8ff 	bl	8001634 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001436:	4b40      	ldr	r3, [pc, #256]	; (8001538 <main+0x10c>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d11b      	bne.n	800147a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001442:	f3bf 8f4f 	dsb	sy
}
 8001446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001448:	f3bf 8f6f 	isb	sy
}
 800144c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800144e:	4b3a      	ldr	r3, [pc, #232]	; (8001538 <main+0x10c>)
 8001450:	2200      	movs	r2, #0
 8001452:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001456:	f3bf 8f4f 	dsb	sy
}
 800145a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800145c:	f3bf 8f6f 	isb	sy
}
 8001460:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001462:	4b35      	ldr	r3, [pc, #212]	; (8001538 <main+0x10c>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4a34      	ldr	r2, [pc, #208]	; (8001538 <main+0x10c>)
 8001468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800146e:	f3bf 8f4f 	dsb	sy
}
 8001472:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001474:	f3bf 8f6f 	isb	sy
}
 8001478:	e000      	b.n	800147c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800147a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <main+0x10c>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d138      	bne.n	80014fa <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <main+0x10c>)
 800148a:	2200      	movs	r2, #0
 800148c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001490:	f3bf 8f4f 	dsb	sy
}
 8001494:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <main+0x10c>)
 8001498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800149c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	0b5b      	lsrs	r3, r3, #13
 80014a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014a6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	08db      	lsrs	r3, r3, #3
 80014ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014b0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80014ba:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014c0:	491d      	ldr	r1, [pc, #116]	; (8001538 <main+0x10c>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	1e5a      	subs	r2, r3, #1
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1ef      	bne.n	80014b2 <main+0x86>
    } while(sets-- != 0U);
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	60ba      	str	r2, [r7, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1e5      	bne.n	80014a8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80014dc:	f3bf 8f4f 	dsb	sy
}
 80014e0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <main+0x10c>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	4a14      	ldr	r2, [pc, #80]	; (8001538 <main+0x10c>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014ee:	f3bf 8f4f 	dsb	sy
}
 80014f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f4:	f3bf 8f6f 	isb	sy
}
 80014f8:	e000      	b.n	80014fc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80014fa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fc:	f001 f8ca 	bl	8002694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001500:	f000 f81c 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001504:	f7ff fe0e 	bl	8001124 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001508:	f000 fe80 	bl	800220c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800150c:	f000 ff30 	bl	8002370 <MX_USB_OTG_HS_USB_Init>
  MX_FDCAN1_Init();
 8001510:	f7ff fbfa 	bl	8000d08 <MX_FDCAN1_Init>
  MX_TIM6_Init();
 8001514:	f000 fe20 	bl	8002158 <MX_TIM6_Init>
  MX_SPI1_Init();
 8001518:	f000 f8d2 	bl	80016c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_MSG_config();
 800151c:	f7ff fcce 	bl	8000ebc <FDCAN1_MSG_config>
  ST7735_Init(0);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff f9f1 	bl	8000908 <ST7735_Init>
  fillScreen(BLACK);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff f8e2 	bl	80006f0 <fillScreen>
  //testAll();

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800152c:	f7ff fd60 	bl	8000ff0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001530:	f009 fad2 	bl	800aad8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001534:	e7fe      	b.n	8001534 <main+0x108>
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b09c      	sub	sp, #112	; 0x70
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	224c      	movs	r2, #76	; 0x4c
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f017 fae6 	bl	8018b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2220      	movs	r2, #32
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f017 fae0 	bl	8018b1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800155c:	2002      	movs	r0, #2
 800155e:	f004 f8b5 	bl	80056cc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <SystemClock_Config+0xf0>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800156e:	4a2f      	ldr	r2, [pc, #188]	; (800162c <SystemClock_Config+0xf0>)
 8001570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001574:	6193      	str	r3, [r2, #24]
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <SystemClock_Config+0xf0>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001582:	bf00      	nop
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <SystemClock_Config+0xf0>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800158c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001590:	d1f8      	bne.n	8001584 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <SystemClock_Config+0xf4>)
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	f023 0303 	bic.w	r3, r3, #3
 800159a:	4a25      	ldr	r2, [pc, #148]	; (8001630 <SystemClock_Config+0xf4>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80015a2:	2321      	movs	r3, #33	; 0x21
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015ac:	2301      	movs	r3, #1
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b0:	2302      	movs	r3, #2
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b4:	2302      	movs	r3, #2
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80015bc:	2318      	movs	r3, #24
 80015be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015cc:	230c      	movs	r3, #12
 80015ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015dc:	4618      	mov	r0, r3
 80015de:	f004 f8af 	bl	8005740 <HAL_RCC_OscConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80015e8:	f000 f864 	bl	80016b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ec:	233f      	movs	r3, #63	; 0x3f
 80015ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f0:	2303      	movs	r3, #3
 80015f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015f8:	2308      	movs	r3, #8
 80015fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015fc:	2340      	movs	r3, #64	; 0x40
 80015fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001608:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800160a:	2340      	movs	r3, #64	; 0x40
 800160c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2101      	movs	r1, #1
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fc40 	bl	8005e98 <HAL_RCC_ClockConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800161e:	f000 f849 	bl	80016b4 <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3770      	adds	r7, #112	; 0x70
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	58024800 	.word	0x58024800
 8001630:	58024400 	.word	0x58024400

08001634 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800163a:	463b      	mov	r3, r7
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001646:	f001 f999 	bl	800297c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800164a:	2301      	movs	r3, #1
 800164c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800164e:	2300      	movs	r3, #0
 8001650:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001652:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001656:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001658:	230e      	movs	r3, #14
 800165a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800165c:	2300      	movs	r3, #0
 800165e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001660:	2301      	movs	r3, #1
 8001662:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001664:	2303      	movs	r3, #3
 8001666:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001668:	2301      	movs	r3, #1
 800166a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800166c:	2301      	movs	r3, #1
 800166e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001678:	463b      	mov	r3, r7
 800167a:	4618      	mov	r0, r3
 800167c:	f001 f9b6 	bl	80029ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001680:	2004      	movs	r0, #4
 8001682:	f001 f993 	bl	80029ac <HAL_MPU_Enable>

}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d101      	bne.n	80016a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016a2:	f001 f833 	bl	800270c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40010000 	.word	0x40010000

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	e7fe      	b.n	80016bc <Error_Handler+0x8>
	...

080016c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <MX_SPI1_Init+0xa4>)
 80016c6:	4a28      	ldr	r2, [pc, #160]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <MX_SPI1_Init+0xa4>)
 80016cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <MX_SPI1_Init+0xa4>)
 80016d4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80016d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <MX_SPI1_Init+0xa4>)
 80016dc:	2207      	movs	r2, #7
 80016de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e0:	4b20      	ldr	r3, [pc, #128]	; (8001764 <MX_SPI1_Init+0xa4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <MX_SPI1_Init+0xa4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_SPI1_Init+0xa4>)
 80016ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_SPI1_Init+0xa4>)
 80016f6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80016fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <MX_SPI1_Init+0xa4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_SPI1_Init+0xa4>)
 8001704:	2200      	movs	r2, #0
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_SPI1_Init+0xa4>)
 800170a:	2200      	movs	r2, #0
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_SPI1_Init+0xa4>)
 8001710:	2200      	movs	r2, #0
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_SPI1_Init+0xa4>)
 8001716:	2200      	movs	r2, #0
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_SPI1_Init+0xa4>)
 800171c:	2200      	movs	r2, #0
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <MX_SPI1_Init+0xa4>)
 8001722:	2200      	movs	r2, #0
 8001724:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_SPI1_Init+0xa4>)
 8001728:	2200      	movs	r2, #0
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <MX_SPI1_Init+0xa4>)
 800172e:	2200      	movs	r2, #0
 8001730:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_SPI1_Init+0xa4>)
 8001734:	2200      	movs	r2, #0
 8001736:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <MX_SPI1_Init+0xa4>)
 800173a:	2200      	movs	r2, #0
 800173c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_SPI1_Init+0xa4>)
 8001740:	2200      	movs	r2, #0
 8001742:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <MX_SPI1_Init+0xa4>)
 8001746:	2200      	movs	r2, #0
 8001748:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_SPI1_Init+0xa4>)
 800174c:	2200      	movs	r2, #0
 800174e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_SPI1_Init+0xa4>)
 8001752:	f006 fa8b 	bl	8007c6c <HAL_SPI_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800175c:	f7ff ffaa 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	24004394 	.word	0x24004394
 8001768:	40013000 	.word	0x40013000

0800176c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0b8      	sub	sp, #224	; 0xe0
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001784:	f107 0318 	add.w	r3, r7, #24
 8001788:	22b4      	movs	r2, #180	; 0xb4
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f017 f9c5 	bl	8018b1c <memset>
  if(spiHandle->Instance==SPI1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a36      	ldr	r2, [pc, #216]	; (8001870 <HAL_SPI_MspInit+0x104>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d165      	bne.n	8001868 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800179c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 ff42 	bl	8006634 <HAL_RCCEx_PeriphCLKConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80017b6:	f7ff ff7d 	bl	80016b4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ba:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <HAL_SPI_MspInit+0x108>)
 80017bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017c0:	4a2c      	ldr	r2, [pc, #176]	; (8001874 <HAL_SPI_MspInit+0x108>)
 80017c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <HAL_SPI_MspInit+0x108>)
 80017cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b26      	ldr	r3, [pc, #152]	; (8001874 <HAL_SPI_MspInit+0x108>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017de:	4a25      	ldr	r2, [pc, #148]	; (8001874 <HAL_SPI_MspInit+0x108>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_SPI_MspInit+0x108>)
 80017ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_SPI_MspInit+0x108>)
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fc:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_SPI_MspInit+0x108>)
 80017fe:	f043 0308 	orr.w	r3, r3, #8
 8001802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_SPI_MspInit+0x108>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001814:	2320      	movs	r3, #32
 8001816:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800182c:	2305      	movs	r3, #5
 800182e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001836:	4619      	mov	r1, r3
 8001838:	480f      	ldr	r0, [pc, #60]	; (8001878 <HAL_SPI_MspInit+0x10c>)
 800183a:	f003 fd51 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001856:	2305      	movs	r3, #5
 8001858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	; (800187c <HAL_SPI_MspInit+0x110>)
 8001864:	f003 fd3c 	bl	80052e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001868:	bf00      	nop
 800186a:	37e0      	adds	r7, #224	; 0xe0
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40013000 	.word	0x40013000
 8001874:	58024400 	.word	0x58024400
 8001878:	58020000 	.word	0x58020000
 800187c:	58020c00 	.word	0x58020c00

08001880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_MspInit+0x38>)
 8001888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_MspInit+0x38>)
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_MspInit+0x38>)
 8001898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	210f      	movs	r1, #15
 80018a8:	f06f 0001 	mvn.w	r0, #1
 80018ac:	f001 f83e 	bl	800292c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	58024400 	.word	0x58024400

080018bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08e      	sub	sp, #56	; 0x38
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	d844      	bhi.n	8001954 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80018ca:	2200      	movs	r2, #0
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	2019      	movs	r0, #25
 80018d0:	f001 f82c 	bl	800292c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018d4:	2019      	movs	r0, #25
 80018d6:	f001 f843 	bl	8002960 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80018da:	4a24      	ldr	r2, [pc, #144]	; (800196c <HAL_InitTick+0xb0>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_InitTick+0xb4>)
 80018e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018e6:	4a22      	ldr	r2, [pc, #136]	; (8001970 <HAL_InitTick+0xb4>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_InitTick+0xb4>)
 80018f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018fe:	f107 020c 	add.w	r2, r7, #12
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f004 fe51 	bl	80065b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800190e:	f004 fe39 	bl	8006584 <HAL_RCC_GetPCLK2Freq>
 8001912:	4603      	mov	r3, r0
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	4a16      	ldr	r2, [pc, #88]	; (8001974 <HAL_InitTick+0xb8>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	0c9b      	lsrs	r3, r3, #18
 8001922:	3b01      	subs	r3, #1
 8001924:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_InitTick+0xbc>)
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <HAL_InitTick+0xc0>)
 800192a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0xbc>)
 800192e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001932:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001934:	4a10      	ldr	r2, [pc, #64]	; (8001978 <HAL_InitTick+0xbc>)
 8001936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001938:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_InitTick+0xbc>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <HAL_InitTick+0xbc>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001946:	480c      	ldr	r0, [pc, #48]	; (8001978 <HAL_InitTick+0xbc>)
 8001948:	f006 fd71 	bl	800842e <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d107      	bne.n	8001962 <HAL_InitTick+0xa6>
 8001952:	e001      	b.n	8001958 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e005      	b.n	8001964 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001958:	4807      	ldr	r0, [pc, #28]	; (8001978 <HAL_InitTick+0xbc>)
 800195a:	f006 fe3d 	bl	80085d8 <HAL_TIM_Base_Start_IT>
 800195e:	4603      	mov	r3, r0
 8001960:	e000      	b.n	8001964 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	3738      	adds	r7, #56	; 0x38
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	24000018 	.word	0x24000018
 8001970:	58024400 	.word	0x58024400
 8001974:	431bde83 	.word	0x431bde83
 8001978:	2400441c 	.word	0x2400441c
 800197c:	40010000 	.word	0x40010000

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <TIM1_UP_IRQHandler+0x10>)
 80019b2:	f006 fe97 	bl	80086e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2400441c 	.word	0x2400441c

080019c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_PWR_EN_Pin);
 80019c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019c8:	f003 fe65 	bl	8005696 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <ETH_IRQHandler+0x10>)
 80019d6:	f001 fd27 	bl	8003428 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	24004680 	.word	0x24004680

080019e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
	return 1;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_kill>:

int _kill(int pid, int sig)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <_kill+0x20>)
 8001a00:	2216      	movs	r2, #22
 8001a02:	601a      	str	r2, [r3, #0]
	return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	2400781c 	.word	0x2400781c

08001a18 <_exit>:

void _exit (int status)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ffe5 	bl	80019f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a2a:	e7fe      	b.n	8001a2a <_exit+0x12>

08001a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00a      	b.n	8001a54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a3e:	f3af 8000 	nop.w
 8001a42:	4601      	mov	r1, r0
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf0      	blt.n	8001a3e <_read+0x12>
	}

return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e009      	b.n	8001a8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf1      	blt.n	8001a78 <_write+0x12>
	}
	return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_close>:

int _close(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
	return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_isatty>:

int _isatty(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	return 1;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d205      	bcs.n	8001b44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <_sbrk+0x6c>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	24050000 	.word	0x24050000
 8001b68:	00000400 	.word	0x00000400
 8001b6c:	24000318 	.word	0x24000318
 8001b70:	24007830 	.word	0x24007830
 8001b74:	2400781c 	.word	0x2400781c

08001b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b7c:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <SystemInit+0xd8>)
 8001b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b82:	4a33      	ldr	r2, [pc, #204]	; (8001c50 <SystemInit+0xd8>)
 8001b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b8c:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <SystemInit+0xdc>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	2b06      	cmp	r3, #6
 8001b96:	d807      	bhi.n	8001ba8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b98:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <SystemInit+0xdc>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 030f 	bic.w	r3, r3, #15
 8001ba0:	4a2c      	ldr	r2, [pc, #176]	; (8001c54 <SystemInit+0xdc>)
 8001ba2:	f043 0307 	orr.w	r3, r3, #7
 8001ba6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <SystemInit+0xe0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a2a      	ldr	r2, [pc, #168]	; (8001c58 <SystemInit+0xe0>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bb4:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <SystemInit+0xe0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bba:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <SystemInit+0xe0>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4926      	ldr	r1, [pc, #152]	; (8001c58 <SystemInit+0xe0>)
 8001bc0:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <SystemInit+0xe4>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <SystemInit+0xdc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <SystemInit+0xdc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 030f 	bic.w	r3, r3, #15
 8001bda:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <SystemInit+0xdc>)
 8001bdc:	f043 0307 	orr.w	r3, r3, #7
 8001be0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <SystemInit+0xe0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <SystemInit+0xe0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <SystemInit+0xe0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <SystemInit+0xe0>)
 8001bf6:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <SystemInit+0xe8>)
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <SystemInit+0xe0>)
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <SystemInit+0xec>)
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <SystemInit+0xe0>)
 8001c02:	4a19      	ldr	r2, [pc, #100]	; (8001c68 <SystemInit+0xf0>)
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <SystemInit+0xe0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <SystemInit+0xe0>)
 8001c0e:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <SystemInit+0xf0>)
 8001c10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <SystemInit+0xe0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <SystemInit+0xe0>)
 8001c1a:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <SystemInit+0xf0>)
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <SystemInit+0xe0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <SystemInit+0xe0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <SystemInit+0xe0>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <SystemInit+0xe0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <SystemInit+0xf4>)
 8001c38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c3c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SystemInit+0xd8>)
 8001c40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c44:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	52002000 	.word	0x52002000
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c60:	02020200 	.word	0x02020200
 8001c64:	01ff0000 	.word	0x01ff0000
 8001c68:	01010280 	.word	0x01010280
 8001c6c:	52004000 	.word	0x52004000

08001c70 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8001c76:	f00f faa9 	bl	80111cc <tcp_new>
 8001c7a:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 200);
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <tcp_server_init+0x4c>)
 8001c7e:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 10);
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	220a      	movs	r2, #10
 8001c84:	4619      	mov	r1, r3
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f00e f9fc 	bl	8010084 <tcp_bind>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8001c90:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8001c98:	21ff      	movs	r1, #255	; 0xff
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f00e faaa 	bl	80101f4 <tcp_listen_with_backlog>
 8001ca0:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8001ca2:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <tcp_server_init+0x50>)
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f00f fb11 	bl	80112cc <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8001caa:	e003      	b.n	8001cb4 <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8001cac:	68f9      	ldr	r1, [r7, #12]
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f00c fd94 	bl	800e7dc <memp_free>
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	c801a8c0 	.word	0xc801a8c0
 8001cc0:	08001cc5 	.word	0x08001cc5

08001cc4 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	68b8      	ldr	r0, [r7, #8]
 8001cd6:	f00f f887 	bl	8010de8 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8001cda:	200c      	movs	r0, #12
 8001cdc:	f00c fb64 	bl	800e3a8 <mem_malloc>
 8001ce0:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01f      	beq.n	8001d28 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001d00:	6939      	ldr	r1, [r7, #16]
 8001d02:	68b8      	ldr	r0, [r7, #8]
 8001d04:	f00f fa6a 	bl	80111dc <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8001d08:	490d      	ldr	r1, [pc, #52]	; (8001d40 <tcp_server_accept+0x7c>)
 8001d0a:	68b8      	ldr	r0, [r7, #8]
 8001d0c:	f00f fa78 	bl	8011200 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <tcp_server_accept+0x80>)
 8001d12:	68b8      	ldr	r0, [r7, #8]
 8001d14:	f00f fab8 	bl	8011288 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	490b      	ldr	r1, [pc, #44]	; (8001d48 <tcp_server_accept+0x84>)
 8001d1c:	68b8      	ldr	r0, [r7, #8]
 8001d1e:	f00f faed 	bl	80112fc <tcp_poll>

    ret_err = ERR_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75fb      	strb	r3, [r7, #23]
 8001d26:	e005      	b.n	8001d34 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8001d28:	6939      	ldr	r1, [r7, #16]
 8001d2a:	68b8      	ldr	r0, [r7, #8]
 8001d2c:	f000 f965 	bl	8001ffa <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001d30:	23ff      	movs	r3, #255	; 0xff
 8001d32:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	08001d4d 	.word	0x08001d4d
 8001d44:	08001e81 	.word	0x08001e81
 8001d48:	08001ea5 	.word	0x08001ea5

08001d4c <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d105      	bne.n	8001d6c <tcp_server_recv+0x20>
 8001d60:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <tcp_server_recv+0x124>)
 8001d62:	22c3      	movs	r2, #195	; 0xc3
 8001d64:	4943      	ldr	r1, [pc, #268]	; (8001e74 <tcp_server_recv+0x128>)
 8001d66:	4844      	ldr	r0, [pc, #272]	; (8001e78 <tcp_server_recv+0x12c>)
 8001d68:	f016 fee0 	bl	8018b2c <iprintf>

  es = (struct tcp_server_struct *)arg;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d116      	bne.n	8001da4 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d104      	bne.n	8001d8e <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8001d84:	69b9      	ldr	r1, [r7, #24]
 8001d86:	68b8      	ldr	r0, [r7, #8]
 8001d88:	f000 f937 	bl	8001ffa <tcp_server_connection_close>
 8001d8c:	e007      	b.n	8001d9e <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8001d8e:	493b      	ldr	r1, [pc, #236]	; (8001e7c <tcp_server_recv+0x130>)
 8001d90:	68b8      	ldr	r0, [r7, #8]
 8001d92:	f00f fa57 	bl	8011244 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8001d96:	69b9      	ldr	r1, [r7, #24]
 8001d98:	68b8      	ldr	r0, [r7, #8]
 8001d9a:	f000 f8db 	bl	8001f54 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	77fb      	strb	r3, [r7, #31]
 8001da2:	e05f      	b.n	8001e64 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00b      	beq.n	8001dc4 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f00d fbb3 	bl	800f524 <pbuf_free>
    }
    ret_err = err;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	77fb      	strb	r3, [r7, #31]
 8001dc2:	e04f      	b.n	8001e64 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d110      	bne.n	8001dee <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8001dd8:	4928      	ldr	r1, [pc, #160]	; (8001e7c <tcp_server_recv+0x130>)
 8001dda:	68b8      	ldr	r0, [r7, #8]
 8001ddc:	f00f fa32 	bl	8011244 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8001de0:	69b9      	ldr	r1, [r7, #24]
 8001de2:	68b8      	ldr	r0, [r7, #8]
 8001de4:	f000 f930 	bl	8002048 <tcp_server_handle>

    ret_err = ERR_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	77fb      	strb	r3, [r7, #31]
 8001dec:	e03a      	b.n	8001e64 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d115      	bne.n	8001e22 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d107      	bne.n	8001e0e <tcp_server_recv+0xc2>
    {
      es->p = p;
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8001e04:	69b9      	ldr	r1, [r7, #24]
 8001e06:	68b8      	ldr	r0, [r7, #8]
 8001e08:	f000 f91e 	bl	8002048 <tcp_server_handle>
 8001e0c:	e006      	b.n	8001e1c <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f00d fca8 	bl	800f76c <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	77fb      	strb	r3, [r7, #31]
 8001e20:	e020      	b.n	8001e64 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d10e      	bne.n	8001e48 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	891b      	ldrh	r3, [r3, #8]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	68b8      	ldr	r0, [r7, #8]
 8001e32:	f00e faf5 	bl	8010420 <tcp_recved>
    es->p = NULL;
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f00d fb71 	bl	800f524 <pbuf_free>
    ret_err = ERR_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	77fb      	strb	r3, [r7, #31]
 8001e46:	e00d      	b.n	8001e64 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	891b      	ldrh	r3, [r3, #8]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	68b8      	ldr	r0, [r7, #8]
 8001e50:	f00e fae6 	bl	8010420 <tcp_recved>
    es->p = NULL;
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f00d fb62 	bl	800f524 <pbuf_free>
    ret_err = ERR_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001e64:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	08019c08 	.word	0x08019c08
 8001e74:	08019c24 	.word	0x08019c24
 8001e78:	08019c30 	.word	0x08019c30
 8001e7c:	08001f05 	.word	0x08001f05

08001e80 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f00c f8ec 	bl	800e074 <mem_free>
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d017      	beq.n	8001ee8 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8001ec0:	490f      	ldr	r1, [pc, #60]	; (8001f00 <tcp_server_poll+0x5c>)
 8001ec2:	6838      	ldr	r0, [r7, #0]
 8001ec4:	f00f f9be 	bl	8011244 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	f000 f842 	bl	8001f54 <tcp_server_send>
 8001ed0:	e007      	b.n	8001ee2 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d103      	bne.n	8001ee2 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	6838      	ldr	r0, [r7, #0]
 8001ede:	f000 f88c 	bl	8001ffa <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	e004      	b.n	8001ef2 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8001ee8:	6838      	ldr	r0, [r7, #0]
 8001eea:	f00e f8bf 	bl	801006c <tcp_abort>
    ret_err = ERR_ABRT;
 8001eee:	23f3      	movs	r3, #243	; 0xf3
 8001ef0:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	08001f05 	.word	0x08001f05

08001f04 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8001f24:	490a      	ldr	r1, [pc, #40]	; (8001f50 <tcp_server_sent+0x4c>)
 8001f26:	68b8      	ldr	r0, [r7, #8]
 8001f28:	f00f f98c 	bl	8011244 <tcp_sent>
    tcp_server_send(tpcb, es);
 8001f2c:	6979      	ldr	r1, [r7, #20]
 8001f2e:	68b8      	ldr	r0, [r7, #8]
 8001f30:	f000 f810 	bl	8001f54 <tcp_server_send>
 8001f34:	e007      	b.n	8001f46 <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d103      	bne.n	8001f46 <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8001f3e:	6979      	ldr	r1, [r7, #20]
 8001f40:	68b8      	ldr	r0, [r7, #8]
 8001f42:	f000 f85a 	bl	8001ffa <tcp_server_connection_close>
  }
  return ERR_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	08001f05 	.word	0x08001f05

08001f54 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8001f62:	e036      	b.n	8001fd2 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	6859      	ldr	r1, [r3, #4]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	895a      	ldrh	r2, [r3, #10]
 8001f72:	2301      	movs	r3, #1
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f012 f86f 	bl	8014058 <tcp_write>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d11d      	bne.n	8001fc2 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	895b      	ldrh	r3, [r3, #10]
 8001f8a:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d004      	beq.n	8001fa6 <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f00d fb65 	bl	800f670 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8001fa6:	6938      	ldr	r0, [r7, #16]
 8001fa8:	f00d fabc 	bl	800f524 <pbuf_free>
 8001fac:	4603      	mov	r3, r0
 8001fae:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001fb0:	7b7b      	ldrb	r3, [r7, #13]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f7      	beq.n	8001fa6 <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8001fb6:	89fb      	ldrh	r3, [r7, #14]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f00e fa30 	bl	8010420 <tcp_recved>
 8001fc0:	e007      	b.n	8001fd2 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8001fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fca:	d102      	bne.n	8001fd2 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10b      	bne.n	8001ff2 <tcp_server_send+0x9e>
         (es->p != NULL) &&
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	895a      	ldrh	r2, [r3, #10]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d9b8      	bls.n	8001f64 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8002004:	2100      	movs	r1, #0
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f00f f8e8 	bl	80111dc <tcp_arg>
  tcp_sent(tpcb, NULL);
 800200c:	2100      	movs	r1, #0
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f00f f918 	bl	8011244 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8002014:	2100      	movs	r1, #0
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f00f f8f2 	bl	8011200 <tcp_recv>
  tcp_err(tpcb, NULL);
 800201c:	2100      	movs	r1, #0
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f00f f932 	bl	8011288 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f00f f967 	bl	80112fc <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8002034:	6838      	ldr	r0, [r7, #0]
 8002036:	f00c f81d 	bl	800e074 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f00d ff2c 	bl	800fe98 <tcp_close>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002048:	b5b0      	push	{r4, r5, r7, lr}
 800204a:	b0a0      	sub	sp, #128	; 0x80
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8b1b      	ldrh	r3, [r3, #24]
 8002060:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8002064:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002068:	4618      	mov	r0, r3
 800206a:	f015 fc61 	bl	8017930 <ip4addr_ntoa>
 800206e:	6778      	str	r0, [r7, #116]	; 0x74

	esTx->state = es->state;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002076:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800207e:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002086:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	2264      	movs	r2, #100	; 0x64
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f016 fd43 	bl	8018b1c <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	891b      	ldrh	r3, [r3, #8]
 80020a2:	461a      	mov	r2, r3
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	4618      	mov	r0, r3
 80020aa:	f016 fd97 	bl	8018bdc <strncpy>
	strncpy(globalCluster.myString, (char *)es->p->payload, es->p->tot_len);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	891b      	ldrh	r3, [r3, #8]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4824      	ldr	r0, [pc, #144]	; (8002150 <tcp_server_handle+0x108>)
 80020be:	f016 fd8d 	bl	8018bdc <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe f922 	bl	8000310 <strlen>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	4413      	add	r3, r2
 80020d6:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <tcp_server_handle+0x10c>)
 80020d8:	461d      	mov	r5, r3
 80020da:	4614      	mov	r4, r2
 80020dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020de:	6028      	str	r0, [r5, #0]
 80020e0:	6069      	str	r1, [r5, #4]
 80020e2:	60aa      	str	r2, [r5, #8]
 80020e4:	60eb      	str	r3, [r5, #12]
 80020e6:	cc03      	ldmia	r4!, {r0, r1}
 80020e8:	6128      	str	r0, [r5, #16]
 80020ea:	6169      	str	r1, [r5, #20]
 80020ec:	7823      	ldrb	r3, [r4, #0]
 80020ee:	762b      	strb	r3, [r5, #24]


	esTx->p->payload = (void *)buf;
 80020f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f107 020c 	add.w	r2, r7, #12
 80020f8:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	891a      	ldrh	r2, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	895b      	ldrh	r3, [r3, #10]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	b29c      	uxth	r4, r3
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f8fe 	bl	8000310 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	b29a      	uxth	r2, r3
 8002118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4422      	add	r2, r4
 800211e:	b292      	uxth	r2, r2
 8002120:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe f8f2 	bl	8000310 <strlen>
 800212c:	4602      	mov	r2, r0
 800212e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	b292      	uxth	r2, r2
 8002134:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8002136:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff0b 	bl	8001f54 <tcp_server_send>

	pbuf_free(es->p);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4618      	mov	r0, r3
 8002144:	f00d f9ee 	bl	800f524 <pbuf_free>

}
 8002148:	bf00      	nop
 800214a:	3780      	adds	r7, #128	; 0x80
 800214c:	46bd      	mov	sp, r7
 800214e:	bdb0      	pop	{r4, r5, r7, pc}
 8002150:	240042dc 	.word	0x240042dc
 8002154:	08019c58 	.word	0x08019c58

08002158 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <MX_TIM6_Init+0x68>)
 800216a:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <MX_TIM6_Init+0x6c>)
 800216c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 800216e:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <MX_TIM6_Init+0x68>)
 8002170:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002174:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <MX_TIM6_Init+0x68>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <MX_TIM6_Init+0x68>)
 800217e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002182:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_TIM6_Init+0x68>)
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800218a:	480d      	ldr	r0, [pc, #52]	; (80021c0 <MX_TIM6_Init+0x68>)
 800218c:	f006 f94f 	bl	800842e <HAL_TIM_Base_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002196:	f7ff fa8d 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4806      	ldr	r0, [pc, #24]	; (80021c0 <MX_TIM6_Init+0x68>)
 80021a8:	f006 fc8a 	bl	8008ac0 <HAL_TIMEx_MasterConfigSynchronization>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80021b2:	f7ff fa7f 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	24004468 	.word	0x24004468
 80021c4:	40001000 	.word	0x40001000

080021c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <HAL_TIM_Base_MspInit+0x3c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d10e      	bne.n	80021f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_TIM_Base_MspInit+0x40>)
 80021dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021e0:	4a09      	ldr	r2, [pc, #36]	; (8002208 <HAL_TIM_Base_MspInit+0x40>)
 80021e2:	f043 0310 	orr.w	r3, r3, #16
 80021e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021ea:	4b07      	ldr	r3, [pc, #28]	; (8002208 <HAL_TIM_Base_MspInit+0x40>)
 80021ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40001000 	.word	0x40001000
 8002208:	58024400 	.word	0x58024400

0800220c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <MX_USART3_UART_Init+0x90>)
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <MX_USART3_UART_Init+0x94>)
 8002214:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002216:	4b21      	ldr	r3, [pc, #132]	; (800229c <MX_USART3_UART_Init+0x90>)
 8002218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800221c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	4b1f      	ldr	r3, [pc, #124]	; (800229c <MX_USART3_UART_Init+0x90>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <MX_USART3_UART_Init+0x90>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800222a:	4b1c      	ldr	r3, [pc, #112]	; (800229c <MX_USART3_UART_Init+0x90>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MX_USART3_UART_Init+0x90>)
 8002232:	220c      	movs	r2, #12
 8002234:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <MX_USART3_UART_Init+0x90>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <MX_USART3_UART_Init+0x90>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <MX_USART3_UART_Init+0x90>)
 8002244:	2200      	movs	r2, #0
 8002246:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_USART3_UART_Init+0x90>)
 800224a:	2200      	movs	r2, #0
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <MX_USART3_UART_Init+0x90>)
 8002250:	2200      	movs	r2, #0
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002254:	4811      	ldr	r0, [pc, #68]	; (800229c <MX_USART3_UART_Init+0x90>)
 8002256:	f006 fced 	bl	8008c34 <HAL_UART_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002260:	f7ff fa28 	bl	80016b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002264:	2100      	movs	r1, #0
 8002266:	480d      	ldr	r0, [pc, #52]	; (800229c <MX_USART3_UART_Init+0x90>)
 8002268:	f007 fd80 	bl	8009d6c <HAL_UARTEx_SetTxFifoThreshold>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002272:	f7ff fa1f 	bl	80016b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002276:	2100      	movs	r1, #0
 8002278:	4808      	ldr	r0, [pc, #32]	; (800229c <MX_USART3_UART_Init+0x90>)
 800227a:	f007 fdb5 	bl	8009de8 <HAL_UARTEx_SetRxFifoThreshold>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002284:	f7ff fa16 	bl	80016b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <MX_USART3_UART_Init+0x90>)
 800228a:	f007 fd36 	bl	8009cfa <HAL_UARTEx_DisableFifoMode>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002294:	f7ff fa0e 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	240044b4 	.word	0x240044b4
 80022a0:	40004800 	.word	0x40004800

080022a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b0b6      	sub	sp, #216	; 0xd8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	22b4      	movs	r2, #180	; 0xb4
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f016 fc29 	bl	8018b1c <memset>
  if(uartHandle->Instance==USART3)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a25      	ldr	r2, [pc, #148]	; (8002364 <HAL_UART_MspInit+0xc0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d142      	bne.n	800235a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022d4:	2302      	movs	r3, #2
 80022d6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022de:	f107 0310 	add.w	r3, r7, #16
 80022e2:	4618      	mov	r0, r3
 80022e4:	f004 f9a6 	bl	8006634 <HAL_RCCEx_PeriphCLKConfig>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022ee:	f7ff f9e1 	bl	80016b4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_UART_MspInit+0xc4>)
 80022f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022f8:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <HAL_UART_MspInit+0xc4>)
 80022fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_UART_MspInit+0xc4>)
 8002304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_UART_MspInit+0xc4>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <HAL_UART_MspInit+0xc4>)
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_UART_MspInit+0xc4>)
 8002322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800232e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002332:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002348:	2307      	movs	r3, #7
 800234a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002352:	4619      	mov	r1, r3
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <HAL_UART_MspInit+0xc8>)
 8002356:	f002 ffc3 	bl	80052e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800235a:	bf00      	nop
 800235c:	37d8      	adds	r7, #216	; 0xd8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40004800 	.word	0x40004800
 8002368:	58024400 	.word	0x58024400
 800236c:	58020c00 	.word	0x58020c00

08002370 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002384:	f7ff fbf8 	bl	8001b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002388:	480c      	ldr	r0, [pc, #48]	; (80023bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800238a:	490d      	ldr	r1, [pc, #52]	; (80023c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002390:	e002      	b.n	8002398 <LoopCopyDataInit>

08002392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002396:	3304      	adds	r3, #4

08002398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800239c:	d3f9      	bcc.n	8002392 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023a0:	4c0a      	ldr	r4, [pc, #40]	; (80023cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a4:	e001      	b.n	80023aa <LoopFillZerobss>

080023a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a8:	3204      	adds	r2, #4

080023aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ac:	d3fb      	bcc.n	80023a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ae:	f016 fb75 	bl	8018a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023b2:	f7ff f83b 	bl	800142c <main>
  bx  lr
 80023b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80023bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023c0:	240000a8 	.word	0x240000a8
  ldr r2, =_sidata
 80023c4:	0801e004 	.word	0x0801e004
  ldr r2, =_sbss
 80023c8:	240000a8 	.word	0x240000a8
  ldr r4, =_ebss
 80023cc:	24007830 	.word	0x24007830

080023d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d0:	e7fe      	b.n	80023d0 <ADC3_IRQHandler>

080023d2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <LAN8742_RegisterBusIO+0x28>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <LAN8742_RegisterBusIO+0x28>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <LAN8742_RegisterBusIO+0x28>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e014      	b.n	800242a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d17c      	bne.n	8002550 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e01c      	b.n	80024aa <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f107 0208 	add.w	r2, r7, #8
 8002478:	2112      	movs	r1, #18
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	4798      	blx	r3
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	da03      	bge.n	800248c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002484:	f06f 0304 	mvn.w	r3, #4
 8002488:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800248a:	e00b      	b.n	80024a4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	429a      	cmp	r2, r3
 8002496:	d105      	bne.n	80024a4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
         break;
 80024a2:	e005      	b.n	80024b0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3301      	adds	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b1f      	cmp	r3, #31
 80024ae:	d9df      	bls.n	8002470 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b1f      	cmp	r3, #31
 80024b6:	d902      	bls.n	80024be <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80024b8:	f06f 0302 	mvn.w	r3, #2
 80024bc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d145      	bne.n	8002550 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6810      	ldr	r0, [r2, #0]
 80024cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024d0:	2100      	movs	r1, #0
 80024d2:	4798      	blx	r3
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	db37      	blt.n	800254a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6810      	ldr	r0, [r2, #0]
 80024e2:	f107 0208 	add.w	r2, r7, #8
 80024e6:	2100      	movs	r1, #0
 80024e8:	4798      	blx	r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	db28      	blt.n	8002542 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4798      	blx	r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80024fa:	e01c      	b.n	8002536 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4798      	blx	r3
 8002502:	4603      	mov	r3, r0
 8002504:	461a      	mov	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800250e:	d80e      	bhi.n	800252e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6810      	ldr	r0, [r2, #0]
 8002518:	f107 0208 	add.w	r2, r7, #8
 800251c:	2100      	movs	r1, #0
 800251e:	4798      	blx	r3
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	da07      	bge.n	8002536 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002526:	f06f 0304 	mvn.w	r3, #4
 800252a:	613b      	str	r3, [r7, #16]
                 break;
 800252c:	e010      	b.n	8002550 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800252e:	f06f 0301 	mvn.w	r3, #1
 8002532:	613b      	str	r3, [r7, #16]
               break;
 8002534:	e00c      	b.n	8002550 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1dd      	bne.n	80024fc <LAN8742_Init+0xc6>
 8002540:	e006      	b.n	8002550 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002542:	f06f 0304 	mvn.w	r3, #4
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	e002      	b.n	8002550 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800254a:	f06f 0303 	mvn.w	r3, #3
 800254e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d112      	bne.n	800257c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	4798      	blx	r3
 800255c:	4603      	mov	r3, r0
 800255e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002560:	bf00      	nop
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	4798      	blx	r3
 8002568:	4603      	mov	r3, r0
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002574:	d9f5      	bls.n	8002562 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800257c:	693b      	ldr	r3, [r7, #16]
 }
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6810      	ldr	r0, [r2, #0]
 800259a:	f107 020c 	add.w	r2, r7, #12
 800259e:	2101      	movs	r1, #1
 80025a0:	4798      	blx	r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	da02      	bge.n	80025ae <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025a8:	f06f 0304 	mvn.w	r3, #4
 80025ac:	e06e      	b.n	800268c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6810      	ldr	r0, [r2, #0]
 80025b6:	f107 020c 	add.w	r2, r7, #12
 80025ba:	2101      	movs	r1, #1
 80025bc:	4798      	blx	r3
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	da02      	bge.n	80025ca <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025c4:	f06f 0304 	mvn.w	r3, #4
 80025c8:	e060      	b.n	800268c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80025d4:	2301      	movs	r3, #1
 80025d6:	e059      	b.n	800268c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6810      	ldr	r0, [r2, #0]
 80025e0:	f107 020c 	add.w	r2, r7, #12
 80025e4:	2100      	movs	r1, #0
 80025e6:	4798      	blx	r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	da02      	bge.n	80025f4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025ee:	f06f 0304 	mvn.w	r3, #4
 80025f2:	e04b      	b.n	800268c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11b      	bne.n	8002636 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <LAN8742_GetLinkState+0x90>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002612:	2302      	movs	r3, #2
 8002614:	e03a      	b.n	800268c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002620:	2303      	movs	r3, #3
 8002622:	e033      	b.n	800268c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800262e:	2304      	movs	r3, #4
 8002630:	e02c      	b.n	800268c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002632:	2305      	movs	r3, #5
 8002634:	e02a      	b.n	800268c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6810      	ldr	r0, [r2, #0]
 800263e:	f107 020c 	add.w	r2, r7, #12
 8002642:	211f      	movs	r1, #31
 8002644:	4798      	blx	r3
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	da02      	bge.n	8002652 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800264c:	f06f 0304 	mvn.w	r3, #4
 8002650:	e01c      	b.n	800268c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800265c:	2306      	movs	r3, #6
 800265e:	e015      	b.n	800268c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 031c 	and.w	r3, r3, #28
 8002666:	2b18      	cmp	r3, #24
 8002668:	d101      	bne.n	800266e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800266a:	2302      	movs	r3, #2
 800266c:	e00e      	b.n	800268c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 031c 	and.w	r3, r3, #28
 8002674:	2b08      	cmp	r3, #8
 8002676:	d101      	bne.n	800267c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002678:	2303      	movs	r3, #3
 800267a:	e007      	b.n	800268c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 031c 	and.w	r3, r3, #28
 8002682:	2b14      	cmp	r3, #20
 8002684:	d101      	bne.n	800268a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002686:	2304      	movs	r3, #4
 8002688:	e000      	b.n	800268c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800268a:	2305      	movs	r3, #5
    }				
  }
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269a:	2003      	movs	r0, #3
 800269c:	f000 f93b 	bl	8002916 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026a0:	f003 fdb0 	bl	8006204 <HAL_RCC_GetSysClockFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_Init+0x68>)
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	4913      	ldr	r1, [pc, #76]	; (8002700 <HAL_Init+0x6c>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
 80026bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_Init+0x68>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <HAL_Init+0x6c>)
 80026c8:	5cd3      	ldrb	r3, [r2, r3]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
 80026d4:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_Init+0x70>)
 80026d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026d8:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <HAL_Init+0x74>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026de:	200f      	movs	r0, #15
 80026e0:	f7ff f8ec 	bl	80018bc <HAL_InitTick>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e002      	b.n	80026f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026ee:	f7ff f8c7 	bl	8001880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	58024400 	.word	0x58024400
 8002700:	0801dd28 	.word	0x0801dd28
 8002704:	24000014 	.word	0x24000014
 8002708:	24000010 	.word	0x24000010

0800270c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_IncTick+0x20>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_IncTick+0x24>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4413      	add	r3, r2
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <HAL_IncTick+0x24>)
 800271e:	6013      	str	r3, [r2, #0]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	2400001c 	.word	0x2400001c
 8002730:	24004544 	.word	0x24004544

08002734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return uwTick;
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_GetTick+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	24004544 	.word	0x24004544

0800274c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7ff ffee 	bl	8002734 <HAL_GetTick>
 8002758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d005      	beq.n	8002772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_Delay+0x44>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002772:	bf00      	nop
 8002774:	f7ff ffde 	bl	8002734 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	429a      	cmp	r2, r3
 8002782:	d8f7      	bhi.n	8002774 <HAL_Delay+0x28>
  {
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2400001c 	.word	0x2400001c

08002794 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80027a4:	4904      	ldr	r1, [pc, #16]	; (80027b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	58000400 	.word	0x58000400

080027bc <__NVIC_SetPriorityGrouping>:
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <__NVIC_SetPriorityGrouping+0x40>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d8:	4013      	ands	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ea:	4a04      	ldr	r2, [pc, #16]	; (80027fc <__NVIC_SetPriorityGrouping+0x40>)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	60d3      	str	r3, [r2, #12]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00
 8002800:	05fa0000 	.word	0x05fa0000

08002804 <__NVIC_GetPriorityGrouping>:
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <__NVIC_GetPriorityGrouping+0x18>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	f003 0307 	and.w	r3, r3, #7
}
 8002812:	4618      	mov	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_EnableIRQ>:
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800282a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800282e:	2b00      	cmp	r3, #0
 8002830:	db0b      	blt.n	800284a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	f003 021f 	and.w	r2, r3, #31
 8002838:	4907      	ldr	r1, [pc, #28]	; (8002858 <__NVIC_EnableIRQ+0x38>)
 800283a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	2001      	movs	r0, #1
 8002842:	fa00 f202 	lsl.w	r2, r0, r2
 8002846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000e100 	.word	0xe000e100

0800285c <__NVIC_SetPriority>:
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	6039      	str	r1, [r7, #0]
 8002866:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800286c:	2b00      	cmp	r3, #0
 800286e:	db0a      	blt.n	8002886 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	490c      	ldr	r1, [pc, #48]	; (80028a8 <__NVIC_SetPriority+0x4c>)
 8002876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800287a:	0112      	lsls	r2, r2, #4
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	440b      	add	r3, r1
 8002880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002884:	e00a      	b.n	800289c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4908      	ldr	r1, [pc, #32]	; (80028ac <__NVIC_SetPriority+0x50>)
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	3b04      	subs	r3, #4
 8002894:	0112      	lsls	r2, r2, #4
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	440b      	add	r3, r1
 800289a:	761a      	strb	r2, [r3, #24]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000e100 	.word	0xe000e100
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <NVIC_EncodePriority>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f1c3 0307 	rsb	r3, r3, #7
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	bf28      	it	cs
 80028ce:	2304      	movcs	r3, #4
 80028d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d902      	bls.n	80028e0 <NVIC_EncodePriority+0x30>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3b03      	subs	r3, #3
 80028de:	e000      	b.n	80028e2 <NVIC_EncodePriority+0x32>
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	f04f 32ff 	mov.w	r2, #4294967295
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	401a      	ands	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f8:	f04f 31ff 	mov.w	r1, #4294967295
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43d9      	mvns	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	4313      	orrs	r3, r2
}
 800290a:	4618      	mov	r0, r3
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ff4c 	bl	80027bc <__NVIC_SetPriorityGrouping>
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800293a:	f7ff ff63 	bl	8002804 <__NVIC_GetPriorityGrouping>
 800293e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	6978      	ldr	r0, [r7, #20]
 8002946:	f7ff ffb3 	bl	80028b0 <NVIC_EncodePriority>
 800294a:	4602      	mov	r2, r0
 800294c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff82 	bl	800285c <__NVIC_SetPriority>
}
 8002958:	bf00      	nop
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800296a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff56 	bl	8002820 <__NVIC_EnableIRQ>
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002980:	f3bf 8f5f 	dmb	sy
}
 8002984:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <HAL_MPU_Disable+0x28>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	4a06      	ldr	r2, [pc, #24]	; (80029a4 <HAL_MPU_Disable+0x28>)
 800298c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002990:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_MPU_Disable+0x2c>)
 8002994:	2200      	movs	r2, #0
 8002996:	605a      	str	r2, [r3, #4]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000ed00 	.word	0xe000ed00
 80029a8:	e000ed90 	.word	0xe000ed90

080029ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80029b4:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <HAL_MPU_Enable+0x38>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_MPU_Enable+0x3c>)
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <HAL_MPU_Enable+0x3c>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80029ca:	f3bf 8f4f 	dsb	sy
}
 80029ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029d0:	f3bf 8f6f 	isb	sy
}
 80029d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000ed90 	.word	0xe000ed90
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	785a      	ldrb	r2, [r3, #1]
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <HAL_MPU_ConfigRegion+0x84>)
 80029fa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d029      	beq.n	8002a58 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002a04:	4a1a      	ldr	r2, [pc, #104]	; (8002a70 <HAL_MPU_ConfigRegion+0x84>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7b1b      	ldrb	r3, [r3, #12]
 8002a10:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	7adb      	ldrb	r3, [r3, #11]
 8002a16:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	7a9b      	ldrb	r3, [r3, #10]
 8002a1e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7b5b      	ldrb	r3, [r3, #13]
 8002a26:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7b9b      	ldrb	r3, [r3, #14]
 8002a2e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7bdb      	ldrb	r3, [r3, #15]
 8002a36:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7a5b      	ldrb	r3, [r3, #9]
 8002a3e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7a1b      	ldrb	r3, [r3, #8]
 8002a46:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a48:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	7812      	ldrb	r2, [r2, #0]
 8002a4e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a50:	4a07      	ldr	r2, [pc, #28]	; (8002a70 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a52:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a54:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002a56:	e005      	b.n	8002a64 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_MPU_ConfigRegion+0x84>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <HAL_MPU_ConfigRegion+0x84>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed90 	.word	0xe000ed90

08002a74 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0c6      	b.n	8002c14 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f007 fb86 	bl	800a1a0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2223      	movs	r2, #35	; 0x23
 8002a98:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9a:	4b60      	ldr	r3, [pc, #384]	; (8002c1c <HAL_ETH_Init+0x1a8>)
 8002a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002aa0:	4a5e      	ldr	r2, [pc, #376]	; (8002c1c <HAL_ETH_Init+0x1a8>)
 8002aa2:	f043 0302 	orr.w	r3, r3, #2
 8002aa6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002aaa:	4b5c      	ldr	r3, [pc, #368]	; (8002c1c <HAL_ETH_Init+0x1a8>)
 8002aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7a1b      	ldrb	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d103      	bne.n	8002ac8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7ff fe67 	bl	8002794 <HAL_SYSCFG_ETHInterfaceSelect>
 8002ac6:	e003      	b.n	8002ad0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002ac8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002acc:	f7ff fe62 	bl	8002794 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae8:	f7ff fe24 	bl	8002734 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002aee:	e00f      	b.n	8002b10 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002af0:	f7ff fe20 	bl	8002734 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002afe:	d907      	bls.n	8002b10 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2204      	movs	r2, #4
 8002b04:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	22e0      	movs	r2, #224	; 0xe0
 8002b0a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e081      	b.n	8002c14 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1e6      	bne.n	8002af0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f001 fad8 	bl	80040d8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002b28:	f003 fce6 	bl	80064f8 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4a3c      	ldr	r2, [pc, #240]	; (8002c20 <HAL_ETH_Init+0x1ac>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	0c9a      	lsrs	r2, r3, #18
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f001 fa2b 	bl	8003f9c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002b5c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002b60:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	22e0      	movs	r2, #224	; 0xe0
 8002b78:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e04a      	b.n	8002c14 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	f241 1308 	movw	r3, #4360	; 0x1108
 8002b86:	4413      	add	r3, r2
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <HAL_ETH_Init+0x1b0>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6952      	ldr	r2, [r2, #20]
 8002b92:	0052      	lsls	r2, r2, #1
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	6809      	ldr	r1, [r1, #0]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	f241 1308 	movw	r3, #4360	; 0x1108
 8002b9e:	440b      	add	r3, r1
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f001 faf0 	bl	8004188 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f001 fb34 	bl	8004216 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	3305      	adds	r3, #5
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	021a      	lsls	r2, r3, #8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	3303      	adds	r3, #3
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	061a      	lsls	r2, r3, #24
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	3302      	adds	r3, #2
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	3301      	adds	r3, #1
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002bfa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bfc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2210      	movs	r2, #16
 8002c0a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2210      	movs	r2, #16
 8002c10:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	58024400 	.word	0x58024400
 8002c20:	431bde83 	.word	0x431bde83
 8002c24:	ffff8001 	.word	0xffff8001

08002c28 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	3310      	adds	r3, #16
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_ETH_DescAssignMemory+0x28>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d904      	bls.n	8002c5a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e021      	b.n	8002c9e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b085      	sub	sp, #20
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d174      	bne.n	8002da4 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2223      	movs	r2, #35	; 0x23
 8002cbe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e00f      	b.n	8002ce6 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3310      	adds	r3, #16
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d9ec      	bls.n	8002cc6 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0202 	orr.w	r2, r2, #2
 8002d00:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f241 1304 	movw	r3, #4356	; 0x1104
 8002d2e:	4413      	add	r3, r2
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6811      	ldr	r1, [r2, #0]
 8002d36:	f043 0201 	orr.w	r2, r3, #1
 8002d3a:	f241 1304 	movw	r3, #4356	; 0x1104
 8002d3e:	440b      	add	r3, r1
 8002d40:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	f241 1308 	movw	r3, #4360	; 0x1108
 8002d4a:	4413      	add	r3, r2
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6811      	ldr	r1, [r2, #0]
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	f241 1308 	movw	r3, #4360	; 0x1108
 8002d5a:	440b      	add	r3, r1
 8002d5c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8002d70:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002d74:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	f241 1334 	movw	r3, #4404	; 0x1134
 8002d7e:	4413      	add	r3, r2
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6811      	ldr	r1, [r2, #0]
 8002d86:	f24d 0241 	movw	r2, #53313	; 0xd041
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	f241 1334 	movw	r3, #4404	; 0x1134
 8002d90:	440b      	add	r3, r1
 8002d92:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2210      	movs	r2, #16
 8002d98:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2222      	movs	r2, #34	; 0x22
 8002d9e:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e000      	b.n	8002da6 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d067      	beq.n	8002e94 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2223      	movs	r2, #35	; 0x23
 8002dc8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f241 1334 	movw	r3, #4404	; 0x1134
 8002dd2:	4413      	add	r3, r2
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6811      	ldr	r1, [r2, #0]
 8002dda:	4a32      	ldr	r2, [pc, #200]	; (8002ea4 <HAL_ETH_Stop_IT+0xf0>)
 8002ddc:	401a      	ands	r2, r3
 8002dde:	f241 1334 	movw	r3, #4404	; 0x1134
 8002de2:	440b      	add	r3, r1
 8002de4:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	f241 1304 	movw	r3, #4356	; 0x1104
 8002dee:	4413      	add	r3, r2
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6811      	ldr	r1, [r2, #0]
 8002df6:	f023 0201 	bic.w	r2, r3, #1
 8002dfa:	f241 1304 	movw	r3, #4356	; 0x1104
 8002dfe:	440b      	add	r3, r1
 8002e00:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	f241 1308 	movw	r3, #4360	; 0x1108
 8002e0a:	4413      	add	r3, r2
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6811      	ldr	r1, [r2, #0]
 8002e12:	f023 0201 	bic.w	r2, r3, #1
 8002e16:	f241 1308 	movw	r3, #4360	; 0x1108
 8002e1a:	440b      	add	r3, r1
 8002e1c:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0202 	bic.w	r2, r2, #2
 8002e50:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e00f      	b.n	8002e78 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3310      	adds	r3, #16
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3301      	adds	r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d9ec      	bls.n	8002e58 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2210      	movs	r2, #16
 8002e88:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	ffff2fbe 	.word	0xffff2fbe

08002ea8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d107      	bne.n	8002eca <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e073      	b.n	8002fb2 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d16e      	bne.n	8002fb0 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f001 f9fa 	bl	80042d0 <ETH_Prepare_Tx_Descriptors>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee6:	f043 0202 	orr.w	r2, r3, #2
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e05f      	b.n	8002fb2 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3206      	adds	r2, #6
 8002efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efe:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d904      	bls.n	8002f1c <HAL_ETH_Transmit+0x74>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	1f1a      	subs	r2, r3, #4
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	3106      	adds	r1, #6
 8002f28:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002f2c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002f30:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8002f32:	f7ff fbff 	bl	8002734 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002f38:	e034      	b.n	8002fa4 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d011      	beq.n	8002f70 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f50:	f043 0208 	orr.w	r2, r3, #8
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	22e0      	movs	r2, #224	; 0xe0
 8002f6a:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e020      	b.n	8002fb2 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d015      	beq.n	8002fa4 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002f78:	f7ff fbdc 	bl	8002734 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d302      	bcc.n	8002f8e <HAL_ETH_Transmit+0xe6>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f92:	f043 0204 	orr.w	r2, r3, #4
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	22e0      	movs	r2, #224	; 0xe0
 8002f9e:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e006      	b.n	8002fb2 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	dbc6      	blt.n	8002f3a <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b089      	sub	sp, #36	; 0x24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3344      	adds	r3, #68	; 0x44
 8002fc6:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd6:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d06b      	beq.n	80030c4 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e0ce      	b.n	800318e <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d036      	beq.n	8003070 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	3301      	adds	r3, #1
 8003006:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d902      	bls.n	8003024 <HAL_ETH_IsRxDataAvailable+0x6a>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3b04      	subs	r3, #4
 8003022:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302c:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	db11      	blt.n	800305a <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2201      	movs	r2, #1
 8003046:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	3301      	adds	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d902      	bls.n	800305a <HAL_ETH_IsRxDataAvailable+0xa0>
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3b04      	subs	r3, #4
 8003058:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 800306c:	2301      	movs	r3, #1
 800306e:	e08e      	b.n	800318e <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d012      	beq.n	80030a2 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8003080:	2301      	movs	r3, #1
 8003082:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	3301      	adds	r3, #1
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d902      	bls.n	8003096 <HAL_ETH_IsRxDataAvailable+0xdc>
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3b04      	subs	r3, #4
 8003094:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	e010      	b.n	80030c4 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	3301      	adds	r3, #1
 80030a6:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	3301      	adds	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d902      	bls.n	80030ba <HAL_ETH_IsRxDataAvailable+0x100>
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	3b04      	subs	r3, #4
 80030b8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c2:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	db02      	blt.n	80030d2 <HAL_ETH_IsRxDataAvailable+0x118>
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d98e      	bls.n	8002ff0 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d056      	beq.n	8003186 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f0:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e03b      	b.n	8003170 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003106:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d009      	beq.n	8003124 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	3b01      	subs	r3, #1
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	429a      	cmp	r2, r3
 800314c:	d20d      	bcs.n	800316a <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3301      	adds	r3, #1
 8003152:	61fb      	str	r3, [r7, #28]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d902      	bls.n	8003160 <HAL_ETH_IsRxDataAvailable+0x1a6>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3b04      	subs	r3, #4
 800315e:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003168:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3301      	adds	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	429a      	cmp	r2, r3
 8003176:	d3bf      	bcc.n	80030f8 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6819      	ldr	r1, [r3, #0]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	f241 1328 	movw	r3, #4392	; 0x1128
 8003182:	440b      	add	r3, r1
 8003184:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]

  return 0;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3724      	adds	r7, #36	; 0x24
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b08a      	sub	sp, #40	; 0x28
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3344      	adds	r3, #68	; 0x44
 80031a8:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031bc:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d104      	bne.n	80031d2 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e07d      	b.n	80032ce <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10f      	bne.n	80031fa <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff feed 	bl	8002fba <HAL_ETH_IsRxDataAvailable>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e071      	b.n	80032ce <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	623b      	str	r3, [r7, #32]
 80031fe:	e031      	b.n	8003264 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	461a      	mov	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	461a      	mov	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800323a:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	3301      	adds	r3, #1
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	2b03      	cmp	r3, #3
 8003246:	d902      	bls.n	800324e <HAL_ETH_GetRxDataBuffer+0xb4>
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	3b04      	subs	r3, #4
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003256:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	3301      	adds	r3, #1
 8003262:	623b      	str	r3, [r7, #32]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	3b01      	subs	r3, #1
 800326a:	6a3a      	ldr	r2, [r7, #32]
 800326c:	429a      	cmp	r2, r3
 800326e:	d3c7      	bcc.n	8003200 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	461a      	mov	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	429a      	cmp	r2, r3
 8003290:	d803      	bhi.n	800329a <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	e018      	b.n	80032cc <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d012      	beq.n	80032c8 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	461a      	mov	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	1ad2      	subs	r2, r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	e001      	b.n	80032cc <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3728      	adds	r7, #40	; 0x28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3344      	adds	r3, #68	; 0x44
 80032e4:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d107      	bne.n	8003304 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff fe60 	bl	8002fba <HAL_ETH_IsRxDataAvailable>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e017      	b.n	8003334 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	699a      	ldr	r2, [r3, #24]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	4413      	add	r3, r2
 800330c:	3b01      	subs	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d902      	bls.n	800331c <HAL_ETH_GetRxDataLength+0x46>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	3b04      	subs	r3, #4
 800331a:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003324:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3344      	adds	r3, #68	; 0x44
 8003348:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003358:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e057      	b.n	800341c <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3301      	adds	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	e03b      	b.n	80033f8 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800338e:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d009      	beq.n	80033ac <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d20d      	bcs.n	80033f2 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3301      	adds	r3, #1
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d902      	bls.n	80033e8 <HAL_ETH_BuildRxDescriptors+0xac>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3b04      	subs	r3, #4
 80033e6:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f0:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	3301      	adds	r3, #1
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d3bf      	bcc.n	8003380 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	f241 1328 	movw	r3, #4392	; 0x1128
 800340a:	440b      	add	r3, r1
 800340c:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3724      	adds	r7, #36	; 0x24
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	d113      	bne.n	800346a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	f241 1334 	movw	r3, #4404	; 0x1134
 800344a:	4413      	add	r3, r2
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d109      	bne.n	800346a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f006 ff78 	bl	800a34c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003464:	f248 0240 	movw	r2, #32832	; 0x8040
 8003468:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d113      	bne.n	80034a4 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	f241 1334 	movw	r3, #4404	; 0x1134
 8003484:	4413      	add	r3, r2
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d109      	bne.n	80034a4 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f8b7 	bl	8003604 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800349e:	f248 0201 	movw	r2, #32769	; 0x8001
 80034a2:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b6:	d149      	bne.n	800354c <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	f241 1334 	movw	r3, #4404	; 0x1134
 80034c0:	4413      	add	r3, r2
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034cc:	d13e      	bne.n	800354c <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	f043 0208 	orr.w	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ec:	d11b      	bne.n	8003526 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	f241 1302 	movw	r3, #4354	; 0x1102
 80034fc:	4013      	ands	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	f241 1334 	movw	r3, #4404	; 0x1134
 800350a:	4413      	add	r3, r2
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6811      	ldr	r1, [r2, #0]
 8003512:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003516:	f241 1334 	movw	r3, #4404	; 0x1134
 800351a:	440b      	add	r3, r1
 800351c:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	22e0      	movs	r2, #224	; 0xe0
 8003522:	66da      	str	r2, [r3, #108]	; 0x6c
 8003524:	e00f      	b.n	8003546 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003540:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8003544:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f866 	bl	8003618 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003554:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8003558:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800355c:	d10e      	bne.n	800357c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	22e0      	movs	r2, #224	; 0xe0
 800356e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f85b 	bl	800362c <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b10      	cmp	r3, #16
 800358a:	d10f      	bne.n	80035ac <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003594:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f84e 	bl	8003640 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d10f      	bne.n	80035dc <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f840 	bl	8003654 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80035dc:	4b08      	ldr	r3, [pc, #32]	; (8003600 <HAL_ETH_IRQHandler+0x1d8>)
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d006      	beq.n	80035f6 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_ETH_IRQHandler+0x1d8>)
 80035ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80035ee:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f839 	bl	8003668 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	58000080 	.word	0x58000080

08003604 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e03e      	b.n	800371c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036a6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	055b      	lsls	r3, r3, #21
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f043 030c 	orr.w	r3, r3, #12
 80036ca:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80036de:	f7ff f829 	bl	8002734 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80036e4:	e009      	b.n	80036fa <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80036e6:	f7ff f825 	bl	8002734 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f4:	d901      	bls.n	80036fa <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e010      	b.n	800371c <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1ed      	bne.n	80036e6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e03c      	b.n	80037c0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800374e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	055b      	lsls	r3, r3, #21
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f023 030c 	bic.w	r3, r3, #12
 8003772:	f043 0304 	orr.w	r3, r3, #4
 8003776:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	b29a      	uxth	r2, r3
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_ETH_WritePHYRegister+0xa4>)
 8003786:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800378a:	4a0f      	ldr	r2, [pc, #60]	; (80037c8 <HAL_ETH_WritePHYRegister+0xa4>)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003792:	f7fe ffcf 	bl	8002734 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003798:	e009      	b.n	80037ae <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800379a:	f7fe ffcb 	bl	8002734 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037a8:	d901      	bls.n	80037ae <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e008      	b.n	80037c0 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1ed      	bne.n	800379a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40028000 	.word	0x40028000

080037cc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e1c3      	b.n	8003b68 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 020c 	and.w	r2, r3, #12
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf14      	ite	ne
 80037fc:	2301      	movne	r3, #1
 80037fe:	2300      	moveq	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf14      	ite	ne
 8003890:	2301      	movne	r3, #1
 8003892:	2300      	moveq	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800395e:	2b00      	cmp	r3, #0
 8003960:	bf14      	ite	ne
 8003962:	2301      	movne	r3, #1
 8003964:	2300      	moveq	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	0e5b      	lsrs	r3, r3, #25
 8003a2a:	f003 021f 	and.w	r2, r3, #31
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 020f 	and.w	r2, r3, #15
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2300      	moveq	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bf0c      	ite	eq
 8003a86:	2301      	moveq	r3, #1
 8003a88:	2300      	movne	r3, #0
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003af4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003b04:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf14      	ite	ne
 8003b1c:	2301      	movne	r3, #1
 8003b1e:	2300      	moveq	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf14      	ite	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	2300      	moveq	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e00a      	b.n	8003b9e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d105      	bne.n	8003b9c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8003b90:	6839      	ldr	r1, [r7, #0]
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f860 	bl	8003c58 <ETH_SetMACConfig>

    return HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bb8:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bc0:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003bc2:	f002 fc99 	bl	80064f8 <HAL_RCC_GetHCLKFreq>
 8003bc6:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4a1e      	ldr	r2, [pc, #120]	; (8003c44 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d908      	bls.n	8003be2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d804      	bhi.n	8003be2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e027      	b.n	8003c32 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d908      	bls.n	8003bfc <HAL_ETH_SetMDIOClockRange+0x54>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4a17      	ldr	r2, [pc, #92]	; (8003c4c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d204      	bcs.n	8003bfc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	e01a      	b.n	8003c32 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d303      	bcc.n	8003c0c <HAL_ETH_SetMDIOClockRange+0x64>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d911      	bls.n	8003c30 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4a10      	ldr	r2, [pc, #64]	; (8003c50 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d908      	bls.n	8003c26 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4a0f      	ldr	r2, [pc, #60]	; (8003c54 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d804      	bhi.n	8003c26 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e005      	b.n	8003c32 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	e000      	b.n	8003c32 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003c30:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	01312cff 	.word	0x01312cff
 8003c48:	02160ebf 	.word	0x02160ebf
 8003c4c:	03938700 	.word	0x03938700
 8003c50:	05f5e0ff 	.word	0x05f5e0ff
 8003c54:	08f0d17f 	.word	0x08f0d17f

08003c58 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003c6a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	791b      	ldrb	r3, [r3, #4]
 8003c70:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003c72:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	7b1b      	ldrb	r3, [r3, #12]
 8003c78:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003c7a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	7b5b      	ldrb	r3, [r3, #13]
 8003c80:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003c82:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	7b9b      	ldrb	r3, [r3, #14]
 8003c88:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003c8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	7bdb      	ldrb	r3, [r3, #15]
 8003c90:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c92:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	7c12      	ldrb	r2, [r2, #16]
 8003c98:	2a00      	cmp	r2, #0
 8003c9a:	d102      	bne.n	8003ca2 <ETH_SetMACConfig+0x4a>
 8003c9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003ca0:	e000      	b.n	8003ca4 <ETH_SetMACConfig+0x4c>
 8003ca2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003ca4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	7c52      	ldrb	r2, [r2, #17]
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	d102      	bne.n	8003cb4 <ETH_SetMACConfig+0x5c>
 8003cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cb2:	e000      	b.n	8003cb6 <ETH_SetMACConfig+0x5e>
 8003cb4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003cb6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	7c9b      	ldrb	r3, [r3, #18]
 8003cbc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003cbe:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003cc4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003cca:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	7f1b      	ldrb	r3, [r3, #28]
 8003cd0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003cd2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	7f5b      	ldrb	r3, [r3, #29]
 8003cd8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003cda:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	7f92      	ldrb	r2, [r2, #30]
 8003ce0:	2a00      	cmp	r2, #0
 8003ce2:	d102      	bne.n	8003cea <ETH_SetMACConfig+0x92>
 8003ce4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ce8:	e000      	b.n	8003cec <ETH_SetMACConfig+0x94>
 8003cea:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003cec:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	7fdb      	ldrb	r3, [r3, #31]
 8003cf2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003cf4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003cfc:	2a00      	cmp	r2, #0
 8003cfe:	d102      	bne.n	8003d06 <ETH_SetMACConfig+0xae>
 8003d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d04:	e000      	b.n	8003d08 <ETH_SetMACConfig+0xb0>
 8003d06:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003d08:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003d0e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d16:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003d18:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b56      	ldr	r3, [pc, #344]	; (8003e84 <ETH_SetMACConfig+0x22c>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	430b      	orrs	r3, r1
 8003d34:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d42:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003d44:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d4c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003d4e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d56:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003d58:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003d60:	2a00      	cmp	r2, #0
 8003d62:	d102      	bne.n	8003d6a <ETH_SetMACConfig+0x112>
 8003d64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d68:	e000      	b.n	8003d6c <ETH_SetMACConfig+0x114>
 8003d6a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003d6c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	4b42      	ldr	r3, [pc, #264]	; (8003e88 <ETH_SetMACConfig+0x230>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	68f9      	ldr	r1, [r7, #12]
 8003d86:	430b      	orrs	r3, r1
 8003d88:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d90:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	4b3a      	ldr	r3, [pc, #232]	; (8003e8c <ETH_SetMACConfig+0x234>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	68f9      	ldr	r1, [r7, #12]
 8003daa:	430b      	orrs	r3, r1
 8003dac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003db4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003dba:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003dc2:	2a00      	cmp	r2, #0
 8003dc4:	d101      	bne.n	8003dca <ETH_SetMACConfig+0x172>
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	e000      	b.n	8003dcc <ETH_SetMACConfig+0x174>
 8003dca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003dcc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dde:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003de2:	4013      	ands	r3, r2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	68f9      	ldr	r1, [r7, #12]
 8003dea:	430b      	orrs	r3, r1
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003df4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003dfc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f023 0103 	bic.w	r1, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003e22:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003e3e:	2a00      	cmp	r2, #0
 8003e40:	d101      	bne.n	8003e46 <ETH_SetMACConfig+0x1ee>
 8003e42:	2240      	movs	r2, #64	; 0x40
 8003e44:	e000      	b.n	8003e48 <ETH_SetMACConfig+0x1f0>
 8003e46:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003e48:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003e50:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003e52:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003e5a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003e68:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	00048083 	.word	0x00048083
 8003e88:	c0f88000 	.word	0xc0f88000
 8003e8c:	fffffef0 	.word	0xfffffef0

08003e90 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b38      	ldr	r3, [pc, #224]	; (8003f88 <ETH_SetDMAConfig+0xf8>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	6809      	ldr	r1, [r1, #0]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003eb6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	791b      	ldrb	r3, [r3, #4]
 8003ebc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003ec2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	7b1b      	ldrb	r3, [r3, #12]
 8003ec8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	f241 0304 	movw	r3, #4100	; 0x1004
 8003ed6:	4413      	add	r3, r2
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b2c      	ldr	r3, [pc, #176]	; (8003f8c <ETH_SetDMAConfig+0xfc>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6811      	ldr	r1, [r2, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	f241 0304 	movw	r3, #4100	; 0x1004
 8003eea:	440b      	add	r3, r1
 8003eec:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	7b5b      	ldrb	r3, [r3, #13]
 8003ef2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <ETH_SetDMAConfig+0x100>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6811      	ldr	r1, [r2, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003f16:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	7d1b      	ldrb	r3, [r3, #20]
 8003f20:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003f22:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	7f5b      	ldrb	r3, [r3, #29]
 8003f28:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f241 1304 	movw	r3, #4356	; 0x1104
 8003f36:	4413      	add	r3, r2
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <ETH_SetDMAConfig+0x104>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6811      	ldr	r1, [r2, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	431a      	orrs	r2, r3
 8003f46:	f241 1304 	movw	r3, #4356	; 0x1104
 8003f4a:	440b      	add	r3, r1
 8003f4c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	7f1b      	ldrb	r3, [r3, #28]
 8003f52:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f64:	4413      	add	r3, r2
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <ETH_SetDMAConfig+0x108>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6811      	ldr	r1, [r2, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f78:	440b      	add	r3, r1
 8003f7a:	601a      	str	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	ffff87fd 	.word	0xffff87fd
 8003f8c:	ffff2ffe 	.word	0xffff2ffe
 8003f90:	fffec000 	.word	0xfffec000
 8003f94:	ffc0efef 	.word	0xffc0efef
 8003f98:	7fc0ffff 	.word	0x7fc0ffff

08003f9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b0a4      	sub	sp, #144	; 0x90
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003faa:	2300      	movs	r3, #0
 8003fac:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fdc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003ff4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003ff8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004000:	2300      	movs	r3, #0
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800400a:	2300      	movs	r3, #0
 800400c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004010:	2300      	movs	r3, #0
 8004012:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004016:	2300      	movs	r3, #0
 8004018:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800401a:	2300      	movs	r3, #0
 800401c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800401e:	2300      	movs	r3, #0
 8004020:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004022:	2300      	movs	r3, #0
 8004024:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004028:	2300      	movs	r3, #0
 800402a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004034:	2320      	movs	r3, #32
 8004036:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004040:	2300      	movs	r3, #0
 8004042:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004046:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800404a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800404c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004050:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004052:	2300      	movs	r3, #0
 8004054:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004058:	2302      	movs	r3, #2
 800405a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800405e:	2300      	movs	r3, #0
 8004060:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004064:	2300      	movs	r3, #0
 8004066:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800406a:	2300      	movs	r3, #0
 800406c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004076:	2300      	movs	r3, #0
 8004078:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fde6 	bl	8003c58 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800408c:	2301      	movs	r3, #1
 800408e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004090:	2301      	movs	r3, #1
 8004092:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004094:	2300      	movs	r3, #0
 8004096:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004098:	2300      	movs	r3, #0
 800409a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800409e:	2300      	movs	r3, #0
 80040a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80040a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80040ac:	2300      	movs	r3, #0
 80040ae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80040b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80040bc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80040c2:	f107 0308 	add.w	r3, r7, #8
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff fee1 	bl	8003e90 <ETH_SetDMAConfig>
}
 80040ce:	bf00      	nop
 80040d0:	3790      	adds	r7, #144	; 0x90
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80040f2:	f002 fa01 	bl	80064f8 <HAL_RCC_GetHCLKFreq>
 80040f6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d908      	bls.n	8004112 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d804      	bhi.n	8004112 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e027      	b.n	8004162 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4a18      	ldr	r2, [pc, #96]	; (8004178 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d908      	bls.n	800412c <ETH_MAC_MDIO_ClkConfig+0x54>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	4a17      	ldr	r2, [pc, #92]	; (800417c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d204      	bcs.n	800412c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e01a      	b.n	8004162 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4a13      	ldr	r2, [pc, #76]	; (800417c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d303      	bcc.n	800413c <ETH_MAC_MDIO_ClkConfig+0x64>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d911      	bls.n	8004160 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d908      	bls.n	8004156 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4a0f      	ldr	r2, [pc, #60]	; (8004184 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d804      	bhi.n	8004156 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e005      	b.n	8004162 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e000      	b.n	8004162 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004160:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	01312cff 	.word	0x01312cff
 8004178:	02160ebf 	.word	0x02160ebf
 800417c:	03938700 	.word	0x03938700
 8004180:	05f5e0ff 	.word	0x05f5e0ff
 8004184:	08f0d17f 	.word	0x08f0d17f

08004188 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e01d      	b.n	80041d2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68d9      	ldr	r1, [r3, #12]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4613      	mov	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	440b      	add	r3, r1
 80041a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2200      	movs	r2, #0
 80041b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2200      	movs	r2, #0
 80041be:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	3206      	adds	r2, #6
 80041c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3301      	adds	r3, #1
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d9de      	bls.n	8004196 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	f241 132c 	movw	r3, #4396	; 0x112c
 80041e6:	4413      	add	r3, r2
 80041e8:	2203      	movs	r2, #3
 80041ea:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68d9      	ldr	r1, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	f241 1314 	movw	r3, #4372	; 0x1114
 80041f8:	4413      	add	r3, r2
 80041fa:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004208:	601a      	str	r2, [r3, #0]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	e024      	b.n	800426e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6919      	ldr	r1, [r3, #16]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4613      	mov	r3, r2
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	4413      	add	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	440b      	add	r3, r1
 8004234:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2200      	movs	r2, #0
 8004240:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2200      	movs	r2, #0
 8004246:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2200      	movs	r2, #0
 800424c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2200      	movs	r2, #0
 8004258:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3310      	adds	r3, #16
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3301      	adds	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d9d7      	bls.n	8004224 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	f241 1330 	movw	r3, #4400	; 0x1130
 800429a:	4413      	add	r3, r2
 800429c:	2203      	movs	r2, #3
 800429e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6919      	ldr	r1, [r3, #16]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	f241 131c 	movw	r3, #4380	; 0x111c
 80042ac:	4413      	add	r3, r2
 80042ae:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	f241 1328 	movw	r3, #4392	; 0x1128
 80042c0:	4413      	add	r3, r2
 80042c2:	6019      	str	r1, [r3, #0]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b08d      	sub	sp, #52	; 0x34
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3318      	adds	r3, #24
 80042e0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 80042ee:	2300      	movs	r3, #0
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800430e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004312:	d007      	beq.n	8004324 <ETH_Prepare_Tx_Descriptors+0x54>
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	3304      	adds	r3, #4
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004324:	2302      	movs	r3, #2
 8004326:	e24a      	b.n	80047be <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d044      	beq.n	80043be <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	4b72      	ldr	r3, [pc, #456]	; (8004504 <ETH_Prepare_Tx_Descriptors+0x234>)
 800433a:	4013      	ands	r3, r2
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004340:	431a      	orrs	r2, r3
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004360:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d027      	beq.n	80043be <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	b29a      	uxth	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	041b      	lsls	r3, r3, #16
 800437a:	431a      	orrs	r2, r3
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	431a      	orrs	r2, r3
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80043ac:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80043bc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	4b4e      	ldr	r3, [pc, #312]	; (8004508 <ETH_Prepare_Tx_Descriptors+0x238>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	6992      	ldr	r2, [r2, #24]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d105      	bne.n	8004400 <ETH_Prepare_Tx_Descriptors+0x130>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d030      	beq.n	8004462 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	3301      	adds	r3, #1
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	2b03      	cmp	r3, #3
 8004422:	d902      	bls.n	800442a <ETH_Prepare_Tx_Descriptors+0x15a>
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	3b04      	subs	r3, #4
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004432:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	3301      	adds	r3, #1
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004446:	d10c      	bne.n	8004462 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004450:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800445e:	2302      	movs	r3, #2
 8004460:	e1ad      	b.n	80047be <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	3301      	adds	r3, #1
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	4b24      	ldr	r3, [pc, #144]	; (8004508 <ETH_Prepare_Tx_Descriptors+0x238>)
 8004478:	4013      	ands	r3, r2
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	6852      	ldr	r2, [r2, #4]
 800447e:	431a      	orrs	r2, r3
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d012      	beq.n	80044b2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	4b1a      	ldr	r3, [pc, #104]	; (800450c <ETH_Prepare_Tx_Descriptors+0x23c>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	6852      	ldr	r2, [r2, #4]
 80044a8:	0412      	lsls	r2, r2, #16
 80044aa:	431a      	orrs	r2, r3
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	e008      	b.n	80044c4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	2200      	movs	r2, #0
 80044b6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	4b13      	ldr	r3, [pc, #76]	; (800450c <ETH_Prepare_Tx_Descriptors+0x23c>)
 80044be:	4013      	ands	r3, r2
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d021      	beq.n	8004514 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	04db      	lsls	r3, r3, #19
 80044de:	431a      	orrs	r2, r3
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <ETH_Prepare_Tx_Descriptors+0x240>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	69d2      	ldr	r2, [r2, #28]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	e02e      	b.n	8004562 <ETH_Prepare_Tx_Descriptors+0x292>
 8004504:	ffff0000 	.word	0xffff0000
 8004508:	ffffc000 	.word	0xffffc000
 800450c:	c000ffff 	.word	0xc000ffff
 8004510:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	4b93      	ldr	r3, [pc, #588]	; (8004768 <ETH_Prepare_Tx_Descriptors+0x498>)
 800451a:	4013      	ands	r3, r2
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	6852      	ldr	r2, [r2, #4]
 8004520:	431a      	orrs	r2, r3
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	431a      	orrs	r2, r3
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	431a      	orrs	r2, r3
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d008      	beq.n	8004580 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	431a      	orrs	r2, r3
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80cb 	beq.w	8004748 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	431a      	orrs	r2, r3
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80045c4:	e0c0      	b.n	8004748 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	3301      	adds	r3, #1
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d902      	bls.n	80045e4 <ETH_Prepare_Tx_Descriptors+0x314>
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	3b04      	subs	r3, #4
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ec:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004606:	d007      	beq.n	8004618 <ETH_Prepare_Tx_Descriptors+0x348>
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	3304      	adds	r3, #4
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d026      	beq.n	8004666 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004624:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8004626:	2300      	movs	r3, #0
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
 800462a:	e016      	b.n	800465a <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463a:	3301      	adds	r3, #1
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	2b03      	cmp	r3, #3
 8004642:	d902      	bls.n	800464a <ETH_Prepare_Tx_Descriptors+0x37a>
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	3b04      	subs	r3, #4
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004652:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	3301      	adds	r3, #1
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	429a      	cmp	r2, r3
 8004660:	d3e4      	bcc.n	800462c <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8004662:	2302      	movs	r3, #2
 8004664:	e0ab      	b.n	80047be <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	3301      	adds	r3, #1
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	4b3a      	ldr	r3, [pc, #232]	; (800476c <ETH_Prepare_Tx_Descriptors+0x49c>)
 8004682:	4013      	ands	r3, r2
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	6852      	ldr	r2, [r2, #4]
 8004688:	431a      	orrs	r2, r3
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d012      	beq.n	80046bc <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	4b31      	ldr	r3, [pc, #196]	; (8004770 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	6852      	ldr	r2, [r2, #4]
 80046b2:	0412      	lsls	r2, r2, #16
 80046b4:	431a      	orrs	r2, r3
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	609a      	str	r2, [r3, #8]
 80046ba:	e008      	b.n	80046ce <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	2200      	movs	r2, #0
 80046c0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	6a3a      	ldr	r2, [r7, #32]
 80046cc:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00f      	beq.n	80046fa <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	4b25      	ldr	r3, [pc, #148]	; (8004774 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	69d2      	ldr	r2, [r2, #28]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	60da      	str	r2, [r3, #12]
 80046f8:	e017      	b.n	800472a <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <ETH_Prepare_Tx_Descriptors+0x498>)
 8004700:	4013      	ands	r3, r2
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	6852      	ldr	r2, [r2, #4]
 8004706:	431a      	orrs	r2, r3
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	431a      	orrs	r2, r3
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	3301      	adds	r3, #1
 800472e:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f47f af3a 	bne.w	80045c6 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00f      	beq.n	8004778 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	e00e      	b.n	8004784 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8004766:	bf00      	nop
 8004768:	ffff8000 	.word	0xffff8000
 800476c:	ffffc000 	.word	0xffffc000
 8004770:	c000ffff 	.word	0xc000ffff
 8004774:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004794:	6979      	ldr	r1, [r7, #20]
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	3304      	adds	r3, #4
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80047a6:	b672      	cpsid	i
}
 80047a8:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	4413      	add	r3, r2
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80047b8:	b662      	cpsie	i
}
 80047ba:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3734      	adds	r7, #52	; 0x34
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop

080047cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b098      	sub	sp, #96	; 0x60
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80047d4:	4a84      	ldr	r2, [pc, #528]	; (80049e8 <HAL_FDCAN_Init+0x21c>)
 80047d6:	f107 030c 	add.w	r3, r7, #12
 80047da:	4611      	mov	r1, r2
 80047dc:	224c      	movs	r2, #76	; 0x4c
 80047de:	4618      	mov	r0, r3
 80047e0:	f014 f98e 	bl	8018b00 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e1ca      	b.n	8004b84 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a7e      	ldr	r2, [pc, #504]	; (80049ec <HAL_FDCAN_Init+0x220>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d106      	bne.n	8004806 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc fad8 	bl	8000dd0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0210 	bic.w	r2, r2, #16
 800482e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004830:	f7fd ff80 	bl	8002734 <HAL_GetTick>
 8004834:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004836:	e014      	b.n	8004862 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004838:	f7fd ff7c 	bl	8002734 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b0a      	cmp	r3, #10
 8004844:	d90d      	bls.n	8004862 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800484c:	f043 0201 	orr.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2203      	movs	r2, #3
 800485a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e190      	b.n	8004b84 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b08      	cmp	r3, #8
 800486e:	d0e3      	beq.n	8004838 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004880:	f7fd ff58 	bl	8002734 <HAL_GetTick>
 8004884:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004886:	e014      	b.n	80048b2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004888:	f7fd ff54 	bl	8002734 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b0a      	cmp	r3, #10
 8004894:	d90d      	bls.n	80048b2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800489c:	f043 0201 	orr.w	r2, r3, #1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2203      	movs	r2, #3
 80048aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e168      	b.n	8004b84 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0e3      	beq.n	8004888 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0202 	orr.w	r2, r2, #2
 80048ce:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	7c1b      	ldrb	r3, [r3, #16]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d108      	bne.n	80048ea <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e6:	619a      	str	r2, [r3, #24]
 80048e8:	e007      	b.n	80048fa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699a      	ldr	r2, [r3, #24]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7c5b      	ldrb	r3, [r3, #17]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d108      	bne.n	8004914 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699a      	ldr	r2, [r3, #24]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004910:	619a      	str	r2, [r3, #24]
 8004912:	e007      	b.n	8004924 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004922:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	7c9b      	ldrb	r3, [r3, #18]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d108      	bne.n	800493e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800493a:	619a      	str	r2, [r3, #24]
 800493c:	e007      	b.n	800494e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699a      	ldr	r2, [r3, #24]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800494c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004972:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0210 	bic.w	r2, r2, #16
 8004982:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d108      	bne.n	800499e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0204 	orr.w	r2, r2, #4
 800499a:	619a      	str	r2, [r3, #24]
 800499c:	e030      	b.n	8004a00 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d02c      	beq.n	8004a00 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d020      	beq.n	80049f0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049bc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0210 	orr.w	r2, r2, #16
 80049cc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d114      	bne.n	8004a00 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699a      	ldr	r2, [r3, #24]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0220 	orr.w	r2, r2, #32
 80049e4:	619a      	str	r2, [r3, #24]
 80049e6:	e00b      	b.n	8004a00 <HAL_FDCAN_Init+0x234>
 80049e8:	08019c74 	.word	0x08019c74
 80049ec:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0220 	orr.w	r2, r2, #32
 80049fe:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a10:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a18:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a28:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a2a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a34:	d115      	bne.n	8004a62 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	3b01      	subs	r3, #1
 8004a42:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a44:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004a4e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	3b01      	subs	r3, #1
 8004a58:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004a5e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a60:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a88:	4413      	add	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d012      	beq.n	8004ab4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004a96:	f023 0107 	bic.w	r1, r3, #7
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d012      	beq.n	8004ae2 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ac4:	f023 0107 	bic.w	r1, r3, #7
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d013      	beq.n	8004b12 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004af2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b00:	4413      	add	r3, r2
 8004b02:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004b06:	011a      	lsls	r2, r3, #4
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d013      	beq.n	8004b42 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b22:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b30:	4413      	add	r3, r2
 8004b32:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004b36:	021a      	lsls	r2, r3, #8
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <HAL_FDCAN_Init+0x3c0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d107      	bne.n	8004b5c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f022 0203 	bic.w	r2, r2, #3
 8004b5a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f9af 	bl	8004ed8 <FDCAN_CalcultateRamBlockAddresses>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004b80:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3760      	adds	r7, #96	; 0x60
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	4000a000 	.word	0x4000a000

08004b90 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004ba0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d002      	beq.n	8004bae <HAL_FDCAN_ConfigFilter+0x1e>
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d157      	bne.n	8004c5e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d12b      	bne.n	8004c0e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b07      	cmp	r3, #7
 8004bbc:	d10d      	bne.n	8004bda <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004bca:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004bd0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004bd2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	e00e      	b.n	8004bf8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004be6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004bee:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e025      	b.n	8004c5a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	075a      	lsls	r2, r3, #29
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	2b07      	cmp	r3, #7
 8004c22:	d103      	bne.n	8004c2c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	e006      	b.n	8004c3a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	079a      	lsls	r2, r3, #30
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	3304      	adds	r3, #4
 8004c52:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e008      	b.n	8004c70 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c64:	f043 0202 	orr.w	r2, r3, #2
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
  }
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d110      	bne.n	8004cb8 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004c9e:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004ca4:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e008      	b.n	8004cca <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cbe:	f043 0204 	orr.w	r2, r3, #4
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
  }
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d111      	bne.n	8004d0e <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2202      	movs	r2, #2
 8004cee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0201 	bic.w	r2, r2, #1
 8004d00:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e008      	b.n	8004d20 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d14:	f043 0204 	orr.w	r2, r3, #4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
  }
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d141      	bne.n	8004dc8 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004d4c:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d109      	bne.n	8004d68 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e038      	b.n	8004dda <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d009      	beq.n	8004d8c <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e026      	b.n	8004dda <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004d94:	0c1b      	lsrs	r3, r3, #16
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fa1e 	bl	80051e4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2101      	movs	r1, #1
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	fa01 f202 	lsl.w	r2, r1, r2
 8004db4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004db8:	2201      	movs	r2, #1
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e008      	b.n	8004dda <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dce:	f043 0208 	orr.w	r2, r3, #8
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004df6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d002      	beq.n	8004e04 <HAL_FDCAN_ActivateNotification+0x20>
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d155      	bne.n	8004eb0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d108      	bne.n	8004e24 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0201 	orr.w	r2, r2, #1
 8004e20:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e22:	e014      	b.n	8004e4e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d108      	bne.n	8004e46 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0202 	orr.w	r2, r2, #2
 8004e42:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e44:	e003      	b.n	8004e4e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d009      	beq.n	8004e6c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <HAL_FDCAN_ActivateNotification+0xec>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	6553      	str	r3, [r2, #84]	; 0x54
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	0f9b      	lsrs	r3, r3, #30
 8004ea6:	490b      	ldr	r1, [pc, #44]	; (8004ed4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e008      	b.n	8004ec2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eb6:	f043 0202 	orr.w	r2, r3, #2
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	3fcfffff 	.word	0x3fcfffff
 8004ed4:	4000a800 	.word	0x4000a800

08004ed8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004eee:	4ba7      	ldr	r3, [pc, #668]	; (800518c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	0091      	lsls	r1, r2, #2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	430b      	orrs	r3, r1
 8004efc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f08:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	041a      	lsls	r2, r3, #16
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	4413      	add	r3, r2
 8004f24:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f2e:	4b97      	ldr	r3, [pc, #604]	; (800518c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	0091      	lsls	r1, r2, #2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f50:	041a      	lsls	r2, r3, #16
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4413      	add	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004f70:	4b86      	ldr	r3, [pc, #536]	; (800518c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	0091      	lsls	r1, r2, #2
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f8a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	041a      	lsls	r2, r3, #16
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	4413      	add	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004fb8:	4b74      	ldr	r3, [pc, #464]	; (800518c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	0091      	lsls	r1, r2, #2
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fd2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fda:	041a      	lsls	r2, r3, #16
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004fee:	fb02 f303 	mul.w	r3, r2, r3
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005000:	4b62      	ldr	r3, [pc, #392]	; (800518c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005002:	4013      	ands	r3, r2
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	0091      	lsls	r1, r2, #2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	430b      	orrs	r3, r1
 800500e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800501a:	fb02 f303 	mul.w	r3, r2, r3
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	4413      	add	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800502c:	4b57      	ldr	r3, [pc, #348]	; (800518c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800502e:	4013      	ands	r3, r2
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	0091      	lsls	r1, r2, #2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	430b      	orrs	r3, r1
 800503a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005046:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	041a      	lsls	r2, r3, #16
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	4413      	add	r3, r2
 8005064:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800506e:	4b47      	ldr	r3, [pc, #284]	; (800518c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005070:	4013      	ands	r3, r2
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	0091      	lsls	r1, r2, #2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	430b      	orrs	r3, r1
 800507c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005088:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005090:	041a      	lsls	r2, r3, #16
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80050a4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ac:	061a      	lsls	r2, r3, #24
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050bc:	4b34      	ldr	r3, [pc, #208]	; (8005190 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80050be:	4413      	add	r3, r2
 80050c0:	009a      	lsls	r2, r3, #2
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	441a      	add	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	441a      	add	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80050f2:	fb01 f303 	mul.w	r3, r1, r3
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	441a      	add	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005122:	fb01 f303 	mul.w	r3, r1, r3
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	441a      	add	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	441a      	add	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	441a      	add	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	441a      	add	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	4a04      	ldr	r2, [pc, #16]	; (8005194 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d915      	bls.n	80051b4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005188:	e006      	b.n	8005198 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800518a:	bf00      	nop
 800518c:	ffff0003 	.word	0xffff0003
 8005190:	10002b00 	.word	0x10002b00
 8005194:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800519e:	f043 0220 	orr.w	r2, r3, #32
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2203      	movs	r2, #3
 80051ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e010      	b.n	80051d6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	e005      	b.n	80051c8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3304      	adds	r3, #4
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d3f3      	bcc.n	80051bc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop

080051e4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	; 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005202:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800520a:	4313      	orrs	r3, r2
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	e00a      	b.n	8005226 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005218:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800521e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005224:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005230:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005236:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800523c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	fb01 f303 	mul.w	r3, r1, r3
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	3304      	adds	r3, #4
 8005266:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	3304      	adds	r3, #4
 8005272:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e020      	b.n	80052bc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	3303      	adds	r3, #3
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4413      	add	r3, r2
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	3302      	adds	r3, #2
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	440b      	add	r3, r1
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005292:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3301      	adds	r3, #1
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	440b      	add	r3, r1
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80052a0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	440a      	add	r2, r1
 80052a8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80052aa:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	3304      	adds	r3, #4
 80052b4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	3304      	adds	r3, #4
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	4a06      	ldr	r2, [pc, #24]	; (80052dc <FDCAN_CopyMessageToRAM+0xf8>)
 80052c4:	5cd3      	ldrb	r3, [r2, r3]
 80052c6:	461a      	mov	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d3d5      	bcc.n	800527a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	3724      	adds	r7, #36	; 0x24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	0801dd38 	.word	0x0801dd38

080052e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	; 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80052ee:	4b86      	ldr	r3, [pc, #536]	; (8005508 <HAL_GPIO_Init+0x228>)
 80052f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052f2:	e18c      	b.n	800560e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	2101      	movs	r1, #1
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	4013      	ands	r3, r2
 8005302:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 817e 	beq.w	8005608 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d005      	beq.n	8005324 <HAL_GPIO_Init+0x44>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d130      	bne.n	8005386 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	2203      	movs	r2, #3
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	43db      	mvns	r3, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800535a:	2201      	movs	r2, #1
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	43db      	mvns	r3, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4013      	ands	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	091b      	lsrs	r3, r3, #4
 8005370:	f003 0201 	and.w	r2, r3, #1
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4313      	orrs	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b03      	cmp	r3, #3
 8005390:	d017      	beq.n	80053c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	2203      	movs	r2, #3
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	43db      	mvns	r3, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4013      	ands	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d123      	bne.n	8005416 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	08da      	lsrs	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3208      	adds	r2, #8
 80053d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	220f      	movs	r2, #15
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4013      	ands	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4313      	orrs	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	08da      	lsrs	r2, r3, #3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3208      	adds	r2, #8
 8005410:	69b9      	ldr	r1, [r7, #24]
 8005412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	2203      	movs	r2, #3
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	4013      	ands	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 0203 	and.w	r2, r3, #3
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4313      	orrs	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80d8 	beq.w	8005608 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005458:	4b2c      	ldr	r3, [pc, #176]	; (800550c <HAL_GPIO_Init+0x22c>)
 800545a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800545e:	4a2b      	ldr	r2, [pc, #172]	; (800550c <HAL_GPIO_Init+0x22c>)
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005468:	4b28      	ldr	r3, [pc, #160]	; (800550c <HAL_GPIO_Init+0x22c>)
 800546a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005476:	4a26      	ldr	r2, [pc, #152]	; (8005510 <HAL_GPIO_Init+0x230>)
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	089b      	lsrs	r3, r3, #2
 800547c:	3302      	adds	r3, #2
 800547e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	220f      	movs	r2, #15
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4013      	ands	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <HAL_GPIO_Init+0x234>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d04a      	beq.n	8005538 <HAL_GPIO_Init+0x258>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a1c      	ldr	r2, [pc, #112]	; (8005518 <HAL_GPIO_Init+0x238>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d02b      	beq.n	8005502 <HAL_GPIO_Init+0x222>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a1b      	ldr	r2, [pc, #108]	; (800551c <HAL_GPIO_Init+0x23c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d025      	beq.n	80054fe <HAL_GPIO_Init+0x21e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <HAL_GPIO_Init+0x240>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d01f      	beq.n	80054fa <HAL_GPIO_Init+0x21a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a19      	ldr	r2, [pc, #100]	; (8005524 <HAL_GPIO_Init+0x244>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d019      	beq.n	80054f6 <HAL_GPIO_Init+0x216>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a18      	ldr	r2, [pc, #96]	; (8005528 <HAL_GPIO_Init+0x248>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_GPIO_Init+0x212>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a17      	ldr	r2, [pc, #92]	; (800552c <HAL_GPIO_Init+0x24c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00d      	beq.n	80054ee <HAL_GPIO_Init+0x20e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a16      	ldr	r2, [pc, #88]	; (8005530 <HAL_GPIO_Init+0x250>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <HAL_GPIO_Init+0x20a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a15      	ldr	r2, [pc, #84]	; (8005534 <HAL_GPIO_Init+0x254>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d101      	bne.n	80054e6 <HAL_GPIO_Init+0x206>
 80054e2:	2309      	movs	r3, #9
 80054e4:	e029      	b.n	800553a <HAL_GPIO_Init+0x25a>
 80054e6:	230a      	movs	r3, #10
 80054e8:	e027      	b.n	800553a <HAL_GPIO_Init+0x25a>
 80054ea:	2307      	movs	r3, #7
 80054ec:	e025      	b.n	800553a <HAL_GPIO_Init+0x25a>
 80054ee:	2306      	movs	r3, #6
 80054f0:	e023      	b.n	800553a <HAL_GPIO_Init+0x25a>
 80054f2:	2305      	movs	r3, #5
 80054f4:	e021      	b.n	800553a <HAL_GPIO_Init+0x25a>
 80054f6:	2304      	movs	r3, #4
 80054f8:	e01f      	b.n	800553a <HAL_GPIO_Init+0x25a>
 80054fa:	2303      	movs	r3, #3
 80054fc:	e01d      	b.n	800553a <HAL_GPIO_Init+0x25a>
 80054fe:	2302      	movs	r3, #2
 8005500:	e01b      	b.n	800553a <HAL_GPIO_Init+0x25a>
 8005502:	2301      	movs	r3, #1
 8005504:	e019      	b.n	800553a <HAL_GPIO_Init+0x25a>
 8005506:	bf00      	nop
 8005508:	58000080 	.word	0x58000080
 800550c:	58024400 	.word	0x58024400
 8005510:	58000400 	.word	0x58000400
 8005514:	58020000 	.word	0x58020000
 8005518:	58020400 	.word	0x58020400
 800551c:	58020800 	.word	0x58020800
 8005520:	58020c00 	.word	0x58020c00
 8005524:	58021000 	.word	0x58021000
 8005528:	58021400 	.word	0x58021400
 800552c:	58021800 	.word	0x58021800
 8005530:	58021c00 	.word	0x58021c00
 8005534:	58022400 	.word	0x58022400
 8005538:	2300      	movs	r3, #0
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	f002 0203 	and.w	r2, r2, #3
 8005540:	0092      	lsls	r2, r2, #2
 8005542:	4093      	lsls	r3, r2
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4313      	orrs	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800554a:	4938      	ldr	r1, [pc, #224]	; (800562c <HAL_GPIO_Init+0x34c>)
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	089b      	lsrs	r3, r3, #2
 8005550:	3302      	adds	r3, #2
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	43db      	mvns	r3, r3
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	4013      	ands	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800557e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	43db      	mvns	r3, r3
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	4013      	ands	r3, r2
 8005596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80055ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	43db      	mvns	r3, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4013      	ands	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	43db      	mvns	r3, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4013      	ands	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	3301      	adds	r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	f47f ae6b 	bne.w	80052f4 <HAL_GPIO_Init+0x14>
  }
}
 800561e:	bf00      	nop
 8005620:	bf00      	nop
 8005622:	3724      	adds	r7, #36	; 0x24
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	58000400 	.word	0x58000400

08005630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	807b      	strh	r3, [r7, #2]
 800563c:	4613      	mov	r3, r2
 800563e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005640:	787b      	ldrb	r3, [r7, #1]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005646:	887a      	ldrh	r2, [r7, #2]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800564c:	e003      	b.n	8005656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800564e:	887b      	ldrh	r3, [r7, #2]
 8005650:	041a      	lsls	r2, r3, #16
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	619a      	str	r2, [r3, #24]
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005662:	b480      	push	{r7}
 8005664:	b085      	sub	sp, #20
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	460b      	mov	r3, r1
 800566c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005674:	887a      	ldrh	r2, [r7, #2]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4013      	ands	r3, r2
 800567a:	041a      	lsls	r2, r3, #16
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	43d9      	mvns	r1, r3
 8005680:	887b      	ldrh	r3, [r7, #2]
 8005682:	400b      	ands	r3, r1
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	619a      	str	r2, [r3, #24]
}
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	4603      	mov	r3, r0
 800569e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80056a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056b4:	88fb      	ldrh	r3, [r7, #6]
 80056b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fb fe69 	bl	8001394 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80056d4:	4b19      	ldr	r3, [pc, #100]	; (800573c <HAL_PWREx_ConfigSupply+0x70>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d00a      	beq.n	80056f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056e0:	4b16      	ldr	r3, [pc, #88]	; (800573c <HAL_PWREx_ConfigSupply+0x70>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d001      	beq.n	80056f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e01f      	b.n	8005732 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e01d      	b.n	8005732 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80056f6:	4b11      	ldr	r3, [pc, #68]	; (800573c <HAL_PWREx_ConfigSupply+0x70>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f023 0207 	bic.w	r2, r3, #7
 80056fe:	490f      	ldr	r1, [pc, #60]	; (800573c <HAL_PWREx_ConfigSupply+0x70>)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4313      	orrs	r3, r2
 8005704:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005706:	f7fd f815 	bl	8002734 <HAL_GetTick>
 800570a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800570c:	e009      	b.n	8005722 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800570e:	f7fd f811 	bl	8002734 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800571c:	d901      	bls.n	8005722 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e007      	b.n	8005732 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <HAL_PWREx_ConfigSupply+0x70>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800572a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572e:	d1ee      	bne.n	800570e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	58024800 	.word	0x58024800

08005740 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08c      	sub	sp, #48	; 0x30
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e397      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8087 	beq.w	800586e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005760:	4b9e      	ldr	r3, [pc, #632]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800576a:	4b9c      	ldr	r3, [pc, #624]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	2b10      	cmp	r3, #16
 8005774:	d007      	beq.n	8005786 <HAL_RCC_OscConfig+0x46>
 8005776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005778:	2b18      	cmp	r3, #24
 800577a:	d110      	bne.n	800579e <HAL_RCC_OscConfig+0x5e>
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d10b      	bne.n	800579e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005786:	4b95      	ldr	r3, [pc, #596]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d06c      	beq.n	800586c <HAL_RCC_OscConfig+0x12c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d168      	bne.n	800586c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e371      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a6:	d106      	bne.n	80057b6 <HAL_RCC_OscConfig+0x76>
 80057a8:	4b8c      	ldr	r3, [pc, #560]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a8b      	ldr	r2, [pc, #556]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80057ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	e02e      	b.n	8005814 <HAL_RCC_OscConfig+0xd4>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10c      	bne.n	80057d8 <HAL_RCC_OscConfig+0x98>
 80057be:	4b87      	ldr	r3, [pc, #540]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a86      	ldr	r2, [pc, #536]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80057c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	4b84      	ldr	r3, [pc, #528]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a83      	ldr	r2, [pc, #524]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80057d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e01d      	b.n	8005814 <HAL_RCC_OscConfig+0xd4>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057e0:	d10c      	bne.n	80057fc <HAL_RCC_OscConfig+0xbc>
 80057e2:	4b7e      	ldr	r3, [pc, #504]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a7d      	ldr	r2, [pc, #500]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80057e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	4b7b      	ldr	r3, [pc, #492]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a7a      	ldr	r2, [pc, #488]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80057f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e00b      	b.n	8005814 <HAL_RCC_OscConfig+0xd4>
 80057fc:	4b77      	ldr	r3, [pc, #476]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a76      	ldr	r2, [pc, #472]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 8005802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	4b74      	ldr	r3, [pc, #464]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a73      	ldr	r2, [pc, #460]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 800580e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d013      	beq.n	8005844 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fc ff8a 	bl	8002734 <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005824:	f7fc ff86 	bl	8002734 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	; 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e325      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005836:	4b69      	ldr	r3, [pc, #420]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0xe4>
 8005842:	e014      	b.n	800586e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7fc ff76 	bl	8002734 <HAL_GetTick>
 8005848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800584c:	f7fc ff72 	bl	8002734 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b64      	cmp	r3, #100	; 0x64
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e311      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800585e:	4b5f      	ldr	r3, [pc, #380]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x10c>
 800586a:	e000      	b.n	800586e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800586c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 808a 	beq.w	8005990 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800587c:	4b57      	ldr	r3, [pc, #348]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005884:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005886:	4b55      	ldr	r3, [pc, #340]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <HAL_RCC_OscConfig+0x162>
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	2b18      	cmp	r3, #24
 8005896:	d137      	bne.n	8005908 <HAL_RCC_OscConfig+0x1c8>
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d132      	bne.n	8005908 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058a2:	4b4e      	ldr	r3, [pc, #312]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <HAL_RCC_OscConfig+0x17a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e2e3      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058ba:	4b48      	ldr	r3, [pc, #288]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f023 0219 	bic.w	r2, r3, #25
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	4945      	ldr	r1, [pc, #276]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058cc:	f7fc ff32 	bl	8002734 <HAL_GetTick>
 80058d0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058d4:	f7fc ff2e 	bl	8002734 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e2cd      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058e6:	4b3d      	ldr	r3, [pc, #244]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f0      	beq.n	80058d4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f2:	4b3a      	ldr	r3, [pc, #232]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	061b      	lsls	r3, r3, #24
 8005900:	4936      	ldr	r1, [pc, #216]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 8005902:	4313      	orrs	r3, r2
 8005904:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005906:	e043      	b.n	8005990 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d026      	beq.n	800595e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005910:	4b32      	ldr	r3, [pc, #200]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f023 0219 	bic.w	r2, r3, #25
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	492f      	ldr	r1, [pc, #188]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 800591e:	4313      	orrs	r3, r2
 8005920:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005922:	f7fc ff07 	bl	8002734 <HAL_GetTick>
 8005926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800592a:	f7fc ff03 	bl	8002734 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e2a2      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800593c:	4b27      	ldr	r3, [pc, #156]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005948:	4b24      	ldr	r3, [pc, #144]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	061b      	lsls	r3, r3, #24
 8005956:	4921      	ldr	r1, [pc, #132]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 8005958:	4313      	orrs	r3, r2
 800595a:	604b      	str	r3, [r1, #4]
 800595c:	e018      	b.n	8005990 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800595e:	4b1f      	ldr	r3, [pc, #124]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1e      	ldr	r2, [pc, #120]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 8005964:	f023 0301 	bic.w	r3, r3, #1
 8005968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596a:	f7fc fee3 	bl	8002734 <HAL_GetTick>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005972:	f7fc fedf 	bl	8002734 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e27e      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1f0      	bne.n	8005972 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	d06d      	beq.n	8005a78 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800599c:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059a4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059a6:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d007      	beq.n	80059c2 <HAL_RCC_OscConfig+0x282>
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b18      	cmp	r3, #24
 80059b6:	d11e      	bne.n	80059f6 <HAL_RCC_OscConfig+0x2b6>
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d119      	bne.n	80059f6 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059c2:	4b06      	ldr	r3, [pc, #24]	; (80059dc <HAL_RCC_OscConfig+0x29c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d008      	beq.n	80059e0 <HAL_RCC_OscConfig+0x2a0>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	2b80      	cmp	r3, #128	; 0x80
 80059d4:	d004      	beq.n	80059e0 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e253      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
 80059da:	bf00      	nop
 80059dc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059e0:	4ba3      	ldr	r3, [pc, #652]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	49a0      	ldr	r1, [pc, #640]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059f4:	e040      	b.n	8005a78 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d023      	beq.n	8005a46 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80059fe:	4b9c      	ldr	r3, [pc, #624]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a9b      	ldr	r2, [pc, #620]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0a:	f7fc fe93 	bl	8002734 <HAL_GetTick>
 8005a0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005a12:	f7fc fe8f 	bl	8002734 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e22e      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a24:	4b92      	ldr	r3, [pc, #584]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f0      	beq.n	8005a12 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a30:	4b8f      	ldr	r3, [pc, #572]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	061b      	lsls	r3, r3, #24
 8005a3e:	498c      	ldr	r1, [pc, #560]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60cb      	str	r3, [r1, #12]
 8005a44:	e018      	b.n	8005a78 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a46:	4b8a      	ldr	r3, [pc, #552]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a89      	ldr	r2, [pc, #548]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a52:	f7fc fe6f 	bl	8002734 <HAL_GetTick>
 8005a56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005a5a:	f7fc fe6b 	bl	8002734 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e20a      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a6c:	4b80      	ldr	r3, [pc, #512]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f0      	bne.n	8005a5a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d036      	beq.n	8005af2 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d019      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a8c:	4b78      	ldr	r3, [pc, #480]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a90:	4a77      	ldr	r2, [pc, #476]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a98:	f7fc fe4c 	bl	8002734 <HAL_GetTick>
 8005a9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aa0:	f7fc fe48 	bl	8002734 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e1e7      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ab2:	4b6f      	ldr	r3, [pc, #444]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x360>
 8005abe:	e018      	b.n	8005af2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ac0:	4b6b      	ldr	r3, [pc, #428]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac4:	4a6a      	ldr	r2, [pc, #424]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005acc:	f7fc fe32 	bl	8002734 <HAL_GetTick>
 8005ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ad4:	f7fc fe2e 	bl	8002734 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e1cd      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ae6:	4b62      	ldr	r3, [pc, #392]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0320 	and.w	r3, r3, #32
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d036      	beq.n	8005b6c <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d019      	beq.n	8005b3a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b06:	4b5a      	ldr	r3, [pc, #360]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a59      	ldr	r2, [pc, #356]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b12:	f7fc fe0f 	bl	8002734 <HAL_GetTick>
 8005b16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005b1a:	f7fc fe0b 	bl	8002734 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e1aa      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b2c:	4b50      	ldr	r3, [pc, #320]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0f0      	beq.n	8005b1a <HAL_RCC_OscConfig+0x3da>
 8005b38:	e018      	b.n	8005b6c <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b3a:	4b4d      	ldr	r3, [pc, #308]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a4c      	ldr	r2, [pc, #304]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b46:	f7fc fdf5 	bl	8002734 <HAL_GetTick>
 8005b4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005b4e:	f7fc fdf1 	bl	8002734 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e190      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b60:	4b43      	ldr	r3, [pc, #268]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f0      	bne.n	8005b4e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8085 	beq.w	8005c84 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b7a:	4b3e      	ldr	r3, [pc, #248]	; (8005c74 <HAL_RCC_OscConfig+0x534>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a3d      	ldr	r2, [pc, #244]	; (8005c74 <HAL_RCC_OscConfig+0x534>)
 8005b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b86:	f7fc fdd5 	bl	8002734 <HAL_GetTick>
 8005b8a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b8e:	f7fc fdd1 	bl	8002734 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b64      	cmp	r3, #100	; 0x64
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e170      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ba0:	4b34      	ldr	r3, [pc, #208]	; (8005c74 <HAL_RCC_OscConfig+0x534>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0f0      	beq.n	8005b8e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d106      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x482>
 8005bb4:	4b2e      	ldr	r3, [pc, #184]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	4a2d      	ldr	r2, [pc, #180]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc0:	e02d      	b.n	8005c1e <HAL_RCC_OscConfig+0x4de>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10c      	bne.n	8005be4 <HAL_RCC_OscConfig+0x4a4>
 8005bca:	4b29      	ldr	r3, [pc, #164]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bce:	4a28      	ldr	r2, [pc, #160]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005bd0:	f023 0301 	bic.w	r3, r3, #1
 8005bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd6:	4b26      	ldr	r3, [pc, #152]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bda:	4a25      	ldr	r2, [pc, #148]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005bdc:	f023 0304 	bic.w	r3, r3, #4
 8005be0:	6713      	str	r3, [r2, #112]	; 0x70
 8005be2:	e01c      	b.n	8005c1e <HAL_RCC_OscConfig+0x4de>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2b05      	cmp	r3, #5
 8005bea:	d10c      	bne.n	8005c06 <HAL_RCC_OscConfig+0x4c6>
 8005bec:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005bf2:	f043 0304 	orr.w	r3, r3, #4
 8005bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf8:	4b1d      	ldr	r3, [pc, #116]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfc:	4a1c      	ldr	r2, [pc, #112]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	6713      	str	r3, [r2, #112]	; 0x70
 8005c04:	e00b      	b.n	8005c1e <HAL_RCC_OscConfig+0x4de>
 8005c06:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	4a19      	ldr	r2, [pc, #100]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	6713      	str	r3, [r2, #112]	; 0x70
 8005c12:	4b17      	ldr	r3, [pc, #92]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	4a16      	ldr	r2, [pc, #88]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005c18:	f023 0304 	bic.w	r3, r3, #4
 8005c1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d015      	beq.n	8005c52 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c26:	f7fc fd85 	bl	8002734 <HAL_GetTick>
 8005c2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c2c:	e00a      	b.n	8005c44 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c2e:	f7fc fd81 	bl	8002734 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e11e      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c44:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <HAL_RCC_OscConfig+0x530>)
 8005c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0ee      	beq.n	8005c2e <HAL_RCC_OscConfig+0x4ee>
 8005c50:	e018      	b.n	8005c84 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c52:	f7fc fd6f 	bl	8002734 <HAL_GetTick>
 8005c56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c58:	e00e      	b.n	8005c78 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c5a:	f7fc fd6b 	bl	8002734 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d905      	bls.n	8005c78 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e108      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
 8005c70:	58024400 	.word	0x58024400
 8005c74:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c78:	4b84      	ldr	r3, [pc, #528]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ea      	bne.n	8005c5a <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80f9 	beq.w	8005e80 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c8e:	4b7f      	ldr	r3, [pc, #508]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c96:	2b18      	cmp	r3, #24
 8005c98:	f000 80b4 	beq.w	8005e04 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	f040 8095 	bne.w	8005dd0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca6:	4b79      	ldr	r3, [pc, #484]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a78      	ldr	r2, [pc, #480]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005cac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb2:	f7fc fd3f 	bl	8002734 <HAL_GetTick>
 8005cb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cba:	f7fc fd3b 	bl	8002734 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e0da      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ccc:	4b6f      	ldr	r3, [pc, #444]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f0      	bne.n	8005cba <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cd8:	4b6c      	ldr	r3, [pc, #432]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cdc:	4b6c      	ldr	r3, [pc, #432]	; (8005e90 <HAL_RCC_OscConfig+0x750>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ce8:	0112      	lsls	r2, r2, #4
 8005cea:	430a      	orrs	r2, r1
 8005cec:	4967      	ldr	r1, [pc, #412]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	628b      	str	r3, [r1, #40]	; 0x28
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	3b01      	subs	r3, #1
 8005d02:	025b      	lsls	r3, r3, #9
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	041b      	lsls	r3, r3, #16
 8005d10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d22:	495a      	ldr	r1, [pc, #360]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005d28:	4b58      	ldr	r3, [pc, #352]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	4a57      	ldr	r2, [pc, #348]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d34:	4b55      	ldr	r3, [pc, #340]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d38:	4b56      	ldr	r3, [pc, #344]	; (8005e94 <HAL_RCC_OscConfig+0x754>)
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d40:	00d2      	lsls	r2, r2, #3
 8005d42:	4952      	ldr	r1, [pc, #328]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d48:	4b50      	ldr	r3, [pc, #320]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	f023 020c 	bic.w	r2, r3, #12
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	494d      	ldr	r1, [pc, #308]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d5a:	4b4c      	ldr	r3, [pc, #304]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	f023 0202 	bic.w	r2, r3, #2
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d66:	4949      	ldr	r1, [pc, #292]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d6c:	4b47      	ldr	r3, [pc, #284]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	4a46      	ldr	r2, [pc, #280]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d78:	4b44      	ldr	r3, [pc, #272]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	4a43      	ldr	r2, [pc, #268]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d84:	4b41      	ldr	r3, [pc, #260]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	4a40      	ldr	r2, [pc, #256]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005d90:	4b3e      	ldr	r3, [pc, #248]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	4a3d      	ldr	r2, [pc, #244]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d9c:	4b3b      	ldr	r3, [pc, #236]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a3a      	ldr	r2, [pc, #232]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fc fcc4 	bl	8002734 <HAL_GetTick>
 8005dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db0:	f7fc fcc0 	bl	8002734 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e05f      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005dc2:	4b32      	ldr	r3, [pc, #200]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCC_OscConfig+0x670>
 8005dce:	e057      	b.n	8005e80 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd0:	4b2e      	ldr	r3, [pc, #184]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a2d      	ldr	r2, [pc, #180]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ddc:	f7fc fcaa 	bl	8002734 <HAL_GetTick>
 8005de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de4:	f7fc fca6 	bl	8002734 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e045      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005df6:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f0      	bne.n	8005de4 <HAL_RCC_OscConfig+0x6a4>
 8005e02:	e03d      	b.n	8005e80 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005e04:	4b21      	ldr	r3, [pc, #132]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e0a:	4b20      	ldr	r3, [pc, #128]	; (8005e8c <HAL_RCC_OscConfig+0x74c>)
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d031      	beq.n	8005e7c <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f003 0203 	and.w	r2, r3, #3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d12a      	bne.n	8005e7c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	091b      	lsrs	r3, r3, #4
 8005e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d122      	bne.n	8005e7c <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e40:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d11a      	bne.n	8005e7c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	0a5b      	lsrs	r3, r3, #9
 8005e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e52:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d111      	bne.n	8005e7c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	0c1b      	lsrs	r3, r3, #16
 8005e5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d108      	bne.n	8005e7c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	0e1b      	lsrs	r3, r3, #24
 8005e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e76:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d001      	beq.n	8005e80 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3730      	adds	r7, #48	; 0x30
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	58024400 	.word	0x58024400
 8005e90:	fffffc0c 	.word	0xfffffc0c
 8005e94:	ffff0007 	.word	0xffff0007

08005e98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e19c      	b.n	80061e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005eac:	4b8a      	ldr	r3, [pc, #552]	; (80060d8 <HAL_RCC_ClockConfig+0x240>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d910      	bls.n	8005edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eba:	4b87      	ldr	r3, [pc, #540]	; (80060d8 <HAL_RCC_ClockConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f023 020f 	bic.w	r2, r3, #15
 8005ec2:	4985      	ldr	r1, [pc, #532]	; (80060d8 <HAL_RCC_ClockConfig+0x240>)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eca:	4b83      	ldr	r3, [pc, #524]	; (80060d8 <HAL_RCC_ClockConfig+0x240>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d001      	beq.n	8005edc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e184      	b.n	80061e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d010      	beq.n	8005f0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	4b7b      	ldr	r3, [pc, #492]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d908      	bls.n	8005f0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ef8:	4b78      	ldr	r3, [pc, #480]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	4975      	ldr	r1, [pc, #468]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d010      	beq.n	8005f38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695a      	ldr	r2, [r3, #20]
 8005f1a:	4b70      	ldr	r3, [pc, #448]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d908      	bls.n	8005f38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f26:	4b6d      	ldr	r3, [pc, #436]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	496a      	ldr	r1, [pc, #424]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d010      	beq.n	8005f66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699a      	ldr	r2, [r3, #24]
 8005f48:	4b64      	ldr	r3, [pc, #400]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d908      	bls.n	8005f66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f54:	4b61      	ldr	r3, [pc, #388]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	495e      	ldr	r1, [pc, #376]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d010      	beq.n	8005f94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69da      	ldr	r2, [r3, #28]
 8005f76:	4b59      	ldr	r3, [pc, #356]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d908      	bls.n	8005f94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f82:	4b56      	ldr	r3, [pc, #344]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	4953      	ldr	r1, [pc, #332]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d010      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	4b4d      	ldr	r3, [pc, #308]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d908      	bls.n	8005fc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fb0:	4b4a      	ldr	r3, [pc, #296]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	f023 020f 	bic.w	r2, r3, #15
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	4947      	ldr	r1, [pc, #284]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d055      	beq.n	800607a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005fce:	4b43      	ldr	r3, [pc, #268]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	4940      	ldr	r1, [pc, #256]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d107      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fe8:	4b3c      	ldr	r3, [pc, #240]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d121      	bne.n	8006038 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e0f6      	b.n	80061e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d107      	bne.n	8006010 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006000:	4b36      	ldr	r3, [pc, #216]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d115      	bne.n	8006038 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0ea      	b.n	80061e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d107      	bne.n	8006028 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006018:	4b30      	ldr	r3, [pc, #192]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006020:	2b00      	cmp	r3, #0
 8006022:	d109      	bne.n	8006038 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e0de      	b.n	80061e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006028:	4b2c      	ldr	r3, [pc, #176]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0d6      	b.n	80061e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006038:	4b28      	ldr	r3, [pc, #160]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f023 0207 	bic.w	r2, r3, #7
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	4925      	ldr	r1, [pc, #148]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8006046:	4313      	orrs	r3, r2
 8006048:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800604a:	f7fc fb73 	bl	8002734 <HAL_GetTick>
 800604e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006050:	e00a      	b.n	8006068 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006052:	f7fc fb6f 	bl	8002734 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006060:	4293      	cmp	r3, r2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e0be      	b.n	80061e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006068:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	429a      	cmp	r2, r3
 8006078:	d1eb      	bne.n	8006052 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d010      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	4b14      	ldr	r3, [pc, #80]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	429a      	cmp	r2, r3
 8006094:	d208      	bcs.n	80060a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	f023 020f 	bic.w	r2, r3, #15
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	490e      	ldr	r1, [pc, #56]	; (80060dc <HAL_RCC_ClockConfig+0x244>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <HAL_RCC_ClockConfig+0x240>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 030f 	and.w	r3, r3, #15
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d214      	bcs.n	80060e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060b6:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <HAL_RCC_ClockConfig+0x240>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f023 020f 	bic.w	r2, r3, #15
 80060be:	4906      	ldr	r1, [pc, #24]	; (80060d8 <HAL_RCC_ClockConfig+0x240>)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c6:	4b04      	ldr	r3, [pc, #16]	; (80060d8 <HAL_RCC_ClockConfig+0x240>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d005      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e086      	b.n	80061e6 <HAL_RCC_ClockConfig+0x34e>
 80060d8:	52002000 	.word	0x52002000
 80060dc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d010      	beq.n	800610e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	4b3f      	ldr	r3, [pc, #252]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d208      	bcs.n	800610e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060fc:	4b3c      	ldr	r3, [pc, #240]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	4939      	ldr	r1, [pc, #228]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 800610a:	4313      	orrs	r3, r2
 800610c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d010      	beq.n	800613c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695a      	ldr	r2, [r3, #20]
 800611e:	4b34      	ldr	r3, [pc, #208]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006126:	429a      	cmp	r2, r3
 8006128:	d208      	bcs.n	800613c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800612a:	4b31      	ldr	r3, [pc, #196]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	492e      	ldr	r1, [pc, #184]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 8006138:	4313      	orrs	r3, r2
 800613a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	2b00      	cmp	r3, #0
 8006146:	d010      	beq.n	800616a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	699a      	ldr	r2, [r3, #24]
 800614c:	4b28      	ldr	r3, [pc, #160]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006154:	429a      	cmp	r2, r3
 8006156:	d208      	bcs.n	800616a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006158:	4b25      	ldr	r3, [pc, #148]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	4922      	ldr	r1, [pc, #136]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 8006166:	4313      	orrs	r3, r2
 8006168:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d010      	beq.n	8006198 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69da      	ldr	r2, [r3, #28]
 800617a:	4b1d      	ldr	r3, [pc, #116]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006182:	429a      	cmp	r2, r3
 8006184:	d208      	bcs.n	8006198 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006186:	4b1a      	ldr	r3, [pc, #104]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	4917      	ldr	r1, [pc, #92]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 8006194:	4313      	orrs	r3, r2
 8006196:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006198:	f000 f834 	bl	8006204 <HAL_RCC_GetSysClockFreq>
 800619c:	4602      	mov	r2, r0
 800619e:	4b14      	ldr	r3, [pc, #80]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	4912      	ldr	r1, [pc, #72]	; (80061f4 <HAL_RCC_ClockConfig+0x35c>)
 80061aa:	5ccb      	ldrb	r3, [r1, r3]
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
 80061b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061b6:	4b0e      	ldr	r3, [pc, #56]	; (80061f0 <HAL_RCC_ClockConfig+0x358>)
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	4a0d      	ldr	r2, [pc, #52]	; (80061f4 <HAL_RCC_ClockConfig+0x35c>)
 80061c0:	5cd3      	ldrb	r3, [r2, r3]
 80061c2:	f003 031f 	and.w	r3, r3, #31
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
 80061cc:	4a0a      	ldr	r2, [pc, #40]	; (80061f8 <HAL_RCC_ClockConfig+0x360>)
 80061ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061d0:	4a0a      	ldr	r2, [pc, #40]	; (80061fc <HAL_RCC_ClockConfig+0x364>)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80061d6:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <HAL_RCC_ClockConfig+0x368>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fb fb6e 	bl	80018bc <HAL_InitTick>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	58024400 	.word	0x58024400
 80061f4:	0801dd28 	.word	0x0801dd28
 80061f8:	24000014 	.word	0x24000014
 80061fc:	24000010 	.word	0x24000010
 8006200:	24000018 	.word	0x24000018

08006204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006204:	b480      	push	{r7}
 8006206:	b089      	sub	sp, #36	; 0x24
 8006208:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800620a:	4bb3      	ldr	r3, [pc, #716]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006212:	2b18      	cmp	r3, #24
 8006214:	f200 8155 	bhi.w	80064c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006218:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <HAL_RCC_GetSysClockFreq+0x1c>)
 800621a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621e:	bf00      	nop
 8006220:	08006285 	.word	0x08006285
 8006224:	080064c3 	.word	0x080064c3
 8006228:	080064c3 	.word	0x080064c3
 800622c:	080064c3 	.word	0x080064c3
 8006230:	080064c3 	.word	0x080064c3
 8006234:	080064c3 	.word	0x080064c3
 8006238:	080064c3 	.word	0x080064c3
 800623c:	080064c3 	.word	0x080064c3
 8006240:	080062ab 	.word	0x080062ab
 8006244:	080064c3 	.word	0x080064c3
 8006248:	080064c3 	.word	0x080064c3
 800624c:	080064c3 	.word	0x080064c3
 8006250:	080064c3 	.word	0x080064c3
 8006254:	080064c3 	.word	0x080064c3
 8006258:	080064c3 	.word	0x080064c3
 800625c:	080064c3 	.word	0x080064c3
 8006260:	080062b1 	.word	0x080062b1
 8006264:	080064c3 	.word	0x080064c3
 8006268:	080064c3 	.word	0x080064c3
 800626c:	080064c3 	.word	0x080064c3
 8006270:	080064c3 	.word	0x080064c3
 8006274:	080064c3 	.word	0x080064c3
 8006278:	080064c3 	.word	0x080064c3
 800627c:	080064c3 	.word	0x080064c3
 8006280:	080062b7 	.word	0x080062b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006284:	4b94      	ldr	r3, [pc, #592]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d009      	beq.n	80062a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006290:	4b91      	ldr	r3, [pc, #580]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	08db      	lsrs	r3, r3, #3
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	4a90      	ldr	r2, [pc, #576]	; (80064dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800629c:	fa22 f303 	lsr.w	r3, r2, r3
 80062a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80062a2:	e111      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062a4:	4b8d      	ldr	r3, [pc, #564]	; (80064dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062a6:	61bb      	str	r3, [r7, #24]
    break;
 80062a8:	e10e      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80062aa:	4b8d      	ldr	r3, [pc, #564]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062ac:	61bb      	str	r3, [r7, #24]
    break;
 80062ae:	e10b      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80062b0:	4b8c      	ldr	r3, [pc, #560]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80062b2:	61bb      	str	r3, [r7, #24]
    break;
 80062b4:	e108      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062b6:	4b88      	ldr	r3, [pc, #544]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80062c0:	4b85      	ldr	r3, [pc, #532]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c4:	091b      	lsrs	r3, r3, #4
 80062c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80062cc:	4b82      	ldr	r3, [pc, #520]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80062d6:	4b80      	ldr	r3, [pc, #512]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062da:	08db      	lsrs	r3, r3, #3
 80062dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	fb02 f303 	mul.w	r3, r2, r3
 80062e6:	ee07 3a90 	vmov	s15, r3
 80062ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80e1 	beq.w	80064bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	f000 8083 	beq.w	8006408 <HAL_RCC_GetSysClockFreq+0x204>
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b02      	cmp	r3, #2
 8006306:	f200 80a1 	bhi.w	800644c <HAL_RCC_GetSysClockFreq+0x248>
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_RCC_GetSysClockFreq+0x114>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d056      	beq.n	80063c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006316:	e099      	b.n	800644c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006318:	4b6f      	ldr	r3, [pc, #444]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b00      	cmp	r3, #0
 8006322:	d02d      	beq.n	8006380 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006324:	4b6c      	ldr	r3, [pc, #432]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	08db      	lsrs	r3, r3, #3
 800632a:	f003 0303 	and.w	r3, r3, #3
 800632e:	4a6b      	ldr	r2, [pc, #428]	; (80064dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006330:	fa22 f303 	lsr.w	r3, r2, r3
 8006334:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	ee07 3a90 	vmov	s15, r3
 800633c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634e:	4b62      	ldr	r3, [pc, #392]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800635e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006362:	eddf 5a61 	vldr	s11, [pc, #388]	; 80064e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800636a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800636e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800637e:	e087      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80064ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800638e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006392:	4b51      	ldr	r3, [pc, #324]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80064e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063c2:	e065      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	ee07 3a90 	vmov	s15, r3
 80063ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80064f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d6:	4b40      	ldr	r3, [pc, #256]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80063ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80064e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006406:	e043      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006412:	eddf 6a38 	vldr	s13, [pc, #224]	; 80064f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800641a:	4b2f      	ldr	r3, [pc, #188]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642a:	ed97 6a02 	vldr	s12, [r7, #8]
 800642e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80064e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800643a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800643e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800644a:	e021      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006456:	eddf 6a26 	vldr	s13, [pc, #152]	; 80064f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800645a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800645e:	4b1e      	ldr	r3, [pc, #120]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800646e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006472:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80064e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800647a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800647e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800648e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006490:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	0a5b      	lsrs	r3, r3, #9
 8006496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800649a:	3301      	adds	r3, #1
 800649c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	ee07 3a90 	vmov	s15, r3
 80064a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80064ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064b4:	ee17 3a90 	vmov	r3, s15
 80064b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80064ba:	e005      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
    break;
 80064c0:	e002      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80064c2:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064c4:	61bb      	str	r3, [r7, #24]
    break;
 80064c6:	bf00      	nop
  }

  return sysclockfreq;
 80064c8:	69bb      	ldr	r3, [r7, #24]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3724      	adds	r7, #36	; 0x24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	58024400 	.word	0x58024400
 80064dc:	03d09000 	.word	0x03d09000
 80064e0:	003d0900 	.word	0x003d0900
 80064e4:	007a1200 	.word	0x007a1200
 80064e8:	46000000 	.word	0x46000000
 80064ec:	4c742400 	.word	0x4c742400
 80064f0:	4a742400 	.word	0x4a742400
 80064f4:	4af42400 	.word	0x4af42400

080064f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064fe:	f7ff fe81 	bl	8006204 <HAL_RCC_GetSysClockFreq>
 8006502:	4602      	mov	r2, r0
 8006504:	4b10      	ldr	r3, [pc, #64]	; (8006548 <HAL_RCC_GetHCLKFreq+0x50>)
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	490f      	ldr	r1, [pc, #60]	; (800654c <HAL_RCC_GetHCLKFreq+0x54>)
 8006510:	5ccb      	ldrb	r3, [r1, r3]
 8006512:	f003 031f 	and.w	r3, r3, #31
 8006516:	fa22 f303 	lsr.w	r3, r2, r3
 800651a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <HAL_RCC_GetHCLKFreq+0x50>)
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	4a09      	ldr	r2, [pc, #36]	; (800654c <HAL_RCC_GetHCLKFreq+0x54>)
 8006526:	5cd3      	ldrb	r3, [r2, r3]
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	fa22 f303 	lsr.w	r3, r2, r3
 8006532:	4a07      	ldr	r2, [pc, #28]	; (8006550 <HAL_RCC_GetHCLKFreq+0x58>)
 8006534:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006536:	4a07      	ldr	r2, [pc, #28]	; (8006554 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800653c:	4b04      	ldr	r3, [pc, #16]	; (8006550 <HAL_RCC_GetHCLKFreq+0x58>)
 800653e:	681b      	ldr	r3, [r3, #0]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	58024400 	.word	0x58024400
 800654c:	0801dd28 	.word	0x0801dd28
 8006550:	24000014 	.word	0x24000014
 8006554:	24000010 	.word	0x24000010

08006558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800655c:	f7ff ffcc 	bl	80064f8 <HAL_RCC_GetHCLKFreq>
 8006560:	4602      	mov	r2, r0
 8006562:	4b06      	ldr	r3, [pc, #24]	; (800657c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	091b      	lsrs	r3, r3, #4
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	4904      	ldr	r1, [pc, #16]	; (8006580 <HAL_RCC_GetPCLK1Freq+0x28>)
 800656e:	5ccb      	ldrb	r3, [r1, r3]
 8006570:	f003 031f 	and.w	r3, r3, #31
 8006574:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006578:	4618      	mov	r0, r3
 800657a:	bd80      	pop	{r7, pc}
 800657c:	58024400 	.word	0x58024400
 8006580:	0801dd28 	.word	0x0801dd28

08006584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006588:	f7ff ffb6 	bl	80064f8 <HAL_RCC_GetHCLKFreq>
 800658c:	4602      	mov	r2, r0
 800658e:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	0a1b      	lsrs	r3, r3, #8
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	4904      	ldr	r1, [pc, #16]	; (80065ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800659a:	5ccb      	ldrb	r3, [r1, r3]
 800659c:	f003 031f 	and.w	r3, r3, #31
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	58024400 	.word	0x58024400
 80065ac:	0801dd28 	.word	0x0801dd28

080065b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	223f      	movs	r2, #63	; 0x3f
 80065be:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065c0:	4b1a      	ldr	r3, [pc, #104]	; (800662c <HAL_RCC_GetClockConfig+0x7c>)
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	f003 0207 	and.w	r2, r3, #7
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80065cc:	4b17      	ldr	r3, [pc, #92]	; (800662c <HAL_RCC_GetClockConfig+0x7c>)
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80065d8:	4b14      	ldr	r3, [pc, #80]	; (800662c <HAL_RCC_GetClockConfig+0x7c>)
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f003 020f 	and.w	r2, r3, #15
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80065e4:	4b11      	ldr	r3, [pc, #68]	; (800662c <HAL_RCC_GetClockConfig+0x7c>)
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80065f0:	4b0e      	ldr	r3, [pc, #56]	; (800662c <HAL_RCC_GetClockConfig+0x7c>)
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <HAL_RCC_GetClockConfig+0x7c>)
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006608:	4b08      	ldr	r3, [pc, #32]	; (800662c <HAL_RCC_GetClockConfig+0x7c>)
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006614:	4b06      	ldr	r3, [pc, #24]	; (8006630 <HAL_RCC_GetClockConfig+0x80>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 020f 	and.w	r2, r3, #15
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	601a      	str	r2, [r3, #0]
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	58024400 	.word	0x58024400
 8006630:	52002000 	.word	0x52002000

08006634 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800663c:	2300      	movs	r3, #0
 800663e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006640:	2300      	movs	r3, #0
 8006642:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d03f      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006654:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006658:	d02a      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800665a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800665e:	d824      	bhi.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006664:	d018      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800666a:	d81e      	bhi.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006674:	d007      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006676:	e018      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006678:	4bab      	ldr	r3, [pc, #684]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4aaa      	ldr	r2, [pc, #680]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800667e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006684:	e015      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3304      	adds	r3, #4
 800668a:	2102      	movs	r1, #2
 800668c:	4618      	mov	r0, r3
 800668e:	f001 f989 	bl	80079a4 <RCCEx_PLL2_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006696:	e00c      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3324      	adds	r3, #36	; 0x24
 800669c:	2102      	movs	r1, #2
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 fa32 	bl	8007b08 <RCCEx_PLL3_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066a8:	e003      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	75fb      	strb	r3, [r7, #23]
      break;
 80066ae:	e000      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80066b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066b2:	7dfb      	ldrb	r3, [r7, #23]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d109      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80066b8:	4b9b      	ldr	r3, [pc, #620]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c4:	4998      	ldr	r1, [pc, #608]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	650b      	str	r3, [r1, #80]	; 0x50
 80066ca:	e001      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d03d      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d826      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80066e4:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006701 	.word	0x08006701
 80066f0:	0800670f 	.word	0x0800670f
 80066f4:	08006721 	.word	0x08006721
 80066f8:	08006739 	.word	0x08006739
 80066fc:	08006739 	.word	0x08006739
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006700:	4b89      	ldr	r3, [pc, #548]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	4a88      	ldr	r2, [pc, #544]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800670a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800670c:	e015      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3304      	adds	r3, #4
 8006712:	2100      	movs	r1, #0
 8006714:	4618      	mov	r0, r3
 8006716:	f001 f945 	bl	80079a4 <RCCEx_PLL2_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800671e:	e00c      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3324      	adds	r3, #36	; 0x24
 8006724:	2100      	movs	r1, #0
 8006726:	4618      	mov	r0, r3
 8006728:	f001 f9ee 	bl	8007b08 <RCCEx_PLL3_Config>
 800672c:	4603      	mov	r3, r0
 800672e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006730:	e003      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	75fb      	strb	r3, [r7, #23]
      break;
 8006736:	e000      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006740:	4b79      	ldr	r3, [pc, #484]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006744:	f023 0207 	bic.w	r2, r3, #7
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674c:	4976      	ldr	r1, [pc, #472]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800674e:	4313      	orrs	r3, r2
 8006750:	650b      	str	r3, [r1, #80]	; 0x50
 8006752:	e001      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006760:	2b00      	cmp	r3, #0
 8006762:	d051      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800676a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800676e:	d036      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006770:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006774:	d830      	bhi.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800677a:	d032      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800677c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006780:	d82a      	bhi.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006782:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006786:	d02e      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006788:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800678c:	d824      	bhi.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800678e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006792:	d018      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006798:	d81e      	bhi.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800679e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067a2:	d007      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80067a4:	e018      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a6:	4b60      	ldr	r3, [pc, #384]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067aa:	4a5f      	ldr	r2, [pc, #380]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067b2:	e019      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3304      	adds	r3, #4
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 f8f2 	bl	80079a4 <RCCEx_PLL2_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80067c4:	e010      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3324      	adds	r3, #36	; 0x24
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 f99b 	bl	8007b08 <RCCEx_PLL3_Config>
 80067d2:	4603      	mov	r3, r0
 80067d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067d6:	e007      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	75fb      	strb	r3, [r7, #23]
      break;
 80067dc:	e004      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80067de:	bf00      	nop
 80067e0:	e002      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80067e2:	bf00      	nop
 80067e4:	e000      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80067e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80067ee:	4b4e      	ldr	r3, [pc, #312]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067fc:	494a      	ldr	r1, [pc, #296]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	658b      	str	r3, [r1, #88]	; 0x58
 8006802:	e001      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006810:	2b00      	cmp	r3, #0
 8006812:	d051      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800681a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800681e:	d036      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006820:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006824:	d830      	bhi.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800682a:	d032      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800682c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006830:	d82a      	bhi.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006832:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006836:	d02e      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006838:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800683c:	d824      	bhi.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800683e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006842:	d018      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006848:	d81e      	bhi.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800684e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006852:	d007      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006854:	e018      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006856:	4b34      	ldr	r3, [pc, #208]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	4a33      	ldr	r2, [pc, #204]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800685c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006862:	e019      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3304      	adds	r3, #4
 8006868:	2100      	movs	r1, #0
 800686a:	4618      	mov	r0, r3
 800686c:	f001 f89a 	bl	80079a4 <RCCEx_PLL2_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006874:	e010      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3324      	adds	r3, #36	; 0x24
 800687a:	2100      	movs	r1, #0
 800687c:	4618      	mov	r0, r3
 800687e:	f001 f943 	bl	8007b08 <RCCEx_PLL3_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006886:	e007      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	75fb      	strb	r3, [r7, #23]
      break;
 800688c:	e004      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800688e:	bf00      	nop
 8006890:	e002      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006892:	bf00      	nop
 8006894:	e000      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800689e:	4b22      	ldr	r3, [pc, #136]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068ac:	491e      	ldr	r1, [pc, #120]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	658b      	str	r3, [r1, #88]	; 0x58
 80068b2:	e001      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d035      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c8:	2b30      	cmp	r3, #48	; 0x30
 80068ca:	d01c      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80068cc:	2b30      	cmp	r3, #48	; 0x30
 80068ce:	d817      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	d00c      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d813      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d016      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d10f      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068e0:	4b11      	ldr	r3, [pc, #68]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	4a10      	ldr	r2, [pc, #64]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80068ec:	e00e      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3304      	adds	r3, #4
 80068f2:	2102      	movs	r1, #2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 f855 	bl	80079a4 <RCCEx_PLL2_Config>
 80068fa:	4603      	mov	r3, r0
 80068fc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80068fe:	e005      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	75fb      	strb	r3, [r7, #23]
      break;
 8006904:	e002      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006906:	bf00      	nop
 8006908:	e000      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800690a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800690c:	7dfb      	ldrb	r3, [r7, #23]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10c      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006912:	4b05      	ldr	r3, [pc, #20]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006916:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691e:	4902      	ldr	r1, [pc, #8]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006920:	4313      	orrs	r3, r2
 8006922:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006924:	e004      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006926:	bf00      	nop
 8006928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d047      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006944:	d030      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800694a:	d82a      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800694c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006950:	d02c      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006952:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006956:	d824      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800695c:	d018      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800695e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006962:	d81e      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800696c:	d007      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800696e:	e018      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006970:	4bac      	ldr	r3, [pc, #688]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	4aab      	ldr	r2, [pc, #684]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800697a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800697c:	e017      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3304      	adds	r3, #4
 8006982:	2100      	movs	r1, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f001 f80d 	bl	80079a4 <RCCEx_PLL2_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800698e:	e00e      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3324      	adds	r3, #36	; 0x24
 8006994:	2100      	movs	r1, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f001 f8b6 	bl	8007b08 <RCCEx_PLL3_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80069a0:	e005      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
      break;
 80069a6:	e002      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80069a8:	bf00      	nop
 80069aa:	e000      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80069ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80069b4:	4b9b      	ldr	r3, [pc, #620]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80069b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c0:	4998      	ldr	r1, [pc, #608]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	650b      	str	r3, [r1, #80]	; 0x50
 80069c6:	e001      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
 80069ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d049      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069e0:	d02e      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80069e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069e6:	d828      	bhi.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80069e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069ec:	d02a      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80069ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069f2:	d822      	bhi.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80069f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069f8:	d026      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80069fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069fe:	d81c      	bhi.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006a00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a04:	d010      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006a06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a0a:	d816      	bhi.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01d      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a14:	d111      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 ffc1 	bl	80079a4 <RCCEx_PLL2_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006a26:	e012      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3324      	adds	r3, #36	; 0x24
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 f86a 	bl	8007b08 <RCCEx_PLL3_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006a38:	e009      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3e:	e006      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006a40:	bf00      	nop
 8006a42:	e004      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006a44:	bf00      	nop
 8006a46:	e002      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006a48:	bf00      	nop
 8006a4a:	e000      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a54:	4b73      	ldr	r3, [pc, #460]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a58:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a60:	4970      	ldr	r1, [pc, #448]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	650b      	str	r3, [r1, #80]	; 0x50
 8006a66:	e001      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d04b      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a82:	d02e      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a88:	d828      	bhi.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8e:	d02a      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a94:	d822      	bhi.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006a96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a9a:	d026      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006a9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006aa0:	d81c      	bhi.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa6:	d010      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aac:	d816      	bhi.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01d      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006ab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ab6:	d111      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3304      	adds	r3, #4
 8006abc:	2101      	movs	r1, #1
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 ff70 	bl	80079a4 <RCCEx_PLL2_Config>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006ac8:	e012      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3324      	adds	r3, #36	; 0x24
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 f819 	bl	8007b08 <RCCEx_PLL3_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006ada:	e009      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae0:	e006      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006ae2:	bf00      	nop
 8006ae4:	e004      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006ae6:	bf00      	nop
 8006ae8:	e002      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006af6:	4b4b      	ldr	r3, [pc, #300]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b04:	4947      	ldr	r1, [pc, #284]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	658b      	str	r3, [r1, #88]	; 0x58
 8006b0a:	e001      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d02f      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b24:	d00e      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b2a:	d814      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d015      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b34:	d10f      	bne.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b36:	4b3b      	ldr	r3, [pc, #236]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	4a3a      	ldr	r2, [pc, #232]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006b42:	e00c      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3304      	adds	r3, #4
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 ff2a 	bl	80079a4 <RCCEx_PLL2_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006b54:	e003      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5a:	e000      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d109      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b64:	4b2f      	ldr	r3, [pc, #188]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b70:	492c      	ldr	r1, [pc, #176]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	650b      	str	r3, [r1, #80]	; 0x50
 8006b76:	e001      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d032      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d81b      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006b90:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b96:	bf00      	nop
 8006b98:	08006bcf 	.word	0x08006bcf
 8006b9c:	08006ba9 	.word	0x08006ba9
 8006ba0:	08006bb7 	.word	0x08006bb7
 8006ba4:	08006bcf 	.word	0x08006bcf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ba8:	4b1e      	ldr	r3, [pc, #120]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006bb4:	e00c      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	2102      	movs	r1, #2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 fef1 	bl	80079a4 <RCCEx_PLL2_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006bc6:	e003      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	75fb      	strb	r3, [r7, #23]
      break;
 8006bcc:	e000      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006bd6:	4b13      	ldr	r3, [pc, #76]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bda:	f023 0203 	bic.w	r2, r3, #3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be2:	4910      	ldr	r1, [pc, #64]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006be8:	e001      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 808a 	beq.w	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a09      	ldr	r2, [pc, #36]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c08:	f7fb fd94 	bl	8002734 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c0e:	e00d      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c10:	f7fb fd90 	bl	8002734 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b64      	cmp	r3, #100	; 0x64
 8006c1c:	d906      	bls.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	75fb      	strb	r3, [r7, #23]
        break;
 8006c22:	e009      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006c24:	58024400 	.word	0x58024400
 8006c28:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c2c:	4bb9      	ldr	r3, [pc, #740]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0eb      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d166      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c3e:	4bb6      	ldr	r3, [pc, #728]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c48:	4053      	eors	r3, r2
 8006c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d013      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c52:	4bb1      	ldr	r3, [pc, #708]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c5c:	4bae      	ldr	r3, [pc, #696]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c60:	4aad      	ldr	r2, [pc, #692]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c66:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c68:	4bab      	ldr	r3, [pc, #684]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6c:	4aaa      	ldr	r2, [pc, #680]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c72:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c74:	4aa8      	ldr	r2, [pc, #672]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c84:	d115      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c86:	f7fb fd55 	bl	8002734 <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c8c:	e00b      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c8e:	f7fb fd51 	bl	8002734 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d902      	bls.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	75fb      	strb	r3, [r7, #23]
            break;
 8006ca4:	e005      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ca6:	4b9c      	ldr	r3, [pc, #624]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d0ed      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d126      	bne.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cc6:	d10d      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8006cc8:	4b93      	ldr	r3, [pc, #588]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006cd6:	0919      	lsrs	r1, r3, #4
 8006cd8:	4b90      	ldr	r3, [pc, #576]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cda:	400b      	ands	r3, r1
 8006cdc:	498e      	ldr	r1, [pc, #568]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	610b      	str	r3, [r1, #16]
 8006ce2:	e005      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006ce4:	4b8c      	ldr	r3, [pc, #560]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	4a8b      	ldr	r2, [pc, #556]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006cea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006cee:	6113      	str	r3, [r2, #16]
 8006cf0:	4b89      	ldr	r3, [pc, #548]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006cf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cfe:	4986      	ldr	r1, [pc, #536]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	670b      	str	r3, [r1, #112]	; 0x70
 8006d04:	e004      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	75bb      	strb	r3, [r7, #22]
 8006d0a:	e001      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d07e      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d20:	2b28      	cmp	r3, #40	; 0x28
 8006d22:	d867      	bhi.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006d24:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2a:	bf00      	nop
 8006d2c:	08006dfb 	.word	0x08006dfb
 8006d30:	08006df5 	.word	0x08006df5
 8006d34:	08006df5 	.word	0x08006df5
 8006d38:	08006df5 	.word	0x08006df5
 8006d3c:	08006df5 	.word	0x08006df5
 8006d40:	08006df5 	.word	0x08006df5
 8006d44:	08006df5 	.word	0x08006df5
 8006d48:	08006df5 	.word	0x08006df5
 8006d4c:	08006dd1 	.word	0x08006dd1
 8006d50:	08006df5 	.word	0x08006df5
 8006d54:	08006df5 	.word	0x08006df5
 8006d58:	08006df5 	.word	0x08006df5
 8006d5c:	08006df5 	.word	0x08006df5
 8006d60:	08006df5 	.word	0x08006df5
 8006d64:	08006df5 	.word	0x08006df5
 8006d68:	08006df5 	.word	0x08006df5
 8006d6c:	08006de3 	.word	0x08006de3
 8006d70:	08006df5 	.word	0x08006df5
 8006d74:	08006df5 	.word	0x08006df5
 8006d78:	08006df5 	.word	0x08006df5
 8006d7c:	08006df5 	.word	0x08006df5
 8006d80:	08006df5 	.word	0x08006df5
 8006d84:	08006df5 	.word	0x08006df5
 8006d88:	08006df5 	.word	0x08006df5
 8006d8c:	08006dfb 	.word	0x08006dfb
 8006d90:	08006df5 	.word	0x08006df5
 8006d94:	08006df5 	.word	0x08006df5
 8006d98:	08006df5 	.word	0x08006df5
 8006d9c:	08006df5 	.word	0x08006df5
 8006da0:	08006df5 	.word	0x08006df5
 8006da4:	08006df5 	.word	0x08006df5
 8006da8:	08006df5 	.word	0x08006df5
 8006dac:	08006dfb 	.word	0x08006dfb
 8006db0:	08006df5 	.word	0x08006df5
 8006db4:	08006df5 	.word	0x08006df5
 8006db8:	08006df5 	.word	0x08006df5
 8006dbc:	08006df5 	.word	0x08006df5
 8006dc0:	08006df5 	.word	0x08006df5
 8006dc4:	08006df5 	.word	0x08006df5
 8006dc8:	08006df5 	.word	0x08006df5
 8006dcc:	08006dfb 	.word	0x08006dfb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fde4 	bl	80079a4 <RCCEx_PLL2_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006de0:	e00c      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3324      	adds	r3, #36	; 0x24
 8006de6:	2101      	movs	r1, #1
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 fe8d 	bl	8007b08 <RCCEx_PLL3_Config>
 8006dee:	4603      	mov	r3, r0
 8006df0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006df2:	e003      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	75fb      	strb	r3, [r7, #23]
      break;
 8006df8:	e000      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8006dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e02:	4b45      	ldr	r3, [pc, #276]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e06:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0e:	4942      	ldr	r1, [pc, #264]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	654b      	str	r3, [r1, #84]	; 0x54
 8006e14:	e001      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d037      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	d820      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006e2e:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e77 	.word	0x08006e77
 8006e38:	08006e4d 	.word	0x08006e4d
 8006e3c:	08006e5f 	.word	0x08006e5f
 8006e40:	08006e77 	.word	0x08006e77
 8006e44:	08006e77 	.word	0x08006e77
 8006e48:	08006e77 	.word	0x08006e77
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	2101      	movs	r1, #1
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fda6 	bl	80079a4 <RCCEx_PLL2_Config>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e5c:	e00c      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3324      	adds	r3, #36	; 0x24
 8006e62:	2101      	movs	r1, #1
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fe4f 	bl	8007b08 <RCCEx_PLL3_Config>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e6e:	e003      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	75fb      	strb	r3, [r7, #23]
      break;
 8006e74:	e000      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e7e:	4b26      	ldr	r3, [pc, #152]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	f023 0207 	bic.w	r2, r3, #7
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	4923      	ldr	r1, [pc, #140]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	654b      	str	r3, [r1, #84]	; 0x54
 8006e90:	e001      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
 8006e94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d040      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea8:	2b05      	cmp	r3, #5
 8006eaa:	d821      	bhi.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006eac:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb2:	bf00      	nop
 8006eb4:	08006ef7 	.word	0x08006ef7
 8006eb8:	08006ecd 	.word	0x08006ecd
 8006ebc:	08006edf 	.word	0x08006edf
 8006ec0:	08006ef7 	.word	0x08006ef7
 8006ec4:	08006ef7 	.word	0x08006ef7
 8006ec8:	08006ef7 	.word	0x08006ef7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fd66 	bl	80079a4 <RCCEx_PLL2_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006edc:	e00c      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3324      	adds	r3, #36	; 0x24
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fe0f 	bl	8007b08 <RCCEx_PLL3_Config>
 8006eea:	4603      	mov	r3, r0
 8006eec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006eee:	e003      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef4:	e000      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d110      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006efe:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f02:	f023 0207 	bic.w	r2, r3, #7
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f0c:	4902      	ldr	r1, [pc, #8]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	658b      	str	r3, [r1, #88]	; 0x58
 8006f12:	e007      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006f14:	58024800 	.word	0x58024800
 8006f18:	58024400 	.word	0x58024400
 8006f1c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d04b      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f3a:	d02e      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f40:	d828      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f46:	d02a      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4c:	d822      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006f4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f52:	d026      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006f54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f58:	d81c      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f5e:	d010      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f64:	d816      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d01d      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f6e:	d111      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3304      	adds	r3, #4
 8006f74:	2100      	movs	r1, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fd14 	bl	80079a4 <RCCEx_PLL2_Config>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f80:	e012      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3324      	adds	r3, #36	; 0x24
 8006f86:	2102      	movs	r1, #2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 fdbd 	bl	8007b08 <RCCEx_PLL3_Config>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f92:	e009      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	75fb      	strb	r3, [r7, #23]
      break;
 8006f98:	e006      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006f9a:	bf00      	nop
 8006f9c:	e004      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006f9e:	bf00      	nop
 8006fa0:	e002      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006fa2:	bf00      	nop
 8006fa4:	e000      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10a      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fae:	4bb2      	ldr	r3, [pc, #712]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbc:	49ae      	ldr	r1, [pc, #696]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	654b      	str	r3, [r1, #84]	; 0x54
 8006fc2:	e001      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
 8006fc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d04b      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006fde:	d02e      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006fe0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006fe4:	d828      	bhi.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fea:	d02a      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff0:	d822      	bhi.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006ff2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ff6:	d026      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ffc:	d81c      	bhi.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007002:	d010      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007008:	d816      	bhi.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d01d      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800700e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007012:	d111      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fcc2 	bl	80079a4 <RCCEx_PLL2_Config>
 8007020:	4603      	mov	r3, r0
 8007022:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007024:	e012      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3324      	adds	r3, #36	; 0x24
 800702a:	2102      	movs	r1, #2
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fd6b 	bl	8007b08 <RCCEx_PLL3_Config>
 8007032:	4603      	mov	r3, r0
 8007034:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007036:	e009      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	75fb      	strb	r3, [r7, #23]
      break;
 800703c:	e006      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800703e:	bf00      	nop
 8007040:	e004      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007042:	bf00      	nop
 8007044:	e002      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007046:	bf00      	nop
 8007048:	e000      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800704a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007052:	4b89      	ldr	r3, [pc, #548]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007056:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007060:	4985      	ldr	r1, [pc, #532]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007062:	4313      	orrs	r3, r2
 8007064:	658b      	str	r3, [r1, #88]	; 0x58
 8007066:	e001      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007074:	2b00      	cmp	r3, #0
 8007076:	d04b      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800707e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007082:	d02e      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007084:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007088:	d828      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800708a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800708e:	d02a      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007094:	d822      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007096:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800709a:	d026      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800709c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80070a0:	d81c      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80070a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a6:	d010      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80070a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ac:	d816      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d01d      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80070b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b6:	d111      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3304      	adds	r3, #4
 80070bc:	2100      	movs	r1, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fc70 	bl	80079a4 <RCCEx_PLL2_Config>
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80070c8:	e012      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3324      	adds	r3, #36	; 0x24
 80070ce:	2102      	movs	r1, #2
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fd19 	bl	8007b08 <RCCEx_PLL3_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80070da:	e009      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	75fb      	strb	r3, [r7, #23]
      break;
 80070e0:	e006      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80070e2:	bf00      	nop
 80070e4:	e004      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80070e6:	bf00      	nop
 80070e8:	e002      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80070ea:	bf00      	nop
 80070ec:	e000      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80070ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80070f6:	4b60      	ldr	r3, [pc, #384]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80070f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007104:	495c      	ldr	r1, [pc, #368]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007106:	4313      	orrs	r3, r2
 8007108:	658b      	str	r3, [r1, #88]	; 0x58
 800710a:	e001      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0308 	and.w	r3, r3, #8
 8007118:	2b00      	cmp	r3, #0
 800711a:	d018      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007124:	d10a      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3324      	adds	r3, #36	; 0x24
 800712a:	2102      	movs	r1, #2
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fceb 	bl	8007b08 <RCCEx_PLL3_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800713c:	4b4e      	ldr	r3, [pc, #312]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800713e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007140:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007148:	494b      	ldr	r1, [pc, #300]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800714a:	4313      	orrs	r3, r2
 800714c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0310 	and.w	r3, r3, #16
 8007156:	2b00      	cmp	r3, #0
 8007158:	d01a      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007164:	d10a      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3324      	adds	r3, #36	; 0x24
 800716a:	2102      	movs	r1, #2
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fccb 	bl	8007b08 <RCCEx_PLL3_Config>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800717c:	4b3e      	ldr	r3, [pc, #248]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800717e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718a:	493b      	ldr	r1, [pc, #236]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800718c:	4313      	orrs	r3, r2
 800718e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d034      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071a6:	d01d      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80071a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ac:	d817      	bhi.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80071b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b6:	d009      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80071b8:	e011      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3304      	adds	r3, #4
 80071be:	2100      	movs	r1, #0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fbef 	bl	80079a4 <RCCEx_PLL2_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80071ca:	e00c      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3324      	adds	r3, #36	; 0x24
 80071d0:	2102      	movs	r1, #2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 fc98 	bl	8007b08 <RCCEx_PLL3_Config>
 80071d8:	4603      	mov	r3, r0
 80071da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80071dc:	e003      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	75fb      	strb	r3, [r7, #23]
      break;
 80071e2:	e000      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80071e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071ec:	4b22      	ldr	r3, [pc, #136]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80071ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071fa:	491f      	ldr	r1, [pc, #124]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	658b      	str	r3, [r1, #88]	; 0x58
 8007200:	e001      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d036      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007218:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800721c:	d01c      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800721e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007222:	d816      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007228:	d003      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800722a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800722e:	d007      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8007230:	e00f      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007232:	4b11      	ldr	r3, [pc, #68]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007236:	4a10      	ldr	r2, [pc, #64]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800723c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800723e:	e00c      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3324      	adds	r3, #36	; 0x24
 8007244:	2101      	movs	r1, #1
 8007246:	4618      	mov	r0, r3
 8007248:	f000 fc5e 	bl	8007b08 <RCCEx_PLL3_Config>
 800724c:	4603      	mov	r3, r0
 800724e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007250:	e003      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]
      break;
 8007256:	e000      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10d      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007260:	4b05      	ldr	r3, [pc, #20]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007264:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800726e:	4902      	ldr	r1, [pc, #8]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007270:	4313      	orrs	r3, r2
 8007272:	654b      	str	r3, [r1, #84]	; 0x54
 8007274:	e004      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8007276:	bf00      	nop
 8007278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d029      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007298:	d007      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800729a:	e00f      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800729c:	4b61      	ldr	r3, [pc, #388]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	4a60      	ldr	r2, [pc, #384]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80072a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80072a8:	e00b      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3304      	adds	r3, #4
 80072ae:	2102      	movs	r1, #2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fb77 	bl	80079a4 <RCCEx_PLL2_Config>
 80072b6:	4603      	mov	r3, r0
 80072b8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80072ba:	e002      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	75fb      	strb	r3, [r7, #23]
      break;
 80072c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d109      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80072c8:	4b56      	ldr	r3, [pc, #344]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80072ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d4:	4953      	ldr	r1, [pc, #332]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072da:	e001      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3324      	adds	r3, #36	; 0x24
 80072f0:	2102      	movs	r1, #2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fc08 	bl	8007b08 <RCCEx_PLL3_Config>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d030      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007316:	d017      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800731c:	d811      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800731e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007322:	d013      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007328:	d80b      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d010      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800732e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007332:	d106      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007334:	4b3b      	ldr	r3, [pc, #236]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	4a3a      	ldr	r2, [pc, #232]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800733a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800733e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007340:	e007      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	75fb      	strb	r3, [r7, #23]
      break;
 8007346:	e004      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007348:	bf00      	nop
 800734a:	e002      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800734c:	bf00      	nop
 800734e:	e000      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d109      	bne.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007358:	4b32      	ldr	r3, [pc, #200]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800735a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007364:	492f      	ldr	r1, [pc, #188]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007366:	4313      	orrs	r3, r2
 8007368:	654b      	str	r3, [r1, #84]	; 0x54
 800736a:	e001      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736c:	7dfb      	ldrb	r3, [r7, #23]
 800736e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d008      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800737c:	4b29      	ldr	r3, [pc, #164]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800737e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007380:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007388:	4926      	ldr	r1, [pc, #152]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800738a:	4313      	orrs	r3, r2
 800738c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d008      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800739a:	4b22      	ldr	r3, [pc, #136]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800739c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a6:	491f      	ldr	r1, [pc, #124]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00d      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073b8:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	4a19      	ldr	r2, [pc, #100]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073c2:	6113      	str	r3, [r2, #16]
 80073c4:	4b17      	ldr	r3, [pc, #92]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073c6:	691a      	ldr	r2, [r3, #16]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073ce:	4915      	ldr	r1, [pc, #84]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da08      	bge.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073dc:	4b11      	ldr	r3, [pc, #68]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e8:	490e      	ldr	r1, [pc, #56]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d009      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073fa:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80073fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007408:	4906      	ldr	r1, [pc, #24]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800740a:	4313      	orrs	r3, r2
 800740c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800740e:	7dbb      	ldrb	r3, [r7, #22]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	e000      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	58024400 	.word	0x58024400

08007428 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800742c:	f7ff f864 	bl	80064f8 <HAL_RCC_GetHCLKFreq>
 8007430:	4602      	mov	r2, r0
 8007432:	4b06      	ldr	r3, [pc, #24]	; (800744c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	091b      	lsrs	r3, r3, #4
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	4904      	ldr	r1, [pc, #16]	; (8007450 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800743e:	5ccb      	ldrb	r3, [r1, r3]
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007448:	4618      	mov	r0, r3
 800744a:	bd80      	pop	{r7, pc}
 800744c:	58024400 	.word	0x58024400
 8007450:	0801dd28 	.word	0x0801dd28

08007454 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007454:	b480      	push	{r7}
 8007456:	b089      	sub	sp, #36	; 0x24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800745c:	4ba1      	ldr	r3, [pc, #644]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	f003 0303 	and.w	r3, r3, #3
 8007464:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007466:	4b9f      	ldr	r3, [pc, #636]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	0b1b      	lsrs	r3, r3, #12
 800746c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007470:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007472:	4b9c      	ldr	r3, [pc, #624]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	091b      	lsrs	r3, r3, #4
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800747e:	4b99      	ldr	r3, [pc, #612]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007482:	08db      	lsrs	r3, r3, #3
 8007484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	fb02 f303 	mul.w	r3, r2, r3
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8111 	beq.w	80076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	f000 8083 	beq.w	80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	f200 80a1 	bhi.w	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d056      	beq.n	800756c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80074be:	e099      	b.n	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074c0:	4b88      	ldr	r3, [pc, #544]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0320 	and.w	r3, r3, #32
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d02d      	beq.n	8007528 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074cc:	4b85      	ldr	r3, [pc, #532]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	08db      	lsrs	r3, r3, #3
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	4a84      	ldr	r2, [pc, #528]	; (80076e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80074d8:	fa22 f303 	lsr.w	r3, r2, r3
 80074dc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	ee07 3a90 	vmov	s15, r3
 80074e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f6:	4b7b      	ldr	r3, [pc, #492]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007506:	ed97 6a03 	vldr	s12, [r7, #12]
 800750a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800750e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800751a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007522:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007526:	e087      	b.n	8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007532:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753a:	4b6a      	ldr	r3, [pc, #424]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800753c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754a:	ed97 6a03 	vldr	s12, [r7, #12]
 800754e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800755e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007566:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800756a:	e065      	b.n	8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007576:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800757a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800757e:	4b59      	ldr	r3, [pc, #356]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007592:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800759e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075ae:	e043      	b.n	8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80075be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c2:	4b48      	ldr	r3, [pc, #288]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075f2:	e021      	b.n	8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007606:	4b37      	ldr	r3, [pc, #220]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007616:	ed97 6a03 	vldr	s12, [r7, #12]
 800761a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800761e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800762a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800762e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007632:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007636:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007638:	4b2a      	ldr	r3, [pc, #168]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	0a5b      	lsrs	r3, r3, #9
 800763e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800764e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007652:	edd7 6a07 	vldr	s13, [r7, #28]
 8007656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800765e:	ee17 2a90 	vmov	r2, s15
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007666:	4b1f      	ldr	r3, [pc, #124]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	0c1b      	lsrs	r3, r3, #16
 800766c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007670:	ee07 3a90 	vmov	s15, r3
 8007674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800767c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007680:	edd7 6a07 	vldr	s13, [r7, #28]
 8007684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800768c:	ee17 2a90 	vmov	r2, s15
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007694:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007698:	0e1b      	lsrs	r3, r3, #24
 800769a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80076b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ba:	ee17 2a90 	vmov	r2, s15
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80076c2:	e008      	b.n	80076d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	609a      	str	r2, [r3, #8]
}
 80076d6:	bf00      	nop
 80076d8:	3724      	adds	r7, #36	; 0x24
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	58024400 	.word	0x58024400
 80076e8:	03d09000 	.word	0x03d09000
 80076ec:	46000000 	.word	0x46000000
 80076f0:	4c742400 	.word	0x4c742400
 80076f4:	4a742400 	.word	0x4a742400
 80076f8:	4af42400 	.word	0x4af42400

080076fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b089      	sub	sp, #36	; 0x24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007704:	4ba1      	ldr	r3, [pc, #644]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800770e:	4b9f      	ldr	r3, [pc, #636]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007712:	0d1b      	lsrs	r3, r3, #20
 8007714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007718:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800771a:	4b9c      	ldr	r3, [pc, #624]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800771c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771e:	0a1b      	lsrs	r3, r3, #8
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007726:	4b99      	ldr	r3, [pc, #612]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772a:	08db      	lsrs	r3, r3, #3
 800772c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	fb02 f303 	mul.w	r3, r2, r3
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 8111 	beq.w	800796c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b02      	cmp	r3, #2
 800774e:	f000 8083 	beq.w	8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	2b02      	cmp	r3, #2
 8007756:	f200 80a1 	bhi.w	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d056      	beq.n	8007814 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007766:	e099      	b.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007768:	4b88      	ldr	r3, [pc, #544]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b00      	cmp	r3, #0
 8007772:	d02d      	beq.n	80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007774:	4b85      	ldr	r3, [pc, #532]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	08db      	lsrs	r3, r3, #3
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	4a84      	ldr	r2, [pc, #528]	; (8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007780:	fa22 f303 	lsr.w	r3, r2, r3
 8007784:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779e:	4b7b      	ldr	r3, [pc, #492]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80077ce:	e087      	b.n	80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007998 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80077de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e2:	4b6a      	ldr	r3, [pc, #424]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007812:	e065      	b.n	80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800799c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007826:	4b59      	ldr	r3, [pc, #356]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007836:	ed97 6a03 	vldr	s12, [r7, #12]
 800783a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800783e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800784a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007852:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007856:	e043      	b.n	80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80079a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786a:	4b48      	ldr	r3, [pc, #288]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787a:	ed97 6a03 	vldr	s12, [r7, #12]
 800787e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800788e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007896:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800789a:	e021      	b.n	80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800799c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ae:	4b37      	ldr	r3, [pc, #220]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078be:	ed97 6a03 	vldr	s12, [r7, #12]
 80078c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80078e0:	4b2a      	ldr	r3, [pc, #168]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	0a5b      	lsrs	r3, r3, #9
 80078e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80078fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007906:	ee17 2a90 	vmov	r2, s15
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800790e:	4b1f      	ldr	r3, [pc, #124]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	0c1b      	lsrs	r3, r3, #16
 8007914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007918:	ee07 3a90 	vmov	s15, r3
 800791c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007924:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007928:	edd7 6a07 	vldr	s13, [r7, #28]
 800792c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007934:	ee17 2a90 	vmov	r2, s15
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800793c:	4b13      	ldr	r3, [pc, #76]	; (800798c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	0e1b      	lsrs	r3, r3, #24
 8007942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007956:	edd7 6a07 	vldr	s13, [r7, #28]
 800795a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800795e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007962:	ee17 2a90 	vmov	r2, s15
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800796a:	e008      	b.n	800797e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	609a      	str	r2, [r3, #8]
}
 800797e:	bf00      	nop
 8007980:	3724      	adds	r7, #36	; 0x24
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	58024400 	.word	0x58024400
 8007990:	03d09000 	.word	0x03d09000
 8007994:	46000000 	.word	0x46000000
 8007998:	4c742400 	.word	0x4c742400
 800799c:	4a742400 	.word	0x4a742400
 80079a0:	4af42400 	.word	0x4af42400

080079a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079b2:	4b53      	ldr	r3, [pc, #332]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 80079b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d101      	bne.n	80079c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e099      	b.n	8007af6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80079c2:	4b4f      	ldr	r3, [pc, #316]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a4e      	ldr	r2, [pc, #312]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 80079c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ce:	f7fa feb1 	bl	8002734 <HAL_GetTick>
 80079d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079d4:	e008      	b.n	80079e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80079d6:	f7fa fead 	bl	8002734 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e086      	b.n	8007af6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079e8:	4b45      	ldr	r3, [pc, #276]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f0      	bne.n	80079d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079f4:	4b42      	ldr	r3, [pc, #264]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 80079f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	031b      	lsls	r3, r3, #12
 8007a02:	493f      	ldr	r1, [pc, #252]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	628b      	str	r3, [r1, #40]	; 0x28
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	025b      	lsls	r3, r3, #9
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	041b      	lsls	r3, r3, #16
 8007a26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	061b      	lsls	r3, r3, #24
 8007a34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a38:	4931      	ldr	r1, [pc, #196]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a3e:	4b30      	ldr	r3, [pc, #192]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	492d      	ldr	r1, [pc, #180]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a50:	4b2b      	ldr	r3, [pc, #172]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	f023 0220 	bic.w	r2, r3, #32
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	4928      	ldr	r1, [pc, #160]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a62:	4b27      	ldr	r3, [pc, #156]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	4a26      	ldr	r2, [pc, #152]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a68:	f023 0310 	bic.w	r3, r3, #16
 8007a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a6e:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a72:	4b24      	ldr	r3, [pc, #144]	; (8007b04 <RCCEx_PLL2_Config+0x160>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	69d2      	ldr	r2, [r2, #28]
 8007a7a:	00d2      	lsls	r2, r2, #3
 8007a7c:	4920      	ldr	r1, [pc, #128]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a82:	4b1f      	ldr	r3, [pc, #124]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a86:	4a1e      	ldr	r2, [pc, #120]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a88:	f043 0310 	orr.w	r3, r3, #16
 8007a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a94:	4b1a      	ldr	r3, [pc, #104]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	4a19      	ldr	r2, [pc, #100]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007a9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007aa0:	e00f      	b.n	8007ac2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d106      	bne.n	8007ab6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007aa8:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	4a14      	ldr	r2, [pc, #80]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ab2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ab4:	e005      	b.n	8007ac2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ab6:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	4a11      	ldr	r2, [pc, #68]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007abc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ac0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a0e      	ldr	r2, [pc, #56]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007ac8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ace:	f7fa fe31 	bl	8002734 <HAL_GetTick>
 8007ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ad4:	e008      	b.n	8007ae8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ad6:	f7fa fe2d 	bl	8002734 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e006      	b.n	8007af6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ae8:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <RCCEx_PLL2_Config+0x15c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0f0      	beq.n	8007ad6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	58024400 	.word	0x58024400
 8007b04:	ffff0007 	.word	0xffff0007

08007b08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b16:	4b53      	ldr	r3, [pc, #332]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d101      	bne.n	8007b26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e099      	b.n	8007c5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b26:	4b4f      	ldr	r3, [pc, #316]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a4e      	ldr	r2, [pc, #312]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b32:	f7fa fdff 	bl	8002734 <HAL_GetTick>
 8007b36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b38:	e008      	b.n	8007b4c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b3a:	f7fa fdfb 	bl	8002734 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d901      	bls.n	8007b4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e086      	b.n	8007c5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b4c:	4b45      	ldr	r3, [pc, #276]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1f0      	bne.n	8007b3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b58:	4b42      	ldr	r3, [pc, #264]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	051b      	lsls	r3, r3, #20
 8007b66:	493f      	ldr	r1, [pc, #252]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	628b      	str	r3, [r1, #40]	; 0x28
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	025b      	lsls	r3, r3, #9
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	431a      	orrs	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	041b      	lsls	r3, r3, #16
 8007b8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	061b      	lsls	r3, r3, #24
 8007b98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b9c:	4931      	ldr	r1, [pc, #196]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ba2:	4b30      	ldr	r3, [pc, #192]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	492d      	ldr	r1, [pc, #180]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007bb4:	4b2b      	ldr	r3, [pc, #172]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	4928      	ldr	r1, [pc, #160]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007bc6:	4b27      	ldr	r3, [pc, #156]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	4a26      	ldr	r2, [pc, #152]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007bd2:	4b24      	ldr	r3, [pc, #144]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bd6:	4b24      	ldr	r3, [pc, #144]	; (8007c68 <RCCEx_PLL3_Config+0x160>)
 8007bd8:	4013      	ands	r3, r2
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	69d2      	ldr	r2, [r2, #28]
 8007bde:	00d2      	lsls	r2, r2, #3
 8007be0:	4920      	ldr	r1, [pc, #128]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007be6:	4b1f      	ldr	r3, [pc, #124]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	4a1e      	ldr	r2, [pc, #120]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007bf8:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfc:	4a19      	ldr	r2, [pc, #100]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007bfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c04:	e00f      	b.n	8007c26 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d106      	bne.n	8007c1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c0c:	4b15      	ldr	r3, [pc, #84]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	4a14      	ldr	r2, [pc, #80]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c18:	e005      	b.n	8007c26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c1a:	4b12      	ldr	r3, [pc, #72]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1e:	4a11      	ldr	r2, [pc, #68]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c26:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a0e      	ldr	r2, [pc, #56]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c32:	f7fa fd7f 	bl	8002734 <HAL_GetTick>
 8007c36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c38:	e008      	b.n	8007c4c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c3a:	f7fa fd7b 	bl	8002734 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e006      	b.n	8007c5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c4c:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <RCCEx_PLL3_Config+0x15c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0f0      	beq.n	8007c3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	58024400 	.word	0x58024400
 8007c68:	ffff0007 	.word	0xffff0007

08007c6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e0f1      	b.n	8007e62 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a78      	ldr	r2, [pc, #480]	; (8007e6c <HAL_SPI_Init+0x200>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00f      	beq.n	8007cae <HAL_SPI_Init+0x42>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a77      	ldr	r2, [pc, #476]	; (8007e70 <HAL_SPI_Init+0x204>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00a      	beq.n	8007cae <HAL_SPI_Init+0x42>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a75      	ldr	r2, [pc, #468]	; (8007e74 <HAL_SPI_Init+0x208>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d005      	beq.n	8007cae <HAL_SPI_Init+0x42>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	2b0f      	cmp	r3, #15
 8007ca8:	d901      	bls.n	8007cae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e0d9      	b.n	8007e62 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fba2 	bl	80083f8 <SPI_GetPacketSize>
 8007cb4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a6c      	ldr	r2, [pc, #432]	; (8007e6c <HAL_SPI_Init+0x200>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00c      	beq.n	8007cda <HAL_SPI_Init+0x6e>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a6a      	ldr	r2, [pc, #424]	; (8007e70 <HAL_SPI_Init+0x204>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d007      	beq.n	8007cda <HAL_SPI_Init+0x6e>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a69      	ldr	r2, [pc, #420]	; (8007e74 <HAL_SPI_Init+0x208>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d002      	beq.n	8007cda <HAL_SPI_Init+0x6e>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b08      	cmp	r3, #8
 8007cd8:	d811      	bhi.n	8007cfe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007cde:	4a63      	ldr	r2, [pc, #396]	; (8007e6c <HAL_SPI_Init+0x200>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d009      	beq.n	8007cf8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a61      	ldr	r2, [pc, #388]	; (8007e70 <HAL_SPI_Init+0x204>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d004      	beq.n	8007cf8 <HAL_SPI_Init+0x8c>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a60      	ldr	r2, [pc, #384]	; (8007e74 <HAL_SPI_Init+0x208>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d104      	bne.n	8007d02 <HAL_SPI_Init+0x96>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b10      	cmp	r3, #16
 8007cfc:	d901      	bls.n	8007d02 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e0af      	b.n	8007e62 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d106      	bne.n	8007d1c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7f9 fd28 	bl	800176c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0201 	bic.w	r2, r2, #1
 8007d32:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007d3e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d48:	d119      	bne.n	8007d7e <HAL_SPI_Init+0x112>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d52:	d103      	bne.n	8007d5c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10c      	bne.n	8007d7e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d6c:	d107      	bne.n	8007d7e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	69da      	ldr	r2, [r3, #28]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	431a      	orrs	r2, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d90:	ea42 0103 	orr.w	r1, r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	431a      	orrs	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	431a      	orrs	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	431a      	orrs	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dde:	ea42 0103 	orr.w	r1, r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d113      	bne.n	8007e1e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0201 	bic.w	r2, r2, #1
 8007e2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	40013000 	.word	0x40013000
 8007e70:	40003800 	.word	0x40003800
 8007e74:	40003c00 	.word	0x40003c00

08007e78 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08a      	sub	sp, #40	; 0x28
 8007e7c:	af02      	add	r7, sp, #8
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	4613      	mov	r3, r2
 8007e86:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3320      	adds	r3, #32
 8007e8e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d101      	bne.n	8007ea2 <HAL_SPI_Transmit+0x2a>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e1d7      	b.n	8008252 <HAL_SPI_Transmit+0x3da>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007eaa:	f7fa fc43 	bl	8002734 <HAL_GetTick>
 8007eae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d007      	beq.n	8007ecc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007ec8:	7efb      	ldrb	r3, [r7, #27]
 8007eca:	e1c2      	b.n	8008252 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <HAL_SPI_Transmit+0x60>
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d107      	bne.n	8007ee8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007ee4:	7efb      	ldrb	r3, [r7, #27]
 8007ee6:	e1b4      	b.n	8008252 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2203      	movs	r2, #3
 8007eec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	88fa      	ldrh	r2, [r7, #6]
 8007f02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	88fa      	ldrh	r2, [r7, #6]
 8007f0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007f38:	d107      	bne.n	8007f4a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	4b96      	ldr	r3, [pc, #600]	; (80081ac <HAL_SPI_Transmit+0x334>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	88f9      	ldrh	r1, [r7, #6]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	6812      	ldr	r2, [r2, #0]
 8007f5a:	430b      	orrs	r3, r1
 8007f5c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f042 0201 	orr.w	r2, r2, #1
 8007f6c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f76:	d107      	bne.n	8007f88 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	2b0f      	cmp	r3, #15
 8007f8e:	d947      	bls.n	8008020 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007f90:	e03f      	b.n	8008012 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d114      	bne.n	8007fca <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb0:	1d1a      	adds	r2, r3, #4
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007fc8:	e023      	b.n	8008012 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fca:	f7fa fbb3 	bl	8002734 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d803      	bhi.n	8007fe2 <HAL_SPI_Transmit+0x16a>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d102      	bne.n	8007fe8 <HAL_SPI_Transmit+0x170>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d114      	bne.n	8008012 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 f937 	bl	800825c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ffc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e11f      	b.n	8008252 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008018:	b29b      	uxth	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1b9      	bne.n	8007f92 <HAL_SPI_Transmit+0x11a>
 800801e:	e0f2      	b.n	8008206 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	2b07      	cmp	r3, #7
 8008026:	f240 80e7 	bls.w	80081f8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800802a:	e05d      	b.n	80080e8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b02      	cmp	r3, #2
 8008038:	d132      	bne.n	80080a0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008040:	b29b      	uxth	r3, r3
 8008042:	2b01      	cmp	r3, #1
 8008044:	d918      	bls.n	8008078 <HAL_SPI_Transmit+0x200>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d014      	beq.n	8008078 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6812      	ldr	r2, [r2, #0]
 8008058:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805e:	1d1a      	adds	r2, r3, #4
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800806a:	b29b      	uxth	r3, r3
 800806c:	3b02      	subs	r3, #2
 800806e:	b29a      	uxth	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008076:	e037      	b.n	80080e8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807c:	881a      	ldrh	r2, [r3, #0]
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008086:	1c9a      	adds	r2, r3, #2
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008092:	b29b      	uxth	r3, r3
 8008094:	3b01      	subs	r3, #1
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800809e:	e023      	b.n	80080e8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080a0:	f7fa fb48 	bl	8002734 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d803      	bhi.n	80080b8 <HAL_SPI_Transmit+0x240>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b6:	d102      	bne.n	80080be <HAL_SPI_Transmit+0x246>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d114      	bne.n	80080e8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 f8cc 	bl	800825c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e0b4      	b.n	8008252 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d19b      	bne.n	800802c <HAL_SPI_Transmit+0x1b4>
 80080f4:	e087      	b.n	8008206 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b02      	cmp	r3, #2
 8008102:	d155      	bne.n	80081b0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800810a:	b29b      	uxth	r3, r3
 800810c:	2b03      	cmp	r3, #3
 800810e:	d918      	bls.n	8008142 <HAL_SPI_Transmit+0x2ca>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008114:	2b40      	cmp	r3, #64	; 0x40
 8008116:	d914      	bls.n	8008142 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6812      	ldr	r2, [r2, #0]
 8008122:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008128:	1d1a      	adds	r2, r3, #4
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008134:	b29b      	uxth	r3, r3
 8008136:	3b04      	subs	r3, #4
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008140:	e05a      	b.n	80081f8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008148:	b29b      	uxth	r3, r3
 800814a:	2b01      	cmp	r3, #1
 800814c:	d917      	bls.n	800817e <HAL_SPI_Transmit+0x306>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d013      	beq.n	800817e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800815a:	881a      	ldrh	r2, [r3, #0]
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008164:	1c9a      	adds	r2, r3, #2
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008170:	b29b      	uxth	r3, r3
 8008172:	3b02      	subs	r3, #2
 8008174:	b29a      	uxth	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800817c:	e03c      	b.n	80081f8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3320      	adds	r3, #32
 8008188:	7812      	ldrb	r2, [r2, #0]
 800818a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800819c:	b29b      	uxth	r3, r3
 800819e:	3b01      	subs	r3, #1
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80081a8:	e026      	b.n	80081f8 <HAL_SPI_Transmit+0x380>
 80081aa:	bf00      	nop
 80081ac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081b0:	f7fa fac0 	bl	8002734 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d803      	bhi.n	80081c8 <HAL_SPI_Transmit+0x350>
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c6:	d102      	bne.n	80081ce <HAL_SPI_Transmit+0x356>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d114      	bne.n	80081f8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 f844 	bl	800825c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e02c      	b.n	8008252 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80081fe:	b29b      	uxth	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	f47f af78 	bne.w	80080f6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2200      	movs	r2, #0
 800820e:	2108      	movs	r1, #8
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 f8c3 	bl	800839c <SPI_WaitOnFlagUntilTimeout>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d007      	beq.n	800822c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008222:	f043 0220 	orr.w	r2, r3, #32
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 f815 	bl	800825c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e000      	b.n	8008252 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008250:	7efb      	ldrb	r3, [r7, #27]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3720      	adds	r7, #32
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop

0800825c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0208 	orr.w	r2, r2, #8
 800827a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0210 	orr.w	r2, r2, #16
 800828a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 0201 	bic.w	r2, r2, #1
 800829a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6919      	ldr	r1, [r3, #16]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	4b3c      	ldr	r3, [pc, #240]	; (8008398 <SPI_CloseTransfer+0x13c>)
 80082a8:	400b      	ands	r3, r1
 80082aa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	689a      	ldr	r2, [r3, #8]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80082ba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d014      	beq.n	80082f2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00f      	beq.n	80082f2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f042 0220 	orr.w	r2, r2, #32
 80082f0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d014      	beq.n	8008328 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00f      	beq.n	8008328 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800830e:	f043 0204 	orr.w	r2, r3, #4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	699a      	ldr	r2, [r3, #24]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008326:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00f      	beq.n	8008352 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008338:	f043 0201 	orr.w	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	699a      	ldr	r2, [r3, #24]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008350:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00f      	beq.n	800837c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008362:	f043 0208 	orr.w	r2, r3, #8
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699a      	ldr	r2, [r3, #24]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800837a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800838c:	bf00      	nop
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	fffffc90 	.word	0xfffffc90

0800839c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	603b      	str	r3, [r7, #0]
 80083a8:	4613      	mov	r3, r2
 80083aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80083ac:	e010      	b.n	80083d0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083ae:	f7fa f9c1 	bl	8002734 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d803      	bhi.n	80083c6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c4:	d102      	bne.n	80083cc <SPI_WaitOnFlagUntilTimeout+0x30>
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e00f      	b.n	80083f0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	695a      	ldr	r2, [r3, #20]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4013      	ands	r3, r2
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	429a      	cmp	r2, r3
 80083de:	bf0c      	ite	eq
 80083e0:	2301      	moveq	r3, #1
 80083e2:	2300      	movne	r3, #0
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	461a      	mov	r2, r3
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d0df      	beq.n	80083ae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008404:	095b      	lsrs	r3, r3, #5
 8008406:	3301      	adds	r3, #1
 8008408:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	3307      	adds	r3, #7
 8008416:	08db      	lsrs	r3, r3, #3
 8008418:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e049      	b.n	80084d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7f9 feb7 	bl	80021c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2202      	movs	r2, #2
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3304      	adds	r3, #4
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f000 fa81 	bl	8008974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d001      	beq.n	80084f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e056      	b.n	80085a2 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a2b      	ldr	r2, [pc, #172]	; (80085b0 <HAL_TIM_Base_Start+0xd4>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d02c      	beq.n	8008560 <HAL_TIM_Base_Start+0x84>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800850e:	d027      	beq.n	8008560 <HAL_TIM_Base_Start+0x84>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a27      	ldr	r2, [pc, #156]	; (80085b4 <HAL_TIM_Base_Start+0xd8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d022      	beq.n	8008560 <HAL_TIM_Base_Start+0x84>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a26      	ldr	r2, [pc, #152]	; (80085b8 <HAL_TIM_Base_Start+0xdc>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d01d      	beq.n	8008560 <HAL_TIM_Base_Start+0x84>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a24      	ldr	r2, [pc, #144]	; (80085bc <HAL_TIM_Base_Start+0xe0>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d018      	beq.n	8008560 <HAL_TIM_Base_Start+0x84>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a23      	ldr	r2, [pc, #140]	; (80085c0 <HAL_TIM_Base_Start+0xe4>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d013      	beq.n	8008560 <HAL_TIM_Base_Start+0x84>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a21      	ldr	r2, [pc, #132]	; (80085c4 <HAL_TIM_Base_Start+0xe8>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d00e      	beq.n	8008560 <HAL_TIM_Base_Start+0x84>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a20      	ldr	r2, [pc, #128]	; (80085c8 <HAL_TIM_Base_Start+0xec>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d009      	beq.n	8008560 <HAL_TIM_Base_Start+0x84>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a1e      	ldr	r2, [pc, #120]	; (80085cc <HAL_TIM_Base_Start+0xf0>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d004      	beq.n	8008560 <HAL_TIM_Base_Start+0x84>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a1d      	ldr	r2, [pc, #116]	; (80085d0 <HAL_TIM_Base_Start+0xf4>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d115      	bne.n	800858c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	4b1b      	ldr	r3, [pc, #108]	; (80085d4 <HAL_TIM_Base_Start+0xf8>)
 8008568:	4013      	ands	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b06      	cmp	r3, #6
 8008570:	d015      	beq.n	800859e <HAL_TIM_Base_Start+0xc2>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008578:	d011      	beq.n	800859e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f042 0201 	orr.w	r2, r2, #1
 8008588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800858a:	e008      	b.n	800859e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f042 0201 	orr.w	r2, r2, #1
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	e000      	b.n	80085a0 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800859e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	40010000 	.word	0x40010000
 80085b4:	40000400 	.word	0x40000400
 80085b8:	40000800 	.word	0x40000800
 80085bc:	40000c00 	.word	0x40000c00
 80085c0:	40010400 	.word	0x40010400
 80085c4:	40001800 	.word	0x40001800
 80085c8:	40014000 	.word	0x40014000
 80085cc:	4000e000 	.word	0x4000e000
 80085d0:	4000e400 	.word	0x4000e400
 80085d4:	00010007 	.word	0x00010007

080085d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d001      	beq.n	80085f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e05e      	b.n	80086ae <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2202      	movs	r2, #2
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f042 0201 	orr.w	r2, r2, #1
 8008606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a2b      	ldr	r2, [pc, #172]	; (80086bc <HAL_TIM_Base_Start_IT+0xe4>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d02c      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x94>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861a:	d027      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x94>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a27      	ldr	r2, [pc, #156]	; (80086c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d022      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x94>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a26      	ldr	r2, [pc, #152]	; (80086c4 <HAL_TIM_Base_Start_IT+0xec>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d01d      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x94>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a24      	ldr	r2, [pc, #144]	; (80086c8 <HAL_TIM_Base_Start_IT+0xf0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d018      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x94>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a23      	ldr	r2, [pc, #140]	; (80086cc <HAL_TIM_Base_Start_IT+0xf4>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d013      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x94>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a21      	ldr	r2, [pc, #132]	; (80086d0 <HAL_TIM_Base_Start_IT+0xf8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00e      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x94>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a20      	ldr	r2, [pc, #128]	; (80086d4 <HAL_TIM_Base_Start_IT+0xfc>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d009      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x94>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a1e      	ldr	r2, [pc, #120]	; (80086d8 <HAL_TIM_Base_Start_IT+0x100>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d004      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x94>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a1d      	ldr	r2, [pc, #116]	; (80086dc <HAL_TIM_Base_Start_IT+0x104>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d115      	bne.n	8008698 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	4b1b      	ldr	r3, [pc, #108]	; (80086e0 <HAL_TIM_Base_Start_IT+0x108>)
 8008674:	4013      	ands	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b06      	cmp	r3, #6
 800867c:	d015      	beq.n	80086aa <HAL_TIM_Base_Start_IT+0xd2>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008684:	d011      	beq.n	80086aa <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f042 0201 	orr.w	r2, r2, #1
 8008694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008696:	e008      	b.n	80086aa <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f042 0201 	orr.w	r2, r2, #1
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	e000      	b.n	80086ac <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	40010000 	.word	0x40010000
 80086c0:	40000400 	.word	0x40000400
 80086c4:	40000800 	.word	0x40000800
 80086c8:	40000c00 	.word	0x40000c00
 80086cc:	40010400 	.word	0x40010400
 80086d0:	40001800 	.word	0x40001800
 80086d4:	40014000 	.word	0x40014000
 80086d8:	4000e000 	.word	0x4000e000
 80086dc:	4000e400 	.word	0x4000e400
 80086e0:	00010007 	.word	0x00010007

080086e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d122      	bne.n	8008740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f003 0302 	and.w	r3, r3, #2
 8008704:	2b02      	cmp	r3, #2
 8008706:	d11b      	bne.n	8008740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f06f 0202 	mvn.w	r2, #2
 8008710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f905 	bl	8008936 <HAL_TIM_IC_CaptureCallback>
 800872c:	e005      	b.n	800873a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f8f7 	bl	8008922 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f908 	bl	800894a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	f003 0304 	and.w	r3, r3, #4
 800874a:	2b04      	cmp	r3, #4
 800874c:	d122      	bne.n	8008794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b04      	cmp	r3, #4
 800875a:	d11b      	bne.n	8008794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f06f 0204 	mvn.w	r2, #4
 8008764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2202      	movs	r2, #2
 800876a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f8db 	bl	8008936 <HAL_TIM_IC_CaptureCallback>
 8008780:	e005      	b.n	800878e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f8cd 	bl	8008922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f8de 	bl	800894a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d122      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	d11b      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f06f 0208 	mvn.w	r2, #8
 80087b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2204      	movs	r2, #4
 80087be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f8b1 	bl	8008936 <HAL_TIM_IC_CaptureCallback>
 80087d4:	e005      	b.n	80087e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f8a3 	bl	8008922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f8b4 	bl	800894a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	2b10      	cmp	r3, #16
 80087f4:	d122      	bne.n	800883c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f003 0310 	and.w	r3, r3, #16
 8008800:	2b10      	cmp	r3, #16
 8008802:	d11b      	bne.n	800883c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f06f 0210 	mvn.w	r2, #16
 800880c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2208      	movs	r2, #8
 8008812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f887 	bl	8008936 <HAL_TIM_IC_CaptureCallback>
 8008828:	e005      	b.n	8008836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f879 	bl	8008922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f88a 	bl	800894a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b01      	cmp	r3, #1
 8008848:	d10e      	bne.n	8008868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b01      	cmp	r3, #1
 8008856:	d107      	bne.n	8008868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f06f 0201 	mvn.w	r2, #1
 8008860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7f8 ff14 	bl	8001690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008872:	2b80      	cmp	r3, #128	; 0x80
 8008874:	d10e      	bne.n	8008894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008880:	2b80      	cmp	r3, #128	; 0x80
 8008882:	d107      	bne.n	8008894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800888c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f9bc 	bl	8008c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800889e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a2:	d10e      	bne.n	80088c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ae:	2b80      	cmp	r3, #128	; 0x80
 80088b0:	d107      	bne.n	80088c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f9af 	bl	8008c20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088cc:	2b40      	cmp	r3, #64	; 0x40
 80088ce:	d10e      	bne.n	80088ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088da:	2b40      	cmp	r3, #64	; 0x40
 80088dc:	d107      	bne.n	80088ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f838 	bl	800895e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b20      	cmp	r3, #32
 80088fa:	d10e      	bne.n	800891a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	f003 0320 	and.w	r3, r3, #32
 8008906:	2b20      	cmp	r3, #32
 8008908:	d107      	bne.n	800891a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f06f 0220 	mvn.w	r2, #32
 8008912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f96f 	bl	8008bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800893e:	bf00      	nop
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800894a:	b480      	push	{r7}
 800894c:	b083      	sub	sp, #12
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008952:	bf00      	nop
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
	...

08008974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a44      	ldr	r2, [pc, #272]	; (8008a98 <TIM_Base_SetConfig+0x124>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d013      	beq.n	80089b4 <TIM_Base_SetConfig+0x40>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008992:	d00f      	beq.n	80089b4 <TIM_Base_SetConfig+0x40>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a41      	ldr	r2, [pc, #260]	; (8008a9c <TIM_Base_SetConfig+0x128>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d00b      	beq.n	80089b4 <TIM_Base_SetConfig+0x40>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a40      	ldr	r2, [pc, #256]	; (8008aa0 <TIM_Base_SetConfig+0x12c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d007      	beq.n	80089b4 <TIM_Base_SetConfig+0x40>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a3f      	ldr	r2, [pc, #252]	; (8008aa4 <TIM_Base_SetConfig+0x130>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d003      	beq.n	80089b4 <TIM_Base_SetConfig+0x40>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a3e      	ldr	r2, [pc, #248]	; (8008aa8 <TIM_Base_SetConfig+0x134>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d108      	bne.n	80089c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a33      	ldr	r2, [pc, #204]	; (8008a98 <TIM_Base_SetConfig+0x124>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d027      	beq.n	8008a1e <TIM_Base_SetConfig+0xaa>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d4:	d023      	beq.n	8008a1e <TIM_Base_SetConfig+0xaa>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a30      	ldr	r2, [pc, #192]	; (8008a9c <TIM_Base_SetConfig+0x128>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d01f      	beq.n	8008a1e <TIM_Base_SetConfig+0xaa>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a2f      	ldr	r2, [pc, #188]	; (8008aa0 <TIM_Base_SetConfig+0x12c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d01b      	beq.n	8008a1e <TIM_Base_SetConfig+0xaa>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a2e      	ldr	r2, [pc, #184]	; (8008aa4 <TIM_Base_SetConfig+0x130>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d017      	beq.n	8008a1e <TIM_Base_SetConfig+0xaa>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a2d      	ldr	r2, [pc, #180]	; (8008aa8 <TIM_Base_SetConfig+0x134>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d013      	beq.n	8008a1e <TIM_Base_SetConfig+0xaa>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a2c      	ldr	r2, [pc, #176]	; (8008aac <TIM_Base_SetConfig+0x138>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d00f      	beq.n	8008a1e <TIM_Base_SetConfig+0xaa>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a2b      	ldr	r2, [pc, #172]	; (8008ab0 <TIM_Base_SetConfig+0x13c>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d00b      	beq.n	8008a1e <TIM_Base_SetConfig+0xaa>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a2a      	ldr	r2, [pc, #168]	; (8008ab4 <TIM_Base_SetConfig+0x140>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d007      	beq.n	8008a1e <TIM_Base_SetConfig+0xaa>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a29      	ldr	r2, [pc, #164]	; (8008ab8 <TIM_Base_SetConfig+0x144>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d003      	beq.n	8008a1e <TIM_Base_SetConfig+0xaa>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a28      	ldr	r2, [pc, #160]	; (8008abc <TIM_Base_SetConfig+0x148>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d108      	bne.n	8008a30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a10      	ldr	r2, [pc, #64]	; (8008a98 <TIM_Base_SetConfig+0x124>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00f      	beq.n	8008a7c <TIM_Base_SetConfig+0x108>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a12      	ldr	r2, [pc, #72]	; (8008aa8 <TIM_Base_SetConfig+0x134>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d00b      	beq.n	8008a7c <TIM_Base_SetConfig+0x108>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a11      	ldr	r2, [pc, #68]	; (8008aac <TIM_Base_SetConfig+0x138>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d007      	beq.n	8008a7c <TIM_Base_SetConfig+0x108>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a10      	ldr	r2, [pc, #64]	; (8008ab0 <TIM_Base_SetConfig+0x13c>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d003      	beq.n	8008a7c <TIM_Base_SetConfig+0x108>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a0f      	ldr	r2, [pc, #60]	; (8008ab4 <TIM_Base_SetConfig+0x140>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d103      	bne.n	8008a84 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	691a      	ldr	r2, [r3, #16]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	615a      	str	r2, [r3, #20]
}
 8008a8a:	bf00      	nop
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	40010000 	.word	0x40010000
 8008a9c:	40000400 	.word	0x40000400
 8008aa0:	40000800 	.word	0x40000800
 8008aa4:	40000c00 	.word	0x40000c00
 8008aa8:	40010400 	.word	0x40010400
 8008aac:	40014000 	.word	0x40014000
 8008ab0:	40014400 	.word	0x40014400
 8008ab4:	40014800 	.word	0x40014800
 8008ab8:	4000e000 	.word	0x4000e000
 8008abc:	4000e400 	.word	0x4000e400

08008ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d101      	bne.n	8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e077      	b.n	8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a35      	ldr	r2, [pc, #212]	; (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d004      	beq.n	8008b0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a34      	ldr	r2, [pc, #208]	; (8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d108      	bne.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a25      	ldr	r2, [pc, #148]	; (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d02c      	beq.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b4a:	d027      	beq.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a22      	ldr	r2, [pc, #136]	; (8008bdc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d022      	beq.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a21      	ldr	r2, [pc, #132]	; (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d01d      	beq.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a1f      	ldr	r2, [pc, #124]	; (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d018      	beq.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a1a      	ldr	r2, [pc, #104]	; (8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d013      	beq.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a1b      	ldr	r2, [pc, #108]	; (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d00e      	beq.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a1a      	ldr	r2, [pc, #104]	; (8008bec <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d009      	beq.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a18      	ldr	r2, [pc, #96]	; (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d004      	beq.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a17      	ldr	r2, [pc, #92]	; (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d10c      	bne.n	8008bb6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ba2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	40010000 	.word	0x40010000
 8008bd8:	40010400 	.word	0x40010400
 8008bdc:	40000400 	.word	0x40000400
 8008be0:	40000800 	.word	0x40000800
 8008be4:	40000c00 	.word	0x40000c00
 8008be8:	40001800 	.word	0x40001800
 8008bec:	40014000 	.word	0x40014000
 8008bf0:	4000e000 	.word	0x4000e000
 8008bf4:	4000e400 	.word	0x4000e400

08008bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e042      	b.n	8008ccc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d106      	bne.n	8008c5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7f9 fb23 	bl	80022a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2224      	movs	r2, #36	; 0x24
 8008c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0201 	bic.w	r2, r2, #1
 8008c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f82c 	bl	8008cd4 <UART_SetConfig>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d101      	bne.n	8008c86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e022      	b.n	8008ccc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fe7e 	bl	8009990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 ff05 	bl	8009ad4 <UART_CheckIdleState>
 8008cca:	4603      	mov	r3, r0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cd4:	b5b0      	push	{r4, r5, r7, lr}
 8008cd6:	b08e      	sub	sp, #56	; 0x38
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689a      	ldr	r2, [r3, #8]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	4bbf      	ldr	r3, [pc, #764]	; (8009000 <UART_SetConfig+0x32c>)
 8008d02:	4013      	ands	r3, r2
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	6812      	ldr	r2, [r2, #0]
 8008d08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d0a:	430b      	orrs	r3, r1
 8008d0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	430a      	orrs	r2, r1
 8008d22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4ab5      	ldr	r2, [pc, #724]	; (8009004 <UART_SetConfig+0x330>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d004      	beq.n	8008d3e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	4bb0      	ldr	r3, [pc, #704]	; (8009008 <UART_SetConfig+0x334>)
 8008d46:	4013      	ands	r3, r2
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6812      	ldr	r2, [r2, #0]
 8008d4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d4e:	430b      	orrs	r3, r1
 8008d50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d58:	f023 010f 	bic.w	r1, r3, #15
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	430a      	orrs	r2, r1
 8008d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4aa7      	ldr	r2, [pc, #668]	; (800900c <UART_SetConfig+0x338>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d176      	bne.n	8008e60 <UART_SetConfig+0x18c>
 8008d72:	4ba7      	ldr	r3, [pc, #668]	; (8009010 <UART_SetConfig+0x33c>)
 8008d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d7a:	2b28      	cmp	r3, #40	; 0x28
 8008d7c:	d86c      	bhi.n	8008e58 <UART_SetConfig+0x184>
 8008d7e:	a201      	add	r2, pc, #4	; (adr r2, 8008d84 <UART_SetConfig+0xb0>)
 8008d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d84:	08008e29 	.word	0x08008e29
 8008d88:	08008e59 	.word	0x08008e59
 8008d8c:	08008e59 	.word	0x08008e59
 8008d90:	08008e59 	.word	0x08008e59
 8008d94:	08008e59 	.word	0x08008e59
 8008d98:	08008e59 	.word	0x08008e59
 8008d9c:	08008e59 	.word	0x08008e59
 8008da0:	08008e59 	.word	0x08008e59
 8008da4:	08008e31 	.word	0x08008e31
 8008da8:	08008e59 	.word	0x08008e59
 8008dac:	08008e59 	.word	0x08008e59
 8008db0:	08008e59 	.word	0x08008e59
 8008db4:	08008e59 	.word	0x08008e59
 8008db8:	08008e59 	.word	0x08008e59
 8008dbc:	08008e59 	.word	0x08008e59
 8008dc0:	08008e59 	.word	0x08008e59
 8008dc4:	08008e39 	.word	0x08008e39
 8008dc8:	08008e59 	.word	0x08008e59
 8008dcc:	08008e59 	.word	0x08008e59
 8008dd0:	08008e59 	.word	0x08008e59
 8008dd4:	08008e59 	.word	0x08008e59
 8008dd8:	08008e59 	.word	0x08008e59
 8008ddc:	08008e59 	.word	0x08008e59
 8008de0:	08008e59 	.word	0x08008e59
 8008de4:	08008e41 	.word	0x08008e41
 8008de8:	08008e59 	.word	0x08008e59
 8008dec:	08008e59 	.word	0x08008e59
 8008df0:	08008e59 	.word	0x08008e59
 8008df4:	08008e59 	.word	0x08008e59
 8008df8:	08008e59 	.word	0x08008e59
 8008dfc:	08008e59 	.word	0x08008e59
 8008e00:	08008e59 	.word	0x08008e59
 8008e04:	08008e49 	.word	0x08008e49
 8008e08:	08008e59 	.word	0x08008e59
 8008e0c:	08008e59 	.word	0x08008e59
 8008e10:	08008e59 	.word	0x08008e59
 8008e14:	08008e59 	.word	0x08008e59
 8008e18:	08008e59 	.word	0x08008e59
 8008e1c:	08008e59 	.word	0x08008e59
 8008e20:	08008e59 	.word	0x08008e59
 8008e24:	08008e51 	.word	0x08008e51
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e2e:	e326      	b.n	800947e <UART_SetConfig+0x7aa>
 8008e30:	2304      	movs	r3, #4
 8008e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e36:	e322      	b.n	800947e <UART_SetConfig+0x7aa>
 8008e38:	2308      	movs	r3, #8
 8008e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e3e:	e31e      	b.n	800947e <UART_SetConfig+0x7aa>
 8008e40:	2310      	movs	r3, #16
 8008e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e46:	e31a      	b.n	800947e <UART_SetConfig+0x7aa>
 8008e48:	2320      	movs	r3, #32
 8008e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e4e:	e316      	b.n	800947e <UART_SetConfig+0x7aa>
 8008e50:	2340      	movs	r3, #64	; 0x40
 8008e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e56:	e312      	b.n	800947e <UART_SetConfig+0x7aa>
 8008e58:	2380      	movs	r3, #128	; 0x80
 8008e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e5e:	e30e      	b.n	800947e <UART_SetConfig+0x7aa>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a6b      	ldr	r2, [pc, #428]	; (8009014 <UART_SetConfig+0x340>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d130      	bne.n	8008ecc <UART_SetConfig+0x1f8>
 8008e6a:	4b69      	ldr	r3, [pc, #420]	; (8009010 <UART_SetConfig+0x33c>)
 8008e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e6e:	f003 0307 	and.w	r3, r3, #7
 8008e72:	2b05      	cmp	r3, #5
 8008e74:	d826      	bhi.n	8008ec4 <UART_SetConfig+0x1f0>
 8008e76:	a201      	add	r2, pc, #4	; (adr r2, 8008e7c <UART_SetConfig+0x1a8>)
 8008e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7c:	08008e95 	.word	0x08008e95
 8008e80:	08008e9d 	.word	0x08008e9d
 8008e84:	08008ea5 	.word	0x08008ea5
 8008e88:	08008ead 	.word	0x08008ead
 8008e8c:	08008eb5 	.word	0x08008eb5
 8008e90:	08008ebd 	.word	0x08008ebd
 8008e94:	2300      	movs	r3, #0
 8008e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e9a:	e2f0      	b.n	800947e <UART_SetConfig+0x7aa>
 8008e9c:	2304      	movs	r3, #4
 8008e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ea2:	e2ec      	b.n	800947e <UART_SetConfig+0x7aa>
 8008ea4:	2308      	movs	r3, #8
 8008ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eaa:	e2e8      	b.n	800947e <UART_SetConfig+0x7aa>
 8008eac:	2310      	movs	r3, #16
 8008eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eb2:	e2e4      	b.n	800947e <UART_SetConfig+0x7aa>
 8008eb4:	2320      	movs	r3, #32
 8008eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eba:	e2e0      	b.n	800947e <UART_SetConfig+0x7aa>
 8008ebc:	2340      	movs	r3, #64	; 0x40
 8008ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ec2:	e2dc      	b.n	800947e <UART_SetConfig+0x7aa>
 8008ec4:	2380      	movs	r3, #128	; 0x80
 8008ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eca:	e2d8      	b.n	800947e <UART_SetConfig+0x7aa>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a51      	ldr	r2, [pc, #324]	; (8009018 <UART_SetConfig+0x344>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d130      	bne.n	8008f38 <UART_SetConfig+0x264>
 8008ed6:	4b4e      	ldr	r3, [pc, #312]	; (8009010 <UART_SetConfig+0x33c>)
 8008ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eda:	f003 0307 	and.w	r3, r3, #7
 8008ede:	2b05      	cmp	r3, #5
 8008ee0:	d826      	bhi.n	8008f30 <UART_SetConfig+0x25c>
 8008ee2:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <UART_SetConfig+0x214>)
 8008ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee8:	08008f01 	.word	0x08008f01
 8008eec:	08008f09 	.word	0x08008f09
 8008ef0:	08008f11 	.word	0x08008f11
 8008ef4:	08008f19 	.word	0x08008f19
 8008ef8:	08008f21 	.word	0x08008f21
 8008efc:	08008f29 	.word	0x08008f29
 8008f00:	2300      	movs	r3, #0
 8008f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f06:	e2ba      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f08:	2304      	movs	r3, #4
 8008f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f0e:	e2b6      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f10:	2308      	movs	r3, #8
 8008f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f16:	e2b2      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f18:	2310      	movs	r3, #16
 8008f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f1e:	e2ae      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f20:	2320      	movs	r3, #32
 8008f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f26:	e2aa      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f28:	2340      	movs	r3, #64	; 0x40
 8008f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f2e:	e2a6      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f30:	2380      	movs	r3, #128	; 0x80
 8008f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f36:	e2a2      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a37      	ldr	r2, [pc, #220]	; (800901c <UART_SetConfig+0x348>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d130      	bne.n	8008fa4 <UART_SetConfig+0x2d0>
 8008f42:	4b33      	ldr	r3, [pc, #204]	; (8009010 <UART_SetConfig+0x33c>)
 8008f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b05      	cmp	r3, #5
 8008f4c:	d826      	bhi.n	8008f9c <UART_SetConfig+0x2c8>
 8008f4e:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <UART_SetConfig+0x280>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008f6d 	.word	0x08008f6d
 8008f58:	08008f75 	.word	0x08008f75
 8008f5c:	08008f7d 	.word	0x08008f7d
 8008f60:	08008f85 	.word	0x08008f85
 8008f64:	08008f8d 	.word	0x08008f8d
 8008f68:	08008f95 	.word	0x08008f95
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f72:	e284      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f74:	2304      	movs	r3, #4
 8008f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f7a:	e280      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f7c:	2308      	movs	r3, #8
 8008f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f82:	e27c      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f84:	2310      	movs	r3, #16
 8008f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f8a:	e278      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f8c:	2320      	movs	r3, #32
 8008f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f92:	e274      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f94:	2340      	movs	r3, #64	; 0x40
 8008f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f9a:	e270      	b.n	800947e <UART_SetConfig+0x7aa>
 8008f9c:	2380      	movs	r3, #128	; 0x80
 8008f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa2:	e26c      	b.n	800947e <UART_SetConfig+0x7aa>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a1d      	ldr	r2, [pc, #116]	; (8009020 <UART_SetConfig+0x34c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d142      	bne.n	8009034 <UART_SetConfig+0x360>
 8008fae:	4b18      	ldr	r3, [pc, #96]	; (8009010 <UART_SetConfig+0x33c>)
 8008fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	2b05      	cmp	r3, #5
 8008fb8:	d838      	bhi.n	800902c <UART_SetConfig+0x358>
 8008fba:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <UART_SetConfig+0x2ec>)
 8008fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc0:	08008fd9 	.word	0x08008fd9
 8008fc4:	08008fe1 	.word	0x08008fe1
 8008fc8:	08008fe9 	.word	0x08008fe9
 8008fcc:	08008ff1 	.word	0x08008ff1
 8008fd0:	08008ff9 	.word	0x08008ff9
 8008fd4:	08009025 	.word	0x08009025
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fde:	e24e      	b.n	800947e <UART_SetConfig+0x7aa>
 8008fe0:	2304      	movs	r3, #4
 8008fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fe6:	e24a      	b.n	800947e <UART_SetConfig+0x7aa>
 8008fe8:	2308      	movs	r3, #8
 8008fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fee:	e246      	b.n	800947e <UART_SetConfig+0x7aa>
 8008ff0:	2310      	movs	r3, #16
 8008ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ff6:	e242      	b.n	800947e <UART_SetConfig+0x7aa>
 8008ff8:	2320      	movs	r3, #32
 8008ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ffe:	e23e      	b.n	800947e <UART_SetConfig+0x7aa>
 8009000:	cfff69f3 	.word	0xcfff69f3
 8009004:	58000c00 	.word	0x58000c00
 8009008:	11fff4ff 	.word	0x11fff4ff
 800900c:	40011000 	.word	0x40011000
 8009010:	58024400 	.word	0x58024400
 8009014:	40004400 	.word	0x40004400
 8009018:	40004800 	.word	0x40004800
 800901c:	40004c00 	.word	0x40004c00
 8009020:	40005000 	.word	0x40005000
 8009024:	2340      	movs	r3, #64	; 0x40
 8009026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902a:	e228      	b.n	800947e <UART_SetConfig+0x7aa>
 800902c:	2380      	movs	r3, #128	; 0x80
 800902e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009032:	e224      	b.n	800947e <UART_SetConfig+0x7aa>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4ab1      	ldr	r2, [pc, #708]	; (8009300 <UART_SetConfig+0x62c>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d176      	bne.n	800912c <UART_SetConfig+0x458>
 800903e:	4bb1      	ldr	r3, [pc, #708]	; (8009304 <UART_SetConfig+0x630>)
 8009040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009042:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009046:	2b28      	cmp	r3, #40	; 0x28
 8009048:	d86c      	bhi.n	8009124 <UART_SetConfig+0x450>
 800904a:	a201      	add	r2, pc, #4	; (adr r2, 8009050 <UART_SetConfig+0x37c>)
 800904c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009050:	080090f5 	.word	0x080090f5
 8009054:	08009125 	.word	0x08009125
 8009058:	08009125 	.word	0x08009125
 800905c:	08009125 	.word	0x08009125
 8009060:	08009125 	.word	0x08009125
 8009064:	08009125 	.word	0x08009125
 8009068:	08009125 	.word	0x08009125
 800906c:	08009125 	.word	0x08009125
 8009070:	080090fd 	.word	0x080090fd
 8009074:	08009125 	.word	0x08009125
 8009078:	08009125 	.word	0x08009125
 800907c:	08009125 	.word	0x08009125
 8009080:	08009125 	.word	0x08009125
 8009084:	08009125 	.word	0x08009125
 8009088:	08009125 	.word	0x08009125
 800908c:	08009125 	.word	0x08009125
 8009090:	08009105 	.word	0x08009105
 8009094:	08009125 	.word	0x08009125
 8009098:	08009125 	.word	0x08009125
 800909c:	08009125 	.word	0x08009125
 80090a0:	08009125 	.word	0x08009125
 80090a4:	08009125 	.word	0x08009125
 80090a8:	08009125 	.word	0x08009125
 80090ac:	08009125 	.word	0x08009125
 80090b0:	0800910d 	.word	0x0800910d
 80090b4:	08009125 	.word	0x08009125
 80090b8:	08009125 	.word	0x08009125
 80090bc:	08009125 	.word	0x08009125
 80090c0:	08009125 	.word	0x08009125
 80090c4:	08009125 	.word	0x08009125
 80090c8:	08009125 	.word	0x08009125
 80090cc:	08009125 	.word	0x08009125
 80090d0:	08009115 	.word	0x08009115
 80090d4:	08009125 	.word	0x08009125
 80090d8:	08009125 	.word	0x08009125
 80090dc:	08009125 	.word	0x08009125
 80090e0:	08009125 	.word	0x08009125
 80090e4:	08009125 	.word	0x08009125
 80090e8:	08009125 	.word	0x08009125
 80090ec:	08009125 	.word	0x08009125
 80090f0:	0800911d 	.word	0x0800911d
 80090f4:	2301      	movs	r3, #1
 80090f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090fa:	e1c0      	b.n	800947e <UART_SetConfig+0x7aa>
 80090fc:	2304      	movs	r3, #4
 80090fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009102:	e1bc      	b.n	800947e <UART_SetConfig+0x7aa>
 8009104:	2308      	movs	r3, #8
 8009106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800910a:	e1b8      	b.n	800947e <UART_SetConfig+0x7aa>
 800910c:	2310      	movs	r3, #16
 800910e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009112:	e1b4      	b.n	800947e <UART_SetConfig+0x7aa>
 8009114:	2320      	movs	r3, #32
 8009116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800911a:	e1b0      	b.n	800947e <UART_SetConfig+0x7aa>
 800911c:	2340      	movs	r3, #64	; 0x40
 800911e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009122:	e1ac      	b.n	800947e <UART_SetConfig+0x7aa>
 8009124:	2380      	movs	r3, #128	; 0x80
 8009126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800912a:	e1a8      	b.n	800947e <UART_SetConfig+0x7aa>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a75      	ldr	r2, [pc, #468]	; (8009308 <UART_SetConfig+0x634>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d130      	bne.n	8009198 <UART_SetConfig+0x4c4>
 8009136:	4b73      	ldr	r3, [pc, #460]	; (8009304 <UART_SetConfig+0x630>)
 8009138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	2b05      	cmp	r3, #5
 8009140:	d826      	bhi.n	8009190 <UART_SetConfig+0x4bc>
 8009142:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <UART_SetConfig+0x474>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	08009161 	.word	0x08009161
 800914c:	08009169 	.word	0x08009169
 8009150:	08009171 	.word	0x08009171
 8009154:	08009179 	.word	0x08009179
 8009158:	08009181 	.word	0x08009181
 800915c:	08009189 	.word	0x08009189
 8009160:	2300      	movs	r3, #0
 8009162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009166:	e18a      	b.n	800947e <UART_SetConfig+0x7aa>
 8009168:	2304      	movs	r3, #4
 800916a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800916e:	e186      	b.n	800947e <UART_SetConfig+0x7aa>
 8009170:	2308      	movs	r3, #8
 8009172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009176:	e182      	b.n	800947e <UART_SetConfig+0x7aa>
 8009178:	2310      	movs	r3, #16
 800917a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800917e:	e17e      	b.n	800947e <UART_SetConfig+0x7aa>
 8009180:	2320      	movs	r3, #32
 8009182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009186:	e17a      	b.n	800947e <UART_SetConfig+0x7aa>
 8009188:	2340      	movs	r3, #64	; 0x40
 800918a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800918e:	e176      	b.n	800947e <UART_SetConfig+0x7aa>
 8009190:	2380      	movs	r3, #128	; 0x80
 8009192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009196:	e172      	b.n	800947e <UART_SetConfig+0x7aa>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a5b      	ldr	r2, [pc, #364]	; (800930c <UART_SetConfig+0x638>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d130      	bne.n	8009204 <UART_SetConfig+0x530>
 80091a2:	4b58      	ldr	r3, [pc, #352]	; (8009304 <UART_SetConfig+0x630>)
 80091a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	2b05      	cmp	r3, #5
 80091ac:	d826      	bhi.n	80091fc <UART_SetConfig+0x528>
 80091ae:	a201      	add	r2, pc, #4	; (adr r2, 80091b4 <UART_SetConfig+0x4e0>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	080091cd 	.word	0x080091cd
 80091b8:	080091d5 	.word	0x080091d5
 80091bc:	080091dd 	.word	0x080091dd
 80091c0:	080091e5 	.word	0x080091e5
 80091c4:	080091ed 	.word	0x080091ed
 80091c8:	080091f5 	.word	0x080091f5
 80091cc:	2300      	movs	r3, #0
 80091ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091d2:	e154      	b.n	800947e <UART_SetConfig+0x7aa>
 80091d4:	2304      	movs	r3, #4
 80091d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091da:	e150      	b.n	800947e <UART_SetConfig+0x7aa>
 80091dc:	2308      	movs	r3, #8
 80091de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091e2:	e14c      	b.n	800947e <UART_SetConfig+0x7aa>
 80091e4:	2310      	movs	r3, #16
 80091e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ea:	e148      	b.n	800947e <UART_SetConfig+0x7aa>
 80091ec:	2320      	movs	r3, #32
 80091ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091f2:	e144      	b.n	800947e <UART_SetConfig+0x7aa>
 80091f4:	2340      	movs	r3, #64	; 0x40
 80091f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091fa:	e140      	b.n	800947e <UART_SetConfig+0x7aa>
 80091fc:	2380      	movs	r3, #128	; 0x80
 80091fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009202:	e13c      	b.n	800947e <UART_SetConfig+0x7aa>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a41      	ldr	r2, [pc, #260]	; (8009310 <UART_SetConfig+0x63c>)
 800920a:	4293      	cmp	r3, r2
 800920c:	f040 8082 	bne.w	8009314 <UART_SetConfig+0x640>
 8009210:	4b3c      	ldr	r3, [pc, #240]	; (8009304 <UART_SetConfig+0x630>)
 8009212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009218:	2b28      	cmp	r3, #40	; 0x28
 800921a:	d86d      	bhi.n	80092f8 <UART_SetConfig+0x624>
 800921c:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <UART_SetConfig+0x550>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	080092c9 	.word	0x080092c9
 8009228:	080092f9 	.word	0x080092f9
 800922c:	080092f9 	.word	0x080092f9
 8009230:	080092f9 	.word	0x080092f9
 8009234:	080092f9 	.word	0x080092f9
 8009238:	080092f9 	.word	0x080092f9
 800923c:	080092f9 	.word	0x080092f9
 8009240:	080092f9 	.word	0x080092f9
 8009244:	080092d1 	.word	0x080092d1
 8009248:	080092f9 	.word	0x080092f9
 800924c:	080092f9 	.word	0x080092f9
 8009250:	080092f9 	.word	0x080092f9
 8009254:	080092f9 	.word	0x080092f9
 8009258:	080092f9 	.word	0x080092f9
 800925c:	080092f9 	.word	0x080092f9
 8009260:	080092f9 	.word	0x080092f9
 8009264:	080092d9 	.word	0x080092d9
 8009268:	080092f9 	.word	0x080092f9
 800926c:	080092f9 	.word	0x080092f9
 8009270:	080092f9 	.word	0x080092f9
 8009274:	080092f9 	.word	0x080092f9
 8009278:	080092f9 	.word	0x080092f9
 800927c:	080092f9 	.word	0x080092f9
 8009280:	080092f9 	.word	0x080092f9
 8009284:	080092e1 	.word	0x080092e1
 8009288:	080092f9 	.word	0x080092f9
 800928c:	080092f9 	.word	0x080092f9
 8009290:	080092f9 	.word	0x080092f9
 8009294:	080092f9 	.word	0x080092f9
 8009298:	080092f9 	.word	0x080092f9
 800929c:	080092f9 	.word	0x080092f9
 80092a0:	080092f9 	.word	0x080092f9
 80092a4:	080092e9 	.word	0x080092e9
 80092a8:	080092f9 	.word	0x080092f9
 80092ac:	080092f9 	.word	0x080092f9
 80092b0:	080092f9 	.word	0x080092f9
 80092b4:	080092f9 	.word	0x080092f9
 80092b8:	080092f9 	.word	0x080092f9
 80092bc:	080092f9 	.word	0x080092f9
 80092c0:	080092f9 	.word	0x080092f9
 80092c4:	080092f1 	.word	0x080092f1
 80092c8:	2301      	movs	r3, #1
 80092ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ce:	e0d6      	b.n	800947e <UART_SetConfig+0x7aa>
 80092d0:	2304      	movs	r3, #4
 80092d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092d6:	e0d2      	b.n	800947e <UART_SetConfig+0x7aa>
 80092d8:	2308      	movs	r3, #8
 80092da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092de:	e0ce      	b.n	800947e <UART_SetConfig+0x7aa>
 80092e0:	2310      	movs	r3, #16
 80092e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092e6:	e0ca      	b.n	800947e <UART_SetConfig+0x7aa>
 80092e8:	2320      	movs	r3, #32
 80092ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ee:	e0c6      	b.n	800947e <UART_SetConfig+0x7aa>
 80092f0:	2340      	movs	r3, #64	; 0x40
 80092f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f6:	e0c2      	b.n	800947e <UART_SetConfig+0x7aa>
 80092f8:	2380      	movs	r3, #128	; 0x80
 80092fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fe:	e0be      	b.n	800947e <UART_SetConfig+0x7aa>
 8009300:	40011400 	.word	0x40011400
 8009304:	58024400 	.word	0x58024400
 8009308:	40007800 	.word	0x40007800
 800930c:	40007c00 	.word	0x40007c00
 8009310:	40011800 	.word	0x40011800
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4aad      	ldr	r2, [pc, #692]	; (80095d0 <UART_SetConfig+0x8fc>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d176      	bne.n	800940c <UART_SetConfig+0x738>
 800931e:	4bad      	ldr	r3, [pc, #692]	; (80095d4 <UART_SetConfig+0x900>)
 8009320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009326:	2b28      	cmp	r3, #40	; 0x28
 8009328:	d86c      	bhi.n	8009404 <UART_SetConfig+0x730>
 800932a:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <UART_SetConfig+0x65c>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	080093d5 	.word	0x080093d5
 8009334:	08009405 	.word	0x08009405
 8009338:	08009405 	.word	0x08009405
 800933c:	08009405 	.word	0x08009405
 8009340:	08009405 	.word	0x08009405
 8009344:	08009405 	.word	0x08009405
 8009348:	08009405 	.word	0x08009405
 800934c:	08009405 	.word	0x08009405
 8009350:	080093dd 	.word	0x080093dd
 8009354:	08009405 	.word	0x08009405
 8009358:	08009405 	.word	0x08009405
 800935c:	08009405 	.word	0x08009405
 8009360:	08009405 	.word	0x08009405
 8009364:	08009405 	.word	0x08009405
 8009368:	08009405 	.word	0x08009405
 800936c:	08009405 	.word	0x08009405
 8009370:	080093e5 	.word	0x080093e5
 8009374:	08009405 	.word	0x08009405
 8009378:	08009405 	.word	0x08009405
 800937c:	08009405 	.word	0x08009405
 8009380:	08009405 	.word	0x08009405
 8009384:	08009405 	.word	0x08009405
 8009388:	08009405 	.word	0x08009405
 800938c:	08009405 	.word	0x08009405
 8009390:	080093ed 	.word	0x080093ed
 8009394:	08009405 	.word	0x08009405
 8009398:	08009405 	.word	0x08009405
 800939c:	08009405 	.word	0x08009405
 80093a0:	08009405 	.word	0x08009405
 80093a4:	08009405 	.word	0x08009405
 80093a8:	08009405 	.word	0x08009405
 80093ac:	08009405 	.word	0x08009405
 80093b0:	080093f5 	.word	0x080093f5
 80093b4:	08009405 	.word	0x08009405
 80093b8:	08009405 	.word	0x08009405
 80093bc:	08009405 	.word	0x08009405
 80093c0:	08009405 	.word	0x08009405
 80093c4:	08009405 	.word	0x08009405
 80093c8:	08009405 	.word	0x08009405
 80093cc:	08009405 	.word	0x08009405
 80093d0:	080093fd 	.word	0x080093fd
 80093d4:	2301      	movs	r3, #1
 80093d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093da:	e050      	b.n	800947e <UART_SetConfig+0x7aa>
 80093dc:	2304      	movs	r3, #4
 80093de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e2:	e04c      	b.n	800947e <UART_SetConfig+0x7aa>
 80093e4:	2308      	movs	r3, #8
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	e048      	b.n	800947e <UART_SetConfig+0x7aa>
 80093ec:	2310      	movs	r3, #16
 80093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f2:	e044      	b.n	800947e <UART_SetConfig+0x7aa>
 80093f4:	2320      	movs	r3, #32
 80093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fa:	e040      	b.n	800947e <UART_SetConfig+0x7aa>
 80093fc:	2340      	movs	r3, #64	; 0x40
 80093fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009402:	e03c      	b.n	800947e <UART_SetConfig+0x7aa>
 8009404:	2380      	movs	r3, #128	; 0x80
 8009406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800940a:	e038      	b.n	800947e <UART_SetConfig+0x7aa>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a71      	ldr	r2, [pc, #452]	; (80095d8 <UART_SetConfig+0x904>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d130      	bne.n	8009478 <UART_SetConfig+0x7a4>
 8009416:	4b6f      	ldr	r3, [pc, #444]	; (80095d4 <UART_SetConfig+0x900>)
 8009418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	2b05      	cmp	r3, #5
 8009420:	d826      	bhi.n	8009470 <UART_SetConfig+0x79c>
 8009422:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <UART_SetConfig+0x754>)
 8009424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009428:	08009441 	.word	0x08009441
 800942c:	08009449 	.word	0x08009449
 8009430:	08009451 	.word	0x08009451
 8009434:	08009459 	.word	0x08009459
 8009438:	08009461 	.word	0x08009461
 800943c:	08009469 	.word	0x08009469
 8009440:	2302      	movs	r3, #2
 8009442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009446:	e01a      	b.n	800947e <UART_SetConfig+0x7aa>
 8009448:	2304      	movs	r3, #4
 800944a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800944e:	e016      	b.n	800947e <UART_SetConfig+0x7aa>
 8009450:	2308      	movs	r3, #8
 8009452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009456:	e012      	b.n	800947e <UART_SetConfig+0x7aa>
 8009458:	2310      	movs	r3, #16
 800945a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945e:	e00e      	b.n	800947e <UART_SetConfig+0x7aa>
 8009460:	2320      	movs	r3, #32
 8009462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009466:	e00a      	b.n	800947e <UART_SetConfig+0x7aa>
 8009468:	2340      	movs	r3, #64	; 0x40
 800946a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946e:	e006      	b.n	800947e <UART_SetConfig+0x7aa>
 8009470:	2380      	movs	r3, #128	; 0x80
 8009472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009476:	e002      	b.n	800947e <UART_SetConfig+0x7aa>
 8009478:	2380      	movs	r3, #128	; 0x80
 800947a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a55      	ldr	r2, [pc, #340]	; (80095d8 <UART_SetConfig+0x904>)
 8009484:	4293      	cmp	r3, r2
 8009486:	f040 80f0 	bne.w	800966a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800948a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800948e:	2b20      	cmp	r3, #32
 8009490:	dc46      	bgt.n	8009520 <UART_SetConfig+0x84c>
 8009492:	2b02      	cmp	r3, #2
 8009494:	db75      	blt.n	8009582 <UART_SetConfig+0x8ae>
 8009496:	3b02      	subs	r3, #2
 8009498:	2b1e      	cmp	r3, #30
 800949a:	d872      	bhi.n	8009582 <UART_SetConfig+0x8ae>
 800949c:	a201      	add	r2, pc, #4	; (adr r2, 80094a4 <UART_SetConfig+0x7d0>)
 800949e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a2:	bf00      	nop
 80094a4:	08009527 	.word	0x08009527
 80094a8:	08009583 	.word	0x08009583
 80094ac:	0800952f 	.word	0x0800952f
 80094b0:	08009583 	.word	0x08009583
 80094b4:	08009583 	.word	0x08009583
 80094b8:	08009583 	.word	0x08009583
 80094bc:	0800953f 	.word	0x0800953f
 80094c0:	08009583 	.word	0x08009583
 80094c4:	08009583 	.word	0x08009583
 80094c8:	08009583 	.word	0x08009583
 80094cc:	08009583 	.word	0x08009583
 80094d0:	08009583 	.word	0x08009583
 80094d4:	08009583 	.word	0x08009583
 80094d8:	08009583 	.word	0x08009583
 80094dc:	0800954f 	.word	0x0800954f
 80094e0:	08009583 	.word	0x08009583
 80094e4:	08009583 	.word	0x08009583
 80094e8:	08009583 	.word	0x08009583
 80094ec:	08009583 	.word	0x08009583
 80094f0:	08009583 	.word	0x08009583
 80094f4:	08009583 	.word	0x08009583
 80094f8:	08009583 	.word	0x08009583
 80094fc:	08009583 	.word	0x08009583
 8009500:	08009583 	.word	0x08009583
 8009504:	08009583 	.word	0x08009583
 8009508:	08009583 	.word	0x08009583
 800950c:	08009583 	.word	0x08009583
 8009510:	08009583 	.word	0x08009583
 8009514:	08009583 	.word	0x08009583
 8009518:	08009583 	.word	0x08009583
 800951c:	08009575 	.word	0x08009575
 8009520:	2b40      	cmp	r3, #64	; 0x40
 8009522:	d02a      	beq.n	800957a <UART_SetConfig+0x8a6>
 8009524:	e02d      	b.n	8009582 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009526:	f7fd ff7f 	bl	8007428 <HAL_RCCEx_GetD3PCLK1Freq>
 800952a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800952c:	e02f      	b.n	800958e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800952e:	f107 0314 	add.w	r3, r7, #20
 8009532:	4618      	mov	r0, r3
 8009534:	f7fd ff8e 	bl	8007454 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800953c:	e027      	b.n	800958e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800953e:	f107 0308 	add.w	r3, r7, #8
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe f8da 	bl	80076fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800954c:	e01f      	b.n	800958e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800954e:	4b21      	ldr	r3, [pc, #132]	; (80095d4 <UART_SetConfig+0x900>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 0320 	and.w	r3, r3, #32
 8009556:	2b00      	cmp	r3, #0
 8009558:	d009      	beq.n	800956e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800955a:	4b1e      	ldr	r3, [pc, #120]	; (80095d4 <UART_SetConfig+0x900>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	08db      	lsrs	r3, r3, #3
 8009560:	f003 0303 	and.w	r3, r3, #3
 8009564:	4a1d      	ldr	r2, [pc, #116]	; (80095dc <UART_SetConfig+0x908>)
 8009566:	fa22 f303 	lsr.w	r3, r2, r3
 800956a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800956c:	e00f      	b.n	800958e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800956e:	4b1b      	ldr	r3, [pc, #108]	; (80095dc <UART_SetConfig+0x908>)
 8009570:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009572:	e00c      	b.n	800958e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009574:	4b1a      	ldr	r3, [pc, #104]	; (80095e0 <UART_SetConfig+0x90c>)
 8009576:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009578:	e009      	b.n	800958e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800957a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800957e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009580:	e005      	b.n	800958e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8009582:	2300      	movs	r3, #0
 8009584:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800958c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800958e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 81e6 	beq.w	8009962 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	4a12      	ldr	r2, [pc, #72]	; (80095e4 <UART_SetConfig+0x910>)
 800959c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095a0:	461a      	mov	r2, r3
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80095a8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	4613      	mov	r3, r2
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	4413      	add	r3, r2
 80095b4:	6a3a      	ldr	r2, [r7, #32]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d305      	bcc.n	80095c6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095c0:	6a3a      	ldr	r2, [r7, #32]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d910      	bls.n	80095e8 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80095cc:	e1c9      	b.n	8009962 <UART_SetConfig+0xc8e>
 80095ce:	bf00      	nop
 80095d0:	40011c00 	.word	0x40011c00
 80095d4:	58024400 	.word	0x58024400
 80095d8:	58000c00 	.word	0x58000c00
 80095dc:	03d09000 	.word	0x03d09000
 80095e0:	003d0900 	.word	0x003d0900
 80095e4:	0801dd48 	.word	0x0801dd48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ea:	4618      	mov	r0, r3
 80095ec:	f04f 0100 	mov.w	r1, #0
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f4:	4ac1      	ldr	r2, [pc, #772]	; (80098fc <UART_SetConfig+0xc28>)
 80095f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	f04f 0300 	mov.w	r3, #0
 8009600:	f7f6 fede 	bl	80003c0 <__aeabi_uldivmod>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	4610      	mov	r0, r2
 800960a:	4619      	mov	r1, r3
 800960c:	f04f 0200 	mov.w	r2, #0
 8009610:	f04f 0300 	mov.w	r3, #0
 8009614:	020b      	lsls	r3, r1, #8
 8009616:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800961a:	0202      	lsls	r2, r0, #8
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	6849      	ldr	r1, [r1, #4]
 8009620:	0849      	lsrs	r1, r1, #1
 8009622:	4608      	mov	r0, r1
 8009624:	f04f 0100 	mov.w	r1, #0
 8009628:	1814      	adds	r4, r2, r0
 800962a:	eb43 0501 	adc.w	r5, r3, r1
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	461a      	mov	r2, r3
 8009634:	f04f 0300 	mov.w	r3, #0
 8009638:	4620      	mov	r0, r4
 800963a:	4629      	mov	r1, r5
 800963c:	f7f6 fec0 	bl	80003c0 <__aeabi_uldivmod>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4613      	mov	r3, r2
 8009646:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800964e:	d308      	bcc.n	8009662 <UART_SetConfig+0x98e>
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009656:	d204      	bcs.n	8009662 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800965e:	60da      	str	r2, [r3, #12]
 8009660:	e17f      	b.n	8009962 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009668:	e17b      	b.n	8009962 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009672:	f040 80bd 	bne.w	80097f0 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8009676:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800967a:	2b20      	cmp	r3, #32
 800967c:	dc48      	bgt.n	8009710 <UART_SetConfig+0xa3c>
 800967e:	2b00      	cmp	r3, #0
 8009680:	db7b      	blt.n	800977a <UART_SetConfig+0xaa6>
 8009682:	2b20      	cmp	r3, #32
 8009684:	d879      	bhi.n	800977a <UART_SetConfig+0xaa6>
 8009686:	a201      	add	r2, pc, #4	; (adr r2, 800968c <UART_SetConfig+0x9b8>)
 8009688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968c:	08009717 	.word	0x08009717
 8009690:	0800971f 	.word	0x0800971f
 8009694:	0800977b 	.word	0x0800977b
 8009698:	0800977b 	.word	0x0800977b
 800969c:	08009727 	.word	0x08009727
 80096a0:	0800977b 	.word	0x0800977b
 80096a4:	0800977b 	.word	0x0800977b
 80096a8:	0800977b 	.word	0x0800977b
 80096ac:	08009737 	.word	0x08009737
 80096b0:	0800977b 	.word	0x0800977b
 80096b4:	0800977b 	.word	0x0800977b
 80096b8:	0800977b 	.word	0x0800977b
 80096bc:	0800977b 	.word	0x0800977b
 80096c0:	0800977b 	.word	0x0800977b
 80096c4:	0800977b 	.word	0x0800977b
 80096c8:	0800977b 	.word	0x0800977b
 80096cc:	08009747 	.word	0x08009747
 80096d0:	0800977b 	.word	0x0800977b
 80096d4:	0800977b 	.word	0x0800977b
 80096d8:	0800977b 	.word	0x0800977b
 80096dc:	0800977b 	.word	0x0800977b
 80096e0:	0800977b 	.word	0x0800977b
 80096e4:	0800977b 	.word	0x0800977b
 80096e8:	0800977b 	.word	0x0800977b
 80096ec:	0800977b 	.word	0x0800977b
 80096f0:	0800977b 	.word	0x0800977b
 80096f4:	0800977b 	.word	0x0800977b
 80096f8:	0800977b 	.word	0x0800977b
 80096fc:	0800977b 	.word	0x0800977b
 8009700:	0800977b 	.word	0x0800977b
 8009704:	0800977b 	.word	0x0800977b
 8009708:	0800977b 	.word	0x0800977b
 800970c:	0800976d 	.word	0x0800976d
 8009710:	2b40      	cmp	r3, #64	; 0x40
 8009712:	d02e      	beq.n	8009772 <UART_SetConfig+0xa9e>
 8009714:	e031      	b.n	800977a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009716:	f7fc ff1f 	bl	8006558 <HAL_RCC_GetPCLK1Freq>
 800971a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800971c:	e033      	b.n	8009786 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800971e:	f7fc ff31 	bl	8006584 <HAL_RCC_GetPCLK2Freq>
 8009722:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009724:	e02f      	b.n	8009786 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009726:	f107 0314 	add.w	r3, r7, #20
 800972a:	4618      	mov	r0, r3
 800972c:	f7fd fe92 	bl	8007454 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009734:	e027      	b.n	8009786 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009736:	f107 0308 	add.w	r3, r7, #8
 800973a:	4618      	mov	r0, r3
 800973c:	f7fd ffde 	bl	80076fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009744:	e01f      	b.n	8009786 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009746:	4b6e      	ldr	r3, [pc, #440]	; (8009900 <UART_SetConfig+0xc2c>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0320 	and.w	r3, r3, #32
 800974e:	2b00      	cmp	r3, #0
 8009750:	d009      	beq.n	8009766 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009752:	4b6b      	ldr	r3, [pc, #428]	; (8009900 <UART_SetConfig+0xc2c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	08db      	lsrs	r3, r3, #3
 8009758:	f003 0303 	and.w	r3, r3, #3
 800975c:	4a69      	ldr	r2, [pc, #420]	; (8009904 <UART_SetConfig+0xc30>)
 800975e:	fa22 f303 	lsr.w	r3, r2, r3
 8009762:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009764:	e00f      	b.n	8009786 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8009766:	4b67      	ldr	r3, [pc, #412]	; (8009904 <UART_SetConfig+0xc30>)
 8009768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800976a:	e00c      	b.n	8009786 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800976c:	4b66      	ldr	r3, [pc, #408]	; (8009908 <UART_SetConfig+0xc34>)
 800976e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009770:	e009      	b.n	8009786 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009776:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009778:	e005      	b.n	8009786 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800977a:	2300      	movs	r3, #0
 800977c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 80ea 	beq.w	8009962 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009792:	4a5a      	ldr	r2, [pc, #360]	; (80098fc <UART_SetConfig+0xc28>)
 8009794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009798:	461a      	mov	r2, r3
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	fbb3 f3f2 	udiv	r3, r3, r2
 80097a0:	005a      	lsls	r2, r3, #1
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	085b      	lsrs	r3, r3, #1
 80097a8:	441a      	add	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	2b0f      	cmp	r3, #15
 80097b8:	d916      	bls.n	80097e8 <UART_SetConfig+0xb14>
 80097ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097c0:	d212      	bcs.n	80097e8 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	f023 030f 	bic.w	r3, r3, #15
 80097ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ce:	085b      	lsrs	r3, r3, #1
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80097da:	4313      	orrs	r3, r2
 80097dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80097e4:	60da      	str	r2, [r3, #12]
 80097e6:	e0bc      	b.n	8009962 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80097ee:	e0b8      	b.n	8009962 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	dc4b      	bgt.n	8009890 <UART_SetConfig+0xbbc>
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f2c0 8087 	blt.w	800990c <UART_SetConfig+0xc38>
 80097fe:	2b20      	cmp	r3, #32
 8009800:	f200 8084 	bhi.w	800990c <UART_SetConfig+0xc38>
 8009804:	a201      	add	r2, pc, #4	; (adr r2, 800980c <UART_SetConfig+0xb38>)
 8009806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980a:	bf00      	nop
 800980c:	08009897 	.word	0x08009897
 8009810:	0800989f 	.word	0x0800989f
 8009814:	0800990d 	.word	0x0800990d
 8009818:	0800990d 	.word	0x0800990d
 800981c:	080098a7 	.word	0x080098a7
 8009820:	0800990d 	.word	0x0800990d
 8009824:	0800990d 	.word	0x0800990d
 8009828:	0800990d 	.word	0x0800990d
 800982c:	080098b7 	.word	0x080098b7
 8009830:	0800990d 	.word	0x0800990d
 8009834:	0800990d 	.word	0x0800990d
 8009838:	0800990d 	.word	0x0800990d
 800983c:	0800990d 	.word	0x0800990d
 8009840:	0800990d 	.word	0x0800990d
 8009844:	0800990d 	.word	0x0800990d
 8009848:	0800990d 	.word	0x0800990d
 800984c:	080098c7 	.word	0x080098c7
 8009850:	0800990d 	.word	0x0800990d
 8009854:	0800990d 	.word	0x0800990d
 8009858:	0800990d 	.word	0x0800990d
 800985c:	0800990d 	.word	0x0800990d
 8009860:	0800990d 	.word	0x0800990d
 8009864:	0800990d 	.word	0x0800990d
 8009868:	0800990d 	.word	0x0800990d
 800986c:	0800990d 	.word	0x0800990d
 8009870:	0800990d 	.word	0x0800990d
 8009874:	0800990d 	.word	0x0800990d
 8009878:	0800990d 	.word	0x0800990d
 800987c:	0800990d 	.word	0x0800990d
 8009880:	0800990d 	.word	0x0800990d
 8009884:	0800990d 	.word	0x0800990d
 8009888:	0800990d 	.word	0x0800990d
 800988c:	080098ed 	.word	0x080098ed
 8009890:	2b40      	cmp	r3, #64	; 0x40
 8009892:	d02e      	beq.n	80098f2 <UART_SetConfig+0xc1e>
 8009894:	e03a      	b.n	800990c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009896:	f7fc fe5f 	bl	8006558 <HAL_RCC_GetPCLK1Freq>
 800989a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800989c:	e03c      	b.n	8009918 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800989e:	f7fc fe71 	bl	8006584 <HAL_RCC_GetPCLK2Freq>
 80098a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80098a4:	e038      	b.n	8009918 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098a6:	f107 0314 	add.w	r3, r7, #20
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fd fdd2 	bl	8007454 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098b4:	e030      	b.n	8009918 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098b6:	f107 0308 	add.w	r3, r7, #8
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fd ff1e 	bl	80076fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098c4:	e028      	b.n	8009918 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098c6:	4b0e      	ldr	r3, [pc, #56]	; (8009900 <UART_SetConfig+0xc2c>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0320 	and.w	r3, r3, #32
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d009      	beq.n	80098e6 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098d2:	4b0b      	ldr	r3, [pc, #44]	; (8009900 <UART_SetConfig+0xc2c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	08db      	lsrs	r3, r3, #3
 80098d8:	f003 0303 	and.w	r3, r3, #3
 80098dc:	4a09      	ldr	r2, [pc, #36]	; (8009904 <UART_SetConfig+0xc30>)
 80098de:	fa22 f303 	lsr.w	r3, r2, r3
 80098e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80098e4:	e018      	b.n	8009918 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80098e6:	4b07      	ldr	r3, [pc, #28]	; (8009904 <UART_SetConfig+0xc30>)
 80098e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098ea:	e015      	b.n	8009918 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80098ec:	4b06      	ldr	r3, [pc, #24]	; (8009908 <UART_SetConfig+0xc34>)
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098f0:	e012      	b.n	8009918 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098f8:	e00e      	b.n	8009918 <UART_SetConfig+0xc44>
 80098fa:	bf00      	nop
 80098fc:	0801dd48 	.word	0x0801dd48
 8009900:	58024400 	.word	0x58024400
 8009904:	03d09000 	.word	0x03d09000
 8009908:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009916:	bf00      	nop
    }

    if (pclk != 0U)
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991a:	2b00      	cmp	r3, #0
 800991c:	d021      	beq.n	8009962 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	4a1a      	ldr	r2, [pc, #104]	; (800998c <UART_SetConfig+0xcb8>)
 8009924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009928:	461a      	mov	r2, r3
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	085b      	lsrs	r3, r3, #1
 8009936:	441a      	add	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009940:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009944:	2b0f      	cmp	r3, #15
 8009946:	d909      	bls.n	800995c <UART_SetConfig+0xc88>
 8009948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800994e:	d205      	bcs.n	800995c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	60da      	str	r2, [r3, #12]
 800995a:	e002      	b.n	8009962 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800997e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009982:	4618      	mov	r0, r3
 8009984:	3738      	adds	r7, #56	; 0x38
 8009986:	46bd      	mov	sp, r7
 8009988:	bdb0      	pop	{r4, r5, r7, pc}
 800998a:	bf00      	nop
 800998c:	0801dd48 	.word	0x0801dd48

08009990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00a      	beq.n	80099ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099be:	f003 0302 	and.w	r3, r3, #2
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00a      	beq.n	80099dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	430a      	orrs	r2, r1
 80099da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e0:	f003 0304 	and.w	r3, r3, #4
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00a      	beq.n	80099fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a02:	f003 0308 	and.w	r3, r3, #8
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a24:	f003 0310 	and.w	r3, r3, #16
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00a      	beq.n	8009a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a46:	f003 0320 	and.w	r3, r3, #32
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00a      	beq.n	8009a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	430a      	orrs	r2, r1
 8009a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d01a      	beq.n	8009aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a8e:	d10a      	bne.n	8009aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00a      	beq.n	8009ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	605a      	str	r2, [r3, #4]
  }
}
 8009ac8:	bf00      	nop
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af02      	add	r7, sp, #8
 8009ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ae4:	f7f8 fe26 	bl	8002734 <HAL_GetTick>
 8009ae8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0308 	and.w	r3, r3, #8
 8009af4:	2b08      	cmp	r3, #8
 8009af6:	d10e      	bne.n	8009b16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f82f 	bl	8009b6a <UART_WaitOnFlagUntilTimeout>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e025      	b.n	8009b62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d10e      	bne.n	8009b42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f819 	bl	8009b6a <UART_WaitOnFlagUntilTimeout>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e00f      	b.n	8009b62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2220      	movs	r2, #32
 8009b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b09c      	sub	sp, #112	; 0x70
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	60b9      	str	r1, [r7, #8]
 8009b74:	603b      	str	r3, [r7, #0]
 8009b76:	4613      	mov	r3, r2
 8009b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b7a:	e0a9      	b.n	8009cd0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b82:	f000 80a5 	beq.w	8009cd0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b86:	f7f8 fdd5 	bl	8002734 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d302      	bcc.n	8009b9c <UART_WaitOnFlagUntilTimeout+0x32>
 8009b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d140      	bne.n	8009c1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ba4:	e853 3f00 	ldrex	r3, [r3]
 8009ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bb0:	667b      	str	r3, [r7, #100]	; 0x64
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bbc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bc2:	e841 2300 	strex	r3, r2, [r1]
 8009bc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e6      	bne.n	8009b9c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd8:	e853 3f00 	ldrex	r3, [r3]
 8009bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be0:	f023 0301 	bic.w	r3, r3, #1
 8009be4:	663b      	str	r3, [r7, #96]	; 0x60
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3308      	adds	r3, #8
 8009bec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009bee:	64ba      	str	r2, [r7, #72]	; 0x48
 8009bf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bf6:	e841 2300 	strex	r3, r2, [r1]
 8009bfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1e5      	bne.n	8009bce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2220      	movs	r2, #32
 8009c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e069      	b.n	8009cf2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 0304 	and.w	r3, r3, #4
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d051      	beq.n	8009cd0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	69db      	ldr	r3, [r3, #28]
 8009c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c3a:	d149      	bne.n	8009cd0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	e853 3f00 	ldrex	r3, [r3]
 8009c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	461a      	mov	r2, r3
 8009c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34
 8009c66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c6c:	e841 2300 	strex	r3, r2, [r1]
 8009c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e6      	bne.n	8009c46 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	e853 3f00 	ldrex	r3, [r3]
 8009c86:	613b      	str	r3, [r7, #16]
   return(result);
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f023 0301 	bic.w	r3, r3, #1
 8009c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3308      	adds	r3, #8
 8009c96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c98:	623a      	str	r2, [r7, #32]
 8009c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	69f9      	ldr	r1, [r7, #28]
 8009c9e:	6a3a      	ldr	r2, [r7, #32]
 8009ca0:	e841 2300 	strex	r3, r2, [r1]
 8009ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e5      	bne.n	8009c78 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e010      	b.n	8009cf2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	69da      	ldr	r2, [r3, #28]
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	bf0c      	ite	eq
 8009ce0:	2301      	moveq	r3, #1
 8009ce2:	2300      	movne	r3, #0
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	f43f af46 	beq.w	8009b7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3770      	adds	r7, #112	; 0x70
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	b085      	sub	sp, #20
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d101      	bne.n	8009d10 <HAL_UARTEx_DisableFifoMode+0x16>
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	e027      	b.n	8009d60 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2224      	movs	r2, #36	; 0x24
 8009d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f022 0201 	bic.w	r2, r2, #1
 8009d36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2220      	movs	r2, #32
 8009d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3714      	adds	r7, #20
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d101      	bne.n	8009d84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d80:	2302      	movs	r3, #2
 8009d82:	e02d      	b.n	8009de0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2224      	movs	r2, #36	; 0x24
 8009d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f022 0201 	bic.w	r2, r2, #1
 8009daa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f84f 	bl	8009e64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2220      	movs	r2, #32
 8009dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d101      	bne.n	8009e00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	e02d      	b.n	8009e5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2224      	movs	r2, #36	; 0x24
 8009e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f022 0201 	bic.w	r2, r2, #1
 8009e26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f811 	bl	8009e64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d108      	bne.n	8009e86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e84:	e031      	b.n	8009eea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e86:	2310      	movs	r3, #16
 8009e88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e8a:	2310      	movs	r3, #16
 8009e8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	0e5b      	lsrs	r3, r3, #25
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	f003 0307 	and.w	r3, r3, #7
 8009e9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	0f5b      	lsrs	r3, r3, #29
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	f003 0307 	and.w	r3, r3, #7
 8009eac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	7b3a      	ldrb	r2, [r7, #12]
 8009eb2:	4911      	ldr	r1, [pc, #68]	; (8009ef8 <UARTEx_SetNbDataToProcess+0x94>)
 8009eb4:	5c8a      	ldrb	r2, [r1, r2]
 8009eb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009eba:	7b3a      	ldrb	r2, [r7, #12]
 8009ebc:	490f      	ldr	r1, [pc, #60]	; (8009efc <UARTEx_SetNbDataToProcess+0x98>)
 8009ebe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ec0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	7b7a      	ldrb	r2, [r7, #13]
 8009ed0:	4909      	ldr	r1, [pc, #36]	; (8009ef8 <UARTEx_SetNbDataToProcess+0x94>)
 8009ed2:	5c8a      	ldrb	r2, [r1, r2]
 8009ed4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ed8:	7b7a      	ldrb	r2, [r7, #13]
 8009eda:	4908      	ldr	r1, [pc, #32]	; (8009efc <UARTEx_SetNbDataToProcess+0x98>)
 8009edc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ede:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009eea:	bf00      	nop
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	0801dd60 	.word	0x0801dd60
 8009efc:	0801dd68 	.word	0x0801dd68

08009f00 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009f00:	b5b0      	push	{r4, r5, r7, lr}
 8009f02:	b08c      	sub	sp, #48	; 0x30
 8009f04:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009f06:	4b96      	ldr	r3, [pc, #600]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f08:	22c0      	movs	r2, #192	; 0xc0
 8009f0a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009f0c:	4b94      	ldr	r3, [pc, #592]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f0e:	22a8      	movs	r2, #168	; 0xa8
 8009f10:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8009f12:	4b93      	ldr	r3, [pc, #588]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f14:	2201      	movs	r2, #1
 8009f16:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 8009f18:	4b91      	ldr	r3, [pc, #580]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f1a:	22c8      	movs	r2, #200	; 0xc8
 8009f1c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009f1e:	4b91      	ldr	r3, [pc, #580]	; (800a164 <MX_LWIP_Init+0x264>)
 8009f20:	22ff      	movs	r2, #255	; 0xff
 8009f22:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009f24:	4b8f      	ldr	r3, [pc, #572]	; (800a164 <MX_LWIP_Init+0x264>)
 8009f26:	22ff      	movs	r2, #255	; 0xff
 8009f28:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009f2a:	4b8e      	ldr	r3, [pc, #568]	; (800a164 <MX_LWIP_Init+0x264>)
 8009f2c:	22ff      	movs	r2, #255	; 0xff
 8009f2e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009f30:	4b8c      	ldr	r3, [pc, #560]	; (800a164 <MX_LWIP_Init+0x264>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009f36:	4b8c      	ldr	r3, [pc, #560]	; (800a168 <MX_LWIP_Init+0x268>)
 8009f38:	22c0      	movs	r2, #192	; 0xc0
 8009f3a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009f3c:	4b8a      	ldr	r3, [pc, #552]	; (800a168 <MX_LWIP_Init+0x268>)
 8009f3e:	22a8      	movs	r2, #168	; 0xa8
 8009f40:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8009f42:	4b89      	ldr	r3, [pc, #548]	; (800a168 <MX_LWIP_Init+0x268>)
 8009f44:	2201      	movs	r2, #1
 8009f46:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009f48:	4b87      	ldr	r3, [pc, #540]	; (800a168 <MX_LWIP_Init+0x268>)
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009f4e:	2100      	movs	r1, #0
 8009f50:	2000      	movs	r0, #0
 8009f52:	f003 fdf3 	bl	800db3c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009f56:	4b82      	ldr	r3, [pc, #520]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	061a      	lsls	r2, r3, #24
 8009f5c:	4b80      	ldr	r3, [pc, #512]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f5e:	785b      	ldrb	r3, [r3, #1]
 8009f60:	041b      	lsls	r3, r3, #16
 8009f62:	431a      	orrs	r2, r3
 8009f64:	4b7e      	ldr	r3, [pc, #504]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f66:	789b      	ldrb	r3, [r3, #2]
 8009f68:	021b      	lsls	r3, r3, #8
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	4a7c      	ldr	r2, [pc, #496]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f6e:	78d2      	ldrb	r2, [r2, #3]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	061a      	lsls	r2, r3, #24
 8009f74:	4b7a      	ldr	r3, [pc, #488]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	0619      	lsls	r1, r3, #24
 8009f7a:	4b79      	ldr	r3, [pc, #484]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f7c:	785b      	ldrb	r3, [r3, #1]
 8009f7e:	041b      	lsls	r3, r3, #16
 8009f80:	4319      	orrs	r1, r3
 8009f82:	4b77      	ldr	r3, [pc, #476]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f84:	789b      	ldrb	r3, [r3, #2]
 8009f86:	021b      	lsls	r3, r3, #8
 8009f88:	430b      	orrs	r3, r1
 8009f8a:	4975      	ldr	r1, [pc, #468]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f8c:	78c9      	ldrb	r1, [r1, #3]
 8009f8e:	430b      	orrs	r3, r1
 8009f90:	021b      	lsls	r3, r3, #8
 8009f92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f96:	431a      	orrs	r2, r3
 8009f98:	4b71      	ldr	r3, [pc, #452]	; (800a160 <MX_LWIP_Init+0x260>)
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	0619      	lsls	r1, r3, #24
 8009f9e:	4b70      	ldr	r3, [pc, #448]	; (800a160 <MX_LWIP_Init+0x260>)
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	041b      	lsls	r3, r3, #16
 8009fa4:	4319      	orrs	r1, r3
 8009fa6:	4b6e      	ldr	r3, [pc, #440]	; (800a160 <MX_LWIP_Init+0x260>)
 8009fa8:	789b      	ldrb	r3, [r3, #2]
 8009faa:	021b      	lsls	r3, r3, #8
 8009fac:	430b      	orrs	r3, r1
 8009fae:	496c      	ldr	r1, [pc, #432]	; (800a160 <MX_LWIP_Init+0x260>)
 8009fb0:	78c9      	ldrb	r1, [r1, #3]
 8009fb2:	430b      	orrs	r3, r1
 8009fb4:	0a1b      	lsrs	r3, r3, #8
 8009fb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009fba:	431a      	orrs	r2, r3
 8009fbc:	4b68      	ldr	r3, [pc, #416]	; (800a160 <MX_LWIP_Init+0x260>)
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	0619      	lsls	r1, r3, #24
 8009fc2:	4b67      	ldr	r3, [pc, #412]	; (800a160 <MX_LWIP_Init+0x260>)
 8009fc4:	785b      	ldrb	r3, [r3, #1]
 8009fc6:	041b      	lsls	r3, r3, #16
 8009fc8:	4319      	orrs	r1, r3
 8009fca:	4b65      	ldr	r3, [pc, #404]	; (800a160 <MX_LWIP_Init+0x260>)
 8009fcc:	789b      	ldrb	r3, [r3, #2]
 8009fce:	021b      	lsls	r3, r3, #8
 8009fd0:	430b      	orrs	r3, r1
 8009fd2:	4963      	ldr	r1, [pc, #396]	; (800a160 <MX_LWIP_Init+0x260>)
 8009fd4:	78c9      	ldrb	r1, [r1, #3]
 8009fd6:	430b      	orrs	r3, r1
 8009fd8:	0e1b      	lsrs	r3, r3, #24
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	4a63      	ldr	r2, [pc, #396]	; (800a16c <MX_LWIP_Init+0x26c>)
 8009fde:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009fe0:	4b60      	ldr	r3, [pc, #384]	; (800a164 <MX_LWIP_Init+0x264>)
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	061a      	lsls	r2, r3, #24
 8009fe6:	4b5f      	ldr	r3, [pc, #380]	; (800a164 <MX_LWIP_Init+0x264>)
 8009fe8:	785b      	ldrb	r3, [r3, #1]
 8009fea:	041b      	lsls	r3, r3, #16
 8009fec:	431a      	orrs	r2, r3
 8009fee:	4b5d      	ldr	r3, [pc, #372]	; (800a164 <MX_LWIP_Init+0x264>)
 8009ff0:	789b      	ldrb	r3, [r3, #2]
 8009ff2:	021b      	lsls	r3, r3, #8
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	4a5b      	ldr	r2, [pc, #364]	; (800a164 <MX_LWIP_Init+0x264>)
 8009ff8:	78d2      	ldrb	r2, [r2, #3]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	061a      	lsls	r2, r3, #24
 8009ffe:	4b59      	ldr	r3, [pc, #356]	; (800a164 <MX_LWIP_Init+0x264>)
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	0619      	lsls	r1, r3, #24
 800a004:	4b57      	ldr	r3, [pc, #348]	; (800a164 <MX_LWIP_Init+0x264>)
 800a006:	785b      	ldrb	r3, [r3, #1]
 800a008:	041b      	lsls	r3, r3, #16
 800a00a:	4319      	orrs	r1, r3
 800a00c:	4b55      	ldr	r3, [pc, #340]	; (800a164 <MX_LWIP_Init+0x264>)
 800a00e:	789b      	ldrb	r3, [r3, #2]
 800a010:	021b      	lsls	r3, r3, #8
 800a012:	430b      	orrs	r3, r1
 800a014:	4953      	ldr	r1, [pc, #332]	; (800a164 <MX_LWIP_Init+0x264>)
 800a016:	78c9      	ldrb	r1, [r1, #3]
 800a018:	430b      	orrs	r3, r1
 800a01a:	021b      	lsls	r3, r3, #8
 800a01c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a020:	431a      	orrs	r2, r3
 800a022:	4b50      	ldr	r3, [pc, #320]	; (800a164 <MX_LWIP_Init+0x264>)
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	0619      	lsls	r1, r3, #24
 800a028:	4b4e      	ldr	r3, [pc, #312]	; (800a164 <MX_LWIP_Init+0x264>)
 800a02a:	785b      	ldrb	r3, [r3, #1]
 800a02c:	041b      	lsls	r3, r3, #16
 800a02e:	4319      	orrs	r1, r3
 800a030:	4b4c      	ldr	r3, [pc, #304]	; (800a164 <MX_LWIP_Init+0x264>)
 800a032:	789b      	ldrb	r3, [r3, #2]
 800a034:	021b      	lsls	r3, r3, #8
 800a036:	430b      	orrs	r3, r1
 800a038:	494a      	ldr	r1, [pc, #296]	; (800a164 <MX_LWIP_Init+0x264>)
 800a03a:	78c9      	ldrb	r1, [r1, #3]
 800a03c:	430b      	orrs	r3, r1
 800a03e:	0a1b      	lsrs	r3, r3, #8
 800a040:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a044:	431a      	orrs	r2, r3
 800a046:	4b47      	ldr	r3, [pc, #284]	; (800a164 <MX_LWIP_Init+0x264>)
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	0619      	lsls	r1, r3, #24
 800a04c:	4b45      	ldr	r3, [pc, #276]	; (800a164 <MX_LWIP_Init+0x264>)
 800a04e:	785b      	ldrb	r3, [r3, #1]
 800a050:	041b      	lsls	r3, r3, #16
 800a052:	4319      	orrs	r1, r3
 800a054:	4b43      	ldr	r3, [pc, #268]	; (800a164 <MX_LWIP_Init+0x264>)
 800a056:	789b      	ldrb	r3, [r3, #2]
 800a058:	021b      	lsls	r3, r3, #8
 800a05a:	430b      	orrs	r3, r1
 800a05c:	4941      	ldr	r1, [pc, #260]	; (800a164 <MX_LWIP_Init+0x264>)
 800a05e:	78c9      	ldrb	r1, [r1, #3]
 800a060:	430b      	orrs	r3, r1
 800a062:	0e1b      	lsrs	r3, r3, #24
 800a064:	4313      	orrs	r3, r2
 800a066:	4a42      	ldr	r2, [pc, #264]	; (800a170 <MX_LWIP_Init+0x270>)
 800a068:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a06a:	4b3f      	ldr	r3, [pc, #252]	; (800a168 <MX_LWIP_Init+0x268>)
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	061a      	lsls	r2, r3, #24
 800a070:	4b3d      	ldr	r3, [pc, #244]	; (800a168 <MX_LWIP_Init+0x268>)
 800a072:	785b      	ldrb	r3, [r3, #1]
 800a074:	041b      	lsls	r3, r3, #16
 800a076:	431a      	orrs	r2, r3
 800a078:	4b3b      	ldr	r3, [pc, #236]	; (800a168 <MX_LWIP_Init+0x268>)
 800a07a:	789b      	ldrb	r3, [r3, #2]
 800a07c:	021b      	lsls	r3, r3, #8
 800a07e:	4313      	orrs	r3, r2
 800a080:	4a39      	ldr	r2, [pc, #228]	; (800a168 <MX_LWIP_Init+0x268>)
 800a082:	78d2      	ldrb	r2, [r2, #3]
 800a084:	4313      	orrs	r3, r2
 800a086:	061a      	lsls	r2, r3, #24
 800a088:	4b37      	ldr	r3, [pc, #220]	; (800a168 <MX_LWIP_Init+0x268>)
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	0619      	lsls	r1, r3, #24
 800a08e:	4b36      	ldr	r3, [pc, #216]	; (800a168 <MX_LWIP_Init+0x268>)
 800a090:	785b      	ldrb	r3, [r3, #1]
 800a092:	041b      	lsls	r3, r3, #16
 800a094:	4319      	orrs	r1, r3
 800a096:	4b34      	ldr	r3, [pc, #208]	; (800a168 <MX_LWIP_Init+0x268>)
 800a098:	789b      	ldrb	r3, [r3, #2]
 800a09a:	021b      	lsls	r3, r3, #8
 800a09c:	430b      	orrs	r3, r1
 800a09e:	4932      	ldr	r1, [pc, #200]	; (800a168 <MX_LWIP_Init+0x268>)
 800a0a0:	78c9      	ldrb	r1, [r1, #3]
 800a0a2:	430b      	orrs	r3, r1
 800a0a4:	021b      	lsls	r3, r3, #8
 800a0a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0aa:	431a      	orrs	r2, r3
 800a0ac:	4b2e      	ldr	r3, [pc, #184]	; (800a168 <MX_LWIP_Init+0x268>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	0619      	lsls	r1, r3, #24
 800a0b2:	4b2d      	ldr	r3, [pc, #180]	; (800a168 <MX_LWIP_Init+0x268>)
 800a0b4:	785b      	ldrb	r3, [r3, #1]
 800a0b6:	041b      	lsls	r3, r3, #16
 800a0b8:	4319      	orrs	r1, r3
 800a0ba:	4b2b      	ldr	r3, [pc, #172]	; (800a168 <MX_LWIP_Init+0x268>)
 800a0bc:	789b      	ldrb	r3, [r3, #2]
 800a0be:	021b      	lsls	r3, r3, #8
 800a0c0:	430b      	orrs	r3, r1
 800a0c2:	4929      	ldr	r1, [pc, #164]	; (800a168 <MX_LWIP_Init+0x268>)
 800a0c4:	78c9      	ldrb	r1, [r1, #3]
 800a0c6:	430b      	orrs	r3, r1
 800a0c8:	0a1b      	lsrs	r3, r3, #8
 800a0ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a0ce:	431a      	orrs	r2, r3
 800a0d0:	4b25      	ldr	r3, [pc, #148]	; (800a168 <MX_LWIP_Init+0x268>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	0619      	lsls	r1, r3, #24
 800a0d6:	4b24      	ldr	r3, [pc, #144]	; (800a168 <MX_LWIP_Init+0x268>)
 800a0d8:	785b      	ldrb	r3, [r3, #1]
 800a0da:	041b      	lsls	r3, r3, #16
 800a0dc:	4319      	orrs	r1, r3
 800a0de:	4b22      	ldr	r3, [pc, #136]	; (800a168 <MX_LWIP_Init+0x268>)
 800a0e0:	789b      	ldrb	r3, [r3, #2]
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	430b      	orrs	r3, r1
 800a0e6:	4920      	ldr	r1, [pc, #128]	; (800a168 <MX_LWIP_Init+0x268>)
 800a0e8:	78c9      	ldrb	r1, [r1, #3]
 800a0ea:	430b      	orrs	r3, r1
 800a0ec:	0e1b      	lsrs	r3, r3, #24
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	4a20      	ldr	r2, [pc, #128]	; (800a174 <MX_LWIP_Init+0x274>)
 800a0f2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a0f4:	4b20      	ldr	r3, [pc, #128]	; (800a178 <MX_LWIP_Init+0x278>)
 800a0f6:	9302      	str	r3, [sp, #8]
 800a0f8:	4b20      	ldr	r3, [pc, #128]	; (800a17c <MX_LWIP_Init+0x27c>)
 800a0fa:	9301      	str	r3, [sp, #4]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	4b1c      	ldr	r3, [pc, #112]	; (800a174 <MX_LWIP_Init+0x274>)
 800a102:	4a1b      	ldr	r2, [pc, #108]	; (800a170 <MX_LWIP_Init+0x270>)
 800a104:	4919      	ldr	r1, [pc, #100]	; (800a16c <MX_LWIP_Init+0x26c>)
 800a106:	481e      	ldr	r0, [pc, #120]	; (800a180 <MX_LWIP_Init+0x280>)
 800a108:	f004 fb9a 	bl	800e840 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a10c:	481c      	ldr	r0, [pc, #112]	; (800a180 <MX_LWIP_Init+0x280>)
 800a10e:	f004 fd49 	bl	800eba4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a112:	4b1b      	ldr	r3, [pc, #108]	; (800a180 <MX_LWIP_Init+0x280>)
 800a114:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a118:	089b      	lsrs	r3, r3, #2
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a124:	4816      	ldr	r0, [pc, #88]	; (800a180 <MX_LWIP_Init+0x280>)
 800a126:	f004 fd4d 	bl	800ebc4 <netif_set_up>
 800a12a:	e002      	b.n	800a132 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a12c:	4814      	ldr	r0, [pc, #80]	; (800a180 <MX_LWIP_Init+0x280>)
 800a12e:	f004 fdb5 	bl	800ec9c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a132:	4914      	ldr	r1, [pc, #80]	; (800a184 <MX_LWIP_Init+0x284>)
 800a134:	4812      	ldr	r0, [pc, #72]	; (800a180 <MX_LWIP_Init+0x280>)
 800a136:	f004 fe47 	bl	800edc8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800a13a:	4b13      	ldr	r3, [pc, #76]	; (800a188 <MX_LWIP_Init+0x288>)
 800a13c:	1d3c      	adds	r4, r7, #4
 800a13e:	461d      	mov	r5, r3
 800a140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a144:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a148:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800a14c:	1d3b      	adds	r3, r7, #4
 800a14e:	490c      	ldr	r1, [pc, #48]	; (800a180 <MX_LWIP_Init+0x280>)
 800a150:	4618      	mov	r0, r3
 800a152:	f000 fcd8 	bl	800ab06 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a156:	bf00      	nop
 800a158:	3720      	adds	r7, #32
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bdb0      	pop	{r4, r5, r7, pc}
 800a15e:	bf00      	nop
 800a160:	24004588 	.word	0x24004588
 800a164:	24004584 	.word	0x24004584
 800a168:	24004548 	.word	0x24004548
 800a16c:	24004580 	.word	0x24004580
 800a170:	2400458c 	.word	0x2400458c
 800a174:	24004590 	.word	0x24004590
 800a178:	0800da79 	.word	0x0800da79
 800a17c:	0800a851 	.word	0x0800a851
 800a180:	2400454c 	.word	0x2400454c
 800a184:	0800a18d 	.word	0x0800a18d
 800a188:	08019cc8 	.word	0x08019cc8

0800a18c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08e      	sub	sp, #56	; 0x38
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	605a      	str	r2, [r3, #4]
 800a1b2:	609a      	str	r2, [r3, #8]
 800a1b4:	60da      	str	r2, [r3, #12]
 800a1b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a5d      	ldr	r2, [pc, #372]	; (800a334 <HAL_ETH_MspInit+0x194>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	f040 80b3 	bne.w	800a32a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a1c4:	4b5c      	ldr	r3, [pc, #368]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a1c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a1ca:	4a5b      	ldr	r2, [pc, #364]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a1cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a1d4:	4b58      	ldr	r3, [pc, #352]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a1d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a1da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1de:	623b      	str	r3, [r7, #32]
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a1e2:	4b55      	ldr	r3, [pc, #340]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a1e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a1e8:	4a53      	ldr	r2, [pc, #332]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a1ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a1f2:	4b51      	ldr	r3, [pc, #324]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a1f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a1f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1fc:	61fb      	str	r3, [r7, #28]
 800a1fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a200:	4b4d      	ldr	r3, [pc, #308]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a206:	4a4c      	ldr	r2, [pc, #304]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a20c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a210:	4b49      	ldr	r3, [pc, #292]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a212:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a21a:	61bb      	str	r3, [r7, #24]
 800a21c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a21e:	4b46      	ldr	r3, [pc, #280]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a224:	4a44      	ldr	r2, [pc, #272]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a226:	f043 0304 	orr.w	r3, r3, #4
 800a22a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a22e:	4b42      	ldr	r3, [pc, #264]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a234:	f003 0304 	and.w	r3, r3, #4
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a23c:	4b3e      	ldr	r3, [pc, #248]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a23e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a242:	4a3d      	ldr	r2, [pc, #244]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a244:	f043 0301 	orr.w	r3, r3, #1
 800a248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a24c:	4b3a      	ldr	r3, [pc, #232]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a24e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	613b      	str	r3, [r7, #16]
 800a258:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a25a:	4b37      	ldr	r3, [pc, #220]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a25c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a260:	4a35      	ldr	r2, [pc, #212]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a262:	f043 0302 	orr.w	r3, r3, #2
 800a266:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a26a:	4b33      	ldr	r3, [pc, #204]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a26c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a270:	f003 0302 	and.w	r3, r3, #2
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a278:	4b2f      	ldr	r3, [pc, #188]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a27a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a27e:	4a2e      	ldr	r2, [pc, #184]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a284:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a288:	4b2b      	ldr	r3, [pc, #172]	; (800a338 <HAL_ETH_MspInit+0x198>)
 800a28a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a292:	60bb      	str	r3, [r7, #8]
 800a294:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a296:	2332      	movs	r3, #50	; 0x32
 800a298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a29a:	2302      	movs	r3, #2
 800a29c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a2a6:	230b      	movs	r3, #11
 800a2a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	4822      	ldr	r0, [pc, #136]	; (800a33c <HAL_ETH_MspInit+0x19c>)
 800a2b2:	f7fb f815 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a2b6:	2386      	movs	r3, #134	; 0x86
 800a2b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a2c6:	230b      	movs	r3, #11
 800a2c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	481b      	ldr	r0, [pc, #108]	; (800a340 <HAL_ETH_MspInit+0x1a0>)
 800a2d2:	f7fb f805 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a2d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a2e8:	230b      	movs	r3, #11
 800a2ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a2ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	4814      	ldr	r0, [pc, #80]	; (800a344 <HAL_ETH_MspInit+0x1a4>)
 800a2f4:	f7fa fff4 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a2f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a2fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2fe:	2302      	movs	r3, #2
 800a300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a302:	2300      	movs	r3, #0
 800a304:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a306:	2300      	movs	r3, #0
 800a308:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a30a:	230b      	movs	r3, #11
 800a30c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a30e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a312:	4619      	mov	r1, r3
 800a314:	480c      	ldr	r0, [pc, #48]	; (800a348 <HAL_ETH_MspInit+0x1a8>)
 800a316:	f7fa ffe3 	bl	80052e0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a31a:	2200      	movs	r2, #0
 800a31c:	2105      	movs	r1, #5
 800a31e:	203d      	movs	r0, #61	; 0x3d
 800a320:	f7f8 fb04 	bl	800292c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a324:	203d      	movs	r0, #61	; 0x3d
 800a326:	f7f8 fb1b 	bl	8002960 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a32a:	bf00      	nop
 800a32c:	3738      	adds	r7, #56	; 0x38
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	40028000 	.word	0x40028000
 800a338:	58024400 	.word	0x58024400
 800a33c:	58020800 	.word	0x58020800
 800a340:	58020000 	.word	0x58020000
 800a344:	58020400 	.word	0x58020400
 800a348:	58021800 	.word	0x58021800

0800a34c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a354:	4b04      	ldr	r3, [pc, #16]	; (800a368 <HAL_ETH_RxCpltCallback+0x1c>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 fd51 	bl	800ae00 <osSemaphoreRelease>
}
 800a35e:	bf00      	nop
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	2400031c 	.word	0x2400031c

0800a36c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a36c:	b5b0      	push	{r4, r5, r7, lr}
 800a36e:	b0ac      	sub	sp, #176	; 0xb0
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800a380:	2300      	movs	r3, #0
 800a382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a386:	4b91      	ldr	r3, [pc, #580]	; (800a5cc <low_level_init+0x260>)
 800a388:	4a91      	ldr	r2, [pc, #580]	; (800a5d0 <low_level_init+0x264>)
 800a38a:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a38c:	2300      	movs	r3, #0
 800a38e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800a392:	2380      	movs	r3, #128	; 0x80
 800a394:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800a398:	23e1      	movs	r3, #225	; 0xe1
 800a39a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a3b0:	4a86      	ldr	r2, [pc, #536]	; (800a5cc <low_level_init+0x260>)
 800a3b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a3b6:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a3b8:	4b84      	ldr	r3, [pc, #528]	; (800a5cc <low_level_init+0x260>)
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a3be:	4b83      	ldr	r3, [pc, #524]	; (800a5cc <low_level_init+0x260>)
 800a3c0:	4a84      	ldr	r2, [pc, #528]	; (800a5d4 <low_level_init+0x268>)
 800a3c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a3c4:	4b81      	ldr	r3, [pc, #516]	; (800a5cc <low_level_init+0x260>)
 800a3c6:	4a84      	ldr	r2, [pc, #528]	; (800a5d8 <low_level_init+0x26c>)
 800a3c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800a3ca:	4b80      	ldr	r3, [pc, #512]	; (800a5cc <low_level_init+0x260>)
 800a3cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a3d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a3d2:	487e      	ldr	r0, [pc, #504]	; (800a5cc <low_level_init+0x260>)
 800a3d4:	f7f8 fb4e 	bl	8002a74 <HAL_ETH_Init>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a3de:	2234      	movs	r2, #52	; 0x34
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	487e      	ldr	r0, [pc, #504]	; (800a5dc <low_level_init+0x270>)
 800a3e4:	f00e fb9a 	bl	8018b1c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a3e8:	4b7c      	ldr	r3, [pc, #496]	; (800a5dc <low_level_init+0x270>)
 800a3ea:	2221      	movs	r2, #33	; 0x21
 800a3ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a3ee:	4b7b      	ldr	r3, [pc, #492]	; (800a5dc <low_level_init+0x270>)
 800a3f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a3f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a3f6:	4b79      	ldr	r3, [pc, #484]	; (800a5dc <low_level_init+0x270>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a3fc:	4878      	ldr	r0, [pc, #480]	; (800a5e0 <low_level_init+0x274>)
 800a3fe:	f004 f8d9 	bl	800e5b4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2206      	movs	r2, #6
 800a406:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a40a:	4b70      	ldr	r3, [pc, #448]	; (800a5cc <low_level_init+0x260>)
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	781a      	ldrb	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a416:	4b6d      	ldr	r3, [pc, #436]	; (800a5cc <low_level_init+0x260>)
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	785a      	ldrb	r2, [r3, #1]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a422:	4b6a      	ldr	r3, [pc, #424]	; (800a5cc <low_level_init+0x260>)
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	789a      	ldrb	r2, [r3, #2]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a42e:	4b67      	ldr	r3, [pc, #412]	; (800a5cc <low_level_init+0x260>)
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	78da      	ldrb	r2, [r3, #3]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a43a:	4b64      	ldr	r3, [pc, #400]	; (800a5cc <low_level_init+0x260>)
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	791a      	ldrb	r2, [r3, #4]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a446:	4b61      	ldr	r3, [pc, #388]	; (800a5cc <low_level_init+0x260>)
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	795a      	ldrb	r2, [r3, #5]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a458:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a460:	f043 030a 	orr.w	r3, r3, #10
 800a464:	b2da      	uxtb	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a46c:	2300      	movs	r3, #0
 800a46e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a472:	e012      	b.n	800a49a <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800a474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a478:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a47c:	fb02 f303 	mul.w	r3, r2, r3
 800a480:	4a58      	ldr	r2, [pc, #352]	; (800a5e4 <low_level_init+0x278>)
 800a482:	441a      	add	r2, r3
 800a484:	2300      	movs	r3, #0
 800a486:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a48a:	4850      	ldr	r0, [pc, #320]	; (800a5cc <low_level_init+0x260>)
 800a48c:	f7f8 fbcc 	bl	8002c28 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a494:	3301      	adds	r3, #1
 800a496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a49a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	d9e8      	bls.n	800a474 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a4aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a4ae:	2101      	movs	r1, #1
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f000 fc25 	bl	800ad00 <osSemaphoreCreate>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	4a4b      	ldr	r2, [pc, #300]	; (800a5e8 <low_level_init+0x27c>)
 800a4ba:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a4bc:	4b4b      	ldr	r3, [pc, #300]	; (800a5ec <low_level_init+0x280>)
 800a4be:	f107 040c 	add.w	r4, r7, #12
 800a4c2:	461d      	mov	r5, r3
 800a4c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a4d0:	f107 030c 	add.w	r3, r7, #12
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 fb15 	bl	800ab06 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a4dc:	4944      	ldr	r1, [pc, #272]	; (800a5f0 <low_level_init+0x284>)
 800a4de:	4845      	ldr	r0, [pc, #276]	; (800a5f4 <low_level_init+0x288>)
 800a4e0:	f7f7 ff77 	bl	80023d2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a4e4:	4843      	ldr	r0, [pc, #268]	; (800a5f4 <low_level_init+0x288>)
 800a4e6:	f7f7 ffa6 	bl	8002436 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a4ea:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d165      	bne.n	800a5be <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a4f2:	4840      	ldr	r0, [pc, #256]	; (800a5f4 <low_level_init+0x288>)
 800a4f4:	f7f8 f847 	bl	8002586 <LAN8742_GetLinkState>
 800a4f8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a4fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a500:	2b01      	cmp	r3, #1
 800a502:	dc06      	bgt.n	800a512 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f004 fc2f 	bl	800ed68 <netif_set_link_down>
      netif_set_down(netif);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f004 fbc6 	bl	800ec9c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a510:	e057      	b.n	800a5c2 <low_level_init+0x256>
 800a512:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a516:	3b02      	subs	r3, #2
 800a518:	2b03      	cmp	r3, #3
 800a51a:	d82b      	bhi.n	800a574 <low_level_init+0x208>
 800a51c:	a201      	add	r2, pc, #4	; (adr r2, 800a524 <low_level_init+0x1b8>)
 800a51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a522:	bf00      	nop
 800a524:	0800a535 	.word	0x0800a535
 800a528:	0800a547 	.word	0x0800a547
 800a52c:	0800a557 	.word	0x0800a557
 800a530:	0800a567 	.word	0x0800a567
        duplex = ETH_FULLDUPLEX_MODE;
 800a534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a538:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a53c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a540:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a544:	e01f      	b.n	800a586 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a546:	2300      	movs	r3, #0
 800a548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a54c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a554:	e017      	b.n	800a586 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a55a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a55e:	2300      	movs	r3, #0
 800a560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a564:	e00f      	b.n	800a586 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a566:	2300      	movs	r3, #0
 800a568:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a56c:	2300      	movs	r3, #0
 800a56e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a572:	e008      	b.n	800a586 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a57c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a580:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a584:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a586:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a58a:	4619      	mov	r1, r3
 800a58c:	480f      	ldr	r0, [pc, #60]	; (800a5cc <low_level_init+0x260>)
 800a58e:	f7f9 f91d 	bl	80037cc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a596:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800a598:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a59c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a59e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	4809      	ldr	r0, [pc, #36]	; (800a5cc <low_level_init+0x260>)
 800a5a6:	f7f9 fae5 	bl	8003b74 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a5aa:	4808      	ldr	r0, [pc, #32]	; (800a5cc <low_level_init+0x260>)
 800a5ac:	f7f8 fb7d 	bl	8002caa <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f004 fb07 	bl	800ebc4 <netif_set_up>
    netif_set_link_up(netif);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f004 fba2 	bl	800ed00 <netif_set_link_up>
}
 800a5bc:	e001      	b.n	800a5c2 <low_level_init+0x256>
    Error_Handler();
 800a5be:	f7f7 f879 	bl	80016b4 <Error_Handler>
}
 800a5c2:	bf00      	nop
 800a5c4:	37b0      	adds	r7, #176	; 0xb0
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bdb0      	pop	{r4, r5, r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	24004680 	.word	0x24004680
 800a5d0:	40028000 	.word	0x40028000
 800a5d4:	30000080 	.word	0x30000080
 800a5d8:	30000000 	.word	0x30000000
 800a5dc:	24004708 	.word	0x24004708
 800a5e0:	0801dd70 	.word	0x0801dd70
 800a5e4:	30000100 	.word	0x30000100
 800a5e8:	2400031c 	.word	0x2400031c
 800a5ec:	08019cec 	.word	0x08019cec
 800a5f0:	24000020 	.word	0x24000020
 800a5f4:	24004660 	.word	0x24004660

0800a5f8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b092      	sub	sp, #72	; 0x48
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800a602:	2300      	movs	r3, #0
 800a604:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800a606:	2300      	movs	r3, #0
 800a608:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a60c:	f107 030c 	add.w	r3, r7, #12
 800a610:	2230      	movs	r2, #48	; 0x30
 800a612:	2100      	movs	r1, #0
 800a614:	4618      	mov	r0, r3
 800a616:	f00e fa81 	bl	8018b1c <memset>

  for(q = p; q != NULL; q = q->next)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	643b      	str	r3, [r7, #64]	; 0x40
 800a61e:	e049      	b.n	800a6b4 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a622:	2b03      	cmp	r3, #3
 800a624:	d902      	bls.n	800a62c <low_level_output+0x34>
      return ERR_IF;
 800a626:	f06f 030b 	mvn.w	r3, #11
 800a62a:	e056      	b.n	800a6da <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800a62c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a62e:	6859      	ldr	r1, [r3, #4]
 800a630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a632:	4613      	mov	r3, r2
 800a634:	005b      	lsls	r3, r3, #1
 800a636:	4413      	add	r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a63e:	4413      	add	r3, r2
 800a640:	3b3c      	subs	r3, #60	; 0x3c
 800a642:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a646:	895b      	ldrh	r3, [r3, #10]
 800a648:	4619      	mov	r1, r3
 800a64a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a64c:	4613      	mov	r3, r2
 800a64e:	005b      	lsls	r3, r3, #1
 800a650:	4413      	add	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a658:	4413      	add	r3, r2
 800a65a:	3b38      	subs	r3, #56	; 0x38
 800a65c:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a65e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a660:	2b00      	cmp	r3, #0
 800a662:	d012      	beq.n	800a68a <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a666:	1e5a      	subs	r2, r3, #1
 800a668:	f107 000c 	add.w	r0, r7, #12
 800a66c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a66e:	460b      	mov	r3, r1
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	440b      	add	r3, r1
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	18c1      	adds	r1, r0, r3
 800a678:	4613      	mov	r3, r2
 800a67a:	005b      	lsls	r3, r3, #1
 800a67c:	4413      	add	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a684:	4413      	add	r3, r2
 800a686:	3b34      	subs	r3, #52	; 0x34
 800a688:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a68a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10a      	bne.n	800a6a8 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800a692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a694:	4613      	mov	r3, r2
 800a696:	005b      	lsls	r3, r3, #1
 800a698:	4413      	add	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a6a0:	4413      	add	r3, r2
 800a6a2:	3b34      	subs	r3, #52	; 0x34
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	643b      	str	r3, [r7, #64]	; 0x40
 800a6b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1b2      	bne.n	800a620 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	891b      	ldrh	r3, [r3, #8]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	4b08      	ldr	r3, [pc, #32]	; (800a6e4 <low_level_output+0xec>)
 800a6c2:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a6c4:	4a07      	ldr	r2, [pc, #28]	; (800a6e4 <low_level_output+0xec>)
 800a6c6:	f107 030c 	add.w	r3, r7, #12
 800a6ca:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a6cc:	2214      	movs	r2, #20
 800a6ce:	4905      	ldr	r1, [pc, #20]	; (800a6e4 <low_level_output+0xec>)
 800a6d0:	4805      	ldr	r0, [pc, #20]	; (800a6e8 <low_level_output+0xf0>)
 800a6d2:	f7f8 fbe9 	bl	8002ea8 <HAL_ETH_Transmit>

  return errval;
 800a6d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3748      	adds	r7, #72	; 0x48
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	24004708 	.word	0x24004708
 800a6e8:	24004680 	.word	0x24004680

0800a6ec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b098      	sub	sp, #96	; 0x60
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60bb      	str	r3, [r7, #8]
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a700:	f107 030c 	add.w	r3, r7, #12
 800a704:	2230      	movs	r2, #48	; 0x30
 800a706:	2100      	movs	r1, #0
 800a708:	4618      	mov	r0, r3
 800a70a:	f00e fa07 	bl	8018b1c <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a70e:	2300      	movs	r3, #0
 800a710:	653b      	str	r3, [r7, #80]	; 0x50
 800a712:	e015      	b.n	800a740 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800a714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	f107 010c 	add.w	r1, r7, #12
 800a71c:	4613      	mov	r3, r2
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	4413      	add	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4419      	add	r1, r3
 800a726:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a728:	4613      	mov	r3, r2
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a734:	4413      	add	r3, r2
 800a736:	3b44      	subs	r3, #68	; 0x44
 800a738:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a73a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a73c:	3301      	adds	r3, #1
 800a73e:	653b      	str	r3, [r7, #80]	; 0x50
 800a740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a742:	2b02      	cmp	r3, #2
 800a744:	d9e6      	bls.n	800a714 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800a746:	f107 030c 	add.w	r3, r7, #12
 800a74a:	4619      	mov	r1, r3
 800a74c:	4828      	ldr	r0, [pc, #160]	; (800a7f0 <low_level_input+0x104>)
 800a74e:	f7f8 fd24 	bl	800319a <HAL_ETH_GetRxDataBuffer>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d145      	bne.n	800a7e4 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800a758:	f107 0308 	add.w	r3, r7, #8
 800a75c:	4619      	mov	r1, r3
 800a75e:	4824      	ldr	r0, [pc, #144]	; (800a7f0 <low_level_input+0x104>)
 800a760:	f7f8 fdb9 	bl	80032d6 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800a764:	4822      	ldr	r0, [pc, #136]	; (800a7f0 <low_level_input+0x104>)
 800a766:	f7f8 fde9 	bl	800333c <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a770:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800a772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a774:	2b00      	cmp	r3, #0
 800a776:	dd1d      	ble.n	800a7b4 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800a778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a77a:	f003 021f 	and.w	r2, r3, #31
 800a77e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a780:	4413      	add	r3, r2
 800a782:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800a784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a786:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800a788:	f3bf 8f4f 	dsb	sy
}
 800a78c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800a78e:	4a19      	ldr	r2, [pc, #100]	; (800a7f4 <low_level_input+0x108>)
 800a790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a792:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800a796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a798:	3320      	adds	r3, #32
 800a79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800a79c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a79e:	3b20      	subs	r3, #32
 800a7a0:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800a7a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dcf2      	bgt.n	800a78e <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800a7a8:	f3bf 8f4f 	dsb	sy
}
 800a7ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a7ae:	f3bf 8f6f 	isb	sy
}
 800a7b2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800a7b4:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a7b6:	4810      	ldr	r0, [pc, #64]	; (800a7f8 <low_level_input+0x10c>)
 800a7b8:	f003 ff78 	bl	800e6ac <memp_malloc_pool>
 800a7bc:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800a7be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00f      	beq.n	800a7e4 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800a7c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7c6:	4a0d      	ldr	r2, [pc, #52]	; (800a7fc <low_level_input+0x110>)
 800a7c8:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	b299      	uxth	r1, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	b292      	uxth	r2, r2
 800a7d4:	9201      	str	r2, [sp, #4]
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7da:	2241      	movs	r2, #65	; 0x41
 800a7dc:	2000      	movs	r0, #0
 800a7de:	f004 fce7 	bl	800f1b0 <pbuf_alloced_custom>
 800a7e2:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800a7e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3758      	adds	r7, #88	; 0x58
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	24004680 	.word	0x24004680
 800a7f4:	e000ed00 	.word	0xe000ed00
 800a7f8:	0801dd70 	.word	0x0801dd70
 800a7fc:	0800a8ad 	.word	0x0800a8ad

0800a800 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a80c:	4b0f      	ldr	r3, [pc, #60]	; (800a84c <ethernetif_input+0x4c>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f04f 31ff 	mov.w	r1, #4294967295
 800a814:	4618      	mov	r0, r3
 800a816:	f000 faa5 	bl	800ad64 <osSemaphoreWait>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1f5      	bne.n	800a80c <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f7ff ff63 	bl	800a6ec <low_level_input>
 800a826:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00a      	beq.n	800a844 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	68f9      	ldr	r1, [r7, #12]
 800a834:	68b8      	ldr	r0, [r7, #8]
 800a836:	4798      	blx	r3
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d002      	beq.n	800a844 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800a83e:	68b8      	ldr	r0, [r7, #8]
 800a840:	f004 fe70 	bl	800f524 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1ea      	bne.n	800a820 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a84a:	e7df      	b.n	800a80c <ethernetif_input+0xc>
 800a84c:	2400031c 	.word	0x2400031c

0800a850 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d106      	bne.n	800a86c <ethernetif_init+0x1c>
 800a85e:	4b0e      	ldr	r3, [pc, #56]	; (800a898 <ethernetif_init+0x48>)
 800a860:	f240 2249 	movw	r2, #585	; 0x249
 800a864:	490d      	ldr	r1, [pc, #52]	; (800a89c <ethernetif_init+0x4c>)
 800a866:	480e      	ldr	r0, [pc, #56]	; (800a8a0 <ethernetif_init+0x50>)
 800a868:	f00e f960 	bl	8018b2c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2273      	movs	r2, #115	; 0x73
 800a870:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2274      	movs	r2, #116	; 0x74
 800a878:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a09      	ldr	r2, [pc, #36]	; (800a8a4 <ethernetif_init+0x54>)
 800a880:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a08      	ldr	r2, [pc, #32]	; (800a8a8 <ethernetif_init+0x58>)
 800a886:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff fd6f 	bl	800a36c <low_level_init>

  return ERR_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	08019d08 	.word	0x08019d08
 800a89c:	08019d24 	.word	0x08019d24
 800a8a0:	08019d34 	.word	0x08019d34
 800a8a4:	08016a19 	.word	0x08016a19
 800a8a8:	0800a5f9 	.word	0x0800a5f9

0800a8ac <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a8b8:	68f9      	ldr	r1, [r7, #12]
 800a8ba:	4803      	ldr	r0, [pc, #12]	; (800a8c8 <pbuf_free_custom+0x1c>)
 800a8bc:	f003 ff6a 	bl	800e794 <memp_free_pool>
}
 800a8c0:	bf00      	nop
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	0801dd70 	.word	0x0801dd70

0800a8cc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a8d0:	f7f7 ff30 	bl	8002734 <HAL_GetTick>
 800a8d4:	4603      	mov	r3, r0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a8e0:	4802      	ldr	r0, [pc, #8]	; (800a8ec <ETH_PHY_IO_Init+0x10>)
 800a8e2:	f7f9 f961 	bl	8003ba8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	24004680 	.word	0x24004680

0800a8f0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	af00      	add	r7, sp, #0
  return 0;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	68f9      	ldr	r1, [r7, #12]
 800a912:	4807      	ldr	r0, [pc, #28]	; (800a930 <ETH_PHY_IO_ReadReg+0x30>)
 800a914:	f7f8 feb2 	bl	800367c <HAL_ETH_ReadPHYRegister>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d002      	beq.n	800a924 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a91e:	f04f 33ff 	mov.w	r3, #4294967295
 800a922:	e000      	b.n	800a926 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	24004680 	.word	0x24004680

0800a934 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	68f9      	ldr	r1, [r7, #12]
 800a946:	4807      	ldr	r0, [pc, #28]	; (800a964 <ETH_PHY_IO_WriteReg+0x30>)
 800a948:	f7f8 feec 	bl	8003724 <HAL_ETH_WritePHYRegister>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d002      	beq.n	800a958 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a952:	f04f 33ff 	mov.w	r3, #4294967295
 800a956:	e000      	b.n	800a95a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	24004680 	.word	0x24004680

0800a968 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a96c:	f7f7 fee2 	bl	8002734 <HAL_GetTick>
 800a970:	4603      	mov	r3, r0
}
 800a972:	4618      	mov	r0, r3
 800a974:	bd80      	pop	{r7, pc}
	...

0800a978 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b0a0      	sub	sp, #128	; 0x80
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800a980:	2300      	movs	r3, #0
 800a982:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a984:	2300      	movs	r3, #0
 800a986:	67bb      	str	r3, [r7, #120]	; 0x78
 800a988:	2300      	movs	r3, #0
 800a98a:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a990:	483a      	ldr	r0, [pc, #232]	; (800aa7c <ethernet_link_thread+0x104>)
 800a992:	f7f7 fdf8 	bl	8002586 <LAN8742_GetLinkState>
 800a996:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a99a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a99e:	089b      	lsrs	r3, r3, #2
 800a9a0:	f003 0301 	and.w	r3, r3, #1
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00c      	beq.n	800a9c4 <ethernet_link_thread+0x4c>
 800a9aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	dc09      	bgt.n	800a9c4 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 800a9b0:	4833      	ldr	r0, [pc, #204]	; (800aa80 <ethernet_link_thread+0x108>)
 800a9b2:	f7f8 f9ff 	bl	8002db4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a9b6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a9b8:	f004 f970 	bl	800ec9c <netif_set_down>
    netif_set_link_down(netif);
 800a9bc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a9be:	f004 f9d3 	bl	800ed68 <netif_set_link_down>
 800a9c2:	e056      	b.n	800aa72 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a9c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a9ca:	f003 0304 	and.w	r3, r3, #4
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d14f      	bne.n	800aa72 <ethernet_link_thread+0xfa>
 800a9d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	dd4c      	ble.n	800aa72 <ethernet_link_thread+0xfa>
 800a9d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9da:	3b02      	subs	r3, #2
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	d82b      	bhi.n	800aa38 <ethernet_link_thread+0xc0>
 800a9e0:	a201      	add	r2, pc, #4	; (adr r2, 800a9e8 <ethernet_link_thread+0x70>)
 800a9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e6:	bf00      	nop
 800a9e8:	0800a9f9 	.word	0x0800a9f9
 800a9ec:	0800aa0b 	.word	0x0800aa0b
 800a9f0:	0800aa1b 	.word	0x0800aa1b
 800a9f4:	0800aa2b 	.word	0x0800aa2b
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a9f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9fc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a9fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa02:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aa04:	2301      	movs	r3, #1
 800aa06:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aa08:	e017      	b.n	800aa3a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800aa0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa12:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aa14:	2301      	movs	r3, #1
 800aa16:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aa18:	e00f      	b.n	800aa3a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800aa1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa1e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aa20:	2300      	movs	r3, #0
 800aa22:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aa24:	2301      	movs	r3, #1
 800aa26:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aa28:	e007      	b.n	800aa3a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aa32:	2301      	movs	r3, #1
 800aa34:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aa36:	e000      	b.n	800aa3a <ethernet_link_thread+0xc2>
    default:
      break;
 800aa38:	bf00      	nop
    }

    if(linkchanged)
 800aa3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d018      	beq.n	800aa72 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800aa40:	f107 0308 	add.w	r3, r7, #8
 800aa44:	4619      	mov	r1, r3
 800aa46:	480e      	ldr	r0, [pc, #56]	; (800aa80 <ethernet_link_thread+0x108>)
 800aa48:	f7f8 fec0 	bl	80037cc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800aa4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa4e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800aa50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa52:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800aa54:	f107 0308 	add.w	r3, r7, #8
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4809      	ldr	r0, [pc, #36]	; (800aa80 <ethernet_link_thread+0x108>)
 800aa5c:	f7f9 f88a 	bl	8003b74 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800aa60:	4807      	ldr	r0, [pc, #28]	; (800aa80 <ethernet_link_thread+0x108>)
 800aa62:	f7f8 f922 	bl	8002caa <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800aa66:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800aa68:	f004 f8ac 	bl	800ebc4 <netif_set_up>
      netif_set_link_up(netif);
 800aa6c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800aa6e:	f004 f947 	bl	800ed00 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800aa72:	2064      	movs	r0, #100	; 0x64
 800aa74:	f000 f893 	bl	800ab9e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800aa78:	e78a      	b.n	800a990 <ethernet_link_thread+0x18>
 800aa7a:	bf00      	nop
 800aa7c:	24004660 	.word	0x24004660
 800aa80:	24004680 	.word	0x24004680

0800aa84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800aa92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa96:	2b84      	cmp	r3, #132	; 0x84
 800aa98:	d005      	beq.n	800aaa6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800aa9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	3303      	adds	r3, #3
 800aaa4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaba:	f3ef 8305 	mrs	r3, IPSR
 800aabe:	607b      	str	r3, [r7, #4]
  return(result);
 800aac0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	bf14      	ite	ne
 800aac6:	2301      	movne	r3, #1
 800aac8:	2300      	moveq	r3, #0
 800aaca:	b2db      	uxtb	r3, r3
}
 800aacc:	4618      	mov	r0, r3
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800aadc:	f001 fc5e 	bl	800c39c <vTaskStartScheduler>
  
  return osOK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800aaea:	f7ff ffe3 	bl	800aab4 <inHandlerMode>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d003      	beq.n	800aafc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800aaf4:	f001 fd6c 	bl	800c5d0 <xTaskGetTickCountFromISR>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	e002      	b.n	800ab02 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800aafc:	f001 fd58 	bl	800c5b0 <xTaskGetTickCount>
 800ab00:	4603      	mov	r3, r0
  }
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ab06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab08:	b089      	sub	sp, #36	; 0x24
 800ab0a:	af04      	add	r7, sp, #16
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d020      	beq.n	800ab5a <osThreadCreate+0x54>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d01c      	beq.n	800ab5a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685c      	ldr	r4, [r3, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681d      	ldr	r5, [r3, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	691e      	ldr	r6, [r3, #16]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7ff ffa6 	bl	800aa84 <makeFreeRtosPriority>
 800ab38:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab42:	9202      	str	r2, [sp, #8]
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	9100      	str	r1, [sp, #0]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	4632      	mov	r2, r6
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f001 fa5c 	bl	800c00c <xTaskCreateStatic>
 800ab54:	4603      	mov	r3, r0
 800ab56:	60fb      	str	r3, [r7, #12]
 800ab58:	e01c      	b.n	800ab94 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685c      	ldr	r4, [r3, #4]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab66:	b29e      	uxth	r6, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff ff88 	bl	800aa84 <makeFreeRtosPriority>
 800ab74:	4602      	mov	r2, r0
 800ab76:	f107 030c 	add.w	r3, r7, #12
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	9200      	str	r2, [sp, #0]
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	4632      	mov	r2, r6
 800ab82:	4629      	mov	r1, r5
 800ab84:	4620      	mov	r0, r4
 800ab86:	f001 fa9e 	bl	800c0c6 <xTaskCreate>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d001      	beq.n	800ab94 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ab90:	2300      	movs	r3, #0
 800ab92:	e000      	b.n	800ab96 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ab94:	68fb      	ldr	r3, [r7, #12]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab9e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d001      	beq.n	800abb4 <osDelay+0x16>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	e000      	b.n	800abb6 <osDelay+0x18>
 800abb4:	2301      	movs	r3, #1
 800abb6:	4618      	mov	r0, r3
 800abb8:	f001 fbbc 	bl	800c334 <vTaskDelay>
  
  return osOK;
 800abbc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b082      	sub	sp, #8
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d007      	beq.n	800abe6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	4619      	mov	r1, r3
 800abdc:	2001      	movs	r0, #1
 800abde:	f000 fc40 	bl	800b462 <xQueueCreateMutexStatic>
 800abe2:	4603      	mov	r3, r0
 800abe4:	e003      	b.n	800abee <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800abe6:	2001      	movs	r0, #1
 800abe8:	f000 fc23 	bl	800b432 <xQueueCreateMutex>
 800abec:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
	...

0800abf8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ac02:	2300      	movs	r3, #0
 800ac04:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <osMutexWait+0x18>
    return osErrorParameter;
 800ac0c:	2380      	movs	r3, #128	; 0x80
 800ac0e:	e03a      	b.n	800ac86 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ac10:	2300      	movs	r3, #0
 800ac12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1a:	d103      	bne.n	800ac24 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ac1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	e009      	b.n	800ac38 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d006      	beq.n	800ac38 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <osMutexWait+0x40>
      ticks = 1;
 800ac34:	2301      	movs	r3, #1
 800ac36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ac38:	f7ff ff3c 	bl	800aab4 <inHandlerMode>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d017      	beq.n	800ac72 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ac42:	f107 0308 	add.w	r3, r7, #8
 800ac46:	461a      	mov	r2, r3
 800ac48:	2100      	movs	r1, #0
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f001 f836 	bl	800bcbc <xQueueReceiveFromISR>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d001      	beq.n	800ac5a <osMutexWait+0x62>
      return osErrorOS;
 800ac56:	23ff      	movs	r3, #255	; 0xff
 800ac58:	e015      	b.n	800ac86 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d011      	beq.n	800ac84 <osMutexWait+0x8c>
 800ac60:	4b0b      	ldr	r3, [pc, #44]	; (800ac90 <osMutexWait+0x98>)
 800ac62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac66:	601a      	str	r2, [r3, #0]
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	e008      	b.n	800ac84 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ac72:	68f9      	ldr	r1, [r7, #12]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 ff15 	bl	800baa4 <xQueueSemaphoreTake>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d001      	beq.n	800ac84 <osMutexWait+0x8c>
    return osErrorOS;
 800ac80:	23ff      	movs	r3, #255	; 0xff
 800ac82:	e000      	b.n	800ac86 <osMutexWait+0x8e>
  }
  
  return osOK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	e000ed04 	.word	0xe000ed04

0800ac94 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800aca0:	2300      	movs	r3, #0
 800aca2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800aca4:	f7ff ff06 	bl	800aab4 <inHandlerMode>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d016      	beq.n	800acdc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800acae:	f107 0308 	add.w	r3, r7, #8
 800acb2:	4619      	mov	r1, r3
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fd88 	bl	800b7ca <xQueueGiveFromISR>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d001      	beq.n	800acc4 <osMutexRelease+0x30>
      return osErrorOS;
 800acc0:	23ff      	movs	r3, #255	; 0xff
 800acc2:	e017      	b.n	800acf4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d013      	beq.n	800acf2 <osMutexRelease+0x5e>
 800acca:	4b0c      	ldr	r3, [pc, #48]	; (800acfc <osMutexRelease+0x68>)
 800accc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	e00a      	b.n	800acf2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800acdc:	2300      	movs	r3, #0
 800acde:	2200      	movs	r2, #0
 800ace0:	2100      	movs	r1, #0
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 fbd8 	bl	800b498 <xQueueGenericSend>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b01      	cmp	r3, #1
 800acec:	d001      	beq.n	800acf2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800acee:	23ff      	movs	r3, #255	; 0xff
 800acf0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800acf2:	68fb      	ldr	r3, [r7, #12]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	e000ed04 	.word	0xe000ed04

0800ad00 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af02      	add	r7, sp, #8
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00f      	beq.n	800ad32 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d10a      	bne.n	800ad2e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	2203      	movs	r2, #3
 800ad1e:	9200      	str	r2, [sp, #0]
 800ad20:	2200      	movs	r2, #0
 800ad22:	2100      	movs	r1, #0
 800ad24:	2001      	movs	r0, #1
 800ad26:	f000 fa99 	bl	800b25c <xQueueGenericCreateStatic>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	e016      	b.n	800ad5c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e014      	b.n	800ad5c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d110      	bne.n	800ad5a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ad38:	2203      	movs	r2, #3
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	2001      	movs	r0, #1
 800ad3e:	f000 fb05 	bl	800b34c <xQueueGenericCreate>
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d005      	beq.n	800ad56 <osSemaphoreCreate+0x56>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	2100      	movs	r1, #0
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f000 fba1 	bl	800b498 <xQueueGenericSend>
      return sema;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	e000      	b.n	800ad5c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ad5a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ad6e:	2300      	movs	r3, #0
 800ad70:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d101      	bne.n	800ad7c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ad78:	2380      	movs	r3, #128	; 0x80
 800ad7a:	e03a      	b.n	800adf2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad86:	d103      	bne.n	800ad90 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ad88:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8c:	60fb      	str	r3, [r7, #12]
 800ad8e:	e009      	b.n	800ada4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d006      	beq.n	800ada4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <osSemaphoreWait+0x40>
      ticks = 1;
 800ada0:	2301      	movs	r3, #1
 800ada2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ada4:	f7ff fe86 	bl	800aab4 <inHandlerMode>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d017      	beq.n	800adde <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800adae:	f107 0308 	add.w	r3, r7, #8
 800adb2:	461a      	mov	r2, r3
 800adb4:	2100      	movs	r1, #0
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 ff80 	bl	800bcbc <xQueueReceiveFromISR>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d001      	beq.n	800adc6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800adc2:	23ff      	movs	r3, #255	; 0xff
 800adc4:	e015      	b.n	800adf2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d011      	beq.n	800adf0 <osSemaphoreWait+0x8c>
 800adcc:	4b0b      	ldr	r3, [pc, #44]	; (800adfc <osSemaphoreWait+0x98>)
 800adce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	e008      	b.n	800adf0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800adde:	68f9      	ldr	r1, [r7, #12]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fe5f 	bl	800baa4 <xQueueSemaphoreTake>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d001      	beq.n	800adf0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800adec:	23ff      	movs	r3, #255	; 0xff
 800adee:	e000      	b.n	800adf2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	e000ed04 	.word	0xe000ed04

0800ae00 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ae10:	f7ff fe50 	bl	800aab4 <inHandlerMode>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d016      	beq.n	800ae48 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ae1a:	f107 0308 	add.w	r3, r7, #8
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fcd2 	bl	800b7ca <xQueueGiveFromISR>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d001      	beq.n	800ae30 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ae2c:	23ff      	movs	r3, #255	; 0xff
 800ae2e:	e017      	b.n	800ae60 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d013      	beq.n	800ae5e <osSemaphoreRelease+0x5e>
 800ae36:	4b0c      	ldr	r3, [pc, #48]	; (800ae68 <osSemaphoreRelease+0x68>)
 800ae38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae3c:	601a      	str	r2, [r3, #0]
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	e00a      	b.n	800ae5e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ae48:	2300      	movs	r3, #0
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fb22 	bl	800b498 <xQueueGenericSend>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d001      	beq.n	800ae5e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ae5a:	23ff      	movs	r3, #255	; 0xff
 800ae5c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	e000ed04 	.word	0xe000ed04

0800ae6c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ae6c:	b590      	push	{r4, r7, lr}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af02      	add	r7, sp, #8
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d011      	beq.n	800aea2 <osMessageCreate+0x36>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00d      	beq.n	800aea2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6818      	ldr	r0, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6859      	ldr	r1, [r3, #4]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	689a      	ldr	r2, [r3, #8]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	2400      	movs	r4, #0
 800ae98:	9400      	str	r4, [sp, #0]
 800ae9a:	f000 f9df 	bl	800b25c <xQueueGenericCreateStatic>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	e008      	b.n	800aeb4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6818      	ldr	r0, [r3, #0]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	4619      	mov	r1, r3
 800aeae:	f000 fa4d 	bl	800b34c <xQueueGenericCreate>
 800aeb2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd90      	pop	{r4, r7, pc}

0800aebc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800aec8:	2300      	movs	r3, #0
 800aeca:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <osMessagePut+0x1e>
    ticks = 1;
 800aed6:	2301      	movs	r3, #1
 800aed8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800aeda:	f7ff fdeb 	bl	800aab4 <inHandlerMode>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d018      	beq.n	800af16 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800aee4:	f107 0210 	add.w	r2, r7, #16
 800aee8:	f107 0108 	add.w	r1, r7, #8
 800aeec:	2300      	movs	r3, #0
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f000 fbd0 	bl	800b694 <xQueueGenericSendFromISR>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d001      	beq.n	800aefe <osMessagePut+0x42>
      return osErrorOS;
 800aefa:	23ff      	movs	r3, #255	; 0xff
 800aefc:	e018      	b.n	800af30 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d014      	beq.n	800af2e <osMessagePut+0x72>
 800af04:	4b0c      	ldr	r3, [pc, #48]	; (800af38 <osMessagePut+0x7c>)
 800af06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	e00b      	b.n	800af2e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800af16:	f107 0108 	add.w	r1, r7, #8
 800af1a:	2300      	movs	r3, #0
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f000 faba 	bl	800b498 <xQueueGenericSend>
 800af24:	4603      	mov	r3, r0
 800af26:	2b01      	cmp	r3, #1
 800af28:	d001      	beq.n	800af2e <osMessagePut+0x72>
      return osErrorOS;
 800af2a:	23ff      	movs	r3, #255	; 0xff
 800af2c:	e000      	b.n	800af30 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3718      	adds	r7, #24
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	e000ed04 	.word	0xe000ed04

0800af3c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800af3c:	b590      	push	{r4, r7, lr}
 800af3e:	b08b      	sub	sp, #44	; 0x2c
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800af4c:	2300      	movs	r3, #0
 800af4e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10a      	bne.n	800af6c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800af56:	2380      	movs	r3, #128	; 0x80
 800af58:	617b      	str	r3, [r7, #20]
    return event;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	461c      	mov	r4, r3
 800af5e:	f107 0314 	add.w	r3, r7, #20
 800af62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af6a:	e054      	b.n	800b016 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800af6c:	2300      	movs	r3, #0
 800af6e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800af70:	2300      	movs	r3, #0
 800af72:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7a:	d103      	bne.n	800af84 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800af7c:	f04f 33ff 	mov.w	r3, #4294967295
 800af80:	627b      	str	r3, [r7, #36]	; 0x24
 800af82:	e009      	b.n	800af98 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d006      	beq.n	800af98 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800af8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af90:	2b00      	cmp	r3, #0
 800af92:	d101      	bne.n	800af98 <osMessageGet+0x5c>
      ticks = 1;
 800af94:	2301      	movs	r3, #1
 800af96:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800af98:	f7ff fd8c 	bl	800aab4 <inHandlerMode>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d01c      	beq.n	800afdc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800afa2:	f107 0220 	add.w	r2, r7, #32
 800afa6:	f107 0314 	add.w	r3, r7, #20
 800afaa:	3304      	adds	r3, #4
 800afac:	4619      	mov	r1, r3
 800afae:	68b8      	ldr	r0, [r7, #8]
 800afb0:	f000 fe84 	bl	800bcbc <xQueueReceiveFromISR>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d102      	bne.n	800afc0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800afba:	2310      	movs	r3, #16
 800afbc:	617b      	str	r3, [r7, #20]
 800afbe:	e001      	b.n	800afc4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800afc4:	6a3b      	ldr	r3, [r7, #32]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d01d      	beq.n	800b006 <osMessageGet+0xca>
 800afca:	4b15      	ldr	r3, [pc, #84]	; (800b020 <osMessageGet+0xe4>)
 800afcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	e014      	b.n	800b006 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800afdc:	f107 0314 	add.w	r3, r7, #20
 800afe0:	3304      	adds	r3, #4
 800afe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe4:	4619      	mov	r1, r3
 800afe6:	68b8      	ldr	r0, [r7, #8]
 800afe8:	f000 fc7c 	bl	800b8e4 <xQueueReceive>
 800afec:	4603      	mov	r3, r0
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d102      	bne.n	800aff8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800aff2:	2310      	movs	r3, #16
 800aff4:	617b      	str	r3, [r7, #20]
 800aff6:	e006      	b.n	800b006 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	2b00      	cmp	r3, #0
 800affc:	d101      	bne.n	800b002 <osMessageGet+0xc6>
 800affe:	2300      	movs	r3, #0
 800b000:	e000      	b.n	800b004 <osMessageGet+0xc8>
 800b002:	2340      	movs	r3, #64	; 0x40
 800b004:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	461c      	mov	r4, r3
 800b00a:	f107 0314 	add.w	r3, r7, #20
 800b00e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	372c      	adds	r7, #44	; 0x2c
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd90      	pop	{r4, r7, pc}
 800b01e:	bf00      	nop
 800b020:	e000ed04 	.word	0xe000ed04

0800b024 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f103 0208 	add.w	r2, r3, #8
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f04f 32ff 	mov.w	r2, #4294967295
 800b03c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f103 0208 	add.w	r2, r3, #8
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f103 0208 	add.w	r2, r3, #8
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b072:	bf00      	nop
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b07e:	b480      	push	{r7}
 800b080:	b085      	sub	sp, #20
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	689a      	ldr	r2, [r3, #8]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	601a      	str	r2, [r3, #0]
}
 800b0ba:	bf00      	nop
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b085      	sub	sp, #20
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0dc:	d103      	bne.n	800b0e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	60fb      	str	r3, [r7, #12]
 800b0e4:	e00c      	b.n	800b100 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	e002      	b.n	800b0f4 <vListInsert+0x2e>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d2f6      	bcs.n	800b0ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	683a      	ldr	r2, [r7, #0]
 800b11a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	1c5a      	adds	r2, r3, #1
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	601a      	str	r2, [r3, #0]
}
 800b12c:	bf00      	nop
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	6892      	ldr	r2, [r2, #8]
 800b14e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	6852      	ldr	r2, [r2, #4]
 800b158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	429a      	cmp	r2, r3
 800b162:	d103      	bne.n	800b16c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	689a      	ldr	r2, [r3, #8]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	1e5a      	subs	r2, r3, #1
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10a      	bne.n	800b1b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b1b6:	f002 f85d 	bl	800d274 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c2:	68f9      	ldr	r1, [r7, #12]
 800b1c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b1c6:	fb01 f303 	mul.w	r3, r1, r3
 800b1ca:	441a      	add	r2, r3
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	68f9      	ldr	r1, [r7, #12]
 800b1ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b1ec:	fb01 f303 	mul.w	r3, r1, r3
 800b1f0:	441a      	add	r2, r3
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	22ff      	movs	r2, #255	; 0xff
 800b1fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	22ff      	movs	r2, #255	; 0xff
 800b202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d114      	bne.n	800b236 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d01a      	beq.n	800b24a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	3310      	adds	r3, #16
 800b218:	4618      	mov	r0, r3
 800b21a:	f001 fb23 	bl	800c864 <xTaskRemoveFromEventList>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d012      	beq.n	800b24a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b224:	4b0c      	ldr	r3, [pc, #48]	; (800b258 <xQueueGenericReset+0xcc>)
 800b226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	e009      	b.n	800b24a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3310      	adds	r3, #16
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff fef2 	bl	800b024 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	3324      	adds	r3, #36	; 0x24
 800b244:	4618      	mov	r0, r3
 800b246:	f7ff feed 	bl	800b024 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b24a:	f002 f843 	bl	800d2d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b24e:	2301      	movs	r3, #1
}
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	e000ed04 	.word	0xe000ed04

0800b25c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b08e      	sub	sp, #56	; 0x38
 800b260:	af02      	add	r7, sp, #8
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
 800b268:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10a      	bne.n	800b286 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b282:	bf00      	nop
 800b284:	e7fe      	b.n	800b284 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10a      	bne.n	800b2a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b29e:	bf00      	nop
 800b2a0:	e7fe      	b.n	800b2a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <xQueueGenericCreateStatic+0x52>
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <xQueueGenericCreateStatic+0x56>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e000      	b.n	800b2b4 <xQueueGenericCreateStatic+0x58>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10a      	bne.n	800b2ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	623b      	str	r3, [r7, #32]
}
 800b2ca:	bf00      	nop
 800b2cc:	e7fe      	b.n	800b2cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d102      	bne.n	800b2da <xQueueGenericCreateStatic+0x7e>
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d101      	bne.n	800b2de <xQueueGenericCreateStatic+0x82>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e000      	b.n	800b2e0 <xQueueGenericCreateStatic+0x84>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10a      	bne.n	800b2fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	61fb      	str	r3, [r7, #28]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b2fa:	2348      	movs	r3, #72	; 0x48
 800b2fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	2b48      	cmp	r3, #72	; 0x48
 800b302:	d00a      	beq.n	800b31a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	61bb      	str	r3, [r7, #24]
}
 800b316:	bf00      	nop
 800b318:	e7fe      	b.n	800b318 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b31a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00d      	beq.n	800b342 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b328:	2201      	movs	r2, #1
 800b32a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b32e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	4613      	mov	r3, r2
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	68b9      	ldr	r1, [r7, #8]
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f000 f83f 	bl	800b3c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b344:	4618      	mov	r0, r3
 800b346:	3730      	adds	r7, #48	; 0x30
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b08a      	sub	sp, #40	; 0x28
 800b350:	af02      	add	r7, sp, #8
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	4613      	mov	r3, r2
 800b358:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10a      	bne.n	800b376 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	613b      	str	r3, [r7, #16]
}
 800b372:	bf00      	nop
 800b374:	e7fe      	b.n	800b374 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	fb02 f303 	mul.w	r3, r2, r3
 800b37e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	3348      	adds	r3, #72	; 0x48
 800b384:	4618      	mov	r0, r3
 800b386:	f002 f897 	bl	800d4b8 <pvPortMalloc>
 800b38a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d011      	beq.n	800b3b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	3348      	adds	r3, #72	; 0x48
 800b39a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b3a4:	79fa      	ldrb	r2, [r7, #7]
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	697a      	ldr	r2, [r7, #20]
 800b3ae:	68b9      	ldr	r1, [r7, #8]
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 f805 	bl	800b3c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3b6:	69bb      	ldr	r3, [r7, #24]
	}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3720      	adds	r7, #32
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
 800b3cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d103      	bne.n	800b3dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	69ba      	ldr	r2, [r7, #24]
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	e002      	b.n	800b3e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	68ba      	ldr	r2, [r7, #8]
 800b3ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	69b8      	ldr	r0, [r7, #24]
 800b3f2:	f7ff fecb 	bl	800b18c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b3f6:	bf00      	nop
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b082      	sub	sp, #8
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00e      	beq.n	800b42a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b41e:	2300      	movs	r3, #0
 800b420:	2200      	movs	r2, #0
 800b422:	2100      	movs	r1, #0
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f837 	bl	800b498 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b42a:	bf00      	nop
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b432:	b580      	push	{r7, lr}
 800b434:	b086      	sub	sp, #24
 800b436:	af00      	add	r7, sp, #0
 800b438:	4603      	mov	r3, r0
 800b43a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b43c:	2301      	movs	r3, #1
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	2300      	movs	r3, #0
 800b442:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b444:	79fb      	ldrb	r3, [r7, #7]
 800b446:	461a      	mov	r2, r3
 800b448:	6939      	ldr	r1, [r7, #16]
 800b44a:	6978      	ldr	r0, [r7, #20]
 800b44c:	f7ff ff7e 	bl	800b34c <xQueueGenericCreate>
 800b450:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f7ff ffd3 	bl	800b3fe <prvInitialiseMutex>

		return xNewQueue;
 800b458:	68fb      	ldr	r3, [r7, #12]
	}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b462:	b580      	push	{r7, lr}
 800b464:	b088      	sub	sp, #32
 800b466:	af02      	add	r7, sp, #8
 800b468:	4603      	mov	r3, r0
 800b46a:	6039      	str	r1, [r7, #0]
 800b46c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b46e:	2301      	movs	r3, #1
 800b470:	617b      	str	r3, [r7, #20]
 800b472:	2300      	movs	r3, #0
 800b474:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b476:	79fb      	ldrb	r3, [r7, #7]
 800b478:	9300      	str	r3, [sp, #0]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	2200      	movs	r2, #0
 800b47e:	6939      	ldr	r1, [r7, #16]
 800b480:	6978      	ldr	r0, [r7, #20]
 800b482:	f7ff feeb 	bl	800b25c <xQueueGenericCreateStatic>
 800b486:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f7ff ffb8 	bl	800b3fe <prvInitialiseMutex>

		return xNewQueue;
 800b48e:	68fb      	ldr	r3, [r7, #12]
	}
 800b490:	4618      	mov	r0, r3
 800b492:	3718      	adds	r7, #24
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08e      	sub	sp, #56	; 0x38
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
 800b4a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10a      	bne.n	800b4ca <xQueueGenericSend+0x32>
	__asm volatile
 800b4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b4c6:	bf00      	nop
 800b4c8:	e7fe      	b.n	800b4c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d103      	bne.n	800b4d8 <xQueueGenericSend+0x40>
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d101      	bne.n	800b4dc <xQueueGenericSend+0x44>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e000      	b.n	800b4de <xQueueGenericSend+0x46>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10a      	bne.n	800b4f8 <xQueueGenericSend+0x60>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4f4:	bf00      	nop
 800b4f6:	e7fe      	b.n	800b4f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d103      	bne.n	800b506 <xQueueGenericSend+0x6e>
 800b4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b502:	2b01      	cmp	r3, #1
 800b504:	d101      	bne.n	800b50a <xQueueGenericSend+0x72>
 800b506:	2301      	movs	r3, #1
 800b508:	e000      	b.n	800b50c <xQueueGenericSend+0x74>
 800b50a:	2300      	movs	r3, #0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10a      	bne.n	800b526 <xQueueGenericSend+0x8e>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	623b      	str	r3, [r7, #32]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b526:	f001 fb59 	bl	800cbdc <xTaskGetSchedulerState>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d102      	bne.n	800b536 <xQueueGenericSend+0x9e>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <xQueueGenericSend+0xa2>
 800b536:	2301      	movs	r3, #1
 800b538:	e000      	b.n	800b53c <xQueueGenericSend+0xa4>
 800b53a:	2300      	movs	r3, #0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d10a      	bne.n	800b556 <xQueueGenericSend+0xbe>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	61fb      	str	r3, [r7, #28]
}
 800b552:	bf00      	nop
 800b554:	e7fe      	b.n	800b554 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b556:	f001 fe8d 	bl	800d274 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b562:	429a      	cmp	r2, r3
 800b564:	d302      	bcc.n	800b56c <xQueueGenericSend+0xd4>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d129      	bne.n	800b5c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	68b9      	ldr	r1, [r7, #8]
 800b570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b572:	f000 fc3b 	bl	800bdec <prvCopyDataToQueue>
 800b576:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d010      	beq.n	800b5a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b582:	3324      	adds	r3, #36	; 0x24
 800b584:	4618      	mov	r0, r3
 800b586:	f001 f96d 	bl	800c864 <xTaskRemoveFromEventList>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d013      	beq.n	800b5b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b590:	4b3f      	ldr	r3, [pc, #252]	; (800b690 <xQueueGenericSend+0x1f8>)
 800b592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b596:	601a      	str	r2, [r3, #0]
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	e00a      	b.n	800b5b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d007      	beq.n	800b5b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b5a8:	4b39      	ldr	r3, [pc, #228]	; (800b690 <xQueueGenericSend+0x1f8>)
 800b5aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ae:	601a      	str	r2, [r3, #0]
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b5b8:	f001 fe8c 	bl	800d2d4 <vPortExitCritical>
				return pdPASS;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e063      	b.n	800b688 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d103      	bne.n	800b5ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5c6:	f001 fe85 	bl	800d2d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e05c      	b.n	800b688 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d106      	bne.n	800b5e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5d4:	f107 0314 	add.w	r3, r7, #20
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f001 f9a5 	bl	800c928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5e2:	f001 fe77 	bl	800d2d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5e6:	f000 ff39 	bl	800c45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5ea:	f001 fe43 	bl	800d274 <vPortEnterCritical>
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5f4:	b25b      	sxtb	r3, r3
 800b5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5fa:	d103      	bne.n	800b604 <xQueueGenericSend+0x16c>
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fe:	2200      	movs	r2, #0
 800b600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b60a:	b25b      	sxtb	r3, r3
 800b60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b610:	d103      	bne.n	800b61a <xQueueGenericSend+0x182>
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	2200      	movs	r2, #0
 800b616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b61a:	f001 fe5b 	bl	800d2d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b61e:	1d3a      	adds	r2, r7, #4
 800b620:	f107 0314 	add.w	r3, r7, #20
 800b624:	4611      	mov	r1, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f001 f994 	bl	800c954 <xTaskCheckForTimeOut>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d124      	bne.n	800b67c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b634:	f000 fcd2 	bl	800bfdc <prvIsQueueFull>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d018      	beq.n	800b670 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b640:	3310      	adds	r3, #16
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	4611      	mov	r1, r2
 800b646:	4618      	mov	r0, r3
 800b648:	f001 f8e8 	bl	800c81c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b64c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b64e:	f000 fc5d 	bl	800bf0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b652:	f000 ff11 	bl	800c478 <xTaskResumeAll>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f47f af7c 	bne.w	800b556 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b65e:	4b0c      	ldr	r3, [pc, #48]	; (800b690 <xQueueGenericSend+0x1f8>)
 800b660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b664:	601a      	str	r2, [r3, #0]
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	e772      	b.n	800b556 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b672:	f000 fc4b 	bl	800bf0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b676:	f000 feff 	bl	800c478 <xTaskResumeAll>
 800b67a:	e76c      	b.n	800b556 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b67c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b67e:	f000 fc45 	bl	800bf0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b682:	f000 fef9 	bl	800c478 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3738      	adds	r7, #56	; 0x38
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	e000ed04 	.word	0xe000ed04

0800b694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b090      	sub	sp, #64	; 0x40
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10a      	bne.n	800b6c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b0:	f383 8811 	msr	BASEPRI, r3
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6be:	bf00      	nop
 800b6c0:	e7fe      	b.n	800b6c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d103      	bne.n	800b6d0 <xQueueGenericSendFromISR+0x3c>
 800b6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <xQueueGenericSendFromISR+0x40>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e000      	b.n	800b6d6 <xQueueGenericSendFromISR+0x42>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10a      	bne.n	800b6f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6ec:	bf00      	nop
 800b6ee:	e7fe      	b.n	800b6ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	d103      	bne.n	800b6fe <xQueueGenericSendFromISR+0x6a>
 800b6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d101      	bne.n	800b702 <xQueueGenericSendFromISR+0x6e>
 800b6fe:	2301      	movs	r3, #1
 800b700:	e000      	b.n	800b704 <xQueueGenericSendFromISR+0x70>
 800b702:	2300      	movs	r3, #0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d10a      	bne.n	800b71e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70c:	f383 8811 	msr	BASEPRI, r3
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	623b      	str	r3, [r7, #32]
}
 800b71a:	bf00      	nop
 800b71c:	e7fe      	b.n	800b71c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b71e:	f001 fe8b 	bl	800d438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b722:	f3ef 8211 	mrs	r2, BASEPRI
 800b726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	61fa      	str	r2, [r7, #28]
 800b738:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b73a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b73c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b746:	429a      	cmp	r2, r3
 800b748:	d302      	bcc.n	800b750 <xQueueGenericSendFromISR+0xbc>
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d12f      	bne.n	800b7b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	68b9      	ldr	r1, [r7, #8]
 800b764:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b766:	f000 fb41 	bl	800bdec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b76a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b772:	d112      	bne.n	800b79a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d016      	beq.n	800b7aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77e:	3324      	adds	r3, #36	; 0x24
 800b780:	4618      	mov	r0, r3
 800b782:	f001 f86f 	bl	800c864 <xTaskRemoveFromEventList>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00e      	beq.n	800b7aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00b      	beq.n	800b7aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	e007      	b.n	800b7aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b79a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b79e:	3301      	adds	r3, #1
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	b25a      	sxtb	r2, r3
 800b7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b7ae:	e001      	b.n	800b7b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b7be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3740      	adds	r7, #64	; 0x40
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b08e      	sub	sp, #56	; 0x38
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10a      	bne.n	800b7f4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	623b      	str	r3, [r7, #32]
}
 800b7f0:	bf00      	nop
 800b7f2:	e7fe      	b.n	800b7f2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00a      	beq.n	800b812 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	61fb      	str	r3, [r7, #28]
}
 800b80e:	bf00      	nop
 800b810:	e7fe      	b.n	800b810 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d103      	bne.n	800b822 <xQueueGiveFromISR+0x58>
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d101      	bne.n	800b826 <xQueueGiveFromISR+0x5c>
 800b822:	2301      	movs	r3, #1
 800b824:	e000      	b.n	800b828 <xQueueGiveFromISR+0x5e>
 800b826:	2300      	movs	r3, #0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10a      	bne.n	800b842 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	61bb      	str	r3, [r7, #24]
}
 800b83e:	bf00      	nop
 800b840:	e7fe      	b.n	800b840 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b842:	f001 fdf9 	bl	800d438 <vPortValidateInterruptPriority>
	__asm volatile
 800b846:	f3ef 8211 	mrs	r2, BASEPRI
 800b84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	617a      	str	r2, [r7, #20]
 800b85c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b85e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b860:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b866:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b86c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b86e:	429a      	cmp	r2, r3
 800b870:	d22b      	bcs.n	800b8ca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87e:	1c5a      	adds	r2, r3, #1
 800b880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b882:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b884:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b88c:	d112      	bne.n	800b8b4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b892:	2b00      	cmp	r3, #0
 800b894:	d016      	beq.n	800b8c4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b898:	3324      	adds	r3, #36	; 0x24
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 ffe2 	bl	800c864 <xTaskRemoveFromEventList>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00e      	beq.n	800b8c4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00b      	beq.n	800b8c4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	e007      	b.n	800b8c4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	b25a      	sxtb	r2, r3
 800b8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b8c8:	e001      	b.n	800b8ce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f383 8811 	msr	BASEPRI, r3
}
 800b8d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3738      	adds	r7, #56	; 0x38
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b08c      	sub	sp, #48	; 0x30
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10a      	bne.n	800b914 <xQueueReceive+0x30>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	623b      	str	r3, [r7, #32]
}
 800b910:	bf00      	nop
 800b912:	e7fe      	b.n	800b912 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d103      	bne.n	800b922 <xQueueReceive+0x3e>
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <xQueueReceive+0x42>
 800b922:	2301      	movs	r3, #1
 800b924:	e000      	b.n	800b928 <xQueueReceive+0x44>
 800b926:	2300      	movs	r3, #0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <xQueueReceive+0x5e>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	61fb      	str	r3, [r7, #28]
}
 800b93e:	bf00      	nop
 800b940:	e7fe      	b.n	800b940 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b942:	f001 f94b 	bl	800cbdc <xTaskGetSchedulerState>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d102      	bne.n	800b952 <xQueueReceive+0x6e>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <xQueueReceive+0x72>
 800b952:	2301      	movs	r3, #1
 800b954:	e000      	b.n	800b958 <xQueueReceive+0x74>
 800b956:	2300      	movs	r3, #0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <xQueueReceive+0x8e>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	61bb      	str	r3, [r7, #24]
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b972:	f001 fc7f 	bl	800d274 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d01f      	beq.n	800b9c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b986:	f000 fa9b 	bl	800bec0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	1e5a      	subs	r2, r3, #1
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00f      	beq.n	800b9ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99c:	3310      	adds	r3, #16
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 ff60 	bl	800c864 <xTaskRemoveFromEventList>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d007      	beq.n	800b9ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9aa:	4b3d      	ldr	r3, [pc, #244]	; (800baa0 <xQueueReceive+0x1bc>)
 800b9ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b0:	601a      	str	r2, [r3, #0]
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9ba:	f001 fc8b 	bl	800d2d4 <vPortExitCritical>
				return pdPASS;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e069      	b.n	800ba96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d103      	bne.n	800b9d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9c8:	f001 fc84 	bl	800d2d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	e062      	b.n	800ba96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d106      	bne.n	800b9e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9d6:	f107 0310 	add.w	r3, r7, #16
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f000 ffa4 	bl	800c928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9e4:	f001 fc76 	bl	800d2d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9e8:	f000 fd38 	bl	800c45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9ec:	f001 fc42 	bl	800d274 <vPortEnterCritical>
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9f6:	b25b      	sxtb	r3, r3
 800b9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fc:	d103      	bne.n	800ba06 <xQueueReceive+0x122>
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba0c:	b25b      	sxtb	r3, r3
 800ba0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba12:	d103      	bne.n	800ba1c <xQueueReceive+0x138>
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba1c:	f001 fc5a 	bl	800d2d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba20:	1d3a      	adds	r2, r7, #4
 800ba22:	f107 0310 	add.w	r3, r7, #16
 800ba26:	4611      	mov	r1, r2
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 ff93 	bl	800c954 <xTaskCheckForTimeOut>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d123      	bne.n	800ba7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba36:	f000 fabb 	bl	800bfb0 <prvIsQueueEmpty>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d017      	beq.n	800ba70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	3324      	adds	r3, #36	; 0x24
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	4611      	mov	r1, r2
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f000 fee7 	bl	800c81c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba50:	f000 fa5c 	bl	800bf0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba54:	f000 fd10 	bl	800c478 <xTaskResumeAll>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d189      	bne.n	800b972 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ba5e:	4b10      	ldr	r3, [pc, #64]	; (800baa0 <xQueueReceive+0x1bc>)
 800ba60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba64:	601a      	str	r2, [r3, #0]
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	e780      	b.n	800b972 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba72:	f000 fa4b 	bl	800bf0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba76:	f000 fcff 	bl	800c478 <xTaskResumeAll>
 800ba7a:	e77a      	b.n	800b972 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba7e:	f000 fa45 	bl	800bf0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba82:	f000 fcf9 	bl	800c478 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba88:	f000 fa92 	bl	800bfb0 <prvIsQueueEmpty>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f43f af6f 	beq.w	800b972 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3730      	adds	r7, #48	; 0x30
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	e000ed04 	.word	0xe000ed04

0800baa4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b08e      	sub	sp, #56	; 0x38
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800baae:	2300      	movs	r3, #0
 800bab0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bab6:	2300      	movs	r3, #0
 800bab8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800baba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babc:	2b00      	cmp	r3, #0
 800babe:	d10a      	bne.n	800bad6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	623b      	str	r3, [r7, #32]
}
 800bad2:	bf00      	nop
 800bad4:	e7fe      	b.n	800bad4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00a      	beq.n	800baf4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	61fb      	str	r3, [r7, #28]
}
 800baf0:	bf00      	nop
 800baf2:	e7fe      	b.n	800baf2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800baf4:	f001 f872 	bl	800cbdc <xTaskGetSchedulerState>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d102      	bne.n	800bb04 <xQueueSemaphoreTake+0x60>
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d101      	bne.n	800bb08 <xQueueSemaphoreTake+0x64>
 800bb04:	2301      	movs	r3, #1
 800bb06:	e000      	b.n	800bb0a <xQueueSemaphoreTake+0x66>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10a      	bne.n	800bb24 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	61bb      	str	r3, [r7, #24]
}
 800bb20:	bf00      	nop
 800bb22:	e7fe      	b.n	800bb22 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb24:	f001 fba6 	bl	800d274 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb2c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d024      	beq.n	800bb7e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	1e5a      	subs	r2, r3, #1
 800bb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d104      	bne.n	800bb4e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bb44:	f001 f9f2 	bl	800cf2c <pvTaskIncrementMutexHeldCount>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00f      	beq.n	800bb76 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb58:	3310      	adds	r3, #16
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f000 fe82 	bl	800c864 <xTaskRemoveFromEventList>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d007      	beq.n	800bb76 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb66:	4b54      	ldr	r3, [pc, #336]	; (800bcb8 <xQueueSemaphoreTake+0x214>)
 800bb68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb6c:	601a      	str	r2, [r3, #0]
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb76:	f001 fbad 	bl	800d2d4 <vPortExitCritical>
				return pdPASS;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e097      	b.n	800bcae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d111      	bne.n	800bba8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00a      	beq.n	800bba0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	617b      	str	r3, [r7, #20]
}
 800bb9c:	bf00      	nop
 800bb9e:	e7fe      	b.n	800bb9e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bba0:	f001 fb98 	bl	800d2d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bba4:	2300      	movs	r3, #0
 800bba6:	e082      	b.n	800bcae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d106      	bne.n	800bbbc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbae:	f107 030c 	add.w	r3, r7, #12
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 feb8 	bl	800c928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbbc:	f001 fb8a 	bl	800d2d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbc0:	f000 fc4c 	bl	800c45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbc4:	f001 fb56 	bl	800d274 <vPortEnterCritical>
 800bbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbce:	b25b      	sxtb	r3, r3
 800bbd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd4:	d103      	bne.n	800bbde <xQueueSemaphoreTake+0x13a>
 800bbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbe4:	b25b      	sxtb	r3, r3
 800bbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbea:	d103      	bne.n	800bbf4 <xQueueSemaphoreTake+0x150>
 800bbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbf4:	f001 fb6e 	bl	800d2d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbf8:	463a      	mov	r2, r7
 800bbfa:	f107 030c 	add.w	r3, r7, #12
 800bbfe:	4611      	mov	r1, r2
 800bc00:	4618      	mov	r0, r3
 800bc02:	f000 fea7 	bl	800c954 <xTaskCheckForTimeOut>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d132      	bne.n	800bc72 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc0e:	f000 f9cf 	bl	800bfb0 <prvIsQueueEmpty>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d026      	beq.n	800bc66 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d109      	bne.n	800bc34 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bc20:	f001 fb28 	bl	800d274 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f000 fff5 	bl	800cc18 <xTaskPriorityInherit>
 800bc2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bc30:	f001 fb50 	bl	800d2d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc36:	3324      	adds	r3, #36	; 0x24
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f000 fded 	bl	800c81c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc44:	f000 f962 	bl	800bf0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc48:	f000 fc16 	bl	800c478 <xTaskResumeAll>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f47f af68 	bne.w	800bb24 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bc54:	4b18      	ldr	r3, [pc, #96]	; (800bcb8 <xQueueSemaphoreTake+0x214>)
 800bc56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc5a:	601a      	str	r2, [r3, #0]
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	e75e      	b.n	800bb24 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bc66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc68:	f000 f950 	bl	800bf0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc6c:	f000 fc04 	bl	800c478 <xTaskResumeAll>
 800bc70:	e758      	b.n	800bb24 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bc72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc74:	f000 f94a 	bl	800bf0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc78:	f000 fbfe 	bl	800c478 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc7e:	f000 f997 	bl	800bfb0 <prvIsQueueEmpty>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f43f af4d 	beq.w	800bb24 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00d      	beq.n	800bcac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bc90:	f001 faf0 	bl	800d274 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bc94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc96:	f000 f891 	bl	800bdbc <prvGetDisinheritPriorityAfterTimeout>
 800bc9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bca2:	4618      	mov	r0, r3
 800bca4:	f001 f8b4 	bl	800ce10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bca8:	f001 fb14 	bl	800d2d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bcac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3738      	adds	r7, #56	; 0x38
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	e000ed04 	.word	0xe000ed04

0800bcbc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b08e      	sub	sp, #56	; 0x38
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	623b      	str	r3, [r7, #32]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d103      	bne.n	800bcf6 <xQueueReceiveFromISR+0x3a>
 800bcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <xQueueReceiveFromISR+0x3e>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e000      	b.n	800bcfc <xQueueReceiveFromISR+0x40>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10a      	bne.n	800bd16 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	61fb      	str	r3, [r7, #28]
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd16:	f001 fb8f 	bl	800d438 <vPortValidateInterruptPriority>
	__asm volatile
 800bd1a:	f3ef 8211 	mrs	r2, BASEPRI
 800bd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	61ba      	str	r2, [r7, #24]
 800bd30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bd32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d02f      	beq.n	800bda2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd4c:	68b9      	ldr	r1, [r7, #8]
 800bd4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd50:	f000 f8b6 	bl	800bec0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	1e5a      	subs	r2, r3, #1
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bd5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd64:	d112      	bne.n	800bd8c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d016      	beq.n	800bd9c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	3310      	adds	r3, #16
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 fd76 	bl	800c864 <xTaskRemoveFromEventList>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00e      	beq.n	800bd9c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00b      	beq.n	800bd9c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	e007      	b.n	800bd9c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bd8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd90:	3301      	adds	r3, #1
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	b25a      	sxtb	r2, r3
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	637b      	str	r3, [r7, #52]	; 0x34
 800bda0:	e001      	b.n	800bda6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bda2:	2300      	movs	r3, #0
 800bda4:	637b      	str	r3, [r7, #52]	; 0x34
 800bda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	f383 8811 	msr	BASEPRI, r3
}
 800bdb0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bdb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3738      	adds	r7, #56	; 0x38
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d006      	beq.n	800bdda <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f1c3 0307 	rsb	r3, r3, #7
 800bdd6:	60fb      	str	r3, [r7, #12]
 800bdd8:	e001      	b.n	800bdde <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bdda:	2300      	movs	r3, #0
 800bddc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bdde:	68fb      	ldr	r3, [r7, #12]
	}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3714      	adds	r7, #20
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10d      	bne.n	800be26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d14d      	bne.n	800beae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	4618      	mov	r0, r3
 800be18:	f000 ff74 	bl	800cd04 <xTaskPriorityDisinherit>
 800be1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2200      	movs	r2, #0
 800be22:	609a      	str	r2, [r3, #8]
 800be24:	e043      	b.n	800beae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d119      	bne.n	800be60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6858      	ldr	r0, [r3, #4]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be34:	461a      	mov	r2, r3
 800be36:	68b9      	ldr	r1, [r7, #8]
 800be38:	f00c fe62 	bl	8018b00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	685a      	ldr	r2, [r3, #4]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be44:	441a      	add	r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	429a      	cmp	r2, r3
 800be54:	d32b      	bcc.n	800beae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	605a      	str	r2, [r3, #4]
 800be5e:	e026      	b.n	800beae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	68d8      	ldr	r0, [r3, #12]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be68:	461a      	mov	r2, r3
 800be6a:	68b9      	ldr	r1, [r7, #8]
 800be6c:	f00c fe48 	bl	8018b00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	68da      	ldr	r2, [r3, #12]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be78:	425b      	negs	r3, r3
 800be7a:	441a      	add	r2, r3
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	68da      	ldr	r2, [r3, #12]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d207      	bcs.n	800be9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	689a      	ldr	r2, [r3, #8]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be94:	425b      	negs	r3, r3
 800be96:	441a      	add	r2, r3
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d105      	bne.n	800beae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	3b01      	subs	r3, #1
 800beac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800beb6:	697b      	ldr	r3, [r7, #20]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d018      	beq.n	800bf04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	68da      	ldr	r2, [r3, #12]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beda:	441a      	add	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	68da      	ldr	r2, [r3, #12]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d303      	bcc.n	800bef4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	68d9      	ldr	r1, [r3, #12]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befc:	461a      	mov	r2, r3
 800befe:	6838      	ldr	r0, [r7, #0]
 800bf00:	f00c fdfe 	bl	8018b00 <memcpy>
	}
}
 800bf04:	bf00      	nop
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf14:	f001 f9ae 	bl	800d274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf20:	e011      	b.n	800bf46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d012      	beq.n	800bf50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3324      	adds	r3, #36	; 0x24
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 fc98 	bl	800c864 <xTaskRemoveFromEventList>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d001      	beq.n	800bf3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bf3a:	f000 fd6d 	bl	800ca18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bf3e:	7bfb      	ldrb	r3, [r7, #15]
 800bf40:	3b01      	subs	r3, #1
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	dce9      	bgt.n	800bf22 <prvUnlockQueue+0x16>
 800bf4e:	e000      	b.n	800bf52 <prvUnlockQueue+0x46>
					break;
 800bf50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	22ff      	movs	r2, #255	; 0xff
 800bf56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bf5a:	f001 f9bb 	bl	800d2d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bf5e:	f001 f989 	bl	800d274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf6a:	e011      	b.n	800bf90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d012      	beq.n	800bf9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	3310      	adds	r3, #16
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 fc73 	bl	800c864 <xTaskRemoveFromEventList>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bf84:	f000 fd48 	bl	800ca18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	dce9      	bgt.n	800bf6c <prvUnlockQueue+0x60>
 800bf98:	e000      	b.n	800bf9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bf9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	22ff      	movs	r2, #255	; 0xff
 800bfa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bfa4:	f001 f996 	bl	800d2d4 <vPortExitCritical>
}
 800bfa8:	bf00      	nop
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bfb8:	f001 f95c 	bl	800d274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d102      	bne.n	800bfca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	60fb      	str	r3, [r7, #12]
 800bfc8:	e001      	b.n	800bfce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bfce:	f001 f981 	bl	800d2d4 <vPortExitCritical>

	return xReturn;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bfe4:	f001 f946 	bl	800d274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d102      	bne.n	800bffa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bff4:	2301      	movs	r3, #1
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	e001      	b.n	800bffe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bffa:	2300      	movs	r3, #0
 800bffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bffe:	f001 f969 	bl	800d2d4 <vPortExitCritical>

	return xReturn;
 800c002:	68fb      	ldr	r3, [r7, #12]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08e      	sub	sp, #56	; 0x38
 800c010:	af04      	add	r7, sp, #16
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10a      	bne.n	800c036 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	623b      	str	r3, [r7, #32]
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10a      	bne.n	800c052 <xTaskCreateStatic+0x46>
	__asm volatile
 800c03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	61fb      	str	r3, [r7, #28]
}
 800c04e:	bf00      	nop
 800c050:	e7fe      	b.n	800c050 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c052:	2354      	movs	r3, #84	; 0x54
 800c054:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	2b54      	cmp	r3, #84	; 0x54
 800c05a:	d00a      	beq.n	800c072 <xTaskCreateStatic+0x66>
	__asm volatile
 800c05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c060:	f383 8811 	msr	BASEPRI, r3
 800c064:	f3bf 8f6f 	isb	sy
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	61bb      	str	r3, [r7, #24]
}
 800c06e:	bf00      	nop
 800c070:	e7fe      	b.n	800c070 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c072:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c076:	2b00      	cmp	r3, #0
 800c078:	d01e      	beq.n	800c0b8 <xTaskCreateStatic+0xac>
 800c07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d01b      	beq.n	800c0b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c088:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08c:	2202      	movs	r2, #2
 800c08e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c092:	2300      	movs	r3, #0
 800c094:	9303      	str	r3, [sp, #12]
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	9302      	str	r3, [sp, #8]
 800c09a:	f107 0314 	add.w	r3, r7, #20
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	68b9      	ldr	r1, [r7, #8]
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f000 f850 	bl	800c150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0b2:	f000 f8d5 	bl	800c260 <prvAddNewTaskToReadyList>
 800c0b6:	e001      	b.n	800c0bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c0bc:	697b      	ldr	r3, [r7, #20]
	}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3728      	adds	r7, #40	; 0x28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b08c      	sub	sp, #48	; 0x30
 800c0ca:	af04      	add	r7, sp, #16
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	60b9      	str	r1, [r7, #8]
 800c0d0:	603b      	str	r3, [r7, #0]
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c0d6:	88fb      	ldrh	r3, [r7, #6]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f001 f9ec 	bl	800d4b8 <pvPortMalloc>
 800c0e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00e      	beq.n	800c106 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0e8:	2054      	movs	r0, #84	; 0x54
 800c0ea:	f001 f9e5 	bl	800d4b8 <pvPortMalloc>
 800c0ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	697a      	ldr	r2, [r7, #20]
 800c0fa:	631a      	str	r2, [r3, #48]	; 0x30
 800c0fc:	e005      	b.n	800c10a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c0fe:	6978      	ldr	r0, [r7, #20]
 800c100:	f001 faa6 	bl	800d650 <vPortFree>
 800c104:	e001      	b.n	800c10a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c106:	2300      	movs	r3, #0
 800c108:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d017      	beq.n	800c140 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c118:	88fa      	ldrh	r2, [r7, #6]
 800c11a:	2300      	movs	r3, #0
 800c11c:	9303      	str	r3, [sp, #12]
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	9302      	str	r3, [sp, #8]
 800c122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c124:	9301      	str	r3, [sp, #4]
 800c126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	68b9      	ldr	r1, [r7, #8]
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f000 f80e 	bl	800c150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c134:	69f8      	ldr	r0, [r7, #28]
 800c136:	f000 f893 	bl	800c260 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c13a:	2301      	movs	r3, #1
 800c13c:	61bb      	str	r3, [r7, #24]
 800c13e:	e002      	b.n	800c146 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c140:	f04f 33ff 	mov.w	r3, #4294967295
 800c144:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c146:	69bb      	ldr	r3, [r7, #24]
	}
 800c148:	4618      	mov	r0, r3
 800c14a:	3720      	adds	r7, #32
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b088      	sub	sp, #32
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
 800c15c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c162:	6879      	ldr	r1, [r7, #4]
 800c164:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c168:	440b      	add	r3, r1
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4413      	add	r3, r2
 800c16e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	f023 0307 	bic.w	r3, r3, #7
 800c176:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	f003 0307 	and.w	r3, r3, #7
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d00a      	beq.n	800c198 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	617b      	str	r3, [r7, #20]
}
 800c194:	bf00      	nop
 800c196:	e7fe      	b.n	800c196 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d01f      	beq.n	800c1de <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c19e:	2300      	movs	r3, #0
 800c1a0:	61fb      	str	r3, [r7, #28]
 800c1a2:	e012      	b.n	800c1ca <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c1a4:	68ba      	ldr	r2, [r7, #8]
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	7819      	ldrb	r1, [r3, #0]
 800c1ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	3334      	adds	r3, #52	; 0x34
 800c1b4:	460a      	mov	r2, r1
 800c1b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	4413      	add	r3, r2
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d006      	beq.n	800c1d2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	61fb      	str	r3, [r7, #28]
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	2b0f      	cmp	r3, #15
 800c1ce:	d9e9      	bls.n	800c1a4 <prvInitialiseNewTask+0x54>
 800c1d0:	e000      	b.n	800c1d4 <prvInitialiseNewTask+0x84>
			{
				break;
 800c1d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1dc:	e003      	b.n	800c1e6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e8:	2b06      	cmp	r3, #6
 800c1ea:	d901      	bls.n	800c1f0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1ec:	2306      	movs	r3, #6
 800c1ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	2200      	movs	r2, #0
 800c200:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	3304      	adds	r3, #4
 800c206:	4618      	mov	r0, r3
 800c208:	f7fe ff2c 	bl	800b064 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20e:	3318      	adds	r3, #24
 800c210:	4618      	mov	r0, r3
 800c212:	f7fe ff27 	bl	800b064 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c21a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21e:	f1c3 0207 	rsb	r2, r3, #7
 800c222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c224:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c22a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22e:	2200      	movs	r2, #0
 800c230:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c234:	2200      	movs	r2, #0
 800c236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	68f9      	ldr	r1, [r7, #12]
 800c23e:	69b8      	ldr	r0, [r7, #24]
 800c240:	f000 feee 	bl	800d020 <pxPortInitialiseStack>
 800c244:	4602      	mov	r2, r0
 800c246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c248:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d002      	beq.n	800c256 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c256:	bf00      	nop
 800c258:	3720      	adds	r7, #32
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
	...

0800c260 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c268:	f001 f804 	bl	800d274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c26c:	4b2a      	ldr	r3, [pc, #168]	; (800c318 <prvAddNewTaskToReadyList+0xb8>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3301      	adds	r3, #1
 800c272:	4a29      	ldr	r2, [pc, #164]	; (800c318 <prvAddNewTaskToReadyList+0xb8>)
 800c274:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c276:	4b29      	ldr	r3, [pc, #164]	; (800c31c <prvAddNewTaskToReadyList+0xbc>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d109      	bne.n	800c292 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c27e:	4a27      	ldr	r2, [pc, #156]	; (800c31c <prvAddNewTaskToReadyList+0xbc>)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c284:	4b24      	ldr	r3, [pc, #144]	; (800c318 <prvAddNewTaskToReadyList+0xb8>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d110      	bne.n	800c2ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c28c:	f000 fbe8 	bl	800ca60 <prvInitialiseTaskLists>
 800c290:	e00d      	b.n	800c2ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c292:	4b23      	ldr	r3, [pc, #140]	; (800c320 <prvAddNewTaskToReadyList+0xc0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d109      	bne.n	800c2ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c29a:	4b20      	ldr	r3, [pc, #128]	; (800c31c <prvAddNewTaskToReadyList+0xbc>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d802      	bhi.n	800c2ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c2a8:	4a1c      	ldr	r2, [pc, #112]	; (800c31c <prvAddNewTaskToReadyList+0xbc>)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c2ae:	4b1d      	ldr	r3, [pc, #116]	; (800c324 <prvAddNewTaskToReadyList+0xc4>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	4a1b      	ldr	r2, [pc, #108]	; (800c324 <prvAddNewTaskToReadyList+0xc4>)
 800c2b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2bc:	2201      	movs	r2, #1
 800c2be:	409a      	lsls	r2, r3
 800c2c0:	4b19      	ldr	r3, [pc, #100]	; (800c328 <prvAddNewTaskToReadyList+0xc8>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	4a18      	ldr	r2, [pc, #96]	; (800c328 <prvAddNewTaskToReadyList+0xc8>)
 800c2c8:	6013      	str	r3, [r2, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4413      	add	r3, r2
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	4a15      	ldr	r2, [pc, #84]	; (800c32c <prvAddNewTaskToReadyList+0xcc>)
 800c2d8:	441a      	add	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	3304      	adds	r3, #4
 800c2de:	4619      	mov	r1, r3
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	f7fe fecc 	bl	800b07e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c2e6:	f000 fff5 	bl	800d2d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c2ea:	4b0d      	ldr	r3, [pc, #52]	; (800c320 <prvAddNewTaskToReadyList+0xc0>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00e      	beq.n	800c310 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c2f2:	4b0a      	ldr	r3, [pc, #40]	; (800c31c <prvAddNewTaskToReadyList+0xbc>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d207      	bcs.n	800c310 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c300:	4b0b      	ldr	r3, [pc, #44]	; (800c330 <prvAddNewTaskToReadyList+0xd0>)
 800c302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c306:	601a      	str	r2, [r3, #0]
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c310:	bf00      	nop
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	24000424 	.word	0x24000424
 800c31c:	24000324 	.word	0x24000324
 800c320:	24000430 	.word	0x24000430
 800c324:	24000440 	.word	0x24000440
 800c328:	2400042c 	.word	0x2400042c
 800c32c:	24000328 	.word	0x24000328
 800c330:	e000ed04 	.word	0xe000ed04

0800c334 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c33c:	2300      	movs	r3, #0
 800c33e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d017      	beq.n	800c376 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c346:	4b13      	ldr	r3, [pc, #76]	; (800c394 <vTaskDelay+0x60>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00a      	beq.n	800c364 <vTaskDelay+0x30>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	60bb      	str	r3, [r7, #8]
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c364:	f000 f87a 	bl	800c45c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c368:	2100      	movs	r1, #0
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 fdf2 	bl	800cf54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c370:	f000 f882 	bl	800c478 <xTaskResumeAll>
 800c374:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d107      	bne.n	800c38c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c37c:	4b06      	ldr	r3, [pc, #24]	; (800c398 <vTaskDelay+0x64>)
 800c37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c38c:	bf00      	nop
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	2400044c 	.word	0x2400044c
 800c398:	e000ed04 	.word	0xe000ed04

0800c39c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08a      	sub	sp, #40	; 0x28
 800c3a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c3aa:	463a      	mov	r2, r7
 800c3ac:	1d39      	adds	r1, r7, #4
 800c3ae:	f107 0308 	add.w	r3, r7, #8
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7f4 fe02 	bl	8000fbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c3b8:	6839      	ldr	r1, [r7, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	9202      	str	r2, [sp, #8]
 800c3c0:	9301      	str	r3, [sp, #4]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	9300      	str	r3, [sp, #0]
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	460a      	mov	r2, r1
 800c3ca:	491e      	ldr	r1, [pc, #120]	; (800c444 <vTaskStartScheduler+0xa8>)
 800c3cc:	481e      	ldr	r0, [pc, #120]	; (800c448 <vTaskStartScheduler+0xac>)
 800c3ce:	f7ff fe1d 	bl	800c00c <xTaskCreateStatic>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	4a1d      	ldr	r2, [pc, #116]	; (800c44c <vTaskStartScheduler+0xb0>)
 800c3d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c3d8:	4b1c      	ldr	r3, [pc, #112]	; (800c44c <vTaskStartScheduler+0xb0>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	617b      	str	r3, [r7, #20]
 800c3e4:	e001      	b.n	800c3ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d116      	bne.n	800c41e <vTaskStartScheduler+0x82>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	613b      	str	r3, [r7, #16]
}
 800c402:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c404:	4b12      	ldr	r3, [pc, #72]	; (800c450 <vTaskStartScheduler+0xb4>)
 800c406:	f04f 32ff 	mov.w	r2, #4294967295
 800c40a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c40c:	4b11      	ldr	r3, [pc, #68]	; (800c454 <vTaskStartScheduler+0xb8>)
 800c40e:	2201      	movs	r2, #1
 800c410:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c412:	4b11      	ldr	r3, [pc, #68]	; (800c458 <vTaskStartScheduler+0xbc>)
 800c414:	2200      	movs	r2, #0
 800c416:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c418:	f000 fe8a 	bl	800d130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c41c:	e00e      	b.n	800c43c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c424:	d10a      	bne.n	800c43c <vTaskStartScheduler+0xa0>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	60fb      	str	r3, [r7, #12]
}
 800c438:	bf00      	nop
 800c43a:	e7fe      	b.n	800c43a <vTaskStartScheduler+0x9e>
}
 800c43c:	bf00      	nop
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	08019d5c 	.word	0x08019d5c
 800c448:	0800ca31 	.word	0x0800ca31
 800c44c:	24000448 	.word	0x24000448
 800c450:	24000444 	.word	0x24000444
 800c454:	24000430 	.word	0x24000430
 800c458:	24000428 	.word	0x24000428

0800c45c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c45c:	b480      	push	{r7}
 800c45e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c460:	4b04      	ldr	r3, [pc, #16]	; (800c474 <vTaskSuspendAll+0x18>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3301      	adds	r3, #1
 800c466:	4a03      	ldr	r2, [pc, #12]	; (800c474 <vTaskSuspendAll+0x18>)
 800c468:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c46a:	bf00      	nop
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	2400044c 	.word	0x2400044c

0800c478 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c47e:	2300      	movs	r3, #0
 800c480:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c482:	2300      	movs	r3, #0
 800c484:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c486:	4b41      	ldr	r3, [pc, #260]	; (800c58c <xTaskResumeAll+0x114>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10a      	bne.n	800c4a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	603b      	str	r3, [r7, #0]
}
 800c4a0:	bf00      	nop
 800c4a2:	e7fe      	b.n	800c4a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c4a4:	f000 fee6 	bl	800d274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c4a8:	4b38      	ldr	r3, [pc, #224]	; (800c58c <xTaskResumeAll+0x114>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	4a37      	ldr	r2, [pc, #220]	; (800c58c <xTaskResumeAll+0x114>)
 800c4b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4b2:	4b36      	ldr	r3, [pc, #216]	; (800c58c <xTaskResumeAll+0x114>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d161      	bne.n	800c57e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c4ba:	4b35      	ldr	r3, [pc, #212]	; (800c590 <xTaskResumeAll+0x118>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d05d      	beq.n	800c57e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4c2:	e02e      	b.n	800c522 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c4:	4b33      	ldr	r3, [pc, #204]	; (800c594 <xTaskResumeAll+0x11c>)
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	3318      	adds	r3, #24
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fe fe31 	bl	800b138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3304      	adds	r3, #4
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7fe fe2c 	bl	800b138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	409a      	lsls	r2, r3
 800c4e8:	4b2b      	ldr	r3, [pc, #172]	; (800c598 <xTaskResumeAll+0x120>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	4a2a      	ldr	r2, [pc, #168]	; (800c598 <xTaskResumeAll+0x120>)
 800c4f0:	6013      	str	r3, [r2, #0]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	4413      	add	r3, r2
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	4a27      	ldr	r2, [pc, #156]	; (800c59c <xTaskResumeAll+0x124>)
 800c500:	441a      	add	r2, r3
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	3304      	adds	r3, #4
 800c506:	4619      	mov	r1, r3
 800c508:	4610      	mov	r0, r2
 800c50a:	f7fe fdb8 	bl	800b07e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c512:	4b23      	ldr	r3, [pc, #140]	; (800c5a0 <xTaskResumeAll+0x128>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c518:	429a      	cmp	r2, r3
 800c51a:	d302      	bcc.n	800c522 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c51c:	4b21      	ldr	r3, [pc, #132]	; (800c5a4 <xTaskResumeAll+0x12c>)
 800c51e:	2201      	movs	r2, #1
 800c520:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c522:	4b1c      	ldr	r3, [pc, #112]	; (800c594 <xTaskResumeAll+0x11c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1cc      	bne.n	800c4c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d001      	beq.n	800c534 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c530:	f000 fb34 	bl	800cb9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c534:	4b1c      	ldr	r3, [pc, #112]	; (800c5a8 <xTaskResumeAll+0x130>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d010      	beq.n	800c562 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c540:	f000 f858 	bl	800c5f4 <xTaskIncrementTick>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d002      	beq.n	800c550 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c54a:	4b16      	ldr	r3, [pc, #88]	; (800c5a4 <xTaskResumeAll+0x12c>)
 800c54c:	2201      	movs	r2, #1
 800c54e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	3b01      	subs	r3, #1
 800c554:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1f1      	bne.n	800c540 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c55c:	4b12      	ldr	r3, [pc, #72]	; (800c5a8 <xTaskResumeAll+0x130>)
 800c55e:	2200      	movs	r2, #0
 800c560:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c562:	4b10      	ldr	r3, [pc, #64]	; (800c5a4 <xTaskResumeAll+0x12c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d009      	beq.n	800c57e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c56a:	2301      	movs	r3, #1
 800c56c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c56e:	4b0f      	ldr	r3, [pc, #60]	; (800c5ac <xTaskResumeAll+0x134>)
 800c570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c57e:	f000 fea9 	bl	800d2d4 <vPortExitCritical>

	return xAlreadyYielded;
 800c582:	68bb      	ldr	r3, [r7, #8]
}
 800c584:	4618      	mov	r0, r3
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	2400044c 	.word	0x2400044c
 800c590:	24000424 	.word	0x24000424
 800c594:	240003e4 	.word	0x240003e4
 800c598:	2400042c 	.word	0x2400042c
 800c59c:	24000328 	.word	0x24000328
 800c5a0:	24000324 	.word	0x24000324
 800c5a4:	24000438 	.word	0x24000438
 800c5a8:	24000434 	.word	0x24000434
 800c5ac:	e000ed04 	.word	0xe000ed04

0800c5b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c5b6:	4b05      	ldr	r3, [pc, #20]	; (800c5cc <xTaskGetTickCount+0x1c>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c5bc:	687b      	ldr	r3, [r7, #4]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	24000428 	.word	0x24000428

0800c5d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5d6:	f000 ff2f 	bl	800d438 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c5da:	2300      	movs	r3, #0
 800c5dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c5de:	4b04      	ldr	r3, [pc, #16]	; (800c5f0 <xTaskGetTickCountFromISR+0x20>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5e4:	683b      	ldr	r3, [r7, #0]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	24000428 	.word	0x24000428

0800c5f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5fe:	4b4e      	ldr	r3, [pc, #312]	; (800c738 <xTaskIncrementTick+0x144>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	f040 808e 	bne.w	800c724 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c608:	4b4c      	ldr	r3, [pc, #304]	; (800c73c <xTaskIncrementTick+0x148>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	3301      	adds	r3, #1
 800c60e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c610:	4a4a      	ldr	r2, [pc, #296]	; (800c73c <xTaskIncrementTick+0x148>)
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d120      	bne.n	800c65e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c61c:	4b48      	ldr	r3, [pc, #288]	; (800c740 <xTaskIncrementTick+0x14c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00a      	beq.n	800c63c <xTaskIncrementTick+0x48>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	603b      	str	r3, [r7, #0]
}
 800c638:	bf00      	nop
 800c63a:	e7fe      	b.n	800c63a <xTaskIncrementTick+0x46>
 800c63c:	4b40      	ldr	r3, [pc, #256]	; (800c740 <xTaskIncrementTick+0x14c>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	60fb      	str	r3, [r7, #12]
 800c642:	4b40      	ldr	r3, [pc, #256]	; (800c744 <xTaskIncrementTick+0x150>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a3e      	ldr	r2, [pc, #248]	; (800c740 <xTaskIncrementTick+0x14c>)
 800c648:	6013      	str	r3, [r2, #0]
 800c64a:	4a3e      	ldr	r2, [pc, #248]	; (800c744 <xTaskIncrementTick+0x150>)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6013      	str	r3, [r2, #0]
 800c650:	4b3d      	ldr	r3, [pc, #244]	; (800c748 <xTaskIncrementTick+0x154>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	3301      	adds	r3, #1
 800c656:	4a3c      	ldr	r2, [pc, #240]	; (800c748 <xTaskIncrementTick+0x154>)
 800c658:	6013      	str	r3, [r2, #0]
 800c65a:	f000 fa9f 	bl	800cb9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c65e:	4b3b      	ldr	r3, [pc, #236]	; (800c74c <xTaskIncrementTick+0x158>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	693a      	ldr	r2, [r7, #16]
 800c664:	429a      	cmp	r2, r3
 800c666:	d348      	bcc.n	800c6fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c668:	4b35      	ldr	r3, [pc, #212]	; (800c740 <xTaskIncrementTick+0x14c>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d104      	bne.n	800c67c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c672:	4b36      	ldr	r3, [pc, #216]	; (800c74c <xTaskIncrementTick+0x158>)
 800c674:	f04f 32ff 	mov.w	r2, #4294967295
 800c678:	601a      	str	r2, [r3, #0]
					break;
 800c67a:	e03e      	b.n	800c6fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c67c:	4b30      	ldr	r3, [pc, #192]	; (800c740 <xTaskIncrementTick+0x14c>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c68c:	693a      	ldr	r2, [r7, #16]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	429a      	cmp	r2, r3
 800c692:	d203      	bcs.n	800c69c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c694:	4a2d      	ldr	r2, [pc, #180]	; (800c74c <xTaskIncrementTick+0x158>)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c69a:	e02e      	b.n	800c6fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7fe fd49 	bl	800b138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d004      	beq.n	800c6b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	3318      	adds	r3, #24
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fe fd40 	bl	800b138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6bc:	2201      	movs	r2, #1
 800c6be:	409a      	lsls	r2, r3
 800c6c0:	4b23      	ldr	r3, [pc, #140]	; (800c750 <xTaskIncrementTick+0x15c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	4a22      	ldr	r2, [pc, #136]	; (800c750 <xTaskIncrementTick+0x15c>)
 800c6c8:	6013      	str	r3, [r2, #0]
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4a1f      	ldr	r2, [pc, #124]	; (800c754 <xTaskIncrementTick+0x160>)
 800c6d8:	441a      	add	r2, r3
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	3304      	adds	r3, #4
 800c6de:	4619      	mov	r1, r3
 800c6e0:	4610      	mov	r0, r2
 800c6e2:	f7fe fccc 	bl	800b07e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ea:	4b1b      	ldr	r3, [pc, #108]	; (800c758 <xTaskIncrementTick+0x164>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d3b9      	bcc.n	800c668 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6f8:	e7b6      	b.n	800c668 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c6fa:	4b17      	ldr	r3, [pc, #92]	; (800c758 <xTaskIncrementTick+0x164>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c700:	4914      	ldr	r1, [pc, #80]	; (800c754 <xTaskIncrementTick+0x160>)
 800c702:	4613      	mov	r3, r2
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4413      	add	r3, r2
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	440b      	add	r3, r1
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d901      	bls.n	800c716 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c712:	2301      	movs	r3, #1
 800c714:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c716:	4b11      	ldr	r3, [pc, #68]	; (800c75c <xTaskIncrementTick+0x168>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d007      	beq.n	800c72e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c71e:	2301      	movs	r3, #1
 800c720:	617b      	str	r3, [r7, #20]
 800c722:	e004      	b.n	800c72e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c724:	4b0e      	ldr	r3, [pc, #56]	; (800c760 <xTaskIncrementTick+0x16c>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	3301      	adds	r3, #1
 800c72a:	4a0d      	ldr	r2, [pc, #52]	; (800c760 <xTaskIncrementTick+0x16c>)
 800c72c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c72e:	697b      	ldr	r3, [r7, #20]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3718      	adds	r7, #24
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	2400044c 	.word	0x2400044c
 800c73c:	24000428 	.word	0x24000428
 800c740:	240003dc 	.word	0x240003dc
 800c744:	240003e0 	.word	0x240003e0
 800c748:	2400043c 	.word	0x2400043c
 800c74c:	24000444 	.word	0x24000444
 800c750:	2400042c 	.word	0x2400042c
 800c754:	24000328 	.word	0x24000328
 800c758:	24000324 	.word	0x24000324
 800c75c:	24000438 	.word	0x24000438
 800c760:	24000434 	.word	0x24000434

0800c764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c764:	b480      	push	{r7}
 800c766:	b087      	sub	sp, #28
 800c768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c76a:	4b27      	ldr	r3, [pc, #156]	; (800c808 <vTaskSwitchContext+0xa4>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d003      	beq.n	800c77a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c772:	4b26      	ldr	r3, [pc, #152]	; (800c80c <vTaskSwitchContext+0xa8>)
 800c774:	2201      	movs	r2, #1
 800c776:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c778:	e03f      	b.n	800c7fa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c77a:	4b24      	ldr	r3, [pc, #144]	; (800c80c <vTaskSwitchContext+0xa8>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c780:	4b23      	ldr	r3, [pc, #140]	; (800c810 <vTaskSwitchContext+0xac>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	fab3 f383 	clz	r3, r3
 800c78c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c78e:	7afb      	ldrb	r3, [r7, #11]
 800c790:	f1c3 031f 	rsb	r3, r3, #31
 800c794:	617b      	str	r3, [r7, #20]
 800c796:	491f      	ldr	r1, [pc, #124]	; (800c814 <vTaskSwitchContext+0xb0>)
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	4613      	mov	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4413      	add	r3, r2
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	440b      	add	r3, r1
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10a      	bne.n	800c7c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	607b      	str	r3, [r7, #4]
}
 800c7bc:	bf00      	nop
 800c7be:	e7fe      	b.n	800c7be <vTaskSwitchContext+0x5a>
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	4613      	mov	r3, r2
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	4413      	add	r3, r2
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	4a12      	ldr	r2, [pc, #72]	; (800c814 <vTaskSwitchContext+0xb0>)
 800c7cc:	4413      	add	r3, r2
 800c7ce:	613b      	str	r3, [r7, #16]
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	685a      	ldr	r2, [r3, #4]
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	605a      	str	r2, [r3, #4]
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	685a      	ldr	r2, [r3, #4]
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	3308      	adds	r3, #8
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d104      	bne.n	800c7f0 <vTaskSwitchContext+0x8c>
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	605a      	str	r2, [r3, #4]
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	4a08      	ldr	r2, [pc, #32]	; (800c818 <vTaskSwitchContext+0xb4>)
 800c7f8:	6013      	str	r3, [r2, #0]
}
 800c7fa:	bf00      	nop
 800c7fc:	371c      	adds	r7, #28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	2400044c 	.word	0x2400044c
 800c80c:	24000438 	.word	0x24000438
 800c810:	2400042c 	.word	0x2400042c
 800c814:	24000328 	.word	0x24000328
 800c818:	24000324 	.word	0x24000324

0800c81c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10a      	bne.n	800c842 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c830:	f383 8811 	msr	BASEPRI, r3
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	60fb      	str	r3, [r7, #12]
}
 800c83e:	bf00      	nop
 800c840:	e7fe      	b.n	800c840 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c842:	4b07      	ldr	r3, [pc, #28]	; (800c860 <vTaskPlaceOnEventList+0x44>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	3318      	adds	r3, #24
 800c848:	4619      	mov	r1, r3
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7fe fc3b 	bl	800b0c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c850:	2101      	movs	r1, #1
 800c852:	6838      	ldr	r0, [r7, #0]
 800c854:	f000 fb7e 	bl	800cf54 <prvAddCurrentTaskToDelayedList>
}
 800c858:	bf00      	nop
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	24000324 	.word	0x24000324

0800c864 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d10a      	bne.n	800c890 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	60fb      	str	r3, [r7, #12]
}
 800c88c:	bf00      	nop
 800c88e:	e7fe      	b.n	800c88e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	3318      	adds	r3, #24
 800c894:	4618      	mov	r0, r3
 800c896:	f7fe fc4f 	bl	800b138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c89a:	4b1d      	ldr	r3, [pc, #116]	; (800c910 <xTaskRemoveFromEventList+0xac>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d11c      	bne.n	800c8dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	3304      	adds	r3, #4
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fe fc46 	bl	800b138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	409a      	lsls	r2, r3
 800c8b4:	4b17      	ldr	r3, [pc, #92]	; (800c914 <xTaskRemoveFromEventList+0xb0>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	4a16      	ldr	r2, [pc, #88]	; (800c914 <xTaskRemoveFromEventList+0xb0>)
 800c8bc:	6013      	str	r3, [r2, #0]
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	4413      	add	r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4a13      	ldr	r2, [pc, #76]	; (800c918 <xTaskRemoveFromEventList+0xb4>)
 800c8cc:	441a      	add	r2, r3
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	3304      	adds	r3, #4
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	f7fe fbd2 	bl	800b07e <vListInsertEnd>
 800c8da:	e005      	b.n	800c8e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	3318      	adds	r3, #24
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	480e      	ldr	r0, [pc, #56]	; (800c91c <xTaskRemoveFromEventList+0xb8>)
 800c8e4:	f7fe fbcb 	bl	800b07e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ec:	4b0c      	ldr	r3, [pc, #48]	; (800c920 <xTaskRemoveFromEventList+0xbc>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d905      	bls.n	800c902 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c8fa:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <xTaskRemoveFromEventList+0xc0>)
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	e001      	b.n	800c906 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c902:	2300      	movs	r3, #0
 800c904:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c906:	697b      	ldr	r3, [r7, #20]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3718      	adds	r7, #24
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	2400044c 	.word	0x2400044c
 800c914:	2400042c 	.word	0x2400042c
 800c918:	24000328 	.word	0x24000328
 800c91c:	240003e4 	.word	0x240003e4
 800c920:	24000324 	.word	0x24000324
 800c924:	24000438 	.word	0x24000438

0800c928 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c930:	4b06      	ldr	r3, [pc, #24]	; (800c94c <vTaskInternalSetTimeOutState+0x24>)
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c938:	4b05      	ldr	r3, [pc, #20]	; (800c950 <vTaskInternalSetTimeOutState+0x28>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	605a      	str	r2, [r3, #4]
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr
 800c94c:	2400043c 	.word	0x2400043c
 800c950:	24000428 	.word	0x24000428

0800c954 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b088      	sub	sp, #32
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d10a      	bne.n	800c97a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c968:	f383 8811 	msr	BASEPRI, r3
 800c96c:	f3bf 8f6f 	isb	sy
 800c970:	f3bf 8f4f 	dsb	sy
 800c974:	613b      	str	r3, [r7, #16]
}
 800c976:	bf00      	nop
 800c978:	e7fe      	b.n	800c978 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10a      	bne.n	800c996 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c984:	f383 8811 	msr	BASEPRI, r3
 800c988:	f3bf 8f6f 	isb	sy
 800c98c:	f3bf 8f4f 	dsb	sy
 800c990:	60fb      	str	r3, [r7, #12]
}
 800c992:	bf00      	nop
 800c994:	e7fe      	b.n	800c994 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c996:	f000 fc6d 	bl	800d274 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c99a:	4b1d      	ldr	r3, [pc, #116]	; (800ca10 <xTaskCheckForTimeOut+0xbc>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	69ba      	ldr	r2, [r7, #24]
 800c9a6:	1ad3      	subs	r3, r2, r3
 800c9a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b2:	d102      	bne.n	800c9ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	61fb      	str	r3, [r7, #28]
 800c9b8:	e023      	b.n	800ca02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	4b15      	ldr	r3, [pc, #84]	; (800ca14 <xTaskCheckForTimeOut+0xc0>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d007      	beq.n	800c9d6 <xTaskCheckForTimeOut+0x82>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	69ba      	ldr	r2, [r7, #24]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d302      	bcc.n	800c9d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	61fb      	str	r3, [r7, #28]
 800c9d4:	e015      	b.n	800ca02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	697a      	ldr	r2, [r7, #20]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d20b      	bcs.n	800c9f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	1ad2      	subs	r2, r2, r3
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f7ff ff9b 	bl	800c928 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	61fb      	str	r3, [r7, #28]
 800c9f6:	e004      	b.n	800ca02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ca02:	f000 fc67 	bl	800d2d4 <vPortExitCritical>

	return xReturn;
 800ca06:	69fb      	ldr	r3, [r7, #28]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3720      	adds	r7, #32
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	24000428 	.word	0x24000428
 800ca14:	2400043c 	.word	0x2400043c

0800ca18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ca18:	b480      	push	{r7}
 800ca1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ca1c:	4b03      	ldr	r3, [pc, #12]	; (800ca2c <vTaskMissedYield+0x14>)
 800ca1e:	2201      	movs	r2, #1
 800ca20:	601a      	str	r2, [r3, #0]
}
 800ca22:	bf00      	nop
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr
 800ca2c:	24000438 	.word	0x24000438

0800ca30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ca38:	f000 f852 	bl	800cae0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ca3c:	4b06      	ldr	r3, [pc, #24]	; (800ca58 <prvIdleTask+0x28>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d9f9      	bls.n	800ca38 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ca44:	4b05      	ldr	r3, [pc, #20]	; (800ca5c <prvIdleTask+0x2c>)
 800ca46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca4a:	601a      	str	r2, [r3, #0]
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ca54:	e7f0      	b.n	800ca38 <prvIdleTask+0x8>
 800ca56:	bf00      	nop
 800ca58:	24000328 	.word	0x24000328
 800ca5c:	e000ed04 	.word	0xe000ed04

0800ca60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca66:	2300      	movs	r3, #0
 800ca68:	607b      	str	r3, [r7, #4]
 800ca6a:	e00c      	b.n	800ca86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	4a12      	ldr	r2, [pc, #72]	; (800cac0 <prvInitialiseTaskLists+0x60>)
 800ca78:	4413      	add	r3, r2
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fe fad2 	bl	800b024 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	3301      	adds	r3, #1
 800ca84:	607b      	str	r3, [r7, #4]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2b06      	cmp	r3, #6
 800ca8a:	d9ef      	bls.n	800ca6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca8c:	480d      	ldr	r0, [pc, #52]	; (800cac4 <prvInitialiseTaskLists+0x64>)
 800ca8e:	f7fe fac9 	bl	800b024 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca92:	480d      	ldr	r0, [pc, #52]	; (800cac8 <prvInitialiseTaskLists+0x68>)
 800ca94:	f7fe fac6 	bl	800b024 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca98:	480c      	ldr	r0, [pc, #48]	; (800cacc <prvInitialiseTaskLists+0x6c>)
 800ca9a:	f7fe fac3 	bl	800b024 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca9e:	480c      	ldr	r0, [pc, #48]	; (800cad0 <prvInitialiseTaskLists+0x70>)
 800caa0:	f7fe fac0 	bl	800b024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800caa4:	480b      	ldr	r0, [pc, #44]	; (800cad4 <prvInitialiseTaskLists+0x74>)
 800caa6:	f7fe fabd 	bl	800b024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800caaa:	4b0b      	ldr	r3, [pc, #44]	; (800cad8 <prvInitialiseTaskLists+0x78>)
 800caac:	4a05      	ldr	r2, [pc, #20]	; (800cac4 <prvInitialiseTaskLists+0x64>)
 800caae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cab0:	4b0a      	ldr	r3, [pc, #40]	; (800cadc <prvInitialiseTaskLists+0x7c>)
 800cab2:	4a05      	ldr	r2, [pc, #20]	; (800cac8 <prvInitialiseTaskLists+0x68>)
 800cab4:	601a      	str	r2, [r3, #0]
}
 800cab6:	bf00      	nop
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	24000328 	.word	0x24000328
 800cac4:	240003b4 	.word	0x240003b4
 800cac8:	240003c8 	.word	0x240003c8
 800cacc:	240003e4 	.word	0x240003e4
 800cad0:	240003f8 	.word	0x240003f8
 800cad4:	24000410 	.word	0x24000410
 800cad8:	240003dc 	.word	0x240003dc
 800cadc:	240003e0 	.word	0x240003e0

0800cae0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cae6:	e019      	b.n	800cb1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cae8:	f000 fbc4 	bl	800d274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caec:	4b10      	ldr	r3, [pc, #64]	; (800cb30 <prvCheckTasksWaitingTermination+0x50>)
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	3304      	adds	r3, #4
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7fe fb1d 	bl	800b138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cafe:	4b0d      	ldr	r3, [pc, #52]	; (800cb34 <prvCheckTasksWaitingTermination+0x54>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	3b01      	subs	r3, #1
 800cb04:	4a0b      	ldr	r2, [pc, #44]	; (800cb34 <prvCheckTasksWaitingTermination+0x54>)
 800cb06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cb08:	4b0b      	ldr	r3, [pc, #44]	; (800cb38 <prvCheckTasksWaitingTermination+0x58>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	4a0a      	ldr	r2, [pc, #40]	; (800cb38 <prvCheckTasksWaitingTermination+0x58>)
 800cb10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cb12:	f000 fbdf 	bl	800d2d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 f810 	bl	800cb3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb1c:	4b06      	ldr	r3, [pc, #24]	; (800cb38 <prvCheckTasksWaitingTermination+0x58>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1e1      	bne.n	800cae8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cb24:	bf00      	nop
 800cb26:	bf00      	nop
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	240003f8 	.word	0x240003f8
 800cb34:	24000424 	.word	0x24000424
 800cb38:	2400040c 	.word	0x2400040c

0800cb3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d108      	bne.n	800cb60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 fd7c 	bl	800d650 <vPortFree>
				vPortFree( pxTCB );
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 fd79 	bl	800d650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cb5e:	e018      	b.n	800cb92 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d103      	bne.n	800cb72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 fd70 	bl	800d650 <vPortFree>
	}
 800cb70:	e00f      	b.n	800cb92 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb78:	2b02      	cmp	r3, #2
 800cb7a:	d00a      	beq.n	800cb92 <prvDeleteTCB+0x56>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	60fb      	str	r3, [r7, #12]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <prvDeleteTCB+0x54>
	}
 800cb92:	bf00      	nop
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
	...

0800cb9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cba2:	4b0c      	ldr	r3, [pc, #48]	; (800cbd4 <prvResetNextTaskUnblockTime+0x38>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d104      	bne.n	800cbb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cbac:	4b0a      	ldr	r3, [pc, #40]	; (800cbd8 <prvResetNextTaskUnblockTime+0x3c>)
 800cbae:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cbb4:	e008      	b.n	800cbc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbb6:	4b07      	ldr	r3, [pc, #28]	; (800cbd4 <prvResetNextTaskUnblockTime+0x38>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	4a04      	ldr	r2, [pc, #16]	; (800cbd8 <prvResetNextTaskUnblockTime+0x3c>)
 800cbc6:	6013      	str	r3, [r2, #0]
}
 800cbc8:	bf00      	nop
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr
 800cbd4:	240003dc 	.word	0x240003dc
 800cbd8:	24000444 	.word	0x24000444

0800cbdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cbe2:	4b0b      	ldr	r3, [pc, #44]	; (800cc10 <xTaskGetSchedulerState+0x34>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d102      	bne.n	800cbf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cbea:	2301      	movs	r3, #1
 800cbec:	607b      	str	r3, [r7, #4]
 800cbee:	e008      	b.n	800cc02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbf0:	4b08      	ldr	r3, [pc, #32]	; (800cc14 <xTaskGetSchedulerState+0x38>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d102      	bne.n	800cbfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	607b      	str	r3, [r7, #4]
 800cbfc:	e001      	b.n	800cc02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cc02:	687b      	ldr	r3, [r7, #4]
	}
 800cc04:	4618      	mov	r0, r3
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr
 800cc10:	24000430 	.word	0x24000430
 800cc14:	2400044c 	.word	0x2400044c

0800cc18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cc24:	2300      	movs	r3, #0
 800cc26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d05e      	beq.n	800ccec <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc32:	4b31      	ldr	r3, [pc, #196]	; (800ccf8 <xTaskPriorityInherit+0xe0>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d24e      	bcs.n	800ccda <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	699b      	ldr	r3, [r3, #24]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	db06      	blt.n	800cc52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc44:	4b2c      	ldr	r3, [pc, #176]	; (800ccf8 <xTaskPriorityInherit+0xe0>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4a:	f1c3 0207 	rsb	r2, r3, #7
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	6959      	ldr	r1, [r3, #20]
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	009b      	lsls	r3, r3, #2
 800cc5e:	4413      	add	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4a26      	ldr	r2, [pc, #152]	; (800ccfc <xTaskPriorityInherit+0xe4>)
 800cc64:	4413      	add	r3, r2
 800cc66:	4299      	cmp	r1, r3
 800cc68:	d12f      	bne.n	800ccca <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	3304      	adds	r3, #4
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe fa62 	bl	800b138 <uxListRemove>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10a      	bne.n	800cc90 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7e:	2201      	movs	r2, #1
 800cc80:	fa02 f303 	lsl.w	r3, r2, r3
 800cc84:	43da      	mvns	r2, r3
 800cc86:	4b1e      	ldr	r3, [pc, #120]	; (800cd00 <xTaskPriorityInherit+0xe8>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	4a1c      	ldr	r2, [pc, #112]	; (800cd00 <xTaskPriorityInherit+0xe8>)
 800cc8e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc90:	4b19      	ldr	r3, [pc, #100]	; (800ccf8 <xTaskPriorityInherit+0xe0>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9e:	2201      	movs	r2, #1
 800cca0:	409a      	lsls	r2, r3
 800cca2:	4b17      	ldr	r3, [pc, #92]	; (800cd00 <xTaskPriorityInherit+0xe8>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4313      	orrs	r3, r2
 800cca8:	4a15      	ldr	r2, [pc, #84]	; (800cd00 <xTaskPriorityInherit+0xe8>)
 800ccaa:	6013      	str	r3, [r2, #0]
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4413      	add	r3, r2
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4a10      	ldr	r2, [pc, #64]	; (800ccfc <xTaskPriorityInherit+0xe4>)
 800ccba:	441a      	add	r2, r3
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	3304      	adds	r3, #4
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	4610      	mov	r0, r2
 800ccc4:	f7fe f9db 	bl	800b07e <vListInsertEnd>
 800ccc8:	e004      	b.n	800ccd4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ccca:	4b0b      	ldr	r3, [pc, #44]	; (800ccf8 <xTaskPriorityInherit+0xe0>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	e008      	b.n	800ccec <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccde:	4b06      	ldr	r3, [pc, #24]	; (800ccf8 <xTaskPriorityInherit+0xe0>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d201      	bcs.n	800ccec <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cce8:	2301      	movs	r3, #1
 800ccea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ccec:	68fb      	ldr	r3, [r7, #12]
	}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	24000324 	.word	0x24000324
 800ccfc:	24000328 	.word	0x24000328
 800cd00:	2400042c 	.word	0x2400042c

0800cd04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cd10:	2300      	movs	r3, #0
 800cd12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d06e      	beq.n	800cdf8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cd1a:	4b3a      	ldr	r3, [pc, #232]	; (800ce04 <xTaskPriorityDisinherit+0x100>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	693a      	ldr	r2, [r7, #16]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d00a      	beq.n	800cd3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	60fb      	str	r3, [r7, #12]
}
 800cd36:	bf00      	nop
 800cd38:	e7fe      	b.n	800cd38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10a      	bne.n	800cd58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	60bb      	str	r3, [r7, #8]
}
 800cd54:	bf00      	nop
 800cd56:	e7fe      	b.n	800cd56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd5c:	1e5a      	subs	r2, r3, #1
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d044      	beq.n	800cdf8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d140      	bne.n	800cdf8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	3304      	adds	r3, #4
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fe f9dc 	bl	800b138 <uxListRemove>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d115      	bne.n	800cdb2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8a:	491f      	ldr	r1, [pc, #124]	; (800ce08 <xTaskPriorityDisinherit+0x104>)
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	4413      	add	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	440b      	add	r3, r1
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10a      	bne.n	800cdb2 <xTaskPriorityDisinherit+0xae>
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda0:	2201      	movs	r2, #1
 800cda2:	fa02 f303 	lsl.w	r3, r2, r3
 800cda6:	43da      	mvns	r2, r3
 800cda8:	4b18      	ldr	r3, [pc, #96]	; (800ce0c <xTaskPriorityDisinherit+0x108>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4013      	ands	r3, r2
 800cdae:	4a17      	ldr	r2, [pc, #92]	; (800ce0c <xTaskPriorityDisinherit+0x108>)
 800cdb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdbe:	f1c3 0207 	rsb	r2, r3, #7
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdca:	2201      	movs	r2, #1
 800cdcc:	409a      	lsls	r2, r3
 800cdce:	4b0f      	ldr	r3, [pc, #60]	; (800ce0c <xTaskPriorityDisinherit+0x108>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	4a0d      	ldr	r2, [pc, #52]	; (800ce0c <xTaskPriorityDisinherit+0x108>)
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cddc:	4613      	mov	r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	4413      	add	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4a08      	ldr	r2, [pc, #32]	; (800ce08 <xTaskPriorityDisinherit+0x104>)
 800cde6:	441a      	add	r2, r3
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	3304      	adds	r3, #4
 800cdec:	4619      	mov	r1, r3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	f7fe f945 	bl	800b07e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cdf8:	697b      	ldr	r3, [r7, #20]
	}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3718      	adds	r7, #24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	24000324 	.word	0x24000324
 800ce08:	24000328 	.word	0x24000328
 800ce0c:	2400042c 	.word	0x2400042c

0800ce10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b088      	sub	sp, #32
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d077      	beq.n	800cf18 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10a      	bne.n	800ce46 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ce30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	60fb      	str	r3, [r7, #12]
}
 800ce42:	bf00      	nop
 800ce44:	e7fe      	b.n	800ce44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d902      	bls.n	800ce56 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	61fb      	str	r3, [r7, #28]
 800ce54:	e002      	b.n	800ce5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce60:	69fa      	ldr	r2, [r7, #28]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d058      	beq.n	800cf18 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce6a:	697a      	ldr	r2, [r7, #20]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d153      	bne.n	800cf18 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ce70:	4b2b      	ldr	r3, [pc, #172]	; (800cf20 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d10a      	bne.n	800ce90 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	60bb      	str	r3, [r7, #8]
}
 800ce8c:	bf00      	nop
 800ce8e:	e7fe      	b.n	800ce8e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	69fa      	ldr	r2, [r7, #28]
 800ce9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	699b      	ldr	r3, [r3, #24]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	db04      	blt.n	800ceae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	f1c3 0207 	rsb	r2, r3, #7
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	6959      	ldr	r1, [r3, #20]
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4a19      	ldr	r2, [pc, #100]	; (800cf24 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cebe:	4413      	add	r3, r2
 800cec0:	4299      	cmp	r1, r3
 800cec2:	d129      	bne.n	800cf18 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	3304      	adds	r3, #4
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fe f935 	bl	800b138 <uxListRemove>
 800cece:	4603      	mov	r3, r0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10a      	bne.n	800ceea <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced8:	2201      	movs	r2, #1
 800ceda:	fa02 f303 	lsl.w	r3, r2, r3
 800cede:	43da      	mvns	r2, r3
 800cee0:	4b11      	ldr	r3, [pc, #68]	; (800cf28 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4013      	ands	r3, r2
 800cee6:	4a10      	ldr	r2, [pc, #64]	; (800cf28 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cee8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceee:	2201      	movs	r2, #1
 800cef0:	409a      	lsls	r2, r3
 800cef2:	4b0d      	ldr	r3, [pc, #52]	; (800cf28 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4313      	orrs	r3, r2
 800cef8:	4a0b      	ldr	r2, [pc, #44]	; (800cf28 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cefa:	6013      	str	r3, [r2, #0]
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf00:	4613      	mov	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	4413      	add	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4a06      	ldr	r2, [pc, #24]	; (800cf24 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cf0a:	441a      	add	r2, r3
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	3304      	adds	r3, #4
 800cf10:	4619      	mov	r1, r3
 800cf12:	4610      	mov	r0, r2
 800cf14:	f7fe f8b3 	bl	800b07e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf18:	bf00      	nop
 800cf1a:	3720      	adds	r7, #32
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	24000324 	.word	0x24000324
 800cf24:	24000328 	.word	0x24000328
 800cf28:	2400042c 	.word	0x2400042c

0800cf2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cf2c:	b480      	push	{r7}
 800cf2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cf30:	4b07      	ldr	r3, [pc, #28]	; (800cf50 <pvTaskIncrementMutexHeldCount+0x24>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d004      	beq.n	800cf42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cf38:	4b05      	ldr	r3, [pc, #20]	; (800cf50 <pvTaskIncrementMutexHeldCount+0x24>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf3e:	3201      	adds	r2, #1
 800cf40:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800cf42:	4b03      	ldr	r3, [pc, #12]	; (800cf50 <pvTaskIncrementMutexHeldCount+0x24>)
 800cf44:	681b      	ldr	r3, [r3, #0]
	}
 800cf46:	4618      	mov	r0, r3
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr
 800cf50:	24000324 	.word	0x24000324

0800cf54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf5e:	4b29      	ldr	r3, [pc, #164]	; (800d004 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf64:	4b28      	ldr	r3, [pc, #160]	; (800d008 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	3304      	adds	r3, #4
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fe f8e4 	bl	800b138 <uxListRemove>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d10b      	bne.n	800cf8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cf76:	4b24      	ldr	r3, [pc, #144]	; (800d008 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf82:	43da      	mvns	r2, r3
 800cf84:	4b21      	ldr	r3, [pc, #132]	; (800d00c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4013      	ands	r3, r2
 800cf8a:	4a20      	ldr	r2, [pc, #128]	; (800d00c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cf8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf94:	d10a      	bne.n	800cfac <prvAddCurrentTaskToDelayedList+0x58>
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d007      	beq.n	800cfac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf9c:	4b1a      	ldr	r3, [pc, #104]	; (800d008 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	481a      	ldr	r0, [pc, #104]	; (800d010 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cfa6:	f7fe f86a 	bl	800b07e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cfaa:	e026      	b.n	800cffa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cfb4:	4b14      	ldr	r3, [pc, #80]	; (800d008 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cfbc:	68ba      	ldr	r2, [r7, #8]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d209      	bcs.n	800cfd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfc4:	4b13      	ldr	r3, [pc, #76]	; (800d014 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	4b0f      	ldr	r3, [pc, #60]	; (800d008 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	3304      	adds	r3, #4
 800cfce:	4619      	mov	r1, r3
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	f7fe f878 	bl	800b0c6 <vListInsert>
}
 800cfd6:	e010      	b.n	800cffa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfd8:	4b0f      	ldr	r3, [pc, #60]	; (800d018 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	4b0a      	ldr	r3, [pc, #40]	; (800d008 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	3304      	adds	r3, #4
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	f7fe f86e 	bl	800b0c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cfea:	4b0c      	ldr	r3, [pc, #48]	; (800d01c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d202      	bcs.n	800cffa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cff4:	4a09      	ldr	r2, [pc, #36]	; (800d01c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	6013      	str	r3, [r2, #0]
}
 800cffa:	bf00      	nop
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	24000428 	.word	0x24000428
 800d008:	24000324 	.word	0x24000324
 800d00c:	2400042c 	.word	0x2400042c
 800d010:	24000410 	.word	0x24000410
 800d014:	240003e0 	.word	0x240003e0
 800d018:	240003dc 	.word	0x240003dc
 800d01c:	24000444 	.word	0x24000444

0800d020 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	3b04      	subs	r3, #4
 800d030:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d038:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3b04      	subs	r3, #4
 800d03e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	f023 0201 	bic.w	r2, r3, #1
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	3b04      	subs	r3, #4
 800d04e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d050:	4a0c      	ldr	r2, [pc, #48]	; (800d084 <pxPortInitialiseStack+0x64>)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	3b14      	subs	r3, #20
 800d05a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	3b04      	subs	r3, #4
 800d066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f06f 0202 	mvn.w	r2, #2
 800d06e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	3b20      	subs	r3, #32
 800d074:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d076:	68fb      	ldr	r3, [r7, #12]
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3714      	adds	r7, #20
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr
 800d084:	0800d089 	.word	0x0800d089

0800d088 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d08e:	2300      	movs	r3, #0
 800d090:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d092:	4b12      	ldr	r3, [pc, #72]	; (800d0dc <prvTaskExitError+0x54>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d09a:	d00a      	beq.n	800d0b2 <prvTaskExitError+0x2a>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	60fb      	str	r3, [r7, #12]
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <prvTaskExitError+0x28>
	__asm volatile
 800d0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b6:	f383 8811 	msr	BASEPRI, r3
 800d0ba:	f3bf 8f6f 	isb	sy
 800d0be:	f3bf 8f4f 	dsb	sy
 800d0c2:	60bb      	str	r3, [r7, #8]
}
 800d0c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0c6:	bf00      	nop
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d0fc      	beq.n	800d0c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0ce:	bf00      	nop
 800d0d0:	bf00      	nop
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr
 800d0dc:	24000034 	.word	0x24000034

0800d0e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d0e0:	4b07      	ldr	r3, [pc, #28]	; (800d100 <pxCurrentTCBConst2>)
 800d0e2:	6819      	ldr	r1, [r3, #0]
 800d0e4:	6808      	ldr	r0, [r1, #0]
 800d0e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ea:	f380 8809 	msr	PSP, r0
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f04f 0000 	mov.w	r0, #0
 800d0f6:	f380 8811 	msr	BASEPRI, r0
 800d0fa:	4770      	bx	lr
 800d0fc:	f3af 8000 	nop.w

0800d100 <pxCurrentTCBConst2>:
 800d100:	24000324 	.word	0x24000324
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d104:	bf00      	nop
 800d106:	bf00      	nop

0800d108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d108:	4808      	ldr	r0, [pc, #32]	; (800d12c <prvPortStartFirstTask+0x24>)
 800d10a:	6800      	ldr	r0, [r0, #0]
 800d10c:	6800      	ldr	r0, [r0, #0]
 800d10e:	f380 8808 	msr	MSP, r0
 800d112:	f04f 0000 	mov.w	r0, #0
 800d116:	f380 8814 	msr	CONTROL, r0
 800d11a:	b662      	cpsie	i
 800d11c:	b661      	cpsie	f
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	df00      	svc	0
 800d128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d12a:	bf00      	nop
 800d12c:	e000ed08 	.word	0xe000ed08

0800d130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d136:	4b46      	ldr	r3, [pc, #280]	; (800d250 <xPortStartScheduler+0x120>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4a46      	ldr	r2, [pc, #280]	; (800d254 <xPortStartScheduler+0x124>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d10a      	bne.n	800d156 <xPortStartScheduler+0x26>
	__asm volatile
 800d140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	613b      	str	r3, [r7, #16]
}
 800d152:	bf00      	nop
 800d154:	e7fe      	b.n	800d154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d156:	4b3e      	ldr	r3, [pc, #248]	; (800d250 <xPortStartScheduler+0x120>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a3f      	ldr	r2, [pc, #252]	; (800d258 <xPortStartScheduler+0x128>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d10a      	bne.n	800d176 <xPortStartScheduler+0x46>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	60fb      	str	r3, [r7, #12]
}
 800d172:	bf00      	nop
 800d174:	e7fe      	b.n	800d174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d176:	4b39      	ldr	r3, [pc, #228]	; (800d25c <xPortStartScheduler+0x12c>)
 800d178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	22ff      	movs	r2, #255	; 0xff
 800d186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d190:	78fb      	ldrb	r3, [r7, #3]
 800d192:	b2db      	uxtb	r3, r3
 800d194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d198:	b2da      	uxtb	r2, r3
 800d19a:	4b31      	ldr	r3, [pc, #196]	; (800d260 <xPortStartScheduler+0x130>)
 800d19c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d19e:	4b31      	ldr	r3, [pc, #196]	; (800d264 <xPortStartScheduler+0x134>)
 800d1a0:	2207      	movs	r2, #7
 800d1a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1a4:	e009      	b.n	800d1ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d1a6:	4b2f      	ldr	r3, [pc, #188]	; (800d264 <xPortStartScheduler+0x134>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	4a2d      	ldr	r2, [pc, #180]	; (800d264 <xPortStartScheduler+0x134>)
 800d1ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	005b      	lsls	r3, r3, #1
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1ba:	78fb      	ldrb	r3, [r7, #3]
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1c2:	2b80      	cmp	r3, #128	; 0x80
 800d1c4:	d0ef      	beq.n	800d1a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1c6:	4b27      	ldr	r3, [pc, #156]	; (800d264 <xPortStartScheduler+0x134>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f1c3 0307 	rsb	r3, r3, #7
 800d1ce:	2b04      	cmp	r3, #4
 800d1d0:	d00a      	beq.n	800d1e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d6:	f383 8811 	msr	BASEPRI, r3
 800d1da:	f3bf 8f6f 	isb	sy
 800d1de:	f3bf 8f4f 	dsb	sy
 800d1e2:	60bb      	str	r3, [r7, #8]
}
 800d1e4:	bf00      	nop
 800d1e6:	e7fe      	b.n	800d1e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d1e8:	4b1e      	ldr	r3, [pc, #120]	; (800d264 <xPortStartScheduler+0x134>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	021b      	lsls	r3, r3, #8
 800d1ee:	4a1d      	ldr	r2, [pc, #116]	; (800d264 <xPortStartScheduler+0x134>)
 800d1f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d1f2:	4b1c      	ldr	r3, [pc, #112]	; (800d264 <xPortStartScheduler+0x134>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d1fa:	4a1a      	ldr	r2, [pc, #104]	; (800d264 <xPortStartScheduler+0x134>)
 800d1fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	b2da      	uxtb	r2, r3
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d206:	4b18      	ldr	r3, [pc, #96]	; (800d268 <xPortStartScheduler+0x138>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a17      	ldr	r2, [pc, #92]	; (800d268 <xPortStartScheduler+0x138>)
 800d20c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d212:	4b15      	ldr	r3, [pc, #84]	; (800d268 <xPortStartScheduler+0x138>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a14      	ldr	r2, [pc, #80]	; (800d268 <xPortStartScheduler+0x138>)
 800d218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d21c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d21e:	f000 f8dd 	bl	800d3dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d222:	4b12      	ldr	r3, [pc, #72]	; (800d26c <xPortStartScheduler+0x13c>)
 800d224:	2200      	movs	r2, #0
 800d226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d228:	f000 f8fc 	bl	800d424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d22c:	4b10      	ldr	r3, [pc, #64]	; (800d270 <xPortStartScheduler+0x140>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a0f      	ldr	r2, [pc, #60]	; (800d270 <xPortStartScheduler+0x140>)
 800d232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d238:	f7ff ff66 	bl	800d108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d23c:	f7ff fa92 	bl	800c764 <vTaskSwitchContext>
	prvTaskExitError();
 800d240:	f7ff ff22 	bl	800d088 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d244:	2300      	movs	r3, #0
}
 800d246:	4618      	mov	r0, r3
 800d248:	3718      	adds	r7, #24
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	e000ed00 	.word	0xe000ed00
 800d254:	410fc271 	.word	0x410fc271
 800d258:	410fc270 	.word	0x410fc270
 800d25c:	e000e400 	.word	0xe000e400
 800d260:	24000450 	.word	0x24000450
 800d264:	24000454 	.word	0x24000454
 800d268:	e000ed20 	.word	0xe000ed20
 800d26c:	24000034 	.word	0x24000034
 800d270:	e000ef34 	.word	0xe000ef34

0800d274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
	__asm volatile
 800d27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	607b      	str	r3, [r7, #4]
}
 800d28c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d28e:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <vPortEnterCritical+0x58>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3301      	adds	r3, #1
 800d294:	4a0d      	ldr	r2, [pc, #52]	; (800d2cc <vPortEnterCritical+0x58>)
 800d296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d298:	4b0c      	ldr	r3, [pc, #48]	; (800d2cc <vPortEnterCritical+0x58>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d10f      	bne.n	800d2c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2a0:	4b0b      	ldr	r3, [pc, #44]	; (800d2d0 <vPortEnterCritical+0x5c>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d00a      	beq.n	800d2c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	603b      	str	r3, [r7, #0]
}
 800d2bc:	bf00      	nop
 800d2be:	e7fe      	b.n	800d2be <vPortEnterCritical+0x4a>
	}
}
 800d2c0:	bf00      	nop
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr
 800d2cc:	24000034 	.word	0x24000034
 800d2d0:	e000ed04 	.word	0xe000ed04

0800d2d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d2da:	4b12      	ldr	r3, [pc, #72]	; (800d324 <vPortExitCritical+0x50>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d10a      	bne.n	800d2f8 <vPortExitCritical+0x24>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	607b      	str	r3, [r7, #4]
}
 800d2f4:	bf00      	nop
 800d2f6:	e7fe      	b.n	800d2f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d2f8:	4b0a      	ldr	r3, [pc, #40]	; (800d324 <vPortExitCritical+0x50>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	4a09      	ldr	r2, [pc, #36]	; (800d324 <vPortExitCritical+0x50>)
 800d300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d302:	4b08      	ldr	r3, [pc, #32]	; (800d324 <vPortExitCritical+0x50>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d105      	bne.n	800d316 <vPortExitCritical+0x42>
 800d30a:	2300      	movs	r3, #0
 800d30c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	f383 8811 	msr	BASEPRI, r3
}
 800d314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d316:	bf00      	nop
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	24000034 	.word	0x24000034
	...

0800d330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d330:	f3ef 8009 	mrs	r0, PSP
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	4b15      	ldr	r3, [pc, #84]	; (800d390 <pxCurrentTCBConst>)
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	f01e 0f10 	tst.w	lr, #16
 800d340:	bf08      	it	eq
 800d342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d34a:	6010      	str	r0, [r2, #0]
 800d34c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d350:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d354:	f380 8811 	msr	BASEPRI, r0
 800d358:	f3bf 8f4f 	dsb	sy
 800d35c:	f3bf 8f6f 	isb	sy
 800d360:	f7ff fa00 	bl	800c764 <vTaskSwitchContext>
 800d364:	f04f 0000 	mov.w	r0, #0
 800d368:	f380 8811 	msr	BASEPRI, r0
 800d36c:	bc09      	pop	{r0, r3}
 800d36e:	6819      	ldr	r1, [r3, #0]
 800d370:	6808      	ldr	r0, [r1, #0]
 800d372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d376:	f01e 0f10 	tst.w	lr, #16
 800d37a:	bf08      	it	eq
 800d37c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d380:	f380 8809 	msr	PSP, r0
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	f3af 8000 	nop.w

0800d390 <pxCurrentTCBConst>:
 800d390:	24000324 	.word	0x24000324
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d394:	bf00      	nop
 800d396:	bf00      	nop

0800d398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
	__asm volatile
 800d39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a2:	f383 8811 	msr	BASEPRI, r3
 800d3a6:	f3bf 8f6f 	isb	sy
 800d3aa:	f3bf 8f4f 	dsb	sy
 800d3ae:	607b      	str	r3, [r7, #4]
}
 800d3b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3b2:	f7ff f91f 	bl	800c5f4 <xTaskIncrementTick>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d003      	beq.n	800d3c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3bc:	4b06      	ldr	r3, [pc, #24]	; (800d3d8 <SysTick_Handler+0x40>)
 800d3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3c2:	601a      	str	r2, [r3, #0]
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	f383 8811 	msr	BASEPRI, r3
}
 800d3ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d3d0:	bf00      	nop
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	e000ed04 	.word	0xe000ed04

0800d3dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3dc:	b480      	push	{r7}
 800d3de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d3e0:	4b0b      	ldr	r3, [pc, #44]	; (800d410 <vPortSetupTimerInterrupt+0x34>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3e6:	4b0b      	ldr	r3, [pc, #44]	; (800d414 <vPortSetupTimerInterrupt+0x38>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d3ec:	4b0a      	ldr	r3, [pc, #40]	; (800d418 <vPortSetupTimerInterrupt+0x3c>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a0a      	ldr	r2, [pc, #40]	; (800d41c <vPortSetupTimerInterrupt+0x40>)
 800d3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3f6:	099b      	lsrs	r3, r3, #6
 800d3f8:	4a09      	ldr	r2, [pc, #36]	; (800d420 <vPortSetupTimerInterrupt+0x44>)
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3fe:	4b04      	ldr	r3, [pc, #16]	; (800d410 <vPortSetupTimerInterrupt+0x34>)
 800d400:	2207      	movs	r2, #7
 800d402:	601a      	str	r2, [r3, #0]
}
 800d404:	bf00      	nop
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	e000e010 	.word	0xe000e010
 800d414:	e000e018 	.word	0xe000e018
 800d418:	24000010 	.word	0x24000010
 800d41c:	10624dd3 	.word	0x10624dd3
 800d420:	e000e014 	.word	0xe000e014

0800d424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d434 <vPortEnableVFP+0x10>
 800d428:	6801      	ldr	r1, [r0, #0]
 800d42a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d42e:	6001      	str	r1, [r0, #0]
 800d430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d432:	bf00      	nop
 800d434:	e000ed88 	.word	0xe000ed88

0800d438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d438:	b480      	push	{r7}
 800d43a:	b085      	sub	sp, #20
 800d43c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d43e:	f3ef 8305 	mrs	r3, IPSR
 800d442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2b0f      	cmp	r3, #15
 800d448:	d914      	bls.n	800d474 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d44a:	4a17      	ldr	r2, [pc, #92]	; (800d4a8 <vPortValidateInterruptPriority+0x70>)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	4413      	add	r3, r2
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d454:	4b15      	ldr	r3, [pc, #84]	; (800d4ac <vPortValidateInterruptPriority+0x74>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	7afa      	ldrb	r2, [r7, #11]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d20a      	bcs.n	800d474 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	607b      	str	r3, [r7, #4]
}
 800d470:	bf00      	nop
 800d472:	e7fe      	b.n	800d472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d474:	4b0e      	ldr	r3, [pc, #56]	; (800d4b0 <vPortValidateInterruptPriority+0x78>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d47c:	4b0d      	ldr	r3, [pc, #52]	; (800d4b4 <vPortValidateInterruptPriority+0x7c>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	429a      	cmp	r2, r3
 800d482:	d90a      	bls.n	800d49a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	603b      	str	r3, [r7, #0]
}
 800d496:	bf00      	nop
 800d498:	e7fe      	b.n	800d498 <vPortValidateInterruptPriority+0x60>
	}
 800d49a:	bf00      	nop
 800d49c:	3714      	adds	r7, #20
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	e000e3f0 	.word	0xe000e3f0
 800d4ac:	24000450 	.word	0x24000450
 800d4b0:	e000ed0c 	.word	0xe000ed0c
 800d4b4:	24000454 	.word	0x24000454

0800d4b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b08a      	sub	sp, #40	; 0x28
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4c4:	f7fe ffca 	bl	800c45c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4c8:	4b5b      	ldr	r3, [pc, #364]	; (800d638 <pvPortMalloc+0x180>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d101      	bne.n	800d4d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d4d0:	f000 f920 	bl	800d714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d4d4:	4b59      	ldr	r3, [pc, #356]	; (800d63c <pvPortMalloc+0x184>)
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4013      	ands	r3, r2
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f040 8093 	bne.w	800d608 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d01d      	beq.n	800d524 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d4e8:	2208      	movs	r2, #8
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f003 0307 	and.w	r3, r3, #7
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d014      	beq.n	800d524 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f023 0307 	bic.w	r3, r3, #7
 800d500:	3308      	adds	r3, #8
 800d502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f003 0307 	and.w	r3, r3, #7
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d00a      	beq.n	800d524 <pvPortMalloc+0x6c>
	__asm volatile
 800d50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d512:	f383 8811 	msr	BASEPRI, r3
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	f3bf 8f4f 	dsb	sy
 800d51e:	617b      	str	r3, [r7, #20]
}
 800d520:	bf00      	nop
 800d522:	e7fe      	b.n	800d522 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d06e      	beq.n	800d608 <pvPortMalloc+0x150>
 800d52a:	4b45      	ldr	r3, [pc, #276]	; (800d640 <pvPortMalloc+0x188>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	429a      	cmp	r2, r3
 800d532:	d869      	bhi.n	800d608 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d534:	4b43      	ldr	r3, [pc, #268]	; (800d644 <pvPortMalloc+0x18c>)
 800d536:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d538:	4b42      	ldr	r3, [pc, #264]	; (800d644 <pvPortMalloc+0x18c>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d53e:	e004      	b.n	800d54a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d542:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	429a      	cmp	r2, r3
 800d552:	d903      	bls.n	800d55c <pvPortMalloc+0xa4>
 800d554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1f1      	bne.n	800d540 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d55c:	4b36      	ldr	r3, [pc, #216]	; (800d638 <pvPortMalloc+0x180>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d562:	429a      	cmp	r2, r3
 800d564:	d050      	beq.n	800d608 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d566:	6a3b      	ldr	r3, [r7, #32]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2208      	movs	r2, #8
 800d56c:	4413      	add	r3, r2
 800d56e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	6a3b      	ldr	r3, [r7, #32]
 800d576:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57a:	685a      	ldr	r2, [r3, #4]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	1ad2      	subs	r2, r2, r3
 800d580:	2308      	movs	r3, #8
 800d582:	005b      	lsls	r3, r3, #1
 800d584:	429a      	cmp	r2, r3
 800d586:	d91f      	bls.n	800d5c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	4413      	add	r3, r2
 800d58e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	f003 0307 	and.w	r3, r3, #7
 800d596:	2b00      	cmp	r3, #0
 800d598:	d00a      	beq.n	800d5b0 <pvPortMalloc+0xf8>
	__asm volatile
 800d59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	613b      	str	r3, [r7, #16]
}
 800d5ac:	bf00      	nop
 800d5ae:	e7fe      	b.n	800d5ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b2:	685a      	ldr	r2, [r3, #4]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	1ad2      	subs	r2, r2, r3
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5c2:	69b8      	ldr	r0, [r7, #24]
 800d5c4:	f000 f908 	bl	800d7d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5c8:	4b1d      	ldr	r3, [pc, #116]	; (800d640 <pvPortMalloc+0x188>)
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	4a1b      	ldr	r2, [pc, #108]	; (800d640 <pvPortMalloc+0x188>)
 800d5d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5d6:	4b1a      	ldr	r3, [pc, #104]	; (800d640 <pvPortMalloc+0x188>)
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	4b1b      	ldr	r3, [pc, #108]	; (800d648 <pvPortMalloc+0x190>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d203      	bcs.n	800d5ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d5e2:	4b17      	ldr	r3, [pc, #92]	; (800d640 <pvPortMalloc+0x188>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a18      	ldr	r2, [pc, #96]	; (800d648 <pvPortMalloc+0x190>)
 800d5e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ec:	685a      	ldr	r2, [r3, #4]
 800d5ee:	4b13      	ldr	r3, [pc, #76]	; (800d63c <pvPortMalloc+0x184>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	431a      	orrs	r2, r3
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d5fe:	4b13      	ldr	r3, [pc, #76]	; (800d64c <pvPortMalloc+0x194>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	3301      	adds	r3, #1
 800d604:	4a11      	ldr	r2, [pc, #68]	; (800d64c <pvPortMalloc+0x194>)
 800d606:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d608:	f7fe ff36 	bl	800c478 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	f003 0307 	and.w	r3, r3, #7
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00a      	beq.n	800d62c <pvPortMalloc+0x174>
	__asm volatile
 800d616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	60fb      	str	r3, [r7, #12]
}
 800d628:	bf00      	nop
 800d62a:	e7fe      	b.n	800d62a <pvPortMalloc+0x172>
	return pvReturn;
 800d62c:	69fb      	ldr	r3, [r7, #28]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3728      	adds	r7, #40	; 0x28
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	24004060 	.word	0x24004060
 800d63c:	24004074 	.word	0x24004074
 800d640:	24004064 	.word	0x24004064
 800d644:	24004058 	.word	0x24004058
 800d648:	24004068 	.word	0x24004068
 800d64c:	2400406c 	.word	0x2400406c

0800d650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d04d      	beq.n	800d6fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d662:	2308      	movs	r3, #8
 800d664:	425b      	negs	r3, r3
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	4413      	add	r3, r2
 800d66a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	4b24      	ldr	r3, [pc, #144]	; (800d708 <vPortFree+0xb8>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4013      	ands	r3, r2
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10a      	bne.n	800d694 <vPortFree+0x44>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	60fb      	str	r3, [r7, #12]
}
 800d690:	bf00      	nop
 800d692:	e7fe      	b.n	800d692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00a      	beq.n	800d6b2 <vPortFree+0x62>
	__asm volatile
 800d69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a0:	f383 8811 	msr	BASEPRI, r3
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	f3bf 8f4f 	dsb	sy
 800d6ac:	60bb      	str	r3, [r7, #8]
}
 800d6ae:	bf00      	nop
 800d6b0:	e7fe      	b.n	800d6b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	4b14      	ldr	r3, [pc, #80]	; (800d708 <vPortFree+0xb8>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4013      	ands	r3, r2
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d01e      	beq.n	800d6fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d11a      	bne.n	800d6fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	4b0e      	ldr	r3, [pc, #56]	; (800d708 <vPortFree+0xb8>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	43db      	mvns	r3, r3
 800d6d2:	401a      	ands	r2, r3
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6d8:	f7fe fec0 	bl	800c45c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	685a      	ldr	r2, [r3, #4]
 800d6e0:	4b0a      	ldr	r3, [pc, #40]	; (800d70c <vPortFree+0xbc>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	4a09      	ldr	r2, [pc, #36]	; (800d70c <vPortFree+0xbc>)
 800d6e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d6ea:	6938      	ldr	r0, [r7, #16]
 800d6ec:	f000 f874 	bl	800d7d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d6f0:	4b07      	ldr	r3, [pc, #28]	; (800d710 <vPortFree+0xc0>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	4a06      	ldr	r2, [pc, #24]	; (800d710 <vPortFree+0xc0>)
 800d6f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d6fa:	f7fe febd 	bl	800c478 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d6fe:	bf00      	nop
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	24004074 	.word	0x24004074
 800d70c:	24004064 	.word	0x24004064
 800d710:	24004070 	.word	0x24004070

0800d714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d714:	b480      	push	{r7}
 800d716:	b085      	sub	sp, #20
 800d718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d71a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d71e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d720:	4b27      	ldr	r3, [pc, #156]	; (800d7c0 <prvHeapInit+0xac>)
 800d722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f003 0307 	and.w	r3, r3, #7
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00c      	beq.n	800d748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	3307      	adds	r3, #7
 800d732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f023 0307 	bic.w	r3, r3, #7
 800d73a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	1ad3      	subs	r3, r2, r3
 800d742:	4a1f      	ldr	r2, [pc, #124]	; (800d7c0 <prvHeapInit+0xac>)
 800d744:	4413      	add	r3, r2
 800d746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d74c:	4a1d      	ldr	r2, [pc, #116]	; (800d7c4 <prvHeapInit+0xb0>)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d752:	4b1c      	ldr	r3, [pc, #112]	; (800d7c4 <prvHeapInit+0xb0>)
 800d754:	2200      	movs	r2, #0
 800d756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	68ba      	ldr	r2, [r7, #8]
 800d75c:	4413      	add	r3, r2
 800d75e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d760:	2208      	movs	r2, #8
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	1a9b      	subs	r3, r3, r2
 800d766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f023 0307 	bic.w	r3, r3, #7
 800d76e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	4a15      	ldr	r2, [pc, #84]	; (800d7c8 <prvHeapInit+0xb4>)
 800d774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d776:	4b14      	ldr	r3, [pc, #80]	; (800d7c8 <prvHeapInit+0xb4>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2200      	movs	r2, #0
 800d77c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d77e:	4b12      	ldr	r3, [pc, #72]	; (800d7c8 <prvHeapInit+0xb4>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2200      	movs	r2, #0
 800d784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	1ad2      	subs	r2, r2, r3
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d794:	4b0c      	ldr	r3, [pc, #48]	; (800d7c8 <prvHeapInit+0xb4>)
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	4a0a      	ldr	r2, [pc, #40]	; (800d7cc <prvHeapInit+0xb8>)
 800d7a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	4a09      	ldr	r2, [pc, #36]	; (800d7d0 <prvHeapInit+0xbc>)
 800d7aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7ac:	4b09      	ldr	r3, [pc, #36]	; (800d7d4 <prvHeapInit+0xc0>)
 800d7ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d7b2:	601a      	str	r2, [r3, #0]
}
 800d7b4:	bf00      	nop
 800d7b6:	3714      	adds	r7, #20
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	24000458 	.word	0x24000458
 800d7c4:	24004058 	.word	0x24004058
 800d7c8:	24004060 	.word	0x24004060
 800d7cc:	24004068 	.word	0x24004068
 800d7d0:	24004064 	.word	0x24004064
 800d7d4:	24004074 	.word	0x24004074

0800d7d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7e0:	4b28      	ldr	r3, [pc, #160]	; (800d884 <prvInsertBlockIntoFreeList+0xac>)
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	e002      	b.n	800d7ec <prvInsertBlockIntoFreeList+0x14>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d8f7      	bhi.n	800d7e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	4413      	add	r3, r2
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	429a      	cmp	r2, r3
 800d806:	d108      	bne.n	800d81a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	441a      	add	r2, r3
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	441a      	add	r2, r3
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d118      	bne.n	800d860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	4b15      	ldr	r3, [pc, #84]	; (800d888 <prvInsertBlockIntoFreeList+0xb0>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	429a      	cmp	r2, r3
 800d838:	d00d      	beq.n	800d856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	685a      	ldr	r2, [r3, #4]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	441a      	add	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	601a      	str	r2, [r3, #0]
 800d854:	e008      	b.n	800d868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d856:	4b0c      	ldr	r3, [pc, #48]	; (800d888 <prvInsertBlockIntoFreeList+0xb0>)
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	601a      	str	r2, [r3, #0]
 800d85e:	e003      	b.n	800d868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d002      	beq.n	800d876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d876:	bf00      	nop
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	24004058 	.word	0x24004058
 800d888:	24004060 	.word	0x24004060

0800d88c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d896:	f008 fa81 	bl	8015d9c <sys_timeouts_sleeptime>
 800d89a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a2:	d10b      	bne.n	800d8bc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d8a4:	4813      	ldr	r0, [pc, #76]	; (800d8f4 <tcpip_timeouts_mbox_fetch+0x68>)
 800d8a6:	f00b f8a8 	bl	80189fa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f00b f81a 	bl	80188e8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d8b4:	480f      	ldr	r0, [pc, #60]	; (800d8f4 <tcpip_timeouts_mbox_fetch+0x68>)
 800d8b6:	f00b f891 	bl	80189dc <sys_mutex_lock>
    return;
 800d8ba:	e018      	b.n	800d8ee <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d102      	bne.n	800d8c8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d8c2:	f008 fa31 	bl	8015d28 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d8c6:	e7e6      	b.n	800d896 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d8c8:	480a      	ldr	r0, [pc, #40]	; (800d8f4 <tcpip_timeouts_mbox_fetch+0x68>)
 800d8ca:	f00b f896 	bl	80189fa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	6839      	ldr	r1, [r7, #0]
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f00b f808 	bl	80188e8 <sys_arch_mbox_fetch>
 800d8d8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d8da:	4806      	ldr	r0, [pc, #24]	; (800d8f4 <tcpip_timeouts_mbox_fetch+0x68>)
 800d8dc:	f00b f87e 	bl	80189dc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e6:	d102      	bne.n	800d8ee <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d8e8:	f008 fa1e 	bl	8015d28 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d8ec:	e7d3      	b.n	800d896 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	2400473c 	.word	0x2400473c

0800d8f8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d900:	4810      	ldr	r0, [pc, #64]	; (800d944 <tcpip_thread+0x4c>)
 800d902:	f00b f86b 	bl	80189dc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d906:	4b10      	ldr	r3, [pc, #64]	; (800d948 <tcpip_thread+0x50>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d005      	beq.n	800d91a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d90e:	4b0e      	ldr	r3, [pc, #56]	; (800d948 <tcpip_thread+0x50>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4a0e      	ldr	r2, [pc, #56]	; (800d94c <tcpip_thread+0x54>)
 800d914:	6812      	ldr	r2, [r2, #0]
 800d916:	4610      	mov	r0, r2
 800d918:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d91a:	f107 030c 	add.w	r3, r7, #12
 800d91e:	4619      	mov	r1, r3
 800d920:	480b      	ldr	r0, [pc, #44]	; (800d950 <tcpip_thread+0x58>)
 800d922:	f7ff ffb3 	bl	800d88c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d106      	bne.n	800d93a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d92c:	4b09      	ldr	r3, [pc, #36]	; (800d954 <tcpip_thread+0x5c>)
 800d92e:	2291      	movs	r2, #145	; 0x91
 800d930:	4909      	ldr	r1, [pc, #36]	; (800d958 <tcpip_thread+0x60>)
 800d932:	480a      	ldr	r0, [pc, #40]	; (800d95c <tcpip_thread+0x64>)
 800d934:	f00b f8fa 	bl	8018b2c <iprintf>
      continue;
 800d938:	e003      	b.n	800d942 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f000 f80f 	bl	800d960 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d942:	e7ea      	b.n	800d91a <tcpip_thread+0x22>
 800d944:	2400473c 	.word	0x2400473c
 800d948:	24004078 	.word	0x24004078
 800d94c:	2400407c 	.word	0x2400407c
 800d950:	24004080 	.word	0x24004080
 800d954:	08019d64 	.word	0x08019d64
 800d958:	08019d94 	.word	0x08019d94
 800d95c:	08019db4 	.word	0x08019db4

0800d960 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d026      	beq.n	800d9be <tcpip_thread_handle_msg+0x5e>
 800d970:	2b02      	cmp	r3, #2
 800d972:	dc2b      	bgt.n	800d9cc <tcpip_thread_handle_msg+0x6c>
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <tcpip_thread_handle_msg+0x1e>
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d015      	beq.n	800d9a8 <tcpip_thread_handle_msg+0x48>
 800d97c:	e026      	b.n	800d9cc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	6850      	ldr	r0, [r2, #4]
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	6892      	ldr	r2, [r2, #8]
 800d98a:	4611      	mov	r1, r2
 800d98c:	4798      	blx	r3
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d004      	beq.n	800d99e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	4618      	mov	r0, r3
 800d99a:	f001 fdc3 	bl	800f524 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d99e:	6879      	ldr	r1, [r7, #4]
 800d9a0:	2009      	movs	r0, #9
 800d9a2:	f000 ff1b 	bl	800e7dc <memp_free>
      break;
 800d9a6:	e018      	b.n	800d9da <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	6892      	ldr	r2, [r2, #8]
 800d9b0:	4610      	mov	r0, r2
 800d9b2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d9b4:	6879      	ldr	r1, [r7, #4]
 800d9b6:	2008      	movs	r0, #8
 800d9b8:	f000 ff10 	bl	800e7dc <memp_free>
      break;
 800d9bc:	e00d      	b.n	800d9da <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	687a      	ldr	r2, [r7, #4]
 800d9c4:	6892      	ldr	r2, [r2, #8]
 800d9c6:	4610      	mov	r0, r2
 800d9c8:	4798      	blx	r3
      break;
 800d9ca:	e006      	b.n	800d9da <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d9cc:	4b05      	ldr	r3, [pc, #20]	; (800d9e4 <tcpip_thread_handle_msg+0x84>)
 800d9ce:	22cf      	movs	r2, #207	; 0xcf
 800d9d0:	4905      	ldr	r1, [pc, #20]	; (800d9e8 <tcpip_thread_handle_msg+0x88>)
 800d9d2:	4806      	ldr	r0, [pc, #24]	; (800d9ec <tcpip_thread_handle_msg+0x8c>)
 800d9d4:	f00b f8aa 	bl	8018b2c <iprintf>
      break;
 800d9d8:	bf00      	nop
  }
}
 800d9da:	bf00      	nop
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	08019d64 	.word	0x08019d64
 800d9e8:	08019d94 	.word	0x08019d94
 800d9ec:	08019db4 	.word	0x08019db4

0800d9f0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b086      	sub	sp, #24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d9fc:	481a      	ldr	r0, [pc, #104]	; (800da68 <tcpip_inpkt+0x78>)
 800d9fe:	f00a ffb2 	bl	8018966 <sys_mbox_valid>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d105      	bne.n	800da14 <tcpip_inpkt+0x24>
 800da08:	4b18      	ldr	r3, [pc, #96]	; (800da6c <tcpip_inpkt+0x7c>)
 800da0a:	22fc      	movs	r2, #252	; 0xfc
 800da0c:	4918      	ldr	r1, [pc, #96]	; (800da70 <tcpip_inpkt+0x80>)
 800da0e:	4819      	ldr	r0, [pc, #100]	; (800da74 <tcpip_inpkt+0x84>)
 800da10:	f00b f88c 	bl	8018b2c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800da14:	2009      	movs	r0, #9
 800da16:	f000 fe6b 	bl	800e6f0 <memp_malloc>
 800da1a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d102      	bne.n	800da28 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800da22:	f04f 33ff 	mov.w	r3, #4294967295
 800da26:	e01a      	b.n	800da5e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2200      	movs	r2, #0
 800da2c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	68fa      	ldr	r2, [r7, #12]
 800da32:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	68ba      	ldr	r2, [r7, #8]
 800da38:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800da40:	6979      	ldr	r1, [r7, #20]
 800da42:	4809      	ldr	r0, [pc, #36]	; (800da68 <tcpip_inpkt+0x78>)
 800da44:	f00a ff36 	bl	80188b4 <sys_mbox_trypost>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d006      	beq.n	800da5c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800da4e:	6979      	ldr	r1, [r7, #20]
 800da50:	2009      	movs	r0, #9
 800da52:	f000 fec3 	bl	800e7dc <memp_free>
    return ERR_MEM;
 800da56:	f04f 33ff 	mov.w	r3, #4294967295
 800da5a:	e000      	b.n	800da5e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800da5c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3718      	adds	r7, #24
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	24004080 	.word	0x24004080
 800da6c:	08019d64 	.word	0x08019d64
 800da70:	08019ddc 	.word	0x08019ddc
 800da74:	08019db4 	.word	0x08019db4

0800da78 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da88:	f003 0318 	and.w	r3, r3, #24
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d006      	beq.n	800da9e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800da90:	4a08      	ldr	r2, [pc, #32]	; (800dab4 <tcpip_input+0x3c>)
 800da92:	6839      	ldr	r1, [r7, #0]
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7ff ffab 	bl	800d9f0 <tcpip_inpkt>
 800da9a:	4603      	mov	r3, r0
 800da9c:	e005      	b.n	800daaa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800da9e:	4a06      	ldr	r2, [pc, #24]	; (800dab8 <tcpip_input+0x40>)
 800daa0:	6839      	ldr	r1, [r7, #0]
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f7ff ffa4 	bl	800d9f0 <tcpip_inpkt>
 800daa8:	4603      	mov	r3, r0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	080186c5 	.word	0x080186c5
 800dab8:	080174b5 	.word	0x080174b5

0800dabc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dac6:	4819      	ldr	r0, [pc, #100]	; (800db2c <tcpip_try_callback+0x70>)
 800dac8:	f00a ff4d 	bl	8018966 <sys_mbox_valid>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d106      	bne.n	800dae0 <tcpip_try_callback+0x24>
 800dad2:	4b17      	ldr	r3, [pc, #92]	; (800db30 <tcpip_try_callback+0x74>)
 800dad4:	f240 125d 	movw	r2, #349	; 0x15d
 800dad8:	4916      	ldr	r1, [pc, #88]	; (800db34 <tcpip_try_callback+0x78>)
 800dada:	4817      	ldr	r0, [pc, #92]	; (800db38 <tcpip_try_callback+0x7c>)
 800dadc:	f00b f826 	bl	8018b2c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800dae0:	2008      	movs	r0, #8
 800dae2:	f000 fe05 	bl	800e6f0 <memp_malloc>
 800dae6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d102      	bne.n	800daf4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800daee:	f04f 33ff 	mov.w	r3, #4294967295
 800daf2:	e017      	b.n	800db24 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2201      	movs	r2, #1
 800daf8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	683a      	ldr	r2, [r7, #0]
 800db04:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800db06:	68f9      	ldr	r1, [r7, #12]
 800db08:	4808      	ldr	r0, [pc, #32]	; (800db2c <tcpip_try_callback+0x70>)
 800db0a:	f00a fed3 	bl	80188b4 <sys_mbox_trypost>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d006      	beq.n	800db22 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800db14:	68f9      	ldr	r1, [r7, #12]
 800db16:	2008      	movs	r0, #8
 800db18:	f000 fe60 	bl	800e7dc <memp_free>
    return ERR_MEM;
 800db1c:	f04f 33ff 	mov.w	r3, #4294967295
 800db20:	e000      	b.n	800db24 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	24004080 	.word	0x24004080
 800db30:	08019d64 	.word	0x08019d64
 800db34:	08019ddc 	.word	0x08019ddc
 800db38:	08019db4 	.word	0x08019db4

0800db3c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af02      	add	r7, sp, #8
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  lwip_init();
 800db46:	f000 f92d 	bl	800dda4 <lwip_init>

  tcpip_init_done = initfunc;
 800db4a:	4a17      	ldr	r2, [pc, #92]	; (800dba8 <tcpip_init+0x6c>)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800db50:	4a16      	ldr	r2, [pc, #88]	; (800dbac <tcpip_init+0x70>)
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800db56:	2106      	movs	r1, #6
 800db58:	4815      	ldr	r0, [pc, #84]	; (800dbb0 <tcpip_init+0x74>)
 800db5a:	f00a fe89 	bl	8018870 <sys_mbox_new>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d006      	beq.n	800db72 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800db64:	4b13      	ldr	r3, [pc, #76]	; (800dbb4 <tcpip_init+0x78>)
 800db66:	f240 2261 	movw	r2, #609	; 0x261
 800db6a:	4913      	ldr	r1, [pc, #76]	; (800dbb8 <tcpip_init+0x7c>)
 800db6c:	4813      	ldr	r0, [pc, #76]	; (800dbbc <tcpip_init+0x80>)
 800db6e:	f00a ffdd 	bl	8018b2c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800db72:	4813      	ldr	r0, [pc, #76]	; (800dbc0 <tcpip_init+0x84>)
 800db74:	f00a ff16 	bl	80189a4 <sys_mutex_new>
 800db78:	4603      	mov	r3, r0
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d006      	beq.n	800db8c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800db7e:	4b0d      	ldr	r3, [pc, #52]	; (800dbb4 <tcpip_init+0x78>)
 800db80:	f240 2265 	movw	r2, #613	; 0x265
 800db84:	490f      	ldr	r1, [pc, #60]	; (800dbc4 <tcpip_init+0x88>)
 800db86:	480d      	ldr	r0, [pc, #52]	; (800dbbc <tcpip_init+0x80>)
 800db88:	f00a ffd0 	bl	8018b2c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800db8c:	2300      	movs	r3, #0
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db94:	2200      	movs	r2, #0
 800db96:	490c      	ldr	r1, [pc, #48]	; (800dbc8 <tcpip_init+0x8c>)
 800db98:	480c      	ldr	r0, [pc, #48]	; (800dbcc <tcpip_init+0x90>)
 800db9a:	f00a ff3b 	bl	8018a14 <sys_thread_new>
}
 800db9e:	bf00      	nop
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	24004078 	.word	0x24004078
 800dbac:	2400407c 	.word	0x2400407c
 800dbb0:	24004080 	.word	0x24004080
 800dbb4:	08019d64 	.word	0x08019d64
 800dbb8:	08019dec 	.word	0x08019dec
 800dbbc:	08019db4 	.word	0x08019db4
 800dbc0:	2400473c 	.word	0x2400473c
 800dbc4:	08019e10 	.word	0x08019e10
 800dbc8:	0800d8f9 	.word	0x0800d8f9
 800dbcc:	08019e34 	.word	0x08019e34

0800dbd0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800dbda:	88fb      	ldrh	r3, [r7, #6]
 800dbdc:	021b      	lsls	r3, r3, #8
 800dbde:	b21a      	sxth	r2, r3
 800dbe0:	88fb      	ldrh	r3, [r7, #6]
 800dbe2:	0a1b      	lsrs	r3, r3, #8
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	b21b      	sxth	r3, r3
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	b21b      	sxth	r3, r3
 800dbec:	b29b      	uxth	r3, r3
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	370c      	adds	r7, #12
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr

0800dbfa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800dbfa:	b480      	push	{r7}
 800dbfc:	b083      	sub	sp, #12
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	061a      	lsls	r2, r3, #24
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	021b      	lsls	r3, r3, #8
 800dc0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc0e:	431a      	orrs	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	0a1b      	lsrs	r3, r3, #8
 800dc14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dc18:	431a      	orrs	r2, r3
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	0e1b      	lsrs	r3, r3, #24
 800dc1e:	4313      	orrs	r3, r2
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b089      	sub	sp, #36	; 0x24
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	f003 0301 	and.w	r3, r3, #1
 800dc48:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00d      	beq.n	800dc6c <lwip_standard_chksum+0x40>
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	dd0a      	ble.n	800dc6c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800dc56:	69fa      	ldr	r2, [r7, #28]
 800dc58:	1c53      	adds	r3, r2, #1
 800dc5a:	61fb      	str	r3, [r7, #28]
 800dc5c:	f107 030e 	add.w	r3, r7, #14
 800dc60:	3301      	adds	r3, #1
 800dc62:	7812      	ldrb	r2, [r2, #0]
 800dc64:	701a      	strb	r2, [r3, #0]
    len--;
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800dc70:	e00a      	b.n	800dc88 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	1c9a      	adds	r2, r3, #2
 800dc76:	61ba      	str	r2, [r7, #24]
 800dc78:	881b      	ldrh	r3, [r3, #0]
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	4413      	add	r3, r2
 800dc80:	617b      	str	r3, [r7, #20]
    len -= 2;
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	3b02      	subs	r3, #2
 800dc86:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	dcf1      	bgt.n	800dc72 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	dd04      	ble.n	800dc9e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800dc94:	f107 030e 	add.w	r3, r7, #14
 800dc98:	69ba      	ldr	r2, [r7, #24]
 800dc9a:	7812      	ldrb	r2, [r2, #0]
 800dc9c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800dc9e:	89fb      	ldrh	r3, [r7, #14]
 800dca0:	461a      	mov	r2, r3
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	4413      	add	r3, r2
 800dca6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	0c1a      	lsrs	r2, r3, #16
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	4413      	add	r3, r2
 800dcb2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	0c1a      	lsrs	r2, r3, #16
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	4413      	add	r3, r2
 800dcbe:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d007      	beq.n	800dcd6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	021b      	lsls	r3, r3, #8
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	0a1b      	lsrs	r3, r3, #8
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	b29b      	uxth	r3, r3
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3724      	adds	r7, #36	; 0x24
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr

0800dce6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b082      	sub	sp, #8
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	460b      	mov	r3, r1
 800dcf0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800dcf2:	887b      	ldrh	r3, [r7, #2]
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f7ff ff98 	bl	800dc2c <lwip_standard_chksum>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	43db      	mvns	r3, r3
 800dd00:	b29b      	uxth	r3, r3
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3708      	adds	r7, #8
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b086      	sub	sp, #24
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	613b      	str	r3, [r7, #16]
 800dd1e:	e02b      	b.n	800dd78 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	685a      	ldr	r2, [r3, #4]
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	895b      	ldrh	r3, [r3, #10]
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	f7ff ff7e 	bl	800dc2c <lwip_standard_chksum>
 800dd30:	4603      	mov	r3, r0
 800dd32:	461a      	mov	r2, r3
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	4413      	add	r3, r2
 800dd38:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	0c1a      	lsrs	r2, r3, #16
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	4413      	add	r3, r2
 800dd44:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	895b      	ldrh	r3, [r3, #10]
 800dd4a:	f003 0301 	and.w	r3, r3, #1
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d00e      	beq.n	800dd72 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	bf0c      	ite	eq
 800dd5a:	2301      	moveq	r3, #1
 800dd5c:	2300      	movne	r3, #0
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	021b      	lsls	r3, r3, #8
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	0a1b      	lsrs	r3, r3, #8
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	613b      	str	r3, [r7, #16]
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d1d0      	bne.n	800dd20 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d007      	beq.n	800dd94 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	021b      	lsls	r3, r3, #8
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	0a1b      	lsrs	r3, r3, #8
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	4313      	orrs	r3, r2
 800dd92:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	43db      	mvns	r3, r3
 800dd9a:	b29b      	uxth	r3, r3
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3718      	adds	r7, #24
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ddae:	f00a fdeb 	bl	8018988 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ddb2:	f000 f8d5 	bl	800df60 <mem_init>
  memp_init();
 800ddb6:	f000 fc2d 	bl	800e614 <memp_init>
  pbuf_init();
  netif_init();
 800ddba:	f000 fd39 	bl	800e830 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ddbe:	f008 f825 	bl	8015e0c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ddc2:	f001 fe59 	bl	800fa78 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ddc6:	f007 ff67 	bl	8015c98 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ddca:	bf00      	nop
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
	...

0800ddd4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	4603      	mov	r3, r0
 800dddc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ddde:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <ptr_to_mem+0x20>)
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	88fb      	ldrh	r3, [r7, #6]
 800dde4:	4413      	add	r3, r2
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	370c      	adds	r7, #12
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	24004084 	.word	0x24004084

0800ddf8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800de00:	4b05      	ldr	r3, [pc, #20]	; (800de18 <mem_to_ptr+0x20>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	1ad3      	subs	r3, r2, r3
 800de08:	b29b      	uxth	r3, r3
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	370c      	adds	r7, #12
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	24004084 	.word	0x24004084

0800de1c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800de1c:	b590      	push	{r4, r7, lr}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800de24:	4b45      	ldr	r3, [pc, #276]	; (800df3c <plug_holes+0x120>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d206      	bcs.n	800de3c <plug_holes+0x20>
 800de2e:	4b44      	ldr	r3, [pc, #272]	; (800df40 <plug_holes+0x124>)
 800de30:	f240 12df 	movw	r2, #479	; 0x1df
 800de34:	4943      	ldr	r1, [pc, #268]	; (800df44 <plug_holes+0x128>)
 800de36:	4844      	ldr	r0, [pc, #272]	; (800df48 <plug_holes+0x12c>)
 800de38:	f00a fe78 	bl	8018b2c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800de3c:	4b43      	ldr	r3, [pc, #268]	; (800df4c <plug_holes+0x130>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	429a      	cmp	r2, r3
 800de44:	d306      	bcc.n	800de54 <plug_holes+0x38>
 800de46:	4b3e      	ldr	r3, [pc, #248]	; (800df40 <plug_holes+0x124>)
 800de48:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800de4c:	4940      	ldr	r1, [pc, #256]	; (800df50 <plug_holes+0x134>)
 800de4e:	483e      	ldr	r0, [pc, #248]	; (800df48 <plug_holes+0x12c>)
 800de50:	f00a fe6c 	bl	8018b2c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	791b      	ldrb	r3, [r3, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d006      	beq.n	800de6a <plug_holes+0x4e>
 800de5c:	4b38      	ldr	r3, [pc, #224]	; (800df40 <plug_holes+0x124>)
 800de5e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800de62:	493c      	ldr	r1, [pc, #240]	; (800df54 <plug_holes+0x138>)
 800de64:	4838      	ldr	r0, [pc, #224]	; (800df48 <plug_holes+0x12c>)
 800de66:	f00a fe61 	bl	8018b2c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	881b      	ldrh	r3, [r3, #0]
 800de6e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800de72:	d906      	bls.n	800de82 <plug_holes+0x66>
 800de74:	4b32      	ldr	r3, [pc, #200]	; (800df40 <plug_holes+0x124>)
 800de76:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800de7a:	4937      	ldr	r1, [pc, #220]	; (800df58 <plug_holes+0x13c>)
 800de7c:	4832      	ldr	r0, [pc, #200]	; (800df48 <plug_holes+0x12c>)
 800de7e:	f00a fe55 	bl	8018b2c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	881b      	ldrh	r3, [r3, #0]
 800de86:	4618      	mov	r0, r3
 800de88:	f7ff ffa4 	bl	800ddd4 <ptr_to_mem>
 800de8c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	429a      	cmp	r2, r3
 800de94:	d024      	beq.n	800dee0 <plug_holes+0xc4>
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	791b      	ldrb	r3, [r3, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d120      	bne.n	800dee0 <plug_holes+0xc4>
 800de9e:	4b2b      	ldr	r3, [pc, #172]	; (800df4c <plug_holes+0x130>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	68fa      	ldr	r2, [r7, #12]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d01b      	beq.n	800dee0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800dea8:	4b2c      	ldr	r3, [pc, #176]	; (800df5c <plug_holes+0x140>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	68fa      	ldr	r2, [r7, #12]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d102      	bne.n	800deb8 <plug_holes+0x9c>
      lfree = mem;
 800deb2:	4a2a      	ldr	r2, [pc, #168]	; (800df5c <plug_holes+0x140>)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	881a      	ldrh	r2, [r3, #0]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	881b      	ldrh	r3, [r3, #0]
 800dec4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dec8:	d00a      	beq.n	800dee0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	881b      	ldrh	r3, [r3, #0]
 800dece:	4618      	mov	r0, r3
 800ded0:	f7ff ff80 	bl	800ddd4 <ptr_to_mem>
 800ded4:	4604      	mov	r4, r0
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f7ff ff8e 	bl	800ddf8 <mem_to_ptr>
 800dedc:	4603      	mov	r3, r0
 800dede:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	885b      	ldrh	r3, [r3, #2]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7ff ff75 	bl	800ddd4 <ptr_to_mem>
 800deea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800deec:	68ba      	ldr	r2, [r7, #8]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	429a      	cmp	r2, r3
 800def2:	d01f      	beq.n	800df34 <plug_holes+0x118>
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	791b      	ldrb	r3, [r3, #4]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d11b      	bne.n	800df34 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800defc:	4b17      	ldr	r3, [pc, #92]	; (800df5c <plug_holes+0x140>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	429a      	cmp	r2, r3
 800df04:	d102      	bne.n	800df0c <plug_holes+0xf0>
      lfree = pmem;
 800df06:	4a15      	ldr	r2, [pc, #84]	; (800df5c <plug_holes+0x140>)
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	881a      	ldrh	r2, [r3, #0]
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	881b      	ldrh	r3, [r3, #0]
 800df18:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800df1c:	d00a      	beq.n	800df34 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	4618      	mov	r0, r3
 800df24:	f7ff ff56 	bl	800ddd4 <ptr_to_mem>
 800df28:	4604      	mov	r4, r0
 800df2a:	68b8      	ldr	r0, [r7, #8]
 800df2c:	f7ff ff64 	bl	800ddf8 <mem_to_ptr>
 800df30:	4603      	mov	r3, r0
 800df32:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800df34:	bf00      	nop
 800df36:	3714      	adds	r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd90      	pop	{r4, r7, pc}
 800df3c:	24004084 	.word	0x24004084
 800df40:	08019e44 	.word	0x08019e44
 800df44:	08019e74 	.word	0x08019e74
 800df48:	08019e8c 	.word	0x08019e8c
 800df4c:	24004088 	.word	0x24004088
 800df50:	08019eb4 	.word	0x08019eb4
 800df54:	08019ed0 	.word	0x08019ed0
 800df58:	08019eec 	.word	0x08019eec
 800df5c:	24004090 	.word	0x24004090

0800df60 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800df66:	4b1d      	ldr	r3, [pc, #116]	; (800dfdc <mem_init+0x7c>)
 800df68:	4a1d      	ldr	r2, [pc, #116]	; (800dfe0 <mem_init+0x80>)
 800df6a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800df6c:	4b1b      	ldr	r3, [pc, #108]	; (800dfdc <mem_init+0x7c>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800df78:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2200      	movs	r2, #0
 800df84:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800df86:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800df8a:	f7ff ff23 	bl	800ddd4 <ptr_to_mem>
 800df8e:	4603      	mov	r3, r0
 800df90:	4a14      	ldr	r2, [pc, #80]	; (800dfe4 <mem_init+0x84>)
 800df92:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800df94:	4b13      	ldr	r3, [pc, #76]	; (800dfe4 <mem_init+0x84>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2201      	movs	r2, #1
 800df9a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800df9c:	4b11      	ldr	r3, [pc, #68]	; (800dfe4 <mem_init+0x84>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dfa4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800dfa6:	4b0f      	ldr	r3, [pc, #60]	; (800dfe4 <mem_init+0x84>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dfae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dfb0:	4b0a      	ldr	r3, [pc, #40]	; (800dfdc <mem_init+0x7c>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a0c      	ldr	r2, [pc, #48]	; (800dfe8 <mem_init+0x88>)
 800dfb6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dfb8:	480c      	ldr	r0, [pc, #48]	; (800dfec <mem_init+0x8c>)
 800dfba:	f00a fcf3 	bl	80189a4 <sys_mutex_new>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d006      	beq.n	800dfd2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800dfc4:	4b0a      	ldr	r3, [pc, #40]	; (800dff0 <mem_init+0x90>)
 800dfc6:	f240 221f 	movw	r2, #543	; 0x21f
 800dfca:	490a      	ldr	r1, [pc, #40]	; (800dff4 <mem_init+0x94>)
 800dfcc:	480a      	ldr	r0, [pc, #40]	; (800dff8 <mem_init+0x98>)
 800dfce:	f00a fdad 	bl	8018b2c <iprintf>
  }
}
 800dfd2:	bf00      	nop
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	24004084 	.word	0x24004084
 800dfe0:	30002000 	.word	0x30002000
 800dfe4:	24004088 	.word	0x24004088
 800dfe8:	24004090 	.word	0x24004090
 800dfec:	2400408c 	.word	0x2400408c
 800dff0:	08019e44 	.word	0x08019e44
 800dff4:	08019f18 	.word	0x08019f18
 800dff8:	08019e8c 	.word	0x08019e8c

0800dffc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b086      	sub	sp, #24
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff fef7 	bl	800ddf8 <mem_to_ptr>
 800e00a:	4603      	mov	r3, r0
 800e00c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	881b      	ldrh	r3, [r3, #0]
 800e012:	4618      	mov	r0, r3
 800e014:	f7ff fede 	bl	800ddd4 <ptr_to_mem>
 800e018:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	885b      	ldrh	r3, [r3, #2]
 800e01e:	4618      	mov	r0, r3
 800e020:	f7ff fed8 	bl	800ddd4 <ptr_to_mem>
 800e024:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	881b      	ldrh	r3, [r3, #0]
 800e02a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e02e:	d818      	bhi.n	800e062 <mem_link_valid+0x66>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	885b      	ldrh	r3, [r3, #2]
 800e034:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e038:	d813      	bhi.n	800e062 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e03e:	8afa      	ldrh	r2, [r7, #22]
 800e040:	429a      	cmp	r2, r3
 800e042:	d004      	beq.n	800e04e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	881b      	ldrh	r3, [r3, #0]
 800e048:	8afa      	ldrh	r2, [r7, #22]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d109      	bne.n	800e062 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e04e:	4b08      	ldr	r3, [pc, #32]	; (800e070 <mem_link_valid+0x74>)
 800e050:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e052:	693a      	ldr	r2, [r7, #16]
 800e054:	429a      	cmp	r2, r3
 800e056:	d006      	beq.n	800e066 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	885b      	ldrh	r3, [r3, #2]
 800e05c:	8afa      	ldrh	r2, [r7, #22]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d001      	beq.n	800e066 <mem_link_valid+0x6a>
    return 0;
 800e062:	2300      	movs	r3, #0
 800e064:	e000      	b.n	800e068 <mem_link_valid+0x6c>
  }
  return 1;
 800e066:	2301      	movs	r3, #1
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3718      	adds	r7, #24
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	24004088 	.word	0x24004088

0800e074 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b088      	sub	sp, #32
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d070      	beq.n	800e164 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f003 0303 	and.w	r3, r3, #3
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00d      	beq.n	800e0a8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e08c:	4b37      	ldr	r3, [pc, #220]	; (800e16c <mem_free+0xf8>)
 800e08e:	f240 2273 	movw	r2, #627	; 0x273
 800e092:	4937      	ldr	r1, [pc, #220]	; (800e170 <mem_free+0xfc>)
 800e094:	4837      	ldr	r0, [pc, #220]	; (800e174 <mem_free+0x100>)
 800e096:	f00a fd49 	bl	8018b2c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e09a:	f00a fce1 	bl	8018a60 <sys_arch_protect>
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	68f8      	ldr	r0, [r7, #12]
 800e0a2:	f00a fceb 	bl	8018a7c <sys_arch_unprotect>
    return;
 800e0a6:	e05e      	b.n	800e166 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	3b08      	subs	r3, #8
 800e0ac:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e0ae:	4b32      	ldr	r3, [pc, #200]	; (800e178 <mem_free+0x104>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	69fa      	ldr	r2, [r7, #28]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d306      	bcc.n	800e0c6 <mem_free+0x52>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f103 020c 	add.w	r2, r3, #12
 800e0be:	4b2f      	ldr	r3, [pc, #188]	; (800e17c <mem_free+0x108>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d90d      	bls.n	800e0e2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e0c6:	4b29      	ldr	r3, [pc, #164]	; (800e16c <mem_free+0xf8>)
 800e0c8:	f240 227f 	movw	r2, #639	; 0x27f
 800e0cc:	492c      	ldr	r1, [pc, #176]	; (800e180 <mem_free+0x10c>)
 800e0ce:	4829      	ldr	r0, [pc, #164]	; (800e174 <mem_free+0x100>)
 800e0d0:	f00a fd2c 	bl	8018b2c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e0d4:	f00a fcc4 	bl	8018a60 <sys_arch_protect>
 800e0d8:	6138      	str	r0, [r7, #16]
 800e0da:	6938      	ldr	r0, [r7, #16]
 800e0dc:	f00a fcce 	bl	8018a7c <sys_arch_unprotect>
    return;
 800e0e0:	e041      	b.n	800e166 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e0e2:	4828      	ldr	r0, [pc, #160]	; (800e184 <mem_free+0x110>)
 800e0e4:	f00a fc7a 	bl	80189dc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	791b      	ldrb	r3, [r3, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d110      	bne.n	800e112 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e0f0:	4b1e      	ldr	r3, [pc, #120]	; (800e16c <mem_free+0xf8>)
 800e0f2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e0f6:	4924      	ldr	r1, [pc, #144]	; (800e188 <mem_free+0x114>)
 800e0f8:	481e      	ldr	r0, [pc, #120]	; (800e174 <mem_free+0x100>)
 800e0fa:	f00a fd17 	bl	8018b2c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e0fe:	4821      	ldr	r0, [pc, #132]	; (800e184 <mem_free+0x110>)
 800e100:	f00a fc7b 	bl	80189fa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e104:	f00a fcac 	bl	8018a60 <sys_arch_protect>
 800e108:	6178      	str	r0, [r7, #20]
 800e10a:	6978      	ldr	r0, [r7, #20]
 800e10c:	f00a fcb6 	bl	8018a7c <sys_arch_unprotect>
    return;
 800e110:	e029      	b.n	800e166 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e112:	69f8      	ldr	r0, [r7, #28]
 800e114:	f7ff ff72 	bl	800dffc <mem_link_valid>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d110      	bne.n	800e140 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e11e:	4b13      	ldr	r3, [pc, #76]	; (800e16c <mem_free+0xf8>)
 800e120:	f240 2295 	movw	r2, #661	; 0x295
 800e124:	4919      	ldr	r1, [pc, #100]	; (800e18c <mem_free+0x118>)
 800e126:	4813      	ldr	r0, [pc, #76]	; (800e174 <mem_free+0x100>)
 800e128:	f00a fd00 	bl	8018b2c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e12c:	4815      	ldr	r0, [pc, #84]	; (800e184 <mem_free+0x110>)
 800e12e:	f00a fc64 	bl	80189fa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e132:	f00a fc95 	bl	8018a60 <sys_arch_protect>
 800e136:	61b8      	str	r0, [r7, #24]
 800e138:	69b8      	ldr	r0, [r7, #24]
 800e13a:	f00a fc9f 	bl	8018a7c <sys_arch_unprotect>
    return;
 800e13e:	e012      	b.n	800e166 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	2200      	movs	r2, #0
 800e144:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e146:	4b12      	ldr	r3, [pc, #72]	; (800e190 <mem_free+0x11c>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	69fa      	ldr	r2, [r7, #28]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d202      	bcs.n	800e156 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e150:	4a0f      	ldr	r2, [pc, #60]	; (800e190 <mem_free+0x11c>)
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e156:	69f8      	ldr	r0, [r7, #28]
 800e158:	f7ff fe60 	bl	800de1c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e15c:	4809      	ldr	r0, [pc, #36]	; (800e184 <mem_free+0x110>)
 800e15e:	f00a fc4c 	bl	80189fa <sys_mutex_unlock>
 800e162:	e000      	b.n	800e166 <mem_free+0xf2>
    return;
 800e164:	bf00      	nop
}
 800e166:	3720      	adds	r7, #32
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	08019e44 	.word	0x08019e44
 800e170:	08019f34 	.word	0x08019f34
 800e174:	08019e8c 	.word	0x08019e8c
 800e178:	24004084 	.word	0x24004084
 800e17c:	24004088 	.word	0x24004088
 800e180:	08019f58 	.word	0x08019f58
 800e184:	2400408c 	.word	0x2400408c
 800e188:	08019f74 	.word	0x08019f74
 800e18c:	08019f9c 	.word	0x08019f9c
 800e190:	24004090 	.word	0x24004090

0800e194 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b088      	sub	sp, #32
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	460b      	mov	r3, r1
 800e19e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e1a0:	887b      	ldrh	r3, [r7, #2]
 800e1a2:	3303      	adds	r3, #3
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	f023 0303 	bic.w	r3, r3, #3
 800e1aa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e1ac:	8bfb      	ldrh	r3, [r7, #30]
 800e1ae:	2b0b      	cmp	r3, #11
 800e1b0:	d801      	bhi.n	800e1b6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e1b2:	230c      	movs	r3, #12
 800e1b4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e1b6:	8bfb      	ldrh	r3, [r7, #30]
 800e1b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e1bc:	d803      	bhi.n	800e1c6 <mem_trim+0x32>
 800e1be:	8bfa      	ldrh	r2, [r7, #30]
 800e1c0:	887b      	ldrh	r3, [r7, #2]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d201      	bcs.n	800e1ca <mem_trim+0x36>
    return NULL;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	e0d8      	b.n	800e37c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e1ca:	4b6e      	ldr	r3, [pc, #440]	; (800e384 <mem_trim+0x1f0>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d304      	bcc.n	800e1de <mem_trim+0x4a>
 800e1d4:	4b6c      	ldr	r3, [pc, #432]	; (800e388 <mem_trim+0x1f4>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d306      	bcc.n	800e1ec <mem_trim+0x58>
 800e1de:	4b6b      	ldr	r3, [pc, #428]	; (800e38c <mem_trim+0x1f8>)
 800e1e0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e1e4:	496a      	ldr	r1, [pc, #424]	; (800e390 <mem_trim+0x1fc>)
 800e1e6:	486b      	ldr	r0, [pc, #428]	; (800e394 <mem_trim+0x200>)
 800e1e8:	f00a fca0 	bl	8018b2c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e1ec:	4b65      	ldr	r3, [pc, #404]	; (800e384 <mem_trim+0x1f0>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d304      	bcc.n	800e200 <mem_trim+0x6c>
 800e1f6:	4b64      	ldr	r3, [pc, #400]	; (800e388 <mem_trim+0x1f4>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d307      	bcc.n	800e210 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e200:	f00a fc2e 	bl	8018a60 <sys_arch_protect>
 800e204:	60b8      	str	r0, [r7, #8]
 800e206:	68b8      	ldr	r0, [r7, #8]
 800e208:	f00a fc38 	bl	8018a7c <sys_arch_unprotect>
    return rmem;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	e0b5      	b.n	800e37c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	3b08      	subs	r3, #8
 800e214:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e216:	69b8      	ldr	r0, [r7, #24]
 800e218:	f7ff fdee 	bl	800ddf8 <mem_to_ptr>
 800e21c:	4603      	mov	r3, r0
 800e21e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	881a      	ldrh	r2, [r3, #0]
 800e224:	8afb      	ldrh	r3, [r7, #22]
 800e226:	1ad3      	subs	r3, r2, r3
 800e228:	b29b      	uxth	r3, r3
 800e22a:	3b08      	subs	r3, #8
 800e22c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e22e:	8bfa      	ldrh	r2, [r7, #30]
 800e230:	8abb      	ldrh	r3, [r7, #20]
 800e232:	429a      	cmp	r2, r3
 800e234:	d906      	bls.n	800e244 <mem_trim+0xb0>
 800e236:	4b55      	ldr	r3, [pc, #340]	; (800e38c <mem_trim+0x1f8>)
 800e238:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e23c:	4956      	ldr	r1, [pc, #344]	; (800e398 <mem_trim+0x204>)
 800e23e:	4855      	ldr	r0, [pc, #340]	; (800e394 <mem_trim+0x200>)
 800e240:	f00a fc74 	bl	8018b2c <iprintf>
  if (newsize > size) {
 800e244:	8bfa      	ldrh	r2, [r7, #30]
 800e246:	8abb      	ldrh	r3, [r7, #20]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d901      	bls.n	800e250 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e24c:	2300      	movs	r3, #0
 800e24e:	e095      	b.n	800e37c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e250:	8bfa      	ldrh	r2, [r7, #30]
 800e252:	8abb      	ldrh	r3, [r7, #20]
 800e254:	429a      	cmp	r2, r3
 800e256:	d101      	bne.n	800e25c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	e08f      	b.n	800e37c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e25c:	484f      	ldr	r0, [pc, #316]	; (800e39c <mem_trim+0x208>)
 800e25e:	f00a fbbd 	bl	80189dc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	881b      	ldrh	r3, [r3, #0]
 800e266:	4618      	mov	r0, r3
 800e268:	f7ff fdb4 	bl	800ddd4 <ptr_to_mem>
 800e26c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	791b      	ldrb	r3, [r3, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d13f      	bne.n	800e2f6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	881b      	ldrh	r3, [r3, #0]
 800e27a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e27e:	d106      	bne.n	800e28e <mem_trim+0xfa>
 800e280:	4b42      	ldr	r3, [pc, #264]	; (800e38c <mem_trim+0x1f8>)
 800e282:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e286:	4946      	ldr	r1, [pc, #280]	; (800e3a0 <mem_trim+0x20c>)
 800e288:	4842      	ldr	r0, [pc, #264]	; (800e394 <mem_trim+0x200>)
 800e28a:	f00a fc4f 	bl	8018b2c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	881b      	ldrh	r3, [r3, #0]
 800e292:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e294:	8afa      	ldrh	r2, [r7, #22]
 800e296:	8bfb      	ldrh	r3, [r7, #30]
 800e298:	4413      	add	r3, r2
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	3308      	adds	r3, #8
 800e29e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e2a0:	4b40      	ldr	r3, [pc, #256]	; (800e3a4 <mem_trim+0x210>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	693a      	ldr	r2, [r7, #16]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d106      	bne.n	800e2b8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e2aa:	89fb      	ldrh	r3, [r7, #14]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7ff fd91 	bl	800ddd4 <ptr_to_mem>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	4a3b      	ldr	r2, [pc, #236]	; (800e3a4 <mem_trim+0x210>)
 800e2b6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e2b8:	89fb      	ldrh	r3, [r7, #14]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7ff fd8a 	bl	800ddd4 <ptr_to_mem>
 800e2c0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	89ba      	ldrh	r2, [r7, #12]
 800e2cc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	8afa      	ldrh	r2, [r7, #22]
 800e2d2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	89fa      	ldrh	r2, [r7, #14]
 800e2d8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	881b      	ldrh	r3, [r3, #0]
 800e2de:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e2e2:	d047      	beq.n	800e374 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	881b      	ldrh	r3, [r3, #0]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7ff fd73 	bl	800ddd4 <ptr_to_mem>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	89fb      	ldrh	r3, [r7, #14]
 800e2f2:	8053      	strh	r3, [r2, #2]
 800e2f4:	e03e      	b.n	800e374 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e2f6:	8bfb      	ldrh	r3, [r7, #30]
 800e2f8:	f103 0214 	add.w	r2, r3, #20
 800e2fc:	8abb      	ldrh	r3, [r7, #20]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d838      	bhi.n	800e374 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e302:	8afa      	ldrh	r2, [r7, #22]
 800e304:	8bfb      	ldrh	r3, [r7, #30]
 800e306:	4413      	add	r3, r2
 800e308:	b29b      	uxth	r3, r3
 800e30a:	3308      	adds	r3, #8
 800e30c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e30e:	69bb      	ldr	r3, [r7, #24]
 800e310:	881b      	ldrh	r3, [r3, #0]
 800e312:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e316:	d106      	bne.n	800e326 <mem_trim+0x192>
 800e318:	4b1c      	ldr	r3, [pc, #112]	; (800e38c <mem_trim+0x1f8>)
 800e31a:	f240 3216 	movw	r2, #790	; 0x316
 800e31e:	4920      	ldr	r1, [pc, #128]	; (800e3a0 <mem_trim+0x20c>)
 800e320:	481c      	ldr	r0, [pc, #112]	; (800e394 <mem_trim+0x200>)
 800e322:	f00a fc03 	bl	8018b2c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e326:	89fb      	ldrh	r3, [r7, #14]
 800e328:	4618      	mov	r0, r3
 800e32a:	f7ff fd53 	bl	800ddd4 <ptr_to_mem>
 800e32e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e330:	4b1c      	ldr	r3, [pc, #112]	; (800e3a4 <mem_trim+0x210>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	693a      	ldr	r2, [r7, #16]
 800e336:	429a      	cmp	r2, r3
 800e338:	d202      	bcs.n	800e340 <mem_trim+0x1ac>
      lfree = mem2;
 800e33a:	4a1a      	ldr	r2, [pc, #104]	; (800e3a4 <mem_trim+0x210>)
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	2200      	movs	r2, #0
 800e344:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e346:	69bb      	ldr	r3, [r7, #24]
 800e348:	881a      	ldrh	r2, [r3, #0]
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	8afa      	ldrh	r2, [r7, #22]
 800e352:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e354:	69bb      	ldr	r3, [r7, #24]
 800e356:	89fa      	ldrh	r2, [r7, #14]
 800e358:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	881b      	ldrh	r3, [r3, #0]
 800e35e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e362:	d007      	beq.n	800e374 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	881b      	ldrh	r3, [r3, #0]
 800e368:	4618      	mov	r0, r3
 800e36a:	f7ff fd33 	bl	800ddd4 <ptr_to_mem>
 800e36e:	4602      	mov	r2, r0
 800e370:	89fb      	ldrh	r3, [r7, #14]
 800e372:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e374:	4809      	ldr	r0, [pc, #36]	; (800e39c <mem_trim+0x208>)
 800e376:	f00a fb40 	bl	80189fa <sys_mutex_unlock>
  return rmem;
 800e37a:	687b      	ldr	r3, [r7, #4]
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3720      	adds	r7, #32
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	24004084 	.word	0x24004084
 800e388:	24004088 	.word	0x24004088
 800e38c:	08019e44 	.word	0x08019e44
 800e390:	08019fd0 	.word	0x08019fd0
 800e394:	08019e8c 	.word	0x08019e8c
 800e398:	08019fe8 	.word	0x08019fe8
 800e39c:	2400408c 	.word	0x2400408c
 800e3a0:	0801a008 	.word	0x0801a008
 800e3a4:	24004090 	.word	0x24004090

0800e3a8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b088      	sub	sp, #32
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e3b2:	88fb      	ldrh	r3, [r7, #6]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d101      	bne.n	800e3bc <mem_malloc+0x14>
    return NULL;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	e0e2      	b.n	800e582 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e3bc:	88fb      	ldrh	r3, [r7, #6]
 800e3be:	3303      	adds	r3, #3
 800e3c0:	b29b      	uxth	r3, r3
 800e3c2:	f023 0303 	bic.w	r3, r3, #3
 800e3c6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e3c8:	8bbb      	ldrh	r3, [r7, #28]
 800e3ca:	2b0b      	cmp	r3, #11
 800e3cc:	d801      	bhi.n	800e3d2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e3ce:	230c      	movs	r3, #12
 800e3d0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e3d2:	8bbb      	ldrh	r3, [r7, #28]
 800e3d4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e3d8:	d803      	bhi.n	800e3e2 <mem_malloc+0x3a>
 800e3da:	8bba      	ldrh	r2, [r7, #28]
 800e3dc:	88fb      	ldrh	r3, [r7, #6]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d201      	bcs.n	800e3e6 <mem_malloc+0x3e>
    return NULL;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	e0cd      	b.n	800e582 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e3e6:	4869      	ldr	r0, [pc, #420]	; (800e58c <mem_malloc+0x1e4>)
 800e3e8:	f00a faf8 	bl	80189dc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e3ec:	4b68      	ldr	r3, [pc, #416]	; (800e590 <mem_malloc+0x1e8>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7ff fd01 	bl	800ddf8 <mem_to_ptr>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	83fb      	strh	r3, [r7, #30]
 800e3fa:	e0b7      	b.n	800e56c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e3fc:	8bfb      	ldrh	r3, [r7, #30]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7ff fce8 	bl	800ddd4 <ptr_to_mem>
 800e404:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	791b      	ldrb	r3, [r3, #4]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	f040 80a7 	bne.w	800e55e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	881b      	ldrh	r3, [r3, #0]
 800e414:	461a      	mov	r2, r3
 800e416:	8bfb      	ldrh	r3, [r7, #30]
 800e418:	1ad3      	subs	r3, r2, r3
 800e41a:	f1a3 0208 	sub.w	r2, r3, #8
 800e41e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e420:	429a      	cmp	r2, r3
 800e422:	f0c0 809c 	bcc.w	800e55e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	461a      	mov	r2, r3
 800e42c:	8bfb      	ldrh	r3, [r7, #30]
 800e42e:	1ad3      	subs	r3, r2, r3
 800e430:	f1a3 0208 	sub.w	r2, r3, #8
 800e434:	8bbb      	ldrh	r3, [r7, #28]
 800e436:	3314      	adds	r3, #20
 800e438:	429a      	cmp	r2, r3
 800e43a:	d333      	bcc.n	800e4a4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e43c:	8bfa      	ldrh	r2, [r7, #30]
 800e43e:	8bbb      	ldrh	r3, [r7, #28]
 800e440:	4413      	add	r3, r2
 800e442:	b29b      	uxth	r3, r3
 800e444:	3308      	adds	r3, #8
 800e446:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e448:	8a7b      	ldrh	r3, [r7, #18]
 800e44a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e44e:	d106      	bne.n	800e45e <mem_malloc+0xb6>
 800e450:	4b50      	ldr	r3, [pc, #320]	; (800e594 <mem_malloc+0x1ec>)
 800e452:	f240 3287 	movw	r2, #903	; 0x387
 800e456:	4950      	ldr	r1, [pc, #320]	; (800e598 <mem_malloc+0x1f0>)
 800e458:	4850      	ldr	r0, [pc, #320]	; (800e59c <mem_malloc+0x1f4>)
 800e45a:	f00a fb67 	bl	8018b2c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e45e:	8a7b      	ldrh	r3, [r7, #18]
 800e460:	4618      	mov	r0, r3
 800e462:	f7ff fcb7 	bl	800ddd4 <ptr_to_mem>
 800e466:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2200      	movs	r2, #0
 800e46c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	881a      	ldrh	r2, [r3, #0]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	8bfa      	ldrh	r2, [r7, #30]
 800e47a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	8a7a      	ldrh	r2, [r7, #18]
 800e480:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	2201      	movs	r2, #1
 800e486:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	881b      	ldrh	r3, [r3, #0]
 800e48c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e490:	d00b      	beq.n	800e4aa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	881b      	ldrh	r3, [r3, #0]
 800e496:	4618      	mov	r0, r3
 800e498:	f7ff fc9c 	bl	800ddd4 <ptr_to_mem>
 800e49c:	4602      	mov	r2, r0
 800e49e:	8a7b      	ldrh	r3, [r7, #18]
 800e4a0:	8053      	strh	r3, [r2, #2]
 800e4a2:	e002      	b.n	800e4aa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e4aa:	4b39      	ldr	r3, [pc, #228]	; (800e590 <mem_malloc+0x1e8>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	697a      	ldr	r2, [r7, #20]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d127      	bne.n	800e504 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e4b4:	4b36      	ldr	r3, [pc, #216]	; (800e590 <mem_malloc+0x1e8>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e4ba:	e005      	b.n	800e4c8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e4bc:	69bb      	ldr	r3, [r7, #24]
 800e4be:	881b      	ldrh	r3, [r3, #0]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7ff fc87 	bl	800ddd4 <ptr_to_mem>
 800e4c6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	791b      	ldrb	r3, [r3, #4]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d004      	beq.n	800e4da <mem_malloc+0x132>
 800e4d0:	4b33      	ldr	r3, [pc, #204]	; (800e5a0 <mem_malloc+0x1f8>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	69ba      	ldr	r2, [r7, #24]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d1f0      	bne.n	800e4bc <mem_malloc+0x114>
          }
          lfree = cur;
 800e4da:	4a2d      	ldr	r2, [pc, #180]	; (800e590 <mem_malloc+0x1e8>)
 800e4dc:	69bb      	ldr	r3, [r7, #24]
 800e4de:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e4e0:	4b2b      	ldr	r3, [pc, #172]	; (800e590 <mem_malloc+0x1e8>)
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	4b2e      	ldr	r3, [pc, #184]	; (800e5a0 <mem_malloc+0x1f8>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d00b      	beq.n	800e504 <mem_malloc+0x15c>
 800e4ec:	4b28      	ldr	r3, [pc, #160]	; (800e590 <mem_malloc+0x1e8>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	791b      	ldrb	r3, [r3, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d006      	beq.n	800e504 <mem_malloc+0x15c>
 800e4f6:	4b27      	ldr	r3, [pc, #156]	; (800e594 <mem_malloc+0x1ec>)
 800e4f8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e4fc:	4929      	ldr	r1, [pc, #164]	; (800e5a4 <mem_malloc+0x1fc>)
 800e4fe:	4827      	ldr	r0, [pc, #156]	; (800e59c <mem_malloc+0x1f4>)
 800e500:	f00a fb14 	bl	8018b2c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e504:	4821      	ldr	r0, [pc, #132]	; (800e58c <mem_malloc+0x1e4>)
 800e506:	f00a fa78 	bl	80189fa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e50a:	8bba      	ldrh	r2, [r7, #28]
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	4413      	add	r3, r2
 800e510:	3308      	adds	r3, #8
 800e512:	4a23      	ldr	r2, [pc, #140]	; (800e5a0 <mem_malloc+0x1f8>)
 800e514:	6812      	ldr	r2, [r2, #0]
 800e516:	4293      	cmp	r3, r2
 800e518:	d906      	bls.n	800e528 <mem_malloc+0x180>
 800e51a:	4b1e      	ldr	r3, [pc, #120]	; (800e594 <mem_malloc+0x1ec>)
 800e51c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e520:	4921      	ldr	r1, [pc, #132]	; (800e5a8 <mem_malloc+0x200>)
 800e522:	481e      	ldr	r0, [pc, #120]	; (800e59c <mem_malloc+0x1f4>)
 800e524:	f00a fb02 	bl	8018b2c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	f003 0303 	and.w	r3, r3, #3
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d006      	beq.n	800e540 <mem_malloc+0x198>
 800e532:	4b18      	ldr	r3, [pc, #96]	; (800e594 <mem_malloc+0x1ec>)
 800e534:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e538:	491c      	ldr	r1, [pc, #112]	; (800e5ac <mem_malloc+0x204>)
 800e53a:	4818      	ldr	r0, [pc, #96]	; (800e59c <mem_malloc+0x1f4>)
 800e53c:	f00a faf6 	bl	8018b2c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	f003 0303 	and.w	r3, r3, #3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d006      	beq.n	800e558 <mem_malloc+0x1b0>
 800e54a:	4b12      	ldr	r3, [pc, #72]	; (800e594 <mem_malloc+0x1ec>)
 800e54c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e550:	4917      	ldr	r1, [pc, #92]	; (800e5b0 <mem_malloc+0x208>)
 800e552:	4812      	ldr	r0, [pc, #72]	; (800e59c <mem_malloc+0x1f4>)
 800e554:	f00a faea 	bl	8018b2c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	3308      	adds	r3, #8
 800e55c:	e011      	b.n	800e582 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e55e:	8bfb      	ldrh	r3, [r7, #30]
 800e560:	4618      	mov	r0, r3
 800e562:	f7ff fc37 	bl	800ddd4 <ptr_to_mem>
 800e566:	4603      	mov	r3, r0
 800e568:	881b      	ldrh	r3, [r3, #0]
 800e56a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e56c:	8bfa      	ldrh	r2, [r7, #30]
 800e56e:	8bbb      	ldrh	r3, [r7, #28]
 800e570:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800e574:	429a      	cmp	r2, r3
 800e576:	f4ff af41 	bcc.w	800e3fc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e57a:	4804      	ldr	r0, [pc, #16]	; (800e58c <mem_malloc+0x1e4>)
 800e57c:	f00a fa3d 	bl	80189fa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e580:	2300      	movs	r3, #0
}
 800e582:	4618      	mov	r0, r3
 800e584:	3720      	adds	r7, #32
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	2400408c 	.word	0x2400408c
 800e590:	24004090 	.word	0x24004090
 800e594:	08019e44 	.word	0x08019e44
 800e598:	0801a008 	.word	0x0801a008
 800e59c:	08019e8c 	.word	0x08019e8c
 800e5a0:	24004088 	.word	0x24004088
 800e5a4:	0801a01c 	.word	0x0801a01c
 800e5a8:	0801a038 	.word	0x0801a038
 800e5ac:	0801a068 	.word	0x0801a068
 800e5b0:	0801a098 	.word	0x0801a098

0800e5b4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	689b      	ldr	r3, [r3, #8]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	3303      	adds	r3, #3
 800e5ca:	f023 0303 	bic.w	r3, r3, #3
 800e5ce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	60fb      	str	r3, [r7, #12]
 800e5d4:	e011      	b.n	800e5fa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	689b      	ldr	r3, [r3, #8]
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	689b      	ldr	r3, [r3, #8]
 800e5e4:	68ba      	ldr	r2, [r7, #8]
 800e5e6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	881b      	ldrh	r3, [r3, #0]
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	60fb      	str	r3, [r7, #12]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	885b      	ldrh	r3, [r3, #2]
 800e5fe:	461a      	mov	r2, r3
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	4293      	cmp	r3, r2
 800e604:	dbe7      	blt.n	800e5d6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e606:	bf00      	nop
 800e608:	bf00      	nop
 800e60a:	3714      	adds	r7, #20
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e61a:	2300      	movs	r3, #0
 800e61c:	80fb      	strh	r3, [r7, #6]
 800e61e:	e009      	b.n	800e634 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e620:	88fb      	ldrh	r3, [r7, #6]
 800e622:	4a08      	ldr	r2, [pc, #32]	; (800e644 <memp_init+0x30>)
 800e624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e628:	4618      	mov	r0, r3
 800e62a:	f7ff ffc3 	bl	800e5b4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e62e:	88fb      	ldrh	r3, [r7, #6]
 800e630:	3301      	adds	r3, #1
 800e632:	80fb      	strh	r3, [r7, #6]
 800e634:	88fb      	ldrh	r3, [r7, #6]
 800e636:	2b0c      	cmp	r3, #12
 800e638:	d9f2      	bls.n	800e620 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e63a:	bf00      	nop
 800e63c:	bf00      	nop
 800e63e:	3708      	adds	r7, #8
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	0801de18 	.word	0x0801de18

0800e648 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e650:	f00a fa06 	bl	8018a60 <sys_arch_protect>
 800e654:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d015      	beq.n	800e690 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	68ba      	ldr	r2, [r7, #8]
 800e66a:	6812      	ldr	r2, [r2, #0]
 800e66c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	f003 0303 	and.w	r3, r3, #3
 800e674:	2b00      	cmp	r3, #0
 800e676:	d006      	beq.n	800e686 <do_memp_malloc_pool+0x3e>
 800e678:	4b09      	ldr	r3, [pc, #36]	; (800e6a0 <do_memp_malloc_pool+0x58>)
 800e67a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e67e:	4909      	ldr	r1, [pc, #36]	; (800e6a4 <do_memp_malloc_pool+0x5c>)
 800e680:	4809      	ldr	r0, [pc, #36]	; (800e6a8 <do_memp_malloc_pool+0x60>)
 800e682:	f00a fa53 	bl	8018b2c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f00a f9f8 	bl	8018a7c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	e003      	b.n	800e698 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e690:	68f8      	ldr	r0, [r7, #12]
 800e692:	f00a f9f3 	bl	8018a7c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e696:	2300      	movs	r3, #0
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	0801a0bc 	.word	0x0801a0bc
 800e6a4:	0801a0ec 	.word	0x0801a0ec
 800e6a8:	0801a110 	.word	0x0801a110

0800e6ac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d106      	bne.n	800e6c8 <memp_malloc_pool+0x1c>
 800e6ba:	4b0a      	ldr	r3, [pc, #40]	; (800e6e4 <memp_malloc_pool+0x38>)
 800e6bc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800e6c0:	4909      	ldr	r1, [pc, #36]	; (800e6e8 <memp_malloc_pool+0x3c>)
 800e6c2:	480a      	ldr	r0, [pc, #40]	; (800e6ec <memp_malloc_pool+0x40>)
 800e6c4:	f00a fa32 	bl	8018b2c <iprintf>
  if (desc == NULL) {
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d101      	bne.n	800e6d2 <memp_malloc_pool+0x26>
    return NULL;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	e003      	b.n	800e6da <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7ff ffb8 	bl	800e648 <do_memp_malloc_pool>
 800e6d8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	0801a0bc 	.word	0x0801a0bc
 800e6e8:	0801a138 	.word	0x0801a138
 800e6ec:	0801a110 	.word	0x0801a110

0800e6f0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e6fa:	79fb      	ldrb	r3, [r7, #7]
 800e6fc:	2b0c      	cmp	r3, #12
 800e6fe:	d908      	bls.n	800e712 <memp_malloc+0x22>
 800e700:	4b0a      	ldr	r3, [pc, #40]	; (800e72c <memp_malloc+0x3c>)
 800e702:	f240 1257 	movw	r2, #343	; 0x157
 800e706:	490a      	ldr	r1, [pc, #40]	; (800e730 <memp_malloc+0x40>)
 800e708:	480a      	ldr	r0, [pc, #40]	; (800e734 <memp_malloc+0x44>)
 800e70a:	f00a fa0f 	bl	8018b2c <iprintf>
 800e70e:	2300      	movs	r3, #0
 800e710:	e008      	b.n	800e724 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e712:	79fb      	ldrb	r3, [r7, #7]
 800e714:	4a08      	ldr	r2, [pc, #32]	; (800e738 <memp_malloc+0x48>)
 800e716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7ff ff94 	bl	800e648 <do_memp_malloc_pool>
 800e720:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e722:	68fb      	ldr	r3, [r7, #12]
}
 800e724:	4618      	mov	r0, r3
 800e726:	3710      	adds	r7, #16
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	0801a0bc 	.word	0x0801a0bc
 800e730:	0801a14c 	.word	0x0801a14c
 800e734:	0801a110 	.word	0x0801a110
 800e738:	0801de18 	.word	0x0801de18

0800e73c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	f003 0303 	and.w	r3, r3, #3
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d006      	beq.n	800e75e <do_memp_free_pool+0x22>
 800e750:	4b0d      	ldr	r3, [pc, #52]	; (800e788 <do_memp_free_pool+0x4c>)
 800e752:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e756:	490d      	ldr	r1, [pc, #52]	; (800e78c <do_memp_free_pool+0x50>)
 800e758:	480d      	ldr	r0, [pc, #52]	; (800e790 <do_memp_free_pool+0x54>)
 800e75a:	f00a f9e7 	bl	8018b2c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e762:	f00a f97d 	bl	8018a60 <sys_arch_protect>
 800e766:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	689b      	ldr	r3, [r3, #8]
 800e776:	68fa      	ldr	r2, [r7, #12]
 800e778:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e77a:	68b8      	ldr	r0, [r7, #8]
 800e77c:	f00a f97e 	bl	8018a7c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e780:	bf00      	nop
 800e782:	3710      	adds	r7, #16
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	0801a0bc 	.word	0x0801a0bc
 800e78c:	0801a16c 	.word	0x0801a16c
 800e790:	0801a110 	.word	0x0801a110

0800e794 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d106      	bne.n	800e7b2 <memp_free_pool+0x1e>
 800e7a4:	4b0a      	ldr	r3, [pc, #40]	; (800e7d0 <memp_free_pool+0x3c>)
 800e7a6:	f240 1295 	movw	r2, #405	; 0x195
 800e7aa:	490a      	ldr	r1, [pc, #40]	; (800e7d4 <memp_free_pool+0x40>)
 800e7ac:	480a      	ldr	r0, [pc, #40]	; (800e7d8 <memp_free_pool+0x44>)
 800e7ae:	f00a f9bd 	bl	8018b2c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d007      	beq.n	800e7c8 <memp_free_pool+0x34>
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d004      	beq.n	800e7c8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e7be:	6839      	ldr	r1, [r7, #0]
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f7ff ffbb 	bl	800e73c <do_memp_free_pool>
 800e7c6:	e000      	b.n	800e7ca <memp_free_pool+0x36>
    return;
 800e7c8:	bf00      	nop
}
 800e7ca:	3708      	adds	r7, #8
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	0801a0bc 	.word	0x0801a0bc
 800e7d4:	0801a138 	.word	0x0801a138
 800e7d8:	0801a110 	.word	0x0801a110

0800e7dc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	6039      	str	r1, [r7, #0]
 800e7e6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e7e8:	79fb      	ldrb	r3, [r7, #7]
 800e7ea:	2b0c      	cmp	r3, #12
 800e7ec:	d907      	bls.n	800e7fe <memp_free+0x22>
 800e7ee:	4b0c      	ldr	r3, [pc, #48]	; (800e820 <memp_free+0x44>)
 800e7f0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e7f4:	490b      	ldr	r1, [pc, #44]	; (800e824 <memp_free+0x48>)
 800e7f6:	480c      	ldr	r0, [pc, #48]	; (800e828 <memp_free+0x4c>)
 800e7f8:	f00a f998 	bl	8018b2c <iprintf>
 800e7fc:	e00c      	b.n	800e818 <memp_free+0x3c>

  if (mem == NULL) {
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d008      	beq.n	800e816 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e804:	79fb      	ldrb	r3, [r7, #7]
 800e806:	4a09      	ldr	r2, [pc, #36]	; (800e82c <memp_free+0x50>)
 800e808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e80c:	6839      	ldr	r1, [r7, #0]
 800e80e:	4618      	mov	r0, r3
 800e810:	f7ff ff94 	bl	800e73c <do_memp_free_pool>
 800e814:	e000      	b.n	800e818 <memp_free+0x3c>
    return;
 800e816:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e818:	3708      	adds	r7, #8
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	0801a0bc 	.word	0x0801a0bc
 800e824:	0801a18c 	.word	0x0801a18c
 800e828:	0801a110 	.word	0x0801a110
 800e82c:	0801de18 	.word	0x0801de18

0800e830 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e830:	b480      	push	{r7}
 800e832:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e834:	bf00      	nop
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr
	...

0800e840 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
 800e84c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d108      	bne.n	800e866 <netif_add+0x26>
 800e854:	4b57      	ldr	r3, [pc, #348]	; (800e9b4 <netif_add+0x174>)
 800e856:	f240 1227 	movw	r2, #295	; 0x127
 800e85a:	4957      	ldr	r1, [pc, #348]	; (800e9b8 <netif_add+0x178>)
 800e85c:	4857      	ldr	r0, [pc, #348]	; (800e9bc <netif_add+0x17c>)
 800e85e:	f00a f965 	bl	8018b2c <iprintf>
 800e862:	2300      	movs	r3, #0
 800e864:	e0a2      	b.n	800e9ac <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d108      	bne.n	800e87e <netif_add+0x3e>
 800e86c:	4b51      	ldr	r3, [pc, #324]	; (800e9b4 <netif_add+0x174>)
 800e86e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e872:	4953      	ldr	r1, [pc, #332]	; (800e9c0 <netif_add+0x180>)
 800e874:	4851      	ldr	r0, [pc, #324]	; (800e9bc <netif_add+0x17c>)
 800e876:	f00a f959 	bl	8018b2c <iprintf>
 800e87a:	2300      	movs	r3, #0
 800e87c:	e096      	b.n	800e9ac <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d101      	bne.n	800e888 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e884:	4b4f      	ldr	r3, [pc, #316]	; (800e9c4 <netif_add+0x184>)
 800e886:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d101      	bne.n	800e892 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e88e:	4b4d      	ldr	r3, [pc, #308]	; (800e9c4 <netif_add+0x184>)
 800e890:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d101      	bne.n	800e89c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e898:	4b4a      	ldr	r3, [pc, #296]	; (800e9c4 <netif_add+0x184>)
 800e89a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	4a45      	ldr	r2, [pc, #276]	; (800e9c8 <netif_add+0x188>)
 800e8b2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6a3a      	ldr	r2, [r7, #32]
 800e8cc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e8ce:	4b3f      	ldr	r3, [pc, #252]	; (800e9cc <netif_add+0x18c>)
 800e8d0:	781a      	ldrb	r2, [r3, #0]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8dc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	68b9      	ldr	r1, [r7, #8]
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	f000 f913 	bl	800eb10 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	4798      	blx	r3
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d001      	beq.n	800e8fa <netif_add+0xba>
    return NULL;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	e058      	b.n	800e9ac <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e900:	2bff      	cmp	r3, #255	; 0xff
 800e902:	d103      	bne.n	800e90c <netif_add+0xcc>
        netif->num = 0;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2200      	movs	r2, #0
 800e908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800e90c:	2300      	movs	r3, #0
 800e90e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e910:	4b2f      	ldr	r3, [pc, #188]	; (800e9d0 <netif_add+0x190>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	617b      	str	r3, [r7, #20]
 800e916:	e02b      	b.n	800e970 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e918:	697a      	ldr	r2, [r7, #20]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d106      	bne.n	800e92e <netif_add+0xee>
 800e920:	4b24      	ldr	r3, [pc, #144]	; (800e9b4 <netif_add+0x174>)
 800e922:	f240 128b 	movw	r2, #395	; 0x18b
 800e926:	492b      	ldr	r1, [pc, #172]	; (800e9d4 <netif_add+0x194>)
 800e928:	4824      	ldr	r0, [pc, #144]	; (800e9bc <netif_add+0x17c>)
 800e92a:	f00a f8ff 	bl	8018b2c <iprintf>
        num_netifs++;
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	3301      	adds	r3, #1
 800e932:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	2bff      	cmp	r3, #255	; 0xff
 800e938:	dd06      	ble.n	800e948 <netif_add+0x108>
 800e93a:	4b1e      	ldr	r3, [pc, #120]	; (800e9b4 <netif_add+0x174>)
 800e93c:	f240 128d 	movw	r2, #397	; 0x18d
 800e940:	4925      	ldr	r1, [pc, #148]	; (800e9d8 <netif_add+0x198>)
 800e942:	481e      	ldr	r0, [pc, #120]	; (800e9bc <netif_add+0x17c>)
 800e944:	f00a f8f2 	bl	8018b2c <iprintf>
        if (netif2->num == netif->num) {
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e954:	429a      	cmp	r2, r3
 800e956:	d108      	bne.n	800e96a <netif_add+0x12a>
          netif->num++;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e95e:	3301      	adds	r3, #1
 800e960:	b2da      	uxtb	r2, r3
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800e968:	e005      	b.n	800e976 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	617b      	str	r3, [r7, #20]
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1d0      	bne.n	800e918 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d1be      	bne.n	800e8fa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e982:	2bfe      	cmp	r3, #254	; 0xfe
 800e984:	d103      	bne.n	800e98e <netif_add+0x14e>
    netif_num = 0;
 800e986:	4b11      	ldr	r3, [pc, #68]	; (800e9cc <netif_add+0x18c>)
 800e988:	2200      	movs	r2, #0
 800e98a:	701a      	strb	r2, [r3, #0]
 800e98c:	e006      	b.n	800e99c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e994:	3301      	adds	r3, #1
 800e996:	b2da      	uxtb	r2, r3
 800e998:	4b0c      	ldr	r3, [pc, #48]	; (800e9cc <netif_add+0x18c>)
 800e99a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e99c:	4b0c      	ldr	r3, [pc, #48]	; (800e9d0 <netif_add+0x190>)
 800e99e:	681a      	ldr	r2, [r3, #0]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e9a4:	4a0a      	ldr	r2, [pc, #40]	; (800e9d0 <netif_add+0x190>)
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3718      	adds	r7, #24
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	0801a1a8 	.word	0x0801a1a8
 800e9b8:	0801a23c 	.word	0x0801a23c
 800e9bc:	0801a1f8 	.word	0x0801a1f8
 800e9c0:	0801a258 	.word	0x0801a258
 800e9c4:	0801de8c 	.word	0x0801de8c
 800e9c8:	0800edeb 	.word	0x0800edeb
 800e9cc:	240040c8 	.word	0x240040c8
 800e9d0:	240077f0 	.word	0x240077f0
 800e9d4:	0801a27c 	.word	0x0801a27c
 800e9d8:	0801a290 	.word	0x0801a290

0800e9dc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e9e6:	6839      	ldr	r1, [r7, #0]
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f002 fe2d 	bl	8011648 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e9ee:	6839      	ldr	r1, [r7, #0]
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f007 fb95 	bl	8016120 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e9f6:	bf00      	nop
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
	...

0800ea00 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d106      	bne.n	800ea20 <netif_do_set_ipaddr+0x20>
 800ea12:	4b1d      	ldr	r3, [pc, #116]	; (800ea88 <netif_do_set_ipaddr+0x88>)
 800ea14:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ea18:	491c      	ldr	r1, [pc, #112]	; (800ea8c <netif_do_set_ipaddr+0x8c>)
 800ea1a:	481d      	ldr	r0, [pc, #116]	; (800ea90 <netif_do_set_ipaddr+0x90>)
 800ea1c:	f00a f886 	bl	8018b2c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d106      	bne.n	800ea34 <netif_do_set_ipaddr+0x34>
 800ea26:	4b18      	ldr	r3, [pc, #96]	; (800ea88 <netif_do_set_ipaddr+0x88>)
 800ea28:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ea2c:	4917      	ldr	r1, [pc, #92]	; (800ea8c <netif_do_set_ipaddr+0x8c>)
 800ea2e:	4818      	ldr	r0, [pc, #96]	; (800ea90 <netif_do_set_ipaddr+0x90>)
 800ea30:	f00a f87c 	bl	8018b2c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	3304      	adds	r3, #4
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d01c      	beq.n	800ea7c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	3304      	adds	r3, #4
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ea52:	f107 0314 	add.w	r3, r7, #20
 800ea56:	4619      	mov	r1, r3
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f7ff ffbf 	bl	800e9dc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d002      	beq.n	800ea6a <netif_do_set_ipaddr+0x6a>
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	e000      	b.n	800ea6c <netif_do_set_ipaddr+0x6c>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ea70:	2101      	movs	r1, #1
 800ea72:	68f8      	ldr	r0, [r7, #12]
 800ea74:	f000 f8d2 	bl	800ec1c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e000      	b.n	800ea7e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3718      	adds	r7, #24
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop
 800ea88:	0801a1a8 	.word	0x0801a1a8
 800ea8c:	0801a2c0 	.word	0x0801a2c0
 800ea90:	0801a1f8 	.word	0x0801a1f8

0800ea94 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	3308      	adds	r3, #8
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d00a      	beq.n	800eac4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d002      	beq.n	800eaba <netif_do_set_netmask+0x26>
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	e000      	b.n	800eabc <netif_do_set_netmask+0x28>
 800eaba:	2300      	movs	r3, #0
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800eac0:	2301      	movs	r3, #1
 800eac2:	e000      	b.n	800eac6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800eac4:	2300      	movs	r3, #0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3714      	adds	r7, #20
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr

0800ead2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ead2:	b480      	push	{r7}
 800ead4:	b085      	sub	sp, #20
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	60f8      	str	r0, [r7, #12]
 800eada:	60b9      	str	r1, [r7, #8]
 800eadc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	330c      	adds	r3, #12
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d00a      	beq.n	800eb02 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d002      	beq.n	800eaf8 <netif_do_set_gw+0x26>
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	e000      	b.n	800eafa <netif_do_set_gw+0x28>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	68fa      	ldr	r2, [r7, #12]
 800eafc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800eafe:	2301      	movs	r3, #1
 800eb00:	e000      	b.n	800eb04 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800eb02:	2300      	movs	r3, #0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3714      	adds	r7, #20
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr

0800eb10 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b088      	sub	sp, #32
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	607a      	str	r2, [r7, #4]
 800eb1c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800eb22:	2300      	movs	r3, #0
 800eb24:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d101      	bne.n	800eb30 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800eb2c:	4b1c      	ldr	r3, [pc, #112]	; (800eba0 <netif_set_addr+0x90>)
 800eb2e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d101      	bne.n	800eb3a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800eb36:	4b1a      	ldr	r3, [pc, #104]	; (800eba0 <netif_set_addr+0x90>)
 800eb38:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d101      	bne.n	800eb44 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800eb40:	4b17      	ldr	r3, [pc, #92]	; (800eba0 <netif_set_addr+0x90>)
 800eb42:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d003      	beq.n	800eb52 <netif_set_addr+0x42>
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d101      	bne.n	800eb56 <netif_set_addr+0x46>
 800eb52:	2301      	movs	r3, #1
 800eb54:	e000      	b.n	800eb58 <netif_set_addr+0x48>
 800eb56:	2300      	movs	r3, #0
 800eb58:	617b      	str	r3, [r7, #20]
  if (remove) {
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d006      	beq.n	800eb6e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800eb60:	f107 0310 	add.w	r3, r7, #16
 800eb64:	461a      	mov	r2, r3
 800eb66:	68b9      	ldr	r1, [r7, #8]
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f7ff ff49 	bl	800ea00 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800eb6e:	69fa      	ldr	r2, [r7, #28]
 800eb70:	6879      	ldr	r1, [r7, #4]
 800eb72:	68f8      	ldr	r0, [r7, #12]
 800eb74:	f7ff ff8e 	bl	800ea94 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800eb78:	69ba      	ldr	r2, [r7, #24]
 800eb7a:	6839      	ldr	r1, [r7, #0]
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f7ff ffa8 	bl	800ead2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d106      	bne.n	800eb96 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800eb88:	f107 0310 	add.w	r3, r7, #16
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	68b9      	ldr	r1, [r7, #8]
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f7ff ff35 	bl	800ea00 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800eb96:	bf00      	nop
 800eb98:	3720      	adds	r7, #32
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	0801de8c 	.word	0x0801de8c

0800eba4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ebac:	4a04      	ldr	r2, [pc, #16]	; (800ebc0 <netif_set_default+0x1c>)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ebb2:	bf00      	nop
 800ebb4:	370c      	adds	r7, #12
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	240077f4 	.word	0x240077f4

0800ebc4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d107      	bne.n	800ebe2 <netif_set_up+0x1e>
 800ebd2:	4b0f      	ldr	r3, [pc, #60]	; (800ec10 <netif_set_up+0x4c>)
 800ebd4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ebd8:	490e      	ldr	r1, [pc, #56]	; (800ec14 <netif_set_up+0x50>)
 800ebda:	480f      	ldr	r0, [pc, #60]	; (800ec18 <netif_set_up+0x54>)
 800ebdc:	f009 ffa6 	bl	8018b2c <iprintf>
 800ebe0:	e013      	b.n	800ec0a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ebe8:	f003 0301 	and.w	r3, r3, #1
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d10c      	bne.n	800ec0a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ebf6:	f043 0301 	orr.w	r3, r3, #1
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ec02:	2103      	movs	r1, #3
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 f809 	bl	800ec1c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	0801a1a8 	.word	0x0801a1a8
 800ec14:	0801a330 	.word	0x0801a330
 800ec18:	0801a1f8 	.word	0x0801a1f8

0800ec1c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	460b      	mov	r3, r1
 800ec26:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d106      	bne.n	800ec3c <netif_issue_reports+0x20>
 800ec2e:	4b18      	ldr	r3, [pc, #96]	; (800ec90 <netif_issue_reports+0x74>)
 800ec30:	f240 326d 	movw	r2, #877	; 0x36d
 800ec34:	4917      	ldr	r1, [pc, #92]	; (800ec94 <netif_issue_reports+0x78>)
 800ec36:	4818      	ldr	r0, [pc, #96]	; (800ec98 <netif_issue_reports+0x7c>)
 800ec38:	f009 ff78 	bl	8018b2c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ec42:	f003 0304 	and.w	r3, r3, #4
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d01e      	beq.n	800ec88 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ec50:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d017      	beq.n	800ec88 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ec58:	78fb      	ldrb	r3, [r7, #3]
 800ec5a:	f003 0301 	and.w	r3, r3, #1
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d013      	beq.n	800ec8a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	3304      	adds	r3, #4
 800ec66:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d00e      	beq.n	800ec8a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ec72:	f003 0308 	and.w	r3, r3, #8
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d007      	beq.n	800ec8a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f008 f9b7 	bl	8016ff4 <etharp_request>
 800ec86:	e000      	b.n	800ec8a <netif_issue_reports+0x6e>
    return;
 800ec88:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	0801a1a8 	.word	0x0801a1a8
 800ec94:	0801a34c 	.word	0x0801a34c
 800ec98:	0801a1f8 	.word	0x0801a1f8

0800ec9c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d107      	bne.n	800ecba <netif_set_down+0x1e>
 800ecaa:	4b12      	ldr	r3, [pc, #72]	; (800ecf4 <netif_set_down+0x58>)
 800ecac:	f240 329b 	movw	r2, #923	; 0x39b
 800ecb0:	4911      	ldr	r1, [pc, #68]	; (800ecf8 <netif_set_down+0x5c>)
 800ecb2:	4812      	ldr	r0, [pc, #72]	; (800ecfc <netif_set_down+0x60>)
 800ecb4:	f009 ff3a 	bl	8018b2c <iprintf>
 800ecb8:	e019      	b.n	800ecee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ecc0:	f003 0301 	and.w	r3, r3, #1
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d012      	beq.n	800ecee <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ecce:	f023 0301 	bic.w	r3, r3, #1
 800ecd2:	b2da      	uxtb	r2, r3
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ece0:	f003 0308 	and.w	r3, r3, #8
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d002      	beq.n	800ecee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f007 fd41 	bl	8016770 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	0801a1a8 	.word	0x0801a1a8
 800ecf8:	0801a370 	.word	0x0801a370
 800ecfc:	0801a1f8 	.word	0x0801a1f8

0800ed00 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d107      	bne.n	800ed1e <netif_set_link_up+0x1e>
 800ed0e:	4b13      	ldr	r3, [pc, #76]	; (800ed5c <netif_set_link_up+0x5c>)
 800ed10:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ed14:	4912      	ldr	r1, [pc, #72]	; (800ed60 <netif_set_link_up+0x60>)
 800ed16:	4813      	ldr	r0, [pc, #76]	; (800ed64 <netif_set_link_up+0x64>)
 800ed18:	f009 ff08 	bl	8018b2c <iprintf>
 800ed1c:	e01b      	b.n	800ed56 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed24:	f003 0304 	and.w	r3, r3, #4
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d114      	bne.n	800ed56 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed32:	f043 0304 	orr.w	r3, r3, #4
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ed3e:	2103      	movs	r1, #3
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7ff ff6b 	bl	800ec1c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	69db      	ldr	r3, [r3, #28]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d003      	beq.n	800ed56 <netif_set_link_up+0x56>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	69db      	ldr	r3, [r3, #28]
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	0801a1a8 	.word	0x0801a1a8
 800ed60:	0801a390 	.word	0x0801a390
 800ed64:	0801a1f8 	.word	0x0801a1f8

0800ed68 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d107      	bne.n	800ed86 <netif_set_link_down+0x1e>
 800ed76:	4b11      	ldr	r3, [pc, #68]	; (800edbc <netif_set_link_down+0x54>)
 800ed78:	f240 4206 	movw	r2, #1030	; 0x406
 800ed7c:	4910      	ldr	r1, [pc, #64]	; (800edc0 <netif_set_link_down+0x58>)
 800ed7e:	4811      	ldr	r0, [pc, #68]	; (800edc4 <netif_set_link_down+0x5c>)
 800ed80:	f009 fed4 	bl	8018b2c <iprintf>
 800ed84:	e017      	b.n	800edb6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed8c:	f003 0304 	and.w	r3, r3, #4
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d010      	beq.n	800edb6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed9a:	f023 0304 	bic.w	r3, r3, #4
 800ed9e:	b2da      	uxtb	r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	69db      	ldr	r3, [r3, #28]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d003      	beq.n	800edb6 <netif_set_link_down+0x4e>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	69db      	ldr	r3, [r3, #28]
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	0801a1a8 	.word	0x0801a1a8
 800edc0:	0801a3b4 	.word	0x0801a3b4
 800edc4:	0801a1f8 	.word	0x0801a1f8

0800edc8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d002      	beq.n	800edde <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	683a      	ldr	r2, [r7, #0]
 800eddc:	61da      	str	r2, [r3, #28]
  }
}
 800edde:	bf00      	nop
 800ede0:	370c      	adds	r7, #12
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr

0800edea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800edea:	b480      	push	{r7}
 800edec:	b085      	sub	sp, #20
 800edee:	af00      	add	r7, sp, #0
 800edf0:	60f8      	str	r0, [r7, #12]
 800edf2:	60b9      	str	r1, [r7, #8]
 800edf4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800edf6:	f06f 030b 	mvn.w	r3, #11
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3714      	adds	r7, #20
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr
	...

0800ee08 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b085      	sub	sp, #20
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	4603      	mov	r3, r0
 800ee10:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ee12:	79fb      	ldrb	r3, [r7, #7]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d013      	beq.n	800ee40 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ee18:	4b0d      	ldr	r3, [pc, #52]	; (800ee50 <netif_get_by_index+0x48>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	60fb      	str	r3, [r7, #12]
 800ee1e:	e00c      	b.n	800ee3a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee26:	3301      	adds	r3, #1
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	79fa      	ldrb	r2, [r7, #7]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d101      	bne.n	800ee34 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	e006      	b.n	800ee42 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	60fb      	str	r3, [r7, #12]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d1ef      	bne.n	800ee20 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ee40:	2300      	movs	r3, #0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3714      	adds	r7, #20
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	240077f0 	.word	0x240077f0

0800ee54 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ee5a:	f009 fe01 	bl	8018a60 <sys_arch_protect>
 800ee5e:	6038      	str	r0, [r7, #0]
 800ee60:	4b0d      	ldr	r3, [pc, #52]	; (800ee98 <pbuf_free_ooseq+0x44>)
 800ee62:	2200      	movs	r2, #0
 800ee64:	701a      	strb	r2, [r3, #0]
 800ee66:	6838      	ldr	r0, [r7, #0]
 800ee68:	f009 fe08 	bl	8018a7c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ee6c:	4b0b      	ldr	r3, [pc, #44]	; (800ee9c <pbuf_free_ooseq+0x48>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	607b      	str	r3, [r7, #4]
 800ee72:	e00a      	b.n	800ee8a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d003      	beq.n	800ee84 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f002 fc21 	bl	80116c4 <tcp_free_ooseq>
      return;
 800ee82:	e005      	b.n	800ee90 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	607b      	str	r3, [r7, #4]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1f1      	bne.n	800ee74 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ee90:	3708      	adds	r7, #8
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	240077f8 	.word	0x240077f8
 800ee9c:	24007800 	.word	0x24007800

0800eea0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800eea8:	f7ff ffd4 	bl	800ee54 <pbuf_free_ooseq>
}
 800eeac:	bf00      	nop
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800eeba:	f009 fdd1 	bl	8018a60 <sys_arch_protect>
 800eebe:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800eec0:	4b0f      	ldr	r3, [pc, #60]	; (800ef00 <pbuf_pool_is_empty+0x4c>)
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800eec6:	4b0e      	ldr	r3, [pc, #56]	; (800ef00 <pbuf_pool_is_empty+0x4c>)
 800eec8:	2201      	movs	r2, #1
 800eeca:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f009 fdd5 	bl	8018a7c <sys_arch_unprotect>

  if (!queued) {
 800eed2:	78fb      	ldrb	r3, [r7, #3]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d10f      	bne.n	800eef8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800eed8:	2100      	movs	r1, #0
 800eeda:	480a      	ldr	r0, [pc, #40]	; (800ef04 <pbuf_pool_is_empty+0x50>)
 800eedc:	f7fe fdee 	bl	800dabc <tcpip_try_callback>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d008      	beq.n	800eef8 <pbuf_pool_is_empty+0x44>
 800eee6:	f009 fdbb 	bl	8018a60 <sys_arch_protect>
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	4b04      	ldr	r3, [pc, #16]	; (800ef00 <pbuf_pool_is_empty+0x4c>)
 800eeee:	2200      	movs	r2, #0
 800eef0:	701a      	strb	r2, [r3, #0]
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f009 fdc2 	bl	8018a7c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800eef8:	bf00      	nop
 800eefa:	3708      	adds	r7, #8
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	240077f8 	.word	0x240077f8
 800ef04:	0800eea1 	.word	0x0800eea1

0800ef08 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	4611      	mov	r1, r2
 800ef14:	461a      	mov	r2, r3
 800ef16:	460b      	mov	r3, r1
 800ef18:	80fb      	strh	r3, [r7, #6]
 800ef1a:	4613      	mov	r3, r2
 800ef1c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2200      	movs	r2, #0
 800ef22:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	68ba      	ldr	r2, [r7, #8]
 800ef28:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	88fa      	ldrh	r2, [r7, #6]
 800ef2e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	88ba      	ldrh	r2, [r7, #4]
 800ef34:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ef36:	8b3b      	ldrh	r3, [r7, #24]
 800ef38:	b2da      	uxtb	r2, r3
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	7f3a      	ldrb	r2, [r7, #28]
 800ef42:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2201      	movs	r2, #1
 800ef48:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	73da      	strb	r2, [r3, #15]
}
 800ef50:	bf00      	nop
 800ef52:	3714      	adds	r7, #20
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b08c      	sub	sp, #48	; 0x30
 800ef60:	af02      	add	r7, sp, #8
 800ef62:	4603      	mov	r3, r0
 800ef64:	71fb      	strb	r3, [r7, #7]
 800ef66:	460b      	mov	r3, r1
 800ef68:	80bb      	strh	r3, [r7, #4]
 800ef6a:	4613      	mov	r3, r2
 800ef6c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ef6e:	79fb      	ldrb	r3, [r7, #7]
 800ef70:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ef72:	887b      	ldrh	r3, [r7, #2]
 800ef74:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ef78:	d07f      	beq.n	800f07a <pbuf_alloc+0x11e>
 800ef7a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ef7e:	f300 80c8 	bgt.w	800f112 <pbuf_alloc+0x1b6>
 800ef82:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ef86:	d010      	beq.n	800efaa <pbuf_alloc+0x4e>
 800ef88:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ef8c:	f300 80c1 	bgt.w	800f112 <pbuf_alloc+0x1b6>
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d002      	beq.n	800ef9a <pbuf_alloc+0x3e>
 800ef94:	2b41      	cmp	r3, #65	; 0x41
 800ef96:	f040 80bc 	bne.w	800f112 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ef9a:	887a      	ldrh	r2, [r7, #2]
 800ef9c:	88bb      	ldrh	r3, [r7, #4]
 800ef9e:	4619      	mov	r1, r3
 800efa0:	2000      	movs	r0, #0
 800efa2:	f000 f8d1 	bl	800f148 <pbuf_alloc_reference>
 800efa6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800efa8:	e0bd      	b.n	800f126 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800efaa:	2300      	movs	r3, #0
 800efac:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800efae:	2300      	movs	r3, #0
 800efb0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800efb2:	88bb      	ldrh	r3, [r7, #4]
 800efb4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800efb6:	200c      	movs	r0, #12
 800efb8:	f7ff fb9a 	bl	800e6f0 <memp_malloc>
 800efbc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d109      	bne.n	800efd8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800efc4:	f7ff ff76 	bl	800eeb4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800efc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d002      	beq.n	800efd4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800efce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efd0:	f000 faa8 	bl	800f524 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800efd4:	2300      	movs	r3, #0
 800efd6:	e0a7      	b.n	800f128 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800efd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efda:	3303      	adds	r3, #3
 800efdc:	b29b      	uxth	r3, r3
 800efde:	f023 0303 	bic.w	r3, r3, #3
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800efe8:	b29b      	uxth	r3, r3
 800efea:	8b7a      	ldrh	r2, [r7, #26]
 800efec:	4293      	cmp	r3, r2
 800efee:	bf28      	it	cs
 800eff0:	4613      	movcs	r3, r2
 800eff2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800eff4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eff6:	3310      	adds	r3, #16
 800eff8:	693a      	ldr	r2, [r7, #16]
 800effa:	4413      	add	r3, r2
 800effc:	3303      	adds	r3, #3
 800effe:	f023 0303 	bic.w	r3, r3, #3
 800f002:	4618      	mov	r0, r3
 800f004:	89f9      	ldrh	r1, [r7, #14]
 800f006:	8b7a      	ldrh	r2, [r7, #26]
 800f008:	2300      	movs	r3, #0
 800f00a:	9301      	str	r3, [sp, #4]
 800f00c:	887b      	ldrh	r3, [r7, #2]
 800f00e:	9300      	str	r3, [sp, #0]
 800f010:	460b      	mov	r3, r1
 800f012:	4601      	mov	r1, r0
 800f014:	6938      	ldr	r0, [r7, #16]
 800f016:	f7ff ff77 	bl	800ef08 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	f003 0303 	and.w	r3, r3, #3
 800f022:	2b00      	cmp	r3, #0
 800f024:	d006      	beq.n	800f034 <pbuf_alloc+0xd8>
 800f026:	4b42      	ldr	r3, [pc, #264]	; (800f130 <pbuf_alloc+0x1d4>)
 800f028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f02c:	4941      	ldr	r1, [pc, #260]	; (800f134 <pbuf_alloc+0x1d8>)
 800f02e:	4842      	ldr	r0, [pc, #264]	; (800f138 <pbuf_alloc+0x1dc>)
 800f030:	f009 fd7c 	bl	8018b2c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f036:	3303      	adds	r3, #3
 800f038:	f023 0303 	bic.w	r3, r3, #3
 800f03c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f040:	d106      	bne.n	800f050 <pbuf_alloc+0xf4>
 800f042:	4b3b      	ldr	r3, [pc, #236]	; (800f130 <pbuf_alloc+0x1d4>)
 800f044:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f048:	493c      	ldr	r1, [pc, #240]	; (800f13c <pbuf_alloc+0x1e0>)
 800f04a:	483b      	ldr	r0, [pc, #236]	; (800f138 <pbuf_alloc+0x1dc>)
 800f04c:	f009 fd6e 	bl	8018b2c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f052:	2b00      	cmp	r3, #0
 800f054:	d102      	bne.n	800f05c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	627b      	str	r3, [r7, #36]	; 0x24
 800f05a:	e002      	b.n	800f062 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	693a      	ldr	r2, [r7, #16]
 800f060:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f066:	8b7a      	ldrh	r2, [r7, #26]
 800f068:	89fb      	ldrh	r3, [r7, #14]
 800f06a:	1ad3      	subs	r3, r2, r3
 800f06c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f06e:	2300      	movs	r3, #0
 800f070:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f072:	8b7b      	ldrh	r3, [r7, #26]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d19e      	bne.n	800efb6 <pbuf_alloc+0x5a>
      break;
 800f078:	e055      	b.n	800f126 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f07a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f07c:	3303      	adds	r3, #3
 800f07e:	b29b      	uxth	r3, r3
 800f080:	f023 0303 	bic.w	r3, r3, #3
 800f084:	b29a      	uxth	r2, r3
 800f086:	88bb      	ldrh	r3, [r7, #4]
 800f088:	3303      	adds	r3, #3
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	f023 0303 	bic.w	r3, r3, #3
 800f090:	b29b      	uxth	r3, r3
 800f092:	4413      	add	r3, r2
 800f094:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f096:	8b3b      	ldrh	r3, [r7, #24]
 800f098:	3310      	adds	r3, #16
 800f09a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f09c:	8b3a      	ldrh	r2, [r7, #24]
 800f09e:	88bb      	ldrh	r3, [r7, #4]
 800f0a0:	3303      	adds	r3, #3
 800f0a2:	f023 0303 	bic.w	r3, r3, #3
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d306      	bcc.n	800f0b8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f0aa:	8afa      	ldrh	r2, [r7, #22]
 800f0ac:	88bb      	ldrh	r3, [r7, #4]
 800f0ae:	3303      	adds	r3, #3
 800f0b0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d201      	bcs.n	800f0bc <pbuf_alloc+0x160>
        return NULL;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	e035      	b.n	800f128 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f0bc:	8afb      	ldrh	r3, [r7, #22]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7ff f972 	bl	800e3a8 <mem_malloc>
 800f0c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800f0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d101      	bne.n	800f0d0 <pbuf_alloc+0x174>
        return NULL;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	e02b      	b.n	800f128 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f0d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0d2:	3310      	adds	r3, #16
 800f0d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0d6:	4413      	add	r3, r2
 800f0d8:	3303      	adds	r3, #3
 800f0da:	f023 0303 	bic.w	r3, r3, #3
 800f0de:	4618      	mov	r0, r3
 800f0e0:	88b9      	ldrh	r1, [r7, #4]
 800f0e2:	88ba      	ldrh	r2, [r7, #4]
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	9301      	str	r3, [sp, #4]
 800f0e8:	887b      	ldrh	r3, [r7, #2]
 800f0ea:	9300      	str	r3, [sp, #0]
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	4601      	mov	r1, r0
 800f0f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0f2:	f7ff ff09 	bl	800ef08 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	f003 0303 	and.w	r3, r3, #3
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d010      	beq.n	800f124 <pbuf_alloc+0x1c8>
 800f102:	4b0b      	ldr	r3, [pc, #44]	; (800f130 <pbuf_alloc+0x1d4>)
 800f104:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f108:	490d      	ldr	r1, [pc, #52]	; (800f140 <pbuf_alloc+0x1e4>)
 800f10a:	480b      	ldr	r0, [pc, #44]	; (800f138 <pbuf_alloc+0x1dc>)
 800f10c:	f009 fd0e 	bl	8018b2c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f110:	e008      	b.n	800f124 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f112:	4b07      	ldr	r3, [pc, #28]	; (800f130 <pbuf_alloc+0x1d4>)
 800f114:	f240 1227 	movw	r2, #295	; 0x127
 800f118:	490a      	ldr	r1, [pc, #40]	; (800f144 <pbuf_alloc+0x1e8>)
 800f11a:	4807      	ldr	r0, [pc, #28]	; (800f138 <pbuf_alloc+0x1dc>)
 800f11c:	f009 fd06 	bl	8018b2c <iprintf>
      return NULL;
 800f120:	2300      	movs	r3, #0
 800f122:	e001      	b.n	800f128 <pbuf_alloc+0x1cc>
      break;
 800f124:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3728      	adds	r7, #40	; 0x28
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	0801a3d8 	.word	0x0801a3d8
 800f134:	0801a408 	.word	0x0801a408
 800f138:	0801a438 	.word	0x0801a438
 800f13c:	0801a460 	.word	0x0801a460
 800f140:	0801a494 	.word	0x0801a494
 800f144:	0801a4c0 	.word	0x0801a4c0

0800f148 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b086      	sub	sp, #24
 800f14c:	af02      	add	r7, sp, #8
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	460b      	mov	r3, r1
 800f152:	807b      	strh	r3, [r7, #2]
 800f154:	4613      	mov	r3, r2
 800f156:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f158:	883b      	ldrh	r3, [r7, #0]
 800f15a:	2b41      	cmp	r3, #65	; 0x41
 800f15c:	d009      	beq.n	800f172 <pbuf_alloc_reference+0x2a>
 800f15e:	883b      	ldrh	r3, [r7, #0]
 800f160:	2b01      	cmp	r3, #1
 800f162:	d006      	beq.n	800f172 <pbuf_alloc_reference+0x2a>
 800f164:	4b0f      	ldr	r3, [pc, #60]	; (800f1a4 <pbuf_alloc_reference+0x5c>)
 800f166:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f16a:	490f      	ldr	r1, [pc, #60]	; (800f1a8 <pbuf_alloc_reference+0x60>)
 800f16c:	480f      	ldr	r0, [pc, #60]	; (800f1ac <pbuf_alloc_reference+0x64>)
 800f16e:	f009 fcdd 	bl	8018b2c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f172:	200b      	movs	r0, #11
 800f174:	f7ff fabc 	bl	800e6f0 <memp_malloc>
 800f178:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d101      	bne.n	800f184 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f180:	2300      	movs	r3, #0
 800f182:	e00b      	b.n	800f19c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f184:	8879      	ldrh	r1, [r7, #2]
 800f186:	887a      	ldrh	r2, [r7, #2]
 800f188:	2300      	movs	r3, #0
 800f18a:	9301      	str	r3, [sp, #4]
 800f18c:	883b      	ldrh	r3, [r7, #0]
 800f18e:	9300      	str	r3, [sp, #0]
 800f190:	460b      	mov	r3, r1
 800f192:	6879      	ldr	r1, [r7, #4]
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f7ff feb7 	bl	800ef08 <pbuf_init_alloced_pbuf>
  return p;
 800f19a:	68fb      	ldr	r3, [r7, #12]
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	0801a3d8 	.word	0x0801a3d8
 800f1a8:	0801a4dc 	.word	0x0801a4dc
 800f1ac:	0801a438 	.word	0x0801a438

0800f1b0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af02      	add	r7, sp, #8
 800f1b6:	607b      	str	r3, [r7, #4]
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	73fb      	strb	r3, [r7, #15]
 800f1bc:	460b      	mov	r3, r1
 800f1be:	81bb      	strh	r3, [r7, #12]
 800f1c0:	4613      	mov	r3, r2
 800f1c2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f1c4:	7bfb      	ldrb	r3, [r7, #15]
 800f1c6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f1c8:	8a7b      	ldrh	r3, [r7, #18]
 800f1ca:	3303      	adds	r3, #3
 800f1cc:	f023 0203 	bic.w	r2, r3, #3
 800f1d0:	89bb      	ldrh	r3, [r7, #12]
 800f1d2:	441a      	add	r2, r3
 800f1d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d901      	bls.n	800f1de <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	e018      	b.n	800f210 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f1de:	6a3b      	ldr	r3, [r7, #32]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d007      	beq.n	800f1f4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f1e4:	8a7b      	ldrh	r3, [r7, #18]
 800f1e6:	3303      	adds	r3, #3
 800f1e8:	f023 0303 	bic.w	r3, r3, #3
 800f1ec:	6a3a      	ldr	r2, [r7, #32]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	617b      	str	r3, [r7, #20]
 800f1f2:	e001      	b.n	800f1f8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	89b9      	ldrh	r1, [r7, #12]
 800f1fc:	89ba      	ldrh	r2, [r7, #12]
 800f1fe:	2302      	movs	r3, #2
 800f200:	9301      	str	r3, [sp, #4]
 800f202:	897b      	ldrh	r3, [r7, #10]
 800f204:	9300      	str	r3, [sp, #0]
 800f206:	460b      	mov	r3, r1
 800f208:	6979      	ldr	r1, [r7, #20]
 800f20a:	f7ff fe7d 	bl	800ef08 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f20e:	687b      	ldr	r3, [r7, #4]
}
 800f210:	4618      	mov	r0, r3
 800f212:	3718      	adds	r7, #24
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	460b      	mov	r3, r1
 800f222:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d106      	bne.n	800f238 <pbuf_realloc+0x20>
 800f22a:	4b3a      	ldr	r3, [pc, #232]	; (800f314 <pbuf_realloc+0xfc>)
 800f22c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f230:	4939      	ldr	r1, [pc, #228]	; (800f318 <pbuf_realloc+0x100>)
 800f232:	483a      	ldr	r0, [pc, #232]	; (800f31c <pbuf_realloc+0x104>)
 800f234:	f009 fc7a 	bl	8018b2c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	891b      	ldrh	r3, [r3, #8]
 800f23c:	887a      	ldrh	r2, [r7, #2]
 800f23e:	429a      	cmp	r2, r3
 800f240:	d263      	bcs.n	800f30a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	891a      	ldrh	r2, [r3, #8]
 800f246:	887b      	ldrh	r3, [r7, #2]
 800f248:	1ad3      	subs	r3, r2, r3
 800f24a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f24c:	887b      	ldrh	r3, [r7, #2]
 800f24e:	817b      	strh	r3, [r7, #10]
  q = p;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f254:	e018      	b.n	800f288 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	895b      	ldrh	r3, [r3, #10]
 800f25a:	897a      	ldrh	r2, [r7, #10]
 800f25c:	1ad3      	subs	r3, r2, r3
 800f25e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	891a      	ldrh	r2, [r3, #8]
 800f264:	893b      	ldrh	r3, [r7, #8]
 800f266:	1ad3      	subs	r3, r2, r3
 800f268:	b29a      	uxth	r2, r3
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d106      	bne.n	800f288 <pbuf_realloc+0x70>
 800f27a:	4b26      	ldr	r3, [pc, #152]	; (800f314 <pbuf_realloc+0xfc>)
 800f27c:	f240 12af 	movw	r2, #431	; 0x1af
 800f280:	4927      	ldr	r1, [pc, #156]	; (800f320 <pbuf_realloc+0x108>)
 800f282:	4826      	ldr	r0, [pc, #152]	; (800f31c <pbuf_realloc+0x104>)
 800f284:	f009 fc52 	bl	8018b2c <iprintf>
  while (rem_len > q->len) {
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	895b      	ldrh	r3, [r3, #10]
 800f28c:	897a      	ldrh	r2, [r7, #10]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d8e1      	bhi.n	800f256 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	7b1b      	ldrb	r3, [r3, #12]
 800f296:	f003 030f 	and.w	r3, r3, #15
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d121      	bne.n	800f2e2 <pbuf_realloc+0xca>
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	895b      	ldrh	r3, [r3, #10]
 800f2a2:	897a      	ldrh	r2, [r7, #10]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d01c      	beq.n	800f2e2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	7b5b      	ldrb	r3, [r3, #13]
 800f2ac:	f003 0302 	and.w	r3, r3, #2
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d116      	bne.n	800f2e2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	685a      	ldr	r2, [r3, #4]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	1ad3      	subs	r3, r2, r3
 800f2bc:	b29a      	uxth	r2, r3
 800f2be:	897b      	ldrh	r3, [r7, #10]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f7fe ff64 	bl	800e194 <mem_trim>
 800f2cc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d106      	bne.n	800f2e2 <pbuf_realloc+0xca>
 800f2d4:	4b0f      	ldr	r3, [pc, #60]	; (800f314 <pbuf_realloc+0xfc>)
 800f2d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f2da:	4912      	ldr	r1, [pc, #72]	; (800f324 <pbuf_realloc+0x10c>)
 800f2dc:	480f      	ldr	r0, [pc, #60]	; (800f31c <pbuf_realloc+0x104>)
 800f2de:	f009 fc25 	bl	8018b2c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	897a      	ldrh	r2, [r7, #10]
 800f2e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	895a      	ldrh	r2, [r3, #10]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d004      	beq.n	800f302 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f000 f911 	bl	800f524 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2200      	movs	r2, #0
 800f306:	601a      	str	r2, [r3, #0]
 800f308:	e000      	b.n	800f30c <pbuf_realloc+0xf4>
    return;
 800f30a:	bf00      	nop

}
 800f30c:	3710      	adds	r7, #16
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	0801a3d8 	.word	0x0801a3d8
 800f318:	0801a4f0 	.word	0x0801a4f0
 800f31c:	0801a438 	.word	0x0801a438
 800f320:	0801a508 	.word	0x0801a508
 800f324:	0801a520 	.word	0x0801a520

0800f328 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	60f8      	str	r0, [r7, #12]
 800f330:	60b9      	str	r1, [r7, #8]
 800f332:	4613      	mov	r3, r2
 800f334:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d106      	bne.n	800f34a <pbuf_add_header_impl+0x22>
 800f33c:	4b2b      	ldr	r3, [pc, #172]	; (800f3ec <pbuf_add_header_impl+0xc4>)
 800f33e:	f240 12df 	movw	r2, #479	; 0x1df
 800f342:	492b      	ldr	r1, [pc, #172]	; (800f3f0 <pbuf_add_header_impl+0xc8>)
 800f344:	482b      	ldr	r0, [pc, #172]	; (800f3f4 <pbuf_add_header_impl+0xcc>)
 800f346:	f009 fbf1 	bl	8018b2c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d003      	beq.n	800f358 <pbuf_add_header_impl+0x30>
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f356:	d301      	bcc.n	800f35c <pbuf_add_header_impl+0x34>
    return 1;
 800f358:	2301      	movs	r3, #1
 800f35a:	e043      	b.n	800f3e4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d101      	bne.n	800f366 <pbuf_add_header_impl+0x3e>
    return 0;
 800f362:	2300      	movs	r3, #0
 800f364:	e03e      	b.n	800f3e4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	891a      	ldrh	r2, [r3, #8]
 800f36e:	8a7b      	ldrh	r3, [r7, #18]
 800f370:	4413      	add	r3, r2
 800f372:	b29b      	uxth	r3, r3
 800f374:	8a7a      	ldrh	r2, [r7, #18]
 800f376:	429a      	cmp	r2, r3
 800f378:	d901      	bls.n	800f37e <pbuf_add_header_impl+0x56>
    return 1;
 800f37a:	2301      	movs	r3, #1
 800f37c:	e032      	b.n	800f3e4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	7b1b      	ldrb	r3, [r3, #12]
 800f382:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f384:	8a3b      	ldrh	r3, [r7, #16]
 800f386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d00c      	beq.n	800f3a8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	685a      	ldr	r2, [r3, #4]
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	425b      	negs	r3, r3
 800f396:	4413      	add	r3, r2
 800f398:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	3310      	adds	r3, #16
 800f39e:	697a      	ldr	r2, [r7, #20]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d20d      	bcs.n	800f3c0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e01d      	b.n	800f3e4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f3a8:	79fb      	ldrb	r3, [r7, #7]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d006      	beq.n	800f3bc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	685a      	ldr	r2, [r3, #4]
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	425b      	negs	r3, r3
 800f3b6:	4413      	add	r3, r2
 800f3b8:	617b      	str	r3, [r7, #20]
 800f3ba:	e001      	b.n	800f3c0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	e011      	b.n	800f3e4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	697a      	ldr	r2, [r7, #20]
 800f3c4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	895a      	ldrh	r2, [r3, #10]
 800f3ca:	8a7b      	ldrh	r3, [r7, #18]
 800f3cc:	4413      	add	r3, r2
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	891a      	ldrh	r2, [r3, #8]
 800f3d8:	8a7b      	ldrh	r3, [r7, #18]
 800f3da:	4413      	add	r3, r2
 800f3dc:	b29a      	uxth	r2, r3
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	811a      	strh	r2, [r3, #8]


  return 0;
 800f3e2:	2300      	movs	r3, #0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3718      	adds	r7, #24
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	0801a3d8 	.word	0x0801a3d8
 800f3f0:	0801a53c 	.word	0x0801a53c
 800f3f4:	0801a438 	.word	0x0801a438

0800f3f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f402:	2200      	movs	r2, #0
 800f404:	6839      	ldr	r1, [r7, #0]
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f7ff ff8e 	bl	800f328 <pbuf_add_header_impl>
 800f40c:	4603      	mov	r3, r0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3708      	adds	r7, #8
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
	...

0800f418 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d106      	bne.n	800f436 <pbuf_remove_header+0x1e>
 800f428:	4b20      	ldr	r3, [pc, #128]	; (800f4ac <pbuf_remove_header+0x94>)
 800f42a:	f240 224b 	movw	r2, #587	; 0x24b
 800f42e:	4920      	ldr	r1, [pc, #128]	; (800f4b0 <pbuf_remove_header+0x98>)
 800f430:	4820      	ldr	r0, [pc, #128]	; (800f4b4 <pbuf_remove_header+0x9c>)
 800f432:	f009 fb7b 	bl	8018b2c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d003      	beq.n	800f444 <pbuf_remove_header+0x2c>
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f442:	d301      	bcc.n	800f448 <pbuf_remove_header+0x30>
    return 1;
 800f444:	2301      	movs	r3, #1
 800f446:	e02c      	b.n	800f4a2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d101      	bne.n	800f452 <pbuf_remove_header+0x3a>
    return 0;
 800f44e:	2300      	movs	r3, #0
 800f450:	e027      	b.n	800f4a2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	895b      	ldrh	r3, [r3, #10]
 800f45a:	89fa      	ldrh	r2, [r7, #14]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d908      	bls.n	800f472 <pbuf_remove_header+0x5a>
 800f460:	4b12      	ldr	r3, [pc, #72]	; (800f4ac <pbuf_remove_header+0x94>)
 800f462:	f240 2255 	movw	r2, #597	; 0x255
 800f466:	4914      	ldr	r1, [pc, #80]	; (800f4b8 <pbuf_remove_header+0xa0>)
 800f468:	4812      	ldr	r0, [pc, #72]	; (800f4b4 <pbuf_remove_header+0x9c>)
 800f46a:	f009 fb5f 	bl	8018b2c <iprintf>
 800f46e:	2301      	movs	r3, #1
 800f470:	e017      	b.n	800f4a2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	685a      	ldr	r2, [r3, #4]
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	441a      	add	r2, r3
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	895a      	ldrh	r2, [r3, #10]
 800f488:	89fb      	ldrh	r3, [r7, #14]
 800f48a:	1ad3      	subs	r3, r2, r3
 800f48c:	b29a      	uxth	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	891a      	ldrh	r2, [r3, #8]
 800f496:	89fb      	ldrh	r3, [r7, #14]
 800f498:	1ad3      	subs	r3, r2, r3
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f4a0:	2300      	movs	r3, #0
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3710      	adds	r7, #16
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	0801a3d8 	.word	0x0801a3d8
 800f4b0:	0801a53c 	.word	0x0801a53c
 800f4b4:	0801a438 	.word	0x0801a438
 800f4b8:	0801a548 	.word	0x0801a548

0800f4bc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	807b      	strh	r3, [r7, #2]
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f4cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	da08      	bge.n	800f4e6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f4d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4d8:	425b      	negs	r3, r3
 800f4da:	4619      	mov	r1, r3
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7ff ff9b 	bl	800f418 <pbuf_remove_header>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	e007      	b.n	800f4f6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f4e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4ea:	787a      	ldrb	r2, [r7, #1]
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f7ff ff1a 	bl	800f328 <pbuf_add_header_impl>
 800f4f4:	4603      	mov	r3, r0
  }
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3708      	adds	r7, #8
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b082      	sub	sp, #8
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	460b      	mov	r3, r1
 800f508:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f50a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f50e:	2201      	movs	r2, #1
 800f510:	4619      	mov	r1, r3
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f7ff ffd2 	bl	800f4bc <pbuf_header_impl>
 800f518:	4603      	mov	r3, r0
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3708      	adds	r7, #8
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
	...

0800f524 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b088      	sub	sp, #32
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d10b      	bne.n	800f54a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d106      	bne.n	800f546 <pbuf_free+0x22>
 800f538:	4b3b      	ldr	r3, [pc, #236]	; (800f628 <pbuf_free+0x104>)
 800f53a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f53e:	493b      	ldr	r1, [pc, #236]	; (800f62c <pbuf_free+0x108>)
 800f540:	483b      	ldr	r0, [pc, #236]	; (800f630 <pbuf_free+0x10c>)
 800f542:	f009 faf3 	bl	8018b2c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f546:	2300      	movs	r3, #0
 800f548:	e069      	b.n	800f61e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f54a:	2300      	movs	r3, #0
 800f54c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f54e:	e062      	b.n	800f616 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f550:	f009 fa86 	bl	8018a60 <sys_arch_protect>
 800f554:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	7b9b      	ldrb	r3, [r3, #14]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d106      	bne.n	800f56c <pbuf_free+0x48>
 800f55e:	4b32      	ldr	r3, [pc, #200]	; (800f628 <pbuf_free+0x104>)
 800f560:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f564:	4933      	ldr	r1, [pc, #204]	; (800f634 <pbuf_free+0x110>)
 800f566:	4832      	ldr	r0, [pc, #200]	; (800f630 <pbuf_free+0x10c>)
 800f568:	f009 fae0 	bl	8018b2c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	7b9b      	ldrb	r3, [r3, #14]
 800f570:	3b01      	subs	r3, #1
 800f572:	b2da      	uxtb	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	739a      	strb	r2, [r3, #14]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	7b9b      	ldrb	r3, [r3, #14]
 800f57c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f57e:	69b8      	ldr	r0, [r7, #24]
 800f580:	f009 fa7c 	bl	8018a7c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f584:	7dfb      	ldrb	r3, [r7, #23]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d143      	bne.n	800f612 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	7b1b      	ldrb	r3, [r3, #12]
 800f594:	f003 030f 	and.w	r3, r3, #15
 800f598:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	7b5b      	ldrb	r3, [r3, #13]
 800f59e:	f003 0302 	and.w	r3, r3, #2
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d011      	beq.n	800f5ca <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	691b      	ldr	r3, [r3, #16]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d106      	bne.n	800f5c0 <pbuf_free+0x9c>
 800f5b2:	4b1d      	ldr	r3, [pc, #116]	; (800f628 <pbuf_free+0x104>)
 800f5b4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f5b8:	491f      	ldr	r1, [pc, #124]	; (800f638 <pbuf_free+0x114>)
 800f5ba:	481d      	ldr	r0, [pc, #116]	; (800f630 <pbuf_free+0x10c>)
 800f5bc:	f009 fab6 	bl	8018b2c <iprintf>
        pc->custom_free_function(p);
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	691b      	ldr	r3, [r3, #16]
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	4798      	blx	r3
 800f5c8:	e01d      	b.n	800f606 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f5ca:	7bfb      	ldrb	r3, [r7, #15]
 800f5cc:	2b02      	cmp	r3, #2
 800f5ce:	d104      	bne.n	800f5da <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f5d0:	6879      	ldr	r1, [r7, #4]
 800f5d2:	200c      	movs	r0, #12
 800f5d4:	f7ff f902 	bl	800e7dc <memp_free>
 800f5d8:	e015      	b.n	800f606 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f5da:	7bfb      	ldrb	r3, [r7, #15]
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d104      	bne.n	800f5ea <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f5e0:	6879      	ldr	r1, [r7, #4]
 800f5e2:	200b      	movs	r0, #11
 800f5e4:	f7ff f8fa 	bl	800e7dc <memp_free>
 800f5e8:	e00d      	b.n	800f606 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f5ea:	7bfb      	ldrb	r3, [r7, #15]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d103      	bne.n	800f5f8 <pbuf_free+0xd4>
          mem_free(p);
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7fe fd3f 	bl	800e074 <mem_free>
 800f5f6:	e006      	b.n	800f606 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f5f8:	4b0b      	ldr	r3, [pc, #44]	; (800f628 <pbuf_free+0x104>)
 800f5fa:	f240 320f 	movw	r2, #783	; 0x30f
 800f5fe:	490f      	ldr	r1, [pc, #60]	; (800f63c <pbuf_free+0x118>)
 800f600:	480b      	ldr	r0, [pc, #44]	; (800f630 <pbuf_free+0x10c>)
 800f602:	f009 fa93 	bl	8018b2c <iprintf>
        }
      }
      count++;
 800f606:	7ffb      	ldrb	r3, [r7, #31]
 800f608:	3301      	adds	r3, #1
 800f60a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	607b      	str	r3, [r7, #4]
 800f610:	e001      	b.n	800f616 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f612:	2300      	movs	r3, #0
 800f614:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d199      	bne.n	800f550 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f61c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3720      	adds	r7, #32
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	0801a3d8 	.word	0x0801a3d8
 800f62c:	0801a53c 	.word	0x0801a53c
 800f630:	0801a438 	.word	0x0801a438
 800f634:	0801a568 	.word	0x0801a568
 800f638:	0801a580 	.word	0x0801a580
 800f63c:	0801a5a4 	.word	0x0801a5a4

0800f640 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f640:	b480      	push	{r7}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f648:	2300      	movs	r3, #0
 800f64a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f64c:	e005      	b.n	800f65a <pbuf_clen+0x1a>
    ++len;
 800f64e:	89fb      	ldrh	r3, [r7, #14]
 800f650:	3301      	adds	r3, #1
 800f652:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1f6      	bne.n	800f64e <pbuf_clen+0xe>
  }
  return len;
 800f660:	89fb      	ldrh	r3, [r7, #14]
}
 800f662:	4618      	mov	r0, r3
 800f664:	3714      	adds	r7, #20
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr
	...

0800f670 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d016      	beq.n	800f6ac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f67e:	f009 f9ef 	bl	8018a60 <sys_arch_protect>
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	7b9b      	ldrb	r3, [r3, #14]
 800f688:	3301      	adds	r3, #1
 800f68a:	b2da      	uxtb	r2, r3
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	739a      	strb	r2, [r3, #14]
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	f009 f9f3 	bl	8018a7c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	7b9b      	ldrb	r3, [r3, #14]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d106      	bne.n	800f6ac <pbuf_ref+0x3c>
 800f69e:	4b05      	ldr	r3, [pc, #20]	; (800f6b4 <pbuf_ref+0x44>)
 800f6a0:	f240 3242 	movw	r2, #834	; 0x342
 800f6a4:	4904      	ldr	r1, [pc, #16]	; (800f6b8 <pbuf_ref+0x48>)
 800f6a6:	4805      	ldr	r0, [pc, #20]	; (800f6bc <pbuf_ref+0x4c>)
 800f6a8:	f009 fa40 	bl	8018b2c <iprintf>
  }
}
 800f6ac:	bf00      	nop
 800f6ae:	3710      	adds	r7, #16
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}
 800f6b4:	0801a3d8 	.word	0x0801a3d8
 800f6b8:	0801a5b8 	.word	0x0801a5b8
 800f6bc:	0801a438 	.word	0x0801a438

0800f6c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d002      	beq.n	800f6d6 <pbuf_cat+0x16>
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d107      	bne.n	800f6e6 <pbuf_cat+0x26>
 800f6d6:	4b20      	ldr	r3, [pc, #128]	; (800f758 <pbuf_cat+0x98>)
 800f6d8:	f240 3259 	movw	r2, #857	; 0x359
 800f6dc:	491f      	ldr	r1, [pc, #124]	; (800f75c <pbuf_cat+0x9c>)
 800f6de:	4820      	ldr	r0, [pc, #128]	; (800f760 <pbuf_cat+0xa0>)
 800f6e0:	f009 fa24 	bl	8018b2c <iprintf>
 800f6e4:	e034      	b.n	800f750 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	60fb      	str	r3, [r7, #12]
 800f6ea:	e00a      	b.n	800f702 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	891a      	ldrh	r2, [r3, #8]
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	891b      	ldrh	r3, [r3, #8]
 800f6f4:	4413      	add	r3, r2
 800f6f6:	b29a      	uxth	r2, r3
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	60fb      	str	r3, [r7, #12]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d1f0      	bne.n	800f6ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	891a      	ldrh	r2, [r3, #8]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	895b      	ldrh	r3, [r3, #10]
 800f712:	429a      	cmp	r2, r3
 800f714:	d006      	beq.n	800f724 <pbuf_cat+0x64>
 800f716:	4b10      	ldr	r3, [pc, #64]	; (800f758 <pbuf_cat+0x98>)
 800f718:	f240 3262 	movw	r2, #866	; 0x362
 800f71c:	4911      	ldr	r1, [pc, #68]	; (800f764 <pbuf_cat+0xa4>)
 800f71e:	4810      	ldr	r0, [pc, #64]	; (800f760 <pbuf_cat+0xa0>)
 800f720:	f009 fa04 	bl	8018b2c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d006      	beq.n	800f73a <pbuf_cat+0x7a>
 800f72c:	4b0a      	ldr	r3, [pc, #40]	; (800f758 <pbuf_cat+0x98>)
 800f72e:	f240 3263 	movw	r2, #867	; 0x363
 800f732:	490d      	ldr	r1, [pc, #52]	; (800f768 <pbuf_cat+0xa8>)
 800f734:	480a      	ldr	r0, [pc, #40]	; (800f760 <pbuf_cat+0xa0>)
 800f736:	f009 f9f9 	bl	8018b2c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	891a      	ldrh	r2, [r3, #8]
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	891b      	ldrh	r3, [r3, #8]
 800f742:	4413      	add	r3, r2
 800f744:	b29a      	uxth	r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	683a      	ldr	r2, [r7, #0]
 800f74e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f750:	3710      	adds	r7, #16
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	0801a3d8 	.word	0x0801a3d8
 800f75c:	0801a5cc 	.word	0x0801a5cc
 800f760:	0801a438 	.word	0x0801a438
 800f764:	0801a604 	.word	0x0801a604
 800f768:	0801a634 	.word	0x0801a634

0800f76c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f776:	6839      	ldr	r1, [r7, #0]
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f7ff ffa1 	bl	800f6c0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f77e:	6838      	ldr	r0, [r7, #0]
 800f780:	f7ff ff76 	bl	800f670 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f784:	bf00      	nop
 800f786:	3708      	adds	r7, #8
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b086      	sub	sp, #24
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f796:	2300      	movs	r3, #0
 800f798:	617b      	str	r3, [r7, #20]
 800f79a:	2300      	movs	r3, #0
 800f79c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d008      	beq.n	800f7b6 <pbuf_copy+0x2a>
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d005      	beq.n	800f7b6 <pbuf_copy+0x2a>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	891a      	ldrh	r2, [r3, #8]
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	891b      	ldrh	r3, [r3, #8]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d209      	bcs.n	800f7ca <pbuf_copy+0x3e>
 800f7b6:	4b57      	ldr	r3, [pc, #348]	; (800f914 <pbuf_copy+0x188>)
 800f7b8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f7bc:	4956      	ldr	r1, [pc, #344]	; (800f918 <pbuf_copy+0x18c>)
 800f7be:	4857      	ldr	r0, [pc, #348]	; (800f91c <pbuf_copy+0x190>)
 800f7c0:	f009 f9b4 	bl	8018b2c <iprintf>
 800f7c4:	f06f 030f 	mvn.w	r3, #15
 800f7c8:	e09f      	b.n	800f90a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	895b      	ldrh	r3, [r3, #10]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	1ad2      	subs	r2, r2, r3
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	895b      	ldrh	r3, [r3, #10]
 800f7d8:	4619      	mov	r1, r3
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	1acb      	subs	r3, r1, r3
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d306      	bcc.n	800f7f0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	895b      	ldrh	r3, [r3, #10]
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	1ad3      	subs	r3, r2, r3
 800f7ec:	60fb      	str	r3, [r7, #12]
 800f7ee:	e005      	b.n	800f7fc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	895b      	ldrh	r3, [r3, #10]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	1ad3      	subs	r3, r2, r3
 800f7fa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	685a      	ldr	r2, [r3, #4]
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	18d0      	adds	r0, r2, r3
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	685a      	ldr	r2, [r3, #4]
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	4413      	add	r3, r2
 800f80c:	68fa      	ldr	r2, [r7, #12]
 800f80e:	4619      	mov	r1, r3
 800f810:	f009 f976 	bl	8018b00 <memcpy>
    offset_to += len;
 800f814:	697a      	ldr	r2, [r7, #20]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	4413      	add	r3, r2
 800f81a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f81c:	693a      	ldr	r2, [r7, #16]
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	4413      	add	r3, r2
 800f822:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	895b      	ldrh	r3, [r3, #10]
 800f828:	461a      	mov	r2, r3
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d906      	bls.n	800f83e <pbuf_copy+0xb2>
 800f830:	4b38      	ldr	r3, [pc, #224]	; (800f914 <pbuf_copy+0x188>)
 800f832:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f836:	493a      	ldr	r1, [pc, #232]	; (800f920 <pbuf_copy+0x194>)
 800f838:	4838      	ldr	r0, [pc, #224]	; (800f91c <pbuf_copy+0x190>)
 800f83a:	f009 f977 	bl	8018b2c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	895b      	ldrh	r3, [r3, #10]
 800f842:	461a      	mov	r2, r3
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	4293      	cmp	r3, r2
 800f848:	d906      	bls.n	800f858 <pbuf_copy+0xcc>
 800f84a:	4b32      	ldr	r3, [pc, #200]	; (800f914 <pbuf_copy+0x188>)
 800f84c:	f240 32da 	movw	r2, #986	; 0x3da
 800f850:	4934      	ldr	r1, [pc, #208]	; (800f924 <pbuf_copy+0x198>)
 800f852:	4832      	ldr	r0, [pc, #200]	; (800f91c <pbuf_copy+0x190>)
 800f854:	f009 f96a 	bl	8018b2c <iprintf>
    if (offset_from >= p_from->len) {
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	895b      	ldrh	r3, [r3, #10]
 800f85c:	461a      	mov	r2, r3
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	4293      	cmp	r3, r2
 800f862:	d304      	bcc.n	800f86e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f864:	2300      	movs	r3, #0
 800f866:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	895b      	ldrh	r3, [r3, #10]
 800f872:	461a      	mov	r2, r3
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	4293      	cmp	r3, r2
 800f878:	d114      	bne.n	800f8a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f87a:	2300      	movs	r3, #0
 800f87c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d10c      	bne.n	800f8a4 <pbuf_copy+0x118>
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d009      	beq.n	800f8a4 <pbuf_copy+0x118>
 800f890:	4b20      	ldr	r3, [pc, #128]	; (800f914 <pbuf_copy+0x188>)
 800f892:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f896:	4924      	ldr	r1, [pc, #144]	; (800f928 <pbuf_copy+0x19c>)
 800f898:	4820      	ldr	r0, [pc, #128]	; (800f91c <pbuf_copy+0x190>)
 800f89a:	f009 f947 	bl	8018b2c <iprintf>
 800f89e:	f06f 030f 	mvn.w	r3, #15
 800f8a2:	e032      	b.n	800f90a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d013      	beq.n	800f8d2 <pbuf_copy+0x146>
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	895a      	ldrh	r2, [r3, #10]
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	891b      	ldrh	r3, [r3, #8]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d10d      	bne.n	800f8d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d009      	beq.n	800f8d2 <pbuf_copy+0x146>
 800f8be:	4b15      	ldr	r3, [pc, #84]	; (800f914 <pbuf_copy+0x188>)
 800f8c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f8c4:	4919      	ldr	r1, [pc, #100]	; (800f92c <pbuf_copy+0x1a0>)
 800f8c6:	4815      	ldr	r0, [pc, #84]	; (800f91c <pbuf_copy+0x190>)
 800f8c8:	f009 f930 	bl	8018b2c <iprintf>
 800f8cc:	f06f 0305 	mvn.w	r3, #5
 800f8d0:	e01b      	b.n	800f90a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d013      	beq.n	800f900 <pbuf_copy+0x174>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	895a      	ldrh	r2, [r3, #10]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	891b      	ldrh	r3, [r3, #8]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d10d      	bne.n	800f900 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d009      	beq.n	800f900 <pbuf_copy+0x174>
 800f8ec:	4b09      	ldr	r3, [pc, #36]	; (800f914 <pbuf_copy+0x188>)
 800f8ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f8f2:	490e      	ldr	r1, [pc, #56]	; (800f92c <pbuf_copy+0x1a0>)
 800f8f4:	4809      	ldr	r0, [pc, #36]	; (800f91c <pbuf_copy+0x190>)
 800f8f6:	f009 f919 	bl	8018b2c <iprintf>
 800f8fa:	f06f 0305 	mvn.w	r3, #5
 800f8fe:	e004      	b.n	800f90a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	f47f af61 	bne.w	800f7ca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f908:	2300      	movs	r3, #0
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3718      	adds	r7, #24
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	0801a3d8 	.word	0x0801a3d8
 800f918:	0801a680 	.word	0x0801a680
 800f91c:	0801a438 	.word	0x0801a438
 800f920:	0801a6b0 	.word	0x0801a6b0
 800f924:	0801a6c8 	.word	0x0801a6c8
 800f928:	0801a6e4 	.word	0x0801a6e4
 800f92c:	0801a6f4 	.word	0x0801a6f4

0800f930 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b088      	sub	sp, #32
 800f934:	af00      	add	r7, sp, #0
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	4611      	mov	r1, r2
 800f93c:	461a      	mov	r2, r3
 800f93e:	460b      	mov	r3, r1
 800f940:	80fb      	strh	r3, [r7, #6]
 800f942:	4613      	mov	r3, r2
 800f944:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f946:	2300      	movs	r3, #0
 800f948:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f94a:	2300      	movs	r3, #0
 800f94c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d108      	bne.n	800f966 <pbuf_copy_partial+0x36>
 800f954:	4b2b      	ldr	r3, [pc, #172]	; (800fa04 <pbuf_copy_partial+0xd4>)
 800f956:	f240 420a 	movw	r2, #1034	; 0x40a
 800f95a:	492b      	ldr	r1, [pc, #172]	; (800fa08 <pbuf_copy_partial+0xd8>)
 800f95c:	482b      	ldr	r0, [pc, #172]	; (800fa0c <pbuf_copy_partial+0xdc>)
 800f95e:	f009 f8e5 	bl	8018b2c <iprintf>
 800f962:	2300      	movs	r3, #0
 800f964:	e04a      	b.n	800f9fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d108      	bne.n	800f97e <pbuf_copy_partial+0x4e>
 800f96c:	4b25      	ldr	r3, [pc, #148]	; (800fa04 <pbuf_copy_partial+0xd4>)
 800f96e:	f240 420b 	movw	r2, #1035	; 0x40b
 800f972:	4927      	ldr	r1, [pc, #156]	; (800fa10 <pbuf_copy_partial+0xe0>)
 800f974:	4825      	ldr	r0, [pc, #148]	; (800fa0c <pbuf_copy_partial+0xdc>)
 800f976:	f009 f8d9 	bl	8018b2c <iprintf>
 800f97a:	2300      	movs	r3, #0
 800f97c:	e03e      	b.n	800f9fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	61fb      	str	r3, [r7, #28]
 800f982:	e034      	b.n	800f9ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f984:	88bb      	ldrh	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d00a      	beq.n	800f9a0 <pbuf_copy_partial+0x70>
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	895b      	ldrh	r3, [r3, #10]
 800f98e:	88ba      	ldrh	r2, [r7, #4]
 800f990:	429a      	cmp	r2, r3
 800f992:	d305      	bcc.n	800f9a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	895b      	ldrh	r3, [r3, #10]
 800f998:	88ba      	ldrh	r2, [r7, #4]
 800f99a:	1ad3      	subs	r3, r2, r3
 800f99c:	80bb      	strh	r3, [r7, #4]
 800f99e:	e023      	b.n	800f9e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f9a0:	69fb      	ldr	r3, [r7, #28]
 800f9a2:	895a      	ldrh	r2, [r3, #10]
 800f9a4:	88bb      	ldrh	r3, [r7, #4]
 800f9a6:	1ad3      	subs	r3, r2, r3
 800f9a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f9aa:	8b3a      	ldrh	r2, [r7, #24]
 800f9ac:	88fb      	ldrh	r3, [r7, #6]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d901      	bls.n	800f9b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f9b2:	88fb      	ldrh	r3, [r7, #6]
 800f9b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f9b6:	8b7b      	ldrh	r3, [r7, #26]
 800f9b8:	68ba      	ldr	r2, [r7, #8]
 800f9ba:	18d0      	adds	r0, r2, r3
 800f9bc:	69fb      	ldr	r3, [r7, #28]
 800f9be:	685a      	ldr	r2, [r3, #4]
 800f9c0:	88bb      	ldrh	r3, [r7, #4]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	8b3a      	ldrh	r2, [r7, #24]
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	f009 f89a 	bl	8018b00 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f9cc:	8afa      	ldrh	r2, [r7, #22]
 800f9ce:	8b3b      	ldrh	r3, [r7, #24]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f9d4:	8b7a      	ldrh	r2, [r7, #26]
 800f9d6:	8b3b      	ldrh	r3, [r7, #24]
 800f9d8:	4413      	add	r3, r2
 800f9da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f9dc:	88fa      	ldrh	r2, [r7, #6]
 800f9de:	8b3b      	ldrh	r3, [r7, #24]
 800f9e0:	1ad3      	subs	r3, r2, r3
 800f9e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f9e8:	69fb      	ldr	r3, [r7, #28]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	61fb      	str	r3, [r7, #28]
 800f9ee:	88fb      	ldrh	r3, [r7, #6]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d002      	beq.n	800f9fa <pbuf_copy_partial+0xca>
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d1c4      	bne.n	800f984 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f9fa:	8afb      	ldrh	r3, [r7, #22]
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3720      	adds	r7, #32
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	0801a3d8 	.word	0x0801a3d8
 800fa08:	0801a720 	.word	0x0801a720
 800fa0c:	0801a438 	.word	0x0801a438
 800fa10:	0801a740 	.word	0x0801a740

0800fa14 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	603a      	str	r2, [r7, #0]
 800fa1e:	71fb      	strb	r3, [r7, #7]
 800fa20:	460b      	mov	r3, r1
 800fa22:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	8919      	ldrh	r1, [r3, #8]
 800fa28:	88ba      	ldrh	r2, [r7, #4]
 800fa2a:	79fb      	ldrb	r3, [r7, #7]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7ff fa95 	bl	800ef5c <pbuf_alloc>
 800fa32:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d101      	bne.n	800fa3e <pbuf_clone+0x2a>
    return NULL;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	e011      	b.n	800fa62 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800fa3e:	6839      	ldr	r1, [r7, #0]
 800fa40:	68f8      	ldr	r0, [r7, #12]
 800fa42:	f7ff fea3 	bl	800f78c <pbuf_copy>
 800fa46:	4603      	mov	r3, r0
 800fa48:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800fa4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d006      	beq.n	800fa60 <pbuf_clone+0x4c>
 800fa52:	4b06      	ldr	r3, [pc, #24]	; (800fa6c <pbuf_clone+0x58>)
 800fa54:	f240 5224 	movw	r2, #1316	; 0x524
 800fa58:	4905      	ldr	r1, [pc, #20]	; (800fa70 <pbuf_clone+0x5c>)
 800fa5a:	4806      	ldr	r0, [pc, #24]	; (800fa74 <pbuf_clone+0x60>)
 800fa5c:	f009 f866 	bl	8018b2c <iprintf>
  return q;
 800fa60:	68fb      	ldr	r3, [r7, #12]
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	0801a3d8 	.word	0x0801a3d8
 800fa70:	0801a84c 	.word	0x0801a84c
 800fa74:	0801a438 	.word	0x0801a438

0800fa78 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fa7c:	f009 f86e 	bl	8018b5c <rand>
 800fa80:	4603      	mov	r3, r0
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fa8e:	b29a      	uxth	r2, r3
 800fa90:	4b01      	ldr	r3, [pc, #4]	; (800fa98 <tcp_init+0x20>)
 800fa92:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fa94:	bf00      	nop
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	24000038 	.word	0x24000038

0800fa9c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	7d1b      	ldrb	r3, [r3, #20]
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	d105      	bne.n	800fab8 <tcp_free+0x1c>
 800faac:	4b06      	ldr	r3, [pc, #24]	; (800fac8 <tcp_free+0x2c>)
 800faae:	22d4      	movs	r2, #212	; 0xd4
 800fab0:	4906      	ldr	r1, [pc, #24]	; (800facc <tcp_free+0x30>)
 800fab2:	4807      	ldr	r0, [pc, #28]	; (800fad0 <tcp_free+0x34>)
 800fab4:	f009 f83a 	bl	8018b2c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fab8:	6879      	ldr	r1, [r7, #4]
 800faba:	2001      	movs	r0, #1
 800fabc:	f7fe fe8e 	bl	800e7dc <memp_free>
}
 800fac0:	bf00      	nop
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	0801a8d8 	.word	0x0801a8d8
 800facc:	0801a908 	.word	0x0801a908
 800fad0:	0801a91c 	.word	0x0801a91c

0800fad4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	7d1b      	ldrb	r3, [r3, #20]
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d105      	bne.n	800faf0 <tcp_free_listen+0x1c>
 800fae4:	4b06      	ldr	r3, [pc, #24]	; (800fb00 <tcp_free_listen+0x2c>)
 800fae6:	22df      	movs	r2, #223	; 0xdf
 800fae8:	4906      	ldr	r1, [pc, #24]	; (800fb04 <tcp_free_listen+0x30>)
 800faea:	4807      	ldr	r0, [pc, #28]	; (800fb08 <tcp_free_listen+0x34>)
 800faec:	f009 f81e 	bl	8018b2c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800faf0:	6879      	ldr	r1, [r7, #4]
 800faf2:	2002      	movs	r0, #2
 800faf4:	f7fe fe72 	bl	800e7dc <memp_free>
}
 800faf8:	bf00      	nop
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	0801a8d8 	.word	0x0801a8d8
 800fb04:	0801a944 	.word	0x0801a944
 800fb08:	0801a91c 	.word	0x0801a91c

0800fb0c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fb10:	f001 f85c 	bl	8010bcc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fb14:	4b07      	ldr	r3, [pc, #28]	; (800fb34 <tcp_tmr+0x28>)
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	b2da      	uxtb	r2, r3
 800fb1c:	4b05      	ldr	r3, [pc, #20]	; (800fb34 <tcp_tmr+0x28>)
 800fb1e:	701a      	strb	r2, [r3, #0]
 800fb20:	4b04      	ldr	r3, [pc, #16]	; (800fb34 <tcp_tmr+0x28>)
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	f003 0301 	and.w	r3, r3, #1
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fb2c:	f000 fd0e 	bl	801054c <tcp_slowtmr>
  }
}
 800fb30:	bf00      	nop
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	240040c9 	.word	0x240040c9

0800fb38 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d105      	bne.n	800fb54 <tcp_remove_listener+0x1c>
 800fb48:	4b0d      	ldr	r3, [pc, #52]	; (800fb80 <tcp_remove_listener+0x48>)
 800fb4a:	22ff      	movs	r2, #255	; 0xff
 800fb4c:	490d      	ldr	r1, [pc, #52]	; (800fb84 <tcp_remove_listener+0x4c>)
 800fb4e:	480e      	ldr	r0, [pc, #56]	; (800fb88 <tcp_remove_listener+0x50>)
 800fb50:	f008 ffec 	bl	8018b2c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	60fb      	str	r3, [r7, #12]
 800fb58:	e00a      	b.n	800fb70 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb5e:	683a      	ldr	r2, [r7, #0]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d102      	bne.n	800fb6a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2200      	movs	r2, #0
 800fb68:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	60fb      	str	r3, [r7, #12]
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d1f1      	bne.n	800fb5a <tcp_remove_listener+0x22>
    }
  }
}
 800fb76:	bf00      	nop
 800fb78:	bf00      	nop
 800fb7a:	3710      	adds	r7, #16
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	0801a8d8 	.word	0x0801a8d8
 800fb84:	0801a960 	.word	0x0801a960
 800fb88:	0801a91c 	.word	0x0801a91c

0800fb8c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d106      	bne.n	800fba8 <tcp_listen_closed+0x1c>
 800fb9a:	4b14      	ldr	r3, [pc, #80]	; (800fbec <tcp_listen_closed+0x60>)
 800fb9c:	f240 1211 	movw	r2, #273	; 0x111
 800fba0:	4913      	ldr	r1, [pc, #76]	; (800fbf0 <tcp_listen_closed+0x64>)
 800fba2:	4814      	ldr	r0, [pc, #80]	; (800fbf4 <tcp_listen_closed+0x68>)
 800fba4:	f008 ffc2 	bl	8018b2c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	7d1b      	ldrb	r3, [r3, #20]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d006      	beq.n	800fbbe <tcp_listen_closed+0x32>
 800fbb0:	4b0e      	ldr	r3, [pc, #56]	; (800fbec <tcp_listen_closed+0x60>)
 800fbb2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800fbb6:	4910      	ldr	r1, [pc, #64]	; (800fbf8 <tcp_listen_closed+0x6c>)
 800fbb8:	480e      	ldr	r0, [pc, #56]	; (800fbf4 <tcp_listen_closed+0x68>)
 800fbba:	f008 ffb7 	bl	8018b2c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	60fb      	str	r3, [r7, #12]
 800fbc2:	e00b      	b.n	800fbdc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fbc4:	4a0d      	ldr	r2, [pc, #52]	; (800fbfc <tcp_listen_closed+0x70>)
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	6879      	ldr	r1, [r7, #4]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7ff ffb1 	bl	800fb38 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	60fb      	str	r3, [r7, #12]
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2b03      	cmp	r3, #3
 800fbe0:	d9f0      	bls.n	800fbc4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fbe2:	bf00      	nop
 800fbe4:	bf00      	nop
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	0801a8d8 	.word	0x0801a8d8
 800fbf0:	0801a988 	.word	0x0801a988
 800fbf4:	0801a91c 	.word	0x0801a91c
 800fbf8:	0801a994 	.word	0x0801a994
 800fbfc:	0801de64 	.word	0x0801de64

0800fc00 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fc00:	b5b0      	push	{r4, r5, r7, lr}
 800fc02:	b088      	sub	sp, #32
 800fc04:	af04      	add	r7, sp, #16
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	460b      	mov	r3, r1
 800fc0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d106      	bne.n	800fc20 <tcp_close_shutdown+0x20>
 800fc12:	4b63      	ldr	r3, [pc, #396]	; (800fda0 <tcp_close_shutdown+0x1a0>)
 800fc14:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800fc18:	4962      	ldr	r1, [pc, #392]	; (800fda4 <tcp_close_shutdown+0x1a4>)
 800fc1a:	4863      	ldr	r0, [pc, #396]	; (800fda8 <tcp_close_shutdown+0x1a8>)
 800fc1c:	f008 ff86 	bl	8018b2c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fc20:	78fb      	ldrb	r3, [r7, #3]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d066      	beq.n	800fcf4 <tcp_close_shutdown+0xf4>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	7d1b      	ldrb	r3, [r3, #20]
 800fc2a:	2b04      	cmp	r3, #4
 800fc2c:	d003      	beq.n	800fc36 <tcp_close_shutdown+0x36>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	7d1b      	ldrb	r3, [r3, #20]
 800fc32:	2b07      	cmp	r3, #7
 800fc34:	d15e      	bne.n	800fcf4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d104      	bne.n	800fc48 <tcp_close_shutdown+0x48>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc42:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fc46:	d055      	beq.n	800fcf4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	8b5b      	ldrh	r3, [r3, #26]
 800fc4c:	f003 0310 	and.w	r3, r3, #16
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d106      	bne.n	800fc62 <tcp_close_shutdown+0x62>
 800fc54:	4b52      	ldr	r3, [pc, #328]	; (800fda0 <tcp_close_shutdown+0x1a0>)
 800fc56:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800fc5a:	4954      	ldr	r1, [pc, #336]	; (800fdac <tcp_close_shutdown+0x1ac>)
 800fc5c:	4852      	ldr	r0, [pc, #328]	; (800fda8 <tcp_close_shutdown+0x1a8>)
 800fc5e:	f008 ff65 	bl	8018b2c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fc6a:	687d      	ldr	r5, [r7, #4]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	3304      	adds	r3, #4
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	8ad2      	ldrh	r2, [r2, #22]
 800fc74:	6879      	ldr	r1, [r7, #4]
 800fc76:	8b09      	ldrh	r1, [r1, #24]
 800fc78:	9102      	str	r1, [sp, #8]
 800fc7a:	9201      	str	r2, [sp, #4]
 800fc7c:	9300      	str	r3, [sp, #0]
 800fc7e:	462b      	mov	r3, r5
 800fc80:	4622      	mov	r2, r4
 800fc82:	4601      	mov	r1, r0
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f005 fd85 	bl	8015794 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f001 fb66 	bl	801135c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fc90:	4b47      	ldr	r3, [pc, #284]	; (800fdb0 <tcp_close_shutdown+0x1b0>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d105      	bne.n	800fca6 <tcp_close_shutdown+0xa6>
 800fc9a:	4b45      	ldr	r3, [pc, #276]	; (800fdb0 <tcp_close_shutdown+0x1b0>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	68db      	ldr	r3, [r3, #12]
 800fca0:	4a43      	ldr	r2, [pc, #268]	; (800fdb0 <tcp_close_shutdown+0x1b0>)
 800fca2:	6013      	str	r3, [r2, #0]
 800fca4:	e013      	b.n	800fcce <tcp_close_shutdown+0xce>
 800fca6:	4b42      	ldr	r3, [pc, #264]	; (800fdb0 <tcp_close_shutdown+0x1b0>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	60fb      	str	r3, [r7, #12]
 800fcac:	e00c      	b.n	800fcc8 <tcp_close_shutdown+0xc8>
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	68db      	ldr	r3, [r3, #12]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d104      	bne.n	800fcc2 <tcp_close_shutdown+0xc2>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	68da      	ldr	r2, [r3, #12]
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	60da      	str	r2, [r3, #12]
 800fcc0:	e005      	b.n	800fcce <tcp_close_shutdown+0xce>
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	60fb      	str	r3, [r7, #12]
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1ef      	bne.n	800fcae <tcp_close_shutdown+0xae>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	60da      	str	r2, [r3, #12]
 800fcd4:	4b37      	ldr	r3, [pc, #220]	; (800fdb4 <tcp_close_shutdown+0x1b4>)
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fcda:	4b37      	ldr	r3, [pc, #220]	; (800fdb8 <tcp_close_shutdown+0x1b8>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	687a      	ldr	r2, [r7, #4]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d102      	bne.n	800fcea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fce4:	f003 fffa 	bl	8013cdc <tcp_trigger_input_pcb_close>
 800fce8:	e002      	b.n	800fcf0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f7ff fed6 	bl	800fa9c <tcp_free>
      }
      return ERR_OK;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	e050      	b.n	800fd96 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	7d1b      	ldrb	r3, [r3, #20]
 800fcf8:	2b02      	cmp	r3, #2
 800fcfa:	d03b      	beq.n	800fd74 <tcp_close_shutdown+0x174>
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	dc44      	bgt.n	800fd8a <tcp_close_shutdown+0x18a>
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d002      	beq.n	800fd0a <tcp_close_shutdown+0x10a>
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d02a      	beq.n	800fd5e <tcp_close_shutdown+0x15e>
 800fd08:	e03f      	b.n	800fd8a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	8adb      	ldrh	r3, [r3, #22]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d021      	beq.n	800fd56 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fd12:	4b2a      	ldr	r3, [pc, #168]	; (800fdbc <tcp_close_shutdown+0x1bc>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d105      	bne.n	800fd28 <tcp_close_shutdown+0x128>
 800fd1c:	4b27      	ldr	r3, [pc, #156]	; (800fdbc <tcp_close_shutdown+0x1bc>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	4a26      	ldr	r2, [pc, #152]	; (800fdbc <tcp_close_shutdown+0x1bc>)
 800fd24:	6013      	str	r3, [r2, #0]
 800fd26:	e013      	b.n	800fd50 <tcp_close_shutdown+0x150>
 800fd28:	4b24      	ldr	r3, [pc, #144]	; (800fdbc <tcp_close_shutdown+0x1bc>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	60bb      	str	r3, [r7, #8]
 800fd2e:	e00c      	b.n	800fd4a <tcp_close_shutdown+0x14a>
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d104      	bne.n	800fd44 <tcp_close_shutdown+0x144>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	68da      	ldr	r2, [r3, #12]
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	60da      	str	r2, [r3, #12]
 800fd42:	e005      	b.n	800fd50 <tcp_close_shutdown+0x150>
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	60bb      	str	r3, [r7, #8]
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d1ef      	bne.n	800fd30 <tcp_close_shutdown+0x130>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2200      	movs	r2, #0
 800fd54:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f7ff fea0 	bl	800fa9c <tcp_free>
      break;
 800fd5c:	e01a      	b.n	800fd94 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f7ff ff14 	bl	800fb8c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fd64:	6879      	ldr	r1, [r7, #4]
 800fd66:	4816      	ldr	r0, [pc, #88]	; (800fdc0 <tcp_close_shutdown+0x1c0>)
 800fd68:	f001 fb48 	bl	80113fc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f7ff feb1 	bl	800fad4 <tcp_free_listen>
      break;
 800fd72:	e00f      	b.n	800fd94 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fd74:	6879      	ldr	r1, [r7, #4]
 800fd76:	480e      	ldr	r0, [pc, #56]	; (800fdb0 <tcp_close_shutdown+0x1b0>)
 800fd78:	f001 fb40 	bl	80113fc <tcp_pcb_remove>
 800fd7c:	4b0d      	ldr	r3, [pc, #52]	; (800fdb4 <tcp_close_shutdown+0x1b4>)
 800fd7e:	2201      	movs	r2, #1
 800fd80:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f7ff fe8a 	bl	800fa9c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fd88:	e004      	b.n	800fd94 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 f81a 	bl	800fdc4 <tcp_close_shutdown_fin>
 800fd90:	4603      	mov	r3, r0
 800fd92:	e000      	b.n	800fd96 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800fd94:	2300      	movs	r3, #0
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3710      	adds	r7, #16
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bdb0      	pop	{r4, r5, r7, pc}
 800fd9e:	bf00      	nop
 800fda0:	0801a8d8 	.word	0x0801a8d8
 800fda4:	0801a9ac 	.word	0x0801a9ac
 800fda8:	0801a91c 	.word	0x0801a91c
 800fdac:	0801a9cc 	.word	0x0801a9cc
 800fdb0:	24007800 	.word	0x24007800
 800fdb4:	240077fc 	.word	0x240077fc
 800fdb8:	24007814 	.word	0x24007814
 800fdbc:	2400780c 	.word	0x2400780c
 800fdc0:	24007808 	.word	0x24007808

0800fdc4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d106      	bne.n	800fde0 <tcp_close_shutdown_fin+0x1c>
 800fdd2:	4b2e      	ldr	r3, [pc, #184]	; (800fe8c <tcp_close_shutdown_fin+0xc8>)
 800fdd4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800fdd8:	492d      	ldr	r1, [pc, #180]	; (800fe90 <tcp_close_shutdown_fin+0xcc>)
 800fdda:	482e      	ldr	r0, [pc, #184]	; (800fe94 <tcp_close_shutdown_fin+0xd0>)
 800fddc:	f008 fea6 	bl	8018b2c <iprintf>

  switch (pcb->state) {
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	7d1b      	ldrb	r3, [r3, #20]
 800fde4:	2b07      	cmp	r3, #7
 800fde6:	d020      	beq.n	800fe2a <tcp_close_shutdown_fin+0x66>
 800fde8:	2b07      	cmp	r3, #7
 800fdea:	dc2b      	bgt.n	800fe44 <tcp_close_shutdown_fin+0x80>
 800fdec:	2b03      	cmp	r3, #3
 800fdee:	d002      	beq.n	800fdf6 <tcp_close_shutdown_fin+0x32>
 800fdf0:	2b04      	cmp	r3, #4
 800fdf2:	d00d      	beq.n	800fe10 <tcp_close_shutdown_fin+0x4c>
 800fdf4:	e026      	b.n	800fe44 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f004 fdda 	bl	80149b0 <tcp_send_fin>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fe00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d11f      	bne.n	800fe48 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2205      	movs	r2, #5
 800fe0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fe0e:	e01b      	b.n	800fe48 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f004 fdcd 	bl	80149b0 <tcp_send_fin>
 800fe16:	4603      	mov	r3, r0
 800fe18:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fe1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d114      	bne.n	800fe4c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2205      	movs	r2, #5
 800fe26:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fe28:	e010      	b.n	800fe4c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f004 fdc0 	bl	80149b0 <tcp_send_fin>
 800fe30:	4603      	mov	r3, r0
 800fe32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fe34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d109      	bne.n	800fe50 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2209      	movs	r2, #9
 800fe40:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fe42:	e005      	b.n	800fe50 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fe44:	2300      	movs	r3, #0
 800fe46:	e01c      	b.n	800fe82 <tcp_close_shutdown_fin+0xbe>
      break;
 800fe48:	bf00      	nop
 800fe4a:	e002      	b.n	800fe52 <tcp_close_shutdown_fin+0x8e>
      break;
 800fe4c:	bf00      	nop
 800fe4e:	e000      	b.n	800fe52 <tcp_close_shutdown_fin+0x8e>
      break;
 800fe50:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fe52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d103      	bne.n	800fe62 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f004 fee6 	bl	8014c2c <tcp_output>
 800fe60:	e00d      	b.n	800fe7e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fe62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe6a:	d108      	bne.n	800fe7e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	8b5b      	ldrh	r3, [r3, #26]
 800fe70:	f043 0308 	orr.w	r3, r3, #8
 800fe74:	b29a      	uxth	r2, r3
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	e001      	b.n	800fe82 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800fe7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3710      	adds	r7, #16
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	0801a8d8 	.word	0x0801a8d8
 800fe90:	0801a988 	.word	0x0801a988
 800fe94:	0801a91c 	.word	0x0801a91c

0800fe98 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d109      	bne.n	800feba <tcp_close+0x22>
 800fea6:	4b0f      	ldr	r3, [pc, #60]	; (800fee4 <tcp_close+0x4c>)
 800fea8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800feac:	490e      	ldr	r1, [pc, #56]	; (800fee8 <tcp_close+0x50>)
 800feae:	480f      	ldr	r0, [pc, #60]	; (800feec <tcp_close+0x54>)
 800feb0:	f008 fe3c 	bl	8018b2c <iprintf>
 800feb4:	f06f 030f 	mvn.w	r3, #15
 800feb8:	e00f      	b.n	800feda <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	7d1b      	ldrb	r3, [r3, #20]
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d006      	beq.n	800fed0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	8b5b      	ldrh	r3, [r3, #26]
 800fec6:	f043 0310 	orr.w	r3, r3, #16
 800feca:	b29a      	uxth	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fed0:	2101      	movs	r1, #1
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f7ff fe94 	bl	800fc00 <tcp_close_shutdown>
 800fed8:	4603      	mov	r3, r0
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3708      	adds	r7, #8
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	0801a8d8 	.word	0x0801a8d8
 800fee8:	0801a9e8 	.word	0x0801a9e8
 800feec:	0801a91c 	.word	0x0801a91c

0800fef0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b08e      	sub	sp, #56	; 0x38
 800fef4:	af04      	add	r7, sp, #16
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d107      	bne.n	800ff10 <tcp_abandon+0x20>
 800ff00:	4b52      	ldr	r3, [pc, #328]	; (801004c <tcp_abandon+0x15c>)
 800ff02:	f240 223d 	movw	r2, #573	; 0x23d
 800ff06:	4952      	ldr	r1, [pc, #328]	; (8010050 <tcp_abandon+0x160>)
 800ff08:	4852      	ldr	r0, [pc, #328]	; (8010054 <tcp_abandon+0x164>)
 800ff0a:	f008 fe0f 	bl	8018b2c <iprintf>
 800ff0e:	e099      	b.n	8010044 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	7d1b      	ldrb	r3, [r3, #20]
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d106      	bne.n	800ff26 <tcp_abandon+0x36>
 800ff18:	4b4c      	ldr	r3, [pc, #304]	; (801004c <tcp_abandon+0x15c>)
 800ff1a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ff1e:	494e      	ldr	r1, [pc, #312]	; (8010058 <tcp_abandon+0x168>)
 800ff20:	484c      	ldr	r0, [pc, #304]	; (8010054 <tcp_abandon+0x164>)
 800ff22:	f008 fe03 	bl	8018b2c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	7d1b      	ldrb	r3, [r3, #20]
 800ff2a:	2b0a      	cmp	r3, #10
 800ff2c:	d107      	bne.n	800ff3e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ff2e:	6879      	ldr	r1, [r7, #4]
 800ff30:	484a      	ldr	r0, [pc, #296]	; (801005c <tcp_abandon+0x16c>)
 800ff32:	f001 fa63 	bl	80113fc <tcp_pcb_remove>
    tcp_free(pcb);
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f7ff fdb0 	bl	800fa9c <tcp_free>
 800ff3c:	e082      	b.n	8010044 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ff42:	2300      	movs	r3, #0
 800ff44:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff4a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff50:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff58:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	691b      	ldr	r3, [r3, #16]
 800ff5e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	7d1b      	ldrb	r3, [r3, #20]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d126      	bne.n	800ffb6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	8adb      	ldrh	r3, [r3, #22]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d02e      	beq.n	800ffce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ff70:	4b3b      	ldr	r3, [pc, #236]	; (8010060 <tcp_abandon+0x170>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d105      	bne.n	800ff86 <tcp_abandon+0x96>
 800ff7a:	4b39      	ldr	r3, [pc, #228]	; (8010060 <tcp_abandon+0x170>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	4a37      	ldr	r2, [pc, #220]	; (8010060 <tcp_abandon+0x170>)
 800ff82:	6013      	str	r3, [r2, #0]
 800ff84:	e013      	b.n	800ffae <tcp_abandon+0xbe>
 800ff86:	4b36      	ldr	r3, [pc, #216]	; (8010060 <tcp_abandon+0x170>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	61fb      	str	r3, [r7, #28]
 800ff8c:	e00c      	b.n	800ffa8 <tcp_abandon+0xb8>
 800ff8e:	69fb      	ldr	r3, [r7, #28]
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d104      	bne.n	800ffa2 <tcp_abandon+0xb2>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	68da      	ldr	r2, [r3, #12]
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	60da      	str	r2, [r3, #12]
 800ffa0:	e005      	b.n	800ffae <tcp_abandon+0xbe>
 800ffa2:	69fb      	ldr	r3, [r7, #28]
 800ffa4:	68db      	ldr	r3, [r3, #12]
 800ffa6:	61fb      	str	r3, [r7, #28]
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d1ef      	bne.n	800ff8e <tcp_abandon+0x9e>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	60da      	str	r2, [r3, #12]
 800ffb4:	e00b      	b.n	800ffce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	8adb      	ldrh	r3, [r3, #22]
 800ffbe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ffc0:	6879      	ldr	r1, [r7, #4]
 800ffc2:	4828      	ldr	r0, [pc, #160]	; (8010064 <tcp_abandon+0x174>)
 800ffc4:	f001 fa1a 	bl	80113fc <tcp_pcb_remove>
 800ffc8:	4b27      	ldr	r3, [pc, #156]	; (8010068 <tcp_abandon+0x178>)
 800ffca:	2201      	movs	r2, #1
 800ffcc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d004      	beq.n	800ffe0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f000 fed6 	bl	8010d8c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d004      	beq.n	800fff2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffec:	4618      	mov	r0, r3
 800ffee:	f000 fecd 	bl	8010d8c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d004      	beq.n	8010004 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fffe:	4618      	mov	r0, r3
 8010000:	f000 fec4 	bl	8010d8c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010006:	2b00      	cmp	r3, #0
 8010008:	d00e      	beq.n	8010028 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801000a:	6879      	ldr	r1, [r7, #4]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	3304      	adds	r3, #4
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	8b12      	ldrh	r2, [r2, #24]
 8010014:	9202      	str	r2, [sp, #8]
 8010016:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010018:	9201      	str	r2, [sp, #4]
 801001a:	9300      	str	r3, [sp, #0]
 801001c:	460b      	mov	r3, r1
 801001e:	697a      	ldr	r2, [r7, #20]
 8010020:	69b9      	ldr	r1, [r7, #24]
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f005 fbb6 	bl	8015794 <tcp_rst>
    }
    last_state = pcb->state;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	7d1b      	ldrb	r3, [r3, #20]
 801002c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f7ff fd34 	bl	800fa9c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d004      	beq.n	8010044 <tcp_abandon+0x154>
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	f06f 010c 	mvn.w	r1, #12
 8010040:	68f8      	ldr	r0, [r7, #12]
 8010042:	4798      	blx	r3
  }
}
 8010044:	3728      	adds	r7, #40	; 0x28
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
 801004a:	bf00      	nop
 801004c:	0801a8d8 	.word	0x0801a8d8
 8010050:	0801aa1c 	.word	0x0801aa1c
 8010054:	0801a91c 	.word	0x0801a91c
 8010058:	0801aa38 	.word	0x0801aa38
 801005c:	24007810 	.word	0x24007810
 8010060:	2400780c 	.word	0x2400780c
 8010064:	24007800 	.word	0x24007800
 8010068:	240077fc 	.word	0x240077fc

0801006c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010074:	2101      	movs	r1, #1
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f7ff ff3a 	bl	800fef0 <tcp_abandon>
}
 801007c:	bf00      	nop
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b088      	sub	sp, #32
 8010088:	af00      	add	r7, sp, #0
 801008a:	60f8      	str	r0, [r7, #12]
 801008c:	60b9      	str	r1, [r7, #8]
 801008e:	4613      	mov	r3, r2
 8010090:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8010092:	2304      	movs	r3, #4
 8010094:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d101      	bne.n	80100a0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801009c:	4b3e      	ldr	r3, [pc, #248]	; (8010198 <tcp_bind+0x114>)
 801009e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d109      	bne.n	80100ba <tcp_bind+0x36>
 80100a6:	4b3d      	ldr	r3, [pc, #244]	; (801019c <tcp_bind+0x118>)
 80100a8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80100ac:	493c      	ldr	r1, [pc, #240]	; (80101a0 <tcp_bind+0x11c>)
 80100ae:	483d      	ldr	r0, [pc, #244]	; (80101a4 <tcp_bind+0x120>)
 80100b0:	f008 fd3c 	bl	8018b2c <iprintf>
 80100b4:	f06f 030f 	mvn.w	r3, #15
 80100b8:	e06a      	b.n	8010190 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	7d1b      	ldrb	r3, [r3, #20]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d009      	beq.n	80100d6 <tcp_bind+0x52>
 80100c2:	4b36      	ldr	r3, [pc, #216]	; (801019c <tcp_bind+0x118>)
 80100c4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80100c8:	4937      	ldr	r1, [pc, #220]	; (80101a8 <tcp_bind+0x124>)
 80100ca:	4836      	ldr	r0, [pc, #216]	; (80101a4 <tcp_bind+0x120>)
 80100cc:	f008 fd2e 	bl	8018b2c <iprintf>
 80100d0:	f06f 0305 	mvn.w	r3, #5
 80100d4:	e05c      	b.n	8010190 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80100d6:	88fb      	ldrh	r3, [r7, #6]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d109      	bne.n	80100f0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80100dc:	f000 f9f0 	bl	80104c0 <tcp_new_port>
 80100e0:	4603      	mov	r3, r0
 80100e2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80100e4:	88fb      	ldrh	r3, [r7, #6]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d135      	bne.n	8010156 <tcp_bind+0xd2>
      return ERR_BUF;
 80100ea:	f06f 0301 	mvn.w	r3, #1
 80100ee:	e04f      	b.n	8010190 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80100f0:	2300      	movs	r3, #0
 80100f2:	61fb      	str	r3, [r7, #28]
 80100f4:	e02b      	b.n	801014e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80100f6:	4a2d      	ldr	r2, [pc, #180]	; (80101ac <tcp_bind+0x128>)
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	61bb      	str	r3, [r7, #24]
 8010102:	e01e      	b.n	8010142 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8010104:	69bb      	ldr	r3, [r7, #24]
 8010106:	8adb      	ldrh	r3, [r3, #22]
 8010108:	88fa      	ldrh	r2, [r7, #6]
 801010a:	429a      	cmp	r2, r3
 801010c:	d116      	bne.n	801013c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801010e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010110:	2b00      	cmp	r3, #0
 8010112:	d010      	beq.n	8010136 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010114:	69bb      	ldr	r3, [r7, #24]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d00c      	beq.n	8010136 <tcp_bind+0xb2>
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d009      	beq.n	8010136 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d005      	beq.n	8010136 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010132:	429a      	cmp	r2, r3
 8010134:	d102      	bne.n	801013c <tcp_bind+0xb8>
              return ERR_USE;
 8010136:	f06f 0307 	mvn.w	r3, #7
 801013a:	e029      	b.n	8010190 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801013c:	69bb      	ldr	r3, [r7, #24]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	61bb      	str	r3, [r7, #24]
 8010142:	69bb      	ldr	r3, [r7, #24]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d1dd      	bne.n	8010104 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	3301      	adds	r3, #1
 801014c:	61fb      	str	r3, [r7, #28]
 801014e:	69fa      	ldr	r2, [r7, #28]
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	429a      	cmp	r2, r3
 8010154:	dbcf      	blt.n	80100f6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d00c      	beq.n	8010176 <tcp_bind+0xf2>
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d008      	beq.n	8010176 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d002      	beq.n	8010170 <tcp_bind+0xec>
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	e000      	b.n	8010172 <tcp_bind+0xee>
 8010170:	2300      	movs	r3, #0
 8010172:	68fa      	ldr	r2, [r7, #12]
 8010174:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	88fa      	ldrh	r2, [r7, #6]
 801017a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801017c:	4b0c      	ldr	r3, [pc, #48]	; (80101b0 <tcp_bind+0x12c>)
 801017e:	681a      	ldr	r2, [r3, #0]
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	60da      	str	r2, [r3, #12]
 8010184:	4a0a      	ldr	r2, [pc, #40]	; (80101b0 <tcp_bind+0x12c>)
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	6013      	str	r3, [r2, #0]
 801018a:	f005 fcc5 	bl	8015b18 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801018e:	2300      	movs	r3, #0
}
 8010190:	4618      	mov	r0, r3
 8010192:	3720      	adds	r7, #32
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	0801de8c 	.word	0x0801de8c
 801019c:	0801a8d8 	.word	0x0801a8d8
 80101a0:	0801aa6c 	.word	0x0801aa6c
 80101a4:	0801a91c 	.word	0x0801a91c
 80101a8:	0801aa84 	.word	0x0801aa84
 80101ac:	0801de64 	.word	0x0801de64
 80101b0:	2400780c 	.word	0x2400780c

080101b4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	60b9      	str	r1, [r7, #8]
 80101be:	4613      	mov	r3, r2
 80101c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d106      	bne.n	80101d6 <tcp_accept_null+0x22>
 80101c8:	4b07      	ldr	r3, [pc, #28]	; (80101e8 <tcp_accept_null+0x34>)
 80101ca:	f240 320f 	movw	r2, #783	; 0x30f
 80101ce:	4907      	ldr	r1, [pc, #28]	; (80101ec <tcp_accept_null+0x38>)
 80101d0:	4807      	ldr	r0, [pc, #28]	; (80101f0 <tcp_accept_null+0x3c>)
 80101d2:	f008 fcab 	bl	8018b2c <iprintf>

  tcp_abort(pcb);
 80101d6:	68b8      	ldr	r0, [r7, #8]
 80101d8:	f7ff ff48 	bl	801006c <tcp_abort>

  return ERR_ABRT;
 80101dc:	f06f 030c 	mvn.w	r3, #12
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3710      	adds	r7, #16
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	0801a8d8 	.word	0x0801a8d8
 80101ec:	0801aaac 	.word	0x0801aaac
 80101f0:	0801a91c 	.word	0x0801a91c

080101f4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b082      	sub	sp, #8
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
 80101fc:	460b      	mov	r3, r1
 80101fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8010200:	78fb      	ldrb	r3, [r7, #3]
 8010202:	2200      	movs	r2, #0
 8010204:	4619      	mov	r1, r3
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 f806 	bl	8010218 <tcp_listen_with_backlog_and_err>
 801020c:	4603      	mov	r3, r0
}
 801020e:	4618      	mov	r0, r3
 8010210:	3708      	adds	r7, #8
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
	...

08010218 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b088      	sub	sp, #32
 801021c:	af00      	add	r7, sp, #0
 801021e:	60f8      	str	r0, [r7, #12]
 8010220:	460b      	mov	r3, r1
 8010222:	607a      	str	r2, [r7, #4]
 8010224:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8010226:	2300      	movs	r3, #0
 8010228:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d109      	bne.n	8010244 <tcp_listen_with_backlog_and_err+0x2c>
 8010230:	4b47      	ldr	r3, [pc, #284]	; (8010350 <tcp_listen_with_backlog_and_err+0x138>)
 8010232:	f240 3259 	movw	r2, #857	; 0x359
 8010236:	4947      	ldr	r1, [pc, #284]	; (8010354 <tcp_listen_with_backlog_and_err+0x13c>)
 8010238:	4847      	ldr	r0, [pc, #284]	; (8010358 <tcp_listen_with_backlog_and_err+0x140>)
 801023a:	f008 fc77 	bl	8018b2c <iprintf>
 801023e:	23f0      	movs	r3, #240	; 0xf0
 8010240:	76fb      	strb	r3, [r7, #27]
 8010242:	e079      	b.n	8010338 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	7d1b      	ldrb	r3, [r3, #20]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d009      	beq.n	8010260 <tcp_listen_with_backlog_and_err+0x48>
 801024c:	4b40      	ldr	r3, [pc, #256]	; (8010350 <tcp_listen_with_backlog_and_err+0x138>)
 801024e:	f240 325a 	movw	r2, #858	; 0x35a
 8010252:	4942      	ldr	r1, [pc, #264]	; (801035c <tcp_listen_with_backlog_and_err+0x144>)
 8010254:	4840      	ldr	r0, [pc, #256]	; (8010358 <tcp_listen_with_backlog_and_err+0x140>)
 8010256:	f008 fc69 	bl	8018b2c <iprintf>
 801025a:	23f1      	movs	r3, #241	; 0xf1
 801025c:	76fb      	strb	r3, [r7, #27]
 801025e:	e06b      	b.n	8010338 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	7d1b      	ldrb	r3, [r3, #20]
 8010264:	2b01      	cmp	r3, #1
 8010266:	d104      	bne.n	8010272 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801026c:	23f7      	movs	r3, #247	; 0xf7
 801026e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010270:	e062      	b.n	8010338 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010272:	2002      	movs	r0, #2
 8010274:	f7fe fa3c 	bl	800e6f0 <memp_malloc>
 8010278:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d102      	bne.n	8010286 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8010280:	23ff      	movs	r3, #255	; 0xff
 8010282:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010284:	e058      	b.n	8010338 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	691a      	ldr	r2, [r3, #16]
 801028a:	69fb      	ldr	r3, [r7, #28]
 801028c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	8ada      	ldrh	r2, [r3, #22]
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	2201      	movs	r2, #1
 801029a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	7d5a      	ldrb	r2, [r3, #21]
 80102a0:	69fb      	ldr	r3, [r7, #28]
 80102a2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	7a5a      	ldrb	r2, [r3, #9]
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	2200      	movs	r2, #0
 80102b0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	7ada      	ldrb	r2, [r3, #11]
 80102b6:	69fb      	ldr	r3, [r7, #28]
 80102b8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	7a9a      	ldrb	r2, [r3, #10]
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	8adb      	ldrh	r3, [r3, #22]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d021      	beq.n	8010316 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80102d2:	4b23      	ldr	r3, [pc, #140]	; (8010360 <tcp_listen_with_backlog_and_err+0x148>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	68fa      	ldr	r2, [r7, #12]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d105      	bne.n	80102e8 <tcp_listen_with_backlog_and_err+0xd0>
 80102dc:	4b20      	ldr	r3, [pc, #128]	; (8010360 <tcp_listen_with_backlog_and_err+0x148>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	4a1f      	ldr	r2, [pc, #124]	; (8010360 <tcp_listen_with_backlog_and_err+0x148>)
 80102e4:	6013      	str	r3, [r2, #0]
 80102e6:	e013      	b.n	8010310 <tcp_listen_with_backlog_and_err+0xf8>
 80102e8:	4b1d      	ldr	r3, [pc, #116]	; (8010360 <tcp_listen_with_backlog_and_err+0x148>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	617b      	str	r3, [r7, #20]
 80102ee:	e00c      	b.n	801030a <tcp_listen_with_backlog_and_err+0xf2>
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	68fa      	ldr	r2, [r7, #12]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d104      	bne.n	8010304 <tcp_listen_with_backlog_and_err+0xec>
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	68da      	ldr	r2, [r3, #12]
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	60da      	str	r2, [r3, #12]
 8010302:	e005      	b.n	8010310 <tcp_listen_with_backlog_and_err+0xf8>
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	617b      	str	r3, [r7, #20]
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d1ef      	bne.n	80102f0 <tcp_listen_with_backlog_and_err+0xd8>
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2200      	movs	r2, #0
 8010314:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8010316:	68f8      	ldr	r0, [r7, #12]
 8010318:	f7ff fbc0 	bl	800fa9c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	4a11      	ldr	r2, [pc, #68]	; (8010364 <tcp_listen_with_backlog_and_err+0x14c>)
 8010320:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8010322:	4b11      	ldr	r3, [pc, #68]	; (8010368 <tcp_listen_with_backlog_and_err+0x150>)
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	69fb      	ldr	r3, [r7, #28]
 8010328:	60da      	str	r2, [r3, #12]
 801032a:	4a0f      	ldr	r2, [pc, #60]	; (8010368 <tcp_listen_with_backlog_and_err+0x150>)
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	6013      	str	r3, [r2, #0]
 8010330:	f005 fbf2 	bl	8015b18 <tcp_timer_needed>
  res = ERR_OK;
 8010334:	2300      	movs	r3, #0
 8010336:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d002      	beq.n	8010344 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	7efa      	ldrb	r2, [r7, #27]
 8010342:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8010344:	69fb      	ldr	r3, [r7, #28]
}
 8010346:	4618      	mov	r0, r3
 8010348:	3720      	adds	r7, #32
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	0801a8d8 	.word	0x0801a8d8
 8010354:	0801aacc 	.word	0x0801aacc
 8010358:	0801a91c 	.word	0x0801a91c
 801035c:	0801aafc 	.word	0x0801aafc
 8010360:	2400780c 	.word	0x2400780c
 8010364:	080101b5 	.word	0x080101b5
 8010368:	24007808 	.word	0x24007808

0801036c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b084      	sub	sp, #16
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d106      	bne.n	8010388 <tcp_update_rcv_ann_wnd+0x1c>
 801037a:	4b25      	ldr	r3, [pc, #148]	; (8010410 <tcp_update_rcv_ann_wnd+0xa4>)
 801037c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010380:	4924      	ldr	r1, [pc, #144]	; (8010414 <tcp_update_rcv_ann_wnd+0xa8>)
 8010382:	4825      	ldr	r0, [pc, #148]	; (8010418 <tcp_update_rcv_ann_wnd+0xac>)
 8010384:	f008 fbd2 	bl	8018b2c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010390:	4413      	add	r3, r2
 8010392:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801039c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80103a0:	bf28      	it	cs
 80103a2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80103a6:	b292      	uxth	r2, r2
 80103a8:	4413      	add	r3, r2
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	1ad3      	subs	r3, r2, r3
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	db08      	blt.n	80103c4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103be:	68fa      	ldr	r2, [r7, #12]
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	e020      	b.n	8010406 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103cc:	1ad3      	subs	r3, r2, r3
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	dd03      	ble.n	80103da <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2200      	movs	r2, #0
 80103d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80103d8:	e014      	b.n	8010404 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103e2:	1ad3      	subs	r3, r2, r3
 80103e4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103ec:	d306      	bcc.n	80103fc <tcp_update_rcv_ann_wnd+0x90>
 80103ee:	4b08      	ldr	r3, [pc, #32]	; (8010410 <tcp_update_rcv_ann_wnd+0xa4>)
 80103f0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80103f4:	4909      	ldr	r1, [pc, #36]	; (801041c <tcp_update_rcv_ann_wnd+0xb0>)
 80103f6:	4808      	ldr	r0, [pc, #32]	; (8010418 <tcp_update_rcv_ann_wnd+0xac>)
 80103f8:	f008 fb98 	bl	8018b2c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	b29a      	uxth	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010404:	2300      	movs	r3, #0
  }
}
 8010406:	4618      	mov	r0, r3
 8010408:	3710      	adds	r7, #16
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	0801a8d8 	.word	0x0801a8d8
 8010414:	0801ab34 	.word	0x0801ab34
 8010418:	0801a91c 	.word	0x0801a91c
 801041c:	0801ab58 	.word	0x0801ab58

08010420 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b084      	sub	sp, #16
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	460b      	mov	r3, r1
 801042a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d107      	bne.n	8010442 <tcp_recved+0x22>
 8010432:	4b1f      	ldr	r3, [pc, #124]	; (80104b0 <tcp_recved+0x90>)
 8010434:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010438:	491e      	ldr	r1, [pc, #120]	; (80104b4 <tcp_recved+0x94>)
 801043a:	481f      	ldr	r0, [pc, #124]	; (80104b8 <tcp_recved+0x98>)
 801043c:	f008 fb76 	bl	8018b2c <iprintf>
 8010440:	e032      	b.n	80104a8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	7d1b      	ldrb	r3, [r3, #20]
 8010446:	2b01      	cmp	r3, #1
 8010448:	d106      	bne.n	8010458 <tcp_recved+0x38>
 801044a:	4b19      	ldr	r3, [pc, #100]	; (80104b0 <tcp_recved+0x90>)
 801044c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010450:	491a      	ldr	r1, [pc, #104]	; (80104bc <tcp_recved+0x9c>)
 8010452:	4819      	ldr	r0, [pc, #100]	; (80104b8 <tcp_recved+0x98>)
 8010454:	f008 fb6a 	bl	8018b2c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801045c:	887b      	ldrh	r3, [r7, #2]
 801045e:	4413      	add	r3, r2
 8010460:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010462:	89fb      	ldrh	r3, [r7, #14]
 8010464:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010468:	d804      	bhi.n	8010474 <tcp_recved+0x54>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801046e:	89fa      	ldrh	r2, [r7, #14]
 8010470:	429a      	cmp	r2, r3
 8010472:	d204      	bcs.n	801047e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801047a:	851a      	strh	r2, [r3, #40]	; 0x28
 801047c:	e002      	b.n	8010484 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	89fa      	ldrh	r2, [r7, #14]
 8010482:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f7ff ff71 	bl	801036c <tcp_update_rcv_ann_wnd>
 801048a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010492:	d309      	bcc.n	80104a8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	8b5b      	ldrh	r3, [r3, #26]
 8010498:	f043 0302 	orr.w	r3, r3, #2
 801049c:	b29a      	uxth	r2, r3
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f004 fbc2 	bl	8014c2c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80104a8:	3710      	adds	r7, #16
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
 80104ae:	bf00      	nop
 80104b0:	0801a8d8 	.word	0x0801a8d8
 80104b4:	0801ab74 	.word	0x0801ab74
 80104b8:	0801a91c 	.word	0x0801a91c
 80104bc:	0801ab8c 	.word	0x0801ab8c

080104c0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80104c6:	2300      	movs	r3, #0
 80104c8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80104ca:	4b1e      	ldr	r3, [pc, #120]	; (8010544 <tcp_new_port+0x84>)
 80104cc:	881b      	ldrh	r3, [r3, #0]
 80104ce:	3301      	adds	r3, #1
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	4b1c      	ldr	r3, [pc, #112]	; (8010544 <tcp_new_port+0x84>)
 80104d4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80104d6:	4b1b      	ldr	r3, [pc, #108]	; (8010544 <tcp_new_port+0x84>)
 80104d8:	881b      	ldrh	r3, [r3, #0]
 80104da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104de:	4293      	cmp	r3, r2
 80104e0:	d103      	bne.n	80104ea <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80104e2:	4b18      	ldr	r3, [pc, #96]	; (8010544 <tcp_new_port+0x84>)
 80104e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80104e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80104ea:	2300      	movs	r3, #0
 80104ec:	71fb      	strb	r3, [r7, #7]
 80104ee:	e01e      	b.n	801052e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80104f0:	79fb      	ldrb	r3, [r7, #7]
 80104f2:	4a15      	ldr	r2, [pc, #84]	; (8010548 <tcp_new_port+0x88>)
 80104f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	603b      	str	r3, [r7, #0]
 80104fc:	e011      	b.n	8010522 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	8ada      	ldrh	r2, [r3, #22]
 8010502:	4b10      	ldr	r3, [pc, #64]	; (8010544 <tcp_new_port+0x84>)
 8010504:	881b      	ldrh	r3, [r3, #0]
 8010506:	429a      	cmp	r2, r3
 8010508:	d108      	bne.n	801051c <tcp_new_port+0x5c>
        n++;
 801050a:	88bb      	ldrh	r3, [r7, #4]
 801050c:	3301      	adds	r3, #1
 801050e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010510:	88bb      	ldrh	r3, [r7, #4]
 8010512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010516:	d3d8      	bcc.n	80104ca <tcp_new_port+0xa>
          return 0;
 8010518:	2300      	movs	r3, #0
 801051a:	e00d      	b.n	8010538 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	603b      	str	r3, [r7, #0]
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d1ea      	bne.n	80104fe <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010528:	79fb      	ldrb	r3, [r7, #7]
 801052a:	3301      	adds	r3, #1
 801052c:	71fb      	strb	r3, [r7, #7]
 801052e:	79fb      	ldrb	r3, [r7, #7]
 8010530:	2b03      	cmp	r3, #3
 8010532:	d9dd      	bls.n	80104f0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010534:	4b03      	ldr	r3, [pc, #12]	; (8010544 <tcp_new_port+0x84>)
 8010536:	881b      	ldrh	r3, [r3, #0]
}
 8010538:	4618      	mov	r0, r3
 801053a:	370c      	adds	r7, #12
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr
 8010544:	24000038 	.word	0x24000038
 8010548:	0801de64 	.word	0x0801de64

0801054c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801054c:	b5b0      	push	{r4, r5, r7, lr}
 801054e:	b090      	sub	sp, #64	; 0x40
 8010550:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010552:	2300      	movs	r3, #0
 8010554:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010558:	4b94      	ldr	r3, [pc, #592]	; (80107ac <tcp_slowtmr+0x260>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	3301      	adds	r3, #1
 801055e:	4a93      	ldr	r2, [pc, #588]	; (80107ac <tcp_slowtmr+0x260>)
 8010560:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010562:	4b93      	ldr	r3, [pc, #588]	; (80107b0 <tcp_slowtmr+0x264>)
 8010564:	781b      	ldrb	r3, [r3, #0]
 8010566:	3301      	adds	r3, #1
 8010568:	b2da      	uxtb	r2, r3
 801056a:	4b91      	ldr	r3, [pc, #580]	; (80107b0 <tcp_slowtmr+0x264>)
 801056c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801056e:	2300      	movs	r3, #0
 8010570:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010572:	4b90      	ldr	r3, [pc, #576]	; (80107b4 <tcp_slowtmr+0x268>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010578:	e29d      	b.n	8010ab6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801057a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057c:	7d1b      	ldrb	r3, [r3, #20]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d106      	bne.n	8010590 <tcp_slowtmr+0x44>
 8010582:	4b8d      	ldr	r3, [pc, #564]	; (80107b8 <tcp_slowtmr+0x26c>)
 8010584:	f240 42be 	movw	r2, #1214	; 0x4be
 8010588:	498c      	ldr	r1, [pc, #560]	; (80107bc <tcp_slowtmr+0x270>)
 801058a:	488d      	ldr	r0, [pc, #564]	; (80107c0 <tcp_slowtmr+0x274>)
 801058c:	f008 face 	bl	8018b2c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010592:	7d1b      	ldrb	r3, [r3, #20]
 8010594:	2b01      	cmp	r3, #1
 8010596:	d106      	bne.n	80105a6 <tcp_slowtmr+0x5a>
 8010598:	4b87      	ldr	r3, [pc, #540]	; (80107b8 <tcp_slowtmr+0x26c>)
 801059a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801059e:	4989      	ldr	r1, [pc, #548]	; (80107c4 <tcp_slowtmr+0x278>)
 80105a0:	4887      	ldr	r0, [pc, #540]	; (80107c0 <tcp_slowtmr+0x274>)
 80105a2:	f008 fac3 	bl	8018b2c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80105a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a8:	7d1b      	ldrb	r3, [r3, #20]
 80105aa:	2b0a      	cmp	r3, #10
 80105ac:	d106      	bne.n	80105bc <tcp_slowtmr+0x70>
 80105ae:	4b82      	ldr	r3, [pc, #520]	; (80107b8 <tcp_slowtmr+0x26c>)
 80105b0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80105b4:	4984      	ldr	r1, [pc, #528]	; (80107c8 <tcp_slowtmr+0x27c>)
 80105b6:	4882      	ldr	r0, [pc, #520]	; (80107c0 <tcp_slowtmr+0x274>)
 80105b8:	f008 fab8 	bl	8018b2c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80105bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105be:	7f9a      	ldrb	r2, [r3, #30]
 80105c0:	4b7b      	ldr	r3, [pc, #492]	; (80107b0 <tcp_slowtmr+0x264>)
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d105      	bne.n	80105d4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80105c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80105cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80105d2:	e270      	b.n	8010ab6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80105d4:	4b76      	ldr	r3, [pc, #472]	; (80107b0 <tcp_slowtmr+0x264>)
 80105d6:	781a      	ldrb	r2, [r3, #0]
 80105d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105da:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80105dc:	2300      	movs	r3, #0
 80105de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80105e2:	2300      	movs	r3, #0
 80105e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80105e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ea:	7d1b      	ldrb	r3, [r3, #20]
 80105ec:	2b02      	cmp	r3, #2
 80105ee:	d10a      	bne.n	8010606 <tcp_slowtmr+0xba>
 80105f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105f6:	2b05      	cmp	r3, #5
 80105f8:	d905      	bls.n	8010606 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80105fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105fe:	3301      	adds	r3, #1
 8010600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010604:	e11e      	b.n	8010844 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010608:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801060c:	2b0b      	cmp	r3, #11
 801060e:	d905      	bls.n	801061c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010614:	3301      	adds	r3, #1
 8010616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801061a:	e113      	b.n	8010844 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801061c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010622:	2b00      	cmp	r3, #0
 8010624:	d075      	beq.n	8010712 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801062a:	2b00      	cmp	r3, #0
 801062c:	d006      	beq.n	801063c <tcp_slowtmr+0xf0>
 801062e:	4b62      	ldr	r3, [pc, #392]	; (80107b8 <tcp_slowtmr+0x26c>)
 8010630:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010634:	4965      	ldr	r1, [pc, #404]	; (80107cc <tcp_slowtmr+0x280>)
 8010636:	4862      	ldr	r0, [pc, #392]	; (80107c0 <tcp_slowtmr+0x274>)
 8010638:	f008 fa78 	bl	8018b2c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801063c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010640:	2b00      	cmp	r3, #0
 8010642:	d106      	bne.n	8010652 <tcp_slowtmr+0x106>
 8010644:	4b5c      	ldr	r3, [pc, #368]	; (80107b8 <tcp_slowtmr+0x26c>)
 8010646:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801064a:	4961      	ldr	r1, [pc, #388]	; (80107d0 <tcp_slowtmr+0x284>)
 801064c:	485c      	ldr	r0, [pc, #368]	; (80107c0 <tcp_slowtmr+0x274>)
 801064e:	f008 fa6d 	bl	8018b2c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010654:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010658:	2b0b      	cmp	r3, #11
 801065a:	d905      	bls.n	8010668 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801065c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010660:	3301      	adds	r3, #1
 8010662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010666:	e0ed      	b.n	8010844 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801066e:	3b01      	subs	r3, #1
 8010670:	4a58      	ldr	r2, [pc, #352]	; (80107d4 <tcp_slowtmr+0x288>)
 8010672:	5cd3      	ldrb	r3, [r2, r3]
 8010674:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8010676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010678:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801067c:	7c7a      	ldrb	r2, [r7, #17]
 801067e:	429a      	cmp	r2, r3
 8010680:	d907      	bls.n	8010692 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8010682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010684:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010688:	3301      	adds	r3, #1
 801068a:	b2da      	uxtb	r2, r3
 801068c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8010692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010694:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010698:	7c7a      	ldrb	r2, [r7, #17]
 801069a:	429a      	cmp	r2, r3
 801069c:	f200 80d2 	bhi.w	8010844 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80106a0:	2301      	movs	r3, #1
 80106a2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80106a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d108      	bne.n	80106c0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80106ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106b0:	f005 f964 	bl	801597c <tcp_zero_window_probe>
 80106b4:	4603      	mov	r3, r0
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d014      	beq.n	80106e4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80106ba:	2300      	movs	r3, #0
 80106bc:	623b      	str	r3, [r7, #32]
 80106be:	e011      	b.n	80106e4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80106c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106c6:	4619      	mov	r1, r3
 80106c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106ca:	f004 f829 	bl	8014720 <tcp_split_unsent_seg>
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d107      	bne.n	80106e4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80106d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106d6:	f004 faa9 	bl	8014c2c <tcp_output>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d101      	bne.n	80106e4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80106e0:	2300      	movs	r3, #0
 80106e2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80106e4:	6a3b      	ldr	r3, [r7, #32]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	f000 80ac 	beq.w	8010844 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80106ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ee:	2200      	movs	r2, #0
 80106f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80106f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80106fa:	2b06      	cmp	r3, #6
 80106fc:	f200 80a2 	bhi.w	8010844 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010702:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010706:	3301      	adds	r3, #1
 8010708:	b2da      	uxtb	r2, r3
 801070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010710:	e098      	b.n	8010844 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010714:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010718:	2b00      	cmp	r3, #0
 801071a:	db0f      	blt.n	801073c <tcp_slowtmr+0x1f0>
 801071c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010722:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010726:	4293      	cmp	r3, r2
 8010728:	d008      	beq.n	801073c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010730:	b29b      	uxth	r3, r3
 8010732:	3301      	adds	r3, #1
 8010734:	b29b      	uxth	r3, r3
 8010736:	b21a      	sxth	r2, r3
 8010738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801073c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010744:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010748:	429a      	cmp	r2, r3
 801074a:	db7b      	blt.n	8010844 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801074c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801074e:	f004 fd5f 	bl	8015210 <tcp_rexmit_rto_prepare>
 8010752:	4603      	mov	r3, r0
 8010754:	2b00      	cmp	r3, #0
 8010756:	d007      	beq.n	8010768 <tcp_slowtmr+0x21c>
 8010758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801075c:	2b00      	cmp	r3, #0
 801075e:	d171      	bne.n	8010844 <tcp_slowtmr+0x2f8>
 8010760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010764:	2b00      	cmp	r3, #0
 8010766:	d06d      	beq.n	8010844 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076a:	7d1b      	ldrb	r3, [r3, #20]
 801076c:	2b02      	cmp	r3, #2
 801076e:	d03a      	beq.n	80107e6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010772:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010776:	2b0c      	cmp	r3, #12
 8010778:	bf28      	it	cs
 801077a:	230c      	movcs	r3, #12
 801077c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010780:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010784:	10db      	asrs	r3, r3, #3
 8010786:	b21b      	sxth	r3, r3
 8010788:	461a      	mov	r2, r3
 801078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010790:	4413      	add	r3, r2
 8010792:	7efa      	ldrb	r2, [r7, #27]
 8010794:	4910      	ldr	r1, [pc, #64]	; (80107d8 <tcp_slowtmr+0x28c>)
 8010796:	5c8a      	ldrb	r2, [r1, r2]
 8010798:	4093      	lsls	r3, r2
 801079a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80107a2:	4293      	cmp	r3, r2
 80107a4:	dc1a      	bgt.n	80107dc <tcp_slowtmr+0x290>
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	b21a      	sxth	r2, r3
 80107aa:	e019      	b.n	80107e0 <tcp_slowtmr+0x294>
 80107ac:	24007804 	.word	0x24007804
 80107b0:	240040ca 	.word	0x240040ca
 80107b4:	24007800 	.word	0x24007800
 80107b8:	0801a8d8 	.word	0x0801a8d8
 80107bc:	0801ac1c 	.word	0x0801ac1c
 80107c0:	0801a91c 	.word	0x0801a91c
 80107c4:	0801ac48 	.word	0x0801ac48
 80107c8:	0801ac74 	.word	0x0801ac74
 80107cc:	0801aca4 	.word	0x0801aca4
 80107d0:	0801acd8 	.word	0x0801acd8
 80107d4:	0801de5c 	.word	0x0801de5c
 80107d8:	0801de4c 	.word	0x0801de4c
 80107dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80107e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80107e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e8:	2200      	movs	r2, #0
 80107ea:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80107ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80107f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80107f8:	4293      	cmp	r3, r2
 80107fa:	bf28      	it	cs
 80107fc:	4613      	movcs	r3, r2
 80107fe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010800:	8a7b      	ldrh	r3, [r7, #18]
 8010802:	085b      	lsrs	r3, r3, #1
 8010804:	b29a      	uxth	r2, r3
 8010806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010808:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801080c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010814:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010816:	005b      	lsls	r3, r3, #1
 8010818:	b29b      	uxth	r3, r3
 801081a:	429a      	cmp	r2, r3
 801081c:	d206      	bcs.n	801082c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801081e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010822:	005b      	lsls	r3, r3, #1
 8010824:	b29a      	uxth	r2, r3
 8010826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010828:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010832:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8010836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010838:	2200      	movs	r2, #0
 801083a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801083e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010840:	f004 fd56 	bl	80152f0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010846:	7d1b      	ldrb	r3, [r3, #20]
 8010848:	2b06      	cmp	r3, #6
 801084a:	d111      	bne.n	8010870 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801084c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084e:	8b5b      	ldrh	r3, [r3, #26]
 8010850:	f003 0310 	and.w	r3, r3, #16
 8010854:	2b00      	cmp	r3, #0
 8010856:	d00b      	beq.n	8010870 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010858:	4b9c      	ldr	r3, [pc, #624]	; (8010acc <tcp_slowtmr+0x580>)
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801085e:	6a1b      	ldr	r3, [r3, #32]
 8010860:	1ad3      	subs	r3, r2, r3
 8010862:	2b28      	cmp	r3, #40	; 0x28
 8010864:	d904      	bls.n	8010870 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801086a:	3301      	adds	r3, #1
 801086c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010872:	7a5b      	ldrb	r3, [r3, #9]
 8010874:	f003 0308 	and.w	r3, r3, #8
 8010878:	2b00      	cmp	r3, #0
 801087a:	d04a      	beq.n	8010912 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010880:	2b04      	cmp	r3, #4
 8010882:	d003      	beq.n	801088c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010886:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010888:	2b07      	cmp	r3, #7
 801088a:	d142      	bne.n	8010912 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801088c:	4b8f      	ldr	r3, [pc, #572]	; (8010acc <tcp_slowtmr+0x580>)
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010892:	6a1b      	ldr	r3, [r3, #32]
 8010894:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010898:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801089c:	4b8c      	ldr	r3, [pc, #560]	; (8010ad0 <tcp_slowtmr+0x584>)
 801089e:	440b      	add	r3, r1
 80108a0:	498c      	ldr	r1, [pc, #560]	; (8010ad4 <tcp_slowtmr+0x588>)
 80108a2:	fba1 1303 	umull	r1, r3, r1, r3
 80108a6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d90a      	bls.n	80108c2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80108ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108b0:	3301      	adds	r3, #1
 80108b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80108b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80108ba:	3301      	adds	r3, #1
 80108bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80108c0:	e027      	b.n	8010912 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80108c2:	4b82      	ldr	r3, [pc, #520]	; (8010acc <tcp_slowtmr+0x580>)
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c8:	6a1b      	ldr	r3, [r3, #32]
 80108ca:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80108cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ce:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80108d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80108d8:	4618      	mov	r0, r3
 80108da:	4b7f      	ldr	r3, [pc, #508]	; (8010ad8 <tcp_slowtmr+0x58c>)
 80108dc:	fb03 f300 	mul.w	r3, r3, r0
 80108e0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80108e2:	497c      	ldr	r1, [pc, #496]	; (8010ad4 <tcp_slowtmr+0x588>)
 80108e4:	fba1 1303 	umull	r1, r3, r1, r3
 80108e8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d911      	bls.n	8010912 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80108ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108f0:	f005 f804 	bl	80158fc <tcp_keepalive>
 80108f4:	4603      	mov	r3, r0
 80108f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80108fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d107      	bne.n	8010912 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8010902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010904:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010908:	3301      	adds	r3, #1
 801090a:	b2da      	uxtb	r2, r3
 801090c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8010912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010916:	2b00      	cmp	r3, #0
 8010918:	d011      	beq.n	801093e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801091a:	4b6c      	ldr	r3, [pc, #432]	; (8010acc <tcp_slowtmr+0x580>)
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010920:	6a1b      	ldr	r3, [r3, #32]
 8010922:	1ad2      	subs	r2, r2, r3
 8010924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010926:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801092a:	4619      	mov	r1, r3
 801092c:	460b      	mov	r3, r1
 801092e:	005b      	lsls	r3, r3, #1
 8010930:	440b      	add	r3, r1
 8010932:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010934:	429a      	cmp	r2, r3
 8010936:	d302      	bcc.n	801093e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801093a:	f000 fec3 	bl	80116c4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801093e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010940:	7d1b      	ldrb	r3, [r3, #20]
 8010942:	2b03      	cmp	r3, #3
 8010944:	d10b      	bne.n	801095e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010946:	4b61      	ldr	r3, [pc, #388]	; (8010acc <tcp_slowtmr+0x580>)
 8010948:	681a      	ldr	r2, [r3, #0]
 801094a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801094c:	6a1b      	ldr	r3, [r3, #32]
 801094e:	1ad3      	subs	r3, r2, r3
 8010950:	2b28      	cmp	r3, #40	; 0x28
 8010952:	d904      	bls.n	801095e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010958:	3301      	adds	r3, #1
 801095a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801095e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010960:	7d1b      	ldrb	r3, [r3, #20]
 8010962:	2b09      	cmp	r3, #9
 8010964:	d10b      	bne.n	801097e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010966:	4b59      	ldr	r3, [pc, #356]	; (8010acc <tcp_slowtmr+0x580>)
 8010968:	681a      	ldr	r2, [r3, #0]
 801096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801096c:	6a1b      	ldr	r3, [r3, #32]
 801096e:	1ad3      	subs	r3, r2, r3
 8010970:	2bf0      	cmp	r3, #240	; 0xf0
 8010972:	d904      	bls.n	801097e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8010974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010978:	3301      	adds	r3, #1
 801097a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801097e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010982:	2b00      	cmp	r3, #0
 8010984:	d060      	beq.n	8010a48 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801098c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801098e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010990:	f000 fce4 	bl	801135c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010996:	2b00      	cmp	r3, #0
 8010998:	d010      	beq.n	80109bc <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801099a:	4b50      	ldr	r3, [pc, #320]	; (8010adc <tcp_slowtmr+0x590>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d106      	bne.n	80109b2 <tcp_slowtmr+0x466>
 80109a4:	4b4e      	ldr	r3, [pc, #312]	; (8010ae0 <tcp_slowtmr+0x594>)
 80109a6:	f240 526d 	movw	r2, #1389	; 0x56d
 80109aa:	494e      	ldr	r1, [pc, #312]	; (8010ae4 <tcp_slowtmr+0x598>)
 80109ac:	484e      	ldr	r0, [pc, #312]	; (8010ae8 <tcp_slowtmr+0x59c>)
 80109ae:	f008 f8bd 	bl	8018b2c <iprintf>
        prev->next = pcb->next;
 80109b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b4:	68da      	ldr	r2, [r3, #12]
 80109b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b8:	60da      	str	r2, [r3, #12]
 80109ba:	e00f      	b.n	80109dc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80109bc:	4b47      	ldr	r3, [pc, #284]	; (8010adc <tcp_slowtmr+0x590>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d006      	beq.n	80109d4 <tcp_slowtmr+0x488>
 80109c6:	4b46      	ldr	r3, [pc, #280]	; (8010ae0 <tcp_slowtmr+0x594>)
 80109c8:	f240 5271 	movw	r2, #1393	; 0x571
 80109cc:	4947      	ldr	r1, [pc, #284]	; (8010aec <tcp_slowtmr+0x5a0>)
 80109ce:	4846      	ldr	r0, [pc, #280]	; (8010ae8 <tcp_slowtmr+0x59c>)
 80109d0:	f008 f8ac 	bl	8018b2c <iprintf>
        tcp_active_pcbs = pcb->next;
 80109d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d6:	68db      	ldr	r3, [r3, #12]
 80109d8:	4a40      	ldr	r2, [pc, #256]	; (8010adc <tcp_slowtmr+0x590>)
 80109da:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80109dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d013      	beq.n	8010a0c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80109e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80109e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80109ec:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80109ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f0:	3304      	adds	r3, #4
 80109f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109f4:	8ad2      	ldrh	r2, [r2, #22]
 80109f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109f8:	8b09      	ldrh	r1, [r1, #24]
 80109fa:	9102      	str	r1, [sp, #8]
 80109fc:	9201      	str	r2, [sp, #4]
 80109fe:	9300      	str	r3, [sp, #0]
 8010a00:	462b      	mov	r3, r5
 8010a02:	4622      	mov	r2, r4
 8010a04:	4601      	mov	r1, r0
 8010a06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a08:	f004 fec4 	bl	8015794 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0e:	691b      	ldr	r3, [r3, #16]
 8010a10:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a14:	7d1b      	ldrb	r3, [r3, #20]
 8010a16:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a1a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a1e:	68db      	ldr	r3, [r3, #12]
 8010a20:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010a22:	6838      	ldr	r0, [r7, #0]
 8010a24:	f7ff f83a 	bl	800fa9c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010a28:	4b31      	ldr	r3, [pc, #196]	; (8010af0 <tcp_slowtmr+0x5a4>)
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d004      	beq.n	8010a3e <tcp_slowtmr+0x4f2>
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f06f 010c 	mvn.w	r1, #12
 8010a3a:	68b8      	ldr	r0, [r7, #8]
 8010a3c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010a3e:	4b2c      	ldr	r3, [pc, #176]	; (8010af0 <tcp_slowtmr+0x5a4>)
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d037      	beq.n	8010ab6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8010a46:	e592      	b.n	801056e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4e:	68db      	ldr	r3, [r3, #12]
 8010a50:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a54:	7f1b      	ldrb	r3, [r3, #28]
 8010a56:	3301      	adds	r3, #1
 8010a58:	b2da      	uxtb	r2, r3
 8010a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a60:	7f1a      	ldrb	r2, [r3, #28]
 8010a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a64:	7f5b      	ldrb	r3, [r3, #29]
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d325      	bcc.n	8010ab6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8010a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010a70:	4b1f      	ldr	r3, [pc, #124]	; (8010af0 <tcp_slowtmr+0x5a4>)
 8010a72:	2200      	movs	r2, #0
 8010a74:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d00b      	beq.n	8010a98 <tcp_slowtmr+0x54c>
 8010a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a88:	6912      	ldr	r2, [r2, #16]
 8010a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a8c:	4610      	mov	r0, r2
 8010a8e:	4798      	blx	r3
 8010a90:	4603      	mov	r3, r0
 8010a92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010a96:	e002      	b.n	8010a9e <tcp_slowtmr+0x552>
 8010a98:	2300      	movs	r3, #0
 8010a9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010a9e:	4b14      	ldr	r3, [pc, #80]	; (8010af0 <tcp_slowtmr+0x5a4>)
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d000      	beq.n	8010aa8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8010aa6:	e562      	b.n	801056e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010aa8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d102      	bne.n	8010ab6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8010ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ab2:	f004 f8bb 	bl	8014c2c <tcp_output>
  while (pcb != NULL) {
 8010ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f47f ad5e 	bne.w	801057a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010ac2:	4b0c      	ldr	r3, [pc, #48]	; (8010af4 <tcp_slowtmr+0x5a8>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010ac8:	e069      	b.n	8010b9e <tcp_slowtmr+0x652>
 8010aca:	bf00      	nop
 8010acc:	24007804 	.word	0x24007804
 8010ad0:	000a4cb8 	.word	0x000a4cb8
 8010ad4:	10624dd3 	.word	0x10624dd3
 8010ad8:	000124f8 	.word	0x000124f8
 8010adc:	24007800 	.word	0x24007800
 8010ae0:	0801a8d8 	.word	0x0801a8d8
 8010ae4:	0801ad10 	.word	0x0801ad10
 8010ae8:	0801a91c 	.word	0x0801a91c
 8010aec:	0801ad3c 	.word	0x0801ad3c
 8010af0:	240077fc 	.word	0x240077fc
 8010af4:	24007810 	.word	0x24007810
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010afa:	7d1b      	ldrb	r3, [r3, #20]
 8010afc:	2b0a      	cmp	r3, #10
 8010afe:	d006      	beq.n	8010b0e <tcp_slowtmr+0x5c2>
 8010b00:	4b2b      	ldr	r3, [pc, #172]	; (8010bb0 <tcp_slowtmr+0x664>)
 8010b02:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8010b06:	492b      	ldr	r1, [pc, #172]	; (8010bb4 <tcp_slowtmr+0x668>)
 8010b08:	482b      	ldr	r0, [pc, #172]	; (8010bb8 <tcp_slowtmr+0x66c>)
 8010b0a:	f008 f80f 	bl	8018b2c <iprintf>
    pcb_remove = 0;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010b14:	4b29      	ldr	r3, [pc, #164]	; (8010bbc <tcp_slowtmr+0x670>)
 8010b16:	681a      	ldr	r2, [r3, #0]
 8010b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1a:	6a1b      	ldr	r3, [r3, #32]
 8010b1c:	1ad3      	subs	r3, r2, r3
 8010b1e:	2bf0      	cmp	r3, #240	; 0xf0
 8010b20:	d904      	bls.n	8010b2c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8010b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b26:	3301      	adds	r3, #1
 8010b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d02f      	beq.n	8010b94 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010b34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b36:	f000 fc11 	bl	801135c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d010      	beq.n	8010b62 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010b40:	4b1f      	ldr	r3, [pc, #124]	; (8010bc0 <tcp_slowtmr+0x674>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d106      	bne.n	8010b58 <tcp_slowtmr+0x60c>
 8010b4a:	4b19      	ldr	r3, [pc, #100]	; (8010bb0 <tcp_slowtmr+0x664>)
 8010b4c:	f240 52af 	movw	r2, #1455	; 0x5af
 8010b50:	491c      	ldr	r1, [pc, #112]	; (8010bc4 <tcp_slowtmr+0x678>)
 8010b52:	4819      	ldr	r0, [pc, #100]	; (8010bb8 <tcp_slowtmr+0x66c>)
 8010b54:	f007 ffea 	bl	8018b2c <iprintf>
        prev->next = pcb->next;
 8010b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b5a:	68da      	ldr	r2, [r3, #12]
 8010b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5e:	60da      	str	r2, [r3, #12]
 8010b60:	e00f      	b.n	8010b82 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010b62:	4b17      	ldr	r3, [pc, #92]	; (8010bc0 <tcp_slowtmr+0x674>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d006      	beq.n	8010b7a <tcp_slowtmr+0x62e>
 8010b6c:	4b10      	ldr	r3, [pc, #64]	; (8010bb0 <tcp_slowtmr+0x664>)
 8010b6e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010b72:	4915      	ldr	r1, [pc, #84]	; (8010bc8 <tcp_slowtmr+0x67c>)
 8010b74:	4810      	ldr	r0, [pc, #64]	; (8010bb8 <tcp_slowtmr+0x66c>)
 8010b76:	f007 ffd9 	bl	8018b2c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b7c:	68db      	ldr	r3, [r3, #12]
 8010b7e:	4a10      	ldr	r2, [pc, #64]	; (8010bc0 <tcp_slowtmr+0x674>)
 8010b80:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b84:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b88:	68db      	ldr	r3, [r3, #12]
 8010b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010b8c:	69f8      	ldr	r0, [r7, #28]
 8010b8e:	f7fe ff85 	bl	800fa9c <tcp_free>
 8010b92:	e004      	b.n	8010b9e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b9a:	68db      	ldr	r3, [r3, #12]
 8010b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d1a9      	bne.n	8010af8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8010ba4:	bf00      	nop
 8010ba6:	bf00      	nop
 8010ba8:	3730      	adds	r7, #48	; 0x30
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bdb0      	pop	{r4, r5, r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	0801a8d8 	.word	0x0801a8d8
 8010bb4:	0801ad68 	.word	0x0801ad68
 8010bb8:	0801a91c 	.word	0x0801a91c
 8010bbc:	24007804 	.word	0x24007804
 8010bc0:	24007810 	.word	0x24007810
 8010bc4:	0801ad98 	.word	0x0801ad98
 8010bc8:	0801adc0 	.word	0x0801adc0

08010bcc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010bd2:	4b2d      	ldr	r3, [pc, #180]	; (8010c88 <tcp_fasttmr+0xbc>)
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	b2da      	uxtb	r2, r3
 8010bda:	4b2b      	ldr	r3, [pc, #172]	; (8010c88 <tcp_fasttmr+0xbc>)
 8010bdc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010bde:	4b2b      	ldr	r3, [pc, #172]	; (8010c8c <tcp_fasttmr+0xc0>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010be4:	e048      	b.n	8010c78 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	7f9a      	ldrb	r2, [r3, #30]
 8010bea:	4b27      	ldr	r3, [pc, #156]	; (8010c88 <tcp_fasttmr+0xbc>)
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d03f      	beq.n	8010c72 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010bf2:	4b25      	ldr	r3, [pc, #148]	; (8010c88 <tcp_fasttmr+0xbc>)
 8010bf4:	781a      	ldrb	r2, [r3, #0]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	8b5b      	ldrh	r3, [r3, #26]
 8010bfe:	f003 0301 	and.w	r3, r3, #1
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d010      	beq.n	8010c28 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	8b5b      	ldrh	r3, [r3, #26]
 8010c0a:	f043 0302 	orr.w	r3, r3, #2
 8010c0e:	b29a      	uxth	r2, r3
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f004 f809 	bl	8014c2c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	8b5b      	ldrh	r3, [r3, #26]
 8010c1e:	f023 0303 	bic.w	r3, r3, #3
 8010c22:	b29a      	uxth	r2, r3
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	8b5b      	ldrh	r3, [r3, #26]
 8010c2c:	f003 0308 	and.w	r3, r3, #8
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d009      	beq.n	8010c48 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	8b5b      	ldrh	r3, [r3, #26]
 8010c38:	f023 0308 	bic.w	r3, r3, #8
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f7ff f8be 	bl	800fdc4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d00a      	beq.n	8010c6c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010c56:	4b0e      	ldr	r3, [pc, #56]	; (8010c90 <tcp_fasttmr+0xc4>)
 8010c58:	2200      	movs	r2, #0
 8010c5a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f000 f819 	bl	8010c94 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010c62:	4b0b      	ldr	r3, [pc, #44]	; (8010c90 <tcp_fasttmr+0xc4>)
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d000      	beq.n	8010c6c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010c6a:	e7b8      	b.n	8010bde <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	607b      	str	r3, [r7, #4]
 8010c70:	e002      	b.n	8010c78 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	68db      	ldr	r3, [r3, #12]
 8010c76:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d1b3      	bne.n	8010be6 <tcp_fasttmr+0x1a>
    }
  }
}
 8010c7e:	bf00      	nop
 8010c80:	bf00      	nop
 8010c82:	3708      	adds	r7, #8
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	240040ca 	.word	0x240040ca
 8010c8c:	24007800 	.word	0x24007800
 8010c90:	240077fc 	.word	0x240077fc

08010c94 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010c94:	b590      	push	{r4, r7, lr}
 8010c96:	b085      	sub	sp, #20
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d109      	bne.n	8010cb6 <tcp_process_refused_data+0x22>
 8010ca2:	4b37      	ldr	r3, [pc, #220]	; (8010d80 <tcp_process_refused_data+0xec>)
 8010ca4:	f240 6209 	movw	r2, #1545	; 0x609
 8010ca8:	4936      	ldr	r1, [pc, #216]	; (8010d84 <tcp_process_refused_data+0xf0>)
 8010caa:	4837      	ldr	r0, [pc, #220]	; (8010d88 <tcp_process_refused_data+0xf4>)
 8010cac:	f007 ff3e 	bl	8018b2c <iprintf>
 8010cb0:	f06f 030f 	mvn.w	r3, #15
 8010cb4:	e060      	b.n	8010d78 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010cba:	7b5b      	ldrb	r3, [r3, #13]
 8010cbc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010cc2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d00b      	beq.n	8010cec <tcp_process_refused_data+0x58>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6918      	ldr	r0, [r3, #16]
 8010cde:	2300      	movs	r3, #0
 8010ce0:	68ba      	ldr	r2, [r7, #8]
 8010ce2:	6879      	ldr	r1, [r7, #4]
 8010ce4:	47a0      	blx	r4
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	73fb      	strb	r3, [r7, #15]
 8010cea:	e007      	b.n	8010cfc <tcp_process_refused_data+0x68>
 8010cec:	2300      	movs	r3, #0
 8010cee:	68ba      	ldr	r2, [r7, #8]
 8010cf0:	6879      	ldr	r1, [r7, #4]
 8010cf2:	2000      	movs	r0, #0
 8010cf4:	f000 f8c2 	bl	8010e7c <tcp_recv_null>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d12a      	bne.n	8010d5a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010d04:	7bbb      	ldrb	r3, [r7, #14]
 8010d06:	f003 0320 	and.w	r3, r3, #32
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d033      	beq.n	8010d76 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010d16:	d005      	beq.n	8010d24 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	b29a      	uxth	r2, r3
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00b      	beq.n	8010d46 <tcp_process_refused_data+0xb2>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6918      	ldr	r0, [r3, #16]
 8010d38:	2300      	movs	r3, #0
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	6879      	ldr	r1, [r7, #4]
 8010d3e:	47a0      	blx	r4
 8010d40:	4603      	mov	r3, r0
 8010d42:	73fb      	strb	r3, [r7, #15]
 8010d44:	e001      	b.n	8010d4a <tcp_process_refused_data+0xb6>
 8010d46:	2300      	movs	r3, #0
 8010d48:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d4e:	f113 0f0d 	cmn.w	r3, #13
 8010d52:	d110      	bne.n	8010d76 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010d54:	f06f 030c 	mvn.w	r3, #12
 8010d58:	e00e      	b.n	8010d78 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d5e:	f113 0f0d 	cmn.w	r3, #13
 8010d62:	d102      	bne.n	8010d6a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010d64:	f06f 030c 	mvn.w	r3, #12
 8010d68:	e006      	b.n	8010d78 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	68ba      	ldr	r2, [r7, #8]
 8010d6e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010d70:	f06f 0304 	mvn.w	r3, #4
 8010d74:	e000      	b.n	8010d78 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010d76:	2300      	movs	r3, #0
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3714      	adds	r7, #20
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd90      	pop	{r4, r7, pc}
 8010d80:	0801a8d8 	.word	0x0801a8d8
 8010d84:	0801ade8 	.word	0x0801ade8
 8010d88:	0801a91c 	.word	0x0801a91c

08010d8c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010d94:	e007      	b.n	8010da6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 f80a 	bl	8010db6 <tcp_seg_free>
    seg = next;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d1f4      	bne.n	8010d96 <tcp_segs_free+0xa>
  }
}
 8010dac:	bf00      	nop
 8010dae:	bf00      	nop
 8010db0:	3710      	adds	r7, #16
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}

08010db6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010db6:	b580      	push	{r7, lr}
 8010db8:	b082      	sub	sp, #8
 8010dba:	af00      	add	r7, sp, #0
 8010dbc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d00c      	beq.n	8010dde <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d004      	beq.n	8010dd6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	685b      	ldr	r3, [r3, #4]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7fe fba7 	bl	800f524 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010dd6:	6879      	ldr	r1, [r7, #4]
 8010dd8:	2003      	movs	r0, #3
 8010dda:	f7fd fcff 	bl	800e7dc <memp_free>
  }
}
 8010dde:	bf00      	nop
 8010de0:	3708      	adds	r7, #8
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
	...

08010de8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	460b      	mov	r3, r1
 8010df2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d107      	bne.n	8010e0a <tcp_setprio+0x22>
 8010dfa:	4b07      	ldr	r3, [pc, #28]	; (8010e18 <tcp_setprio+0x30>)
 8010dfc:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8010e00:	4906      	ldr	r1, [pc, #24]	; (8010e1c <tcp_setprio+0x34>)
 8010e02:	4807      	ldr	r0, [pc, #28]	; (8010e20 <tcp_setprio+0x38>)
 8010e04:	f007 fe92 	bl	8018b2c <iprintf>
 8010e08:	e002      	b.n	8010e10 <tcp_setprio+0x28>

  pcb->prio = prio;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	78fa      	ldrb	r2, [r7, #3]
 8010e0e:	755a      	strb	r2, [r3, #21]
}
 8010e10:	3708      	adds	r7, #8
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
 8010e16:	bf00      	nop
 8010e18:	0801a8d8 	.word	0x0801a8d8
 8010e1c:	0801ae10 	.word	0x0801ae10
 8010e20:	0801a91c 	.word	0x0801a91c

08010e24 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d106      	bne.n	8010e40 <tcp_seg_copy+0x1c>
 8010e32:	4b0f      	ldr	r3, [pc, #60]	; (8010e70 <tcp_seg_copy+0x4c>)
 8010e34:	f240 6282 	movw	r2, #1666	; 0x682
 8010e38:	490e      	ldr	r1, [pc, #56]	; (8010e74 <tcp_seg_copy+0x50>)
 8010e3a:	480f      	ldr	r0, [pc, #60]	; (8010e78 <tcp_seg_copy+0x54>)
 8010e3c:	f007 fe76 	bl	8018b2c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010e40:	2003      	movs	r0, #3
 8010e42:	f7fd fc55 	bl	800e6f0 <memp_malloc>
 8010e46:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d101      	bne.n	8010e52 <tcp_seg_copy+0x2e>
    return NULL;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	e00a      	b.n	8010e68 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010e52:	2210      	movs	r2, #16
 8010e54:	6879      	ldr	r1, [r7, #4]
 8010e56:	68f8      	ldr	r0, [r7, #12]
 8010e58:	f007 fe52 	bl	8018b00 <memcpy>
  pbuf_ref(cseg->p);
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7fe fc05 	bl	800f670 <pbuf_ref>
  return cseg;
 8010e66:	68fb      	ldr	r3, [r7, #12]
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3710      	adds	r7, #16
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	0801a8d8 	.word	0x0801a8d8
 8010e74:	0801ae2c 	.word	0x0801ae2c
 8010e78:	0801a91c 	.word	0x0801a91c

08010e7c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	607a      	str	r2, [r7, #4]
 8010e88:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d109      	bne.n	8010ea4 <tcp_recv_null+0x28>
 8010e90:	4b12      	ldr	r3, [pc, #72]	; (8010edc <tcp_recv_null+0x60>)
 8010e92:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010e96:	4912      	ldr	r1, [pc, #72]	; (8010ee0 <tcp_recv_null+0x64>)
 8010e98:	4812      	ldr	r0, [pc, #72]	; (8010ee4 <tcp_recv_null+0x68>)
 8010e9a:	f007 fe47 	bl	8018b2c <iprintf>
 8010e9e:	f06f 030f 	mvn.w	r3, #15
 8010ea2:	e016      	b.n	8010ed2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d009      	beq.n	8010ebe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	891b      	ldrh	r3, [r3, #8]
 8010eae:	4619      	mov	r1, r3
 8010eb0:	68b8      	ldr	r0, [r7, #8]
 8010eb2:	f7ff fab5 	bl	8010420 <tcp_recved>
    pbuf_free(p);
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f7fe fb34 	bl	800f524 <pbuf_free>
 8010ebc:	e008      	b.n	8010ed0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d104      	bne.n	8010ed0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010ec6:	68b8      	ldr	r0, [r7, #8]
 8010ec8:	f7fe ffe6 	bl	800fe98 <tcp_close>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	e000      	b.n	8010ed2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010ed0:	2300      	movs	r3, #0
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3710      	adds	r7, #16
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	0801a8d8 	.word	0x0801a8d8
 8010ee0:	0801ae48 	.word	0x0801ae48
 8010ee4:	0801a91c 	.word	0x0801a91c

08010ee8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b086      	sub	sp, #24
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	4603      	mov	r3, r0
 8010ef0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	db01      	blt.n	8010efe <tcp_kill_prio+0x16>
 8010efa:	79fb      	ldrb	r3, [r7, #7]
 8010efc:	e000      	b.n	8010f00 <tcp_kill_prio+0x18>
 8010efe:	237f      	movs	r3, #127	; 0x7f
 8010f00:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010f02:	7afb      	ldrb	r3, [r7, #11]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d034      	beq.n	8010f72 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010f08:	7afb      	ldrb	r3, [r7, #11]
 8010f0a:	3b01      	subs	r3, #1
 8010f0c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010f12:	2300      	movs	r3, #0
 8010f14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f16:	4b19      	ldr	r3, [pc, #100]	; (8010f7c <tcp_kill_prio+0x94>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	617b      	str	r3, [r7, #20]
 8010f1c:	e01f      	b.n	8010f5e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	7d5b      	ldrb	r3, [r3, #21]
 8010f22:	7afa      	ldrb	r2, [r7, #11]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d80c      	bhi.n	8010f42 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010f2c:	7afa      	ldrb	r2, [r7, #11]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d112      	bne.n	8010f58 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010f32:	4b13      	ldr	r3, [pc, #76]	; (8010f80 <tcp_kill_prio+0x98>)
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	6a1b      	ldr	r3, [r3, #32]
 8010f3a:	1ad3      	subs	r3, r2, r3
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	d80a      	bhi.n	8010f58 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010f42:	4b0f      	ldr	r3, [pc, #60]	; (8010f80 <tcp_kill_prio+0x98>)
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	6a1b      	ldr	r3, [r3, #32]
 8010f4a:	1ad3      	subs	r3, r2, r3
 8010f4c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	7d5b      	ldrb	r3, [r3, #21]
 8010f56:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	617b      	str	r3, [r7, #20]
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1dc      	bne.n	8010f1e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d004      	beq.n	8010f74 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010f6a:	6938      	ldr	r0, [r7, #16]
 8010f6c:	f7ff f87e 	bl	801006c <tcp_abort>
 8010f70:	e000      	b.n	8010f74 <tcp_kill_prio+0x8c>
    return;
 8010f72:	bf00      	nop
  }
}
 8010f74:	3718      	adds	r7, #24
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	24007800 	.word	0x24007800
 8010f80:	24007804 	.word	0x24007804

08010f84 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b086      	sub	sp, #24
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010f8e:	79fb      	ldrb	r3, [r7, #7]
 8010f90:	2b08      	cmp	r3, #8
 8010f92:	d009      	beq.n	8010fa8 <tcp_kill_state+0x24>
 8010f94:	79fb      	ldrb	r3, [r7, #7]
 8010f96:	2b09      	cmp	r3, #9
 8010f98:	d006      	beq.n	8010fa8 <tcp_kill_state+0x24>
 8010f9a:	4b1a      	ldr	r3, [pc, #104]	; (8011004 <tcp_kill_state+0x80>)
 8010f9c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010fa0:	4919      	ldr	r1, [pc, #100]	; (8011008 <tcp_kill_state+0x84>)
 8010fa2:	481a      	ldr	r0, [pc, #104]	; (801100c <tcp_kill_state+0x88>)
 8010fa4:	f007 fdc2 	bl	8018b2c <iprintf>

  inactivity = 0;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010fac:	2300      	movs	r3, #0
 8010fae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010fb0:	4b17      	ldr	r3, [pc, #92]	; (8011010 <tcp_kill_state+0x8c>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	617b      	str	r3, [r7, #20]
 8010fb6:	e017      	b.n	8010fe8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	7d1b      	ldrb	r3, [r3, #20]
 8010fbc:	79fa      	ldrb	r2, [r7, #7]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d10f      	bne.n	8010fe2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010fc2:	4b14      	ldr	r3, [pc, #80]	; (8011014 <tcp_kill_state+0x90>)
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	6a1b      	ldr	r3, [r3, #32]
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	68fa      	ldr	r2, [r7, #12]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d807      	bhi.n	8010fe2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010fd2:	4b10      	ldr	r3, [pc, #64]	; (8011014 <tcp_kill_state+0x90>)
 8010fd4:	681a      	ldr	r2, [r3, #0]
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	6a1b      	ldr	r3, [r3, #32]
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	617b      	str	r3, [r7, #20]
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d1e4      	bne.n	8010fb8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d003      	beq.n	8010ffc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010ff4:	2100      	movs	r1, #0
 8010ff6:	6938      	ldr	r0, [r7, #16]
 8010ff8:	f7fe ff7a 	bl	800fef0 <tcp_abandon>
  }
}
 8010ffc:	bf00      	nop
 8010ffe:	3718      	adds	r7, #24
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	0801a8d8 	.word	0x0801a8d8
 8011008:	0801ae64 	.word	0x0801ae64
 801100c:	0801a91c 	.word	0x0801a91c
 8011010:	24007800 	.word	0x24007800
 8011014:	24007804 	.word	0x24007804

08011018 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b084      	sub	sp, #16
 801101c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801101e:	2300      	movs	r3, #0
 8011020:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011022:	2300      	movs	r3, #0
 8011024:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011026:	4b12      	ldr	r3, [pc, #72]	; (8011070 <tcp_kill_timewait+0x58>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	60fb      	str	r3, [r7, #12]
 801102c:	e012      	b.n	8011054 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801102e:	4b11      	ldr	r3, [pc, #68]	; (8011074 <tcp_kill_timewait+0x5c>)
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	6a1b      	ldr	r3, [r3, #32]
 8011036:	1ad3      	subs	r3, r2, r3
 8011038:	687a      	ldr	r2, [r7, #4]
 801103a:	429a      	cmp	r2, r3
 801103c:	d807      	bhi.n	801104e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801103e:	4b0d      	ldr	r3, [pc, #52]	; (8011074 <tcp_kill_timewait+0x5c>)
 8011040:	681a      	ldr	r2, [r3, #0]
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	6a1b      	ldr	r3, [r3, #32]
 8011046:	1ad3      	subs	r3, r2, r3
 8011048:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	68db      	ldr	r3, [r3, #12]
 8011052:	60fb      	str	r3, [r7, #12]
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d1e9      	bne.n	801102e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d002      	beq.n	8011066 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011060:	68b8      	ldr	r0, [r7, #8]
 8011062:	f7ff f803 	bl	801006c <tcp_abort>
  }
}
 8011066:	bf00      	nop
 8011068:	3710      	adds	r7, #16
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop
 8011070:	24007810 	.word	0x24007810
 8011074:	24007804 	.word	0x24007804

08011078 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801107e:	4b10      	ldr	r3, [pc, #64]	; (80110c0 <tcp_handle_closepend+0x48>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011084:	e014      	b.n	80110b0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	8b5b      	ldrh	r3, [r3, #26]
 8011090:	f003 0308 	and.w	r3, r3, #8
 8011094:	2b00      	cmp	r3, #0
 8011096:	d009      	beq.n	80110ac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	8b5b      	ldrh	r3, [r3, #26]
 801109c:	f023 0308 	bic.w	r3, r3, #8
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7fe fe8c 	bl	800fdc4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d1e7      	bne.n	8011086 <tcp_handle_closepend+0xe>
  }
}
 80110b6:	bf00      	nop
 80110b8:	bf00      	nop
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	24007800 	.word	0x24007800

080110c4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	4603      	mov	r3, r0
 80110cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80110ce:	2001      	movs	r0, #1
 80110d0:	f7fd fb0e 	bl	800e6f0 <memp_malloc>
 80110d4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d126      	bne.n	801112a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80110dc:	f7ff ffcc 	bl	8011078 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80110e0:	f7ff ff9a 	bl	8011018 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80110e4:	2001      	movs	r0, #1
 80110e6:	f7fd fb03 	bl	800e6f0 <memp_malloc>
 80110ea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d11b      	bne.n	801112a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80110f2:	2009      	movs	r0, #9
 80110f4:	f7ff ff46 	bl	8010f84 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80110f8:	2001      	movs	r0, #1
 80110fa:	f7fd faf9 	bl	800e6f0 <memp_malloc>
 80110fe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d111      	bne.n	801112a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011106:	2008      	movs	r0, #8
 8011108:	f7ff ff3c 	bl	8010f84 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801110c:	2001      	movs	r0, #1
 801110e:	f7fd faef 	bl	800e6f0 <memp_malloc>
 8011112:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d107      	bne.n	801112a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801111a:	79fb      	ldrb	r3, [r7, #7]
 801111c:	4618      	mov	r0, r3
 801111e:	f7ff fee3 	bl	8010ee8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011122:	2001      	movs	r0, #1
 8011124:	f7fd fae4 	bl	800e6f0 <memp_malloc>
 8011128:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d03f      	beq.n	80111b0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011130:	229c      	movs	r2, #156	; 0x9c
 8011132:	2100      	movs	r1, #0
 8011134:	68f8      	ldr	r0, [r7, #12]
 8011136:	f007 fcf1 	bl	8018b1c <memset>
    pcb->prio = prio;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	79fa      	ldrb	r2, [r7, #7]
 801113e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011146:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011150:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	22ff      	movs	r2, #255	; 0xff
 801115e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011166:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2206      	movs	r2, #6
 801116c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2206      	movs	r2, #6
 8011174:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801117c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	2201      	movs	r2, #1
 8011182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011186:	4b0d      	ldr	r3, [pc, #52]	; (80111bc <tcp_alloc+0xf8>)
 8011188:	681a      	ldr	r2, [r3, #0]
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801118e:	4b0c      	ldr	r3, [pc, #48]	; (80111c0 <tcp_alloc+0xfc>)
 8011190:	781a      	ldrb	r2, [r3, #0]
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801119c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	4a08      	ldr	r2, [pc, #32]	; (80111c4 <tcp_alloc+0x100>)
 80111a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	4a07      	ldr	r2, [pc, #28]	; (80111c8 <tcp_alloc+0x104>)
 80111ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80111b0:	68fb      	ldr	r3, [r7, #12]
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3710      	adds	r7, #16
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
 80111ba:	bf00      	nop
 80111bc:	24007804 	.word	0x24007804
 80111c0:	240040ca 	.word	0x240040ca
 80111c4:	08010e7d 	.word	0x08010e7d
 80111c8:	006ddd00 	.word	0x006ddd00

080111cc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80111d0:	2040      	movs	r0, #64	; 0x40
 80111d2:	f7ff ff77 	bl	80110c4 <tcp_alloc>
 80111d6:	4603      	mov	r3, r0
}
 80111d8:	4618      	mov	r0, r3
 80111da:	bd80      	pop	{r7, pc}

080111dc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80111dc:	b480      	push	{r7}
 80111de:	b083      	sub	sp, #12
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d002      	beq.n	80111f2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	683a      	ldr	r2, [r7, #0]
 80111f0:	611a      	str	r2, [r3, #16]
  }
}
 80111f2:	bf00      	nop
 80111f4:	370c      	adds	r7, #12
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr
	...

08011200 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d00e      	beq.n	801122e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	7d1b      	ldrb	r3, [r3, #20]
 8011214:	2b01      	cmp	r3, #1
 8011216:	d106      	bne.n	8011226 <tcp_recv+0x26>
 8011218:	4b07      	ldr	r3, [pc, #28]	; (8011238 <tcp_recv+0x38>)
 801121a:	f240 72df 	movw	r2, #2015	; 0x7df
 801121e:	4907      	ldr	r1, [pc, #28]	; (801123c <tcp_recv+0x3c>)
 8011220:	4807      	ldr	r0, [pc, #28]	; (8011240 <tcp_recv+0x40>)
 8011222:	f007 fc83 	bl	8018b2c <iprintf>
    pcb->recv = recv;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	683a      	ldr	r2, [r7, #0]
 801122a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801122e:	bf00      	nop
 8011230:	3708      	adds	r7, #8
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}
 8011236:	bf00      	nop
 8011238:	0801a8d8 	.word	0x0801a8d8
 801123c:	0801ae74 	.word	0x0801ae74
 8011240:	0801a91c 	.word	0x0801a91c

08011244 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00e      	beq.n	8011272 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	7d1b      	ldrb	r3, [r3, #20]
 8011258:	2b01      	cmp	r3, #1
 801125a:	d106      	bne.n	801126a <tcp_sent+0x26>
 801125c:	4b07      	ldr	r3, [pc, #28]	; (801127c <tcp_sent+0x38>)
 801125e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8011262:	4907      	ldr	r1, [pc, #28]	; (8011280 <tcp_sent+0x3c>)
 8011264:	4807      	ldr	r0, [pc, #28]	; (8011284 <tcp_sent+0x40>)
 8011266:	f007 fc61 	bl	8018b2c <iprintf>
    pcb->sent = sent;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	683a      	ldr	r2, [r7, #0]
 801126e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011272:	bf00      	nop
 8011274:	3708      	adds	r7, #8
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	0801a8d8 	.word	0x0801a8d8
 8011280:	0801ae9c 	.word	0x0801ae9c
 8011284:	0801a91c 	.word	0x0801a91c

08011288 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d00e      	beq.n	80112b6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	7d1b      	ldrb	r3, [r3, #20]
 801129c:	2b01      	cmp	r3, #1
 801129e:	d106      	bne.n	80112ae <tcp_err+0x26>
 80112a0:	4b07      	ldr	r3, [pc, #28]	; (80112c0 <tcp_err+0x38>)
 80112a2:	f640 020d 	movw	r2, #2061	; 0x80d
 80112a6:	4907      	ldr	r1, [pc, #28]	; (80112c4 <tcp_err+0x3c>)
 80112a8:	4807      	ldr	r0, [pc, #28]	; (80112c8 <tcp_err+0x40>)
 80112aa:	f007 fc3f 	bl	8018b2c <iprintf>
    pcb->errf = err;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	683a      	ldr	r2, [r7, #0]
 80112b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80112b6:	bf00      	nop
 80112b8:	3708      	adds	r7, #8
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	0801a8d8 	.word	0x0801a8d8
 80112c4:	0801aec4 	.word	0x0801aec4
 80112c8:	0801a91c 	.word	0x0801a91c

080112cc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b085      	sub	sp, #20
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d008      	beq.n	80112ee <tcp_accept+0x22>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	7d1b      	ldrb	r3, [r3, #20]
 80112e0:	2b01      	cmp	r3, #1
 80112e2:	d104      	bne.n	80112ee <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	683a      	ldr	r2, [r7, #0]
 80112ec:	619a      	str	r2, [r3, #24]
  }
}
 80112ee:	bf00      	nop
 80112f0:	3714      	adds	r7, #20
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr
	...

080112fc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	60b9      	str	r1, [r7, #8]
 8011306:	4613      	mov	r3, r2
 8011308:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d107      	bne.n	8011320 <tcp_poll+0x24>
 8011310:	4b0e      	ldr	r3, [pc, #56]	; (801134c <tcp_poll+0x50>)
 8011312:	f640 023d 	movw	r2, #2109	; 0x83d
 8011316:	490e      	ldr	r1, [pc, #56]	; (8011350 <tcp_poll+0x54>)
 8011318:	480e      	ldr	r0, [pc, #56]	; (8011354 <tcp_poll+0x58>)
 801131a:	f007 fc07 	bl	8018b2c <iprintf>
 801131e:	e011      	b.n	8011344 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	7d1b      	ldrb	r3, [r3, #20]
 8011324:	2b01      	cmp	r3, #1
 8011326:	d106      	bne.n	8011336 <tcp_poll+0x3a>
 8011328:	4b08      	ldr	r3, [pc, #32]	; (801134c <tcp_poll+0x50>)
 801132a:	f640 023e 	movw	r2, #2110	; 0x83e
 801132e:	490a      	ldr	r1, [pc, #40]	; (8011358 <tcp_poll+0x5c>)
 8011330:	4808      	ldr	r0, [pc, #32]	; (8011354 <tcp_poll+0x58>)
 8011332:	f007 fbfb 	bl	8018b2c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	68ba      	ldr	r2, [r7, #8]
 801133a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	79fa      	ldrb	r2, [r7, #7]
 8011342:	775a      	strb	r2, [r3, #29]
}
 8011344:	3710      	adds	r7, #16
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
 801134a:	bf00      	nop
 801134c:	0801a8d8 	.word	0x0801a8d8
 8011350:	0801aeec 	.word	0x0801aeec
 8011354:	0801a91c 	.word	0x0801a91c
 8011358:	0801af04 	.word	0x0801af04

0801135c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d107      	bne.n	801137a <tcp_pcb_purge+0x1e>
 801136a:	4b21      	ldr	r3, [pc, #132]	; (80113f0 <tcp_pcb_purge+0x94>)
 801136c:	f640 0251 	movw	r2, #2129	; 0x851
 8011370:	4920      	ldr	r1, [pc, #128]	; (80113f4 <tcp_pcb_purge+0x98>)
 8011372:	4821      	ldr	r0, [pc, #132]	; (80113f8 <tcp_pcb_purge+0x9c>)
 8011374:	f007 fbda 	bl	8018b2c <iprintf>
 8011378:	e037      	b.n	80113ea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	7d1b      	ldrb	r3, [r3, #20]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d033      	beq.n	80113ea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011386:	2b0a      	cmp	r3, #10
 8011388:	d02f      	beq.n	80113ea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801138e:	2b01      	cmp	r3, #1
 8011390:	d02b      	beq.n	80113ea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011396:	2b00      	cmp	r3, #0
 8011398:	d007      	beq.n	80113aa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fe f8c0 	bl	800f524 <pbuf_free>
      pcb->refused_data = NULL;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2200      	movs	r2, #0
 80113a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d002      	beq.n	80113b8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f000 f986 	bl	80116c4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113be:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7ff fce1 	bl	8010d8c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7ff fcdc 	bl	8010d8c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2200      	movs	r2, #0
 80113d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2200      	movs	r2, #0
 80113e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80113ea:	3708      	adds	r7, #8
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}
 80113f0:	0801a8d8 	.word	0x0801a8d8
 80113f4:	0801af24 	.word	0x0801af24
 80113f8:	0801a91c 	.word	0x0801a91c

080113fc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d106      	bne.n	801141a <tcp_pcb_remove+0x1e>
 801140c:	4b3e      	ldr	r3, [pc, #248]	; (8011508 <tcp_pcb_remove+0x10c>)
 801140e:	f640 0283 	movw	r2, #2179	; 0x883
 8011412:	493e      	ldr	r1, [pc, #248]	; (801150c <tcp_pcb_remove+0x110>)
 8011414:	483e      	ldr	r0, [pc, #248]	; (8011510 <tcp_pcb_remove+0x114>)
 8011416:	f007 fb89 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d106      	bne.n	801142e <tcp_pcb_remove+0x32>
 8011420:	4b39      	ldr	r3, [pc, #228]	; (8011508 <tcp_pcb_remove+0x10c>)
 8011422:	f640 0284 	movw	r2, #2180	; 0x884
 8011426:	493b      	ldr	r1, [pc, #236]	; (8011514 <tcp_pcb_remove+0x118>)
 8011428:	4839      	ldr	r0, [pc, #228]	; (8011510 <tcp_pcb_remove+0x114>)
 801142a:	f007 fb7f 	bl	8018b2c <iprintf>

  TCP_RMV(pcblist, pcb);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	683a      	ldr	r2, [r7, #0]
 8011434:	429a      	cmp	r2, r3
 8011436:	d105      	bne.n	8011444 <tcp_pcb_remove+0x48>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	68da      	ldr	r2, [r3, #12]
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	601a      	str	r2, [r3, #0]
 8011442:	e013      	b.n	801146c <tcp_pcb_remove+0x70>
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	60fb      	str	r3, [r7, #12]
 801144a:	e00c      	b.n	8011466 <tcp_pcb_remove+0x6a>
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	683a      	ldr	r2, [r7, #0]
 8011452:	429a      	cmp	r2, r3
 8011454:	d104      	bne.n	8011460 <tcp_pcb_remove+0x64>
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	68da      	ldr	r2, [r3, #12]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	60da      	str	r2, [r3, #12]
 801145e:	e005      	b.n	801146c <tcp_pcb_remove+0x70>
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	60fb      	str	r3, [r7, #12]
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d1ef      	bne.n	801144c <tcp_pcb_remove+0x50>
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	2200      	movs	r2, #0
 8011470:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011472:	6838      	ldr	r0, [r7, #0]
 8011474:	f7ff ff72 	bl	801135c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	7d1b      	ldrb	r3, [r3, #20]
 801147c:	2b0a      	cmp	r3, #10
 801147e:	d013      	beq.n	80114a8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011484:	2b01      	cmp	r3, #1
 8011486:	d00f      	beq.n	80114a8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	8b5b      	ldrh	r3, [r3, #26]
 801148c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011490:	2b00      	cmp	r3, #0
 8011492:	d009      	beq.n	80114a8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	8b5b      	ldrh	r3, [r3, #26]
 8011498:	f043 0302 	orr.w	r3, r3, #2
 801149c:	b29a      	uxth	r2, r3
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80114a2:	6838      	ldr	r0, [r7, #0]
 80114a4:	f003 fbc2 	bl	8014c2c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	7d1b      	ldrb	r3, [r3, #20]
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d020      	beq.n	80114f2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d006      	beq.n	80114c6 <tcp_pcb_remove+0xca>
 80114b8:	4b13      	ldr	r3, [pc, #76]	; (8011508 <tcp_pcb_remove+0x10c>)
 80114ba:	f640 0293 	movw	r2, #2195	; 0x893
 80114be:	4916      	ldr	r1, [pc, #88]	; (8011518 <tcp_pcb_remove+0x11c>)
 80114c0:	4813      	ldr	r0, [pc, #76]	; (8011510 <tcp_pcb_remove+0x114>)
 80114c2:	f007 fb33 	bl	8018b2c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d006      	beq.n	80114dc <tcp_pcb_remove+0xe0>
 80114ce:	4b0e      	ldr	r3, [pc, #56]	; (8011508 <tcp_pcb_remove+0x10c>)
 80114d0:	f640 0294 	movw	r2, #2196	; 0x894
 80114d4:	4911      	ldr	r1, [pc, #68]	; (801151c <tcp_pcb_remove+0x120>)
 80114d6:	480e      	ldr	r0, [pc, #56]	; (8011510 <tcp_pcb_remove+0x114>)
 80114d8:	f007 fb28 	bl	8018b2c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d006      	beq.n	80114f2 <tcp_pcb_remove+0xf6>
 80114e4:	4b08      	ldr	r3, [pc, #32]	; (8011508 <tcp_pcb_remove+0x10c>)
 80114e6:	f640 0296 	movw	r2, #2198	; 0x896
 80114ea:	490d      	ldr	r1, [pc, #52]	; (8011520 <tcp_pcb_remove+0x124>)
 80114ec:	4808      	ldr	r0, [pc, #32]	; (8011510 <tcp_pcb_remove+0x114>)
 80114ee:	f007 fb1d 	bl	8018b2c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	2200      	movs	r2, #0
 80114f6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	2200      	movs	r2, #0
 80114fc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80114fe:	bf00      	nop
 8011500:	3710      	adds	r7, #16
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
 8011506:	bf00      	nop
 8011508:	0801a8d8 	.word	0x0801a8d8
 801150c:	0801af40 	.word	0x0801af40
 8011510:	0801a91c 	.word	0x0801a91c
 8011514:	0801af5c 	.word	0x0801af5c
 8011518:	0801af7c 	.word	0x0801af7c
 801151c:	0801af94 	.word	0x0801af94
 8011520:	0801afb0 	.word	0x0801afb0

08011524 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d106      	bne.n	8011540 <tcp_next_iss+0x1c>
 8011532:	4b0a      	ldr	r3, [pc, #40]	; (801155c <tcp_next_iss+0x38>)
 8011534:	f640 02af 	movw	r2, #2223	; 0x8af
 8011538:	4909      	ldr	r1, [pc, #36]	; (8011560 <tcp_next_iss+0x3c>)
 801153a:	480a      	ldr	r0, [pc, #40]	; (8011564 <tcp_next_iss+0x40>)
 801153c:	f007 faf6 	bl	8018b2c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011540:	4b09      	ldr	r3, [pc, #36]	; (8011568 <tcp_next_iss+0x44>)
 8011542:	681a      	ldr	r2, [r3, #0]
 8011544:	4b09      	ldr	r3, [pc, #36]	; (801156c <tcp_next_iss+0x48>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4413      	add	r3, r2
 801154a:	4a07      	ldr	r2, [pc, #28]	; (8011568 <tcp_next_iss+0x44>)
 801154c:	6013      	str	r3, [r2, #0]
  return iss;
 801154e:	4b06      	ldr	r3, [pc, #24]	; (8011568 <tcp_next_iss+0x44>)
 8011550:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011552:	4618      	mov	r0, r3
 8011554:	3708      	adds	r7, #8
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	0801a8d8 	.word	0x0801a8d8
 8011560:	0801afc8 	.word	0x0801afc8
 8011564:	0801a91c 	.word	0x0801a91c
 8011568:	2400003c 	.word	0x2400003c
 801156c:	24007804 	.word	0x24007804

08011570 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b086      	sub	sp, #24
 8011574:	af00      	add	r7, sp, #0
 8011576:	4603      	mov	r3, r0
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	607a      	str	r2, [r7, #4]
 801157c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d106      	bne.n	8011592 <tcp_eff_send_mss_netif+0x22>
 8011584:	4b14      	ldr	r3, [pc, #80]	; (80115d8 <tcp_eff_send_mss_netif+0x68>)
 8011586:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801158a:	4914      	ldr	r1, [pc, #80]	; (80115dc <tcp_eff_send_mss_netif+0x6c>)
 801158c:	4814      	ldr	r0, [pc, #80]	; (80115e0 <tcp_eff_send_mss_netif+0x70>)
 801158e:	f007 facd 	bl	8018b2c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d101      	bne.n	801159c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011598:	89fb      	ldrh	r3, [r7, #14]
 801159a:	e019      	b.n	80115d0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80115a0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80115a2:	8afb      	ldrh	r3, [r7, #22]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d012      	beq.n	80115ce <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80115a8:	2328      	movs	r3, #40	; 0x28
 80115aa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80115ac:	8afa      	ldrh	r2, [r7, #22]
 80115ae:	8abb      	ldrh	r3, [r7, #20]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d904      	bls.n	80115be <tcp_eff_send_mss_netif+0x4e>
 80115b4:	8afa      	ldrh	r2, [r7, #22]
 80115b6:	8abb      	ldrh	r3, [r7, #20]
 80115b8:	1ad3      	subs	r3, r2, r3
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	e000      	b.n	80115c0 <tcp_eff_send_mss_netif+0x50>
 80115be:	2300      	movs	r3, #0
 80115c0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80115c2:	8a7a      	ldrh	r2, [r7, #18]
 80115c4:	89fb      	ldrh	r3, [r7, #14]
 80115c6:	4293      	cmp	r3, r2
 80115c8:	bf28      	it	cs
 80115ca:	4613      	movcs	r3, r2
 80115cc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80115ce:	89fb      	ldrh	r3, [r7, #14]
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3718      	adds	r7, #24
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}
 80115d8:	0801a8d8 	.word	0x0801a8d8
 80115dc:	0801afe4 	.word	0x0801afe4
 80115e0:	0801a91c 	.word	0x0801a91c

080115e4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d119      	bne.n	801162c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80115f8:	4b10      	ldr	r3, [pc, #64]	; (801163c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80115fa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80115fe:	4910      	ldr	r1, [pc, #64]	; (8011640 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011600:	4810      	ldr	r0, [pc, #64]	; (8011644 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011602:	f007 fa93 	bl	8018b2c <iprintf>

  while (pcb != NULL) {
 8011606:	e011      	b.n	801162c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681a      	ldr	r2, [r3, #0]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	429a      	cmp	r2, r3
 8011612:	d108      	bne.n	8011626 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	68db      	ldr	r3, [r3, #12]
 8011618:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801161a:	68f8      	ldr	r0, [r7, #12]
 801161c:	f7fe fd26 	bl	801006c <tcp_abort>
      pcb = next;
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	60fb      	str	r3, [r7, #12]
 8011624:	e002      	b.n	801162c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d1ea      	bne.n	8011608 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011632:	bf00      	nop
 8011634:	bf00      	nop
 8011636:	3710      	adds	r7, #16
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	0801a8d8 	.word	0x0801a8d8
 8011640:	0801b00c 	.word	0x0801b00c
 8011644:	0801a91c 	.word	0x0801a91c

08011648 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b084      	sub	sp, #16
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d02a      	beq.n	80116ae <tcp_netif_ip_addr_changed+0x66>
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d026      	beq.n	80116ae <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011660:	4b15      	ldr	r3, [pc, #84]	; (80116b8 <tcp_netif_ip_addr_changed+0x70>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	4619      	mov	r1, r3
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f7ff ffbc 	bl	80115e4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801166c:	4b13      	ldr	r3, [pc, #76]	; (80116bc <tcp_netif_ip_addr_changed+0x74>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4619      	mov	r1, r3
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f7ff ffb6 	bl	80115e4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d017      	beq.n	80116ae <tcp_netif_ip_addr_changed+0x66>
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d013      	beq.n	80116ae <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011686:	4b0e      	ldr	r3, [pc, #56]	; (80116c0 <tcp_netif_ip_addr_changed+0x78>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	60fb      	str	r3, [r7, #12]
 801168c:	e00c      	b.n	80116a8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	429a      	cmp	r2, r3
 8011698:	d103      	bne.n	80116a2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	681a      	ldr	r2, [r3, #0]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	60fb      	str	r3, [r7, #12]
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d1ef      	bne.n	801168e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80116ae:	bf00      	nop
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	24007800 	.word	0x24007800
 80116bc:	2400780c 	.word	0x2400780c
 80116c0:	24007808 	.word	0x24007808

080116c4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b082      	sub	sp, #8
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d007      	beq.n	80116e4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116d8:	4618      	mov	r0, r3
 80116da:	f7ff fb57 	bl	8010d8c <tcp_segs_free>
    pcb->ooseq = NULL;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2200      	movs	r2, #0
 80116e2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80116e4:	bf00      	nop
 80116e6:	3708      	adds	r7, #8
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}

080116ec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80116ec:	b590      	push	{r4, r7, lr}
 80116ee:	b08d      	sub	sp, #52	; 0x34
 80116f0:	af04      	add	r7, sp, #16
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d105      	bne.n	8011708 <tcp_input+0x1c>
 80116fc:	4b9b      	ldr	r3, [pc, #620]	; (801196c <tcp_input+0x280>)
 80116fe:	2283      	movs	r2, #131	; 0x83
 8011700:	499b      	ldr	r1, [pc, #620]	; (8011970 <tcp_input+0x284>)
 8011702:	489c      	ldr	r0, [pc, #624]	; (8011974 <tcp_input+0x288>)
 8011704:	f007 fa12 	bl	8018b2c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	4a9a      	ldr	r2, [pc, #616]	; (8011978 <tcp_input+0x28c>)
 801170e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	895b      	ldrh	r3, [r3, #10]
 8011714:	2b13      	cmp	r3, #19
 8011716:	f240 83c4 	bls.w	8011ea2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801171a:	4b98      	ldr	r3, [pc, #608]	; (801197c <tcp_input+0x290>)
 801171c:	695b      	ldr	r3, [r3, #20]
 801171e:	4a97      	ldr	r2, [pc, #604]	; (801197c <tcp_input+0x290>)
 8011720:	6812      	ldr	r2, [r2, #0]
 8011722:	4611      	mov	r1, r2
 8011724:	4618      	mov	r0, r3
 8011726:	f006 f8c1 	bl	80178ac <ip4_addr_isbroadcast_u32>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	f040 83ba 	bne.w	8011ea6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011732:	4b92      	ldr	r3, [pc, #584]	; (801197c <tcp_input+0x290>)
 8011734:	695b      	ldr	r3, [r3, #20]
 8011736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801173a:	2be0      	cmp	r3, #224	; 0xe0
 801173c:	f000 83b3 	beq.w	8011ea6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011740:	4b8d      	ldr	r3, [pc, #564]	; (8011978 <tcp_input+0x28c>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	899b      	ldrh	r3, [r3, #12]
 8011746:	b29b      	uxth	r3, r3
 8011748:	4618      	mov	r0, r3
 801174a:	f7fc fa41 	bl	800dbd0 <lwip_htons>
 801174e:	4603      	mov	r3, r0
 8011750:	0b1b      	lsrs	r3, r3, #12
 8011752:	b29b      	uxth	r3, r3
 8011754:	b2db      	uxtb	r3, r3
 8011756:	009b      	lsls	r3, r3, #2
 8011758:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801175a:	7cbb      	ldrb	r3, [r7, #18]
 801175c:	2b13      	cmp	r3, #19
 801175e:	f240 83a4 	bls.w	8011eaa <tcp_input+0x7be>
 8011762:	7cbb      	ldrb	r3, [r7, #18]
 8011764:	b29a      	uxth	r2, r3
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	891b      	ldrh	r3, [r3, #8]
 801176a:	429a      	cmp	r2, r3
 801176c:	f200 839d 	bhi.w	8011eaa <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011770:	7cbb      	ldrb	r3, [r7, #18]
 8011772:	b29b      	uxth	r3, r3
 8011774:	3b14      	subs	r3, #20
 8011776:	b29a      	uxth	r2, r3
 8011778:	4b81      	ldr	r3, [pc, #516]	; (8011980 <tcp_input+0x294>)
 801177a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801177c:	4b81      	ldr	r3, [pc, #516]	; (8011984 <tcp_input+0x298>)
 801177e:	2200      	movs	r2, #0
 8011780:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	895a      	ldrh	r2, [r3, #10]
 8011786:	7cbb      	ldrb	r3, [r7, #18]
 8011788:	b29b      	uxth	r3, r3
 801178a:	429a      	cmp	r2, r3
 801178c:	d309      	bcc.n	80117a2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801178e:	4b7c      	ldr	r3, [pc, #496]	; (8011980 <tcp_input+0x294>)
 8011790:	881a      	ldrh	r2, [r3, #0]
 8011792:	4b7d      	ldr	r3, [pc, #500]	; (8011988 <tcp_input+0x29c>)
 8011794:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011796:	7cbb      	ldrb	r3, [r7, #18]
 8011798:	4619      	mov	r1, r3
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f7fd fe3c 	bl	800f418 <pbuf_remove_header>
 80117a0:	e04e      	b.n	8011840 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d105      	bne.n	80117b6 <tcp_input+0xca>
 80117aa:	4b70      	ldr	r3, [pc, #448]	; (801196c <tcp_input+0x280>)
 80117ac:	22c2      	movs	r2, #194	; 0xc2
 80117ae:	4977      	ldr	r1, [pc, #476]	; (801198c <tcp_input+0x2a0>)
 80117b0:	4870      	ldr	r0, [pc, #448]	; (8011974 <tcp_input+0x288>)
 80117b2:	f007 f9bb 	bl	8018b2c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80117b6:	2114      	movs	r1, #20
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f7fd fe2d 	bl	800f418 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	895a      	ldrh	r2, [r3, #10]
 80117c2:	4b71      	ldr	r3, [pc, #452]	; (8011988 <tcp_input+0x29c>)
 80117c4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80117c6:	4b6e      	ldr	r3, [pc, #440]	; (8011980 <tcp_input+0x294>)
 80117c8:	881a      	ldrh	r2, [r3, #0]
 80117ca:	4b6f      	ldr	r3, [pc, #444]	; (8011988 <tcp_input+0x29c>)
 80117cc:	881b      	ldrh	r3, [r3, #0]
 80117ce:	1ad3      	subs	r3, r2, r3
 80117d0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80117d2:	4b6d      	ldr	r3, [pc, #436]	; (8011988 <tcp_input+0x29c>)
 80117d4:	881b      	ldrh	r3, [r3, #0]
 80117d6:	4619      	mov	r1, r3
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7fd fe1d 	bl	800f418 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	895b      	ldrh	r3, [r3, #10]
 80117e4:	8a3a      	ldrh	r2, [r7, #16]
 80117e6:	429a      	cmp	r2, r3
 80117e8:	f200 8361 	bhi.w	8011eae <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	685b      	ldr	r3, [r3, #4]
 80117f2:	4a64      	ldr	r2, [pc, #400]	; (8011984 <tcp_input+0x298>)
 80117f4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	8a3a      	ldrh	r2, [r7, #16]
 80117fc:	4611      	mov	r1, r2
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fd fe0a 	bl	800f418 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	891a      	ldrh	r2, [r3, #8]
 8011808:	8a3b      	ldrh	r3, [r7, #16]
 801180a:	1ad3      	subs	r3, r2, r3
 801180c:	b29a      	uxth	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	895b      	ldrh	r3, [r3, #10]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d005      	beq.n	8011826 <tcp_input+0x13a>
 801181a:	4b54      	ldr	r3, [pc, #336]	; (801196c <tcp_input+0x280>)
 801181c:	22df      	movs	r2, #223	; 0xdf
 801181e:	495c      	ldr	r1, [pc, #368]	; (8011990 <tcp_input+0x2a4>)
 8011820:	4854      	ldr	r0, [pc, #336]	; (8011974 <tcp_input+0x288>)
 8011822:	f007 f983 	bl	8018b2c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	891a      	ldrh	r2, [r3, #8]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	891b      	ldrh	r3, [r3, #8]
 8011830:	429a      	cmp	r2, r3
 8011832:	d005      	beq.n	8011840 <tcp_input+0x154>
 8011834:	4b4d      	ldr	r3, [pc, #308]	; (801196c <tcp_input+0x280>)
 8011836:	22e0      	movs	r2, #224	; 0xe0
 8011838:	4956      	ldr	r1, [pc, #344]	; (8011994 <tcp_input+0x2a8>)
 801183a:	484e      	ldr	r0, [pc, #312]	; (8011974 <tcp_input+0x288>)
 801183c:	f007 f976 	bl	8018b2c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011840:	4b4d      	ldr	r3, [pc, #308]	; (8011978 <tcp_input+0x28c>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	881b      	ldrh	r3, [r3, #0]
 8011846:	b29b      	uxth	r3, r3
 8011848:	4a4b      	ldr	r2, [pc, #300]	; (8011978 <tcp_input+0x28c>)
 801184a:	6814      	ldr	r4, [r2, #0]
 801184c:	4618      	mov	r0, r3
 801184e:	f7fc f9bf 	bl	800dbd0 <lwip_htons>
 8011852:	4603      	mov	r3, r0
 8011854:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011856:	4b48      	ldr	r3, [pc, #288]	; (8011978 <tcp_input+0x28c>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	885b      	ldrh	r3, [r3, #2]
 801185c:	b29b      	uxth	r3, r3
 801185e:	4a46      	ldr	r2, [pc, #280]	; (8011978 <tcp_input+0x28c>)
 8011860:	6814      	ldr	r4, [r2, #0]
 8011862:	4618      	mov	r0, r3
 8011864:	f7fc f9b4 	bl	800dbd0 <lwip_htons>
 8011868:	4603      	mov	r3, r0
 801186a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801186c:	4b42      	ldr	r3, [pc, #264]	; (8011978 <tcp_input+0x28c>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	4a41      	ldr	r2, [pc, #260]	; (8011978 <tcp_input+0x28c>)
 8011874:	6814      	ldr	r4, [r2, #0]
 8011876:	4618      	mov	r0, r3
 8011878:	f7fc f9bf 	bl	800dbfa <lwip_htonl>
 801187c:	4603      	mov	r3, r0
 801187e:	6063      	str	r3, [r4, #4]
 8011880:	6863      	ldr	r3, [r4, #4]
 8011882:	4a45      	ldr	r2, [pc, #276]	; (8011998 <tcp_input+0x2ac>)
 8011884:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011886:	4b3c      	ldr	r3, [pc, #240]	; (8011978 <tcp_input+0x28c>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	689b      	ldr	r3, [r3, #8]
 801188c:	4a3a      	ldr	r2, [pc, #232]	; (8011978 <tcp_input+0x28c>)
 801188e:	6814      	ldr	r4, [r2, #0]
 8011890:	4618      	mov	r0, r3
 8011892:	f7fc f9b2 	bl	800dbfa <lwip_htonl>
 8011896:	4603      	mov	r3, r0
 8011898:	60a3      	str	r3, [r4, #8]
 801189a:	68a3      	ldr	r3, [r4, #8]
 801189c:	4a3f      	ldr	r2, [pc, #252]	; (801199c <tcp_input+0x2b0>)
 801189e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80118a0:	4b35      	ldr	r3, [pc, #212]	; (8011978 <tcp_input+0x28c>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	89db      	ldrh	r3, [r3, #14]
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	4a33      	ldr	r2, [pc, #204]	; (8011978 <tcp_input+0x28c>)
 80118aa:	6814      	ldr	r4, [r2, #0]
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7fc f98f 	bl	800dbd0 <lwip_htons>
 80118b2:	4603      	mov	r3, r0
 80118b4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80118b6:	4b30      	ldr	r3, [pc, #192]	; (8011978 <tcp_input+0x28c>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	899b      	ldrh	r3, [r3, #12]
 80118bc:	b29b      	uxth	r3, r3
 80118be:	4618      	mov	r0, r3
 80118c0:	f7fc f986 	bl	800dbd0 <lwip_htons>
 80118c4:	4603      	mov	r3, r0
 80118c6:	b2db      	uxtb	r3, r3
 80118c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80118cc:	b2da      	uxtb	r2, r3
 80118ce:	4b34      	ldr	r3, [pc, #208]	; (80119a0 <tcp_input+0x2b4>)
 80118d0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	891a      	ldrh	r2, [r3, #8]
 80118d6:	4b33      	ldr	r3, [pc, #204]	; (80119a4 <tcp_input+0x2b8>)
 80118d8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80118da:	4b31      	ldr	r3, [pc, #196]	; (80119a0 <tcp_input+0x2b4>)
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	f003 0303 	and.w	r3, r3, #3
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d00c      	beq.n	8011900 <tcp_input+0x214>
    tcplen++;
 80118e6:	4b2f      	ldr	r3, [pc, #188]	; (80119a4 <tcp_input+0x2b8>)
 80118e8:	881b      	ldrh	r3, [r3, #0]
 80118ea:	3301      	adds	r3, #1
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	4b2d      	ldr	r3, [pc, #180]	; (80119a4 <tcp_input+0x2b8>)
 80118f0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	891a      	ldrh	r2, [r3, #8]
 80118f6:	4b2b      	ldr	r3, [pc, #172]	; (80119a4 <tcp_input+0x2b8>)
 80118f8:	881b      	ldrh	r3, [r3, #0]
 80118fa:	429a      	cmp	r2, r3
 80118fc:	f200 82d9 	bhi.w	8011eb2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011900:	2300      	movs	r3, #0
 8011902:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011904:	4b28      	ldr	r3, [pc, #160]	; (80119a8 <tcp_input+0x2bc>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	61fb      	str	r3, [r7, #28]
 801190a:	e09d      	b.n	8011a48 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801190c:	69fb      	ldr	r3, [r7, #28]
 801190e:	7d1b      	ldrb	r3, [r3, #20]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d105      	bne.n	8011920 <tcp_input+0x234>
 8011914:	4b15      	ldr	r3, [pc, #84]	; (801196c <tcp_input+0x280>)
 8011916:	22fb      	movs	r2, #251	; 0xfb
 8011918:	4924      	ldr	r1, [pc, #144]	; (80119ac <tcp_input+0x2c0>)
 801191a:	4816      	ldr	r0, [pc, #88]	; (8011974 <tcp_input+0x288>)
 801191c:	f007 f906 	bl	8018b2c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011920:	69fb      	ldr	r3, [r7, #28]
 8011922:	7d1b      	ldrb	r3, [r3, #20]
 8011924:	2b0a      	cmp	r3, #10
 8011926:	d105      	bne.n	8011934 <tcp_input+0x248>
 8011928:	4b10      	ldr	r3, [pc, #64]	; (801196c <tcp_input+0x280>)
 801192a:	22fc      	movs	r2, #252	; 0xfc
 801192c:	4920      	ldr	r1, [pc, #128]	; (80119b0 <tcp_input+0x2c4>)
 801192e:	4811      	ldr	r0, [pc, #68]	; (8011974 <tcp_input+0x288>)
 8011930:	f007 f8fc 	bl	8018b2c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	7d1b      	ldrb	r3, [r3, #20]
 8011938:	2b01      	cmp	r3, #1
 801193a:	d105      	bne.n	8011948 <tcp_input+0x25c>
 801193c:	4b0b      	ldr	r3, [pc, #44]	; (801196c <tcp_input+0x280>)
 801193e:	22fd      	movs	r2, #253	; 0xfd
 8011940:	491c      	ldr	r1, [pc, #112]	; (80119b4 <tcp_input+0x2c8>)
 8011942:	480c      	ldr	r0, [pc, #48]	; (8011974 <tcp_input+0x288>)
 8011944:	f007 f8f2 	bl	8018b2c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011948:	69fb      	ldr	r3, [r7, #28]
 801194a:	7a1b      	ldrb	r3, [r3, #8]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d033      	beq.n	80119b8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011950:	69fb      	ldr	r3, [r7, #28]
 8011952:	7a1a      	ldrb	r2, [r3, #8]
 8011954:	4b09      	ldr	r3, [pc, #36]	; (801197c <tcp_input+0x290>)
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801195c:	3301      	adds	r3, #1
 801195e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011960:	429a      	cmp	r2, r3
 8011962:	d029      	beq.n	80119b8 <tcp_input+0x2cc>
      prev = pcb;
 8011964:	69fb      	ldr	r3, [r7, #28]
 8011966:	61bb      	str	r3, [r7, #24]
      continue;
 8011968:	e06b      	b.n	8011a42 <tcp_input+0x356>
 801196a:	bf00      	nop
 801196c:	0801b040 	.word	0x0801b040
 8011970:	0801b074 	.word	0x0801b074
 8011974:	0801b08c 	.word	0x0801b08c
 8011978:	240040dc 	.word	0x240040dc
 801197c:	24004740 	.word	0x24004740
 8011980:	240040e0 	.word	0x240040e0
 8011984:	240040e4 	.word	0x240040e4
 8011988:	240040e2 	.word	0x240040e2
 801198c:	0801b0b4 	.word	0x0801b0b4
 8011990:	0801b0c4 	.word	0x0801b0c4
 8011994:	0801b0d0 	.word	0x0801b0d0
 8011998:	240040ec 	.word	0x240040ec
 801199c:	240040f0 	.word	0x240040f0
 80119a0:	240040f8 	.word	0x240040f8
 80119a4:	240040f6 	.word	0x240040f6
 80119a8:	24007800 	.word	0x24007800
 80119ac:	0801b0f0 	.word	0x0801b0f0
 80119b0:	0801b118 	.word	0x0801b118
 80119b4:	0801b144 	.word	0x0801b144
    }

    if (pcb->remote_port == tcphdr->src &&
 80119b8:	69fb      	ldr	r3, [r7, #28]
 80119ba:	8b1a      	ldrh	r2, [r3, #24]
 80119bc:	4b94      	ldr	r3, [pc, #592]	; (8011c10 <tcp_input+0x524>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	881b      	ldrh	r3, [r3, #0]
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d13a      	bne.n	8011a3e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80119c8:	69fb      	ldr	r3, [r7, #28]
 80119ca:	8ada      	ldrh	r2, [r3, #22]
 80119cc:	4b90      	ldr	r3, [pc, #576]	; (8011c10 <tcp_input+0x524>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	885b      	ldrh	r3, [r3, #2]
 80119d2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d132      	bne.n	8011a3e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	685a      	ldr	r2, [r3, #4]
 80119dc:	4b8d      	ldr	r3, [pc, #564]	; (8011c14 <tcp_input+0x528>)
 80119de:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d12c      	bne.n	8011a3e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80119e4:	69fb      	ldr	r3, [r7, #28]
 80119e6:	681a      	ldr	r2, [r3, #0]
 80119e8:	4b8a      	ldr	r3, [pc, #552]	; (8011c14 <tcp_input+0x528>)
 80119ea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d126      	bne.n	8011a3e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80119f0:	69fb      	ldr	r3, [r7, #28]
 80119f2:	68db      	ldr	r3, [r3, #12]
 80119f4:	69fa      	ldr	r2, [r7, #28]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d106      	bne.n	8011a08 <tcp_input+0x31c>
 80119fa:	4b87      	ldr	r3, [pc, #540]	; (8011c18 <tcp_input+0x52c>)
 80119fc:	f240 120d 	movw	r2, #269	; 0x10d
 8011a00:	4986      	ldr	r1, [pc, #536]	; (8011c1c <tcp_input+0x530>)
 8011a02:	4887      	ldr	r0, [pc, #540]	; (8011c20 <tcp_input+0x534>)
 8011a04:	f007 f892 	bl	8018b2c <iprintf>
      if (prev != NULL) {
 8011a08:	69bb      	ldr	r3, [r7, #24]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d00a      	beq.n	8011a24 <tcp_input+0x338>
        prev->next = pcb->next;
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	68da      	ldr	r2, [r3, #12]
 8011a12:	69bb      	ldr	r3, [r7, #24]
 8011a14:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011a16:	4b83      	ldr	r3, [pc, #524]	; (8011c24 <tcp_input+0x538>)
 8011a18:	681a      	ldr	r2, [r3, #0]
 8011a1a:	69fb      	ldr	r3, [r7, #28]
 8011a1c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011a1e:	4a81      	ldr	r2, [pc, #516]	; (8011c24 <tcp_input+0x538>)
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011a24:	69fb      	ldr	r3, [r7, #28]
 8011a26:	68db      	ldr	r3, [r3, #12]
 8011a28:	69fa      	ldr	r2, [r7, #28]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d111      	bne.n	8011a52 <tcp_input+0x366>
 8011a2e:	4b7a      	ldr	r3, [pc, #488]	; (8011c18 <tcp_input+0x52c>)
 8011a30:	f240 1215 	movw	r2, #277	; 0x115
 8011a34:	497c      	ldr	r1, [pc, #496]	; (8011c28 <tcp_input+0x53c>)
 8011a36:	487a      	ldr	r0, [pc, #488]	; (8011c20 <tcp_input+0x534>)
 8011a38:	f007 f878 	bl	8018b2c <iprintf>
      break;
 8011a3c:	e009      	b.n	8011a52 <tcp_input+0x366>
    }
    prev = pcb;
 8011a3e:	69fb      	ldr	r3, [r7, #28]
 8011a40:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a42:	69fb      	ldr	r3, [r7, #28]
 8011a44:	68db      	ldr	r3, [r3, #12]
 8011a46:	61fb      	str	r3, [r7, #28]
 8011a48:	69fb      	ldr	r3, [r7, #28]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	f47f af5e 	bne.w	801190c <tcp_input+0x220>
 8011a50:	e000      	b.n	8011a54 <tcp_input+0x368>
      break;
 8011a52:	bf00      	nop
  }

  if (pcb == NULL) {
 8011a54:	69fb      	ldr	r3, [r7, #28]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	f040 8095 	bne.w	8011b86 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a5c:	4b73      	ldr	r3, [pc, #460]	; (8011c2c <tcp_input+0x540>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	61fb      	str	r3, [r7, #28]
 8011a62:	e03f      	b.n	8011ae4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	7d1b      	ldrb	r3, [r3, #20]
 8011a68:	2b0a      	cmp	r3, #10
 8011a6a:	d006      	beq.n	8011a7a <tcp_input+0x38e>
 8011a6c:	4b6a      	ldr	r3, [pc, #424]	; (8011c18 <tcp_input+0x52c>)
 8011a6e:	f240 121f 	movw	r2, #287	; 0x11f
 8011a72:	496f      	ldr	r1, [pc, #444]	; (8011c30 <tcp_input+0x544>)
 8011a74:	486a      	ldr	r0, [pc, #424]	; (8011c20 <tcp_input+0x534>)
 8011a76:	f007 f859 	bl	8018b2c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011a7a:	69fb      	ldr	r3, [r7, #28]
 8011a7c:	7a1b      	ldrb	r3, [r3, #8]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d009      	beq.n	8011a96 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011a82:	69fb      	ldr	r3, [r7, #28]
 8011a84:	7a1a      	ldrb	r2, [r3, #8]
 8011a86:	4b63      	ldr	r3, [pc, #396]	; (8011c14 <tcp_input+0x528>)
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011a8e:	3301      	adds	r3, #1
 8011a90:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d122      	bne.n	8011adc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011a96:	69fb      	ldr	r3, [r7, #28]
 8011a98:	8b1a      	ldrh	r2, [r3, #24]
 8011a9a:	4b5d      	ldr	r3, [pc, #372]	; (8011c10 <tcp_input+0x524>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	881b      	ldrh	r3, [r3, #0]
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d11b      	bne.n	8011ade <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	8ada      	ldrh	r2, [r3, #22]
 8011aaa:	4b59      	ldr	r3, [pc, #356]	; (8011c10 <tcp_input+0x524>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	885b      	ldrh	r3, [r3, #2]
 8011ab0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d113      	bne.n	8011ade <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	685a      	ldr	r2, [r3, #4]
 8011aba:	4b56      	ldr	r3, [pc, #344]	; (8011c14 <tcp_input+0x528>)
 8011abc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d10d      	bne.n	8011ade <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	4b53      	ldr	r3, [pc, #332]	; (8011c14 <tcp_input+0x528>)
 8011ac8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d107      	bne.n	8011ade <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011ace:	69f8      	ldr	r0, [r7, #28]
 8011ad0:	f000 fb54 	bl	801217c <tcp_timewait_input>
        }
        pbuf_free(p);
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f7fd fd25 	bl	800f524 <pbuf_free>
        return;
 8011ada:	e1f0      	b.n	8011ebe <tcp_input+0x7d2>
        continue;
 8011adc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ade:	69fb      	ldr	r3, [r7, #28]
 8011ae0:	68db      	ldr	r3, [r3, #12]
 8011ae2:	61fb      	str	r3, [r7, #28]
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d1bc      	bne.n	8011a64 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011aea:	2300      	movs	r3, #0
 8011aec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011aee:	4b51      	ldr	r3, [pc, #324]	; (8011c34 <tcp_input+0x548>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	617b      	str	r3, [r7, #20]
 8011af4:	e02a      	b.n	8011b4c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	7a1b      	ldrb	r3, [r3, #8]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d00c      	beq.n	8011b18 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	7a1a      	ldrb	r2, [r3, #8]
 8011b02:	4b44      	ldr	r3, [pc, #272]	; (8011c14 <tcp_input+0x528>)
 8011b04:	685b      	ldr	r3, [r3, #4]
 8011b06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d002      	beq.n	8011b18 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	61bb      	str	r3, [r7, #24]
        continue;
 8011b16:	e016      	b.n	8011b46 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	8ada      	ldrh	r2, [r3, #22]
 8011b1c:	4b3c      	ldr	r3, [pc, #240]	; (8011c10 <tcp_input+0x524>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	885b      	ldrh	r3, [r3, #2]
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d10c      	bne.n	8011b42 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	681a      	ldr	r2, [r3, #0]
 8011b2c:	4b39      	ldr	r3, [pc, #228]	; (8011c14 <tcp_input+0x528>)
 8011b2e:	695b      	ldr	r3, [r3, #20]
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d00f      	beq.n	8011b54 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d00d      	beq.n	8011b56 <tcp_input+0x46a>
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d009      	beq.n	8011b56 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011b42:	697b      	ldr	r3, [r7, #20]
 8011b44:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	68db      	ldr	r3, [r3, #12]
 8011b4a:	617b      	str	r3, [r7, #20]
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d1d1      	bne.n	8011af6 <tcp_input+0x40a>
 8011b52:	e000      	b.n	8011b56 <tcp_input+0x46a>
            break;
 8011b54:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d014      	beq.n	8011b86 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011b5c:	69bb      	ldr	r3, [r7, #24]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d00a      	beq.n	8011b78 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	68da      	ldr	r2, [r3, #12]
 8011b66:	69bb      	ldr	r3, [r7, #24]
 8011b68:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011b6a:	4b32      	ldr	r3, [pc, #200]	; (8011c34 <tcp_input+0x548>)
 8011b6c:	681a      	ldr	r2, [r3, #0]
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011b72:	4a30      	ldr	r2, [pc, #192]	; (8011c34 <tcp_input+0x548>)
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011b78:	6978      	ldr	r0, [r7, #20]
 8011b7a:	f000 fa01 	bl	8011f80 <tcp_listen_input>
      }
      pbuf_free(p);
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f7fd fcd0 	bl	800f524 <pbuf_free>
      return;
 8011b84:	e19b      	b.n	8011ebe <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011b86:	69fb      	ldr	r3, [r7, #28]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	f000 8160 	beq.w	8011e4e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011b8e:	4b2a      	ldr	r3, [pc, #168]	; (8011c38 <tcp_input+0x54c>)
 8011b90:	2200      	movs	r2, #0
 8011b92:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	891a      	ldrh	r2, [r3, #8]
 8011b98:	4b27      	ldr	r3, [pc, #156]	; (8011c38 <tcp_input+0x54c>)
 8011b9a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011b9c:	4a26      	ldr	r2, [pc, #152]	; (8011c38 <tcp_input+0x54c>)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011ba2:	4b1b      	ldr	r3, [pc, #108]	; (8011c10 <tcp_input+0x524>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	4a24      	ldr	r2, [pc, #144]	; (8011c38 <tcp_input+0x54c>)
 8011ba8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011baa:	4b24      	ldr	r3, [pc, #144]	; (8011c3c <tcp_input+0x550>)
 8011bac:	2200      	movs	r2, #0
 8011bae:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011bb0:	4b23      	ldr	r3, [pc, #140]	; (8011c40 <tcp_input+0x554>)
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011bb6:	4b23      	ldr	r3, [pc, #140]	; (8011c44 <tcp_input+0x558>)
 8011bb8:	2200      	movs	r2, #0
 8011bba:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011bbc:	4b22      	ldr	r3, [pc, #136]	; (8011c48 <tcp_input+0x55c>)
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	f003 0308 	and.w	r3, r3, #8
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d006      	beq.n	8011bd6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	7b5b      	ldrb	r3, [r3, #13]
 8011bcc:	f043 0301 	orr.w	r3, r3, #1
 8011bd0:	b2da      	uxtb	r2, r3
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011bd6:	69fb      	ldr	r3, [r7, #28]
 8011bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d038      	beq.n	8011c50 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011bde:	69f8      	ldr	r0, [r7, #28]
 8011be0:	f7ff f858 	bl	8010c94 <tcp_process_refused_data>
 8011be4:	4603      	mov	r3, r0
 8011be6:	f113 0f0d 	cmn.w	r3, #13
 8011bea:	d007      	beq.n	8011bfc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011bec:	69fb      	ldr	r3, [r7, #28]
 8011bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d02d      	beq.n	8011c50 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011bf4:	4b15      	ldr	r3, [pc, #84]	; (8011c4c <tcp_input+0x560>)
 8011bf6:	881b      	ldrh	r3, [r3, #0]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d029      	beq.n	8011c50 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011bfc:	69fb      	ldr	r3, [r7, #28]
 8011bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	f040 8104 	bne.w	8011e0e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011c06:	69f8      	ldr	r0, [r7, #28]
 8011c08:	f003 fe16 	bl	8015838 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011c0c:	e0ff      	b.n	8011e0e <tcp_input+0x722>
 8011c0e:	bf00      	nop
 8011c10:	240040dc 	.word	0x240040dc
 8011c14:	24004740 	.word	0x24004740
 8011c18:	0801b040 	.word	0x0801b040
 8011c1c:	0801b16c 	.word	0x0801b16c
 8011c20:	0801b08c 	.word	0x0801b08c
 8011c24:	24007800 	.word	0x24007800
 8011c28:	0801b198 	.word	0x0801b198
 8011c2c:	24007810 	.word	0x24007810
 8011c30:	0801b1c4 	.word	0x0801b1c4
 8011c34:	24007808 	.word	0x24007808
 8011c38:	240040cc 	.word	0x240040cc
 8011c3c:	240040fc 	.word	0x240040fc
 8011c40:	240040f9 	.word	0x240040f9
 8011c44:	240040f4 	.word	0x240040f4
 8011c48:	240040f8 	.word	0x240040f8
 8011c4c:	240040f6 	.word	0x240040f6
      }
    }
    tcp_input_pcb = pcb;
 8011c50:	4a9c      	ldr	r2, [pc, #624]	; (8011ec4 <tcp_input+0x7d8>)
 8011c52:	69fb      	ldr	r3, [r7, #28]
 8011c54:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011c56:	69f8      	ldr	r0, [r7, #28]
 8011c58:	f000 fb0a 	bl	8012270 <tcp_process>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011c60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011c64:	f113 0f0d 	cmn.w	r3, #13
 8011c68:	f000 80d3 	beq.w	8011e12 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8011c6c:	4b96      	ldr	r3, [pc, #600]	; (8011ec8 <tcp_input+0x7dc>)
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	f003 0308 	and.w	r3, r3, #8
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d015      	beq.n	8011ca4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011c78:	69fb      	ldr	r3, [r7, #28]
 8011c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d008      	beq.n	8011c94 <tcp_input+0x5a8>
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c88:	69fa      	ldr	r2, [r7, #28]
 8011c8a:	6912      	ldr	r2, [r2, #16]
 8011c8c:	f06f 010d 	mvn.w	r1, #13
 8011c90:	4610      	mov	r0, r2
 8011c92:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011c94:	69f9      	ldr	r1, [r7, #28]
 8011c96:	488d      	ldr	r0, [pc, #564]	; (8011ecc <tcp_input+0x7e0>)
 8011c98:	f7ff fbb0 	bl	80113fc <tcp_pcb_remove>
        tcp_free(pcb);
 8011c9c:	69f8      	ldr	r0, [r7, #28]
 8011c9e:	f7fd fefd 	bl	800fa9c <tcp_free>
 8011ca2:	e0c1      	b.n	8011e28 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011ca8:	4b89      	ldr	r3, [pc, #548]	; (8011ed0 <tcp_input+0x7e4>)
 8011caa:	881b      	ldrh	r3, [r3, #0]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d01d      	beq.n	8011cec <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011cb0:	4b87      	ldr	r3, [pc, #540]	; (8011ed0 <tcp_input+0x7e4>)
 8011cb2:	881b      	ldrh	r3, [r3, #0]
 8011cb4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d00a      	beq.n	8011cd6 <tcp_input+0x5ea>
 8011cc0:	69fb      	ldr	r3, [r7, #28]
 8011cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011cc6:	69fa      	ldr	r2, [r7, #28]
 8011cc8:	6910      	ldr	r0, [r2, #16]
 8011cca:	89fa      	ldrh	r2, [r7, #14]
 8011ccc:	69f9      	ldr	r1, [r7, #28]
 8011cce:	4798      	blx	r3
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	74fb      	strb	r3, [r7, #19]
 8011cd4:	e001      	b.n	8011cda <tcp_input+0x5ee>
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011cda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011cde:	f113 0f0d 	cmn.w	r3, #13
 8011ce2:	f000 8098 	beq.w	8011e16 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011ce6:	4b7a      	ldr	r3, [pc, #488]	; (8011ed0 <tcp_input+0x7e4>)
 8011ce8:	2200      	movs	r2, #0
 8011cea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011cec:	69f8      	ldr	r0, [r7, #28]
 8011cee:	f000 f907 	bl	8011f00 <tcp_input_delayed_close>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	f040 8090 	bne.w	8011e1a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011cfa:	4b76      	ldr	r3, [pc, #472]	; (8011ed4 <tcp_input+0x7e8>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d041      	beq.n	8011d86 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011d02:	69fb      	ldr	r3, [r7, #28]
 8011d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d006      	beq.n	8011d18 <tcp_input+0x62c>
 8011d0a:	4b73      	ldr	r3, [pc, #460]	; (8011ed8 <tcp_input+0x7ec>)
 8011d0c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011d10:	4972      	ldr	r1, [pc, #456]	; (8011edc <tcp_input+0x7f0>)
 8011d12:	4873      	ldr	r0, [pc, #460]	; (8011ee0 <tcp_input+0x7f4>)
 8011d14:	f006 ff0a 	bl	8018b2c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011d18:	69fb      	ldr	r3, [r7, #28]
 8011d1a:	8b5b      	ldrh	r3, [r3, #26]
 8011d1c:	f003 0310 	and.w	r3, r3, #16
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d008      	beq.n	8011d36 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011d24:	4b6b      	ldr	r3, [pc, #428]	; (8011ed4 <tcp_input+0x7e8>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f7fd fbfb 	bl	800f524 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011d2e:	69f8      	ldr	r0, [r7, #28]
 8011d30:	f7fe f99c 	bl	801006c <tcp_abort>
            goto aborted;
 8011d34:	e078      	b.n	8011e28 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011d36:	69fb      	ldr	r3, [r7, #28]
 8011d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d00c      	beq.n	8011d5a <tcp_input+0x66e>
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011d46:	69fb      	ldr	r3, [r7, #28]
 8011d48:	6918      	ldr	r0, [r3, #16]
 8011d4a:	4b62      	ldr	r3, [pc, #392]	; (8011ed4 <tcp_input+0x7e8>)
 8011d4c:	681a      	ldr	r2, [r3, #0]
 8011d4e:	2300      	movs	r3, #0
 8011d50:	69f9      	ldr	r1, [r7, #28]
 8011d52:	47a0      	blx	r4
 8011d54:	4603      	mov	r3, r0
 8011d56:	74fb      	strb	r3, [r7, #19]
 8011d58:	e008      	b.n	8011d6c <tcp_input+0x680>
 8011d5a:	4b5e      	ldr	r3, [pc, #376]	; (8011ed4 <tcp_input+0x7e8>)
 8011d5c:	681a      	ldr	r2, [r3, #0]
 8011d5e:	2300      	movs	r3, #0
 8011d60:	69f9      	ldr	r1, [r7, #28]
 8011d62:	2000      	movs	r0, #0
 8011d64:	f7ff f88a 	bl	8010e7c <tcp_recv_null>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011d6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011d70:	f113 0f0d 	cmn.w	r3, #13
 8011d74:	d053      	beq.n	8011e1e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011d76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d003      	beq.n	8011d86 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011d7e:	4b55      	ldr	r3, [pc, #340]	; (8011ed4 <tcp_input+0x7e8>)
 8011d80:	681a      	ldr	r2, [r3, #0]
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011d86:	4b50      	ldr	r3, [pc, #320]	; (8011ec8 <tcp_input+0x7dc>)
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	f003 0320 	and.w	r3, r3, #32
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d030      	beq.n	8011df4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8011d92:	69fb      	ldr	r3, [r7, #28]
 8011d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d009      	beq.n	8011dae <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011d9a:	69fb      	ldr	r3, [r7, #28]
 8011d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d9e:	7b5a      	ldrb	r2, [r3, #13]
 8011da0:	69fb      	ldr	r3, [r7, #28]
 8011da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011da4:	f042 0220 	orr.w	r2, r2, #32
 8011da8:	b2d2      	uxtb	r2, r2
 8011daa:	735a      	strb	r2, [r3, #13]
 8011dac:	e022      	b.n	8011df4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011dae:	69fb      	ldr	r3, [r7, #28]
 8011db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011db2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011db6:	d005      	beq.n	8011dc4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	69fb      	ldr	r3, [r7, #28]
 8011dc2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011dc4:	69fb      	ldr	r3, [r7, #28]
 8011dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d00b      	beq.n	8011de6 <tcp_input+0x6fa>
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	6918      	ldr	r0, [r3, #16]
 8011dd8:	2300      	movs	r3, #0
 8011dda:	2200      	movs	r2, #0
 8011ddc:	69f9      	ldr	r1, [r7, #28]
 8011dde:	47a0      	blx	r4
 8011de0:	4603      	mov	r3, r0
 8011de2:	74fb      	strb	r3, [r7, #19]
 8011de4:	e001      	b.n	8011dea <tcp_input+0x6fe>
 8011de6:	2300      	movs	r3, #0
 8011de8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011dea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011dee:	f113 0f0d 	cmn.w	r3, #13
 8011df2:	d016      	beq.n	8011e22 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011df4:	4b33      	ldr	r3, [pc, #204]	; (8011ec4 <tcp_input+0x7d8>)
 8011df6:	2200      	movs	r2, #0
 8011df8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011dfa:	69f8      	ldr	r0, [r7, #28]
 8011dfc:	f000 f880 	bl	8011f00 <tcp_input_delayed_close>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d10f      	bne.n	8011e26 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011e06:	69f8      	ldr	r0, [r7, #28]
 8011e08:	f002 ff10 	bl	8014c2c <tcp_output>
 8011e0c:	e00c      	b.n	8011e28 <tcp_input+0x73c>
        goto aborted;
 8011e0e:	bf00      	nop
 8011e10:	e00a      	b.n	8011e28 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011e12:	bf00      	nop
 8011e14:	e008      	b.n	8011e28 <tcp_input+0x73c>
              goto aborted;
 8011e16:	bf00      	nop
 8011e18:	e006      	b.n	8011e28 <tcp_input+0x73c>
          goto aborted;
 8011e1a:	bf00      	nop
 8011e1c:	e004      	b.n	8011e28 <tcp_input+0x73c>
            goto aborted;
 8011e1e:	bf00      	nop
 8011e20:	e002      	b.n	8011e28 <tcp_input+0x73c>
              goto aborted;
 8011e22:	bf00      	nop
 8011e24:	e000      	b.n	8011e28 <tcp_input+0x73c>
          goto aborted;
 8011e26:	bf00      	nop
    tcp_input_pcb = NULL;
 8011e28:	4b26      	ldr	r3, [pc, #152]	; (8011ec4 <tcp_input+0x7d8>)
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011e2e:	4b29      	ldr	r3, [pc, #164]	; (8011ed4 <tcp_input+0x7e8>)
 8011e30:	2200      	movs	r2, #0
 8011e32:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011e34:	4b2b      	ldr	r3, [pc, #172]	; (8011ee4 <tcp_input+0x7f8>)
 8011e36:	685b      	ldr	r3, [r3, #4]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d03f      	beq.n	8011ebc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8011e3c:	4b29      	ldr	r3, [pc, #164]	; (8011ee4 <tcp_input+0x7f8>)
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7fd fb6f 	bl	800f524 <pbuf_free>
      inseg.p = NULL;
 8011e46:	4b27      	ldr	r3, [pc, #156]	; (8011ee4 <tcp_input+0x7f8>)
 8011e48:	2200      	movs	r2, #0
 8011e4a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011e4c:	e036      	b.n	8011ebc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011e4e:	4b26      	ldr	r3, [pc, #152]	; (8011ee8 <tcp_input+0x7fc>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	899b      	ldrh	r3, [r3, #12]
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7fb feba 	bl	800dbd0 <lwip_htons>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	b2db      	uxtb	r3, r3
 8011e60:	f003 0304 	and.w	r3, r3, #4
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d118      	bne.n	8011e9a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e68:	4b20      	ldr	r3, [pc, #128]	; (8011eec <tcp_input+0x800>)
 8011e6a:	6819      	ldr	r1, [r3, #0]
 8011e6c:	4b20      	ldr	r3, [pc, #128]	; (8011ef0 <tcp_input+0x804>)
 8011e6e:	881b      	ldrh	r3, [r3, #0]
 8011e70:	461a      	mov	r2, r3
 8011e72:	4b20      	ldr	r3, [pc, #128]	; (8011ef4 <tcp_input+0x808>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e78:	4b1b      	ldr	r3, [pc, #108]	; (8011ee8 <tcp_input+0x7fc>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e7c:	885b      	ldrh	r3, [r3, #2]
 8011e7e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e80:	4a19      	ldr	r2, [pc, #100]	; (8011ee8 <tcp_input+0x7fc>)
 8011e82:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e84:	8812      	ldrh	r2, [r2, #0]
 8011e86:	b292      	uxth	r2, r2
 8011e88:	9202      	str	r2, [sp, #8]
 8011e8a:	9301      	str	r3, [sp, #4]
 8011e8c:	4b1a      	ldr	r3, [pc, #104]	; (8011ef8 <tcp_input+0x80c>)
 8011e8e:	9300      	str	r3, [sp, #0]
 8011e90:	4b1a      	ldr	r3, [pc, #104]	; (8011efc <tcp_input+0x810>)
 8011e92:	4602      	mov	r2, r0
 8011e94:	2000      	movs	r0, #0
 8011e96:	f003 fc7d 	bl	8015794 <tcp_rst>
    pbuf_free(p);
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f7fd fb42 	bl	800f524 <pbuf_free>
  return;
 8011ea0:	e00c      	b.n	8011ebc <tcp_input+0x7d0>
    goto dropped;
 8011ea2:	bf00      	nop
 8011ea4:	e006      	b.n	8011eb4 <tcp_input+0x7c8>
    goto dropped;
 8011ea6:	bf00      	nop
 8011ea8:	e004      	b.n	8011eb4 <tcp_input+0x7c8>
    goto dropped;
 8011eaa:	bf00      	nop
 8011eac:	e002      	b.n	8011eb4 <tcp_input+0x7c8>
      goto dropped;
 8011eae:	bf00      	nop
 8011eb0:	e000      	b.n	8011eb4 <tcp_input+0x7c8>
      goto dropped;
 8011eb2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f7fd fb35 	bl	800f524 <pbuf_free>
 8011eba:	e000      	b.n	8011ebe <tcp_input+0x7d2>
  return;
 8011ebc:	bf00      	nop
}
 8011ebe:	3724      	adds	r7, #36	; 0x24
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd90      	pop	{r4, r7, pc}
 8011ec4:	24007814 	.word	0x24007814
 8011ec8:	240040f9 	.word	0x240040f9
 8011ecc:	24007800 	.word	0x24007800
 8011ed0:	240040f4 	.word	0x240040f4
 8011ed4:	240040fc 	.word	0x240040fc
 8011ed8:	0801b040 	.word	0x0801b040
 8011edc:	0801b1f4 	.word	0x0801b1f4
 8011ee0:	0801b08c 	.word	0x0801b08c
 8011ee4:	240040cc 	.word	0x240040cc
 8011ee8:	240040dc 	.word	0x240040dc
 8011eec:	240040f0 	.word	0x240040f0
 8011ef0:	240040f6 	.word	0x240040f6
 8011ef4:	240040ec 	.word	0x240040ec
 8011ef8:	24004750 	.word	0x24004750
 8011efc:	24004754 	.word	0x24004754

08011f00 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d106      	bne.n	8011f1c <tcp_input_delayed_close+0x1c>
 8011f0e:	4b17      	ldr	r3, [pc, #92]	; (8011f6c <tcp_input_delayed_close+0x6c>)
 8011f10:	f240 225a 	movw	r2, #602	; 0x25a
 8011f14:	4916      	ldr	r1, [pc, #88]	; (8011f70 <tcp_input_delayed_close+0x70>)
 8011f16:	4817      	ldr	r0, [pc, #92]	; (8011f74 <tcp_input_delayed_close+0x74>)
 8011f18:	f006 fe08 	bl	8018b2c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011f1c:	4b16      	ldr	r3, [pc, #88]	; (8011f78 <tcp_input_delayed_close+0x78>)
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	f003 0310 	and.w	r3, r3, #16
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d01c      	beq.n	8011f62 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	8b5b      	ldrh	r3, [r3, #26]
 8011f2c:	f003 0310 	and.w	r3, r3, #16
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d10d      	bne.n	8011f50 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d008      	beq.n	8011f50 <tcp_input_delayed_close+0x50>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	6912      	ldr	r2, [r2, #16]
 8011f48:	f06f 010e 	mvn.w	r1, #14
 8011f4c:	4610      	mov	r0, r2
 8011f4e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011f50:	6879      	ldr	r1, [r7, #4]
 8011f52:	480a      	ldr	r0, [pc, #40]	; (8011f7c <tcp_input_delayed_close+0x7c>)
 8011f54:	f7ff fa52 	bl	80113fc <tcp_pcb_remove>
    tcp_free(pcb);
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f7fd fd9f 	bl	800fa9c <tcp_free>
    return 1;
 8011f5e:	2301      	movs	r3, #1
 8011f60:	e000      	b.n	8011f64 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011f62:	2300      	movs	r3, #0
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	0801b040 	.word	0x0801b040
 8011f70:	0801b210 	.word	0x0801b210
 8011f74:	0801b08c 	.word	0x0801b08c
 8011f78:	240040f9 	.word	0x240040f9
 8011f7c:	24007800 	.word	0x24007800

08011f80 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011f80:	b590      	push	{r4, r7, lr}
 8011f82:	b08b      	sub	sp, #44	; 0x2c
 8011f84:	af04      	add	r7, sp, #16
 8011f86:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011f88:	4b6f      	ldr	r3, [pc, #444]	; (8012148 <tcp_listen_input+0x1c8>)
 8011f8a:	781b      	ldrb	r3, [r3, #0]
 8011f8c:	f003 0304 	and.w	r3, r3, #4
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	f040 80d2 	bne.w	801213a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d106      	bne.n	8011faa <tcp_listen_input+0x2a>
 8011f9c:	4b6b      	ldr	r3, [pc, #428]	; (801214c <tcp_listen_input+0x1cc>)
 8011f9e:	f240 2281 	movw	r2, #641	; 0x281
 8011fa2:	496b      	ldr	r1, [pc, #428]	; (8012150 <tcp_listen_input+0x1d0>)
 8011fa4:	486b      	ldr	r0, [pc, #428]	; (8012154 <tcp_listen_input+0x1d4>)
 8011fa6:	f006 fdc1 	bl	8018b2c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011faa:	4b67      	ldr	r3, [pc, #412]	; (8012148 <tcp_listen_input+0x1c8>)
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	f003 0310 	and.w	r3, r3, #16
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d019      	beq.n	8011fea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fb6:	4b68      	ldr	r3, [pc, #416]	; (8012158 <tcp_listen_input+0x1d8>)
 8011fb8:	6819      	ldr	r1, [r3, #0]
 8011fba:	4b68      	ldr	r3, [pc, #416]	; (801215c <tcp_listen_input+0x1dc>)
 8011fbc:	881b      	ldrh	r3, [r3, #0]
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	4b67      	ldr	r3, [pc, #412]	; (8012160 <tcp_listen_input+0x1e0>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011fc6:	4b67      	ldr	r3, [pc, #412]	; (8012164 <tcp_listen_input+0x1e4>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fca:	885b      	ldrh	r3, [r3, #2]
 8011fcc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011fce:	4a65      	ldr	r2, [pc, #404]	; (8012164 <tcp_listen_input+0x1e4>)
 8011fd0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fd2:	8812      	ldrh	r2, [r2, #0]
 8011fd4:	b292      	uxth	r2, r2
 8011fd6:	9202      	str	r2, [sp, #8]
 8011fd8:	9301      	str	r3, [sp, #4]
 8011fda:	4b63      	ldr	r3, [pc, #396]	; (8012168 <tcp_listen_input+0x1e8>)
 8011fdc:	9300      	str	r3, [sp, #0]
 8011fde:	4b63      	ldr	r3, [pc, #396]	; (801216c <tcp_listen_input+0x1ec>)
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f003 fbd6 	bl	8015794 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011fe8:	e0a9      	b.n	801213e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011fea:	4b57      	ldr	r3, [pc, #348]	; (8012148 <tcp_listen_input+0x1c8>)
 8011fec:	781b      	ldrb	r3, [r3, #0]
 8011fee:	f003 0302 	and.w	r3, r3, #2
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	f000 80a3 	beq.w	801213e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	7d5b      	ldrb	r3, [r3, #21]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7ff f861 	bl	80110c4 <tcp_alloc>
 8012002:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d111      	bne.n	801202e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	699b      	ldr	r3, [r3, #24]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d00a      	beq.n	8012028 <tcp_listen_input+0xa8>
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	699b      	ldr	r3, [r3, #24]
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	6910      	ldr	r0, [r2, #16]
 801201a:	f04f 32ff 	mov.w	r2, #4294967295
 801201e:	2100      	movs	r1, #0
 8012020:	4798      	blx	r3
 8012022:	4603      	mov	r3, r0
 8012024:	73bb      	strb	r3, [r7, #14]
      return;
 8012026:	e08b      	b.n	8012140 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012028:	23f0      	movs	r3, #240	; 0xf0
 801202a:	73bb      	strb	r3, [r7, #14]
      return;
 801202c:	e088      	b.n	8012140 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801202e:	4b50      	ldr	r3, [pc, #320]	; (8012170 <tcp_listen_input+0x1f0>)
 8012030:	695a      	ldr	r2, [r3, #20]
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012036:	4b4e      	ldr	r3, [pc, #312]	; (8012170 <tcp_listen_input+0x1f0>)
 8012038:	691a      	ldr	r2, [r3, #16]
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	8ada      	ldrh	r2, [r3, #22]
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012046:	4b47      	ldr	r3, [pc, #284]	; (8012164 <tcp_listen_input+0x1e4>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	881b      	ldrh	r3, [r3, #0]
 801204c:	b29a      	uxth	r2, r3
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	2203      	movs	r2, #3
 8012056:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012058:	4b41      	ldr	r3, [pc, #260]	; (8012160 <tcp_listen_input+0x1e0>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	1c5a      	adds	r2, r3, #1
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012066:	697b      	ldr	r3, [r7, #20]
 8012068:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801206a:	6978      	ldr	r0, [r7, #20]
 801206c:	f7ff fa5a 	bl	8011524 <tcp_next_iss>
 8012070:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	693a      	ldr	r2, [r7, #16]
 8012076:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	693a      	ldr	r2, [r7, #16]
 801207c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801207e:	697b      	ldr	r3, [r7, #20]
 8012080:	693a      	ldr	r2, [r7, #16]
 8012082:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	693a      	ldr	r2, [r7, #16]
 8012088:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801208a:	4b35      	ldr	r3, [pc, #212]	; (8012160 <tcp_listen_input+0x1e0>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	1e5a      	subs	r2, r3, #1
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	691a      	ldr	r2, [r3, #16]
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	687a      	ldr	r2, [r7, #4]
 80120a0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	7a5b      	ldrb	r3, [r3, #9]
 80120a6:	f003 030c 	and.w	r3, r3, #12
 80120aa:	b2da      	uxtb	r2, r3
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	7a1a      	ldrb	r2, [r3, #8]
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80120b8:	4b2e      	ldr	r3, [pc, #184]	; (8012174 <tcp_listen_input+0x1f4>)
 80120ba:	681a      	ldr	r2, [r3, #0]
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	60da      	str	r2, [r3, #12]
 80120c0:	4a2c      	ldr	r2, [pc, #176]	; (8012174 <tcp_listen_input+0x1f4>)
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	6013      	str	r3, [r2, #0]
 80120c6:	f003 fd27 	bl	8015b18 <tcp_timer_needed>
 80120ca:	4b2b      	ldr	r3, [pc, #172]	; (8012178 <tcp_listen_input+0x1f8>)
 80120cc:	2201      	movs	r2, #1
 80120ce:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80120d0:	6978      	ldr	r0, [r7, #20]
 80120d2:	f001 fd8d 	bl	8013bf0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80120d6:	4b23      	ldr	r3, [pc, #140]	; (8012164 <tcp_listen_input+0x1e4>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	89db      	ldrh	r3, [r3, #14]
 80120dc:	b29a      	uxth	r2, r3
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	3304      	adds	r3, #4
 80120f8:	4618      	mov	r0, r3
 80120fa:	f005 f941 	bl	8017380 <ip4_route>
 80120fe:	4601      	mov	r1, r0
 8012100:	697b      	ldr	r3, [r7, #20]
 8012102:	3304      	adds	r3, #4
 8012104:	461a      	mov	r2, r3
 8012106:	4620      	mov	r0, r4
 8012108:	f7ff fa32 	bl	8011570 <tcp_eff_send_mss_netif>
 801210c:	4603      	mov	r3, r0
 801210e:	461a      	mov	r2, r3
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012114:	2112      	movs	r1, #18
 8012116:	6978      	ldr	r0, [r7, #20]
 8012118:	f002 fc9a 	bl	8014a50 <tcp_enqueue_flags>
 801211c:	4603      	mov	r3, r0
 801211e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d004      	beq.n	8012132 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012128:	2100      	movs	r1, #0
 801212a:	6978      	ldr	r0, [r7, #20]
 801212c:	f7fd fee0 	bl	800fef0 <tcp_abandon>
      return;
 8012130:	e006      	b.n	8012140 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012132:	6978      	ldr	r0, [r7, #20]
 8012134:	f002 fd7a 	bl	8014c2c <tcp_output>
  return;
 8012138:	e001      	b.n	801213e <tcp_listen_input+0x1be>
    return;
 801213a:	bf00      	nop
 801213c:	e000      	b.n	8012140 <tcp_listen_input+0x1c0>
  return;
 801213e:	bf00      	nop
}
 8012140:	371c      	adds	r7, #28
 8012142:	46bd      	mov	sp, r7
 8012144:	bd90      	pop	{r4, r7, pc}
 8012146:	bf00      	nop
 8012148:	240040f8 	.word	0x240040f8
 801214c:	0801b040 	.word	0x0801b040
 8012150:	0801b238 	.word	0x0801b238
 8012154:	0801b08c 	.word	0x0801b08c
 8012158:	240040f0 	.word	0x240040f0
 801215c:	240040f6 	.word	0x240040f6
 8012160:	240040ec 	.word	0x240040ec
 8012164:	240040dc 	.word	0x240040dc
 8012168:	24004750 	.word	0x24004750
 801216c:	24004754 	.word	0x24004754
 8012170:	24004740 	.word	0x24004740
 8012174:	24007800 	.word	0x24007800
 8012178:	240077fc 	.word	0x240077fc

0801217c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b086      	sub	sp, #24
 8012180:	af04      	add	r7, sp, #16
 8012182:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012184:	4b2f      	ldr	r3, [pc, #188]	; (8012244 <tcp_timewait_input+0xc8>)
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	f003 0304 	and.w	r3, r3, #4
 801218c:	2b00      	cmp	r3, #0
 801218e:	d153      	bne.n	8012238 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d106      	bne.n	80121a4 <tcp_timewait_input+0x28>
 8012196:	4b2c      	ldr	r3, [pc, #176]	; (8012248 <tcp_timewait_input+0xcc>)
 8012198:	f240 22ee 	movw	r2, #750	; 0x2ee
 801219c:	492b      	ldr	r1, [pc, #172]	; (801224c <tcp_timewait_input+0xd0>)
 801219e:	482c      	ldr	r0, [pc, #176]	; (8012250 <tcp_timewait_input+0xd4>)
 80121a0:	f006 fcc4 	bl	8018b2c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80121a4:	4b27      	ldr	r3, [pc, #156]	; (8012244 <tcp_timewait_input+0xc8>)
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	f003 0302 	and.w	r3, r3, #2
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d02a      	beq.n	8012206 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80121b0:	4b28      	ldr	r3, [pc, #160]	; (8012254 <tcp_timewait_input+0xd8>)
 80121b2:	681a      	ldr	r2, [r3, #0]
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b8:	1ad3      	subs	r3, r2, r3
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	db2d      	blt.n	801221a <tcp_timewait_input+0x9e>
 80121be:	4b25      	ldr	r3, [pc, #148]	; (8012254 <tcp_timewait_input+0xd8>)
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c6:	6879      	ldr	r1, [r7, #4]
 80121c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80121ca:	440b      	add	r3, r1
 80121cc:	1ad3      	subs	r3, r2, r3
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	dc23      	bgt.n	801221a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121d2:	4b21      	ldr	r3, [pc, #132]	; (8012258 <tcp_timewait_input+0xdc>)
 80121d4:	6819      	ldr	r1, [r3, #0]
 80121d6:	4b21      	ldr	r3, [pc, #132]	; (801225c <tcp_timewait_input+0xe0>)
 80121d8:	881b      	ldrh	r3, [r3, #0]
 80121da:	461a      	mov	r2, r3
 80121dc:	4b1d      	ldr	r3, [pc, #116]	; (8012254 <tcp_timewait_input+0xd8>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121e2:	4b1f      	ldr	r3, [pc, #124]	; (8012260 <tcp_timewait_input+0xe4>)
 80121e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121e6:	885b      	ldrh	r3, [r3, #2]
 80121e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121ea:	4a1d      	ldr	r2, [pc, #116]	; (8012260 <tcp_timewait_input+0xe4>)
 80121ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121ee:	8812      	ldrh	r2, [r2, #0]
 80121f0:	b292      	uxth	r2, r2
 80121f2:	9202      	str	r2, [sp, #8]
 80121f4:	9301      	str	r3, [sp, #4]
 80121f6:	4b1b      	ldr	r3, [pc, #108]	; (8012264 <tcp_timewait_input+0xe8>)
 80121f8:	9300      	str	r3, [sp, #0]
 80121fa:	4b1b      	ldr	r3, [pc, #108]	; (8012268 <tcp_timewait_input+0xec>)
 80121fc:	4602      	mov	r2, r0
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f003 fac8 	bl	8015794 <tcp_rst>
      return;
 8012204:	e01b      	b.n	801223e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012206:	4b0f      	ldr	r3, [pc, #60]	; (8012244 <tcp_timewait_input+0xc8>)
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	f003 0301 	and.w	r3, r3, #1
 801220e:	2b00      	cmp	r3, #0
 8012210:	d003      	beq.n	801221a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012212:	4b16      	ldr	r3, [pc, #88]	; (801226c <tcp_timewait_input+0xf0>)
 8012214:	681a      	ldr	r2, [r3, #0]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801221a:	4b10      	ldr	r3, [pc, #64]	; (801225c <tcp_timewait_input+0xe0>)
 801221c:	881b      	ldrh	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d00c      	beq.n	801223c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	8b5b      	ldrh	r3, [r3, #26]
 8012226:	f043 0302 	orr.w	r3, r3, #2
 801222a:	b29a      	uxth	r2, r3
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f002 fcfb 	bl	8014c2c <tcp_output>
  }
  return;
 8012236:	e001      	b.n	801223c <tcp_timewait_input+0xc0>
    return;
 8012238:	bf00      	nop
 801223a:	e000      	b.n	801223e <tcp_timewait_input+0xc2>
  return;
 801223c:	bf00      	nop
}
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	240040f8 	.word	0x240040f8
 8012248:	0801b040 	.word	0x0801b040
 801224c:	0801b258 	.word	0x0801b258
 8012250:	0801b08c 	.word	0x0801b08c
 8012254:	240040ec 	.word	0x240040ec
 8012258:	240040f0 	.word	0x240040f0
 801225c:	240040f6 	.word	0x240040f6
 8012260:	240040dc 	.word	0x240040dc
 8012264:	24004750 	.word	0x24004750
 8012268:	24004754 	.word	0x24004754
 801226c:	24007804 	.word	0x24007804

08012270 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012270:	b590      	push	{r4, r7, lr}
 8012272:	b08d      	sub	sp, #52	; 0x34
 8012274:	af04      	add	r7, sp, #16
 8012276:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012278:	2300      	movs	r3, #0
 801227a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801227c:	2300      	movs	r3, #0
 801227e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d106      	bne.n	8012294 <tcp_process+0x24>
 8012286:	4ba5      	ldr	r3, [pc, #660]	; (801251c <tcp_process+0x2ac>)
 8012288:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801228c:	49a4      	ldr	r1, [pc, #656]	; (8012520 <tcp_process+0x2b0>)
 801228e:	48a5      	ldr	r0, [pc, #660]	; (8012524 <tcp_process+0x2b4>)
 8012290:	f006 fc4c 	bl	8018b2c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012294:	4ba4      	ldr	r3, [pc, #656]	; (8012528 <tcp_process+0x2b8>)
 8012296:	781b      	ldrb	r3, [r3, #0]
 8012298:	f003 0304 	and.w	r3, r3, #4
 801229c:	2b00      	cmp	r3, #0
 801229e:	d04e      	beq.n	801233e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	7d1b      	ldrb	r3, [r3, #20]
 80122a4:	2b02      	cmp	r3, #2
 80122a6:	d108      	bne.n	80122ba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80122ac:	4b9f      	ldr	r3, [pc, #636]	; (801252c <tcp_process+0x2bc>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d123      	bne.n	80122fc <tcp_process+0x8c>
        acceptable = 1;
 80122b4:	2301      	movs	r3, #1
 80122b6:	76fb      	strb	r3, [r7, #27]
 80122b8:	e020      	b.n	80122fc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122be:	4b9c      	ldr	r3, [pc, #624]	; (8012530 <tcp_process+0x2c0>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d102      	bne.n	80122cc <tcp_process+0x5c>
        acceptable = 1;
 80122c6:	2301      	movs	r3, #1
 80122c8:	76fb      	strb	r3, [r7, #27]
 80122ca:	e017      	b.n	80122fc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80122cc:	4b98      	ldr	r3, [pc, #608]	; (8012530 <tcp_process+0x2c0>)
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122d4:	1ad3      	subs	r3, r2, r3
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	db10      	blt.n	80122fc <tcp_process+0x8c>
 80122da:	4b95      	ldr	r3, [pc, #596]	; (8012530 <tcp_process+0x2c0>)
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122e2:	6879      	ldr	r1, [r7, #4]
 80122e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80122e6:	440b      	add	r3, r1
 80122e8:	1ad3      	subs	r3, r2, r3
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	dc06      	bgt.n	80122fc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	8b5b      	ldrh	r3, [r3, #26]
 80122f2:	f043 0302 	orr.w	r3, r3, #2
 80122f6:	b29a      	uxth	r2, r3
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80122fc:	7efb      	ldrb	r3, [r7, #27]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d01b      	beq.n	801233a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	7d1b      	ldrb	r3, [r3, #20]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d106      	bne.n	8012318 <tcp_process+0xa8>
 801230a:	4b84      	ldr	r3, [pc, #528]	; (801251c <tcp_process+0x2ac>)
 801230c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012310:	4988      	ldr	r1, [pc, #544]	; (8012534 <tcp_process+0x2c4>)
 8012312:	4884      	ldr	r0, [pc, #528]	; (8012524 <tcp_process+0x2b4>)
 8012314:	f006 fc0a 	bl	8018b2c <iprintf>
      recv_flags |= TF_RESET;
 8012318:	4b87      	ldr	r3, [pc, #540]	; (8012538 <tcp_process+0x2c8>)
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	f043 0308 	orr.w	r3, r3, #8
 8012320:	b2da      	uxtb	r2, r3
 8012322:	4b85      	ldr	r3, [pc, #532]	; (8012538 <tcp_process+0x2c8>)
 8012324:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	8b5b      	ldrh	r3, [r3, #26]
 801232a:	f023 0301 	bic.w	r3, r3, #1
 801232e:	b29a      	uxth	r2, r3
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012334:	f06f 030d 	mvn.w	r3, #13
 8012338:	e37a      	b.n	8012a30 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801233a:	2300      	movs	r3, #0
 801233c:	e378      	b.n	8012a30 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801233e:	4b7a      	ldr	r3, [pc, #488]	; (8012528 <tcp_process+0x2b8>)
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	f003 0302 	and.w	r3, r3, #2
 8012346:	2b00      	cmp	r3, #0
 8012348:	d010      	beq.n	801236c <tcp_process+0xfc>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	7d1b      	ldrb	r3, [r3, #20]
 801234e:	2b02      	cmp	r3, #2
 8012350:	d00c      	beq.n	801236c <tcp_process+0xfc>
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	7d1b      	ldrb	r3, [r3, #20]
 8012356:	2b03      	cmp	r3, #3
 8012358:	d008      	beq.n	801236c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	8b5b      	ldrh	r3, [r3, #26]
 801235e:	f043 0302 	orr.w	r3, r3, #2
 8012362:	b29a      	uxth	r2, r3
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012368:	2300      	movs	r3, #0
 801236a:	e361      	b.n	8012a30 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	8b5b      	ldrh	r3, [r3, #26]
 8012370:	f003 0310 	and.w	r3, r3, #16
 8012374:	2b00      	cmp	r3, #0
 8012376:	d103      	bne.n	8012380 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012378:	4b70      	ldr	r3, [pc, #448]	; (801253c <tcp_process+0x2cc>)
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2200      	movs	r2, #0
 8012384:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2200      	movs	r2, #0
 801238c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f001 fc2d 	bl	8013bf0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	7d1b      	ldrb	r3, [r3, #20]
 801239a:	3b02      	subs	r3, #2
 801239c:	2b07      	cmp	r3, #7
 801239e:	f200 8337 	bhi.w	8012a10 <tcp_process+0x7a0>
 80123a2:	a201      	add	r2, pc, #4	; (adr r2, 80123a8 <tcp_process+0x138>)
 80123a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123a8:	080123c9 	.word	0x080123c9
 80123ac:	080125f9 	.word	0x080125f9
 80123b0:	08012771 	.word	0x08012771
 80123b4:	0801279b 	.word	0x0801279b
 80123b8:	080128bf 	.word	0x080128bf
 80123bc:	08012771 	.word	0x08012771
 80123c0:	0801294b 	.word	0x0801294b
 80123c4:	080129db 	.word	0x080129db
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80123c8:	4b57      	ldr	r3, [pc, #348]	; (8012528 <tcp_process+0x2b8>)
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	f003 0310 	and.w	r3, r3, #16
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f000 80e4 	beq.w	801259e <tcp_process+0x32e>
 80123d6:	4b54      	ldr	r3, [pc, #336]	; (8012528 <tcp_process+0x2b8>)
 80123d8:	781b      	ldrb	r3, [r3, #0]
 80123da:	f003 0302 	and.w	r3, r3, #2
 80123de:	2b00      	cmp	r3, #0
 80123e0:	f000 80dd 	beq.w	801259e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123e8:	1c5a      	adds	r2, r3, #1
 80123ea:	4b50      	ldr	r3, [pc, #320]	; (801252c <tcp_process+0x2bc>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	429a      	cmp	r2, r3
 80123f0:	f040 80d5 	bne.w	801259e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80123f4:	4b4e      	ldr	r3, [pc, #312]	; (8012530 <tcp_process+0x2c0>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	1c5a      	adds	r2, r3, #1
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012406:	4b49      	ldr	r3, [pc, #292]	; (801252c <tcp_process+0x2bc>)
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801240e:	4b4c      	ldr	r3, [pc, #304]	; (8012540 <tcp_process+0x2d0>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	89db      	ldrh	r3, [r3, #14]
 8012414:	b29a      	uxth	r2, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012428:	4b41      	ldr	r3, [pc, #260]	; (8012530 <tcp_process+0x2c0>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	1e5a      	subs	r2, r3, #1
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2204      	movs	r2, #4
 8012436:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	3304      	adds	r3, #4
 8012440:	4618      	mov	r0, r3
 8012442:	f004 ff9d 	bl	8017380 <ip4_route>
 8012446:	4601      	mov	r1, r0
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	3304      	adds	r3, #4
 801244c:	461a      	mov	r2, r3
 801244e:	4620      	mov	r0, r4
 8012450:	f7ff f88e 	bl	8011570 <tcp_eff_send_mss_netif>
 8012454:	4603      	mov	r3, r0
 8012456:	461a      	mov	r2, r3
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012460:	009a      	lsls	r2, r3, #2
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012466:	005b      	lsls	r3, r3, #1
 8012468:	f241 111c 	movw	r1, #4380	; 0x111c
 801246c:	428b      	cmp	r3, r1
 801246e:	bf38      	it	cc
 8012470:	460b      	movcc	r3, r1
 8012472:	429a      	cmp	r2, r3
 8012474:	d204      	bcs.n	8012480 <tcp_process+0x210>
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801247a:	009b      	lsls	r3, r3, #2
 801247c:	b29b      	uxth	r3, r3
 801247e:	e00d      	b.n	801249c <tcp_process+0x22c>
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012484:	005b      	lsls	r3, r3, #1
 8012486:	f241 121c 	movw	r2, #4380	; 0x111c
 801248a:	4293      	cmp	r3, r2
 801248c:	d904      	bls.n	8012498 <tcp_process+0x228>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012492:	005b      	lsls	r3, r3, #1
 8012494:	b29b      	uxth	r3, r3
 8012496:	e001      	b.n	801249c <tcp_process+0x22c>
 8012498:	f241 131c 	movw	r3, #4380	; 0x111c
 801249c:	687a      	ldr	r2, [r7, #4]
 801249e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d106      	bne.n	80124ba <tcp_process+0x24a>
 80124ac:	4b1b      	ldr	r3, [pc, #108]	; (801251c <tcp_process+0x2ac>)
 80124ae:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80124b2:	4924      	ldr	r1, [pc, #144]	; (8012544 <tcp_process+0x2d4>)
 80124b4:	481b      	ldr	r0, [pc, #108]	; (8012524 <tcp_process+0x2b4>)
 80124b6:	f006 fb39 	bl	8018b2c <iprintf>
        --pcb->snd_queuelen;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124c0:	3b01      	subs	r3, #1
 80124c2:	b29a      	uxth	r2, r3
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124ce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80124d0:	69fb      	ldr	r3, [r7, #28]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d111      	bne.n	80124fa <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124da:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80124dc:	69fb      	ldr	r3, [r7, #28]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d106      	bne.n	80124f0 <tcp_process+0x280>
 80124e2:	4b0e      	ldr	r3, [pc, #56]	; (801251c <tcp_process+0x2ac>)
 80124e4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80124e8:	4917      	ldr	r1, [pc, #92]	; (8012548 <tcp_process+0x2d8>)
 80124ea:	480e      	ldr	r0, [pc, #56]	; (8012524 <tcp_process+0x2b4>)
 80124ec:	f006 fb1e 	bl	8018b2c <iprintf>
          pcb->unsent = rseg->next;
 80124f0:	69fb      	ldr	r3, [r7, #28]
 80124f2:	681a      	ldr	r2, [r3, #0]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80124f8:	e003      	b.n	8012502 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80124fa:	69fb      	ldr	r3, [r7, #28]
 80124fc:	681a      	ldr	r2, [r3, #0]
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012502:	69f8      	ldr	r0, [r7, #28]
 8012504:	f7fe fc57 	bl	8010db6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801250c:	2b00      	cmp	r3, #0
 801250e:	d11d      	bne.n	801254c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012516:	861a      	strh	r2, [r3, #48]	; 0x30
 8012518:	e01f      	b.n	801255a <tcp_process+0x2ea>
 801251a:	bf00      	nop
 801251c:	0801b040 	.word	0x0801b040
 8012520:	0801b278 	.word	0x0801b278
 8012524:	0801b08c 	.word	0x0801b08c
 8012528:	240040f8 	.word	0x240040f8
 801252c:	240040f0 	.word	0x240040f0
 8012530:	240040ec 	.word	0x240040ec
 8012534:	0801b294 	.word	0x0801b294
 8012538:	240040f9 	.word	0x240040f9
 801253c:	24007804 	.word	0x24007804
 8012540:	240040dc 	.word	0x240040dc
 8012544:	0801b2b4 	.word	0x0801b2b4
 8012548:	0801b2cc 	.word	0x0801b2cc
        } else {
          pcb->rtime = 0;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2200      	movs	r2, #0
 8012550:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2200      	movs	r2, #0
 8012556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012560:	2b00      	cmp	r3, #0
 8012562:	d00a      	beq.n	801257a <tcp_process+0x30a>
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801256a:	687a      	ldr	r2, [r7, #4]
 801256c:	6910      	ldr	r0, [r2, #16]
 801256e:	2200      	movs	r2, #0
 8012570:	6879      	ldr	r1, [r7, #4]
 8012572:	4798      	blx	r3
 8012574:	4603      	mov	r3, r0
 8012576:	76bb      	strb	r3, [r7, #26]
 8012578:	e001      	b.n	801257e <tcp_process+0x30e>
 801257a:	2300      	movs	r3, #0
 801257c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801257e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012582:	f113 0f0d 	cmn.w	r3, #13
 8012586:	d102      	bne.n	801258e <tcp_process+0x31e>
          return ERR_ABRT;
 8012588:	f06f 030c 	mvn.w	r3, #12
 801258c:	e250      	b.n	8012a30 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	8b5b      	ldrh	r3, [r3, #26]
 8012592:	f043 0302 	orr.w	r3, r3, #2
 8012596:	b29a      	uxth	r2, r3
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801259c:	e23a      	b.n	8012a14 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801259e:	4b9d      	ldr	r3, [pc, #628]	; (8012814 <tcp_process+0x5a4>)
 80125a0:	781b      	ldrb	r3, [r3, #0]
 80125a2:	f003 0310 	and.w	r3, r3, #16
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	f000 8234 	beq.w	8012a14 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125ac:	4b9a      	ldr	r3, [pc, #616]	; (8012818 <tcp_process+0x5a8>)
 80125ae:	6819      	ldr	r1, [r3, #0]
 80125b0:	4b9a      	ldr	r3, [pc, #616]	; (801281c <tcp_process+0x5ac>)
 80125b2:	881b      	ldrh	r3, [r3, #0]
 80125b4:	461a      	mov	r2, r3
 80125b6:	4b9a      	ldr	r3, [pc, #616]	; (8012820 <tcp_process+0x5b0>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80125bc:	4b99      	ldr	r3, [pc, #612]	; (8012824 <tcp_process+0x5b4>)
 80125be:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125c0:	885b      	ldrh	r3, [r3, #2]
 80125c2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80125c4:	4a97      	ldr	r2, [pc, #604]	; (8012824 <tcp_process+0x5b4>)
 80125c6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125c8:	8812      	ldrh	r2, [r2, #0]
 80125ca:	b292      	uxth	r2, r2
 80125cc:	9202      	str	r2, [sp, #8]
 80125ce:	9301      	str	r3, [sp, #4]
 80125d0:	4b95      	ldr	r3, [pc, #596]	; (8012828 <tcp_process+0x5b8>)
 80125d2:	9300      	str	r3, [sp, #0]
 80125d4:	4b95      	ldr	r3, [pc, #596]	; (801282c <tcp_process+0x5bc>)
 80125d6:	4602      	mov	r2, r0
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f003 f8db 	bl	8015794 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125e4:	2b05      	cmp	r3, #5
 80125e6:	f200 8215 	bhi.w	8012a14 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2200      	movs	r2, #0
 80125ee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f002 fea5 	bl	8015340 <tcp_rexmit_rto>
      break;
 80125f6:	e20d      	b.n	8012a14 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80125f8:	4b86      	ldr	r3, [pc, #536]	; (8012814 <tcp_process+0x5a4>)
 80125fa:	781b      	ldrb	r3, [r3, #0]
 80125fc:	f003 0310 	and.w	r3, r3, #16
 8012600:	2b00      	cmp	r3, #0
 8012602:	f000 80a1 	beq.w	8012748 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012606:	4b84      	ldr	r3, [pc, #528]	; (8012818 <tcp_process+0x5a8>)
 8012608:	681a      	ldr	r2, [r3, #0]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801260e:	1ad3      	subs	r3, r2, r3
 8012610:	3b01      	subs	r3, #1
 8012612:	2b00      	cmp	r3, #0
 8012614:	db7e      	blt.n	8012714 <tcp_process+0x4a4>
 8012616:	4b80      	ldr	r3, [pc, #512]	; (8012818 <tcp_process+0x5a8>)
 8012618:	681a      	ldr	r2, [r3, #0]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801261e:	1ad3      	subs	r3, r2, r3
 8012620:	2b00      	cmp	r3, #0
 8012622:	dc77      	bgt.n	8012714 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2204      	movs	r2, #4
 8012628:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801262e:	2b00      	cmp	r3, #0
 8012630:	d102      	bne.n	8012638 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012632:	23fa      	movs	r3, #250	; 0xfa
 8012634:	76bb      	strb	r3, [r7, #26]
 8012636:	e01d      	b.n	8012674 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801263c:	699b      	ldr	r3, [r3, #24]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d106      	bne.n	8012650 <tcp_process+0x3e0>
 8012642:	4b7b      	ldr	r3, [pc, #492]	; (8012830 <tcp_process+0x5c0>)
 8012644:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012648:	497a      	ldr	r1, [pc, #488]	; (8012834 <tcp_process+0x5c4>)
 801264a:	487b      	ldr	r0, [pc, #492]	; (8012838 <tcp_process+0x5c8>)
 801264c:	f006 fa6e 	bl	8018b2c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012654:	699b      	ldr	r3, [r3, #24]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d00a      	beq.n	8012670 <tcp_process+0x400>
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801265e:	699b      	ldr	r3, [r3, #24]
 8012660:	687a      	ldr	r2, [r7, #4]
 8012662:	6910      	ldr	r0, [r2, #16]
 8012664:	2200      	movs	r2, #0
 8012666:	6879      	ldr	r1, [r7, #4]
 8012668:	4798      	blx	r3
 801266a:	4603      	mov	r3, r0
 801266c:	76bb      	strb	r3, [r7, #26]
 801266e:	e001      	b.n	8012674 <tcp_process+0x404>
 8012670:	23f0      	movs	r3, #240	; 0xf0
 8012672:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012674:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d00a      	beq.n	8012692 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801267c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012680:	f113 0f0d 	cmn.w	r3, #13
 8012684:	d002      	beq.n	801268c <tcp_process+0x41c>
              tcp_abort(pcb);
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7fd fcf0 	bl	801006c <tcp_abort>
            }
            return ERR_ABRT;
 801268c:	f06f 030c 	mvn.w	r3, #12
 8012690:	e1ce      	b.n	8012a30 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f000 fae0 	bl	8012c58 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012698:	4b68      	ldr	r3, [pc, #416]	; (801283c <tcp_process+0x5cc>)
 801269a:	881b      	ldrh	r3, [r3, #0]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d005      	beq.n	80126ac <tcp_process+0x43c>
            recv_acked--;
 80126a0:	4b66      	ldr	r3, [pc, #408]	; (801283c <tcp_process+0x5cc>)
 80126a2:	881b      	ldrh	r3, [r3, #0]
 80126a4:	3b01      	subs	r3, #1
 80126a6:	b29a      	uxth	r2, r3
 80126a8:	4b64      	ldr	r3, [pc, #400]	; (801283c <tcp_process+0x5cc>)
 80126aa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126b0:	009a      	lsls	r2, r3, #2
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126b6:	005b      	lsls	r3, r3, #1
 80126b8:	f241 111c 	movw	r1, #4380	; 0x111c
 80126bc:	428b      	cmp	r3, r1
 80126be:	bf38      	it	cc
 80126c0:	460b      	movcc	r3, r1
 80126c2:	429a      	cmp	r2, r3
 80126c4:	d204      	bcs.n	80126d0 <tcp_process+0x460>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126ca:	009b      	lsls	r3, r3, #2
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	e00d      	b.n	80126ec <tcp_process+0x47c>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126d4:	005b      	lsls	r3, r3, #1
 80126d6:	f241 121c 	movw	r2, #4380	; 0x111c
 80126da:	4293      	cmp	r3, r2
 80126dc:	d904      	bls.n	80126e8 <tcp_process+0x478>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126e2:	005b      	lsls	r3, r3, #1
 80126e4:	b29b      	uxth	r3, r3
 80126e6:	e001      	b.n	80126ec <tcp_process+0x47c>
 80126e8:	f241 131c 	movw	r3, #4380	; 0x111c
 80126ec:	687a      	ldr	r2, [r7, #4]
 80126ee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80126f2:	4b53      	ldr	r3, [pc, #332]	; (8012840 <tcp_process+0x5d0>)
 80126f4:	781b      	ldrb	r3, [r3, #0]
 80126f6:	f003 0320 	and.w	r3, r3, #32
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d037      	beq.n	801276e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	8b5b      	ldrh	r3, [r3, #26]
 8012702:	f043 0302 	orr.w	r3, r3, #2
 8012706:	b29a      	uxth	r2, r3
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2207      	movs	r2, #7
 8012710:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012712:	e02c      	b.n	801276e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012714:	4b40      	ldr	r3, [pc, #256]	; (8012818 <tcp_process+0x5a8>)
 8012716:	6819      	ldr	r1, [r3, #0]
 8012718:	4b40      	ldr	r3, [pc, #256]	; (801281c <tcp_process+0x5ac>)
 801271a:	881b      	ldrh	r3, [r3, #0]
 801271c:	461a      	mov	r2, r3
 801271e:	4b40      	ldr	r3, [pc, #256]	; (8012820 <tcp_process+0x5b0>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012724:	4b3f      	ldr	r3, [pc, #252]	; (8012824 <tcp_process+0x5b4>)
 8012726:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012728:	885b      	ldrh	r3, [r3, #2]
 801272a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801272c:	4a3d      	ldr	r2, [pc, #244]	; (8012824 <tcp_process+0x5b4>)
 801272e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012730:	8812      	ldrh	r2, [r2, #0]
 8012732:	b292      	uxth	r2, r2
 8012734:	9202      	str	r2, [sp, #8]
 8012736:	9301      	str	r3, [sp, #4]
 8012738:	4b3b      	ldr	r3, [pc, #236]	; (8012828 <tcp_process+0x5b8>)
 801273a:	9300      	str	r3, [sp, #0]
 801273c:	4b3b      	ldr	r3, [pc, #236]	; (801282c <tcp_process+0x5bc>)
 801273e:	4602      	mov	r2, r0
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f003 f827 	bl	8015794 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012746:	e167      	b.n	8012a18 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012748:	4b32      	ldr	r3, [pc, #200]	; (8012814 <tcp_process+0x5a4>)
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	f003 0302 	and.w	r3, r3, #2
 8012750:	2b00      	cmp	r3, #0
 8012752:	f000 8161 	beq.w	8012a18 <tcp_process+0x7a8>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801275a:	1e5a      	subs	r2, r3, #1
 801275c:	4b30      	ldr	r3, [pc, #192]	; (8012820 <tcp_process+0x5b0>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	429a      	cmp	r2, r3
 8012762:	f040 8159 	bne.w	8012a18 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f002 fe0c 	bl	8015384 <tcp_rexmit>
      break;
 801276c:	e154      	b.n	8012a18 <tcp_process+0x7a8>
 801276e:	e153      	b.n	8012a18 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f000 fa71 	bl	8012c58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012776:	4b32      	ldr	r3, [pc, #200]	; (8012840 <tcp_process+0x5d0>)
 8012778:	781b      	ldrb	r3, [r3, #0]
 801277a:	f003 0320 	and.w	r3, r3, #32
 801277e:	2b00      	cmp	r3, #0
 8012780:	f000 814c 	beq.w	8012a1c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	8b5b      	ldrh	r3, [r3, #26]
 8012788:	f043 0302 	orr.w	r3, r3, #2
 801278c:	b29a      	uxth	r2, r3
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2207      	movs	r2, #7
 8012796:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012798:	e140      	b.n	8012a1c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f000 fa5c 	bl	8012c58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80127a0:	4b27      	ldr	r3, [pc, #156]	; (8012840 <tcp_process+0x5d0>)
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	f003 0320 	and.w	r3, r3, #32
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d071      	beq.n	8012890 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80127ac:	4b19      	ldr	r3, [pc, #100]	; (8012814 <tcp_process+0x5a4>)
 80127ae:	781b      	ldrb	r3, [r3, #0]
 80127b0:	f003 0310 	and.w	r3, r3, #16
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d060      	beq.n	801287a <tcp_process+0x60a>
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80127bc:	4b16      	ldr	r3, [pc, #88]	; (8012818 <tcp_process+0x5a8>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d15a      	bne.n	801287a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d156      	bne.n	801287a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	8b5b      	ldrh	r3, [r3, #26]
 80127d0:	f043 0302 	orr.w	r3, r3, #2
 80127d4:	b29a      	uxth	r2, r3
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7fe fdbe 	bl	801135c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80127e0:	4b18      	ldr	r3, [pc, #96]	; (8012844 <tcp_process+0x5d4>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	687a      	ldr	r2, [r7, #4]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d105      	bne.n	80127f6 <tcp_process+0x586>
 80127ea:	4b16      	ldr	r3, [pc, #88]	; (8012844 <tcp_process+0x5d4>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	68db      	ldr	r3, [r3, #12]
 80127f0:	4a14      	ldr	r2, [pc, #80]	; (8012844 <tcp_process+0x5d4>)
 80127f2:	6013      	str	r3, [r2, #0]
 80127f4:	e02e      	b.n	8012854 <tcp_process+0x5e4>
 80127f6:	4b13      	ldr	r3, [pc, #76]	; (8012844 <tcp_process+0x5d4>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	617b      	str	r3, [r7, #20]
 80127fc:	e027      	b.n	801284e <tcp_process+0x5de>
 80127fe:	697b      	ldr	r3, [r7, #20]
 8012800:	68db      	ldr	r3, [r3, #12]
 8012802:	687a      	ldr	r2, [r7, #4]
 8012804:	429a      	cmp	r2, r3
 8012806:	d11f      	bne.n	8012848 <tcp_process+0x5d8>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	68da      	ldr	r2, [r3, #12]
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	60da      	str	r2, [r3, #12]
 8012810:	e020      	b.n	8012854 <tcp_process+0x5e4>
 8012812:	bf00      	nop
 8012814:	240040f8 	.word	0x240040f8
 8012818:	240040f0 	.word	0x240040f0
 801281c:	240040f6 	.word	0x240040f6
 8012820:	240040ec 	.word	0x240040ec
 8012824:	240040dc 	.word	0x240040dc
 8012828:	24004750 	.word	0x24004750
 801282c:	24004754 	.word	0x24004754
 8012830:	0801b040 	.word	0x0801b040
 8012834:	0801b2e0 	.word	0x0801b2e0
 8012838:	0801b08c 	.word	0x0801b08c
 801283c:	240040f4 	.word	0x240040f4
 8012840:	240040f9 	.word	0x240040f9
 8012844:	24007800 	.word	0x24007800
 8012848:	697b      	ldr	r3, [r7, #20]
 801284a:	68db      	ldr	r3, [r3, #12]
 801284c:	617b      	str	r3, [r7, #20]
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d1d4      	bne.n	80127fe <tcp_process+0x58e>
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2200      	movs	r2, #0
 8012858:	60da      	str	r2, [r3, #12]
 801285a:	4b77      	ldr	r3, [pc, #476]	; (8012a38 <tcp_process+0x7c8>)
 801285c:	2201      	movs	r2, #1
 801285e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	220a      	movs	r2, #10
 8012864:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012866:	4b75      	ldr	r3, [pc, #468]	; (8012a3c <tcp_process+0x7cc>)
 8012868:	681a      	ldr	r2, [r3, #0]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	60da      	str	r2, [r3, #12]
 801286e:	4a73      	ldr	r2, [pc, #460]	; (8012a3c <tcp_process+0x7cc>)
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6013      	str	r3, [r2, #0]
 8012874:	f003 f950 	bl	8015b18 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012878:	e0d2      	b.n	8012a20 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	8b5b      	ldrh	r3, [r3, #26]
 801287e:	f043 0302 	orr.w	r3, r3, #2
 8012882:	b29a      	uxth	r2, r3
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2208      	movs	r2, #8
 801288c:	751a      	strb	r2, [r3, #20]
      break;
 801288e:	e0c7      	b.n	8012a20 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012890:	4b6b      	ldr	r3, [pc, #428]	; (8012a40 <tcp_process+0x7d0>)
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	f003 0310 	and.w	r3, r3, #16
 8012898:	2b00      	cmp	r3, #0
 801289a:	f000 80c1 	beq.w	8012a20 <tcp_process+0x7b0>
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80128a2:	4b68      	ldr	r3, [pc, #416]	; (8012a44 <tcp_process+0x7d4>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	429a      	cmp	r2, r3
 80128a8:	f040 80ba 	bne.w	8012a20 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	f040 80b5 	bne.w	8012a20 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2206      	movs	r2, #6
 80128ba:	751a      	strb	r2, [r3, #20]
      break;
 80128bc:	e0b0      	b.n	8012a20 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f000 f9ca 	bl	8012c58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80128c4:	4b60      	ldr	r3, [pc, #384]	; (8012a48 <tcp_process+0x7d8>)
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	f003 0320 	and.w	r3, r3, #32
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	f000 80a9 	beq.w	8012a24 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	8b5b      	ldrh	r3, [r3, #26]
 80128d6:	f043 0302 	orr.w	r3, r3, #2
 80128da:	b29a      	uxth	r2, r3
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f7fe fd3b 	bl	801135c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80128e6:	4b59      	ldr	r3, [pc, #356]	; (8012a4c <tcp_process+0x7dc>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	687a      	ldr	r2, [r7, #4]
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d105      	bne.n	80128fc <tcp_process+0x68c>
 80128f0:	4b56      	ldr	r3, [pc, #344]	; (8012a4c <tcp_process+0x7dc>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	4a55      	ldr	r2, [pc, #340]	; (8012a4c <tcp_process+0x7dc>)
 80128f8:	6013      	str	r3, [r2, #0]
 80128fa:	e013      	b.n	8012924 <tcp_process+0x6b4>
 80128fc:	4b53      	ldr	r3, [pc, #332]	; (8012a4c <tcp_process+0x7dc>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	613b      	str	r3, [r7, #16]
 8012902:	e00c      	b.n	801291e <tcp_process+0x6ae>
 8012904:	693b      	ldr	r3, [r7, #16]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	687a      	ldr	r2, [r7, #4]
 801290a:	429a      	cmp	r2, r3
 801290c:	d104      	bne.n	8012918 <tcp_process+0x6a8>
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	68da      	ldr	r2, [r3, #12]
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	60da      	str	r2, [r3, #12]
 8012916:	e005      	b.n	8012924 <tcp_process+0x6b4>
 8012918:	693b      	ldr	r3, [r7, #16]
 801291a:	68db      	ldr	r3, [r3, #12]
 801291c:	613b      	str	r3, [r7, #16]
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d1ef      	bne.n	8012904 <tcp_process+0x694>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2200      	movs	r2, #0
 8012928:	60da      	str	r2, [r3, #12]
 801292a:	4b43      	ldr	r3, [pc, #268]	; (8012a38 <tcp_process+0x7c8>)
 801292c:	2201      	movs	r2, #1
 801292e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	220a      	movs	r2, #10
 8012934:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012936:	4b41      	ldr	r3, [pc, #260]	; (8012a3c <tcp_process+0x7cc>)
 8012938:	681a      	ldr	r2, [r3, #0]
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	60da      	str	r2, [r3, #12]
 801293e:	4a3f      	ldr	r2, [pc, #252]	; (8012a3c <tcp_process+0x7cc>)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6013      	str	r3, [r2, #0]
 8012944:	f003 f8e8 	bl	8015b18 <tcp_timer_needed>
      }
      break;
 8012948:	e06c      	b.n	8012a24 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 f984 	bl	8012c58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012950:	4b3b      	ldr	r3, [pc, #236]	; (8012a40 <tcp_process+0x7d0>)
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	f003 0310 	and.w	r3, r3, #16
 8012958:	2b00      	cmp	r3, #0
 801295a:	d065      	beq.n	8012a28 <tcp_process+0x7b8>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012960:	4b38      	ldr	r3, [pc, #224]	; (8012a44 <tcp_process+0x7d4>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	429a      	cmp	r2, r3
 8012966:	d15f      	bne.n	8012a28 <tcp_process+0x7b8>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801296c:	2b00      	cmp	r3, #0
 801296e:	d15b      	bne.n	8012a28 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f7fe fcf3 	bl	801135c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012976:	4b35      	ldr	r3, [pc, #212]	; (8012a4c <tcp_process+0x7dc>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	429a      	cmp	r2, r3
 801297e:	d105      	bne.n	801298c <tcp_process+0x71c>
 8012980:	4b32      	ldr	r3, [pc, #200]	; (8012a4c <tcp_process+0x7dc>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	68db      	ldr	r3, [r3, #12]
 8012986:	4a31      	ldr	r2, [pc, #196]	; (8012a4c <tcp_process+0x7dc>)
 8012988:	6013      	str	r3, [r2, #0]
 801298a:	e013      	b.n	80129b4 <tcp_process+0x744>
 801298c:	4b2f      	ldr	r3, [pc, #188]	; (8012a4c <tcp_process+0x7dc>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	60fb      	str	r3, [r7, #12]
 8012992:	e00c      	b.n	80129ae <tcp_process+0x73e>
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	68db      	ldr	r3, [r3, #12]
 8012998:	687a      	ldr	r2, [r7, #4]
 801299a:	429a      	cmp	r2, r3
 801299c:	d104      	bne.n	80129a8 <tcp_process+0x738>
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	68da      	ldr	r2, [r3, #12]
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	60da      	str	r2, [r3, #12]
 80129a6:	e005      	b.n	80129b4 <tcp_process+0x744>
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	68db      	ldr	r3, [r3, #12]
 80129ac:	60fb      	str	r3, [r7, #12]
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d1ef      	bne.n	8012994 <tcp_process+0x724>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2200      	movs	r2, #0
 80129b8:	60da      	str	r2, [r3, #12]
 80129ba:	4b1f      	ldr	r3, [pc, #124]	; (8012a38 <tcp_process+0x7c8>)
 80129bc:	2201      	movs	r2, #1
 80129be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	220a      	movs	r2, #10
 80129c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80129c6:	4b1d      	ldr	r3, [pc, #116]	; (8012a3c <tcp_process+0x7cc>)
 80129c8:	681a      	ldr	r2, [r3, #0]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	60da      	str	r2, [r3, #12]
 80129ce:	4a1b      	ldr	r2, [pc, #108]	; (8012a3c <tcp_process+0x7cc>)
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6013      	str	r3, [r2, #0]
 80129d4:	f003 f8a0 	bl	8015b18 <tcp_timer_needed>
      }
      break;
 80129d8:	e026      	b.n	8012a28 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f000 f93c 	bl	8012c58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80129e0:	4b17      	ldr	r3, [pc, #92]	; (8012a40 <tcp_process+0x7d0>)
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	f003 0310 	and.w	r3, r3, #16
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d01f      	beq.n	8012a2c <tcp_process+0x7bc>
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80129f0:	4b14      	ldr	r3, [pc, #80]	; (8012a44 <tcp_process+0x7d4>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d119      	bne.n	8012a2c <tcp_process+0x7bc>
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d115      	bne.n	8012a2c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012a00:	4b11      	ldr	r3, [pc, #68]	; (8012a48 <tcp_process+0x7d8>)
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	f043 0310 	orr.w	r3, r3, #16
 8012a08:	b2da      	uxtb	r2, r3
 8012a0a:	4b0f      	ldr	r3, [pc, #60]	; (8012a48 <tcp_process+0x7d8>)
 8012a0c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012a0e:	e00d      	b.n	8012a2c <tcp_process+0x7bc>
    default:
      break;
 8012a10:	bf00      	nop
 8012a12:	e00c      	b.n	8012a2e <tcp_process+0x7be>
      break;
 8012a14:	bf00      	nop
 8012a16:	e00a      	b.n	8012a2e <tcp_process+0x7be>
      break;
 8012a18:	bf00      	nop
 8012a1a:	e008      	b.n	8012a2e <tcp_process+0x7be>
      break;
 8012a1c:	bf00      	nop
 8012a1e:	e006      	b.n	8012a2e <tcp_process+0x7be>
      break;
 8012a20:	bf00      	nop
 8012a22:	e004      	b.n	8012a2e <tcp_process+0x7be>
      break;
 8012a24:	bf00      	nop
 8012a26:	e002      	b.n	8012a2e <tcp_process+0x7be>
      break;
 8012a28:	bf00      	nop
 8012a2a:	e000      	b.n	8012a2e <tcp_process+0x7be>
      break;
 8012a2c:	bf00      	nop
  }
  return ERR_OK;
 8012a2e:	2300      	movs	r3, #0
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	3724      	adds	r7, #36	; 0x24
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd90      	pop	{r4, r7, pc}
 8012a38:	240077fc 	.word	0x240077fc
 8012a3c:	24007810 	.word	0x24007810
 8012a40:	240040f8 	.word	0x240040f8
 8012a44:	240040f0 	.word	0x240040f0
 8012a48:	240040f9 	.word	0x240040f9
 8012a4c:	24007800 	.word	0x24007800

08012a50 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012a50:	b590      	push	{r4, r7, lr}
 8012a52:	b085      	sub	sp, #20
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d106      	bne.n	8012a6e <tcp_oos_insert_segment+0x1e>
 8012a60:	4b3b      	ldr	r3, [pc, #236]	; (8012b50 <tcp_oos_insert_segment+0x100>)
 8012a62:	f240 421f 	movw	r2, #1055	; 0x41f
 8012a66:	493b      	ldr	r1, [pc, #236]	; (8012b54 <tcp_oos_insert_segment+0x104>)
 8012a68:	483b      	ldr	r0, [pc, #236]	; (8012b58 <tcp_oos_insert_segment+0x108>)
 8012a6a:	f006 f85f 	bl	8018b2c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	68db      	ldr	r3, [r3, #12]
 8012a72:	899b      	ldrh	r3, [r3, #12]
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7fb f8aa 	bl	800dbd0 <lwip_htons>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	b2db      	uxtb	r3, r3
 8012a80:	f003 0301 	and.w	r3, r3, #1
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d028      	beq.n	8012ada <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012a88:	6838      	ldr	r0, [r7, #0]
 8012a8a:	f7fe f97f 	bl	8010d8c <tcp_segs_free>
    next = NULL;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	603b      	str	r3, [r7, #0]
 8012a92:	e056      	b.n	8012b42 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	68db      	ldr	r3, [r3, #12]
 8012a98:	899b      	ldrh	r3, [r3, #12]
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7fb f897 	bl	800dbd0 <lwip_htons>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	b2db      	uxtb	r3, r3
 8012aa6:	f003 0301 	and.w	r3, r3, #1
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d00d      	beq.n	8012aca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	68db      	ldr	r3, [r3, #12]
 8012ab2:	899b      	ldrh	r3, [r3, #12]
 8012ab4:	b29c      	uxth	r4, r3
 8012ab6:	2001      	movs	r0, #1
 8012ab8:	f7fb f88a 	bl	800dbd0 <lwip_htons>
 8012abc:	4603      	mov	r3, r0
 8012abe:	461a      	mov	r2, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	68db      	ldr	r3, [r3, #12]
 8012ac4:	4322      	orrs	r2, r4
 8012ac6:	b292      	uxth	r2, r2
 8012ac8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012ad4:	68f8      	ldr	r0, [r7, #12]
 8012ad6:	f7fe f96e 	bl	8010db6 <tcp_seg_free>
    while (next &&
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d00e      	beq.n	8012afe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	891b      	ldrh	r3, [r3, #8]
 8012ae4:	461a      	mov	r2, r3
 8012ae6:	4b1d      	ldr	r3, [pc, #116]	; (8012b5c <tcp_oos_insert_segment+0x10c>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	441a      	add	r2, r3
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	68db      	ldr	r3, [r3, #12]
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	6839      	ldr	r1, [r7, #0]
 8012af4:	8909      	ldrh	r1, [r1, #8]
 8012af6:	440b      	add	r3, r1
 8012af8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	daca      	bge.n	8012a94 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d01e      	beq.n	8012b42 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	891b      	ldrh	r3, [r3, #8]
 8012b08:	461a      	mov	r2, r3
 8012b0a:	4b14      	ldr	r3, [pc, #80]	; (8012b5c <tcp_oos_insert_segment+0x10c>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	441a      	add	r2, r3
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	68db      	ldr	r3, [r3, #12]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	dd12      	ble.n	8012b42 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	68db      	ldr	r3, [r3, #12]
 8012b20:	685b      	ldr	r3, [r3, #4]
 8012b22:	b29a      	uxth	r2, r3
 8012b24:	4b0d      	ldr	r3, [pc, #52]	; (8012b5c <tcp_oos_insert_segment+0x10c>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	b29b      	uxth	r3, r3
 8012b2a:	1ad3      	subs	r3, r2, r3
 8012b2c:	b29a      	uxth	r2, r3
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	685a      	ldr	r2, [r3, #4]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	891b      	ldrh	r3, [r3, #8]
 8012b3a:	4619      	mov	r1, r3
 8012b3c:	4610      	mov	r0, r2
 8012b3e:	f7fc fb6b 	bl	800f218 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	683a      	ldr	r2, [r7, #0]
 8012b46:	601a      	str	r2, [r3, #0]
}
 8012b48:	bf00      	nop
 8012b4a:	3714      	adds	r7, #20
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd90      	pop	{r4, r7, pc}
 8012b50:	0801b040 	.word	0x0801b040
 8012b54:	0801b300 	.word	0x0801b300
 8012b58:	0801b08c 	.word	0x0801b08c
 8012b5c:	240040ec 	.word	0x240040ec

08012b60 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012b60:	b5b0      	push	{r4, r5, r7, lr}
 8012b62:	b086      	sub	sp, #24
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	607a      	str	r2, [r7, #4]
 8012b6c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012b6e:	e03e      	b.n	8012bee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7fc fd5e 	bl	800f640 <pbuf_clen>
 8012b84:	4603      	mov	r3, r0
 8012b86:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b8e:	8a7a      	ldrh	r2, [r7, #18]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d906      	bls.n	8012ba2 <tcp_free_acked_segments+0x42>
 8012b94:	4b2a      	ldr	r3, [pc, #168]	; (8012c40 <tcp_free_acked_segments+0xe0>)
 8012b96:	f240 4257 	movw	r2, #1111	; 0x457
 8012b9a:	492a      	ldr	r1, [pc, #168]	; (8012c44 <tcp_free_acked_segments+0xe4>)
 8012b9c:	482a      	ldr	r0, [pc, #168]	; (8012c48 <tcp_free_acked_segments+0xe8>)
 8012b9e:	f005 ffc5 	bl	8018b2c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012ba8:	8a7b      	ldrh	r3, [r7, #18]
 8012baa:	1ad3      	subs	r3, r2, r3
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	891a      	ldrh	r2, [r3, #8]
 8012bb8:	4b24      	ldr	r3, [pc, #144]	; (8012c4c <tcp_free_acked_segments+0xec>)
 8012bba:	881b      	ldrh	r3, [r3, #0]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	b29a      	uxth	r2, r3
 8012bc0:	4b22      	ldr	r3, [pc, #136]	; (8012c4c <tcp_free_acked_segments+0xec>)
 8012bc2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012bc4:	6978      	ldr	r0, [r7, #20]
 8012bc6:	f7fe f8f6 	bl	8010db6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d00c      	beq.n	8012bee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d109      	bne.n	8012bee <tcp_free_acked_segments+0x8e>
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d106      	bne.n	8012bee <tcp_free_acked_segments+0x8e>
 8012be0:	4b17      	ldr	r3, [pc, #92]	; (8012c40 <tcp_free_acked_segments+0xe0>)
 8012be2:	f240 4261 	movw	r2, #1121	; 0x461
 8012be6:	491a      	ldr	r1, [pc, #104]	; (8012c50 <tcp_free_acked_segments+0xf0>)
 8012be8:	4817      	ldr	r0, [pc, #92]	; (8012c48 <tcp_free_acked_segments+0xe8>)
 8012bea:	f005 ff9f 	bl	8018b2c <iprintf>
  while (seg_list != NULL &&
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d020      	beq.n	8012c36 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7fa fffd 	bl	800dbfa <lwip_htonl>
 8012c00:	4604      	mov	r4, r0
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	891b      	ldrh	r3, [r3, #8]
 8012c06:	461d      	mov	r5, r3
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	68db      	ldr	r3, [r3, #12]
 8012c0c:	899b      	ldrh	r3, [r3, #12]
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7fa ffdd 	bl	800dbd0 <lwip_htons>
 8012c16:	4603      	mov	r3, r0
 8012c18:	b2db      	uxtb	r3, r3
 8012c1a:	f003 0303 	and.w	r3, r3, #3
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d001      	beq.n	8012c26 <tcp_free_acked_segments+0xc6>
 8012c22:	2301      	movs	r3, #1
 8012c24:	e000      	b.n	8012c28 <tcp_free_acked_segments+0xc8>
 8012c26:	2300      	movs	r3, #0
 8012c28:	442b      	add	r3, r5
 8012c2a:	18e2      	adds	r2, r4, r3
 8012c2c:	4b09      	ldr	r3, [pc, #36]	; (8012c54 <tcp_free_acked_segments+0xf4>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	dd9c      	ble.n	8012b70 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012c36:	68bb      	ldr	r3, [r7, #8]
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3718      	adds	r7, #24
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8012c40:	0801b040 	.word	0x0801b040
 8012c44:	0801b328 	.word	0x0801b328
 8012c48:	0801b08c 	.word	0x0801b08c
 8012c4c:	240040f4 	.word	0x240040f4
 8012c50:	0801b350 	.word	0x0801b350
 8012c54:	240040f0 	.word	0x240040f0

08012c58 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012c58:	b5b0      	push	{r4, r5, r7, lr}
 8012c5a:	b094      	sub	sp, #80	; 0x50
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012c60:	2300      	movs	r3, #0
 8012c62:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d106      	bne.n	8012c78 <tcp_receive+0x20>
 8012c6a:	4ba6      	ldr	r3, [pc, #664]	; (8012f04 <tcp_receive+0x2ac>)
 8012c6c:	f240 427b 	movw	r2, #1147	; 0x47b
 8012c70:	49a5      	ldr	r1, [pc, #660]	; (8012f08 <tcp_receive+0x2b0>)
 8012c72:	48a6      	ldr	r0, [pc, #664]	; (8012f0c <tcp_receive+0x2b4>)
 8012c74:	f005 ff5a 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	7d1b      	ldrb	r3, [r3, #20]
 8012c7c:	2b03      	cmp	r3, #3
 8012c7e:	d806      	bhi.n	8012c8e <tcp_receive+0x36>
 8012c80:	4ba0      	ldr	r3, [pc, #640]	; (8012f04 <tcp_receive+0x2ac>)
 8012c82:	f240 427c 	movw	r2, #1148	; 0x47c
 8012c86:	49a2      	ldr	r1, [pc, #648]	; (8012f10 <tcp_receive+0x2b8>)
 8012c88:	48a0      	ldr	r0, [pc, #640]	; (8012f0c <tcp_receive+0x2b4>)
 8012c8a:	f005 ff4f 	bl	8018b2c <iprintf>

  if (flags & TCP_ACK) {
 8012c8e:	4ba1      	ldr	r3, [pc, #644]	; (8012f14 <tcp_receive+0x2bc>)
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	f003 0310 	and.w	r3, r3, #16
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	f000 8263 	beq.w	8013162 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ca8:	4413      	add	r3, r2
 8012caa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012cb0:	4b99      	ldr	r3, [pc, #612]	; (8012f18 <tcp_receive+0x2c0>)
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	1ad3      	subs	r3, r2, r3
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	db1b      	blt.n	8012cf2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012cbe:	4b96      	ldr	r3, [pc, #600]	; (8012f18 <tcp_receive+0x2c0>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d106      	bne.n	8012cd4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012cca:	4b94      	ldr	r3, [pc, #592]	; (8012f1c <tcp_receive+0x2c4>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	1ad3      	subs	r3, r2, r3
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	db0e      	blt.n	8012cf2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012cd8:	4b90      	ldr	r3, [pc, #576]	; (8012f1c <tcp_receive+0x2c4>)
 8012cda:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d125      	bne.n	8012d2c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012ce0:	4b8f      	ldr	r3, [pc, #572]	; (8012f20 <tcp_receive+0x2c8>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	89db      	ldrh	r3, [r3, #14]
 8012ce6:	b29a      	uxth	r2, r3
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d91c      	bls.n	8012d2c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012cf2:	4b8b      	ldr	r3, [pc, #556]	; (8012f20 <tcp_receive+0x2c8>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	89db      	ldrh	r3, [r3, #14]
 8012cf8:	b29a      	uxth	r2, r3
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d205      	bcs.n	8012d1c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012d1c:	4b7e      	ldr	r3, [pc, #504]	; (8012f18 <tcp_receive+0x2c0>)
 8012d1e:	681a      	ldr	r2, [r3, #0]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012d24:	4b7d      	ldr	r3, [pc, #500]	; (8012f1c <tcp_receive+0x2c4>)
 8012d26:	681a      	ldr	r2, [r3, #0]
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012d2c:	4b7b      	ldr	r3, [pc, #492]	; (8012f1c <tcp_receive+0x2c4>)
 8012d2e:	681a      	ldr	r2, [r3, #0]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d34:	1ad3      	subs	r3, r2, r3
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	dc58      	bgt.n	8012dec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012d3a:	4b7a      	ldr	r3, [pc, #488]	; (8012f24 <tcp_receive+0x2cc>)
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d14b      	bne.n	8012dda <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012d4c:	4413      	add	r3, r2
 8012d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d50:	429a      	cmp	r2, r3
 8012d52:	d142      	bne.n	8012dda <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	db3d      	blt.n	8012dda <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d62:	4b6e      	ldr	r3, [pc, #440]	; (8012f1c <tcp_receive+0x2c4>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d137      	bne.n	8012dda <tcp_receive+0x182>
              found_dupack = 1;
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012d74:	2bff      	cmp	r3, #255	; 0xff
 8012d76:	d007      	beq.n	8012d88 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012d7e:	3301      	adds	r3, #1
 8012d80:	b2da      	uxtb	r2, r3
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012d8e:	2b03      	cmp	r3, #3
 8012d90:	d91b      	bls.n	8012dca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d9c:	4413      	add	r3, r2
 8012d9e:	b29a      	uxth	r2, r3
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012da6:	429a      	cmp	r2, r3
 8012da8:	d30a      	bcc.n	8012dc0 <tcp_receive+0x168>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012db4:	4413      	add	r3, r2
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012dbe:	e004      	b.n	8012dca <tcp_receive+0x172>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012dc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012dd0:	2b02      	cmp	r3, #2
 8012dd2:	d902      	bls.n	8012dda <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f002 fb41 	bl	801545c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	f040 8160 	bne.w	80130a2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2200      	movs	r2, #0
 8012de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012dea:	e15a      	b.n	80130a2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012dec:	4b4b      	ldr	r3, [pc, #300]	; (8012f1c <tcp_receive+0x2c4>)
 8012dee:	681a      	ldr	r2, [r3, #0]
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012df4:	1ad3      	subs	r3, r2, r3
 8012df6:	3b01      	subs	r3, #1
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	f2c0 814d 	blt.w	8013098 <tcp_receive+0x440>
 8012dfe:	4b47      	ldr	r3, [pc, #284]	; (8012f1c <tcp_receive+0x2c4>)
 8012e00:	681a      	ldr	r2, [r3, #0]
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e06:	1ad3      	subs	r3, r2, r3
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	f300 8145 	bgt.w	8013098 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	8b5b      	ldrh	r3, [r3, #26]
 8012e12:	f003 0304 	and.w	r3, r3, #4
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d010      	beq.n	8012e3c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	8b5b      	ldrh	r3, [r3, #26]
 8012e1e:	f023 0304 	bic.w	r3, r3, #4
 8012e22:	b29a      	uxth	r2, r3
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2200      	movs	r2, #0
 8012e38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012e4a:	10db      	asrs	r3, r3, #3
 8012e4c:	b21b      	sxth	r3, r3
 8012e4e:	b29a      	uxth	r2, r3
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012e56:	b29b      	uxth	r3, r3
 8012e58:	4413      	add	r3, r2
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	b21a      	sxth	r2, r3
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012e64:	4b2d      	ldr	r3, [pc, #180]	; (8012f1c <tcp_receive+0x2c4>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	b29a      	uxth	r2, r3
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	1ad3      	subs	r3, r2, r3
 8012e72:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2200      	movs	r2, #0
 8012e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012e7c:	4b27      	ldr	r3, [pc, #156]	; (8012f1c <tcp_receive+0x2c4>)
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	7d1b      	ldrb	r3, [r3, #20]
 8012e88:	2b03      	cmp	r3, #3
 8012e8a:	f240 8096 	bls.w	8012fba <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d244      	bcs.n	8012f28 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	8b5b      	ldrh	r3, [r3, #26]
 8012ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d001      	beq.n	8012eae <tcp_receive+0x256>
 8012eaa:	2301      	movs	r3, #1
 8012eac:	e000      	b.n	8012eb0 <tcp_receive+0x258>
 8012eae:	2302      	movs	r3, #2
 8012eb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012eb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012eb8:	b29a      	uxth	r2, r3
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ebe:	fb12 f303 	smulbb	r3, r2, r3
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012ec6:	4293      	cmp	r3, r2
 8012ec8:	bf28      	it	cs
 8012eca:	4613      	movcs	r3, r2
 8012ecc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012ed4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012ed6:	4413      	add	r3, r2
 8012ed8:	b29a      	uxth	r2, r3
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d309      	bcc.n	8012ef8 <tcp_receive+0x2a0>
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012eea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012eec:	4413      	add	r3, r2
 8012eee:	b29a      	uxth	r2, r3
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012ef6:	e060      	b.n	8012fba <tcp_receive+0x362>
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012efe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012f02:	e05a      	b.n	8012fba <tcp_receive+0x362>
 8012f04:	0801b040 	.word	0x0801b040
 8012f08:	0801b370 	.word	0x0801b370
 8012f0c:	0801b08c 	.word	0x0801b08c
 8012f10:	0801b38c 	.word	0x0801b38c
 8012f14:	240040f8 	.word	0x240040f8
 8012f18:	240040ec 	.word	0x240040ec
 8012f1c:	240040f0 	.word	0x240040f0
 8012f20:	240040dc 	.word	0x240040dc
 8012f24:	240040f6 	.word	0x240040f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012f2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012f30:	4413      	add	r3, r2
 8012f32:	b29a      	uxth	r2, r3
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d309      	bcc.n	8012f52 <tcp_receive+0x2fa>
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012f44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012f46:	4413      	add	r3, r2
 8012f48:	b29a      	uxth	r2, r3
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012f50:	e004      	b.n	8012f5c <tcp_receive+0x304>
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d326      	bcc.n	8012fba <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f78:	1ad3      	subs	r3, r2, r3
 8012f7a:	b29a      	uxth	r2, r3
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f8c:	4413      	add	r3, r2
 8012f8e:	b29a      	uxth	r2, r3
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d30a      	bcc.n	8012fb0 <tcp_receive+0x358>
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fa4:	4413      	add	r3, r2
 8012fa6:	b29a      	uxth	r2, r3
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012fae:	e004      	b.n	8012fba <tcp_receive+0x362>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fc2:	4a98      	ldr	r2, [pc, #608]	; (8013224 <tcp_receive+0x5cc>)
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f7ff fdcb 	bl	8012b60 <tcp_free_acked_segments>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fd8:	4a93      	ldr	r2, [pc, #588]	; (8013228 <tcp_receive+0x5d0>)
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	f7ff fdc0 	bl	8012b60 <tcp_free_acked_segments>
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d104      	bne.n	8012ff8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ff4:	861a      	strh	r2, [r3, #48]	; 0x30
 8012ff6:	e002      	b.n	8012ffe <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2200      	movs	r2, #0
 8013002:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013008:	2b00      	cmp	r3, #0
 801300a:	d103      	bne.n	8013014 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2200      	movs	r2, #0
 8013010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801301a:	4b84      	ldr	r3, [pc, #528]	; (801322c <tcp_receive+0x5d4>)
 801301c:	881b      	ldrh	r3, [r3, #0]
 801301e:	4413      	add	r3, r2
 8013020:	b29a      	uxth	r2, r3
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	8b5b      	ldrh	r3, [r3, #26]
 801302c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013030:	2b00      	cmp	r3, #0
 8013032:	d035      	beq.n	80130a0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013038:	2b00      	cmp	r3, #0
 801303a:	d118      	bne.n	801306e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013040:	2b00      	cmp	r3, #0
 8013042:	d00c      	beq.n	801305e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801304c:	68db      	ldr	r3, [r3, #12]
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	4618      	mov	r0, r3
 8013052:	f7fa fdd2 	bl	800dbfa <lwip_htonl>
 8013056:	4603      	mov	r3, r0
 8013058:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801305a:	2b00      	cmp	r3, #0
 801305c:	dc20      	bgt.n	80130a0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	8b5b      	ldrh	r3, [r3, #26]
 8013062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013066:	b29a      	uxth	r2, r3
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801306c:	e018      	b.n	80130a0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013076:	68db      	ldr	r3, [r3, #12]
 8013078:	685b      	ldr	r3, [r3, #4]
 801307a:	4618      	mov	r0, r3
 801307c:	f7fa fdbd 	bl	800dbfa <lwip_htonl>
 8013080:	4603      	mov	r3, r0
 8013082:	1ae3      	subs	r3, r4, r3
 8013084:	2b00      	cmp	r3, #0
 8013086:	dc0b      	bgt.n	80130a0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	8b5b      	ldrh	r3, [r3, #26]
 801308c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013090:	b29a      	uxth	r2, r3
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013096:	e003      	b.n	80130a0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f002 fbcd 	bl	8015838 <tcp_send_empty_ack>
 801309e:	e000      	b.n	80130a2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80130a0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d05b      	beq.n	8013162 <tcp_receive+0x50a>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130ae:	4b60      	ldr	r3, [pc, #384]	; (8013230 <tcp_receive+0x5d8>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	1ad3      	subs	r3, r2, r3
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	da54      	bge.n	8013162 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80130b8:	4b5e      	ldr	r3, [pc, #376]	; (8013234 <tcp_receive+0x5dc>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	b29a      	uxth	r2, r3
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	1ad3      	subs	r3, r2, r3
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80130cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80130d6:	10db      	asrs	r3, r3, #3
 80130d8:	b21b      	sxth	r3, r3
 80130da:	b29b      	uxth	r3, r3
 80130dc:	1ad3      	subs	r3, r2, r3
 80130de:	b29b      	uxth	r3, r3
 80130e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80130ea:	b29a      	uxth	r2, r3
 80130ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80130f0:	4413      	add	r3, r2
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	b21a      	sxth	r2, r3
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80130fa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80130fe:	2b00      	cmp	r3, #0
 8013100:	da05      	bge.n	801310e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8013102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013106:	425b      	negs	r3, r3
 8013108:	b29b      	uxth	r3, r3
 801310a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801310e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013118:	109b      	asrs	r3, r3, #2
 801311a:	b21b      	sxth	r3, r3
 801311c:	b29b      	uxth	r3, r3
 801311e:	1ad3      	subs	r3, r2, r3
 8013120:	b29b      	uxth	r3, r3
 8013122:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801312c:	b29a      	uxth	r2, r3
 801312e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013132:	4413      	add	r3, r2
 8013134:	b29b      	uxth	r3, r3
 8013136:	b21a      	sxth	r2, r3
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013142:	10db      	asrs	r3, r3, #3
 8013144:	b21b      	sxth	r3, r3
 8013146:	b29a      	uxth	r2, r3
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801314e:	b29b      	uxth	r3, r3
 8013150:	4413      	add	r3, r2
 8013152:	b29b      	uxth	r3, r3
 8013154:	b21a      	sxth	r2, r3
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2200      	movs	r2, #0
 8013160:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013162:	4b35      	ldr	r3, [pc, #212]	; (8013238 <tcp_receive+0x5e0>)
 8013164:	881b      	ldrh	r3, [r3, #0]
 8013166:	2b00      	cmp	r3, #0
 8013168:	f000 84e1 	beq.w	8013b2e <tcp_receive+0xed6>
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	7d1b      	ldrb	r3, [r3, #20]
 8013170:	2b06      	cmp	r3, #6
 8013172:	f200 84dc 	bhi.w	8013b2e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801317a:	4b30      	ldr	r3, [pc, #192]	; (801323c <tcp_receive+0x5e4>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	1ad3      	subs	r3, r2, r3
 8013180:	3b01      	subs	r3, #1
 8013182:	2b00      	cmp	r3, #0
 8013184:	f2c0 808e 	blt.w	80132a4 <tcp_receive+0x64c>
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801318c:	4b2a      	ldr	r3, [pc, #168]	; (8013238 <tcp_receive+0x5e0>)
 801318e:	881b      	ldrh	r3, [r3, #0]
 8013190:	4619      	mov	r1, r3
 8013192:	4b2a      	ldr	r3, [pc, #168]	; (801323c <tcp_receive+0x5e4>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	440b      	add	r3, r1
 8013198:	1ad3      	subs	r3, r2, r3
 801319a:	3301      	adds	r3, #1
 801319c:	2b00      	cmp	r3, #0
 801319e:	f300 8081 	bgt.w	80132a4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80131a2:	4b27      	ldr	r3, [pc, #156]	; (8013240 <tcp_receive+0x5e8>)
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80131ac:	4b23      	ldr	r3, [pc, #140]	; (801323c <tcp_receive+0x5e4>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	1ad3      	subs	r3, r2, r3
 80131b2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80131b4:	4b22      	ldr	r3, [pc, #136]	; (8013240 <tcp_receive+0x5e8>)
 80131b6:	685b      	ldr	r3, [r3, #4]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d106      	bne.n	80131ca <tcp_receive+0x572>
 80131bc:	4b21      	ldr	r3, [pc, #132]	; (8013244 <tcp_receive+0x5ec>)
 80131be:	f240 5294 	movw	r2, #1428	; 0x594
 80131c2:	4921      	ldr	r1, [pc, #132]	; (8013248 <tcp_receive+0x5f0>)
 80131c4:	4821      	ldr	r0, [pc, #132]	; (801324c <tcp_receive+0x5f4>)
 80131c6:	f005 fcb1 	bl	8018b2c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80131ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d906      	bls.n	80131e2 <tcp_receive+0x58a>
 80131d4:	4b1b      	ldr	r3, [pc, #108]	; (8013244 <tcp_receive+0x5ec>)
 80131d6:	f240 5295 	movw	r2, #1429	; 0x595
 80131da:	491d      	ldr	r1, [pc, #116]	; (8013250 <tcp_receive+0x5f8>)
 80131dc:	481b      	ldr	r0, [pc, #108]	; (801324c <tcp_receive+0x5f4>)
 80131de:	f005 fca5 	bl	8018b2c <iprintf>
      off = (u16_t)off32;
 80131e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80131e8:	4b15      	ldr	r3, [pc, #84]	; (8013240 <tcp_receive+0x5e8>)
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	891b      	ldrh	r3, [r3, #8]
 80131ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d906      	bls.n	8013204 <tcp_receive+0x5ac>
 80131f6:	4b13      	ldr	r3, [pc, #76]	; (8013244 <tcp_receive+0x5ec>)
 80131f8:	f240 5297 	movw	r2, #1431	; 0x597
 80131fc:	4915      	ldr	r1, [pc, #84]	; (8013254 <tcp_receive+0x5fc>)
 80131fe:	4813      	ldr	r0, [pc, #76]	; (801324c <tcp_receive+0x5f4>)
 8013200:	f005 fc94 	bl	8018b2c <iprintf>
      inseg.len -= off;
 8013204:	4b0e      	ldr	r3, [pc, #56]	; (8013240 <tcp_receive+0x5e8>)
 8013206:	891a      	ldrh	r2, [r3, #8]
 8013208:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801320c:	1ad3      	subs	r3, r2, r3
 801320e:	b29a      	uxth	r2, r3
 8013210:	4b0b      	ldr	r3, [pc, #44]	; (8013240 <tcp_receive+0x5e8>)
 8013212:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013214:	4b0a      	ldr	r3, [pc, #40]	; (8013240 <tcp_receive+0x5e8>)
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	891a      	ldrh	r2, [r3, #8]
 801321a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801321e:	1ad3      	subs	r3, r2, r3
 8013220:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013222:	e029      	b.n	8013278 <tcp_receive+0x620>
 8013224:	0801b3a8 	.word	0x0801b3a8
 8013228:	0801b3b0 	.word	0x0801b3b0
 801322c:	240040f4 	.word	0x240040f4
 8013230:	240040f0 	.word	0x240040f0
 8013234:	24007804 	.word	0x24007804
 8013238:	240040f6 	.word	0x240040f6
 801323c:	240040ec 	.word	0x240040ec
 8013240:	240040cc 	.word	0x240040cc
 8013244:	0801b040 	.word	0x0801b040
 8013248:	0801b3b8 	.word	0x0801b3b8
 801324c:	0801b08c 	.word	0x0801b08c
 8013250:	0801b3c8 	.word	0x0801b3c8
 8013254:	0801b3d8 	.word	0x0801b3d8
        off -= p->len;
 8013258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801325a:	895b      	ldrh	r3, [r3, #10]
 801325c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013260:	1ad3      	subs	r3, r2, r3
 8013262:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013268:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801326a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801326c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801326e:	2200      	movs	r2, #0
 8013270:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801327a:	895b      	ldrh	r3, [r3, #10]
 801327c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013280:	429a      	cmp	r2, r3
 8013282:	d8e9      	bhi.n	8013258 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013284:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013288:	4619      	mov	r1, r3
 801328a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801328c:	f7fc f8c4 	bl	800f418 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013294:	4a91      	ldr	r2, [pc, #580]	; (80134dc <tcp_receive+0x884>)
 8013296:	6013      	str	r3, [r2, #0]
 8013298:	4b91      	ldr	r3, [pc, #580]	; (80134e0 <tcp_receive+0x888>)
 801329a:	68db      	ldr	r3, [r3, #12]
 801329c:	4a8f      	ldr	r2, [pc, #572]	; (80134dc <tcp_receive+0x884>)
 801329e:	6812      	ldr	r2, [r2, #0]
 80132a0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80132a2:	e00d      	b.n	80132c0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80132a4:	4b8d      	ldr	r3, [pc, #564]	; (80134dc <tcp_receive+0x884>)
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132ac:	1ad3      	subs	r3, r2, r3
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	da06      	bge.n	80132c0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	8b5b      	ldrh	r3, [r3, #26]
 80132b6:	f043 0302 	orr.w	r3, r3, #2
 80132ba:	b29a      	uxth	r2, r3
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80132c0:	4b86      	ldr	r3, [pc, #536]	; (80134dc <tcp_receive+0x884>)
 80132c2:	681a      	ldr	r2, [r3, #0]
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132c8:	1ad3      	subs	r3, r2, r3
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	f2c0 842a 	blt.w	8013b24 <tcp_receive+0xecc>
 80132d0:	4b82      	ldr	r3, [pc, #520]	; (80134dc <tcp_receive+0x884>)
 80132d2:	681a      	ldr	r2, [r3, #0]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132d8:	6879      	ldr	r1, [r7, #4]
 80132da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80132dc:	440b      	add	r3, r1
 80132de:	1ad3      	subs	r3, r2, r3
 80132e0:	3301      	adds	r3, #1
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	f300 841e 	bgt.w	8013b24 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80132ec:	4b7b      	ldr	r3, [pc, #492]	; (80134dc <tcp_receive+0x884>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	f040 829a 	bne.w	801382a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80132f6:	4b7a      	ldr	r3, [pc, #488]	; (80134e0 <tcp_receive+0x888>)
 80132f8:	891c      	ldrh	r4, [r3, #8]
 80132fa:	4b79      	ldr	r3, [pc, #484]	; (80134e0 <tcp_receive+0x888>)
 80132fc:	68db      	ldr	r3, [r3, #12]
 80132fe:	899b      	ldrh	r3, [r3, #12]
 8013300:	b29b      	uxth	r3, r3
 8013302:	4618      	mov	r0, r3
 8013304:	f7fa fc64 	bl	800dbd0 <lwip_htons>
 8013308:	4603      	mov	r3, r0
 801330a:	b2db      	uxtb	r3, r3
 801330c:	f003 0303 	and.w	r3, r3, #3
 8013310:	2b00      	cmp	r3, #0
 8013312:	d001      	beq.n	8013318 <tcp_receive+0x6c0>
 8013314:	2301      	movs	r3, #1
 8013316:	e000      	b.n	801331a <tcp_receive+0x6c2>
 8013318:	2300      	movs	r3, #0
 801331a:	4423      	add	r3, r4
 801331c:	b29a      	uxth	r2, r3
 801331e:	4b71      	ldr	r3, [pc, #452]	; (80134e4 <tcp_receive+0x88c>)
 8013320:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013326:	4b6f      	ldr	r3, [pc, #444]	; (80134e4 <tcp_receive+0x88c>)
 8013328:	881b      	ldrh	r3, [r3, #0]
 801332a:	429a      	cmp	r2, r3
 801332c:	d275      	bcs.n	801341a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801332e:	4b6c      	ldr	r3, [pc, #432]	; (80134e0 <tcp_receive+0x888>)
 8013330:	68db      	ldr	r3, [r3, #12]
 8013332:	899b      	ldrh	r3, [r3, #12]
 8013334:	b29b      	uxth	r3, r3
 8013336:	4618      	mov	r0, r3
 8013338:	f7fa fc4a 	bl	800dbd0 <lwip_htons>
 801333c:	4603      	mov	r3, r0
 801333e:	b2db      	uxtb	r3, r3
 8013340:	f003 0301 	and.w	r3, r3, #1
 8013344:	2b00      	cmp	r3, #0
 8013346:	d01f      	beq.n	8013388 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013348:	4b65      	ldr	r3, [pc, #404]	; (80134e0 <tcp_receive+0x888>)
 801334a:	68db      	ldr	r3, [r3, #12]
 801334c:	899b      	ldrh	r3, [r3, #12]
 801334e:	b29b      	uxth	r3, r3
 8013350:	b21b      	sxth	r3, r3
 8013352:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013356:	b21c      	sxth	r4, r3
 8013358:	4b61      	ldr	r3, [pc, #388]	; (80134e0 <tcp_receive+0x888>)
 801335a:	68db      	ldr	r3, [r3, #12]
 801335c:	899b      	ldrh	r3, [r3, #12]
 801335e:	b29b      	uxth	r3, r3
 8013360:	4618      	mov	r0, r3
 8013362:	f7fa fc35 	bl	800dbd0 <lwip_htons>
 8013366:	4603      	mov	r3, r0
 8013368:	b2db      	uxtb	r3, r3
 801336a:	b29b      	uxth	r3, r3
 801336c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013370:	b29b      	uxth	r3, r3
 8013372:	4618      	mov	r0, r3
 8013374:	f7fa fc2c 	bl	800dbd0 <lwip_htons>
 8013378:	4603      	mov	r3, r0
 801337a:	b21b      	sxth	r3, r3
 801337c:	4323      	orrs	r3, r4
 801337e:	b21a      	sxth	r2, r3
 8013380:	4b57      	ldr	r3, [pc, #348]	; (80134e0 <tcp_receive+0x888>)
 8013382:	68db      	ldr	r3, [r3, #12]
 8013384:	b292      	uxth	r2, r2
 8013386:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801338c:	4b54      	ldr	r3, [pc, #336]	; (80134e0 <tcp_receive+0x888>)
 801338e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013390:	4b53      	ldr	r3, [pc, #332]	; (80134e0 <tcp_receive+0x888>)
 8013392:	68db      	ldr	r3, [r3, #12]
 8013394:	899b      	ldrh	r3, [r3, #12]
 8013396:	b29b      	uxth	r3, r3
 8013398:	4618      	mov	r0, r3
 801339a:	f7fa fc19 	bl	800dbd0 <lwip_htons>
 801339e:	4603      	mov	r3, r0
 80133a0:	b2db      	uxtb	r3, r3
 80133a2:	f003 0302 	and.w	r3, r3, #2
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d005      	beq.n	80133b6 <tcp_receive+0x75e>
            inseg.len -= 1;
 80133aa:	4b4d      	ldr	r3, [pc, #308]	; (80134e0 <tcp_receive+0x888>)
 80133ac:	891b      	ldrh	r3, [r3, #8]
 80133ae:	3b01      	subs	r3, #1
 80133b0:	b29a      	uxth	r2, r3
 80133b2:	4b4b      	ldr	r3, [pc, #300]	; (80134e0 <tcp_receive+0x888>)
 80133b4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80133b6:	4b4a      	ldr	r3, [pc, #296]	; (80134e0 <tcp_receive+0x888>)
 80133b8:	685b      	ldr	r3, [r3, #4]
 80133ba:	4a49      	ldr	r2, [pc, #292]	; (80134e0 <tcp_receive+0x888>)
 80133bc:	8912      	ldrh	r2, [r2, #8]
 80133be:	4611      	mov	r1, r2
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7fb ff29 	bl	800f218 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80133c6:	4b46      	ldr	r3, [pc, #280]	; (80134e0 <tcp_receive+0x888>)
 80133c8:	891c      	ldrh	r4, [r3, #8]
 80133ca:	4b45      	ldr	r3, [pc, #276]	; (80134e0 <tcp_receive+0x888>)
 80133cc:	68db      	ldr	r3, [r3, #12]
 80133ce:	899b      	ldrh	r3, [r3, #12]
 80133d0:	b29b      	uxth	r3, r3
 80133d2:	4618      	mov	r0, r3
 80133d4:	f7fa fbfc 	bl	800dbd0 <lwip_htons>
 80133d8:	4603      	mov	r3, r0
 80133da:	b2db      	uxtb	r3, r3
 80133dc:	f003 0303 	and.w	r3, r3, #3
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d001      	beq.n	80133e8 <tcp_receive+0x790>
 80133e4:	2301      	movs	r3, #1
 80133e6:	e000      	b.n	80133ea <tcp_receive+0x792>
 80133e8:	2300      	movs	r3, #0
 80133ea:	4423      	add	r3, r4
 80133ec:	b29a      	uxth	r2, r3
 80133ee:	4b3d      	ldr	r3, [pc, #244]	; (80134e4 <tcp_receive+0x88c>)
 80133f0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80133f2:	4b3c      	ldr	r3, [pc, #240]	; (80134e4 <tcp_receive+0x88c>)
 80133f4:	881b      	ldrh	r3, [r3, #0]
 80133f6:	461a      	mov	r2, r3
 80133f8:	4b38      	ldr	r3, [pc, #224]	; (80134dc <tcp_receive+0x884>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	441a      	add	r2, r3
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013402:	6879      	ldr	r1, [r7, #4]
 8013404:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013406:	440b      	add	r3, r1
 8013408:	429a      	cmp	r2, r3
 801340a:	d006      	beq.n	801341a <tcp_receive+0x7c2>
 801340c:	4b36      	ldr	r3, [pc, #216]	; (80134e8 <tcp_receive+0x890>)
 801340e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013412:	4936      	ldr	r1, [pc, #216]	; (80134ec <tcp_receive+0x894>)
 8013414:	4836      	ldr	r0, [pc, #216]	; (80134f0 <tcp_receive+0x898>)
 8013416:	f005 fb89 	bl	8018b2c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801341e:	2b00      	cmp	r3, #0
 8013420:	f000 80e7 	beq.w	80135f2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013424:	4b2e      	ldr	r3, [pc, #184]	; (80134e0 <tcp_receive+0x888>)
 8013426:	68db      	ldr	r3, [r3, #12]
 8013428:	899b      	ldrh	r3, [r3, #12]
 801342a:	b29b      	uxth	r3, r3
 801342c:	4618      	mov	r0, r3
 801342e:	f7fa fbcf 	bl	800dbd0 <lwip_htons>
 8013432:	4603      	mov	r3, r0
 8013434:	b2db      	uxtb	r3, r3
 8013436:	f003 0301 	and.w	r3, r3, #1
 801343a:	2b00      	cmp	r3, #0
 801343c:	d010      	beq.n	8013460 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801343e:	e00a      	b.n	8013456 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013444:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801344a:	681a      	ldr	r2, [r3, #0]
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013450:	68f8      	ldr	r0, [r7, #12]
 8013452:	f7fd fcb0 	bl	8010db6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801345a:	2b00      	cmp	r3, #0
 801345c:	d1f0      	bne.n	8013440 <tcp_receive+0x7e8>
 801345e:	e0c8      	b.n	80135f2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013464:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013466:	e052      	b.n	801350e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801346a:	68db      	ldr	r3, [r3, #12]
 801346c:	899b      	ldrh	r3, [r3, #12]
 801346e:	b29b      	uxth	r3, r3
 8013470:	4618      	mov	r0, r3
 8013472:	f7fa fbad 	bl	800dbd0 <lwip_htons>
 8013476:	4603      	mov	r3, r0
 8013478:	b2db      	uxtb	r3, r3
 801347a:	f003 0301 	and.w	r3, r3, #1
 801347e:	2b00      	cmp	r3, #0
 8013480:	d03d      	beq.n	80134fe <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013482:	4b17      	ldr	r3, [pc, #92]	; (80134e0 <tcp_receive+0x888>)
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	899b      	ldrh	r3, [r3, #12]
 8013488:	b29b      	uxth	r3, r3
 801348a:	4618      	mov	r0, r3
 801348c:	f7fa fba0 	bl	800dbd0 <lwip_htons>
 8013490:	4603      	mov	r3, r0
 8013492:	b2db      	uxtb	r3, r3
 8013494:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013498:	2b00      	cmp	r3, #0
 801349a:	d130      	bne.n	80134fe <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801349c:	4b10      	ldr	r3, [pc, #64]	; (80134e0 <tcp_receive+0x888>)
 801349e:	68db      	ldr	r3, [r3, #12]
 80134a0:	899b      	ldrh	r3, [r3, #12]
 80134a2:	b29c      	uxth	r4, r3
 80134a4:	2001      	movs	r0, #1
 80134a6:	f7fa fb93 	bl	800dbd0 <lwip_htons>
 80134aa:	4603      	mov	r3, r0
 80134ac:	461a      	mov	r2, r3
 80134ae:	4b0c      	ldr	r3, [pc, #48]	; (80134e0 <tcp_receive+0x888>)
 80134b0:	68db      	ldr	r3, [r3, #12]
 80134b2:	4322      	orrs	r2, r4
 80134b4:	b292      	uxth	r2, r2
 80134b6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80134b8:	4b09      	ldr	r3, [pc, #36]	; (80134e0 <tcp_receive+0x888>)
 80134ba:	891c      	ldrh	r4, [r3, #8]
 80134bc:	4b08      	ldr	r3, [pc, #32]	; (80134e0 <tcp_receive+0x888>)
 80134be:	68db      	ldr	r3, [r3, #12]
 80134c0:	899b      	ldrh	r3, [r3, #12]
 80134c2:	b29b      	uxth	r3, r3
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7fa fb83 	bl	800dbd0 <lwip_htons>
 80134ca:	4603      	mov	r3, r0
 80134cc:	b2db      	uxtb	r3, r3
 80134ce:	f003 0303 	and.w	r3, r3, #3
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d00e      	beq.n	80134f4 <tcp_receive+0x89c>
 80134d6:	2301      	movs	r3, #1
 80134d8:	e00d      	b.n	80134f6 <tcp_receive+0x89e>
 80134da:	bf00      	nop
 80134dc:	240040ec 	.word	0x240040ec
 80134e0:	240040cc 	.word	0x240040cc
 80134e4:	240040f6 	.word	0x240040f6
 80134e8:	0801b040 	.word	0x0801b040
 80134ec:	0801b3e8 	.word	0x0801b3e8
 80134f0:	0801b08c 	.word	0x0801b08c
 80134f4:	2300      	movs	r3, #0
 80134f6:	4423      	add	r3, r4
 80134f8:	b29a      	uxth	r2, r3
 80134fa:	4b98      	ldr	r3, [pc, #608]	; (801375c <tcp_receive+0xb04>)
 80134fc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80134fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013500:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013508:	6938      	ldr	r0, [r7, #16]
 801350a:	f7fd fc54 	bl	8010db6 <tcp_seg_free>
            while (next &&
 801350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013510:	2b00      	cmp	r3, #0
 8013512:	d00e      	beq.n	8013532 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013514:	4b91      	ldr	r3, [pc, #580]	; (801375c <tcp_receive+0xb04>)
 8013516:	881b      	ldrh	r3, [r3, #0]
 8013518:	461a      	mov	r2, r3
 801351a:	4b91      	ldr	r3, [pc, #580]	; (8013760 <tcp_receive+0xb08>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	441a      	add	r2, r3
 8013520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013522:	68db      	ldr	r3, [r3, #12]
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013528:	8909      	ldrh	r1, [r1, #8]
 801352a:	440b      	add	r3, r1
 801352c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801352e:	2b00      	cmp	r3, #0
 8013530:	da9a      	bge.n	8013468 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013534:	2b00      	cmp	r3, #0
 8013536:	d059      	beq.n	80135ec <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013538:	4b88      	ldr	r3, [pc, #544]	; (801375c <tcp_receive+0xb04>)
 801353a:	881b      	ldrh	r3, [r3, #0]
 801353c:	461a      	mov	r2, r3
 801353e:	4b88      	ldr	r3, [pc, #544]	; (8013760 <tcp_receive+0xb08>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	441a      	add	r2, r3
 8013544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	685b      	ldr	r3, [r3, #4]
 801354a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801354c:	2b00      	cmp	r3, #0
 801354e:	dd4d      	ble.n	80135ec <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013552:	68db      	ldr	r3, [r3, #12]
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	b29a      	uxth	r2, r3
 8013558:	4b81      	ldr	r3, [pc, #516]	; (8013760 <tcp_receive+0xb08>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	b29b      	uxth	r3, r3
 801355e:	1ad3      	subs	r3, r2, r3
 8013560:	b29a      	uxth	r2, r3
 8013562:	4b80      	ldr	r3, [pc, #512]	; (8013764 <tcp_receive+0xb0c>)
 8013564:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013566:	4b7f      	ldr	r3, [pc, #508]	; (8013764 <tcp_receive+0xb0c>)
 8013568:	68db      	ldr	r3, [r3, #12]
 801356a:	899b      	ldrh	r3, [r3, #12]
 801356c:	b29b      	uxth	r3, r3
 801356e:	4618      	mov	r0, r3
 8013570:	f7fa fb2e 	bl	800dbd0 <lwip_htons>
 8013574:	4603      	mov	r3, r0
 8013576:	b2db      	uxtb	r3, r3
 8013578:	f003 0302 	and.w	r3, r3, #2
 801357c:	2b00      	cmp	r3, #0
 801357e:	d005      	beq.n	801358c <tcp_receive+0x934>
                inseg.len -= 1;
 8013580:	4b78      	ldr	r3, [pc, #480]	; (8013764 <tcp_receive+0xb0c>)
 8013582:	891b      	ldrh	r3, [r3, #8]
 8013584:	3b01      	subs	r3, #1
 8013586:	b29a      	uxth	r2, r3
 8013588:	4b76      	ldr	r3, [pc, #472]	; (8013764 <tcp_receive+0xb0c>)
 801358a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801358c:	4b75      	ldr	r3, [pc, #468]	; (8013764 <tcp_receive+0xb0c>)
 801358e:	685b      	ldr	r3, [r3, #4]
 8013590:	4a74      	ldr	r2, [pc, #464]	; (8013764 <tcp_receive+0xb0c>)
 8013592:	8912      	ldrh	r2, [r2, #8]
 8013594:	4611      	mov	r1, r2
 8013596:	4618      	mov	r0, r3
 8013598:	f7fb fe3e 	bl	800f218 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801359c:	4b71      	ldr	r3, [pc, #452]	; (8013764 <tcp_receive+0xb0c>)
 801359e:	891c      	ldrh	r4, [r3, #8]
 80135a0:	4b70      	ldr	r3, [pc, #448]	; (8013764 <tcp_receive+0xb0c>)
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	899b      	ldrh	r3, [r3, #12]
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7fa fb11 	bl	800dbd0 <lwip_htons>
 80135ae:	4603      	mov	r3, r0
 80135b0:	b2db      	uxtb	r3, r3
 80135b2:	f003 0303 	and.w	r3, r3, #3
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d001      	beq.n	80135be <tcp_receive+0x966>
 80135ba:	2301      	movs	r3, #1
 80135bc:	e000      	b.n	80135c0 <tcp_receive+0x968>
 80135be:	2300      	movs	r3, #0
 80135c0:	4423      	add	r3, r4
 80135c2:	b29a      	uxth	r2, r3
 80135c4:	4b65      	ldr	r3, [pc, #404]	; (801375c <tcp_receive+0xb04>)
 80135c6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80135c8:	4b64      	ldr	r3, [pc, #400]	; (801375c <tcp_receive+0xb04>)
 80135ca:	881b      	ldrh	r3, [r3, #0]
 80135cc:	461a      	mov	r2, r3
 80135ce:	4b64      	ldr	r3, [pc, #400]	; (8013760 <tcp_receive+0xb08>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	441a      	add	r2, r3
 80135d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135d6:	68db      	ldr	r3, [r3, #12]
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	429a      	cmp	r2, r3
 80135dc:	d006      	beq.n	80135ec <tcp_receive+0x994>
 80135de:	4b62      	ldr	r3, [pc, #392]	; (8013768 <tcp_receive+0xb10>)
 80135e0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80135e4:	4961      	ldr	r1, [pc, #388]	; (801376c <tcp_receive+0xb14>)
 80135e6:	4862      	ldr	r0, [pc, #392]	; (8013770 <tcp_receive+0xb18>)
 80135e8:	f005 faa0 	bl	8018b2c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80135f0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80135f2:	4b5a      	ldr	r3, [pc, #360]	; (801375c <tcp_receive+0xb04>)
 80135f4:	881b      	ldrh	r3, [r3, #0]
 80135f6:	461a      	mov	r2, r3
 80135f8:	4b59      	ldr	r3, [pc, #356]	; (8013760 <tcp_receive+0xb08>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	441a      	add	r2, r3
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013606:	4b55      	ldr	r3, [pc, #340]	; (801375c <tcp_receive+0xb04>)
 8013608:	881b      	ldrh	r3, [r3, #0]
 801360a:	429a      	cmp	r2, r3
 801360c:	d206      	bcs.n	801361c <tcp_receive+0x9c4>
 801360e:	4b56      	ldr	r3, [pc, #344]	; (8013768 <tcp_receive+0xb10>)
 8013610:	f240 6207 	movw	r2, #1543	; 0x607
 8013614:	4957      	ldr	r1, [pc, #348]	; (8013774 <tcp_receive+0xb1c>)
 8013616:	4856      	ldr	r0, [pc, #344]	; (8013770 <tcp_receive+0xb18>)
 8013618:	f005 fa88 	bl	8018b2c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013620:	4b4e      	ldr	r3, [pc, #312]	; (801375c <tcp_receive+0xb04>)
 8013622:	881b      	ldrh	r3, [r3, #0]
 8013624:	1ad3      	subs	r3, r2, r3
 8013626:	b29a      	uxth	r2, r3
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f7fc fe9d 	bl	801036c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013632:	4b4c      	ldr	r3, [pc, #304]	; (8013764 <tcp_receive+0xb0c>)
 8013634:	685b      	ldr	r3, [r3, #4]
 8013636:	891b      	ldrh	r3, [r3, #8]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d006      	beq.n	801364a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801363c:	4b49      	ldr	r3, [pc, #292]	; (8013764 <tcp_receive+0xb0c>)
 801363e:	685b      	ldr	r3, [r3, #4]
 8013640:	4a4d      	ldr	r2, [pc, #308]	; (8013778 <tcp_receive+0xb20>)
 8013642:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013644:	4b47      	ldr	r3, [pc, #284]	; (8013764 <tcp_receive+0xb0c>)
 8013646:	2200      	movs	r2, #0
 8013648:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801364a:	4b46      	ldr	r3, [pc, #280]	; (8013764 <tcp_receive+0xb0c>)
 801364c:	68db      	ldr	r3, [r3, #12]
 801364e:	899b      	ldrh	r3, [r3, #12]
 8013650:	b29b      	uxth	r3, r3
 8013652:	4618      	mov	r0, r3
 8013654:	f7fa fabc 	bl	800dbd0 <lwip_htons>
 8013658:	4603      	mov	r3, r0
 801365a:	b2db      	uxtb	r3, r3
 801365c:	f003 0301 	and.w	r3, r3, #1
 8013660:	2b00      	cmp	r3, #0
 8013662:	f000 80b8 	beq.w	80137d6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013666:	4b45      	ldr	r3, [pc, #276]	; (801377c <tcp_receive+0xb24>)
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	f043 0320 	orr.w	r3, r3, #32
 801366e:	b2da      	uxtb	r2, r3
 8013670:	4b42      	ldr	r3, [pc, #264]	; (801377c <tcp_receive+0xb24>)
 8013672:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013674:	e0af      	b.n	80137d6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801367a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013680:	68db      	ldr	r3, [r3, #12]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	4a36      	ldr	r2, [pc, #216]	; (8013760 <tcp_receive+0xb08>)
 8013686:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	891b      	ldrh	r3, [r3, #8]
 801368c:	461c      	mov	r4, r3
 801368e:	68bb      	ldr	r3, [r7, #8]
 8013690:	68db      	ldr	r3, [r3, #12]
 8013692:	899b      	ldrh	r3, [r3, #12]
 8013694:	b29b      	uxth	r3, r3
 8013696:	4618      	mov	r0, r3
 8013698:	f7fa fa9a 	bl	800dbd0 <lwip_htons>
 801369c:	4603      	mov	r3, r0
 801369e:	b2db      	uxtb	r3, r3
 80136a0:	f003 0303 	and.w	r3, r3, #3
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d001      	beq.n	80136ac <tcp_receive+0xa54>
 80136a8:	2301      	movs	r3, #1
 80136aa:	e000      	b.n	80136ae <tcp_receive+0xa56>
 80136ac:	2300      	movs	r3, #0
 80136ae:	191a      	adds	r2, r3, r4
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136b4:	441a      	add	r2, r3
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80136be:	461c      	mov	r4, r3
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	891b      	ldrh	r3, [r3, #8]
 80136c4:	461d      	mov	r5, r3
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	68db      	ldr	r3, [r3, #12]
 80136ca:	899b      	ldrh	r3, [r3, #12]
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	4618      	mov	r0, r3
 80136d0:	f7fa fa7e 	bl	800dbd0 <lwip_htons>
 80136d4:	4603      	mov	r3, r0
 80136d6:	b2db      	uxtb	r3, r3
 80136d8:	f003 0303 	and.w	r3, r3, #3
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d001      	beq.n	80136e4 <tcp_receive+0xa8c>
 80136e0:	2301      	movs	r3, #1
 80136e2:	e000      	b.n	80136e6 <tcp_receive+0xa8e>
 80136e4:	2300      	movs	r3, #0
 80136e6:	442b      	add	r3, r5
 80136e8:	429c      	cmp	r4, r3
 80136ea:	d206      	bcs.n	80136fa <tcp_receive+0xaa2>
 80136ec:	4b1e      	ldr	r3, [pc, #120]	; (8013768 <tcp_receive+0xb10>)
 80136ee:	f240 622b 	movw	r2, #1579	; 0x62b
 80136f2:	4923      	ldr	r1, [pc, #140]	; (8013780 <tcp_receive+0xb28>)
 80136f4:	481e      	ldr	r0, [pc, #120]	; (8013770 <tcp_receive+0xb18>)
 80136f6:	f005 fa19 	bl	8018b2c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	891b      	ldrh	r3, [r3, #8]
 80136fe:	461c      	mov	r4, r3
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	68db      	ldr	r3, [r3, #12]
 8013704:	899b      	ldrh	r3, [r3, #12]
 8013706:	b29b      	uxth	r3, r3
 8013708:	4618      	mov	r0, r3
 801370a:	f7fa fa61 	bl	800dbd0 <lwip_htons>
 801370e:	4603      	mov	r3, r0
 8013710:	b2db      	uxtb	r3, r3
 8013712:	f003 0303 	and.w	r3, r3, #3
 8013716:	2b00      	cmp	r3, #0
 8013718:	d001      	beq.n	801371e <tcp_receive+0xac6>
 801371a:	2301      	movs	r3, #1
 801371c:	e000      	b.n	8013720 <tcp_receive+0xac8>
 801371e:	2300      	movs	r3, #0
 8013720:	1919      	adds	r1, r3, r4
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013726:	b28b      	uxth	r3, r1
 8013728:	1ad3      	subs	r3, r2, r3
 801372a:	b29a      	uxth	r2, r3
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f7fc fe1b 	bl	801036c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	891b      	ldrh	r3, [r3, #8]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d028      	beq.n	8013792 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013740:	4b0d      	ldr	r3, [pc, #52]	; (8013778 <tcp_receive+0xb20>)
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d01d      	beq.n	8013784 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013748:	4b0b      	ldr	r3, [pc, #44]	; (8013778 <tcp_receive+0xb20>)
 801374a:	681a      	ldr	r2, [r3, #0]
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	4619      	mov	r1, r3
 8013752:	4610      	mov	r0, r2
 8013754:	f7fb ffb4 	bl	800f6c0 <pbuf_cat>
 8013758:	e018      	b.n	801378c <tcp_receive+0xb34>
 801375a:	bf00      	nop
 801375c:	240040f6 	.word	0x240040f6
 8013760:	240040ec 	.word	0x240040ec
 8013764:	240040cc 	.word	0x240040cc
 8013768:	0801b040 	.word	0x0801b040
 801376c:	0801b420 	.word	0x0801b420
 8013770:	0801b08c 	.word	0x0801b08c
 8013774:	0801b45c 	.word	0x0801b45c
 8013778:	240040fc 	.word	0x240040fc
 801377c:	240040f9 	.word	0x240040f9
 8013780:	0801b47c 	.word	0x0801b47c
            } else {
              recv_data = cseg->p;
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	685b      	ldr	r3, [r3, #4]
 8013788:	4a70      	ldr	r2, [pc, #448]	; (801394c <tcp_receive+0xcf4>)
 801378a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	2200      	movs	r2, #0
 8013790:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013792:	68bb      	ldr	r3, [r7, #8]
 8013794:	68db      	ldr	r3, [r3, #12]
 8013796:	899b      	ldrh	r3, [r3, #12]
 8013798:	b29b      	uxth	r3, r3
 801379a:	4618      	mov	r0, r3
 801379c:	f7fa fa18 	bl	800dbd0 <lwip_htons>
 80137a0:	4603      	mov	r3, r0
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	f003 0301 	and.w	r3, r3, #1
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d00d      	beq.n	80137c8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80137ac:	4b68      	ldr	r3, [pc, #416]	; (8013950 <tcp_receive+0xcf8>)
 80137ae:	781b      	ldrb	r3, [r3, #0]
 80137b0:	f043 0320 	orr.w	r3, r3, #32
 80137b4:	b2da      	uxtb	r2, r3
 80137b6:	4b66      	ldr	r3, [pc, #408]	; (8013950 <tcp_receive+0xcf8>)
 80137b8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	7d1b      	ldrb	r3, [r3, #20]
 80137be:	2b04      	cmp	r3, #4
 80137c0:	d102      	bne.n	80137c8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2207      	movs	r2, #7
 80137c6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	681a      	ldr	r2, [r3, #0]
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80137d0:	68b8      	ldr	r0, [r7, #8]
 80137d2:	f7fd faf0 	bl	8010db6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d008      	beq.n	80137f0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137e2:	68db      	ldr	r3, [r3, #12]
 80137e4:	685a      	ldr	r2, [r3, #4]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80137ea:	429a      	cmp	r2, r3
 80137ec:	f43f af43 	beq.w	8013676 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	8b5b      	ldrh	r3, [r3, #26]
 80137f4:	f003 0301 	and.w	r3, r3, #1
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d00e      	beq.n	801381a <tcp_receive+0xbc2>
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	8b5b      	ldrh	r3, [r3, #26]
 8013800:	f023 0301 	bic.w	r3, r3, #1
 8013804:	b29a      	uxth	r2, r3
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	835a      	strh	r2, [r3, #26]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	8b5b      	ldrh	r3, [r3, #26]
 801380e:	f043 0302 	orr.w	r3, r3, #2
 8013812:	b29a      	uxth	r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013818:	e188      	b.n	8013b2c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	8b5b      	ldrh	r3, [r3, #26]
 801381e:	f043 0301 	orr.w	r3, r3, #1
 8013822:	b29a      	uxth	r2, r3
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013828:	e180      	b.n	8013b2c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801382e:	2b00      	cmp	r3, #0
 8013830:	d106      	bne.n	8013840 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013832:	4848      	ldr	r0, [pc, #288]	; (8013954 <tcp_receive+0xcfc>)
 8013834:	f7fd faf6 	bl	8010e24 <tcp_seg_copy>
 8013838:	4602      	mov	r2, r0
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	675a      	str	r2, [r3, #116]	; 0x74
 801383e:	e16d      	b.n	8013b1c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013840:	2300      	movs	r3, #0
 8013842:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013848:	63bb      	str	r3, [r7, #56]	; 0x38
 801384a:	e157      	b.n	8013afc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801384e:	68db      	ldr	r3, [r3, #12]
 8013850:	685a      	ldr	r2, [r3, #4]
 8013852:	4b41      	ldr	r3, [pc, #260]	; (8013958 <tcp_receive+0xd00>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	429a      	cmp	r2, r3
 8013858:	d11d      	bne.n	8013896 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801385a:	4b3e      	ldr	r3, [pc, #248]	; (8013954 <tcp_receive+0xcfc>)
 801385c:	891a      	ldrh	r2, [r3, #8]
 801385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013860:	891b      	ldrh	r3, [r3, #8]
 8013862:	429a      	cmp	r2, r3
 8013864:	f240 814f 	bls.w	8013b06 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013868:	483a      	ldr	r0, [pc, #232]	; (8013954 <tcp_receive+0xcfc>)
 801386a:	f7fd fadb 	bl	8010e24 <tcp_seg_copy>
 801386e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	2b00      	cmp	r3, #0
 8013874:	f000 8149 	beq.w	8013b0a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8013878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801387a:	2b00      	cmp	r3, #0
 801387c:	d003      	beq.n	8013886 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013880:	697a      	ldr	r2, [r7, #20]
 8013882:	601a      	str	r2, [r3, #0]
 8013884:	e002      	b.n	801388c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	697a      	ldr	r2, [r7, #20]
 801388a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801388c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801388e:	6978      	ldr	r0, [r7, #20]
 8013890:	f7ff f8de 	bl	8012a50 <tcp_oos_insert_segment>
                }
                break;
 8013894:	e139      	b.n	8013b0a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013898:	2b00      	cmp	r3, #0
 801389a:	d117      	bne.n	80138cc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801389c:	4b2e      	ldr	r3, [pc, #184]	; (8013958 <tcp_receive+0xd00>)
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a2:	68db      	ldr	r3, [r3, #12]
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	1ad3      	subs	r3, r2, r3
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	da57      	bge.n	801395c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80138ac:	4829      	ldr	r0, [pc, #164]	; (8013954 <tcp_receive+0xcfc>)
 80138ae:	f7fd fab9 	bl	8010e24 <tcp_seg_copy>
 80138b2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80138b4:	69bb      	ldr	r3, [r7, #24]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	f000 8129 	beq.w	8013b0e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	69ba      	ldr	r2, [r7, #24]
 80138c0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80138c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80138c4:	69b8      	ldr	r0, [r7, #24]
 80138c6:	f7ff f8c3 	bl	8012a50 <tcp_oos_insert_segment>
                  }
                  break;
 80138ca:	e120      	b.n	8013b0e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80138cc:	4b22      	ldr	r3, [pc, #136]	; (8013958 <tcp_receive+0xd00>)
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	1ad3      	subs	r3, r2, r3
 80138d8:	3b01      	subs	r3, #1
 80138da:	2b00      	cmp	r3, #0
 80138dc:	db3e      	blt.n	801395c <tcp_receive+0xd04>
 80138de:	4b1e      	ldr	r3, [pc, #120]	; (8013958 <tcp_receive+0xd00>)
 80138e0:	681a      	ldr	r2, [r3, #0]
 80138e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138e4:	68db      	ldr	r3, [r3, #12]
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	1ad3      	subs	r3, r2, r3
 80138ea:	3301      	adds	r3, #1
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	dc35      	bgt.n	801395c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80138f0:	4818      	ldr	r0, [pc, #96]	; (8013954 <tcp_receive+0xcfc>)
 80138f2:	f7fd fa97 	bl	8010e24 <tcp_seg_copy>
 80138f6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80138f8:	69fb      	ldr	r3, [r7, #28]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	f000 8109 	beq.w	8013b12 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013902:	68db      	ldr	r3, [r3, #12]
 8013904:	685b      	ldr	r3, [r3, #4]
 8013906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013908:	8912      	ldrh	r2, [r2, #8]
 801390a:	441a      	add	r2, r3
 801390c:	4b12      	ldr	r3, [pc, #72]	; (8013958 <tcp_receive+0xd00>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	1ad3      	subs	r3, r2, r3
 8013912:	2b00      	cmp	r3, #0
 8013914:	dd12      	ble.n	801393c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013916:	4b10      	ldr	r3, [pc, #64]	; (8013958 <tcp_receive+0xd00>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	b29a      	uxth	r2, r3
 801391c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801391e:	68db      	ldr	r3, [r3, #12]
 8013920:	685b      	ldr	r3, [r3, #4]
 8013922:	b29b      	uxth	r3, r3
 8013924:	1ad3      	subs	r3, r2, r3
 8013926:	b29a      	uxth	r2, r3
 8013928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801392a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801392c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801392e:	685a      	ldr	r2, [r3, #4]
 8013930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013932:	891b      	ldrh	r3, [r3, #8]
 8013934:	4619      	mov	r1, r3
 8013936:	4610      	mov	r0, r2
 8013938:	f7fb fc6e 	bl	800f218 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801393e:	69fa      	ldr	r2, [r7, #28]
 8013940:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013942:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013944:	69f8      	ldr	r0, [r7, #28]
 8013946:	f7ff f883 	bl	8012a50 <tcp_oos_insert_segment>
                  }
                  break;
 801394a:	e0e2      	b.n	8013b12 <tcp_receive+0xeba>
 801394c:	240040fc 	.word	0x240040fc
 8013950:	240040f9 	.word	0x240040f9
 8013954:	240040cc 	.word	0x240040cc
 8013958:	240040ec 	.word	0x240040ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801395e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	f040 80c6 	bne.w	8013af6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801396a:	4b80      	ldr	r3, [pc, #512]	; (8013b6c <tcp_receive+0xf14>)
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013970:	68db      	ldr	r3, [r3, #12]
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013976:	2b00      	cmp	r3, #0
 8013978:	f340 80bd 	ble.w	8013af6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801397e:	68db      	ldr	r3, [r3, #12]
 8013980:	899b      	ldrh	r3, [r3, #12]
 8013982:	b29b      	uxth	r3, r3
 8013984:	4618      	mov	r0, r3
 8013986:	f7fa f923 	bl	800dbd0 <lwip_htons>
 801398a:	4603      	mov	r3, r0
 801398c:	b2db      	uxtb	r3, r3
 801398e:	f003 0301 	and.w	r3, r3, #1
 8013992:	2b00      	cmp	r3, #0
 8013994:	f040 80bf 	bne.w	8013b16 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013998:	4875      	ldr	r0, [pc, #468]	; (8013b70 <tcp_receive+0xf18>)
 801399a:	f7fd fa43 	bl	8010e24 <tcp_seg_copy>
 801399e:	4602      	mov	r2, r0
 80139a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80139a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	f000 80b6 	beq.w	8013b1a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80139ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b0:	68db      	ldr	r3, [r3, #12]
 80139b2:	685b      	ldr	r3, [r3, #4]
 80139b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139b6:	8912      	ldrh	r2, [r2, #8]
 80139b8:	441a      	add	r2, r3
 80139ba:	4b6c      	ldr	r3, [pc, #432]	; (8013b6c <tcp_receive+0xf14>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	1ad3      	subs	r3, r2, r3
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	dd12      	ble.n	80139ea <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80139c4:	4b69      	ldr	r3, [pc, #420]	; (8013b6c <tcp_receive+0xf14>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	b29a      	uxth	r2, r3
 80139ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139cc:	68db      	ldr	r3, [r3, #12]
 80139ce:	685b      	ldr	r3, [r3, #4]
 80139d0:	b29b      	uxth	r3, r3
 80139d2:	1ad3      	subs	r3, r2, r3
 80139d4:	b29a      	uxth	r2, r3
 80139d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80139da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139dc:	685a      	ldr	r2, [r3, #4]
 80139de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139e0:	891b      	ldrh	r3, [r3, #8]
 80139e2:	4619      	mov	r1, r3
 80139e4:	4610      	mov	r0, r2
 80139e6:	f7fb fc17 	bl	800f218 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80139ea:	4b62      	ldr	r3, [pc, #392]	; (8013b74 <tcp_receive+0xf1c>)
 80139ec:	881b      	ldrh	r3, [r3, #0]
 80139ee:	461a      	mov	r2, r3
 80139f0:	4b5e      	ldr	r3, [pc, #376]	; (8013b6c <tcp_receive+0xf14>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	441a      	add	r2, r3
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139fa:	6879      	ldr	r1, [r7, #4]
 80139fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80139fe:	440b      	add	r3, r1
 8013a00:	1ad3      	subs	r3, r2, r3
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	f340 8089 	ble.w	8013b1a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	68db      	ldr	r3, [r3, #12]
 8013a0e:	899b      	ldrh	r3, [r3, #12]
 8013a10:	b29b      	uxth	r3, r3
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7fa f8dc 	bl	800dbd0 <lwip_htons>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	b2db      	uxtb	r3, r3
 8013a1c:	f003 0301 	and.w	r3, r3, #1
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d022      	beq.n	8013a6a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	68db      	ldr	r3, [r3, #12]
 8013a2a:	899b      	ldrh	r3, [r3, #12]
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	b21b      	sxth	r3, r3
 8013a30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013a34:	b21c      	sxth	r4, r3
 8013a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	68db      	ldr	r3, [r3, #12]
 8013a3c:	899b      	ldrh	r3, [r3, #12]
 8013a3e:	b29b      	uxth	r3, r3
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7fa f8c5 	bl	800dbd0 <lwip_htons>
 8013a46:	4603      	mov	r3, r0
 8013a48:	b2db      	uxtb	r3, r3
 8013a4a:	b29b      	uxth	r3, r3
 8013a4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013a50:	b29b      	uxth	r3, r3
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7fa f8bc 	bl	800dbd0 <lwip_htons>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	b21b      	sxth	r3, r3
 8013a5c:	4323      	orrs	r3, r4
 8013a5e:	b21a      	sxth	r2, r3
 8013a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	68db      	ldr	r3, [r3, #12]
 8013a66:	b292      	uxth	r2, r2
 8013a68:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a6e:	b29a      	uxth	r2, r3
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013a74:	4413      	add	r3, r2
 8013a76:	b299      	uxth	r1, r3
 8013a78:	4b3c      	ldr	r3, [pc, #240]	; (8013b6c <tcp_receive+0xf14>)
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	b29a      	uxth	r2, r3
 8013a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	1a8a      	subs	r2, r1, r2
 8013a84:	b292      	uxth	r2, r2
 8013a86:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	685a      	ldr	r2, [r3, #4]
 8013a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	891b      	ldrh	r3, [r3, #8]
 8013a94:	4619      	mov	r1, r3
 8013a96:	4610      	mov	r0, r2
 8013a98:	f7fb fbbe 	bl	800f218 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	891c      	ldrh	r4, [r3, #8]
 8013aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	68db      	ldr	r3, [r3, #12]
 8013aa8:	899b      	ldrh	r3, [r3, #12]
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	4618      	mov	r0, r3
 8013aae:	f7fa f88f 	bl	800dbd0 <lwip_htons>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	b2db      	uxtb	r3, r3
 8013ab6:	f003 0303 	and.w	r3, r3, #3
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d001      	beq.n	8013ac2 <tcp_receive+0xe6a>
 8013abe:	2301      	movs	r3, #1
 8013ac0:	e000      	b.n	8013ac4 <tcp_receive+0xe6c>
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	4423      	add	r3, r4
 8013ac6:	b29a      	uxth	r2, r3
 8013ac8:	4b2a      	ldr	r3, [pc, #168]	; (8013b74 <tcp_receive+0xf1c>)
 8013aca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013acc:	4b29      	ldr	r3, [pc, #164]	; (8013b74 <tcp_receive+0xf1c>)
 8013ace:	881b      	ldrh	r3, [r3, #0]
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	4b26      	ldr	r3, [pc, #152]	; (8013b6c <tcp_receive+0xf14>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	441a      	add	r2, r3
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013adc:	6879      	ldr	r1, [r7, #4]
 8013ade:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013ae0:	440b      	add	r3, r1
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	d019      	beq.n	8013b1a <tcp_receive+0xec2>
 8013ae6:	4b24      	ldr	r3, [pc, #144]	; (8013b78 <tcp_receive+0xf20>)
 8013ae8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8013aec:	4923      	ldr	r1, [pc, #140]	; (8013b7c <tcp_receive+0xf24>)
 8013aee:	4824      	ldr	r0, [pc, #144]	; (8013b80 <tcp_receive+0xf28>)
 8013af0:	f005 f81c 	bl	8018b2c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013af4:	e011      	b.n	8013b1a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8013afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	f47f aea4 	bne.w	801384c <tcp_receive+0xbf4>
 8013b04:	e00a      	b.n	8013b1c <tcp_receive+0xec4>
                break;
 8013b06:	bf00      	nop
 8013b08:	e008      	b.n	8013b1c <tcp_receive+0xec4>
                break;
 8013b0a:	bf00      	nop
 8013b0c:	e006      	b.n	8013b1c <tcp_receive+0xec4>
                  break;
 8013b0e:	bf00      	nop
 8013b10:	e004      	b.n	8013b1c <tcp_receive+0xec4>
                  break;
 8013b12:	bf00      	nop
 8013b14:	e002      	b.n	8013b1c <tcp_receive+0xec4>
                  break;
 8013b16:	bf00      	nop
 8013b18:	e000      	b.n	8013b1c <tcp_receive+0xec4>
                break;
 8013b1a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	f001 fe8b 	bl	8015838 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013b22:	e003      	b.n	8013b2c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013b24:	6878      	ldr	r0, [r7, #4]
 8013b26:	f001 fe87 	bl	8015838 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013b2a:	e01a      	b.n	8013b62 <tcp_receive+0xf0a>
 8013b2c:	e019      	b.n	8013b62 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013b2e:	4b0f      	ldr	r3, [pc, #60]	; (8013b6c <tcp_receive+0xf14>)
 8013b30:	681a      	ldr	r2, [r3, #0]
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b36:	1ad3      	subs	r3, r2, r3
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	db0a      	blt.n	8013b52 <tcp_receive+0xefa>
 8013b3c:	4b0b      	ldr	r3, [pc, #44]	; (8013b6c <tcp_receive+0xf14>)
 8013b3e:	681a      	ldr	r2, [r3, #0]
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b44:	6879      	ldr	r1, [r7, #4]
 8013b46:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013b48:	440b      	add	r3, r1
 8013b4a:	1ad3      	subs	r3, r2, r3
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	dd07      	ble.n	8013b62 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	8b5b      	ldrh	r3, [r3, #26]
 8013b56:	f043 0302 	orr.w	r3, r3, #2
 8013b5a:	b29a      	uxth	r2, r3
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013b60:	e7ff      	b.n	8013b62 <tcp_receive+0xf0a>
 8013b62:	bf00      	nop
 8013b64:	3750      	adds	r7, #80	; 0x50
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bdb0      	pop	{r4, r5, r7, pc}
 8013b6a:	bf00      	nop
 8013b6c:	240040ec 	.word	0x240040ec
 8013b70:	240040cc 	.word	0x240040cc
 8013b74:	240040f6 	.word	0x240040f6
 8013b78:	0801b040 	.word	0x0801b040
 8013b7c:	0801b3e8 	.word	0x0801b3e8
 8013b80:	0801b08c 	.word	0x0801b08c

08013b84 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013b84:	b480      	push	{r7}
 8013b86:	b083      	sub	sp, #12
 8013b88:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013b8a:	4b15      	ldr	r3, [pc, #84]	; (8013be0 <tcp_get_next_optbyte+0x5c>)
 8013b8c:	881b      	ldrh	r3, [r3, #0]
 8013b8e:	1c5a      	adds	r2, r3, #1
 8013b90:	b291      	uxth	r1, r2
 8013b92:	4a13      	ldr	r2, [pc, #76]	; (8013be0 <tcp_get_next_optbyte+0x5c>)
 8013b94:	8011      	strh	r1, [r2, #0]
 8013b96:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013b98:	4b12      	ldr	r3, [pc, #72]	; (8013be4 <tcp_get_next_optbyte+0x60>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d004      	beq.n	8013baa <tcp_get_next_optbyte+0x26>
 8013ba0:	4b11      	ldr	r3, [pc, #68]	; (8013be8 <tcp_get_next_optbyte+0x64>)
 8013ba2:	881b      	ldrh	r3, [r3, #0]
 8013ba4:	88fa      	ldrh	r2, [r7, #6]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d208      	bcs.n	8013bbc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013baa:	4b10      	ldr	r3, [pc, #64]	; (8013bec <tcp_get_next_optbyte+0x68>)
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	3314      	adds	r3, #20
 8013bb0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013bb2:	88fb      	ldrh	r3, [r7, #6]
 8013bb4:	683a      	ldr	r2, [r7, #0]
 8013bb6:	4413      	add	r3, r2
 8013bb8:	781b      	ldrb	r3, [r3, #0]
 8013bba:	e00b      	b.n	8013bd4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013bbc:	88fb      	ldrh	r3, [r7, #6]
 8013bbe:	b2da      	uxtb	r2, r3
 8013bc0:	4b09      	ldr	r3, [pc, #36]	; (8013be8 <tcp_get_next_optbyte+0x64>)
 8013bc2:	881b      	ldrh	r3, [r3, #0]
 8013bc4:	b2db      	uxtb	r3, r3
 8013bc6:	1ad3      	subs	r3, r2, r3
 8013bc8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013bca:	4b06      	ldr	r3, [pc, #24]	; (8013be4 <tcp_get_next_optbyte+0x60>)
 8013bcc:	681a      	ldr	r2, [r3, #0]
 8013bce:	797b      	ldrb	r3, [r7, #5]
 8013bd0:	4413      	add	r3, r2
 8013bd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	370c      	adds	r7, #12
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bde:	4770      	bx	lr
 8013be0:	240040e8 	.word	0x240040e8
 8013be4:	240040e4 	.word	0x240040e4
 8013be8:	240040e2 	.word	0x240040e2
 8013bec:	240040dc 	.word	0x240040dc

08013bf0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b084      	sub	sp, #16
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d106      	bne.n	8013c0c <tcp_parseopt+0x1c>
 8013bfe:	4b32      	ldr	r3, [pc, #200]	; (8013cc8 <tcp_parseopt+0xd8>)
 8013c00:	f240 727d 	movw	r2, #1917	; 0x77d
 8013c04:	4931      	ldr	r1, [pc, #196]	; (8013ccc <tcp_parseopt+0xdc>)
 8013c06:	4832      	ldr	r0, [pc, #200]	; (8013cd0 <tcp_parseopt+0xe0>)
 8013c08:	f004 ff90 	bl	8018b2c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013c0c:	4b31      	ldr	r3, [pc, #196]	; (8013cd4 <tcp_parseopt+0xe4>)
 8013c0e:	881b      	ldrh	r3, [r3, #0]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d055      	beq.n	8013cc0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013c14:	4b30      	ldr	r3, [pc, #192]	; (8013cd8 <tcp_parseopt+0xe8>)
 8013c16:	2200      	movs	r2, #0
 8013c18:	801a      	strh	r2, [r3, #0]
 8013c1a:	e045      	b.n	8013ca8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8013c1c:	f7ff ffb2 	bl	8013b84 <tcp_get_next_optbyte>
 8013c20:	4603      	mov	r3, r0
 8013c22:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013c24:	7bfb      	ldrb	r3, [r7, #15]
 8013c26:	2b02      	cmp	r3, #2
 8013c28:	d006      	beq.n	8013c38 <tcp_parseopt+0x48>
 8013c2a:	2b02      	cmp	r3, #2
 8013c2c:	dc2b      	bgt.n	8013c86 <tcp_parseopt+0x96>
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d041      	beq.n	8013cb6 <tcp_parseopt+0xc6>
 8013c32:	2b01      	cmp	r3, #1
 8013c34:	d127      	bne.n	8013c86 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013c36:	e037      	b.n	8013ca8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013c38:	f7ff ffa4 	bl	8013b84 <tcp_get_next_optbyte>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	2b04      	cmp	r3, #4
 8013c40:	d13b      	bne.n	8013cba <tcp_parseopt+0xca>
 8013c42:	4b25      	ldr	r3, [pc, #148]	; (8013cd8 <tcp_parseopt+0xe8>)
 8013c44:	881b      	ldrh	r3, [r3, #0]
 8013c46:	3301      	adds	r3, #1
 8013c48:	4a22      	ldr	r2, [pc, #136]	; (8013cd4 <tcp_parseopt+0xe4>)
 8013c4a:	8812      	ldrh	r2, [r2, #0]
 8013c4c:	4293      	cmp	r3, r2
 8013c4e:	da34      	bge.n	8013cba <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013c50:	f7ff ff98 	bl	8013b84 <tcp_get_next_optbyte>
 8013c54:	4603      	mov	r3, r0
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	021b      	lsls	r3, r3, #8
 8013c5a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013c5c:	f7ff ff92 	bl	8013b84 <tcp_get_next_optbyte>
 8013c60:	4603      	mov	r3, r0
 8013c62:	b29a      	uxth	r2, r3
 8013c64:	89bb      	ldrh	r3, [r7, #12]
 8013c66:	4313      	orrs	r3, r2
 8013c68:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013c6a:	89bb      	ldrh	r3, [r7, #12]
 8013c6c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013c70:	d804      	bhi.n	8013c7c <tcp_parseopt+0x8c>
 8013c72:	89bb      	ldrh	r3, [r7, #12]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d001      	beq.n	8013c7c <tcp_parseopt+0x8c>
 8013c78:	89ba      	ldrh	r2, [r7, #12]
 8013c7a:	e001      	b.n	8013c80 <tcp_parseopt+0x90>
 8013c7c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013c84:	e010      	b.n	8013ca8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013c86:	f7ff ff7d 	bl	8013b84 <tcp_get_next_optbyte>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013c8e:	7afb      	ldrb	r3, [r7, #11]
 8013c90:	2b01      	cmp	r3, #1
 8013c92:	d914      	bls.n	8013cbe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013c94:	7afb      	ldrb	r3, [r7, #11]
 8013c96:	b29a      	uxth	r2, r3
 8013c98:	4b0f      	ldr	r3, [pc, #60]	; (8013cd8 <tcp_parseopt+0xe8>)
 8013c9a:	881b      	ldrh	r3, [r3, #0]
 8013c9c:	4413      	add	r3, r2
 8013c9e:	b29b      	uxth	r3, r3
 8013ca0:	3b02      	subs	r3, #2
 8013ca2:	b29a      	uxth	r2, r3
 8013ca4:	4b0c      	ldr	r3, [pc, #48]	; (8013cd8 <tcp_parseopt+0xe8>)
 8013ca6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013ca8:	4b0b      	ldr	r3, [pc, #44]	; (8013cd8 <tcp_parseopt+0xe8>)
 8013caa:	881a      	ldrh	r2, [r3, #0]
 8013cac:	4b09      	ldr	r3, [pc, #36]	; (8013cd4 <tcp_parseopt+0xe4>)
 8013cae:	881b      	ldrh	r3, [r3, #0]
 8013cb0:	429a      	cmp	r2, r3
 8013cb2:	d3b3      	bcc.n	8013c1c <tcp_parseopt+0x2c>
 8013cb4:	e004      	b.n	8013cc0 <tcp_parseopt+0xd0>
          return;
 8013cb6:	bf00      	nop
 8013cb8:	e002      	b.n	8013cc0 <tcp_parseopt+0xd0>
            return;
 8013cba:	bf00      	nop
 8013cbc:	e000      	b.n	8013cc0 <tcp_parseopt+0xd0>
            return;
 8013cbe:	bf00      	nop
      }
    }
  }
}
 8013cc0:	3710      	adds	r7, #16
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
 8013cc6:	bf00      	nop
 8013cc8:	0801b040 	.word	0x0801b040
 8013ccc:	0801b4a4 	.word	0x0801b4a4
 8013cd0:	0801b08c 	.word	0x0801b08c
 8013cd4:	240040e0 	.word	0x240040e0
 8013cd8:	240040e8 	.word	0x240040e8

08013cdc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013cdc:	b480      	push	{r7}
 8013cde:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013ce0:	4b05      	ldr	r3, [pc, #20]	; (8013cf8 <tcp_trigger_input_pcb_close+0x1c>)
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	f043 0310 	orr.w	r3, r3, #16
 8013ce8:	b2da      	uxtb	r2, r3
 8013cea:	4b03      	ldr	r3, [pc, #12]	; (8013cf8 <tcp_trigger_input_pcb_close+0x1c>)
 8013cec:	701a      	strb	r2, [r3, #0]
}
 8013cee:	bf00      	nop
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr
 8013cf8:	240040f9 	.word	0x240040f9

08013cfc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b084      	sub	sp, #16
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	60f8      	str	r0, [r7, #12]
 8013d04:	60b9      	str	r1, [r7, #8]
 8013d06:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d00a      	beq.n	8013d24 <tcp_route+0x28>
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	7a1b      	ldrb	r3, [r3, #8]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d006      	beq.n	8013d24 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	7a1b      	ldrb	r3, [r3, #8]
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7fb f874 	bl	800ee08 <netif_get_by_index>
 8013d20:	4603      	mov	r3, r0
 8013d22:	e003      	b.n	8013d2c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f003 fb2b 	bl	8017380 <ip4_route>
 8013d2a:	4603      	mov	r3, r0
  }
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3710      	adds	r7, #16
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}

08013d34 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013d34:	b590      	push	{r4, r7, lr}
 8013d36:	b087      	sub	sp, #28
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	603b      	str	r3, [r7, #0]
 8013d40:	4613      	mov	r3, r2
 8013d42:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d105      	bne.n	8013d56 <tcp_create_segment+0x22>
 8013d4a:	4b44      	ldr	r3, [pc, #272]	; (8013e5c <tcp_create_segment+0x128>)
 8013d4c:	22a3      	movs	r2, #163	; 0xa3
 8013d4e:	4944      	ldr	r1, [pc, #272]	; (8013e60 <tcp_create_segment+0x12c>)
 8013d50:	4844      	ldr	r0, [pc, #272]	; (8013e64 <tcp_create_segment+0x130>)
 8013d52:	f004 feeb 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013d56:	68bb      	ldr	r3, [r7, #8]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d105      	bne.n	8013d68 <tcp_create_segment+0x34>
 8013d5c:	4b3f      	ldr	r3, [pc, #252]	; (8013e5c <tcp_create_segment+0x128>)
 8013d5e:	22a4      	movs	r2, #164	; 0xa4
 8013d60:	4941      	ldr	r1, [pc, #260]	; (8013e68 <tcp_create_segment+0x134>)
 8013d62:	4840      	ldr	r0, [pc, #256]	; (8013e64 <tcp_create_segment+0x130>)
 8013d64:	f004 fee2 	bl	8018b2c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013d68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013d6c:	009b      	lsls	r3, r3, #2
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	f003 0304 	and.w	r3, r3, #4
 8013d74:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013d76:	2003      	movs	r0, #3
 8013d78:	f7fa fcba 	bl	800e6f0 <memp_malloc>
 8013d7c:	6138      	str	r0, [r7, #16]
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d104      	bne.n	8013d8e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013d84:	68b8      	ldr	r0, [r7, #8]
 8013d86:	f7fb fbcd 	bl	800f524 <pbuf_free>
    return NULL;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	e061      	b.n	8013e52 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013d94:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	2200      	movs	r2, #0
 8013d9a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	68ba      	ldr	r2, [r7, #8]
 8013da0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	891a      	ldrh	r2, [r3, #8]
 8013da6:	7dfb      	ldrb	r3, [r7, #23]
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d205      	bcs.n	8013dba <tcp_create_segment+0x86>
 8013dae:	4b2b      	ldr	r3, [pc, #172]	; (8013e5c <tcp_create_segment+0x128>)
 8013db0:	22b0      	movs	r2, #176	; 0xb0
 8013db2:	492e      	ldr	r1, [pc, #184]	; (8013e6c <tcp_create_segment+0x138>)
 8013db4:	482b      	ldr	r0, [pc, #172]	; (8013e64 <tcp_create_segment+0x130>)
 8013db6:	f004 feb9 	bl	8018b2c <iprintf>
  seg->len = p->tot_len - optlen;
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	891a      	ldrh	r2, [r3, #8]
 8013dbe:	7dfb      	ldrb	r3, [r7, #23]
 8013dc0:	b29b      	uxth	r3, r3
 8013dc2:	1ad3      	subs	r3, r2, r3
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013dca:	2114      	movs	r1, #20
 8013dcc:	68b8      	ldr	r0, [r7, #8]
 8013dce:	f7fb fb13 	bl	800f3f8 <pbuf_add_header>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d004      	beq.n	8013de2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013dd8:	6938      	ldr	r0, [r7, #16]
 8013dda:	f7fc ffec 	bl	8010db6 <tcp_seg_free>
    return NULL;
 8013dde:	2300      	movs	r3, #0
 8013de0:	e037      	b.n	8013e52 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013de2:	693b      	ldr	r3, [r7, #16]
 8013de4:	685b      	ldr	r3, [r3, #4]
 8013de6:	685a      	ldr	r2, [r3, #4]
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	8ada      	ldrh	r2, [r3, #22]
 8013df0:	693b      	ldr	r3, [r7, #16]
 8013df2:	68dc      	ldr	r4, [r3, #12]
 8013df4:	4610      	mov	r0, r2
 8013df6:	f7f9 feeb 	bl	800dbd0 <lwip_htons>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	8b1a      	ldrh	r2, [r3, #24]
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	68dc      	ldr	r4, [r3, #12]
 8013e06:	4610      	mov	r0, r2
 8013e08:	f7f9 fee2 	bl	800dbd0 <lwip_htons>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013e10:	693b      	ldr	r3, [r7, #16]
 8013e12:	68dc      	ldr	r4, [r3, #12]
 8013e14:	6838      	ldr	r0, [r7, #0]
 8013e16:	f7f9 fef0 	bl	800dbfa <lwip_htonl>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013e1e:	7dfb      	ldrb	r3, [r7, #23]
 8013e20:	089b      	lsrs	r3, r3, #2
 8013e22:	b2db      	uxtb	r3, r3
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	3305      	adds	r3, #5
 8013e28:	b29b      	uxth	r3, r3
 8013e2a:	031b      	lsls	r3, r3, #12
 8013e2c:	b29a      	uxth	r2, r3
 8013e2e:	79fb      	ldrb	r3, [r7, #7]
 8013e30:	b29b      	uxth	r3, r3
 8013e32:	4313      	orrs	r3, r2
 8013e34:	b29a      	uxth	r2, r3
 8013e36:	693b      	ldr	r3, [r7, #16]
 8013e38:	68dc      	ldr	r4, [r3, #12]
 8013e3a:	4610      	mov	r0, r2
 8013e3c:	f7f9 fec8 	bl	800dbd0 <lwip_htons>
 8013e40:	4603      	mov	r3, r0
 8013e42:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013e44:	693b      	ldr	r3, [r7, #16]
 8013e46:	68db      	ldr	r3, [r3, #12]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	749a      	strb	r2, [r3, #18]
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	74da      	strb	r2, [r3, #19]
  return seg;
 8013e50:	693b      	ldr	r3, [r7, #16]
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	371c      	adds	r7, #28
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd90      	pop	{r4, r7, pc}
 8013e5a:	bf00      	nop
 8013e5c:	0801b4c0 	.word	0x0801b4c0
 8013e60:	0801b4f4 	.word	0x0801b4f4
 8013e64:	0801b514 	.word	0x0801b514
 8013e68:	0801b53c 	.word	0x0801b53c
 8013e6c:	0801b560 	.word	0x0801b560

08013e70 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b086      	sub	sp, #24
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	607b      	str	r3, [r7, #4]
 8013e78:	4603      	mov	r3, r0
 8013e7a:	73fb      	strb	r3, [r7, #15]
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	81bb      	strh	r3, [r7, #12]
 8013e80:	4613      	mov	r3, r2
 8013e82:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013e84:	89bb      	ldrh	r3, [r7, #12]
 8013e86:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d105      	bne.n	8013e9a <tcp_pbuf_prealloc+0x2a>
 8013e8e:	4b30      	ldr	r3, [pc, #192]	; (8013f50 <tcp_pbuf_prealloc+0xe0>)
 8013e90:	22e8      	movs	r2, #232	; 0xe8
 8013e92:	4930      	ldr	r1, [pc, #192]	; (8013f54 <tcp_pbuf_prealloc+0xe4>)
 8013e94:	4830      	ldr	r0, [pc, #192]	; (8013f58 <tcp_pbuf_prealloc+0xe8>)
 8013e96:	f004 fe49 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013e9a:	6a3b      	ldr	r3, [r7, #32]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d105      	bne.n	8013eac <tcp_pbuf_prealloc+0x3c>
 8013ea0:	4b2b      	ldr	r3, [pc, #172]	; (8013f50 <tcp_pbuf_prealloc+0xe0>)
 8013ea2:	22e9      	movs	r2, #233	; 0xe9
 8013ea4:	492d      	ldr	r1, [pc, #180]	; (8013f5c <tcp_pbuf_prealloc+0xec>)
 8013ea6:	482c      	ldr	r0, [pc, #176]	; (8013f58 <tcp_pbuf_prealloc+0xe8>)
 8013ea8:	f004 fe40 	bl	8018b2c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013eac:	89ba      	ldrh	r2, [r7, #12]
 8013eae:	897b      	ldrh	r3, [r7, #10]
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	d221      	bcs.n	8013ef8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013eb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013eb8:	f003 0302 	and.w	r3, r3, #2
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d111      	bne.n	8013ee4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013ec0:	6a3b      	ldr	r3, [r7, #32]
 8013ec2:	8b5b      	ldrh	r3, [r3, #26]
 8013ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d115      	bne.n	8013ef8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013ecc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d007      	beq.n	8013ee4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013ed4:	6a3b      	ldr	r3, [r7, #32]
 8013ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d103      	bne.n	8013ee4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013edc:	6a3b      	ldr	r3, [r7, #32]
 8013ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d009      	beq.n	8013ef8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013ee4:	89bb      	ldrh	r3, [r7, #12]
 8013ee6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013eea:	f023 0203 	bic.w	r2, r3, #3
 8013eee:	897b      	ldrh	r3, [r7, #10]
 8013ef0:	4293      	cmp	r3, r2
 8013ef2:	bf28      	it	cs
 8013ef4:	4613      	movcs	r3, r2
 8013ef6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013ef8:	8af9      	ldrh	r1, [r7, #22]
 8013efa:	7bfb      	ldrb	r3, [r7, #15]
 8013efc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7fb f82b 	bl	800ef5c <pbuf_alloc>
 8013f06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d101      	bne.n	8013f12 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	e019      	b.n	8013f46 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d006      	beq.n	8013f28 <tcp_pbuf_prealloc+0xb8>
 8013f1a:	4b0d      	ldr	r3, [pc, #52]	; (8013f50 <tcp_pbuf_prealloc+0xe0>)
 8013f1c:	f240 120b 	movw	r2, #267	; 0x10b
 8013f20:	490f      	ldr	r1, [pc, #60]	; (8013f60 <tcp_pbuf_prealloc+0xf0>)
 8013f22:	480d      	ldr	r0, [pc, #52]	; (8013f58 <tcp_pbuf_prealloc+0xe8>)
 8013f24:	f004 fe02 	bl	8018b2c <iprintf>
  *oversize = p->len - length;
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	895a      	ldrh	r2, [r3, #10]
 8013f2c:	89bb      	ldrh	r3, [r7, #12]
 8013f2e:	1ad3      	subs	r3, r2, r3
 8013f30:	b29a      	uxth	r2, r3
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	89ba      	ldrh	r2, [r7, #12]
 8013f3a:	811a      	strh	r2, [r3, #8]
 8013f3c:	693b      	ldr	r3, [r7, #16]
 8013f3e:	891a      	ldrh	r2, [r3, #8]
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	815a      	strh	r2, [r3, #10]
  return p;
 8013f44:	693b      	ldr	r3, [r7, #16]
}
 8013f46:	4618      	mov	r0, r3
 8013f48:	3718      	adds	r7, #24
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}
 8013f4e:	bf00      	nop
 8013f50:	0801b4c0 	.word	0x0801b4c0
 8013f54:	0801b578 	.word	0x0801b578
 8013f58:	0801b514 	.word	0x0801b514
 8013f5c:	0801b59c 	.word	0x0801b59c
 8013f60:	0801b5bc 	.word	0x0801b5bc

08013f64 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	460b      	mov	r3, r1
 8013f6e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d106      	bne.n	8013f84 <tcp_write_checks+0x20>
 8013f76:	4b33      	ldr	r3, [pc, #204]	; (8014044 <tcp_write_checks+0xe0>)
 8013f78:	f240 1233 	movw	r2, #307	; 0x133
 8013f7c:	4932      	ldr	r1, [pc, #200]	; (8014048 <tcp_write_checks+0xe4>)
 8013f7e:	4833      	ldr	r0, [pc, #204]	; (801404c <tcp_write_checks+0xe8>)
 8013f80:	f004 fdd4 	bl	8018b2c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	7d1b      	ldrb	r3, [r3, #20]
 8013f88:	2b04      	cmp	r3, #4
 8013f8a:	d00e      	beq.n	8013faa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013f90:	2b07      	cmp	r3, #7
 8013f92:	d00a      	beq.n	8013faa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013f98:	2b02      	cmp	r3, #2
 8013f9a:	d006      	beq.n	8013faa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013fa0:	2b03      	cmp	r3, #3
 8013fa2:	d002      	beq.n	8013faa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013fa4:	f06f 030a 	mvn.w	r3, #10
 8013fa8:	e048      	b.n	801403c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013faa:	887b      	ldrh	r3, [r7, #2]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d101      	bne.n	8013fb4 <tcp_write_checks+0x50>
    return ERR_OK;
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	e043      	b.n	801403c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013fba:	887a      	ldrh	r2, [r7, #2]
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d909      	bls.n	8013fd4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	8b5b      	ldrh	r3, [r3, #26]
 8013fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fc8:	b29a      	uxth	r2, r3
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013fce:	f04f 33ff 	mov.w	r3, #4294967295
 8013fd2:	e033      	b.n	801403c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fda:	2b08      	cmp	r3, #8
 8013fdc:	d909      	bls.n	8013ff2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	8b5b      	ldrh	r3, [r3, #26]
 8013fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fe6:	b29a      	uxth	r2, r3
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013fec:	f04f 33ff 	mov.w	r3, #4294967295
 8013ff0:	e024      	b.n	801403c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d00f      	beq.n	801401c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014000:	2b00      	cmp	r3, #0
 8014002:	d11a      	bne.n	801403a <tcp_write_checks+0xd6>
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014008:	2b00      	cmp	r3, #0
 801400a:	d116      	bne.n	801403a <tcp_write_checks+0xd6>
 801400c:	4b0d      	ldr	r3, [pc, #52]	; (8014044 <tcp_write_checks+0xe0>)
 801400e:	f240 1255 	movw	r2, #341	; 0x155
 8014012:	490f      	ldr	r1, [pc, #60]	; (8014050 <tcp_write_checks+0xec>)
 8014014:	480d      	ldr	r0, [pc, #52]	; (801404c <tcp_write_checks+0xe8>)
 8014016:	f004 fd89 	bl	8018b2c <iprintf>
 801401a:	e00e      	b.n	801403a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014020:	2b00      	cmp	r3, #0
 8014022:	d103      	bne.n	801402c <tcp_write_checks+0xc8>
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014028:	2b00      	cmp	r3, #0
 801402a:	d006      	beq.n	801403a <tcp_write_checks+0xd6>
 801402c:	4b05      	ldr	r3, [pc, #20]	; (8014044 <tcp_write_checks+0xe0>)
 801402e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8014032:	4908      	ldr	r1, [pc, #32]	; (8014054 <tcp_write_checks+0xf0>)
 8014034:	4805      	ldr	r0, [pc, #20]	; (801404c <tcp_write_checks+0xe8>)
 8014036:	f004 fd79 	bl	8018b2c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801403a:	2300      	movs	r3, #0
}
 801403c:	4618      	mov	r0, r3
 801403e:	3708      	adds	r7, #8
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}
 8014044:	0801b4c0 	.word	0x0801b4c0
 8014048:	0801b5d0 	.word	0x0801b5d0
 801404c:	0801b514 	.word	0x0801b514
 8014050:	0801b5f0 	.word	0x0801b5f0
 8014054:	0801b62c 	.word	0x0801b62c

08014058 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014058:	b590      	push	{r4, r7, lr}
 801405a:	b09b      	sub	sp, #108	; 0x6c
 801405c:	af04      	add	r7, sp, #16
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	4611      	mov	r1, r2
 8014064:	461a      	mov	r2, r3
 8014066:	460b      	mov	r3, r1
 8014068:	80fb      	strh	r3, [r7, #6]
 801406a:	4613      	mov	r3, r2
 801406c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801406e:	2300      	movs	r3, #0
 8014070:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8014072:	2300      	movs	r3, #0
 8014074:	653b      	str	r3, [r7, #80]	; 0x50
 8014076:	2300      	movs	r3, #0
 8014078:	64fb      	str	r3, [r7, #76]	; 0x4c
 801407a:	2300      	movs	r3, #0
 801407c:	64bb      	str	r3, [r7, #72]	; 0x48
 801407e:	2300      	movs	r3, #0
 8014080:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8014082:	2300      	movs	r3, #0
 8014084:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014088:	2300      	movs	r3, #0
 801408a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801408e:	2300      	movs	r3, #0
 8014090:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014092:	2300      	movs	r3, #0
 8014094:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014096:	2300      	movs	r3, #0
 8014098:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d109      	bne.n	80140b4 <tcp_write+0x5c>
 80140a0:	4ba4      	ldr	r3, [pc, #656]	; (8014334 <tcp_write+0x2dc>)
 80140a2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80140a6:	49a4      	ldr	r1, [pc, #656]	; (8014338 <tcp_write+0x2e0>)
 80140a8:	48a4      	ldr	r0, [pc, #656]	; (801433c <tcp_write+0x2e4>)
 80140aa:	f004 fd3f 	bl	8018b2c <iprintf>
 80140ae:	f06f 030f 	mvn.w	r3, #15
 80140b2:	e32a      	b.n	801470a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80140ba:	085b      	lsrs	r3, r3, #1
 80140bc:	b29a      	uxth	r2, r3
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140c2:	4293      	cmp	r3, r2
 80140c4:	bf28      	it	cs
 80140c6:	4613      	movcs	r3, r2
 80140c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80140ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d102      	bne.n	80140d6 <tcp_write+0x7e>
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140d4:	e000      	b.n	80140d8 <tcp_write+0x80>
 80140d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80140d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d109      	bne.n	80140f4 <tcp_write+0x9c>
 80140e0:	4b94      	ldr	r3, [pc, #592]	; (8014334 <tcp_write+0x2dc>)
 80140e2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80140e6:	4996      	ldr	r1, [pc, #600]	; (8014340 <tcp_write+0x2e8>)
 80140e8:	4894      	ldr	r0, [pc, #592]	; (801433c <tcp_write+0x2e4>)
 80140ea:	f004 fd1f 	bl	8018b2c <iprintf>
 80140ee:	f06f 030f 	mvn.w	r3, #15
 80140f2:	e30a      	b.n	801470a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80140f4:	88fb      	ldrh	r3, [r7, #6]
 80140f6:	4619      	mov	r1, r3
 80140f8:	68f8      	ldr	r0, [r7, #12]
 80140fa:	f7ff ff33 	bl	8013f64 <tcp_write_checks>
 80140fe:	4603      	mov	r3, r0
 8014100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014104:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014108:	2b00      	cmp	r3, #0
 801410a:	d002      	beq.n	8014112 <tcp_write+0xba>
    return err;
 801410c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014110:	e2fb      	b.n	801470a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014118:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801411c:	2300      	movs	r3, #0
 801411e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014126:	2b00      	cmp	r3, #0
 8014128:	f000 80f6 	beq.w	8014318 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014130:	653b      	str	r3, [r7, #80]	; 0x50
 8014132:	e002      	b.n	801413a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8014134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801413a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d1f8      	bne.n	8014134 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8014142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014144:	7a9b      	ldrb	r3, [r3, #10]
 8014146:	009b      	lsls	r3, r3, #2
 8014148:	b29b      	uxth	r3, r3
 801414a:	f003 0304 	and.w	r3, r3, #4
 801414e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014150:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014154:	891b      	ldrh	r3, [r3, #8]
 8014156:	4619      	mov	r1, r3
 8014158:	8c3b      	ldrh	r3, [r7, #32]
 801415a:	440b      	add	r3, r1
 801415c:	429a      	cmp	r2, r3
 801415e:	da06      	bge.n	801416e <tcp_write+0x116>
 8014160:	4b74      	ldr	r3, [pc, #464]	; (8014334 <tcp_write+0x2dc>)
 8014162:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014166:	4977      	ldr	r1, [pc, #476]	; (8014344 <tcp_write+0x2ec>)
 8014168:	4874      	ldr	r0, [pc, #464]	; (801433c <tcp_write+0x2e4>)
 801416a:	f004 fcdf 	bl	8018b2c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801416e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014170:	891a      	ldrh	r2, [r3, #8]
 8014172:	8c3b      	ldrh	r3, [r7, #32]
 8014174:	4413      	add	r3, r2
 8014176:	b29b      	uxth	r3, r3
 8014178:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801417a:	1ad3      	subs	r3, r2, r3
 801417c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014184:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014186:	8a7b      	ldrh	r3, [r7, #18]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d026      	beq.n	80141da <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801418c:	8a7b      	ldrh	r3, [r7, #18]
 801418e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014190:	429a      	cmp	r2, r3
 8014192:	d206      	bcs.n	80141a2 <tcp_write+0x14a>
 8014194:	4b67      	ldr	r3, [pc, #412]	; (8014334 <tcp_write+0x2dc>)
 8014196:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801419a:	496b      	ldr	r1, [pc, #428]	; (8014348 <tcp_write+0x2f0>)
 801419c:	4867      	ldr	r0, [pc, #412]	; (801433c <tcp_write+0x2e4>)
 801419e:	f004 fcc5 	bl	8018b2c <iprintf>
      seg = last_unsent;
 80141a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141a4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80141a6:	8a7b      	ldrh	r3, [r7, #18]
 80141a8:	88fa      	ldrh	r2, [r7, #6]
 80141aa:	4293      	cmp	r3, r2
 80141ac:	bf28      	it	cs
 80141ae:	4613      	movcs	r3, r2
 80141b0:	b29b      	uxth	r3, r3
 80141b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80141b4:	4293      	cmp	r3, r2
 80141b6:	bf28      	it	cs
 80141b8:	4613      	movcs	r3, r2
 80141ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80141bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80141c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80141c2:	4413      	add	r3, r2
 80141c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80141c8:	8a7a      	ldrh	r2, [r7, #18]
 80141ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80141cc:	1ad3      	subs	r3, r2, r3
 80141ce:	b29b      	uxth	r3, r3
 80141d0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80141d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80141d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80141d6:	1ad3      	subs	r3, r2, r3
 80141d8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80141da:	8a7b      	ldrh	r3, [r7, #18]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d00b      	beq.n	80141f8 <tcp_write+0x1a0>
 80141e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80141e4:	88fb      	ldrh	r3, [r7, #6]
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d006      	beq.n	80141f8 <tcp_write+0x1a0>
 80141ea:	4b52      	ldr	r3, [pc, #328]	; (8014334 <tcp_write+0x2dc>)
 80141ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141f0:	4956      	ldr	r1, [pc, #344]	; (801434c <tcp_write+0x2f4>)
 80141f2:	4852      	ldr	r0, [pc, #328]	; (801433c <tcp_write+0x2e4>)
 80141f4:	f004 fc9a 	bl	8018b2c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80141f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80141fc:	88fb      	ldrh	r3, [r7, #6]
 80141fe:	429a      	cmp	r2, r3
 8014200:	f080 8167 	bcs.w	80144d2 <tcp_write+0x47a>
 8014204:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014206:	2b00      	cmp	r3, #0
 8014208:	f000 8163 	beq.w	80144d2 <tcp_write+0x47a>
 801420c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801420e:	891b      	ldrh	r3, [r3, #8]
 8014210:	2b00      	cmp	r3, #0
 8014212:	f000 815e 	beq.w	80144d2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014216:	88fa      	ldrh	r2, [r7, #6]
 8014218:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801421c:	1ad2      	subs	r2, r2, r3
 801421e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014220:	4293      	cmp	r3, r2
 8014222:	bfa8      	it	ge
 8014224:	4613      	movge	r3, r2
 8014226:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801422a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801422c:	797b      	ldrb	r3, [r7, #5]
 801422e:	f003 0301 	and.w	r3, r3, #1
 8014232:	2b00      	cmp	r3, #0
 8014234:	d027      	beq.n	8014286 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014236:	f107 0012 	add.w	r0, r7, #18
 801423a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801423c:	8bf9      	ldrh	r1, [r7, #30]
 801423e:	2301      	movs	r3, #1
 8014240:	9302      	str	r3, [sp, #8]
 8014242:	797b      	ldrb	r3, [r7, #5]
 8014244:	9301      	str	r3, [sp, #4]
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	9300      	str	r3, [sp, #0]
 801424a:	4603      	mov	r3, r0
 801424c:	2000      	movs	r0, #0
 801424e:	f7ff fe0f 	bl	8013e70 <tcp_pbuf_prealloc>
 8014252:	6578      	str	r0, [r7, #84]	; 0x54
 8014254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014256:	2b00      	cmp	r3, #0
 8014258:	f000 8225 	beq.w	80146a6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801425c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801425e:	6858      	ldr	r0, [r3, #4]
 8014260:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014264:	68ba      	ldr	r2, [r7, #8]
 8014266:	4413      	add	r3, r2
 8014268:	8bfa      	ldrh	r2, [r7, #30]
 801426a:	4619      	mov	r1, r3
 801426c:	f004 fc48 	bl	8018b00 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014270:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014272:	f7fb f9e5 	bl	800f640 <pbuf_clen>
 8014276:	4603      	mov	r3, r0
 8014278:	461a      	mov	r2, r3
 801427a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801427e:	4413      	add	r3, r2
 8014280:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8014284:	e041      	b.n	801430a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014288:	685b      	ldr	r3, [r3, #4]
 801428a:	637b      	str	r3, [r7, #52]	; 0x34
 801428c:	e002      	b.n	8014294 <tcp_write+0x23c>
 801428e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	637b      	str	r3, [r7, #52]	; 0x34
 8014294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d1f8      	bne.n	801428e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801429c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801429e:	7b1b      	ldrb	r3, [r3, #12]
 80142a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d115      	bne.n	80142d4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80142a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142aa:	685b      	ldr	r3, [r3, #4]
 80142ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142ae:	8952      	ldrh	r2, [r2, #10]
 80142b0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80142b2:	68ba      	ldr	r2, [r7, #8]
 80142b4:	429a      	cmp	r2, r3
 80142b6:	d10d      	bne.n	80142d4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80142b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d006      	beq.n	80142ce <tcp_write+0x276>
 80142c0:	4b1c      	ldr	r3, [pc, #112]	; (8014334 <tcp_write+0x2dc>)
 80142c2:	f240 2231 	movw	r2, #561	; 0x231
 80142c6:	4922      	ldr	r1, [pc, #136]	; (8014350 <tcp_write+0x2f8>)
 80142c8:	481c      	ldr	r0, [pc, #112]	; (801433c <tcp_write+0x2e4>)
 80142ca:	f004 fc2f 	bl	8018b2c <iprintf>
          extendlen = seglen;
 80142ce:	8bfb      	ldrh	r3, [r7, #30]
 80142d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80142d2:	e01a      	b.n	801430a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80142d4:	8bfb      	ldrh	r3, [r7, #30]
 80142d6:	2201      	movs	r2, #1
 80142d8:	4619      	mov	r1, r3
 80142da:	2000      	movs	r0, #0
 80142dc:	f7fa fe3e 	bl	800ef5c <pbuf_alloc>
 80142e0:	6578      	str	r0, [r7, #84]	; 0x54
 80142e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	f000 81e0 	beq.w	80146aa <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80142ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80142ee:	68ba      	ldr	r2, [r7, #8]
 80142f0:	441a      	add	r2, r3
 80142f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142f4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80142f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80142f8:	f7fb f9a2 	bl	800f640 <pbuf_clen>
 80142fc:	4603      	mov	r3, r0
 80142fe:	461a      	mov	r2, r3
 8014300:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014304:	4413      	add	r3, r2
 8014306:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801430a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801430e:	8bfb      	ldrh	r3, [r7, #30]
 8014310:	4413      	add	r3, r2
 8014312:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014316:	e0dc      	b.n	80144d2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801431e:	2b00      	cmp	r3, #0
 8014320:	f000 80d7 	beq.w	80144d2 <tcp_write+0x47a>
 8014324:	4b03      	ldr	r3, [pc, #12]	; (8014334 <tcp_write+0x2dc>)
 8014326:	f240 224a 	movw	r2, #586	; 0x24a
 801432a:	490a      	ldr	r1, [pc, #40]	; (8014354 <tcp_write+0x2fc>)
 801432c:	4803      	ldr	r0, [pc, #12]	; (801433c <tcp_write+0x2e4>)
 801432e:	f004 fbfd 	bl	8018b2c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014332:	e0ce      	b.n	80144d2 <tcp_write+0x47a>
 8014334:	0801b4c0 	.word	0x0801b4c0
 8014338:	0801b660 	.word	0x0801b660
 801433c:	0801b514 	.word	0x0801b514
 8014340:	0801b678 	.word	0x0801b678
 8014344:	0801b6ac 	.word	0x0801b6ac
 8014348:	0801b6c4 	.word	0x0801b6c4
 801434c:	0801b6e4 	.word	0x0801b6e4
 8014350:	0801b704 	.word	0x0801b704
 8014354:	0801b730 	.word	0x0801b730
    struct pbuf *p;
    u16_t left = len - pos;
 8014358:	88fa      	ldrh	r2, [r7, #6]
 801435a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801435e:	1ad3      	subs	r3, r2, r3
 8014360:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014362:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014366:	b29b      	uxth	r3, r3
 8014368:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801436a:	1ad3      	subs	r3, r2, r3
 801436c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801436e:	8b7a      	ldrh	r2, [r7, #26]
 8014370:	8bbb      	ldrh	r3, [r7, #28]
 8014372:	4293      	cmp	r3, r2
 8014374:	bf28      	it	cs
 8014376:	4613      	movcs	r3, r2
 8014378:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801437a:	797b      	ldrb	r3, [r7, #5]
 801437c:	f003 0301 	and.w	r3, r3, #1
 8014380:	2b00      	cmp	r3, #0
 8014382:	d036      	beq.n	80143f2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014384:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014388:	b29a      	uxth	r2, r3
 801438a:	8b3b      	ldrh	r3, [r7, #24]
 801438c:	4413      	add	r3, r2
 801438e:	b299      	uxth	r1, r3
 8014390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014392:	2b00      	cmp	r3, #0
 8014394:	bf0c      	ite	eq
 8014396:	2301      	moveq	r3, #1
 8014398:	2300      	movne	r3, #0
 801439a:	b2db      	uxtb	r3, r3
 801439c:	f107 0012 	add.w	r0, r7, #18
 80143a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80143a2:	9302      	str	r3, [sp, #8]
 80143a4:	797b      	ldrb	r3, [r7, #5]
 80143a6:	9301      	str	r3, [sp, #4]
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	9300      	str	r3, [sp, #0]
 80143ac:	4603      	mov	r3, r0
 80143ae:	2036      	movs	r0, #54	; 0x36
 80143b0:	f7ff fd5e 	bl	8013e70 <tcp_pbuf_prealloc>
 80143b4:	6338      	str	r0, [r7, #48]	; 0x30
 80143b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	f000 8178 	beq.w	80146ae <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80143be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c0:	895b      	ldrh	r3, [r3, #10]
 80143c2:	8b3a      	ldrh	r2, [r7, #24]
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d906      	bls.n	80143d6 <tcp_write+0x37e>
 80143c8:	4b8c      	ldr	r3, [pc, #560]	; (80145fc <tcp_write+0x5a4>)
 80143ca:	f240 2266 	movw	r2, #614	; 0x266
 80143ce:	498c      	ldr	r1, [pc, #560]	; (8014600 <tcp_write+0x5a8>)
 80143d0:	488c      	ldr	r0, [pc, #560]	; (8014604 <tcp_write+0x5ac>)
 80143d2:	f004 fbab 	bl	8018b2c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80143d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d8:	685a      	ldr	r2, [r3, #4]
 80143da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80143de:	18d0      	adds	r0, r2, r3
 80143e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80143e4:	68ba      	ldr	r2, [r7, #8]
 80143e6:	4413      	add	r3, r2
 80143e8:	8b3a      	ldrh	r2, [r7, #24]
 80143ea:	4619      	mov	r1, r3
 80143ec:	f004 fb88 	bl	8018b00 <memcpy>
 80143f0:	e02f      	b.n	8014452 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80143f2:	8a7b      	ldrh	r3, [r7, #18]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d006      	beq.n	8014406 <tcp_write+0x3ae>
 80143f8:	4b80      	ldr	r3, [pc, #512]	; (80145fc <tcp_write+0x5a4>)
 80143fa:	f240 2271 	movw	r2, #625	; 0x271
 80143fe:	4982      	ldr	r1, [pc, #520]	; (8014608 <tcp_write+0x5b0>)
 8014400:	4880      	ldr	r0, [pc, #512]	; (8014604 <tcp_write+0x5ac>)
 8014402:	f004 fb93 	bl	8018b2c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014406:	8b3b      	ldrh	r3, [r7, #24]
 8014408:	2201      	movs	r2, #1
 801440a:	4619      	mov	r1, r3
 801440c:	2036      	movs	r0, #54	; 0x36
 801440e:	f7fa fda5 	bl	800ef5c <pbuf_alloc>
 8014412:	6178      	str	r0, [r7, #20]
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	2b00      	cmp	r3, #0
 8014418:	f000 814b 	beq.w	80146b2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801441c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014420:	68ba      	ldr	r2, [r7, #8]
 8014422:	441a      	add	r2, r3
 8014424:	697b      	ldr	r3, [r7, #20]
 8014426:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014428:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801442c:	b29b      	uxth	r3, r3
 801442e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014432:	4619      	mov	r1, r3
 8014434:	2036      	movs	r0, #54	; 0x36
 8014436:	f7fa fd91 	bl	800ef5c <pbuf_alloc>
 801443a:	6338      	str	r0, [r7, #48]	; 0x30
 801443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801443e:	2b00      	cmp	r3, #0
 8014440:	d103      	bne.n	801444a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014442:	6978      	ldr	r0, [r7, #20]
 8014444:	f7fb f86e 	bl	800f524 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014448:	e136      	b.n	80146b8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801444a:	6979      	ldr	r1, [r7, #20]
 801444c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801444e:	f7fb f937 	bl	800f6c0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014454:	f7fb f8f4 	bl	800f640 <pbuf_clen>
 8014458:	4603      	mov	r3, r0
 801445a:	461a      	mov	r2, r3
 801445c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014460:	4413      	add	r3, r2
 8014462:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8014466:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801446a:	2b09      	cmp	r3, #9
 801446c:	d903      	bls.n	8014476 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801446e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014470:	f7fb f858 	bl	800f524 <pbuf_free>
      goto memerr;
 8014474:	e120      	b.n	80146b8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801447a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801447e:	441a      	add	r2, r3
 8014480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014484:	9300      	str	r3, [sp, #0]
 8014486:	4613      	mov	r3, r2
 8014488:	2200      	movs	r2, #0
 801448a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801448c:	68f8      	ldr	r0, [r7, #12]
 801448e:	f7ff fc51 	bl	8013d34 <tcp_create_segment>
 8014492:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014496:	2b00      	cmp	r3, #0
 8014498:	f000 810d 	beq.w	80146b6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801449c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d102      	bne.n	80144a8 <tcp_write+0x450>
      queue = seg;
 80144a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144a4:	647b      	str	r3, [r7, #68]	; 0x44
 80144a6:	e00c      	b.n	80144c2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80144a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d106      	bne.n	80144bc <tcp_write+0x464>
 80144ae:	4b53      	ldr	r3, [pc, #332]	; (80145fc <tcp_write+0x5a4>)
 80144b0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80144b4:	4955      	ldr	r1, [pc, #340]	; (801460c <tcp_write+0x5b4>)
 80144b6:	4853      	ldr	r0, [pc, #332]	; (8014604 <tcp_write+0x5ac>)
 80144b8:	f004 fb38 	bl	8018b2c <iprintf>
      prev_seg->next = seg;
 80144bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80144c0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80144c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144c4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80144c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80144ca:	8b3b      	ldrh	r3, [r7, #24]
 80144cc:	4413      	add	r3, r2
 80144ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80144d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80144d6:	88fb      	ldrh	r3, [r7, #6]
 80144d8:	429a      	cmp	r2, r3
 80144da:	f4ff af3d 	bcc.w	8014358 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80144de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d02c      	beq.n	801453e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80144e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144e6:	685b      	ldr	r3, [r3, #4]
 80144e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80144ea:	e01e      	b.n	801452a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80144ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ee:	891a      	ldrh	r2, [r3, #8]
 80144f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80144f2:	4413      	add	r3, r2
 80144f4:	b29a      	uxth	r2, r3
 80144f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144f8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80144fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d110      	bne.n	8014524 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014504:	685b      	ldr	r3, [r3, #4]
 8014506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014508:	8952      	ldrh	r2, [r2, #10]
 801450a:	4413      	add	r3, r2
 801450c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801450e:	68b9      	ldr	r1, [r7, #8]
 8014510:	4618      	mov	r0, r3
 8014512:	f004 faf5 	bl	8018b00 <memcpy>
        p->len += oversize_used;
 8014516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014518:	895a      	ldrh	r2, [r3, #10]
 801451a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801451c:	4413      	add	r3, r2
 801451e:	b29a      	uxth	r2, r3
 8014520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014522:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	62fb      	str	r3, [r7, #44]	; 0x2c
 801452a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801452c:	2b00      	cmp	r3, #0
 801452e:	d1dd      	bne.n	80144ec <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8014530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014532:	891a      	ldrh	r2, [r3, #8]
 8014534:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014536:	4413      	add	r3, r2
 8014538:	b29a      	uxth	r2, r3
 801453a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801453c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801453e:	8a7a      	ldrh	r2, [r7, #18]
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014548:	2b00      	cmp	r3, #0
 801454a:	d018      	beq.n	801457e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801454c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801454e:	2b00      	cmp	r3, #0
 8014550:	d106      	bne.n	8014560 <tcp_write+0x508>
 8014552:	4b2a      	ldr	r3, [pc, #168]	; (80145fc <tcp_write+0x5a4>)
 8014554:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8014558:	492d      	ldr	r1, [pc, #180]	; (8014610 <tcp_write+0x5b8>)
 801455a:	482a      	ldr	r0, [pc, #168]	; (8014604 <tcp_write+0x5ac>)
 801455c:	f004 fae6 	bl	8018b2c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014566:	4618      	mov	r0, r3
 8014568:	f7fb f8aa 	bl	800f6c0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801456c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801456e:	891a      	ldrh	r2, [r3, #8]
 8014570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014572:	891b      	ldrh	r3, [r3, #8]
 8014574:	4413      	add	r3, r2
 8014576:	b29a      	uxth	r2, r3
 8014578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801457a:	811a      	strh	r2, [r3, #8]
 801457c:	e037      	b.n	80145ee <tcp_write+0x596>
  } else if (extendlen > 0) {
 801457e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014580:	2b00      	cmp	r3, #0
 8014582:	d034      	beq.n	80145ee <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014586:	2b00      	cmp	r3, #0
 8014588:	d003      	beq.n	8014592 <tcp_write+0x53a>
 801458a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d106      	bne.n	80145a0 <tcp_write+0x548>
 8014592:	4b1a      	ldr	r3, [pc, #104]	; (80145fc <tcp_write+0x5a4>)
 8014594:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014598:	491e      	ldr	r1, [pc, #120]	; (8014614 <tcp_write+0x5bc>)
 801459a:	481a      	ldr	r0, [pc, #104]	; (8014604 <tcp_write+0x5ac>)
 801459c:	f004 fac6 	bl	8018b2c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80145a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145a2:	685b      	ldr	r3, [r3, #4]
 80145a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80145a6:	e009      	b.n	80145bc <tcp_write+0x564>
      p->tot_len += extendlen;
 80145a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145aa:	891a      	ldrh	r2, [r3, #8]
 80145ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80145ae:	4413      	add	r3, r2
 80145b0:	b29a      	uxth	r2, r3
 80145b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145b4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80145b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80145bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d1f1      	bne.n	80145a8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80145c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145c6:	891a      	ldrh	r2, [r3, #8]
 80145c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80145ca:	4413      	add	r3, r2
 80145cc:	b29a      	uxth	r2, r3
 80145ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80145d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d4:	895a      	ldrh	r2, [r3, #10]
 80145d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80145d8:	4413      	add	r3, r2
 80145da:	b29a      	uxth	r2, r3
 80145dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145de:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80145e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145e2:	891a      	ldrh	r2, [r3, #8]
 80145e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80145e6:	4413      	add	r3, r2
 80145e8:	b29a      	uxth	r2, r3
 80145ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145ec:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80145ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d111      	bne.n	8014618 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80145fa:	e010      	b.n	801461e <tcp_write+0x5c6>
 80145fc:	0801b4c0 	.word	0x0801b4c0
 8014600:	0801b760 	.word	0x0801b760
 8014604:	0801b514 	.word	0x0801b514
 8014608:	0801b7a0 	.word	0x0801b7a0
 801460c:	0801b7b0 	.word	0x0801b7b0
 8014610:	0801b7c4 	.word	0x0801b7c4
 8014614:	0801b7fc 	.word	0x0801b7fc
  } else {
    last_unsent->next = queue;
 8014618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801461a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801461c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014622:	88fb      	ldrh	r3, [r7, #6]
 8014624:	441a      	add	r2, r3
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014630:	88fb      	ldrh	r3, [r7, #6]
 8014632:	1ad3      	subs	r3, r2, r3
 8014634:	b29a      	uxth	r2, r3
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014642:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801464c:	2b00      	cmp	r3, #0
 801464e:	d00e      	beq.n	801466e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014654:	2b00      	cmp	r3, #0
 8014656:	d10a      	bne.n	801466e <tcp_write+0x616>
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801465c:	2b00      	cmp	r3, #0
 801465e:	d106      	bne.n	801466e <tcp_write+0x616>
 8014660:	4b2c      	ldr	r3, [pc, #176]	; (8014714 <tcp_write+0x6bc>)
 8014662:	f240 3212 	movw	r2, #786	; 0x312
 8014666:	492c      	ldr	r1, [pc, #176]	; (8014718 <tcp_write+0x6c0>)
 8014668:	482c      	ldr	r0, [pc, #176]	; (801471c <tcp_write+0x6c4>)
 801466a:	f004 fa5f 	bl	8018b2c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801466e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014670:	2b00      	cmp	r3, #0
 8014672:	d016      	beq.n	80146a2 <tcp_write+0x64a>
 8014674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014676:	68db      	ldr	r3, [r3, #12]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d012      	beq.n	80146a2 <tcp_write+0x64a>
 801467c:	797b      	ldrb	r3, [r7, #5]
 801467e:	f003 0302 	and.w	r3, r3, #2
 8014682:	2b00      	cmp	r3, #0
 8014684:	d10d      	bne.n	80146a2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014688:	68db      	ldr	r3, [r3, #12]
 801468a:	899b      	ldrh	r3, [r3, #12]
 801468c:	b29c      	uxth	r4, r3
 801468e:	2008      	movs	r0, #8
 8014690:	f7f9 fa9e 	bl	800dbd0 <lwip_htons>
 8014694:	4603      	mov	r3, r0
 8014696:	461a      	mov	r2, r3
 8014698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801469a:	68db      	ldr	r3, [r3, #12]
 801469c:	4322      	orrs	r2, r4
 801469e:	b292      	uxth	r2, r2
 80146a0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80146a2:	2300      	movs	r3, #0
 80146a4:	e031      	b.n	801470a <tcp_write+0x6b2>
          goto memerr;
 80146a6:	bf00      	nop
 80146a8:	e006      	b.n	80146b8 <tcp_write+0x660>
            goto memerr;
 80146aa:	bf00      	nop
 80146ac:	e004      	b.n	80146b8 <tcp_write+0x660>
        goto memerr;
 80146ae:	bf00      	nop
 80146b0:	e002      	b.n	80146b8 <tcp_write+0x660>
        goto memerr;
 80146b2:	bf00      	nop
 80146b4:	e000      	b.n	80146b8 <tcp_write+0x660>
      goto memerr;
 80146b6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	8b5b      	ldrh	r3, [r3, #26]
 80146bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146c0:	b29a      	uxth	r2, r3
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80146c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d002      	beq.n	80146d2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80146cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80146ce:	f7fa ff29 	bl	800f524 <pbuf_free>
  }
  if (queue != NULL) {
 80146d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d002      	beq.n	80146de <tcp_write+0x686>
    tcp_segs_free(queue);
 80146d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80146da:	f7fc fb57 	bl	8010d8c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d00e      	beq.n	8014706 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d10a      	bne.n	8014706 <tcp_write+0x6ae>
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d106      	bne.n	8014706 <tcp_write+0x6ae>
 80146f8:	4b06      	ldr	r3, [pc, #24]	; (8014714 <tcp_write+0x6bc>)
 80146fa:	f240 3227 	movw	r2, #807	; 0x327
 80146fe:	4906      	ldr	r1, [pc, #24]	; (8014718 <tcp_write+0x6c0>)
 8014700:	4806      	ldr	r0, [pc, #24]	; (801471c <tcp_write+0x6c4>)
 8014702:	f004 fa13 	bl	8018b2c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014706:	f04f 33ff 	mov.w	r3, #4294967295
}
 801470a:	4618      	mov	r0, r3
 801470c:	375c      	adds	r7, #92	; 0x5c
 801470e:	46bd      	mov	sp, r7
 8014710:	bd90      	pop	{r4, r7, pc}
 8014712:	bf00      	nop
 8014714:	0801b4c0 	.word	0x0801b4c0
 8014718:	0801b834 	.word	0x0801b834
 801471c:	0801b514 	.word	0x0801b514

08014720 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014720:	b590      	push	{r4, r7, lr}
 8014722:	b08b      	sub	sp, #44	; 0x2c
 8014724:	af02      	add	r7, sp, #8
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	460b      	mov	r3, r1
 801472a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801472c:	2300      	movs	r3, #0
 801472e:	61fb      	str	r3, [r7, #28]
 8014730:	2300      	movs	r3, #0
 8014732:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014734:	2300      	movs	r3, #0
 8014736:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d106      	bne.n	801474c <tcp_split_unsent_seg+0x2c>
 801473e:	4b95      	ldr	r3, [pc, #596]	; (8014994 <tcp_split_unsent_seg+0x274>)
 8014740:	f240 324b 	movw	r2, #843	; 0x34b
 8014744:	4994      	ldr	r1, [pc, #592]	; (8014998 <tcp_split_unsent_seg+0x278>)
 8014746:	4895      	ldr	r0, [pc, #596]	; (801499c <tcp_split_unsent_seg+0x27c>)
 8014748:	f004 f9f0 	bl	8018b2c <iprintf>

  useg = pcb->unsent;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014750:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014752:	697b      	ldr	r3, [r7, #20]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d102      	bne.n	801475e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014758:	f04f 33ff 	mov.w	r3, #4294967295
 801475c:	e116      	b.n	801498c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801475e:	887b      	ldrh	r3, [r7, #2]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d109      	bne.n	8014778 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014764:	4b8b      	ldr	r3, [pc, #556]	; (8014994 <tcp_split_unsent_seg+0x274>)
 8014766:	f240 3253 	movw	r2, #851	; 0x353
 801476a:	498d      	ldr	r1, [pc, #564]	; (80149a0 <tcp_split_unsent_seg+0x280>)
 801476c:	488b      	ldr	r0, [pc, #556]	; (801499c <tcp_split_unsent_seg+0x27c>)
 801476e:	f004 f9dd 	bl	8018b2c <iprintf>
    return ERR_VAL;
 8014772:	f06f 0305 	mvn.w	r3, #5
 8014776:	e109      	b.n	801498c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	891b      	ldrh	r3, [r3, #8]
 801477c:	887a      	ldrh	r2, [r7, #2]
 801477e:	429a      	cmp	r2, r3
 8014780:	d301      	bcc.n	8014786 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014782:	2300      	movs	r3, #0
 8014784:	e102      	b.n	801498c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801478a:	887a      	ldrh	r2, [r7, #2]
 801478c:	429a      	cmp	r2, r3
 801478e:	d906      	bls.n	801479e <tcp_split_unsent_seg+0x7e>
 8014790:	4b80      	ldr	r3, [pc, #512]	; (8014994 <tcp_split_unsent_seg+0x274>)
 8014792:	f240 325b 	movw	r2, #859	; 0x35b
 8014796:	4983      	ldr	r1, [pc, #524]	; (80149a4 <tcp_split_unsent_seg+0x284>)
 8014798:	4880      	ldr	r0, [pc, #512]	; (801499c <tcp_split_unsent_seg+0x27c>)
 801479a:	f004 f9c7 	bl	8018b2c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	891b      	ldrh	r3, [r3, #8]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d106      	bne.n	80147b4 <tcp_split_unsent_seg+0x94>
 80147a6:	4b7b      	ldr	r3, [pc, #492]	; (8014994 <tcp_split_unsent_seg+0x274>)
 80147a8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80147ac:	497e      	ldr	r1, [pc, #504]	; (80149a8 <tcp_split_unsent_seg+0x288>)
 80147ae:	487b      	ldr	r0, [pc, #492]	; (801499c <tcp_split_unsent_seg+0x27c>)
 80147b0:	f004 f9bc 	bl	8018b2c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	7a9b      	ldrb	r3, [r3, #10]
 80147b8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80147ba:	7bfb      	ldrb	r3, [r7, #15]
 80147bc:	009b      	lsls	r3, r3, #2
 80147be:	b2db      	uxtb	r3, r3
 80147c0:	f003 0304 	and.w	r3, r3, #4
 80147c4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	891a      	ldrh	r2, [r3, #8]
 80147ca:	887b      	ldrh	r3, [r7, #2]
 80147cc:	1ad3      	subs	r3, r2, r3
 80147ce:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80147d0:	7bbb      	ldrb	r3, [r7, #14]
 80147d2:	b29a      	uxth	r2, r3
 80147d4:	89bb      	ldrh	r3, [r7, #12]
 80147d6:	4413      	add	r3, r2
 80147d8:	b29b      	uxth	r3, r3
 80147da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80147de:	4619      	mov	r1, r3
 80147e0:	2036      	movs	r0, #54	; 0x36
 80147e2:	f7fa fbbb 	bl	800ef5c <pbuf_alloc>
 80147e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	f000 80b7 	beq.w	801495e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	891a      	ldrh	r2, [r3, #8]
 80147f6:	697b      	ldr	r3, [r7, #20]
 80147f8:	891b      	ldrh	r3, [r3, #8]
 80147fa:	1ad3      	subs	r3, r2, r3
 80147fc:	b29a      	uxth	r2, r3
 80147fe:	887b      	ldrh	r3, [r7, #2]
 8014800:	4413      	add	r3, r2
 8014802:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014804:	697b      	ldr	r3, [r7, #20]
 8014806:	6858      	ldr	r0, [r3, #4]
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	685a      	ldr	r2, [r3, #4]
 801480c:	7bbb      	ldrb	r3, [r7, #14]
 801480e:	18d1      	adds	r1, r2, r3
 8014810:	897b      	ldrh	r3, [r7, #10]
 8014812:	89ba      	ldrh	r2, [r7, #12]
 8014814:	f7fb f88c 	bl	800f930 <pbuf_copy_partial>
 8014818:	4603      	mov	r3, r0
 801481a:	461a      	mov	r2, r3
 801481c:	89bb      	ldrh	r3, [r7, #12]
 801481e:	4293      	cmp	r3, r2
 8014820:	f040 809f 	bne.w	8014962 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014824:	697b      	ldr	r3, [r7, #20]
 8014826:	68db      	ldr	r3, [r3, #12]
 8014828:	899b      	ldrh	r3, [r3, #12]
 801482a:	b29b      	uxth	r3, r3
 801482c:	4618      	mov	r0, r3
 801482e:	f7f9 f9cf 	bl	800dbd0 <lwip_htons>
 8014832:	4603      	mov	r3, r0
 8014834:	b2db      	uxtb	r3, r3
 8014836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801483a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801483c:	2300      	movs	r3, #0
 801483e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014840:	7efb      	ldrb	r3, [r7, #27]
 8014842:	f003 0308 	and.w	r3, r3, #8
 8014846:	2b00      	cmp	r3, #0
 8014848:	d007      	beq.n	801485a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801484a:	7efb      	ldrb	r3, [r7, #27]
 801484c:	f023 0308 	bic.w	r3, r3, #8
 8014850:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014852:	7ebb      	ldrb	r3, [r7, #26]
 8014854:	f043 0308 	orr.w	r3, r3, #8
 8014858:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801485a:	7efb      	ldrb	r3, [r7, #27]
 801485c:	f003 0301 	and.w	r3, r3, #1
 8014860:	2b00      	cmp	r3, #0
 8014862:	d007      	beq.n	8014874 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014864:	7efb      	ldrb	r3, [r7, #27]
 8014866:	f023 0301 	bic.w	r3, r3, #1
 801486a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801486c:	7ebb      	ldrb	r3, [r7, #26]
 801486e:	f043 0301 	orr.w	r3, r3, #1
 8014872:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	68db      	ldr	r3, [r3, #12]
 8014878:	685b      	ldr	r3, [r3, #4]
 801487a:	4618      	mov	r0, r3
 801487c:	f7f9 f9bd 	bl	800dbfa <lwip_htonl>
 8014880:	4602      	mov	r2, r0
 8014882:	887b      	ldrh	r3, [r7, #2]
 8014884:	18d1      	adds	r1, r2, r3
 8014886:	7eba      	ldrb	r2, [r7, #26]
 8014888:	7bfb      	ldrb	r3, [r7, #15]
 801488a:	9300      	str	r3, [sp, #0]
 801488c:	460b      	mov	r3, r1
 801488e:	6939      	ldr	r1, [r7, #16]
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	f7ff fa4f 	bl	8013d34 <tcp_create_segment>
 8014896:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d063      	beq.n	8014966 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	685b      	ldr	r3, [r3, #4]
 80148a2:	4618      	mov	r0, r3
 80148a4:	f7fa fecc 	bl	800f640 <pbuf_clen>
 80148a8:	4603      	mov	r3, r0
 80148aa:	461a      	mov	r2, r3
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80148b2:	1a9b      	subs	r3, r3, r2
 80148b4:	b29a      	uxth	r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80148bc:	697b      	ldr	r3, [r7, #20]
 80148be:	6858      	ldr	r0, [r3, #4]
 80148c0:	697b      	ldr	r3, [r7, #20]
 80148c2:	685b      	ldr	r3, [r3, #4]
 80148c4:	891a      	ldrh	r2, [r3, #8]
 80148c6:	89bb      	ldrh	r3, [r7, #12]
 80148c8:	1ad3      	subs	r3, r2, r3
 80148ca:	b29b      	uxth	r3, r3
 80148cc:	4619      	mov	r1, r3
 80148ce:	f7fa fca3 	bl	800f218 <pbuf_realloc>
  useg->len -= remainder;
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	891a      	ldrh	r2, [r3, #8]
 80148d6:	89bb      	ldrh	r3, [r7, #12]
 80148d8:	1ad3      	subs	r3, r2, r3
 80148da:	b29a      	uxth	r2, r3
 80148dc:	697b      	ldr	r3, [r7, #20]
 80148de:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80148e0:	697b      	ldr	r3, [r7, #20]
 80148e2:	68db      	ldr	r3, [r3, #12]
 80148e4:	899b      	ldrh	r3, [r3, #12]
 80148e6:	b29c      	uxth	r4, r3
 80148e8:	7efb      	ldrb	r3, [r7, #27]
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7f9 f96f 	bl	800dbd0 <lwip_htons>
 80148f2:	4603      	mov	r3, r0
 80148f4:	461a      	mov	r2, r3
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	68db      	ldr	r3, [r3, #12]
 80148fa:	4322      	orrs	r2, r4
 80148fc:	b292      	uxth	r2, r2
 80148fe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	685b      	ldr	r3, [r3, #4]
 8014904:	4618      	mov	r0, r3
 8014906:	f7fa fe9b 	bl	800f640 <pbuf_clen>
 801490a:	4603      	mov	r3, r0
 801490c:	461a      	mov	r2, r3
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014914:	4413      	add	r3, r2
 8014916:	b29a      	uxth	r2, r3
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801491e:	69fb      	ldr	r3, [r7, #28]
 8014920:	685b      	ldr	r3, [r3, #4]
 8014922:	4618      	mov	r0, r3
 8014924:	f7fa fe8c 	bl	800f640 <pbuf_clen>
 8014928:	4603      	mov	r3, r0
 801492a:	461a      	mov	r2, r3
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014932:	4413      	add	r3, r2
 8014934:	b29a      	uxth	r2, r3
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	681a      	ldr	r2, [r3, #0]
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	69fa      	ldr	r2, [r7, #28]
 8014948:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801494a:	69fb      	ldr	r3, [r7, #28]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d103      	bne.n	801495a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2200      	movs	r2, #0
 8014956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801495a:	2300      	movs	r3, #0
 801495c:	e016      	b.n	801498c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801495e:	bf00      	nop
 8014960:	e002      	b.n	8014968 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014962:	bf00      	nop
 8014964:	e000      	b.n	8014968 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014966:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014968:	69fb      	ldr	r3, [r7, #28]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d006      	beq.n	801497c <tcp_split_unsent_seg+0x25c>
 801496e:	4b09      	ldr	r3, [pc, #36]	; (8014994 <tcp_split_unsent_seg+0x274>)
 8014970:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014974:	490d      	ldr	r1, [pc, #52]	; (80149ac <tcp_split_unsent_seg+0x28c>)
 8014976:	4809      	ldr	r0, [pc, #36]	; (801499c <tcp_split_unsent_seg+0x27c>)
 8014978:	f004 f8d8 	bl	8018b2c <iprintf>
  if (p != NULL) {
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d002      	beq.n	8014988 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014982:	6938      	ldr	r0, [r7, #16]
 8014984:	f7fa fdce 	bl	800f524 <pbuf_free>
  }

  return ERR_MEM;
 8014988:	f04f 33ff 	mov.w	r3, #4294967295
}
 801498c:	4618      	mov	r0, r3
 801498e:	3724      	adds	r7, #36	; 0x24
 8014990:	46bd      	mov	sp, r7
 8014992:	bd90      	pop	{r4, r7, pc}
 8014994:	0801b4c0 	.word	0x0801b4c0
 8014998:	0801b854 	.word	0x0801b854
 801499c:	0801b514 	.word	0x0801b514
 80149a0:	0801b878 	.word	0x0801b878
 80149a4:	0801b89c 	.word	0x0801b89c
 80149a8:	0801b8ac 	.word	0x0801b8ac
 80149ac:	0801b8bc 	.word	0x0801b8bc

080149b0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80149b0:	b590      	push	{r4, r7, lr}
 80149b2:	b085      	sub	sp, #20
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d106      	bne.n	80149cc <tcp_send_fin+0x1c>
 80149be:	4b21      	ldr	r3, [pc, #132]	; (8014a44 <tcp_send_fin+0x94>)
 80149c0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80149c4:	4920      	ldr	r1, [pc, #128]	; (8014a48 <tcp_send_fin+0x98>)
 80149c6:	4821      	ldr	r0, [pc, #132]	; (8014a4c <tcp_send_fin+0x9c>)
 80149c8:	f004 f8b0 	bl	8018b2c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d02e      	beq.n	8014a32 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149d8:	60fb      	str	r3, [r7, #12]
 80149da:	e002      	b.n	80149e2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d1f8      	bne.n	80149dc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	68db      	ldr	r3, [r3, #12]
 80149ee:	899b      	ldrh	r3, [r3, #12]
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7f9 f8ec 	bl	800dbd0 <lwip_htons>
 80149f8:	4603      	mov	r3, r0
 80149fa:	b2db      	uxtb	r3, r3
 80149fc:	f003 0307 	and.w	r3, r3, #7
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d116      	bne.n	8014a32 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	68db      	ldr	r3, [r3, #12]
 8014a08:	899b      	ldrh	r3, [r3, #12]
 8014a0a:	b29c      	uxth	r4, r3
 8014a0c:	2001      	movs	r0, #1
 8014a0e:	f7f9 f8df 	bl	800dbd0 <lwip_htons>
 8014a12:	4603      	mov	r3, r0
 8014a14:	461a      	mov	r2, r3
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	68db      	ldr	r3, [r3, #12]
 8014a1a:	4322      	orrs	r2, r4
 8014a1c:	b292      	uxth	r2, r2
 8014a1e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	8b5b      	ldrh	r3, [r3, #26]
 8014a24:	f043 0320 	orr.w	r3, r3, #32
 8014a28:	b29a      	uxth	r2, r3
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	e004      	b.n	8014a3c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014a32:	2101      	movs	r1, #1
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f000 f80b 	bl	8014a50 <tcp_enqueue_flags>
 8014a3a:	4603      	mov	r3, r0
}
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	3714      	adds	r7, #20
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd90      	pop	{r4, r7, pc}
 8014a44:	0801b4c0 	.word	0x0801b4c0
 8014a48:	0801b8c8 	.word	0x0801b8c8
 8014a4c:	0801b514 	.word	0x0801b514

08014a50 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b08a      	sub	sp, #40	; 0x28
 8014a54:	af02      	add	r7, sp, #8
 8014a56:	6078      	str	r0, [r7, #4]
 8014a58:	460b      	mov	r3, r1
 8014a5a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014a60:	2300      	movs	r3, #0
 8014a62:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014a64:	78fb      	ldrb	r3, [r7, #3]
 8014a66:	f003 0303 	and.w	r3, r3, #3
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d106      	bne.n	8014a7c <tcp_enqueue_flags+0x2c>
 8014a6e:	4b67      	ldr	r3, [pc, #412]	; (8014c0c <tcp_enqueue_flags+0x1bc>)
 8014a70:	f240 4211 	movw	r2, #1041	; 0x411
 8014a74:	4966      	ldr	r1, [pc, #408]	; (8014c10 <tcp_enqueue_flags+0x1c0>)
 8014a76:	4867      	ldr	r0, [pc, #412]	; (8014c14 <tcp_enqueue_flags+0x1c4>)
 8014a78:	f004 f858 	bl	8018b2c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d106      	bne.n	8014a90 <tcp_enqueue_flags+0x40>
 8014a82:	4b62      	ldr	r3, [pc, #392]	; (8014c0c <tcp_enqueue_flags+0x1bc>)
 8014a84:	f240 4213 	movw	r2, #1043	; 0x413
 8014a88:	4963      	ldr	r1, [pc, #396]	; (8014c18 <tcp_enqueue_flags+0x1c8>)
 8014a8a:	4862      	ldr	r0, [pc, #392]	; (8014c14 <tcp_enqueue_flags+0x1c4>)
 8014a8c:	f004 f84e 	bl	8018b2c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014a90:	78fb      	ldrb	r3, [r7, #3]
 8014a92:	f003 0302 	and.w	r3, r3, #2
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d001      	beq.n	8014a9e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014a9e:	7ffb      	ldrb	r3, [r7, #31]
 8014aa0:	009b      	lsls	r3, r3, #2
 8014aa2:	b2db      	uxtb	r3, r3
 8014aa4:	f003 0304 	and.w	r3, r3, #4
 8014aa8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014aaa:	7dfb      	ldrb	r3, [r7, #23]
 8014aac:	b29b      	uxth	r3, r3
 8014aae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	2036      	movs	r0, #54	; 0x36
 8014ab6:	f7fa fa51 	bl	800ef5c <pbuf_alloc>
 8014aba:	6138      	str	r0, [r7, #16]
 8014abc:	693b      	ldr	r3, [r7, #16]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d109      	bne.n	8014ad6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	8b5b      	ldrh	r3, [r3, #26]
 8014ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014aca:	b29a      	uxth	r2, r3
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ad4:	e095      	b.n	8014c02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014ad6:	693b      	ldr	r3, [r7, #16]
 8014ad8:	895a      	ldrh	r2, [r3, #10]
 8014ada:	7dfb      	ldrb	r3, [r7, #23]
 8014adc:	b29b      	uxth	r3, r3
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d206      	bcs.n	8014af0 <tcp_enqueue_flags+0xa0>
 8014ae2:	4b4a      	ldr	r3, [pc, #296]	; (8014c0c <tcp_enqueue_flags+0x1bc>)
 8014ae4:	f240 4239 	movw	r2, #1081	; 0x439
 8014ae8:	494c      	ldr	r1, [pc, #304]	; (8014c1c <tcp_enqueue_flags+0x1cc>)
 8014aea:	484a      	ldr	r0, [pc, #296]	; (8014c14 <tcp_enqueue_flags+0x1c4>)
 8014aec:	f004 f81e 	bl	8018b2c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014af4:	78fa      	ldrb	r2, [r7, #3]
 8014af6:	7ffb      	ldrb	r3, [r7, #31]
 8014af8:	9300      	str	r3, [sp, #0]
 8014afa:	460b      	mov	r3, r1
 8014afc:	6939      	ldr	r1, [r7, #16]
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	f7ff f918 	bl	8013d34 <tcp_create_segment>
 8014b04:	60f8      	str	r0, [r7, #12]
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d109      	bne.n	8014b20 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	8b5b      	ldrh	r3, [r3, #26]
 8014b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b14:	b29a      	uxth	r2, r3
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b1e:	e070      	b.n	8014c02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	68db      	ldr	r3, [r3, #12]
 8014b24:	f003 0303 	and.w	r3, r3, #3
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d006      	beq.n	8014b3a <tcp_enqueue_flags+0xea>
 8014b2c:	4b37      	ldr	r3, [pc, #220]	; (8014c0c <tcp_enqueue_flags+0x1bc>)
 8014b2e:	f240 4242 	movw	r2, #1090	; 0x442
 8014b32:	493b      	ldr	r1, [pc, #236]	; (8014c20 <tcp_enqueue_flags+0x1d0>)
 8014b34:	4837      	ldr	r0, [pc, #220]	; (8014c14 <tcp_enqueue_flags+0x1c4>)
 8014b36:	f003 fff9 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	891b      	ldrh	r3, [r3, #8]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d006      	beq.n	8014b50 <tcp_enqueue_flags+0x100>
 8014b42:	4b32      	ldr	r3, [pc, #200]	; (8014c0c <tcp_enqueue_flags+0x1bc>)
 8014b44:	f240 4243 	movw	r2, #1091	; 0x443
 8014b48:	4936      	ldr	r1, [pc, #216]	; (8014c24 <tcp_enqueue_flags+0x1d4>)
 8014b4a:	4832      	ldr	r0, [pc, #200]	; (8014c14 <tcp_enqueue_flags+0x1c4>)
 8014b4c:	f003 ffee 	bl	8018b2c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d103      	bne.n	8014b60 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	68fa      	ldr	r2, [r7, #12]
 8014b5c:	66da      	str	r2, [r3, #108]	; 0x6c
 8014b5e:	e00d      	b.n	8014b7c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b64:	61bb      	str	r3, [r7, #24]
 8014b66:	e002      	b.n	8014b6e <tcp_enqueue_flags+0x11e>
 8014b68:	69bb      	ldr	r3, [r7, #24]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	61bb      	str	r3, [r7, #24]
 8014b6e:	69bb      	ldr	r3, [r7, #24]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d1f8      	bne.n	8014b68 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014b76:	69bb      	ldr	r3, [r7, #24]
 8014b78:	68fa      	ldr	r2, [r7, #12]
 8014b7a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	2200      	movs	r2, #0
 8014b80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014b84:	78fb      	ldrb	r3, [r7, #3]
 8014b86:	f003 0302 	and.w	r3, r3, #2
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d104      	bne.n	8014b98 <tcp_enqueue_flags+0x148>
 8014b8e:	78fb      	ldrb	r3, [r7, #3]
 8014b90:	f003 0301 	and.w	r3, r3, #1
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d004      	beq.n	8014ba2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014b9c:	1c5a      	adds	r2, r3, #1
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014ba2:	78fb      	ldrb	r3, [r7, #3]
 8014ba4:	f003 0301 	and.w	r3, r3, #1
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d006      	beq.n	8014bba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	8b5b      	ldrh	r3, [r3, #26]
 8014bb0:	f043 0320 	orr.w	r3, r3, #32
 8014bb4:	b29a      	uxth	r2, r3
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7fa fd3e 	bl	800f640 <pbuf_clen>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014bce:	4413      	add	r3, r2
 8014bd0:	b29a      	uxth	r2, r3
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d00e      	beq.n	8014c00 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d10a      	bne.n	8014c00 <tcp_enqueue_flags+0x1b0>
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d106      	bne.n	8014c00 <tcp_enqueue_flags+0x1b0>
 8014bf2:	4b06      	ldr	r3, [pc, #24]	; (8014c0c <tcp_enqueue_flags+0x1bc>)
 8014bf4:	f240 4265 	movw	r2, #1125	; 0x465
 8014bf8:	490b      	ldr	r1, [pc, #44]	; (8014c28 <tcp_enqueue_flags+0x1d8>)
 8014bfa:	4806      	ldr	r0, [pc, #24]	; (8014c14 <tcp_enqueue_flags+0x1c4>)
 8014bfc:	f003 ff96 	bl	8018b2c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014c00:	2300      	movs	r3, #0
}
 8014c02:	4618      	mov	r0, r3
 8014c04:	3720      	adds	r7, #32
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}
 8014c0a:	bf00      	nop
 8014c0c:	0801b4c0 	.word	0x0801b4c0
 8014c10:	0801b8e4 	.word	0x0801b8e4
 8014c14:	0801b514 	.word	0x0801b514
 8014c18:	0801b93c 	.word	0x0801b93c
 8014c1c:	0801b95c 	.word	0x0801b95c
 8014c20:	0801b998 	.word	0x0801b998
 8014c24:	0801b9b0 	.word	0x0801b9b0
 8014c28:	0801b9dc 	.word	0x0801b9dc

08014c2c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014c2c:	b5b0      	push	{r4, r5, r7, lr}
 8014c2e:	b08a      	sub	sp, #40	; 0x28
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d106      	bne.n	8014c48 <tcp_output+0x1c>
 8014c3a:	4b9e      	ldr	r3, [pc, #632]	; (8014eb4 <tcp_output+0x288>)
 8014c3c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014c40:	499d      	ldr	r1, [pc, #628]	; (8014eb8 <tcp_output+0x28c>)
 8014c42:	489e      	ldr	r0, [pc, #632]	; (8014ebc <tcp_output+0x290>)
 8014c44:	f003 ff72 	bl	8018b2c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	7d1b      	ldrb	r3, [r3, #20]
 8014c4c:	2b01      	cmp	r3, #1
 8014c4e:	d106      	bne.n	8014c5e <tcp_output+0x32>
 8014c50:	4b98      	ldr	r3, [pc, #608]	; (8014eb4 <tcp_output+0x288>)
 8014c52:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014c56:	499a      	ldr	r1, [pc, #616]	; (8014ec0 <tcp_output+0x294>)
 8014c58:	4898      	ldr	r0, [pc, #608]	; (8014ebc <tcp_output+0x290>)
 8014c5a:	f003 ff67 	bl	8018b2c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014c5e:	4b99      	ldr	r3, [pc, #612]	; (8014ec4 <tcp_output+0x298>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	687a      	ldr	r2, [r7, #4]
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d101      	bne.n	8014c6c <tcp_output+0x40>
    return ERR_OK;
 8014c68:	2300      	movs	r3, #0
 8014c6a:	e1ce      	b.n	801500a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014c78:	4293      	cmp	r3, r2
 8014c7a:	bf28      	it	cs
 8014c7c:	4613      	movcs	r3, r2
 8014c7e:	b29b      	uxth	r3, r3
 8014c80:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c86:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d10b      	bne.n	8014ca6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	8b5b      	ldrh	r3, [r3, #26]
 8014c92:	f003 0302 	and.w	r3, r3, #2
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	f000 81aa 	beq.w	8014ff0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f000 fdcb 	bl	8015838 <tcp_send_empty_ack>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	e1b1      	b.n	801500a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014ca6:	6879      	ldr	r1, [r7, #4]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	3304      	adds	r3, #4
 8014cac:	461a      	mov	r2, r3
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	f7ff f824 	bl	8013cfc <tcp_route>
 8014cb4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d102      	bne.n	8014cc2 <tcp_output+0x96>
    return ERR_RTE;
 8014cbc:	f06f 0303 	mvn.w	r3, #3
 8014cc0:	e1a3      	b.n	801500a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d003      	beq.n	8014cd0 <tcp_output+0xa4>
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d111      	bne.n	8014cf4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d002      	beq.n	8014cdc <tcp_output+0xb0>
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	3304      	adds	r3, #4
 8014cda:	e000      	b.n	8014cde <tcp_output+0xb2>
 8014cdc:	2300      	movs	r3, #0
 8014cde:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d102      	bne.n	8014cec <tcp_output+0xc0>
      return ERR_RTE;
 8014ce6:	f06f 0303 	mvn.w	r3, #3
 8014cea:	e18e      	b.n	801500a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	681a      	ldr	r2, [r3, #0]
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf6:	68db      	ldr	r3, [r3, #12]
 8014cf8:	685b      	ldr	r3, [r3, #4]
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7f8 ff7d 	bl	800dbfa <lwip_htonl>
 8014d00:	4602      	mov	r2, r0
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d06:	1ad3      	subs	r3, r2, r3
 8014d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d0a:	8912      	ldrh	r2, [r2, #8]
 8014d0c:	4413      	add	r3, r2
 8014d0e:	69ba      	ldr	r2, [r7, #24]
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d227      	bcs.n	8014d64 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	69bb      	ldr	r3, [r7, #24]
 8014d1e:	4293      	cmp	r3, r2
 8014d20:	d114      	bne.n	8014d4c <tcp_output+0x120>
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d110      	bne.n	8014d4c <tcp_output+0x120>
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d10b      	bne.n	8014d4c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	2200      	movs	r2, #0
 8014d38:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2201      	movs	r2, #1
 8014d40:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2200      	movs	r2, #0
 8014d48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	8b5b      	ldrh	r3, [r3, #26]
 8014d50:	f003 0302 	and.w	r3, r3, #2
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	f000 814d 	beq.w	8014ff4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f000 fd6c 	bl	8015838 <tcp_send_empty_ack>
 8014d60:	4603      	mov	r3, r0
 8014d62:	e152      	b.n	801500a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2200      	movs	r2, #0
 8014d68:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d70:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014d72:	6a3b      	ldr	r3, [r7, #32]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	f000 811c 	beq.w	8014fb2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014d7a:	e002      	b.n	8014d82 <tcp_output+0x156>
 8014d7c:	6a3b      	ldr	r3, [r7, #32]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	623b      	str	r3, [r7, #32]
 8014d82:	6a3b      	ldr	r3, [r7, #32]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d1f8      	bne.n	8014d7c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014d8a:	e112      	b.n	8014fb2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d8e:	68db      	ldr	r3, [r3, #12]
 8014d90:	899b      	ldrh	r3, [r3, #12]
 8014d92:	b29b      	uxth	r3, r3
 8014d94:	4618      	mov	r0, r3
 8014d96:	f7f8 ff1b 	bl	800dbd0 <lwip_htons>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	b2db      	uxtb	r3, r3
 8014d9e:	f003 0304 	and.w	r3, r3, #4
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d006      	beq.n	8014db4 <tcp_output+0x188>
 8014da6:	4b43      	ldr	r3, [pc, #268]	; (8014eb4 <tcp_output+0x288>)
 8014da8:	f240 5236 	movw	r2, #1334	; 0x536
 8014dac:	4946      	ldr	r1, [pc, #280]	; (8014ec8 <tcp_output+0x29c>)
 8014dae:	4843      	ldr	r0, [pc, #268]	; (8014ebc <tcp_output+0x290>)
 8014db0:	f003 febc 	bl	8018b2c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d01f      	beq.n	8014dfc <tcp_output+0x1d0>
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	8b5b      	ldrh	r3, [r3, #26]
 8014dc0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d119      	bne.n	8014dfc <tcp_output+0x1d0>
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d00b      	beq.n	8014de8 <tcp_output+0x1bc>
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d110      	bne.n	8014dfc <tcp_output+0x1d0>
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dde:	891a      	ldrh	r2, [r3, #8]
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d209      	bcs.n	8014dfc <tcp_output+0x1d0>
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d004      	beq.n	8014dfc <tcp_output+0x1d0>
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014df8:	2b08      	cmp	r3, #8
 8014dfa:	d901      	bls.n	8014e00 <tcp_output+0x1d4>
 8014dfc:	2301      	movs	r3, #1
 8014dfe:	e000      	b.n	8014e02 <tcp_output+0x1d6>
 8014e00:	2300      	movs	r3, #0
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d106      	bne.n	8014e14 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	8b5b      	ldrh	r3, [r3, #26]
 8014e0a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	f000 80e4 	beq.w	8014fdc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	7d1b      	ldrb	r3, [r3, #20]
 8014e18:	2b02      	cmp	r3, #2
 8014e1a:	d00d      	beq.n	8014e38 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e1e:	68db      	ldr	r3, [r3, #12]
 8014e20:	899b      	ldrh	r3, [r3, #12]
 8014e22:	b29c      	uxth	r4, r3
 8014e24:	2010      	movs	r0, #16
 8014e26:	f7f8 fed3 	bl	800dbd0 <lwip_htons>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	461a      	mov	r2, r3
 8014e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e30:	68db      	ldr	r3, [r3, #12]
 8014e32:	4322      	orrs	r2, r4
 8014e34:	b292      	uxth	r2, r2
 8014e36:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014e38:	697a      	ldr	r2, [r7, #20]
 8014e3a:	6879      	ldr	r1, [r7, #4]
 8014e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e3e:	f000 f909 	bl	8015054 <tcp_output_segment>
 8014e42:	4603      	mov	r3, r0
 8014e44:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d009      	beq.n	8014e62 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	8b5b      	ldrh	r3, [r3, #26]
 8014e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e56:	b29a      	uxth	r2, r3
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	835a      	strh	r2, [r3, #26]
      return err;
 8014e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e60:	e0d3      	b.n	801500a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e64:	681a      	ldr	r2, [r3, #0]
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	7d1b      	ldrb	r3, [r3, #20]
 8014e6e:	2b02      	cmp	r3, #2
 8014e70:	d006      	beq.n	8014e80 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	8b5b      	ldrh	r3, [r3, #26]
 8014e76:	f023 0303 	bic.w	r3, r3, #3
 8014e7a:	b29a      	uxth	r2, r3
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e82:	68db      	ldr	r3, [r3, #12]
 8014e84:	685b      	ldr	r3, [r3, #4]
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7f8 feb7 	bl	800dbfa <lwip_htonl>
 8014e8c:	4604      	mov	r4, r0
 8014e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e90:	891b      	ldrh	r3, [r3, #8]
 8014e92:	461d      	mov	r5, r3
 8014e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e96:	68db      	ldr	r3, [r3, #12]
 8014e98:	899b      	ldrh	r3, [r3, #12]
 8014e9a:	b29b      	uxth	r3, r3
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7f8 fe97 	bl	800dbd0 <lwip_htons>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	b2db      	uxtb	r3, r3
 8014ea6:	f003 0303 	and.w	r3, r3, #3
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d00e      	beq.n	8014ecc <tcp_output+0x2a0>
 8014eae:	2301      	movs	r3, #1
 8014eb0:	e00d      	b.n	8014ece <tcp_output+0x2a2>
 8014eb2:	bf00      	nop
 8014eb4:	0801b4c0 	.word	0x0801b4c0
 8014eb8:	0801ba04 	.word	0x0801ba04
 8014ebc:	0801b514 	.word	0x0801b514
 8014ec0:	0801ba1c 	.word	0x0801ba1c
 8014ec4:	24007814 	.word	0x24007814
 8014ec8:	0801ba44 	.word	0x0801ba44
 8014ecc:	2300      	movs	r3, #0
 8014ece:	442b      	add	r3, r5
 8014ed0:	4423      	add	r3, r4
 8014ed2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	1ad3      	subs	r3, r2, r3
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	da02      	bge.n	8014ee6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	68ba      	ldr	r2, [r7, #8]
 8014ee4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee8:	891b      	ldrh	r3, [r3, #8]
 8014eea:	461c      	mov	r4, r3
 8014eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eee:	68db      	ldr	r3, [r3, #12]
 8014ef0:	899b      	ldrh	r3, [r3, #12]
 8014ef2:	b29b      	uxth	r3, r3
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f7f8 fe6b 	bl	800dbd0 <lwip_htons>
 8014efa:	4603      	mov	r3, r0
 8014efc:	b2db      	uxtb	r3, r3
 8014efe:	f003 0303 	and.w	r3, r3, #3
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d001      	beq.n	8014f0a <tcp_output+0x2de>
 8014f06:	2301      	movs	r3, #1
 8014f08:	e000      	b.n	8014f0c <tcp_output+0x2e0>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	4423      	add	r3, r4
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d049      	beq.n	8014fa6 <tcp_output+0x37a>
      seg->next = NULL;
 8014f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f14:	2200      	movs	r2, #0
 8014f16:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d105      	bne.n	8014f2c <tcp_output+0x300>
        pcb->unacked = seg;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f24:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f28:	623b      	str	r3, [r7, #32]
 8014f2a:	e03f      	b.n	8014fac <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2e:	68db      	ldr	r3, [r3, #12]
 8014f30:	685b      	ldr	r3, [r3, #4]
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7f8 fe61 	bl	800dbfa <lwip_htonl>
 8014f38:	4604      	mov	r4, r0
 8014f3a:	6a3b      	ldr	r3, [r7, #32]
 8014f3c:	68db      	ldr	r3, [r3, #12]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	4618      	mov	r0, r3
 8014f42:	f7f8 fe5a 	bl	800dbfa <lwip_htonl>
 8014f46:	4603      	mov	r3, r0
 8014f48:	1ae3      	subs	r3, r4, r3
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	da24      	bge.n	8014f98 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	3370      	adds	r3, #112	; 0x70
 8014f52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014f54:	e002      	b.n	8014f5c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014f56:	69fb      	ldr	r3, [r7, #28]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014f5c:	69fb      	ldr	r3, [r7, #28]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d011      	beq.n	8014f88 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014f64:	69fb      	ldr	r3, [r7, #28]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	68db      	ldr	r3, [r3, #12]
 8014f6a:	685b      	ldr	r3, [r3, #4]
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7f8 fe44 	bl	800dbfa <lwip_htonl>
 8014f72:	4604      	mov	r4, r0
 8014f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f76:	68db      	ldr	r3, [r3, #12]
 8014f78:	685b      	ldr	r3, [r3, #4]
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7f8 fe3d 	bl	800dbfa <lwip_htonl>
 8014f80:	4603      	mov	r3, r0
 8014f82:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	dbe6      	blt.n	8014f56 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014f88:	69fb      	ldr	r3, [r7, #28]
 8014f8a:	681a      	ldr	r2, [r3, #0]
 8014f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f8e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014f90:	69fb      	ldr	r3, [r7, #28]
 8014f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f94:	601a      	str	r2, [r3, #0]
 8014f96:	e009      	b.n	8014fac <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014f98:	6a3b      	ldr	r3, [r7, #32]
 8014f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f9c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014f9e:	6a3b      	ldr	r3, [r7, #32]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	623b      	str	r3, [r7, #32]
 8014fa4:	e002      	b.n	8014fac <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014fa8:	f7fb ff05 	bl	8010db6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fb0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d012      	beq.n	8014fde <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fba:	68db      	ldr	r3, [r3, #12]
 8014fbc:	685b      	ldr	r3, [r3, #4]
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f7f8 fe1b 	bl	800dbfa <lwip_htonl>
 8014fc4:	4602      	mov	r2, r0
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fca:	1ad3      	subs	r3, r2, r3
 8014fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fce:	8912      	ldrh	r2, [r2, #8]
 8014fd0:	4413      	add	r3, r2
  while (seg != NULL &&
 8014fd2:	69ba      	ldr	r2, [r7, #24]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	f4bf aed9 	bcs.w	8014d8c <tcp_output+0x160>
 8014fda:	e000      	b.n	8014fde <tcp_output+0x3b2>
      break;
 8014fdc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d108      	bne.n	8014ff8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014fee:	e004      	b.n	8014ffa <tcp_output+0x3ce>
    goto output_done;
 8014ff0:	bf00      	nop
 8014ff2:	e002      	b.n	8014ffa <tcp_output+0x3ce>
    goto output_done;
 8014ff4:	bf00      	nop
 8014ff6:	e000      	b.n	8014ffa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014ff8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	8b5b      	ldrh	r3, [r3, #26]
 8014ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015002:	b29a      	uxth	r2, r3
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015008:	2300      	movs	r3, #0
}
 801500a:	4618      	mov	r0, r3
 801500c:	3728      	adds	r7, #40	; 0x28
 801500e:	46bd      	mov	sp, r7
 8015010:	bdb0      	pop	{r4, r5, r7, pc}
 8015012:	bf00      	nop

08015014 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b082      	sub	sp, #8
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d106      	bne.n	8015030 <tcp_output_segment_busy+0x1c>
 8015022:	4b09      	ldr	r3, [pc, #36]	; (8015048 <tcp_output_segment_busy+0x34>)
 8015024:	f240 529a 	movw	r2, #1434	; 0x59a
 8015028:	4908      	ldr	r1, [pc, #32]	; (801504c <tcp_output_segment_busy+0x38>)
 801502a:	4809      	ldr	r0, [pc, #36]	; (8015050 <tcp_output_segment_busy+0x3c>)
 801502c:	f003 fd7e 	bl	8018b2c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	7b9b      	ldrb	r3, [r3, #14]
 8015036:	2b01      	cmp	r3, #1
 8015038:	d001      	beq.n	801503e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801503a:	2301      	movs	r3, #1
 801503c:	e000      	b.n	8015040 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801503e:	2300      	movs	r3, #0
}
 8015040:	4618      	mov	r0, r3
 8015042:	3708      	adds	r7, #8
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}
 8015048:	0801b4c0 	.word	0x0801b4c0
 801504c:	0801ba5c 	.word	0x0801ba5c
 8015050:	0801b514 	.word	0x0801b514

08015054 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015054:	b5b0      	push	{r4, r5, r7, lr}
 8015056:	b08c      	sub	sp, #48	; 0x30
 8015058:	af04      	add	r7, sp, #16
 801505a:	60f8      	str	r0, [r7, #12]
 801505c:	60b9      	str	r1, [r7, #8]
 801505e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d106      	bne.n	8015074 <tcp_output_segment+0x20>
 8015066:	4b63      	ldr	r3, [pc, #396]	; (80151f4 <tcp_output_segment+0x1a0>)
 8015068:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801506c:	4962      	ldr	r1, [pc, #392]	; (80151f8 <tcp_output_segment+0x1a4>)
 801506e:	4863      	ldr	r0, [pc, #396]	; (80151fc <tcp_output_segment+0x1a8>)
 8015070:	f003 fd5c 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015074:	68bb      	ldr	r3, [r7, #8]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d106      	bne.n	8015088 <tcp_output_segment+0x34>
 801507a:	4b5e      	ldr	r3, [pc, #376]	; (80151f4 <tcp_output_segment+0x1a0>)
 801507c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015080:	495f      	ldr	r1, [pc, #380]	; (8015200 <tcp_output_segment+0x1ac>)
 8015082:	485e      	ldr	r0, [pc, #376]	; (80151fc <tcp_output_segment+0x1a8>)
 8015084:	f003 fd52 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d106      	bne.n	801509c <tcp_output_segment+0x48>
 801508e:	4b59      	ldr	r3, [pc, #356]	; (80151f4 <tcp_output_segment+0x1a0>)
 8015090:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015094:	495b      	ldr	r1, [pc, #364]	; (8015204 <tcp_output_segment+0x1b0>)
 8015096:	4859      	ldr	r0, [pc, #356]	; (80151fc <tcp_output_segment+0x1a8>)
 8015098:	f003 fd48 	bl	8018b2c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801509c:	68f8      	ldr	r0, [r7, #12]
 801509e:	f7ff ffb9 	bl	8015014 <tcp_output_segment_busy>
 80150a2:	4603      	mov	r3, r0
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d001      	beq.n	80150ac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80150a8:	2300      	movs	r3, #0
 80150aa:	e09f      	b.n	80151ec <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	68dc      	ldr	r4, [r3, #12]
 80150b4:	4610      	mov	r0, r2
 80150b6:	f7f8 fda0 	bl	800dbfa <lwip_htonl>
 80150ba:	4603      	mov	r3, r0
 80150bc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80150be:	68bb      	ldr	r3, [r7, #8]
 80150c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	68dc      	ldr	r4, [r3, #12]
 80150c6:	4610      	mov	r0, r2
 80150c8:	f7f8 fd82 	bl	800dbd0 <lwip_htons>
 80150cc:	4603      	mov	r3, r0
 80150ce:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150d4:	68ba      	ldr	r2, [r7, #8]
 80150d6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80150d8:	441a      	add	r2, r3
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	68db      	ldr	r3, [r3, #12]
 80150e2:	3314      	adds	r3, #20
 80150e4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	7a9b      	ldrb	r3, [r3, #10]
 80150ea:	f003 0301 	and.w	r3, r3, #1
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d015      	beq.n	801511e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	3304      	adds	r3, #4
 80150f6:	461a      	mov	r2, r3
 80150f8:	6879      	ldr	r1, [r7, #4]
 80150fa:	f44f 7006 	mov.w	r0, #536	; 0x218
 80150fe:	f7fc fa37 	bl	8011570 <tcp_eff_send_mss_netif>
 8015102:	4603      	mov	r3, r0
 8015104:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015106:	8b7b      	ldrh	r3, [r7, #26]
 8015108:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801510c:	4618      	mov	r0, r3
 801510e:	f7f8 fd74 	bl	800dbfa <lwip_htonl>
 8015112:	4602      	mov	r2, r0
 8015114:	69fb      	ldr	r3, [r7, #28]
 8015116:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015118:	69fb      	ldr	r3, [r7, #28]
 801511a:	3304      	adds	r3, #4
 801511c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801511e:	68bb      	ldr	r3, [r7, #8]
 8015120:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015124:	2b00      	cmp	r3, #0
 8015126:	da02      	bge.n	801512e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	2200      	movs	r2, #0
 801512c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015132:	2b00      	cmp	r3, #0
 8015134:	d10c      	bne.n	8015150 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015136:	4b34      	ldr	r3, [pc, #208]	; (8015208 <tcp_output_segment+0x1b4>)
 8015138:	681a      	ldr	r2, [r3, #0]
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	68db      	ldr	r3, [r3, #12]
 8015142:	685b      	ldr	r3, [r3, #4]
 8015144:	4618      	mov	r0, r3
 8015146:	f7f8 fd58 	bl	800dbfa <lwip_htonl>
 801514a:	4602      	mov	r2, r0
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	68da      	ldr	r2, [r3, #12]
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	685b      	ldr	r3, [r3, #4]
 8015158:	685b      	ldr	r3, [r3, #4]
 801515a:	1ad3      	subs	r3, r2, r3
 801515c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	685b      	ldr	r3, [r3, #4]
 8015162:	8959      	ldrh	r1, [r3, #10]
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	685b      	ldr	r3, [r3, #4]
 8015168:	8b3a      	ldrh	r2, [r7, #24]
 801516a:	1a8a      	subs	r2, r1, r2
 801516c:	b292      	uxth	r2, r2
 801516e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	685b      	ldr	r3, [r3, #4]
 8015174:	8919      	ldrh	r1, [r3, #8]
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	685b      	ldr	r3, [r3, #4]
 801517a:	8b3a      	ldrh	r2, [r7, #24]
 801517c:	1a8a      	subs	r2, r1, r2
 801517e:	b292      	uxth	r2, r2
 8015180:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	68fa      	ldr	r2, [r7, #12]
 8015188:	68d2      	ldr	r2, [r2, #12]
 801518a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	68db      	ldr	r3, [r3, #12]
 8015190:	2200      	movs	r2, #0
 8015192:	741a      	strb	r2, [r3, #16]
 8015194:	2200      	movs	r2, #0
 8015196:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	68db      	ldr	r3, [r3, #12]
 801519c:	f103 0214 	add.w	r2, r3, #20
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	7a9b      	ldrb	r3, [r3, #10]
 80151a4:	009b      	lsls	r3, r3, #2
 80151a6:	f003 0304 	and.w	r3, r3, #4
 80151aa:	4413      	add	r3, r2
 80151ac:	69fa      	ldr	r2, [r7, #28]
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d006      	beq.n	80151c0 <tcp_output_segment+0x16c>
 80151b2:	4b10      	ldr	r3, [pc, #64]	; (80151f4 <tcp_output_segment+0x1a0>)
 80151b4:	f240 621c 	movw	r2, #1564	; 0x61c
 80151b8:	4914      	ldr	r1, [pc, #80]	; (801520c <tcp_output_segment+0x1b8>)
 80151ba:	4810      	ldr	r0, [pc, #64]	; (80151fc <tcp_output_segment+0x1a8>)
 80151bc:	f003 fcb6 	bl	8018b2c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	6858      	ldr	r0, [r3, #4]
 80151c4:	68b9      	ldr	r1, [r7, #8]
 80151c6:	68bb      	ldr	r3, [r7, #8]
 80151c8:	1d1c      	adds	r4, r3, #4
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	7add      	ldrb	r5, [r3, #11]
 80151ce:	68bb      	ldr	r3, [r7, #8]
 80151d0:	7a9b      	ldrb	r3, [r3, #10]
 80151d2:	687a      	ldr	r2, [r7, #4]
 80151d4:	9202      	str	r2, [sp, #8]
 80151d6:	2206      	movs	r2, #6
 80151d8:	9201      	str	r2, [sp, #4]
 80151da:	9300      	str	r3, [sp, #0]
 80151dc:	462b      	mov	r3, r5
 80151de:	4622      	mov	r2, r4
 80151e0:	f002 fa8c 	bl	80176fc <ip4_output_if>
 80151e4:	4603      	mov	r3, r0
 80151e6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80151e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80151ec:	4618      	mov	r0, r3
 80151ee:	3720      	adds	r7, #32
 80151f0:	46bd      	mov	sp, r7
 80151f2:	bdb0      	pop	{r4, r5, r7, pc}
 80151f4:	0801b4c0 	.word	0x0801b4c0
 80151f8:	0801ba84 	.word	0x0801ba84
 80151fc:	0801b514 	.word	0x0801b514
 8015200:	0801baa4 	.word	0x0801baa4
 8015204:	0801bac4 	.word	0x0801bac4
 8015208:	24007804 	.word	0x24007804
 801520c:	0801bae8 	.word	0x0801bae8

08015210 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015210:	b5b0      	push	{r4, r5, r7, lr}
 8015212:	b084      	sub	sp, #16
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d106      	bne.n	801522c <tcp_rexmit_rto_prepare+0x1c>
 801521e:	4b31      	ldr	r3, [pc, #196]	; (80152e4 <tcp_rexmit_rto_prepare+0xd4>)
 8015220:	f240 6263 	movw	r2, #1635	; 0x663
 8015224:	4930      	ldr	r1, [pc, #192]	; (80152e8 <tcp_rexmit_rto_prepare+0xd8>)
 8015226:	4831      	ldr	r0, [pc, #196]	; (80152ec <tcp_rexmit_rto_prepare+0xdc>)
 8015228:	f003 fc80 	bl	8018b2c <iprintf>

  if (pcb->unacked == NULL) {
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015230:	2b00      	cmp	r3, #0
 8015232:	d102      	bne.n	801523a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015234:	f06f 0305 	mvn.w	r3, #5
 8015238:	e050      	b.n	80152dc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801523e:	60fb      	str	r3, [r7, #12]
 8015240:	e00b      	b.n	801525a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015242:	68f8      	ldr	r0, [r7, #12]
 8015244:	f7ff fee6 	bl	8015014 <tcp_output_segment_busy>
 8015248:	4603      	mov	r3, r0
 801524a:	2b00      	cmp	r3, #0
 801524c:	d002      	beq.n	8015254 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801524e:	f06f 0305 	mvn.w	r3, #5
 8015252:	e043      	b.n	80152dc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	60fb      	str	r3, [r7, #12]
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d1ef      	bne.n	8015242 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015262:	68f8      	ldr	r0, [r7, #12]
 8015264:	f7ff fed6 	bl	8015014 <tcp_output_segment_busy>
 8015268:	4603      	mov	r3, r0
 801526a:	2b00      	cmp	r3, #0
 801526c:	d002      	beq.n	8015274 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801526e:	f06f 0305 	mvn.w	r3, #5
 8015272:	e033      	b.n	80152dc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2200      	movs	r2, #0
 8015288:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	8b5b      	ldrh	r3, [r3, #26]
 801528e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015292:	b29a      	uxth	r2, r3
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	68db      	ldr	r3, [r3, #12]
 801529c:	685b      	ldr	r3, [r3, #4]
 801529e:	4618      	mov	r0, r3
 80152a0:	f7f8 fcab 	bl	800dbfa <lwip_htonl>
 80152a4:	4604      	mov	r4, r0
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	891b      	ldrh	r3, [r3, #8]
 80152aa:	461d      	mov	r5, r3
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	68db      	ldr	r3, [r3, #12]
 80152b0:	899b      	ldrh	r3, [r3, #12]
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7f8 fc8b 	bl	800dbd0 <lwip_htons>
 80152ba:	4603      	mov	r3, r0
 80152bc:	b2db      	uxtb	r3, r3
 80152be:	f003 0303 	and.w	r3, r3, #3
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d001      	beq.n	80152ca <tcp_rexmit_rto_prepare+0xba>
 80152c6:	2301      	movs	r3, #1
 80152c8:	e000      	b.n	80152cc <tcp_rexmit_rto_prepare+0xbc>
 80152ca:	2300      	movs	r3, #0
 80152cc:	442b      	add	r3, r5
 80152ce:	18e2      	adds	r2, r4, r3
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2200      	movs	r2, #0
 80152d8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80152da:	2300      	movs	r3, #0
}
 80152dc:	4618      	mov	r0, r3
 80152de:	3710      	adds	r7, #16
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bdb0      	pop	{r4, r5, r7, pc}
 80152e4:	0801b4c0 	.word	0x0801b4c0
 80152e8:	0801bafc 	.word	0x0801bafc
 80152ec:	0801b514 	.word	0x0801b514

080152f0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b082      	sub	sp, #8
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d106      	bne.n	801530c <tcp_rexmit_rto_commit+0x1c>
 80152fe:	4b0d      	ldr	r3, [pc, #52]	; (8015334 <tcp_rexmit_rto_commit+0x44>)
 8015300:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015304:	490c      	ldr	r1, [pc, #48]	; (8015338 <tcp_rexmit_rto_commit+0x48>)
 8015306:	480d      	ldr	r0, [pc, #52]	; (801533c <tcp_rexmit_rto_commit+0x4c>)
 8015308:	f003 fc10 	bl	8018b2c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015312:	2bff      	cmp	r3, #255	; 0xff
 8015314:	d007      	beq.n	8015326 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801531c:	3301      	adds	r3, #1
 801531e:	b2da      	uxtb	r2, r3
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f7ff fc80 	bl	8014c2c <tcp_output>
}
 801532c:	bf00      	nop
 801532e:	3708      	adds	r7, #8
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}
 8015334:	0801b4c0 	.word	0x0801b4c0
 8015338:	0801bb20 	.word	0x0801bb20
 801533c:	0801b514 	.word	0x0801b514

08015340 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b082      	sub	sp, #8
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d106      	bne.n	801535c <tcp_rexmit_rto+0x1c>
 801534e:	4b0a      	ldr	r3, [pc, #40]	; (8015378 <tcp_rexmit_rto+0x38>)
 8015350:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015354:	4909      	ldr	r1, [pc, #36]	; (801537c <tcp_rexmit_rto+0x3c>)
 8015356:	480a      	ldr	r0, [pc, #40]	; (8015380 <tcp_rexmit_rto+0x40>)
 8015358:	f003 fbe8 	bl	8018b2c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f7ff ff57 	bl	8015210 <tcp_rexmit_rto_prepare>
 8015362:	4603      	mov	r3, r0
 8015364:	2b00      	cmp	r3, #0
 8015366:	d102      	bne.n	801536e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f7ff ffc1 	bl	80152f0 <tcp_rexmit_rto_commit>
  }
}
 801536e:	bf00      	nop
 8015370:	3708      	adds	r7, #8
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}
 8015376:	bf00      	nop
 8015378:	0801b4c0 	.word	0x0801b4c0
 801537c:	0801bb44 	.word	0x0801bb44
 8015380:	0801b514 	.word	0x0801b514

08015384 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015384:	b590      	push	{r4, r7, lr}
 8015386:	b085      	sub	sp, #20
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d106      	bne.n	80153a0 <tcp_rexmit+0x1c>
 8015392:	4b2f      	ldr	r3, [pc, #188]	; (8015450 <tcp_rexmit+0xcc>)
 8015394:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015398:	492e      	ldr	r1, [pc, #184]	; (8015454 <tcp_rexmit+0xd0>)
 801539a:	482f      	ldr	r0, [pc, #188]	; (8015458 <tcp_rexmit+0xd4>)
 801539c:	f003 fbc6 	bl	8018b2c <iprintf>

  if (pcb->unacked == NULL) {
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d102      	bne.n	80153ae <tcp_rexmit+0x2a>
    return ERR_VAL;
 80153a8:	f06f 0305 	mvn.w	r3, #5
 80153ac:	e04c      	b.n	8015448 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153b2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80153b4:	68b8      	ldr	r0, [r7, #8]
 80153b6:	f7ff fe2d 	bl	8015014 <tcp_output_segment_busy>
 80153ba:	4603      	mov	r3, r0
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d002      	beq.n	80153c6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80153c0:	f06f 0305 	mvn.w	r3, #5
 80153c4:	e040      	b.n	8015448 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	681a      	ldr	r2, [r3, #0]
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	336c      	adds	r3, #108	; 0x6c
 80153d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80153d4:	e002      	b.n	80153dc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d011      	beq.n	8015408 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	68db      	ldr	r3, [r3, #12]
 80153ea:	685b      	ldr	r3, [r3, #4]
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7f8 fc04 	bl	800dbfa <lwip_htonl>
 80153f2:	4604      	mov	r4, r0
 80153f4:	68bb      	ldr	r3, [r7, #8]
 80153f6:	68db      	ldr	r3, [r3, #12]
 80153f8:	685b      	ldr	r3, [r3, #4]
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7f8 fbfd 	bl	800dbfa <lwip_htonl>
 8015400:	4603      	mov	r3, r0
 8015402:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015404:	2b00      	cmp	r3, #0
 8015406:	dbe6      	blt.n	80153d6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	681a      	ldr	r2, [r3, #0]
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	68ba      	ldr	r2, [r7, #8]
 8015414:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d103      	bne.n	8015426 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	2200      	movs	r2, #0
 8015422:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801542c:	2bff      	cmp	r3, #255	; 0xff
 801542e:	d007      	beq.n	8015440 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015436:	3301      	adds	r3, #1
 8015438:	b2da      	uxtb	r2, r3
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2200      	movs	r2, #0
 8015444:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015446:	2300      	movs	r3, #0
}
 8015448:	4618      	mov	r0, r3
 801544a:	3714      	adds	r7, #20
 801544c:	46bd      	mov	sp, r7
 801544e:	bd90      	pop	{r4, r7, pc}
 8015450:	0801b4c0 	.word	0x0801b4c0
 8015454:	0801bb60 	.word	0x0801bb60
 8015458:	0801b514 	.word	0x0801b514

0801545c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b082      	sub	sp, #8
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d106      	bne.n	8015478 <tcp_rexmit_fast+0x1c>
 801546a:	4b2a      	ldr	r3, [pc, #168]	; (8015514 <tcp_rexmit_fast+0xb8>)
 801546c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015470:	4929      	ldr	r1, [pc, #164]	; (8015518 <tcp_rexmit_fast+0xbc>)
 8015472:	482a      	ldr	r0, [pc, #168]	; (801551c <tcp_rexmit_fast+0xc0>)
 8015474:	f003 fb5a 	bl	8018b2c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801547c:	2b00      	cmp	r3, #0
 801547e:	d045      	beq.n	801550c <tcp_rexmit_fast+0xb0>
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	8b5b      	ldrh	r3, [r3, #26]
 8015484:	f003 0304 	and.w	r3, r3, #4
 8015488:	2b00      	cmp	r3, #0
 801548a:	d13f      	bne.n	801550c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801548c:	6878      	ldr	r0, [r7, #4]
 801548e:	f7ff ff79 	bl	8015384 <tcp_rexmit>
 8015492:	4603      	mov	r3, r0
 8015494:	2b00      	cmp	r3, #0
 8015496:	d139      	bne.n	801550c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80154a4:	4293      	cmp	r3, r2
 80154a6:	bf28      	it	cs
 80154a8:	4613      	movcs	r3, r2
 80154aa:	b29b      	uxth	r3, r3
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	da00      	bge.n	80154b2 <tcp_rexmit_fast+0x56>
 80154b0:	3301      	adds	r3, #1
 80154b2:	105b      	asrs	r3, r3, #1
 80154b4:	b29a      	uxth	r2, r3
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80154c2:	461a      	mov	r2, r3
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80154c8:	005b      	lsls	r3, r3, #1
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d206      	bcs.n	80154dc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80154d2:	005b      	lsls	r3, r3, #1
 80154d4:	b29a      	uxth	r2, r3
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80154e6:	4619      	mov	r1, r3
 80154e8:	0049      	lsls	r1, r1, #1
 80154ea:	440b      	add	r3, r1
 80154ec:	b29b      	uxth	r3, r3
 80154ee:	4413      	add	r3, r2
 80154f0:	b29a      	uxth	r2, r3
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	8b5b      	ldrh	r3, [r3, #26]
 80154fc:	f043 0304 	orr.w	r3, r3, #4
 8015500:	b29a      	uxth	r2, r3
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	2200      	movs	r2, #0
 801550a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801550c:	bf00      	nop
 801550e:	3708      	adds	r7, #8
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}
 8015514:	0801b4c0 	.word	0x0801b4c0
 8015518:	0801bb78 	.word	0x0801bb78
 801551c:	0801b514 	.word	0x0801b514

08015520 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b086      	sub	sp, #24
 8015524:	af00      	add	r7, sp, #0
 8015526:	60f8      	str	r0, [r7, #12]
 8015528:	607b      	str	r3, [r7, #4]
 801552a:	460b      	mov	r3, r1
 801552c:	817b      	strh	r3, [r7, #10]
 801552e:	4613      	mov	r3, r2
 8015530:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015532:	897a      	ldrh	r2, [r7, #10]
 8015534:	893b      	ldrh	r3, [r7, #8]
 8015536:	4413      	add	r3, r2
 8015538:	b29b      	uxth	r3, r3
 801553a:	3314      	adds	r3, #20
 801553c:	b29b      	uxth	r3, r3
 801553e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015542:	4619      	mov	r1, r3
 8015544:	2022      	movs	r0, #34	; 0x22
 8015546:	f7f9 fd09 	bl	800ef5c <pbuf_alloc>
 801554a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d04d      	beq.n	80155ee <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015552:	897b      	ldrh	r3, [r7, #10]
 8015554:	3313      	adds	r3, #19
 8015556:	697a      	ldr	r2, [r7, #20]
 8015558:	8952      	ldrh	r2, [r2, #10]
 801555a:	4293      	cmp	r3, r2
 801555c:	db06      	blt.n	801556c <tcp_output_alloc_header_common+0x4c>
 801555e:	4b26      	ldr	r3, [pc, #152]	; (80155f8 <tcp_output_alloc_header_common+0xd8>)
 8015560:	f240 7223 	movw	r2, #1827	; 0x723
 8015564:	4925      	ldr	r1, [pc, #148]	; (80155fc <tcp_output_alloc_header_common+0xdc>)
 8015566:	4826      	ldr	r0, [pc, #152]	; (8015600 <tcp_output_alloc_header_common+0xe0>)
 8015568:	f003 fae0 	bl	8018b2c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	685b      	ldr	r3, [r3, #4]
 8015570:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015572:	8c3b      	ldrh	r3, [r7, #32]
 8015574:	4618      	mov	r0, r3
 8015576:	f7f8 fb2b 	bl	800dbd0 <lwip_htons>
 801557a:	4603      	mov	r3, r0
 801557c:	461a      	mov	r2, r3
 801557e:	693b      	ldr	r3, [r7, #16]
 8015580:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015584:	4618      	mov	r0, r3
 8015586:	f7f8 fb23 	bl	800dbd0 <lwip_htons>
 801558a:	4603      	mov	r3, r0
 801558c:	461a      	mov	r2, r3
 801558e:	693b      	ldr	r3, [r7, #16]
 8015590:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015592:	693b      	ldr	r3, [r7, #16]
 8015594:	687a      	ldr	r2, [r7, #4]
 8015596:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015598:	68f8      	ldr	r0, [r7, #12]
 801559a:	f7f8 fb2e 	bl	800dbfa <lwip_htonl>
 801559e:	4602      	mov	r2, r0
 80155a0:	693b      	ldr	r3, [r7, #16]
 80155a2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80155a4:	897b      	ldrh	r3, [r7, #10]
 80155a6:	089b      	lsrs	r3, r3, #2
 80155a8:	b29b      	uxth	r3, r3
 80155aa:	3305      	adds	r3, #5
 80155ac:	b29b      	uxth	r3, r3
 80155ae:	031b      	lsls	r3, r3, #12
 80155b0:	b29a      	uxth	r2, r3
 80155b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80155b6:	b29b      	uxth	r3, r3
 80155b8:	4313      	orrs	r3, r2
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	4618      	mov	r0, r3
 80155be:	f7f8 fb07 	bl	800dbd0 <lwip_htons>
 80155c2:	4603      	mov	r3, r0
 80155c4:	461a      	mov	r2, r3
 80155c6:	693b      	ldr	r3, [r7, #16]
 80155c8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80155ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80155cc:	4618      	mov	r0, r3
 80155ce:	f7f8 faff 	bl	800dbd0 <lwip_htons>
 80155d2:	4603      	mov	r3, r0
 80155d4:	461a      	mov	r2, r3
 80155d6:	693b      	ldr	r3, [r7, #16]
 80155d8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	2200      	movs	r2, #0
 80155de:	741a      	strb	r2, [r3, #16]
 80155e0:	2200      	movs	r2, #0
 80155e2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	2200      	movs	r2, #0
 80155e8:	749a      	strb	r2, [r3, #18]
 80155ea:	2200      	movs	r2, #0
 80155ec:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80155ee:	697b      	ldr	r3, [r7, #20]
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3718      	adds	r7, #24
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}
 80155f8:	0801b4c0 	.word	0x0801b4c0
 80155fc:	0801bb98 	.word	0x0801bb98
 8015600:	0801b514 	.word	0x0801b514

08015604 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015604:	b5b0      	push	{r4, r5, r7, lr}
 8015606:	b08a      	sub	sp, #40	; 0x28
 8015608:	af04      	add	r7, sp, #16
 801560a:	60f8      	str	r0, [r7, #12]
 801560c:	607b      	str	r3, [r7, #4]
 801560e:	460b      	mov	r3, r1
 8015610:	817b      	strh	r3, [r7, #10]
 8015612:	4613      	mov	r3, r2
 8015614:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d106      	bne.n	801562a <tcp_output_alloc_header+0x26>
 801561c:	4b15      	ldr	r3, [pc, #84]	; (8015674 <tcp_output_alloc_header+0x70>)
 801561e:	f240 7242 	movw	r2, #1858	; 0x742
 8015622:	4915      	ldr	r1, [pc, #84]	; (8015678 <tcp_output_alloc_header+0x74>)
 8015624:	4815      	ldr	r0, [pc, #84]	; (801567c <tcp_output_alloc_header+0x78>)
 8015626:	f003 fa81 	bl	8018b2c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	8adb      	ldrh	r3, [r3, #22]
 8015632:	68fa      	ldr	r2, [r7, #12]
 8015634:	8b12      	ldrh	r2, [r2, #24]
 8015636:	68f9      	ldr	r1, [r7, #12]
 8015638:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801563a:	893d      	ldrh	r5, [r7, #8]
 801563c:	897c      	ldrh	r4, [r7, #10]
 801563e:	9103      	str	r1, [sp, #12]
 8015640:	2110      	movs	r1, #16
 8015642:	9102      	str	r1, [sp, #8]
 8015644:	9201      	str	r2, [sp, #4]
 8015646:	9300      	str	r3, [sp, #0]
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	462a      	mov	r2, r5
 801564c:	4621      	mov	r1, r4
 801564e:	f7ff ff67 	bl	8015520 <tcp_output_alloc_header_common>
 8015652:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d006      	beq.n	8015668 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801565e:	68fa      	ldr	r2, [r7, #12]
 8015660:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015662:	441a      	add	r2, r3
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015668:	697b      	ldr	r3, [r7, #20]
}
 801566a:	4618      	mov	r0, r3
 801566c:	3718      	adds	r7, #24
 801566e:	46bd      	mov	sp, r7
 8015670:	bdb0      	pop	{r4, r5, r7, pc}
 8015672:	bf00      	nop
 8015674:	0801b4c0 	.word	0x0801b4c0
 8015678:	0801bbc8 	.word	0x0801bbc8
 801567c:	0801b514 	.word	0x0801b514

08015680 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b088      	sub	sp, #32
 8015684:	af00      	add	r7, sp, #0
 8015686:	60f8      	str	r0, [r7, #12]
 8015688:	60b9      	str	r1, [r7, #8]
 801568a:	4611      	mov	r1, r2
 801568c:	461a      	mov	r2, r3
 801568e:	460b      	mov	r3, r1
 8015690:	71fb      	strb	r3, [r7, #7]
 8015692:	4613      	mov	r3, r2
 8015694:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015696:	2300      	movs	r3, #0
 8015698:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801569a:	68bb      	ldr	r3, [r7, #8]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d106      	bne.n	80156ae <tcp_output_fill_options+0x2e>
 80156a0:	4b13      	ldr	r3, [pc, #76]	; (80156f0 <tcp_output_fill_options+0x70>)
 80156a2:	f240 7256 	movw	r2, #1878	; 0x756
 80156a6:	4913      	ldr	r1, [pc, #76]	; (80156f4 <tcp_output_fill_options+0x74>)
 80156a8:	4813      	ldr	r0, [pc, #76]	; (80156f8 <tcp_output_fill_options+0x78>)
 80156aa:	f003 fa3f 	bl	8018b2c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80156ae:	68bb      	ldr	r3, [r7, #8]
 80156b0:	685b      	ldr	r3, [r3, #4]
 80156b2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80156b4:	69bb      	ldr	r3, [r7, #24]
 80156b6:	3314      	adds	r3, #20
 80156b8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80156ba:	69bb      	ldr	r3, [r7, #24]
 80156bc:	f103 0214 	add.w	r2, r3, #20
 80156c0:	8bfb      	ldrh	r3, [r7, #30]
 80156c2:	009b      	lsls	r3, r3, #2
 80156c4:	4619      	mov	r1, r3
 80156c6:	79fb      	ldrb	r3, [r7, #7]
 80156c8:	009b      	lsls	r3, r3, #2
 80156ca:	f003 0304 	and.w	r3, r3, #4
 80156ce:	440b      	add	r3, r1
 80156d0:	4413      	add	r3, r2
 80156d2:	697a      	ldr	r2, [r7, #20]
 80156d4:	429a      	cmp	r2, r3
 80156d6:	d006      	beq.n	80156e6 <tcp_output_fill_options+0x66>
 80156d8:	4b05      	ldr	r3, [pc, #20]	; (80156f0 <tcp_output_fill_options+0x70>)
 80156da:	f240 7275 	movw	r2, #1909	; 0x775
 80156de:	4907      	ldr	r1, [pc, #28]	; (80156fc <tcp_output_fill_options+0x7c>)
 80156e0:	4805      	ldr	r0, [pc, #20]	; (80156f8 <tcp_output_fill_options+0x78>)
 80156e2:	f003 fa23 	bl	8018b2c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80156e6:	bf00      	nop
 80156e8:	3720      	adds	r7, #32
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}
 80156ee:	bf00      	nop
 80156f0:	0801b4c0 	.word	0x0801b4c0
 80156f4:	0801bbf0 	.word	0x0801bbf0
 80156f8:	0801b514 	.word	0x0801b514
 80156fc:	0801bae8 	.word	0x0801bae8

08015700 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b08a      	sub	sp, #40	; 0x28
 8015704:	af04      	add	r7, sp, #16
 8015706:	60f8      	str	r0, [r7, #12]
 8015708:	60b9      	str	r1, [r7, #8]
 801570a:	607a      	str	r2, [r7, #4]
 801570c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d106      	bne.n	8015722 <tcp_output_control_segment+0x22>
 8015714:	4b1c      	ldr	r3, [pc, #112]	; (8015788 <tcp_output_control_segment+0x88>)
 8015716:	f240 7287 	movw	r2, #1927	; 0x787
 801571a:	491c      	ldr	r1, [pc, #112]	; (801578c <tcp_output_control_segment+0x8c>)
 801571c:	481c      	ldr	r0, [pc, #112]	; (8015790 <tcp_output_control_segment+0x90>)
 801571e:	f003 fa05 	bl	8018b2c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015722:	683a      	ldr	r2, [r7, #0]
 8015724:	6879      	ldr	r1, [r7, #4]
 8015726:	68f8      	ldr	r0, [r7, #12]
 8015728:	f7fe fae8 	bl	8013cfc <tcp_route>
 801572c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801572e:	693b      	ldr	r3, [r7, #16]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d102      	bne.n	801573a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015734:	23fc      	movs	r3, #252	; 0xfc
 8015736:	75fb      	strb	r3, [r7, #23]
 8015738:	e01c      	b.n	8015774 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d006      	beq.n	801574e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	7adb      	ldrb	r3, [r3, #11]
 8015744:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	7a9b      	ldrb	r3, [r3, #10]
 801574a:	757b      	strb	r3, [r7, #21]
 801574c:	e003      	b.n	8015756 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801574e:	23ff      	movs	r3, #255	; 0xff
 8015750:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015752:	2300      	movs	r3, #0
 8015754:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015756:	7dba      	ldrb	r2, [r7, #22]
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	9302      	str	r3, [sp, #8]
 801575c:	2306      	movs	r3, #6
 801575e:	9301      	str	r3, [sp, #4]
 8015760:	7d7b      	ldrb	r3, [r7, #21]
 8015762:	9300      	str	r3, [sp, #0]
 8015764:	4613      	mov	r3, r2
 8015766:	683a      	ldr	r2, [r7, #0]
 8015768:	6879      	ldr	r1, [r7, #4]
 801576a:	68b8      	ldr	r0, [r7, #8]
 801576c:	f001 ffc6 	bl	80176fc <ip4_output_if>
 8015770:	4603      	mov	r3, r0
 8015772:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015774:	68b8      	ldr	r0, [r7, #8]
 8015776:	f7f9 fed5 	bl	800f524 <pbuf_free>
  return err;
 801577a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801577e:	4618      	mov	r0, r3
 8015780:	3718      	adds	r7, #24
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
 8015786:	bf00      	nop
 8015788:	0801b4c0 	.word	0x0801b4c0
 801578c:	0801bc18 	.word	0x0801bc18
 8015790:	0801b514 	.word	0x0801b514

08015794 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015794:	b590      	push	{r4, r7, lr}
 8015796:	b08b      	sub	sp, #44	; 0x2c
 8015798:	af04      	add	r7, sp, #16
 801579a:	60f8      	str	r0, [r7, #12]
 801579c:	60b9      	str	r1, [r7, #8]
 801579e:	607a      	str	r2, [r7, #4]
 80157a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d106      	bne.n	80157b6 <tcp_rst+0x22>
 80157a8:	4b1f      	ldr	r3, [pc, #124]	; (8015828 <tcp_rst+0x94>)
 80157aa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80157ae:	491f      	ldr	r1, [pc, #124]	; (801582c <tcp_rst+0x98>)
 80157b0:	481f      	ldr	r0, [pc, #124]	; (8015830 <tcp_rst+0x9c>)
 80157b2:	f003 f9bb 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80157b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d106      	bne.n	80157ca <tcp_rst+0x36>
 80157bc:	4b1a      	ldr	r3, [pc, #104]	; (8015828 <tcp_rst+0x94>)
 80157be:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80157c2:	491c      	ldr	r1, [pc, #112]	; (8015834 <tcp_rst+0xa0>)
 80157c4:	481a      	ldr	r0, [pc, #104]	; (8015830 <tcp_rst+0x9c>)
 80157c6:	f003 f9b1 	bl	8018b2c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80157ca:	2300      	movs	r3, #0
 80157cc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80157ce:	f246 0308 	movw	r3, #24584	; 0x6008
 80157d2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80157d4:	7dfb      	ldrb	r3, [r7, #23]
 80157d6:	b29c      	uxth	r4, r3
 80157d8:	68b8      	ldr	r0, [r7, #8]
 80157da:	f7f8 fa0e 	bl	800dbfa <lwip_htonl>
 80157de:	4602      	mov	r2, r0
 80157e0:	8abb      	ldrh	r3, [r7, #20]
 80157e2:	9303      	str	r3, [sp, #12]
 80157e4:	2314      	movs	r3, #20
 80157e6:	9302      	str	r3, [sp, #8]
 80157e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80157ea:	9301      	str	r3, [sp, #4]
 80157ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80157ee:	9300      	str	r3, [sp, #0]
 80157f0:	4613      	mov	r3, r2
 80157f2:	2200      	movs	r2, #0
 80157f4:	4621      	mov	r1, r4
 80157f6:	6878      	ldr	r0, [r7, #4]
 80157f8:	f7ff fe92 	bl	8015520 <tcp_output_alloc_header_common>
 80157fc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80157fe:	693b      	ldr	r3, [r7, #16]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d00c      	beq.n	801581e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015804:	7dfb      	ldrb	r3, [r7, #23]
 8015806:	2200      	movs	r2, #0
 8015808:	6939      	ldr	r1, [r7, #16]
 801580a:	68f8      	ldr	r0, [r7, #12]
 801580c:	f7ff ff38 	bl	8015680 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015812:	683a      	ldr	r2, [r7, #0]
 8015814:	6939      	ldr	r1, [r7, #16]
 8015816:	68f8      	ldr	r0, [r7, #12]
 8015818:	f7ff ff72 	bl	8015700 <tcp_output_control_segment>
 801581c:	e000      	b.n	8015820 <tcp_rst+0x8c>
    return;
 801581e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015820:	371c      	adds	r7, #28
 8015822:	46bd      	mov	sp, r7
 8015824:	bd90      	pop	{r4, r7, pc}
 8015826:	bf00      	nop
 8015828:	0801b4c0 	.word	0x0801b4c0
 801582c:	0801bc44 	.word	0x0801bc44
 8015830:	0801b514 	.word	0x0801b514
 8015834:	0801bc60 	.word	0x0801bc60

08015838 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015838:	b590      	push	{r4, r7, lr}
 801583a:	b087      	sub	sp, #28
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015840:	2300      	movs	r3, #0
 8015842:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015844:	2300      	movs	r3, #0
 8015846:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d106      	bne.n	801585c <tcp_send_empty_ack+0x24>
 801584e:	4b28      	ldr	r3, [pc, #160]	; (80158f0 <tcp_send_empty_ack+0xb8>)
 8015850:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015854:	4927      	ldr	r1, [pc, #156]	; (80158f4 <tcp_send_empty_ack+0xbc>)
 8015856:	4828      	ldr	r0, [pc, #160]	; (80158f8 <tcp_send_empty_ack+0xc0>)
 8015858:	f003 f968 	bl	8018b2c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801585c:	7dfb      	ldrb	r3, [r7, #23]
 801585e:	009b      	lsls	r3, r3, #2
 8015860:	b2db      	uxtb	r3, r3
 8015862:	f003 0304 	and.w	r3, r3, #4
 8015866:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015868:	7d7b      	ldrb	r3, [r7, #21]
 801586a:	b29c      	uxth	r4, r3
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015870:	4618      	mov	r0, r3
 8015872:	f7f8 f9c2 	bl	800dbfa <lwip_htonl>
 8015876:	4603      	mov	r3, r0
 8015878:	2200      	movs	r2, #0
 801587a:	4621      	mov	r1, r4
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f7ff fec1 	bl	8015604 <tcp_output_alloc_header>
 8015882:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015884:	693b      	ldr	r3, [r7, #16]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d109      	bne.n	801589e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	8b5b      	ldrh	r3, [r3, #26]
 801588e:	f043 0303 	orr.w	r3, r3, #3
 8015892:	b29a      	uxth	r2, r3
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015898:	f06f 0301 	mvn.w	r3, #1
 801589c:	e023      	b.n	80158e6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801589e:	7dbb      	ldrb	r3, [r7, #22]
 80158a0:	7dfa      	ldrb	r2, [r7, #23]
 80158a2:	6939      	ldr	r1, [r7, #16]
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f7ff feeb 	bl	8015680 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80158aa:	687a      	ldr	r2, [r7, #4]
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	3304      	adds	r3, #4
 80158b0:	6939      	ldr	r1, [r7, #16]
 80158b2:	6878      	ldr	r0, [r7, #4]
 80158b4:	f7ff ff24 	bl	8015700 <tcp_output_control_segment>
 80158b8:	4603      	mov	r3, r0
 80158ba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80158bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d007      	beq.n	80158d4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	8b5b      	ldrh	r3, [r3, #26]
 80158c8:	f043 0303 	orr.w	r3, r3, #3
 80158cc:	b29a      	uxth	r2, r3
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	835a      	strh	r2, [r3, #26]
 80158d2:	e006      	b.n	80158e2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	8b5b      	ldrh	r3, [r3, #26]
 80158d8:	f023 0303 	bic.w	r3, r3, #3
 80158dc:	b29a      	uxth	r2, r3
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80158e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	371c      	adds	r7, #28
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd90      	pop	{r4, r7, pc}
 80158ee:	bf00      	nop
 80158f0:	0801b4c0 	.word	0x0801b4c0
 80158f4:	0801bc7c 	.word	0x0801bc7c
 80158f8:	0801b514 	.word	0x0801b514

080158fc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80158fc:	b590      	push	{r4, r7, lr}
 80158fe:	b087      	sub	sp, #28
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015904:	2300      	movs	r3, #0
 8015906:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d106      	bne.n	801591c <tcp_keepalive+0x20>
 801590e:	4b18      	ldr	r3, [pc, #96]	; (8015970 <tcp_keepalive+0x74>)
 8015910:	f640 0224 	movw	r2, #2084	; 0x824
 8015914:	4917      	ldr	r1, [pc, #92]	; (8015974 <tcp_keepalive+0x78>)
 8015916:	4818      	ldr	r0, [pc, #96]	; (8015978 <tcp_keepalive+0x7c>)
 8015918:	f003 f908 	bl	8018b2c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801591c:	7dfb      	ldrb	r3, [r7, #23]
 801591e:	b29c      	uxth	r4, r3
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015924:	3b01      	subs	r3, #1
 8015926:	4618      	mov	r0, r3
 8015928:	f7f8 f967 	bl	800dbfa <lwip_htonl>
 801592c:	4603      	mov	r3, r0
 801592e:	2200      	movs	r2, #0
 8015930:	4621      	mov	r1, r4
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f7ff fe66 	bl	8015604 <tcp_output_alloc_header>
 8015938:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d102      	bne.n	8015946 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015940:	f04f 33ff 	mov.w	r3, #4294967295
 8015944:	e010      	b.n	8015968 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015946:	7dfb      	ldrb	r3, [r7, #23]
 8015948:	2200      	movs	r2, #0
 801594a:	6939      	ldr	r1, [r7, #16]
 801594c:	6878      	ldr	r0, [r7, #4]
 801594e:	f7ff fe97 	bl	8015680 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015952:	687a      	ldr	r2, [r7, #4]
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	3304      	adds	r3, #4
 8015958:	6939      	ldr	r1, [r7, #16]
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f7ff fed0 	bl	8015700 <tcp_output_control_segment>
 8015960:	4603      	mov	r3, r0
 8015962:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015964:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015968:	4618      	mov	r0, r3
 801596a:	371c      	adds	r7, #28
 801596c:	46bd      	mov	sp, r7
 801596e:	bd90      	pop	{r4, r7, pc}
 8015970:	0801b4c0 	.word	0x0801b4c0
 8015974:	0801bc9c 	.word	0x0801bc9c
 8015978:	0801b514 	.word	0x0801b514

0801597c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801597c:	b590      	push	{r4, r7, lr}
 801597e:	b08b      	sub	sp, #44	; 0x2c
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015984:	2300      	movs	r3, #0
 8015986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d106      	bne.n	801599e <tcp_zero_window_probe+0x22>
 8015990:	4b4c      	ldr	r3, [pc, #304]	; (8015ac4 <tcp_zero_window_probe+0x148>)
 8015992:	f640 024f 	movw	r2, #2127	; 0x84f
 8015996:	494c      	ldr	r1, [pc, #304]	; (8015ac8 <tcp_zero_window_probe+0x14c>)
 8015998:	484c      	ldr	r0, [pc, #304]	; (8015acc <tcp_zero_window_probe+0x150>)
 801599a:	f003 f8c7 	bl	8018b2c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159a2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80159a4:	6a3b      	ldr	r3, [r7, #32]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d101      	bne.n	80159ae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80159aa:	2300      	movs	r3, #0
 80159ac:	e086      	b.n	8015abc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80159b4:	2bff      	cmp	r3, #255	; 0xff
 80159b6:	d007      	beq.n	80159c8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80159be:	3301      	adds	r3, #1
 80159c0:	b2da      	uxtb	r2, r3
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80159c8:	6a3b      	ldr	r3, [r7, #32]
 80159ca:	68db      	ldr	r3, [r3, #12]
 80159cc:	899b      	ldrh	r3, [r3, #12]
 80159ce:	b29b      	uxth	r3, r3
 80159d0:	4618      	mov	r0, r3
 80159d2:	f7f8 f8fd 	bl	800dbd0 <lwip_htons>
 80159d6:	4603      	mov	r3, r0
 80159d8:	b2db      	uxtb	r3, r3
 80159da:	f003 0301 	and.w	r3, r3, #1
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d005      	beq.n	80159ee <tcp_zero_window_probe+0x72>
 80159e2:	6a3b      	ldr	r3, [r7, #32]
 80159e4:	891b      	ldrh	r3, [r3, #8]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d101      	bne.n	80159ee <tcp_zero_window_probe+0x72>
 80159ea:	2301      	movs	r3, #1
 80159ec:	e000      	b.n	80159f0 <tcp_zero_window_probe+0x74>
 80159ee:	2300      	movs	r3, #0
 80159f0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80159f2:	7ffb      	ldrb	r3, [r7, #31]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	bf0c      	ite	eq
 80159f8:	2301      	moveq	r3, #1
 80159fa:	2300      	movne	r3, #0
 80159fc:	b2db      	uxtb	r3, r3
 80159fe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a04:	b299      	uxth	r1, r3
 8015a06:	6a3b      	ldr	r3, [r7, #32]
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	685b      	ldr	r3, [r3, #4]
 8015a0c:	8bba      	ldrh	r2, [r7, #28]
 8015a0e:	6878      	ldr	r0, [r7, #4]
 8015a10:	f7ff fdf8 	bl	8015604 <tcp_output_alloc_header>
 8015a14:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015a16:	69bb      	ldr	r3, [r7, #24]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d102      	bne.n	8015a22 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8015a20:	e04c      	b.n	8015abc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015a22:	69bb      	ldr	r3, [r7, #24]
 8015a24:	685b      	ldr	r3, [r3, #4]
 8015a26:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015a28:	7ffb      	ldrb	r3, [r7, #31]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d011      	beq.n	8015a52 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015a2e:	697b      	ldr	r3, [r7, #20]
 8015a30:	899b      	ldrh	r3, [r3, #12]
 8015a32:	b29b      	uxth	r3, r3
 8015a34:	b21b      	sxth	r3, r3
 8015a36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015a3a:	b21c      	sxth	r4, r3
 8015a3c:	2011      	movs	r0, #17
 8015a3e:	f7f8 f8c7 	bl	800dbd0 <lwip_htons>
 8015a42:	4603      	mov	r3, r0
 8015a44:	b21b      	sxth	r3, r3
 8015a46:	4323      	orrs	r3, r4
 8015a48:	b21b      	sxth	r3, r3
 8015a4a:	b29a      	uxth	r2, r3
 8015a4c:	697b      	ldr	r3, [r7, #20]
 8015a4e:	819a      	strh	r2, [r3, #12]
 8015a50:	e010      	b.n	8015a74 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015a52:	69bb      	ldr	r3, [r7, #24]
 8015a54:	685b      	ldr	r3, [r3, #4]
 8015a56:	3314      	adds	r3, #20
 8015a58:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015a5a:	6a3b      	ldr	r3, [r7, #32]
 8015a5c:	6858      	ldr	r0, [r3, #4]
 8015a5e:	6a3b      	ldr	r3, [r7, #32]
 8015a60:	685b      	ldr	r3, [r3, #4]
 8015a62:	891a      	ldrh	r2, [r3, #8]
 8015a64:	6a3b      	ldr	r3, [r7, #32]
 8015a66:	891b      	ldrh	r3, [r3, #8]
 8015a68:	1ad3      	subs	r3, r2, r3
 8015a6a:	b29b      	uxth	r3, r3
 8015a6c:	2201      	movs	r2, #1
 8015a6e:	6939      	ldr	r1, [r7, #16]
 8015a70:	f7f9 ff5e 	bl	800f930 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015a74:	6a3b      	ldr	r3, [r7, #32]
 8015a76:	68db      	ldr	r3, [r3, #12]
 8015a78:	685b      	ldr	r3, [r3, #4]
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f7f8 f8bd 	bl	800dbfa <lwip_htonl>
 8015a80:	4603      	mov	r3, r0
 8015a82:	3301      	adds	r3, #1
 8015a84:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	1ad3      	subs	r3, r2, r3
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	da02      	bge.n	8015a98 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	68fa      	ldr	r2, [r7, #12]
 8015a96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	69b9      	ldr	r1, [r7, #24]
 8015aa0:	6878      	ldr	r0, [r7, #4]
 8015aa2:	f7ff fded 	bl	8015680 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015aa6:	687a      	ldr	r2, [r7, #4]
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	3304      	adds	r3, #4
 8015aac:	69b9      	ldr	r1, [r7, #24]
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f7ff fe26 	bl	8015700 <tcp_output_control_segment>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015ab8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015abc:	4618      	mov	r0, r3
 8015abe:	372c      	adds	r7, #44	; 0x2c
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd90      	pop	{r4, r7, pc}
 8015ac4:	0801b4c0 	.word	0x0801b4c0
 8015ac8:	0801bcb8 	.word	0x0801bcb8
 8015acc:	0801b514 	.word	0x0801b514

08015ad0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b082      	sub	sp, #8
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015ad8:	f7fa f818 	bl	800fb0c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015adc:	4b0a      	ldr	r3, [pc, #40]	; (8015b08 <tcpip_tcp_timer+0x38>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d103      	bne.n	8015aec <tcpip_tcp_timer+0x1c>
 8015ae4:	4b09      	ldr	r3, [pc, #36]	; (8015b0c <tcpip_tcp_timer+0x3c>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d005      	beq.n	8015af8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015aec:	2200      	movs	r2, #0
 8015aee:	4908      	ldr	r1, [pc, #32]	; (8015b10 <tcpip_tcp_timer+0x40>)
 8015af0:	20fa      	movs	r0, #250	; 0xfa
 8015af2:	f000 f8f3 	bl	8015cdc <sys_timeout>
 8015af6:	e003      	b.n	8015b00 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015af8:	4b06      	ldr	r3, [pc, #24]	; (8015b14 <tcpip_tcp_timer+0x44>)
 8015afa:	2200      	movs	r2, #0
 8015afc:	601a      	str	r2, [r3, #0]
  }
}
 8015afe:	bf00      	nop
 8015b00:	bf00      	nop
 8015b02:	3708      	adds	r7, #8
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}
 8015b08:	24007800 	.word	0x24007800
 8015b0c:	24007810 	.word	0x24007810
 8015b10:	08015ad1 	.word	0x08015ad1
 8015b14:	24004108 	.word	0x24004108

08015b18 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015b1c:	4b0a      	ldr	r3, [pc, #40]	; (8015b48 <tcp_timer_needed+0x30>)
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d10f      	bne.n	8015b44 <tcp_timer_needed+0x2c>
 8015b24:	4b09      	ldr	r3, [pc, #36]	; (8015b4c <tcp_timer_needed+0x34>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d103      	bne.n	8015b34 <tcp_timer_needed+0x1c>
 8015b2c:	4b08      	ldr	r3, [pc, #32]	; (8015b50 <tcp_timer_needed+0x38>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d007      	beq.n	8015b44 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015b34:	4b04      	ldr	r3, [pc, #16]	; (8015b48 <tcp_timer_needed+0x30>)
 8015b36:	2201      	movs	r2, #1
 8015b38:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	4905      	ldr	r1, [pc, #20]	; (8015b54 <tcp_timer_needed+0x3c>)
 8015b3e:	20fa      	movs	r0, #250	; 0xfa
 8015b40:	f000 f8cc 	bl	8015cdc <sys_timeout>
  }
}
 8015b44:	bf00      	nop
 8015b46:	bd80      	pop	{r7, pc}
 8015b48:	24004108 	.word	0x24004108
 8015b4c:	24007800 	.word	0x24007800
 8015b50:	24007810 	.word	0x24007810
 8015b54:	08015ad1 	.word	0x08015ad1

08015b58 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b086      	sub	sp, #24
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	60f8      	str	r0, [r7, #12]
 8015b60:	60b9      	str	r1, [r7, #8]
 8015b62:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015b64:	200a      	movs	r0, #10
 8015b66:	f7f8 fdc3 	bl	800e6f0 <memp_malloc>
 8015b6a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015b6c:	693b      	ldr	r3, [r7, #16]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d109      	bne.n	8015b86 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d151      	bne.n	8015c1c <sys_timeout_abs+0xc4>
 8015b78:	4b2a      	ldr	r3, [pc, #168]	; (8015c24 <sys_timeout_abs+0xcc>)
 8015b7a:	22be      	movs	r2, #190	; 0xbe
 8015b7c:	492a      	ldr	r1, [pc, #168]	; (8015c28 <sys_timeout_abs+0xd0>)
 8015b7e:	482b      	ldr	r0, [pc, #172]	; (8015c2c <sys_timeout_abs+0xd4>)
 8015b80:	f002 ffd4 	bl	8018b2c <iprintf>
    return;
 8015b84:	e04a      	b.n	8015c1c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015b86:	693b      	ldr	r3, [r7, #16]
 8015b88:	2200      	movs	r2, #0
 8015b8a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015b8c:	693b      	ldr	r3, [r7, #16]
 8015b8e:	68ba      	ldr	r2, [r7, #8]
 8015b90:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015b92:	693b      	ldr	r3, [r7, #16]
 8015b94:	687a      	ldr	r2, [r7, #4]
 8015b96:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	68fa      	ldr	r2, [r7, #12]
 8015b9c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015b9e:	4b24      	ldr	r3, [pc, #144]	; (8015c30 <sys_timeout_abs+0xd8>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d103      	bne.n	8015bae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015ba6:	4a22      	ldr	r2, [pc, #136]	; (8015c30 <sys_timeout_abs+0xd8>)
 8015ba8:	693b      	ldr	r3, [r7, #16]
 8015baa:	6013      	str	r3, [r2, #0]
    return;
 8015bac:	e037      	b.n	8015c1e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015bae:	693b      	ldr	r3, [r7, #16]
 8015bb0:	685a      	ldr	r2, [r3, #4]
 8015bb2:	4b1f      	ldr	r3, [pc, #124]	; (8015c30 <sys_timeout_abs+0xd8>)
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	685b      	ldr	r3, [r3, #4]
 8015bb8:	1ad3      	subs	r3, r2, r3
 8015bba:	0fdb      	lsrs	r3, r3, #31
 8015bbc:	f003 0301 	and.w	r3, r3, #1
 8015bc0:	b2db      	uxtb	r3, r3
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d007      	beq.n	8015bd6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015bc6:	4b1a      	ldr	r3, [pc, #104]	; (8015c30 <sys_timeout_abs+0xd8>)
 8015bc8:	681a      	ldr	r2, [r3, #0]
 8015bca:	693b      	ldr	r3, [r7, #16]
 8015bcc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015bce:	4a18      	ldr	r2, [pc, #96]	; (8015c30 <sys_timeout_abs+0xd8>)
 8015bd0:	693b      	ldr	r3, [r7, #16]
 8015bd2:	6013      	str	r3, [r2, #0]
 8015bd4:	e023      	b.n	8015c1e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015bd6:	4b16      	ldr	r3, [pc, #88]	; (8015c30 <sys_timeout_abs+0xd8>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	617b      	str	r3, [r7, #20]
 8015bdc:	e01a      	b.n	8015c14 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015bde:	697b      	ldr	r3, [r7, #20]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d00b      	beq.n	8015bfe <sys_timeout_abs+0xa6>
 8015be6:	693b      	ldr	r3, [r7, #16]
 8015be8:	685a      	ldr	r2, [r3, #4]
 8015bea:	697b      	ldr	r3, [r7, #20]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	685b      	ldr	r3, [r3, #4]
 8015bf0:	1ad3      	subs	r3, r2, r3
 8015bf2:	0fdb      	lsrs	r3, r3, #31
 8015bf4:	f003 0301 	and.w	r3, r3, #1
 8015bf8:	b2db      	uxtb	r3, r3
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d007      	beq.n	8015c0e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015bfe:	697b      	ldr	r3, [r7, #20]
 8015c00:	681a      	ldr	r2, [r3, #0]
 8015c02:	693b      	ldr	r3, [r7, #16]
 8015c04:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015c06:	697b      	ldr	r3, [r7, #20]
 8015c08:	693a      	ldr	r2, [r7, #16]
 8015c0a:	601a      	str	r2, [r3, #0]
        break;
 8015c0c:	e007      	b.n	8015c1e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015c0e:	697b      	ldr	r3, [r7, #20]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	617b      	str	r3, [r7, #20]
 8015c14:	697b      	ldr	r3, [r7, #20]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d1e1      	bne.n	8015bde <sys_timeout_abs+0x86>
 8015c1a:	e000      	b.n	8015c1e <sys_timeout_abs+0xc6>
    return;
 8015c1c:	bf00      	nop
      }
    }
  }
}
 8015c1e:	3718      	adds	r7, #24
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}
 8015c24:	0801bcdc 	.word	0x0801bcdc
 8015c28:	0801bd10 	.word	0x0801bd10
 8015c2c:	0801bd50 	.word	0x0801bd50
 8015c30:	24004100 	.word	0x24004100

08015c34 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b086      	sub	sp, #24
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	685b      	ldr	r3, [r3, #4]
 8015c44:	4798      	blx	r3

  now = sys_now();
 8015c46:	f7f4 fe41 	bl	800a8cc <sys_now>
 8015c4a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015c4c:	697b      	ldr	r3, [r7, #20]
 8015c4e:	681a      	ldr	r2, [r3, #0]
 8015c50:	4b0f      	ldr	r3, [pc, #60]	; (8015c90 <lwip_cyclic_timer+0x5c>)
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	4413      	add	r3, r2
 8015c56:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015c58:	68fa      	ldr	r2, [r7, #12]
 8015c5a:	693b      	ldr	r3, [r7, #16]
 8015c5c:	1ad3      	subs	r3, r2, r3
 8015c5e:	0fdb      	lsrs	r3, r3, #31
 8015c60:	f003 0301 	and.w	r3, r3, #1
 8015c64:	b2db      	uxtb	r3, r3
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d009      	beq.n	8015c7e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015c6a:	697b      	ldr	r3, [r7, #20]
 8015c6c:	681a      	ldr	r2, [r3, #0]
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	4413      	add	r3, r2
 8015c72:	687a      	ldr	r2, [r7, #4]
 8015c74:	4907      	ldr	r1, [pc, #28]	; (8015c94 <lwip_cyclic_timer+0x60>)
 8015c76:	4618      	mov	r0, r3
 8015c78:	f7ff ff6e 	bl	8015b58 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015c7c:	e004      	b.n	8015c88 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015c7e:	687a      	ldr	r2, [r7, #4]
 8015c80:	4904      	ldr	r1, [pc, #16]	; (8015c94 <lwip_cyclic_timer+0x60>)
 8015c82:	68f8      	ldr	r0, [r7, #12]
 8015c84:	f7ff ff68 	bl	8015b58 <sys_timeout_abs>
}
 8015c88:	bf00      	nop
 8015c8a:	3718      	adds	r7, #24
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}
 8015c90:	24004104 	.word	0x24004104
 8015c94:	08015c35 	.word	0x08015c35

08015c98 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b082      	sub	sp, #8
 8015c9c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	607b      	str	r3, [r7, #4]
 8015ca2:	e00e      	b.n	8015cc2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015ca4:	4a0b      	ldr	r2, [pc, #44]	; (8015cd4 <sys_timeouts_init+0x3c>)
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	00db      	lsls	r3, r3, #3
 8015cb0:	4a08      	ldr	r2, [pc, #32]	; (8015cd4 <sys_timeouts_init+0x3c>)
 8015cb2:	4413      	add	r3, r2
 8015cb4:	461a      	mov	r2, r3
 8015cb6:	4908      	ldr	r1, [pc, #32]	; (8015cd8 <sys_timeouts_init+0x40>)
 8015cb8:	f000 f810 	bl	8015cdc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	3301      	adds	r3, #1
 8015cc0:	607b      	str	r3, [r7, #4]
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2b02      	cmp	r3, #2
 8015cc6:	d9ed      	bls.n	8015ca4 <sys_timeouts_init+0xc>
  }
}
 8015cc8:	bf00      	nop
 8015cca:	bf00      	nop
 8015ccc:	3708      	adds	r7, #8
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd80      	pop	{r7, pc}
 8015cd2:	bf00      	nop
 8015cd4:	0801de74 	.word	0x0801de74
 8015cd8:	08015c35 	.word	0x08015c35

08015cdc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b086      	sub	sp, #24
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	60f8      	str	r0, [r7, #12]
 8015ce4:	60b9      	str	r1, [r7, #8]
 8015ce6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015cee:	d306      	bcc.n	8015cfe <sys_timeout+0x22>
 8015cf0:	4b0a      	ldr	r3, [pc, #40]	; (8015d1c <sys_timeout+0x40>)
 8015cf2:	f240 1229 	movw	r2, #297	; 0x129
 8015cf6:	490a      	ldr	r1, [pc, #40]	; (8015d20 <sys_timeout+0x44>)
 8015cf8:	480a      	ldr	r0, [pc, #40]	; (8015d24 <sys_timeout+0x48>)
 8015cfa:	f002 ff17 	bl	8018b2c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015cfe:	f7f4 fde5 	bl	800a8cc <sys_now>
 8015d02:	4602      	mov	r2, r0
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	4413      	add	r3, r2
 8015d08:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015d0a:	687a      	ldr	r2, [r7, #4]
 8015d0c:	68b9      	ldr	r1, [r7, #8]
 8015d0e:	6978      	ldr	r0, [r7, #20]
 8015d10:	f7ff ff22 	bl	8015b58 <sys_timeout_abs>
#endif
}
 8015d14:	bf00      	nop
 8015d16:	3718      	adds	r7, #24
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}
 8015d1c:	0801bcdc 	.word	0x0801bcdc
 8015d20:	0801bd78 	.word	0x0801bd78
 8015d24:	0801bd50 	.word	0x0801bd50

08015d28 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b084      	sub	sp, #16
 8015d2c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015d2e:	f7f4 fdcd 	bl	800a8cc <sys_now>
 8015d32:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015d34:	4b17      	ldr	r3, [pc, #92]	; (8015d94 <sys_check_timeouts+0x6c>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d022      	beq.n	8015d86 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	685b      	ldr	r3, [r3, #4]
 8015d44:	68fa      	ldr	r2, [r7, #12]
 8015d46:	1ad3      	subs	r3, r2, r3
 8015d48:	0fdb      	lsrs	r3, r3, #31
 8015d4a:	f003 0301 	and.w	r3, r3, #1
 8015d4e:	b2db      	uxtb	r3, r3
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d11a      	bne.n	8015d8a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015d54:	68bb      	ldr	r3, [r7, #8]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	4a0e      	ldr	r2, [pc, #56]	; (8015d94 <sys_check_timeouts+0x6c>)
 8015d5a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015d5c:	68bb      	ldr	r3, [r7, #8]
 8015d5e:	689b      	ldr	r3, [r3, #8]
 8015d60:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015d62:	68bb      	ldr	r3, [r7, #8]
 8015d64:	68db      	ldr	r3, [r3, #12]
 8015d66:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	685b      	ldr	r3, [r3, #4]
 8015d6c:	4a0a      	ldr	r2, [pc, #40]	; (8015d98 <sys_check_timeouts+0x70>)
 8015d6e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015d70:	68b9      	ldr	r1, [r7, #8]
 8015d72:	200a      	movs	r0, #10
 8015d74:	f7f8 fd32 	bl	800e7dc <memp_free>
    if (handler != NULL) {
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d0da      	beq.n	8015d34 <sys_check_timeouts+0xc>
      handler(arg);
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	6838      	ldr	r0, [r7, #0]
 8015d82:	4798      	blx	r3
  do {
 8015d84:	e7d6      	b.n	8015d34 <sys_check_timeouts+0xc>
      return;
 8015d86:	bf00      	nop
 8015d88:	e000      	b.n	8015d8c <sys_check_timeouts+0x64>
      return;
 8015d8a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015d8c:	3710      	adds	r7, #16
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd80      	pop	{r7, pc}
 8015d92:	bf00      	nop
 8015d94:	24004100 	.word	0x24004100
 8015d98:	24004104 	.word	0x24004104

08015d9c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b082      	sub	sp, #8
 8015da0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015da2:	4b16      	ldr	r3, [pc, #88]	; (8015dfc <sys_timeouts_sleeptime+0x60>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d102      	bne.n	8015db0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015daa:	f04f 33ff 	mov.w	r3, #4294967295
 8015dae:	e020      	b.n	8015df2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015db0:	f7f4 fd8c 	bl	800a8cc <sys_now>
 8015db4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015db6:	4b11      	ldr	r3, [pc, #68]	; (8015dfc <sys_timeouts_sleeptime+0x60>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	685a      	ldr	r2, [r3, #4]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	1ad3      	subs	r3, r2, r3
 8015dc0:	0fdb      	lsrs	r3, r3, #31
 8015dc2:	f003 0301 	and.w	r3, r3, #1
 8015dc6:	b2db      	uxtb	r3, r3
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d001      	beq.n	8015dd0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	e010      	b.n	8015df2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015dd0:	4b0a      	ldr	r3, [pc, #40]	; (8015dfc <sys_timeouts_sleeptime+0x60>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	685a      	ldr	r2, [r3, #4]
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	1ad3      	subs	r3, r2, r3
 8015dda:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	da06      	bge.n	8015df0 <sys_timeouts_sleeptime+0x54>
 8015de2:	4b07      	ldr	r3, [pc, #28]	; (8015e00 <sys_timeouts_sleeptime+0x64>)
 8015de4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015de8:	4906      	ldr	r1, [pc, #24]	; (8015e04 <sys_timeouts_sleeptime+0x68>)
 8015dea:	4807      	ldr	r0, [pc, #28]	; (8015e08 <sys_timeouts_sleeptime+0x6c>)
 8015dec:	f002 fe9e 	bl	8018b2c <iprintf>
    return ret;
 8015df0:	683b      	ldr	r3, [r7, #0]
  }
}
 8015df2:	4618      	mov	r0, r3
 8015df4:	3708      	adds	r7, #8
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}
 8015dfa:	bf00      	nop
 8015dfc:	24004100 	.word	0x24004100
 8015e00:	0801bcdc 	.word	0x0801bcdc
 8015e04:	0801bdb0 	.word	0x0801bdb0
 8015e08:	0801bd50 	.word	0x0801bd50

08015e0c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015e10:	f002 fea4 	bl	8018b5c <rand>
 8015e14:	4603      	mov	r3, r0
 8015e16:	b29b      	uxth	r3, r3
 8015e18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015e1c:	b29b      	uxth	r3, r3
 8015e1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015e22:	b29a      	uxth	r2, r3
 8015e24:	4b01      	ldr	r3, [pc, #4]	; (8015e2c <udp_init+0x20>)
 8015e26:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015e28:	bf00      	nop
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	24000040 	.word	0x24000040

08015e30 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b084      	sub	sp, #16
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	60f8      	str	r0, [r7, #12]
 8015e38:	60b9      	str	r1, [r7, #8]
 8015e3a:	4613      	mov	r3, r2
 8015e3c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d105      	bne.n	8015e50 <udp_input_local_match+0x20>
 8015e44:	4b27      	ldr	r3, [pc, #156]	; (8015ee4 <udp_input_local_match+0xb4>)
 8015e46:	2287      	movs	r2, #135	; 0x87
 8015e48:	4927      	ldr	r1, [pc, #156]	; (8015ee8 <udp_input_local_match+0xb8>)
 8015e4a:	4828      	ldr	r0, [pc, #160]	; (8015eec <udp_input_local_match+0xbc>)
 8015e4c:	f002 fe6e 	bl	8018b2c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d105      	bne.n	8015e62 <udp_input_local_match+0x32>
 8015e56:	4b23      	ldr	r3, [pc, #140]	; (8015ee4 <udp_input_local_match+0xb4>)
 8015e58:	2288      	movs	r2, #136	; 0x88
 8015e5a:	4925      	ldr	r1, [pc, #148]	; (8015ef0 <udp_input_local_match+0xc0>)
 8015e5c:	4823      	ldr	r0, [pc, #140]	; (8015eec <udp_input_local_match+0xbc>)
 8015e5e:	f002 fe65 	bl	8018b2c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	7a1b      	ldrb	r3, [r3, #8]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d00b      	beq.n	8015e82 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	7a1a      	ldrb	r2, [r3, #8]
 8015e6e:	4b21      	ldr	r3, [pc, #132]	; (8015ef4 <udp_input_local_match+0xc4>)
 8015e70:	685b      	ldr	r3, [r3, #4]
 8015e72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015e76:	3301      	adds	r3, #1
 8015e78:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d001      	beq.n	8015e82 <udp_input_local_match+0x52>
    return 0;
 8015e7e:	2300      	movs	r3, #0
 8015e80:	e02b      	b.n	8015eda <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015e82:	79fb      	ldrb	r3, [r7, #7]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d018      	beq.n	8015eba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d013      	beq.n	8015eb6 <udp_input_local_match+0x86>
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d00f      	beq.n	8015eb6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015e96:	4b17      	ldr	r3, [pc, #92]	; (8015ef4 <udp_input_local_match+0xc4>)
 8015e98:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e9e:	d00a      	beq.n	8015eb6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	681a      	ldr	r2, [r3, #0]
 8015ea4:	4b13      	ldr	r3, [pc, #76]	; (8015ef4 <udp_input_local_match+0xc4>)
 8015ea6:	695b      	ldr	r3, [r3, #20]
 8015ea8:	405a      	eors	r2, r3
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	3308      	adds	r3, #8
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d110      	bne.n	8015ed8 <udp_input_local_match+0xa8>
          return 1;
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	e00f      	b.n	8015eda <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d009      	beq.n	8015ed4 <udp_input_local_match+0xa4>
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d005      	beq.n	8015ed4 <udp_input_local_match+0xa4>
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	4b09      	ldr	r3, [pc, #36]	; (8015ef4 <udp_input_local_match+0xc4>)
 8015ece:	695b      	ldr	r3, [r3, #20]
 8015ed0:	429a      	cmp	r2, r3
 8015ed2:	d101      	bne.n	8015ed8 <udp_input_local_match+0xa8>
        return 1;
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	e000      	b.n	8015eda <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015ed8:	2300      	movs	r3, #0
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3710      	adds	r7, #16
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	0801bdc4 	.word	0x0801bdc4
 8015ee8:	0801bdf4 	.word	0x0801bdf4
 8015eec:	0801be18 	.word	0x0801be18
 8015ef0:	0801be40 	.word	0x0801be40
 8015ef4:	24004740 	.word	0x24004740

08015ef8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015ef8:	b590      	push	{r4, r7, lr}
 8015efa:	b08d      	sub	sp, #52	; 0x34
 8015efc:	af02      	add	r7, sp, #8
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015f02:	2300      	movs	r3, #0
 8015f04:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d105      	bne.n	8015f18 <udp_input+0x20>
 8015f0c:	4b7c      	ldr	r3, [pc, #496]	; (8016100 <udp_input+0x208>)
 8015f0e:	22cf      	movs	r2, #207	; 0xcf
 8015f10:	497c      	ldr	r1, [pc, #496]	; (8016104 <udp_input+0x20c>)
 8015f12:	487d      	ldr	r0, [pc, #500]	; (8016108 <udp_input+0x210>)
 8015f14:	f002 fe0a 	bl	8018b2c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015f18:	683b      	ldr	r3, [r7, #0]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d105      	bne.n	8015f2a <udp_input+0x32>
 8015f1e:	4b78      	ldr	r3, [pc, #480]	; (8016100 <udp_input+0x208>)
 8015f20:	22d0      	movs	r2, #208	; 0xd0
 8015f22:	497a      	ldr	r1, [pc, #488]	; (801610c <udp_input+0x214>)
 8015f24:	4878      	ldr	r0, [pc, #480]	; (8016108 <udp_input+0x210>)
 8015f26:	f002 fe01 	bl	8018b2c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	895b      	ldrh	r3, [r3, #10]
 8015f2e:	2b07      	cmp	r3, #7
 8015f30:	d803      	bhi.n	8015f3a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f7f9 faf6 	bl	800f524 <pbuf_free>
    goto end;
 8015f38:	e0de      	b.n	80160f8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	685b      	ldr	r3, [r3, #4]
 8015f3e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015f40:	4b73      	ldr	r3, [pc, #460]	; (8016110 <udp_input+0x218>)
 8015f42:	695b      	ldr	r3, [r3, #20]
 8015f44:	4a72      	ldr	r2, [pc, #456]	; (8016110 <udp_input+0x218>)
 8015f46:	6812      	ldr	r2, [r2, #0]
 8015f48:	4611      	mov	r1, r2
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	f001 fcae 	bl	80178ac <ip4_addr_isbroadcast_u32>
 8015f50:	4603      	mov	r3, r0
 8015f52:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	881b      	ldrh	r3, [r3, #0]
 8015f58:	b29b      	uxth	r3, r3
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f7f7 fe38 	bl	800dbd0 <lwip_htons>
 8015f60:	4603      	mov	r3, r0
 8015f62:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015f64:	697b      	ldr	r3, [r7, #20]
 8015f66:	885b      	ldrh	r3, [r3, #2]
 8015f68:	b29b      	uxth	r3, r3
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f7f7 fe30 	bl	800dbd0 <lwip_htons>
 8015f70:	4603      	mov	r3, r0
 8015f72:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015f74:	2300      	movs	r3, #0
 8015f76:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015f78:	2300      	movs	r3, #0
 8015f7a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f80:	4b64      	ldr	r3, [pc, #400]	; (8016114 <udp_input+0x21c>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	627b      	str	r3, [r7, #36]	; 0x24
 8015f86:	e054      	b.n	8016032 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f8a:	8a5b      	ldrh	r3, [r3, #18]
 8015f8c:	89fa      	ldrh	r2, [r7, #14]
 8015f8e:	429a      	cmp	r2, r3
 8015f90:	d14a      	bne.n	8016028 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015f92:	7cfb      	ldrb	r3, [r7, #19]
 8015f94:	461a      	mov	r2, r3
 8015f96:	6839      	ldr	r1, [r7, #0]
 8015f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f9a:	f7ff ff49 	bl	8015e30 <udp_input_local_match>
 8015f9e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d041      	beq.n	8016028 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa6:	7c1b      	ldrb	r3, [r3, #16]
 8015fa8:	f003 0304 	and.w	r3, r3, #4
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d11d      	bne.n	8015fec <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015fb0:	69fb      	ldr	r3, [r7, #28]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d102      	bne.n	8015fbc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb8:	61fb      	str	r3, [r7, #28]
 8015fba:	e017      	b.n	8015fec <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015fbc:	7cfb      	ldrb	r3, [r7, #19]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d014      	beq.n	8015fec <udp_input+0xf4>
 8015fc2:	4b53      	ldr	r3, [pc, #332]	; (8016110 <udp_input+0x218>)
 8015fc4:	695b      	ldr	r3, [r3, #20]
 8015fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fca:	d10f      	bne.n	8015fec <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015fcc:	69fb      	ldr	r3, [r7, #28]
 8015fce:	681a      	ldr	r2, [r3, #0]
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	3304      	adds	r3, #4
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	d008      	beq.n	8015fec <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fdc:	681a      	ldr	r2, [r3, #0]
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	3304      	adds	r3, #4
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	429a      	cmp	r2, r3
 8015fe6:	d101      	bne.n	8015fec <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fee:	8a9b      	ldrh	r3, [r3, #20]
 8015ff0:	8a3a      	ldrh	r2, [r7, #16]
 8015ff2:	429a      	cmp	r2, r3
 8015ff4:	d118      	bne.n	8016028 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d005      	beq.n	801600a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016000:	685a      	ldr	r2, [r3, #4]
 8016002:	4b43      	ldr	r3, [pc, #268]	; (8016110 <udp_input+0x218>)
 8016004:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016006:	429a      	cmp	r2, r3
 8016008:	d10e      	bne.n	8016028 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801600a:	6a3b      	ldr	r3, [r7, #32]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d014      	beq.n	801603a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016012:	68da      	ldr	r2, [r3, #12]
 8016014:	6a3b      	ldr	r3, [r7, #32]
 8016016:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016018:	4b3e      	ldr	r3, [pc, #248]	; (8016114 <udp_input+0x21c>)
 801601a:	681a      	ldr	r2, [r3, #0]
 801601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016020:	4a3c      	ldr	r2, [pc, #240]	; (8016114 <udp_input+0x21c>)
 8016022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016024:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016026:	e008      	b.n	801603a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801602a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801602e:	68db      	ldr	r3, [r3, #12]
 8016030:	627b      	str	r3, [r7, #36]	; 0x24
 8016032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016034:	2b00      	cmp	r3, #0
 8016036:	d1a7      	bne.n	8015f88 <udp_input+0x90>
 8016038:	e000      	b.n	801603c <udp_input+0x144>
        break;
 801603a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801603e:	2b00      	cmp	r3, #0
 8016040:	d101      	bne.n	8016046 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016042:	69fb      	ldr	r3, [r7, #28]
 8016044:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016048:	2b00      	cmp	r3, #0
 801604a:	d002      	beq.n	8016052 <udp_input+0x15a>
    for_us = 1;
 801604c:	2301      	movs	r3, #1
 801604e:	76fb      	strb	r3, [r7, #27]
 8016050:	e00a      	b.n	8016068 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016052:	683b      	ldr	r3, [r7, #0]
 8016054:	3304      	adds	r3, #4
 8016056:	681a      	ldr	r2, [r3, #0]
 8016058:	4b2d      	ldr	r3, [pc, #180]	; (8016110 <udp_input+0x218>)
 801605a:	695b      	ldr	r3, [r3, #20]
 801605c:	429a      	cmp	r2, r3
 801605e:	bf0c      	ite	eq
 8016060:	2301      	moveq	r3, #1
 8016062:	2300      	movne	r3, #0
 8016064:	b2db      	uxtb	r3, r3
 8016066:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016068:	7efb      	ldrb	r3, [r7, #27]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d041      	beq.n	80160f2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801606e:	2108      	movs	r1, #8
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f7f9 f9d1 	bl	800f418 <pbuf_remove_header>
 8016076:	4603      	mov	r3, r0
 8016078:	2b00      	cmp	r3, #0
 801607a:	d00a      	beq.n	8016092 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801607c:	4b20      	ldr	r3, [pc, #128]	; (8016100 <udp_input+0x208>)
 801607e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016082:	4925      	ldr	r1, [pc, #148]	; (8016118 <udp_input+0x220>)
 8016084:	4820      	ldr	r0, [pc, #128]	; (8016108 <udp_input+0x210>)
 8016086:	f002 fd51 	bl	8018b2c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f7f9 fa4a 	bl	800f524 <pbuf_free>
      goto end;
 8016090:	e032      	b.n	80160f8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016094:	2b00      	cmp	r3, #0
 8016096:	d012      	beq.n	80160be <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801609a:	699b      	ldr	r3, [r3, #24]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d00a      	beq.n	80160b6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80160a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a2:	699c      	ldr	r4, [r3, #24]
 80160a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a6:	69d8      	ldr	r0, [r3, #28]
 80160a8:	8a3b      	ldrh	r3, [r7, #16]
 80160aa:	9300      	str	r3, [sp, #0]
 80160ac:	4b1b      	ldr	r3, [pc, #108]	; (801611c <udp_input+0x224>)
 80160ae:	687a      	ldr	r2, [r7, #4]
 80160b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80160b2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80160b4:	e021      	b.n	80160fa <udp_input+0x202>
        pbuf_free(p);
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f7f9 fa34 	bl	800f524 <pbuf_free>
        goto end;
 80160bc:	e01c      	b.n	80160f8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80160be:	7cfb      	ldrb	r3, [r7, #19]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d112      	bne.n	80160ea <udp_input+0x1f2>
 80160c4:	4b12      	ldr	r3, [pc, #72]	; (8016110 <udp_input+0x218>)
 80160c6:	695b      	ldr	r3, [r3, #20]
 80160c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160cc:	2be0      	cmp	r3, #224	; 0xe0
 80160ce:	d00c      	beq.n	80160ea <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80160d0:	4b0f      	ldr	r3, [pc, #60]	; (8016110 <udp_input+0x218>)
 80160d2:	899b      	ldrh	r3, [r3, #12]
 80160d4:	3308      	adds	r3, #8
 80160d6:	b29b      	uxth	r3, r3
 80160d8:	b21b      	sxth	r3, r3
 80160da:	4619      	mov	r1, r3
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f7f9 fa0e 	bl	800f4fe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80160e2:	2103      	movs	r1, #3
 80160e4:	6878      	ldr	r0, [r7, #4]
 80160e6:	f001 f8b7 	bl	8017258 <icmp_dest_unreach>
      pbuf_free(p);
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f7f9 fa1a 	bl	800f524 <pbuf_free>
  return;
 80160f0:	e003      	b.n	80160fa <udp_input+0x202>
    pbuf_free(p);
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f7f9 fa16 	bl	800f524 <pbuf_free>
  return;
 80160f8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80160fa:	372c      	adds	r7, #44	; 0x2c
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd90      	pop	{r4, r7, pc}
 8016100:	0801bdc4 	.word	0x0801bdc4
 8016104:	0801be68 	.word	0x0801be68
 8016108:	0801be18 	.word	0x0801be18
 801610c:	0801be80 	.word	0x0801be80
 8016110:	24004740 	.word	0x24004740
 8016114:	24007818 	.word	0x24007818
 8016118:	0801be9c 	.word	0x0801be9c
 801611c:	24004750 	.word	0x24004750

08016120 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016120:	b480      	push	{r7}
 8016122:	b085      	sub	sp, #20
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
 8016128:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d01e      	beq.n	801616e <udp_netif_ip_addr_changed+0x4e>
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d01a      	beq.n	801616e <udp_netif_ip_addr_changed+0x4e>
 8016138:	683b      	ldr	r3, [r7, #0]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d017      	beq.n	801616e <udp_netif_ip_addr_changed+0x4e>
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d013      	beq.n	801616e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016146:	4b0d      	ldr	r3, [pc, #52]	; (801617c <udp_netif_ip_addr_changed+0x5c>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	60fb      	str	r3, [r7, #12]
 801614c:	e00c      	b.n	8016168 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	681a      	ldr	r2, [r3, #0]
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	429a      	cmp	r2, r3
 8016158:	d103      	bne.n	8016162 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	681a      	ldr	r2, [r3, #0]
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	68db      	ldr	r3, [r3, #12]
 8016166:	60fb      	str	r3, [r7, #12]
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d1ef      	bne.n	801614e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801616e:	bf00      	nop
 8016170:	3714      	adds	r7, #20
 8016172:	46bd      	mov	sp, r7
 8016174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016178:	4770      	bx	lr
 801617a:	bf00      	nop
 801617c:	24007818 	.word	0x24007818

08016180 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b082      	sub	sp, #8
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016188:	4915      	ldr	r1, [pc, #84]	; (80161e0 <etharp_free_entry+0x60>)
 801618a:	687a      	ldr	r2, [r7, #4]
 801618c:	4613      	mov	r3, r2
 801618e:	005b      	lsls	r3, r3, #1
 8016190:	4413      	add	r3, r2
 8016192:	00db      	lsls	r3, r3, #3
 8016194:	440b      	add	r3, r1
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d013      	beq.n	80161c4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801619c:	4910      	ldr	r1, [pc, #64]	; (80161e0 <etharp_free_entry+0x60>)
 801619e:	687a      	ldr	r2, [r7, #4]
 80161a0:	4613      	mov	r3, r2
 80161a2:	005b      	lsls	r3, r3, #1
 80161a4:	4413      	add	r3, r2
 80161a6:	00db      	lsls	r3, r3, #3
 80161a8:	440b      	add	r3, r1
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	4618      	mov	r0, r3
 80161ae:	f7f9 f9b9 	bl	800f524 <pbuf_free>
    arp_table[i].q = NULL;
 80161b2:	490b      	ldr	r1, [pc, #44]	; (80161e0 <etharp_free_entry+0x60>)
 80161b4:	687a      	ldr	r2, [r7, #4]
 80161b6:	4613      	mov	r3, r2
 80161b8:	005b      	lsls	r3, r3, #1
 80161ba:	4413      	add	r3, r2
 80161bc:	00db      	lsls	r3, r3, #3
 80161be:	440b      	add	r3, r1
 80161c0:	2200      	movs	r2, #0
 80161c2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80161c4:	4906      	ldr	r1, [pc, #24]	; (80161e0 <etharp_free_entry+0x60>)
 80161c6:	687a      	ldr	r2, [r7, #4]
 80161c8:	4613      	mov	r3, r2
 80161ca:	005b      	lsls	r3, r3, #1
 80161cc:	4413      	add	r3, r2
 80161ce:	00db      	lsls	r3, r3, #3
 80161d0:	440b      	add	r3, r1
 80161d2:	3314      	adds	r3, #20
 80161d4:	2200      	movs	r2, #0
 80161d6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80161d8:	bf00      	nop
 80161da:	3708      	adds	r7, #8
 80161dc:	46bd      	mov	sp, r7
 80161de:	bd80      	pop	{r7, pc}
 80161e0:	2400410c 	.word	0x2400410c

080161e4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b082      	sub	sp, #8
 80161e8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80161ea:	2300      	movs	r3, #0
 80161ec:	607b      	str	r3, [r7, #4]
 80161ee:	e096      	b.n	801631e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80161f0:	494f      	ldr	r1, [pc, #316]	; (8016330 <etharp_tmr+0x14c>)
 80161f2:	687a      	ldr	r2, [r7, #4]
 80161f4:	4613      	mov	r3, r2
 80161f6:	005b      	lsls	r3, r3, #1
 80161f8:	4413      	add	r3, r2
 80161fa:	00db      	lsls	r3, r3, #3
 80161fc:	440b      	add	r3, r1
 80161fe:	3314      	adds	r3, #20
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016204:	78fb      	ldrb	r3, [r7, #3]
 8016206:	2b00      	cmp	r3, #0
 8016208:	f000 8086 	beq.w	8016318 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801620c:	4948      	ldr	r1, [pc, #288]	; (8016330 <etharp_tmr+0x14c>)
 801620e:	687a      	ldr	r2, [r7, #4]
 8016210:	4613      	mov	r3, r2
 8016212:	005b      	lsls	r3, r3, #1
 8016214:	4413      	add	r3, r2
 8016216:	00db      	lsls	r3, r3, #3
 8016218:	440b      	add	r3, r1
 801621a:	3312      	adds	r3, #18
 801621c:	881b      	ldrh	r3, [r3, #0]
 801621e:	3301      	adds	r3, #1
 8016220:	b298      	uxth	r0, r3
 8016222:	4943      	ldr	r1, [pc, #268]	; (8016330 <etharp_tmr+0x14c>)
 8016224:	687a      	ldr	r2, [r7, #4]
 8016226:	4613      	mov	r3, r2
 8016228:	005b      	lsls	r3, r3, #1
 801622a:	4413      	add	r3, r2
 801622c:	00db      	lsls	r3, r3, #3
 801622e:	440b      	add	r3, r1
 8016230:	3312      	adds	r3, #18
 8016232:	4602      	mov	r2, r0
 8016234:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016236:	493e      	ldr	r1, [pc, #248]	; (8016330 <etharp_tmr+0x14c>)
 8016238:	687a      	ldr	r2, [r7, #4]
 801623a:	4613      	mov	r3, r2
 801623c:	005b      	lsls	r3, r3, #1
 801623e:	4413      	add	r3, r2
 8016240:	00db      	lsls	r3, r3, #3
 8016242:	440b      	add	r3, r1
 8016244:	3312      	adds	r3, #18
 8016246:	881b      	ldrh	r3, [r3, #0]
 8016248:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801624c:	d215      	bcs.n	801627a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801624e:	4938      	ldr	r1, [pc, #224]	; (8016330 <etharp_tmr+0x14c>)
 8016250:	687a      	ldr	r2, [r7, #4]
 8016252:	4613      	mov	r3, r2
 8016254:	005b      	lsls	r3, r3, #1
 8016256:	4413      	add	r3, r2
 8016258:	00db      	lsls	r3, r3, #3
 801625a:	440b      	add	r3, r1
 801625c:	3314      	adds	r3, #20
 801625e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016260:	2b01      	cmp	r3, #1
 8016262:	d10e      	bne.n	8016282 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016264:	4932      	ldr	r1, [pc, #200]	; (8016330 <etharp_tmr+0x14c>)
 8016266:	687a      	ldr	r2, [r7, #4]
 8016268:	4613      	mov	r3, r2
 801626a:	005b      	lsls	r3, r3, #1
 801626c:	4413      	add	r3, r2
 801626e:	00db      	lsls	r3, r3, #3
 8016270:	440b      	add	r3, r1
 8016272:	3312      	adds	r3, #18
 8016274:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016276:	2b04      	cmp	r3, #4
 8016278:	d903      	bls.n	8016282 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f7ff ff80 	bl	8016180 <etharp_free_entry>
 8016280:	e04a      	b.n	8016318 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016282:	492b      	ldr	r1, [pc, #172]	; (8016330 <etharp_tmr+0x14c>)
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	4613      	mov	r3, r2
 8016288:	005b      	lsls	r3, r3, #1
 801628a:	4413      	add	r3, r2
 801628c:	00db      	lsls	r3, r3, #3
 801628e:	440b      	add	r3, r1
 8016290:	3314      	adds	r3, #20
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	2b03      	cmp	r3, #3
 8016296:	d10a      	bne.n	80162ae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016298:	4925      	ldr	r1, [pc, #148]	; (8016330 <etharp_tmr+0x14c>)
 801629a:	687a      	ldr	r2, [r7, #4]
 801629c:	4613      	mov	r3, r2
 801629e:	005b      	lsls	r3, r3, #1
 80162a0:	4413      	add	r3, r2
 80162a2:	00db      	lsls	r3, r3, #3
 80162a4:	440b      	add	r3, r1
 80162a6:	3314      	adds	r3, #20
 80162a8:	2204      	movs	r2, #4
 80162aa:	701a      	strb	r2, [r3, #0]
 80162ac:	e034      	b.n	8016318 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80162ae:	4920      	ldr	r1, [pc, #128]	; (8016330 <etharp_tmr+0x14c>)
 80162b0:	687a      	ldr	r2, [r7, #4]
 80162b2:	4613      	mov	r3, r2
 80162b4:	005b      	lsls	r3, r3, #1
 80162b6:	4413      	add	r3, r2
 80162b8:	00db      	lsls	r3, r3, #3
 80162ba:	440b      	add	r3, r1
 80162bc:	3314      	adds	r3, #20
 80162be:	781b      	ldrb	r3, [r3, #0]
 80162c0:	2b04      	cmp	r3, #4
 80162c2:	d10a      	bne.n	80162da <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80162c4:	491a      	ldr	r1, [pc, #104]	; (8016330 <etharp_tmr+0x14c>)
 80162c6:	687a      	ldr	r2, [r7, #4]
 80162c8:	4613      	mov	r3, r2
 80162ca:	005b      	lsls	r3, r3, #1
 80162cc:	4413      	add	r3, r2
 80162ce:	00db      	lsls	r3, r3, #3
 80162d0:	440b      	add	r3, r1
 80162d2:	3314      	adds	r3, #20
 80162d4:	2202      	movs	r2, #2
 80162d6:	701a      	strb	r2, [r3, #0]
 80162d8:	e01e      	b.n	8016318 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80162da:	4915      	ldr	r1, [pc, #84]	; (8016330 <etharp_tmr+0x14c>)
 80162dc:	687a      	ldr	r2, [r7, #4]
 80162de:	4613      	mov	r3, r2
 80162e0:	005b      	lsls	r3, r3, #1
 80162e2:	4413      	add	r3, r2
 80162e4:	00db      	lsls	r3, r3, #3
 80162e6:	440b      	add	r3, r1
 80162e8:	3314      	adds	r3, #20
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	2b01      	cmp	r3, #1
 80162ee:	d113      	bne.n	8016318 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80162f0:	490f      	ldr	r1, [pc, #60]	; (8016330 <etharp_tmr+0x14c>)
 80162f2:	687a      	ldr	r2, [r7, #4]
 80162f4:	4613      	mov	r3, r2
 80162f6:	005b      	lsls	r3, r3, #1
 80162f8:	4413      	add	r3, r2
 80162fa:	00db      	lsls	r3, r3, #3
 80162fc:	440b      	add	r3, r1
 80162fe:	3308      	adds	r3, #8
 8016300:	6818      	ldr	r0, [r3, #0]
 8016302:	687a      	ldr	r2, [r7, #4]
 8016304:	4613      	mov	r3, r2
 8016306:	005b      	lsls	r3, r3, #1
 8016308:	4413      	add	r3, r2
 801630a:	00db      	lsls	r3, r3, #3
 801630c:	4a08      	ldr	r2, [pc, #32]	; (8016330 <etharp_tmr+0x14c>)
 801630e:	4413      	add	r3, r2
 8016310:	3304      	adds	r3, #4
 8016312:	4619      	mov	r1, r3
 8016314:	f000 fe6e 	bl	8016ff4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	3301      	adds	r3, #1
 801631c:	607b      	str	r3, [r7, #4]
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	2b09      	cmp	r3, #9
 8016322:	f77f af65 	ble.w	80161f0 <etharp_tmr+0xc>
      }
    }
  }
}
 8016326:	bf00      	nop
 8016328:	bf00      	nop
 801632a:	3708      	adds	r7, #8
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}
 8016330:	2400410c 	.word	0x2400410c

08016334 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b08a      	sub	sp, #40	; 0x28
 8016338:	af00      	add	r7, sp, #0
 801633a:	60f8      	str	r0, [r7, #12]
 801633c:	460b      	mov	r3, r1
 801633e:	607a      	str	r2, [r7, #4]
 8016340:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016342:	230a      	movs	r3, #10
 8016344:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016346:	230a      	movs	r3, #10
 8016348:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801634a:	230a      	movs	r3, #10
 801634c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801634e:	2300      	movs	r3, #0
 8016350:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016352:	230a      	movs	r3, #10
 8016354:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016356:	2300      	movs	r3, #0
 8016358:	83bb      	strh	r3, [r7, #28]
 801635a:	2300      	movs	r3, #0
 801635c:	837b      	strh	r3, [r7, #26]
 801635e:	2300      	movs	r3, #0
 8016360:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016362:	2300      	movs	r3, #0
 8016364:	843b      	strh	r3, [r7, #32]
 8016366:	e0ae      	b.n	80164c6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016368:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801636c:	49a6      	ldr	r1, [pc, #664]	; (8016608 <etharp_find_entry+0x2d4>)
 801636e:	4613      	mov	r3, r2
 8016370:	005b      	lsls	r3, r3, #1
 8016372:	4413      	add	r3, r2
 8016374:	00db      	lsls	r3, r3, #3
 8016376:	440b      	add	r3, r1
 8016378:	3314      	adds	r3, #20
 801637a:	781b      	ldrb	r3, [r3, #0]
 801637c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801637e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016382:	2b0a      	cmp	r3, #10
 8016384:	d105      	bne.n	8016392 <etharp_find_entry+0x5e>
 8016386:	7dfb      	ldrb	r3, [r7, #23]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d102      	bne.n	8016392 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801638c:	8c3b      	ldrh	r3, [r7, #32]
 801638e:	847b      	strh	r3, [r7, #34]	; 0x22
 8016390:	e095      	b.n	80164be <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016392:	7dfb      	ldrb	r3, [r7, #23]
 8016394:	2b00      	cmp	r3, #0
 8016396:	f000 8092 	beq.w	80164be <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801639a:	7dfb      	ldrb	r3, [r7, #23]
 801639c:	2b01      	cmp	r3, #1
 801639e:	d009      	beq.n	80163b4 <etharp_find_entry+0x80>
 80163a0:	7dfb      	ldrb	r3, [r7, #23]
 80163a2:	2b01      	cmp	r3, #1
 80163a4:	d806      	bhi.n	80163b4 <etharp_find_entry+0x80>
 80163a6:	4b99      	ldr	r3, [pc, #612]	; (801660c <etharp_find_entry+0x2d8>)
 80163a8:	f240 1223 	movw	r2, #291	; 0x123
 80163ac:	4998      	ldr	r1, [pc, #608]	; (8016610 <etharp_find_entry+0x2dc>)
 80163ae:	4899      	ldr	r0, [pc, #612]	; (8016614 <etharp_find_entry+0x2e0>)
 80163b0:	f002 fbbc 	bl	8018b2c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d020      	beq.n	80163fc <etharp_find_entry+0xc8>
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	6819      	ldr	r1, [r3, #0]
 80163be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163c2:	4891      	ldr	r0, [pc, #580]	; (8016608 <etharp_find_entry+0x2d4>)
 80163c4:	4613      	mov	r3, r2
 80163c6:	005b      	lsls	r3, r3, #1
 80163c8:	4413      	add	r3, r2
 80163ca:	00db      	lsls	r3, r3, #3
 80163cc:	4403      	add	r3, r0
 80163ce:	3304      	adds	r3, #4
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	4299      	cmp	r1, r3
 80163d4:	d112      	bne.n	80163fc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d00c      	beq.n	80163f6 <etharp_find_entry+0xc2>
 80163dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163e0:	4989      	ldr	r1, [pc, #548]	; (8016608 <etharp_find_entry+0x2d4>)
 80163e2:	4613      	mov	r3, r2
 80163e4:	005b      	lsls	r3, r3, #1
 80163e6:	4413      	add	r3, r2
 80163e8:	00db      	lsls	r3, r3, #3
 80163ea:	440b      	add	r3, r1
 80163ec:	3308      	adds	r3, #8
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	687a      	ldr	r2, [r7, #4]
 80163f2:	429a      	cmp	r2, r3
 80163f4:	d102      	bne.n	80163fc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80163f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163fa:	e100      	b.n	80165fe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80163fc:	7dfb      	ldrb	r3, [r7, #23]
 80163fe:	2b01      	cmp	r3, #1
 8016400:	d140      	bne.n	8016484 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016402:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016406:	4980      	ldr	r1, [pc, #512]	; (8016608 <etharp_find_entry+0x2d4>)
 8016408:	4613      	mov	r3, r2
 801640a:	005b      	lsls	r3, r3, #1
 801640c:	4413      	add	r3, r2
 801640e:	00db      	lsls	r3, r3, #3
 8016410:	440b      	add	r3, r1
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d01a      	beq.n	801644e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016418:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801641c:	497a      	ldr	r1, [pc, #488]	; (8016608 <etharp_find_entry+0x2d4>)
 801641e:	4613      	mov	r3, r2
 8016420:	005b      	lsls	r3, r3, #1
 8016422:	4413      	add	r3, r2
 8016424:	00db      	lsls	r3, r3, #3
 8016426:	440b      	add	r3, r1
 8016428:	3312      	adds	r3, #18
 801642a:	881b      	ldrh	r3, [r3, #0]
 801642c:	8bba      	ldrh	r2, [r7, #28]
 801642e:	429a      	cmp	r2, r3
 8016430:	d845      	bhi.n	80164be <etharp_find_entry+0x18a>
            old_queue = i;
 8016432:	8c3b      	ldrh	r3, [r7, #32]
 8016434:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016436:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801643a:	4973      	ldr	r1, [pc, #460]	; (8016608 <etharp_find_entry+0x2d4>)
 801643c:	4613      	mov	r3, r2
 801643e:	005b      	lsls	r3, r3, #1
 8016440:	4413      	add	r3, r2
 8016442:	00db      	lsls	r3, r3, #3
 8016444:	440b      	add	r3, r1
 8016446:	3312      	adds	r3, #18
 8016448:	881b      	ldrh	r3, [r3, #0]
 801644a:	83bb      	strh	r3, [r7, #28]
 801644c:	e037      	b.n	80164be <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801644e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016452:	496d      	ldr	r1, [pc, #436]	; (8016608 <etharp_find_entry+0x2d4>)
 8016454:	4613      	mov	r3, r2
 8016456:	005b      	lsls	r3, r3, #1
 8016458:	4413      	add	r3, r2
 801645a:	00db      	lsls	r3, r3, #3
 801645c:	440b      	add	r3, r1
 801645e:	3312      	adds	r3, #18
 8016460:	881b      	ldrh	r3, [r3, #0]
 8016462:	8b7a      	ldrh	r2, [r7, #26]
 8016464:	429a      	cmp	r2, r3
 8016466:	d82a      	bhi.n	80164be <etharp_find_entry+0x18a>
            old_pending = i;
 8016468:	8c3b      	ldrh	r3, [r7, #32]
 801646a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801646c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016470:	4965      	ldr	r1, [pc, #404]	; (8016608 <etharp_find_entry+0x2d4>)
 8016472:	4613      	mov	r3, r2
 8016474:	005b      	lsls	r3, r3, #1
 8016476:	4413      	add	r3, r2
 8016478:	00db      	lsls	r3, r3, #3
 801647a:	440b      	add	r3, r1
 801647c:	3312      	adds	r3, #18
 801647e:	881b      	ldrh	r3, [r3, #0]
 8016480:	837b      	strh	r3, [r7, #26]
 8016482:	e01c      	b.n	80164be <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016484:	7dfb      	ldrb	r3, [r7, #23]
 8016486:	2b01      	cmp	r3, #1
 8016488:	d919      	bls.n	80164be <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801648a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801648e:	495e      	ldr	r1, [pc, #376]	; (8016608 <etharp_find_entry+0x2d4>)
 8016490:	4613      	mov	r3, r2
 8016492:	005b      	lsls	r3, r3, #1
 8016494:	4413      	add	r3, r2
 8016496:	00db      	lsls	r3, r3, #3
 8016498:	440b      	add	r3, r1
 801649a:	3312      	adds	r3, #18
 801649c:	881b      	ldrh	r3, [r3, #0]
 801649e:	8b3a      	ldrh	r2, [r7, #24]
 80164a0:	429a      	cmp	r2, r3
 80164a2:	d80c      	bhi.n	80164be <etharp_find_entry+0x18a>
            old_stable = i;
 80164a4:	8c3b      	ldrh	r3, [r7, #32]
 80164a6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80164a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164ac:	4956      	ldr	r1, [pc, #344]	; (8016608 <etharp_find_entry+0x2d4>)
 80164ae:	4613      	mov	r3, r2
 80164b0:	005b      	lsls	r3, r3, #1
 80164b2:	4413      	add	r3, r2
 80164b4:	00db      	lsls	r3, r3, #3
 80164b6:	440b      	add	r3, r1
 80164b8:	3312      	adds	r3, #18
 80164ba:	881b      	ldrh	r3, [r3, #0]
 80164bc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80164be:	8c3b      	ldrh	r3, [r7, #32]
 80164c0:	3301      	adds	r3, #1
 80164c2:	b29b      	uxth	r3, r3
 80164c4:	843b      	strh	r3, [r7, #32]
 80164c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164ca:	2b09      	cmp	r3, #9
 80164cc:	f77f af4c 	ble.w	8016368 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80164d0:	7afb      	ldrb	r3, [r7, #11]
 80164d2:	f003 0302 	and.w	r3, r3, #2
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d108      	bne.n	80164ec <etharp_find_entry+0x1b8>
 80164da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80164de:	2b0a      	cmp	r3, #10
 80164e0:	d107      	bne.n	80164f2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80164e2:	7afb      	ldrb	r3, [r7, #11]
 80164e4:	f003 0301 	and.w	r3, r3, #1
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d102      	bne.n	80164f2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80164ec:	f04f 33ff 	mov.w	r3, #4294967295
 80164f0:	e085      	b.n	80165fe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80164f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80164f6:	2b09      	cmp	r3, #9
 80164f8:	dc02      	bgt.n	8016500 <etharp_find_entry+0x1cc>
    i = empty;
 80164fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80164fc:	843b      	strh	r3, [r7, #32]
 80164fe:	e039      	b.n	8016574 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016500:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016504:	2b09      	cmp	r3, #9
 8016506:	dc14      	bgt.n	8016532 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801650a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801650c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016510:	493d      	ldr	r1, [pc, #244]	; (8016608 <etharp_find_entry+0x2d4>)
 8016512:	4613      	mov	r3, r2
 8016514:	005b      	lsls	r3, r3, #1
 8016516:	4413      	add	r3, r2
 8016518:	00db      	lsls	r3, r3, #3
 801651a:	440b      	add	r3, r1
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d018      	beq.n	8016554 <etharp_find_entry+0x220>
 8016522:	4b3a      	ldr	r3, [pc, #232]	; (801660c <etharp_find_entry+0x2d8>)
 8016524:	f240 126d 	movw	r2, #365	; 0x16d
 8016528:	493b      	ldr	r1, [pc, #236]	; (8016618 <etharp_find_entry+0x2e4>)
 801652a:	483a      	ldr	r0, [pc, #232]	; (8016614 <etharp_find_entry+0x2e0>)
 801652c:	f002 fafe 	bl	8018b2c <iprintf>
 8016530:	e010      	b.n	8016554 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016532:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016536:	2b09      	cmp	r3, #9
 8016538:	dc02      	bgt.n	8016540 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801653a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801653c:	843b      	strh	r3, [r7, #32]
 801653e:	e009      	b.n	8016554 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016540:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016544:	2b09      	cmp	r3, #9
 8016546:	dc02      	bgt.n	801654e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016548:	8bfb      	ldrh	r3, [r7, #30]
 801654a:	843b      	strh	r3, [r7, #32]
 801654c:	e002      	b.n	8016554 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801654e:	f04f 33ff 	mov.w	r3, #4294967295
 8016552:	e054      	b.n	80165fe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016554:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016558:	2b09      	cmp	r3, #9
 801655a:	dd06      	ble.n	801656a <etharp_find_entry+0x236>
 801655c:	4b2b      	ldr	r3, [pc, #172]	; (801660c <etharp_find_entry+0x2d8>)
 801655e:	f240 127f 	movw	r2, #383	; 0x17f
 8016562:	492e      	ldr	r1, [pc, #184]	; (801661c <etharp_find_entry+0x2e8>)
 8016564:	482b      	ldr	r0, [pc, #172]	; (8016614 <etharp_find_entry+0x2e0>)
 8016566:	f002 fae1 	bl	8018b2c <iprintf>
    etharp_free_entry(i);
 801656a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801656e:	4618      	mov	r0, r3
 8016570:	f7ff fe06 	bl	8016180 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016574:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016578:	2b09      	cmp	r3, #9
 801657a:	dd06      	ble.n	801658a <etharp_find_entry+0x256>
 801657c:	4b23      	ldr	r3, [pc, #140]	; (801660c <etharp_find_entry+0x2d8>)
 801657e:	f240 1283 	movw	r2, #387	; 0x183
 8016582:	4926      	ldr	r1, [pc, #152]	; (801661c <etharp_find_entry+0x2e8>)
 8016584:	4823      	ldr	r0, [pc, #140]	; (8016614 <etharp_find_entry+0x2e0>)
 8016586:	f002 fad1 	bl	8018b2c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801658a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801658e:	491e      	ldr	r1, [pc, #120]	; (8016608 <etharp_find_entry+0x2d4>)
 8016590:	4613      	mov	r3, r2
 8016592:	005b      	lsls	r3, r3, #1
 8016594:	4413      	add	r3, r2
 8016596:	00db      	lsls	r3, r3, #3
 8016598:	440b      	add	r3, r1
 801659a:	3314      	adds	r3, #20
 801659c:	781b      	ldrb	r3, [r3, #0]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d006      	beq.n	80165b0 <etharp_find_entry+0x27c>
 80165a2:	4b1a      	ldr	r3, [pc, #104]	; (801660c <etharp_find_entry+0x2d8>)
 80165a4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80165a8:	491d      	ldr	r1, [pc, #116]	; (8016620 <etharp_find_entry+0x2ec>)
 80165aa:	481a      	ldr	r0, [pc, #104]	; (8016614 <etharp_find_entry+0x2e0>)
 80165ac:	f002 fabe 	bl	8018b2c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d00b      	beq.n	80165ce <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80165b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	6819      	ldr	r1, [r3, #0]
 80165be:	4812      	ldr	r0, [pc, #72]	; (8016608 <etharp_find_entry+0x2d4>)
 80165c0:	4613      	mov	r3, r2
 80165c2:	005b      	lsls	r3, r3, #1
 80165c4:	4413      	add	r3, r2
 80165c6:	00db      	lsls	r3, r3, #3
 80165c8:	4403      	add	r3, r0
 80165ca:	3304      	adds	r3, #4
 80165cc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80165ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165d2:	490d      	ldr	r1, [pc, #52]	; (8016608 <etharp_find_entry+0x2d4>)
 80165d4:	4613      	mov	r3, r2
 80165d6:	005b      	lsls	r3, r3, #1
 80165d8:	4413      	add	r3, r2
 80165da:	00db      	lsls	r3, r3, #3
 80165dc:	440b      	add	r3, r1
 80165de:	3312      	adds	r3, #18
 80165e0:	2200      	movs	r2, #0
 80165e2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80165e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165e8:	4907      	ldr	r1, [pc, #28]	; (8016608 <etharp_find_entry+0x2d4>)
 80165ea:	4613      	mov	r3, r2
 80165ec:	005b      	lsls	r3, r3, #1
 80165ee:	4413      	add	r3, r2
 80165f0:	00db      	lsls	r3, r3, #3
 80165f2:	440b      	add	r3, r1
 80165f4:	3308      	adds	r3, #8
 80165f6:	687a      	ldr	r2, [r7, #4]
 80165f8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80165fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80165fe:	4618      	mov	r0, r3
 8016600:	3728      	adds	r7, #40	; 0x28
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
 8016606:	bf00      	nop
 8016608:	2400410c 	.word	0x2400410c
 801660c:	0801c128 	.word	0x0801c128
 8016610:	0801c160 	.word	0x0801c160
 8016614:	0801c1a0 	.word	0x0801c1a0
 8016618:	0801c1c8 	.word	0x0801c1c8
 801661c:	0801c1e0 	.word	0x0801c1e0
 8016620:	0801c1f4 	.word	0x0801c1f4

08016624 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b088      	sub	sp, #32
 8016628:	af02      	add	r7, sp, #8
 801662a:	60f8      	str	r0, [r7, #12]
 801662c:	60b9      	str	r1, [r7, #8]
 801662e:	607a      	str	r2, [r7, #4]
 8016630:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016638:	2b06      	cmp	r3, #6
 801663a:	d006      	beq.n	801664a <etharp_update_arp_entry+0x26>
 801663c:	4b48      	ldr	r3, [pc, #288]	; (8016760 <etharp_update_arp_entry+0x13c>)
 801663e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016642:	4948      	ldr	r1, [pc, #288]	; (8016764 <etharp_update_arp_entry+0x140>)
 8016644:	4848      	ldr	r0, [pc, #288]	; (8016768 <etharp_update_arp_entry+0x144>)
 8016646:	f002 fa71 	bl	8018b2c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801664a:	68bb      	ldr	r3, [r7, #8]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d012      	beq.n	8016676 <etharp_update_arp_entry+0x52>
 8016650:	68bb      	ldr	r3, [r7, #8]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d00e      	beq.n	8016676 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	68f9      	ldr	r1, [r7, #12]
 801665e:	4618      	mov	r0, r3
 8016660:	f001 f924 	bl	80178ac <ip4_addr_isbroadcast_u32>
 8016664:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016666:	2b00      	cmp	r3, #0
 8016668:	d105      	bne.n	8016676 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801666a:	68bb      	ldr	r3, [r7, #8]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016672:	2be0      	cmp	r3, #224	; 0xe0
 8016674:	d102      	bne.n	801667c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016676:	f06f 030f 	mvn.w	r3, #15
 801667a:	e06c      	b.n	8016756 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801667c:	78fb      	ldrb	r3, [r7, #3]
 801667e:	68fa      	ldr	r2, [r7, #12]
 8016680:	4619      	mov	r1, r3
 8016682:	68b8      	ldr	r0, [r7, #8]
 8016684:	f7ff fe56 	bl	8016334 <etharp_find_entry>
 8016688:	4603      	mov	r3, r0
 801668a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801668c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016690:	2b00      	cmp	r3, #0
 8016692:	da02      	bge.n	801669a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016694:	8afb      	ldrh	r3, [r7, #22]
 8016696:	b25b      	sxtb	r3, r3
 8016698:	e05d      	b.n	8016756 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801669a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801669e:	4933      	ldr	r1, [pc, #204]	; (801676c <etharp_update_arp_entry+0x148>)
 80166a0:	4613      	mov	r3, r2
 80166a2:	005b      	lsls	r3, r3, #1
 80166a4:	4413      	add	r3, r2
 80166a6:	00db      	lsls	r3, r3, #3
 80166a8:	440b      	add	r3, r1
 80166aa:	3314      	adds	r3, #20
 80166ac:	2202      	movs	r2, #2
 80166ae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80166b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166b4:	492d      	ldr	r1, [pc, #180]	; (801676c <etharp_update_arp_entry+0x148>)
 80166b6:	4613      	mov	r3, r2
 80166b8:	005b      	lsls	r3, r3, #1
 80166ba:	4413      	add	r3, r2
 80166bc:	00db      	lsls	r3, r3, #3
 80166be:	440b      	add	r3, r1
 80166c0:	3308      	adds	r3, #8
 80166c2:	68fa      	ldr	r2, [r7, #12]
 80166c4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80166c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166ca:	4613      	mov	r3, r2
 80166cc:	005b      	lsls	r3, r3, #1
 80166ce:	4413      	add	r3, r2
 80166d0:	00db      	lsls	r3, r3, #3
 80166d2:	3308      	adds	r3, #8
 80166d4:	4a25      	ldr	r2, [pc, #148]	; (801676c <etharp_update_arp_entry+0x148>)
 80166d6:	4413      	add	r3, r2
 80166d8:	3304      	adds	r3, #4
 80166da:	2206      	movs	r2, #6
 80166dc:	6879      	ldr	r1, [r7, #4]
 80166de:	4618      	mov	r0, r3
 80166e0:	f002 fa0e 	bl	8018b00 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80166e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166e8:	4920      	ldr	r1, [pc, #128]	; (801676c <etharp_update_arp_entry+0x148>)
 80166ea:	4613      	mov	r3, r2
 80166ec:	005b      	lsls	r3, r3, #1
 80166ee:	4413      	add	r3, r2
 80166f0:	00db      	lsls	r3, r3, #3
 80166f2:	440b      	add	r3, r1
 80166f4:	3312      	adds	r3, #18
 80166f6:	2200      	movs	r2, #0
 80166f8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80166fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166fe:	491b      	ldr	r1, [pc, #108]	; (801676c <etharp_update_arp_entry+0x148>)
 8016700:	4613      	mov	r3, r2
 8016702:	005b      	lsls	r3, r3, #1
 8016704:	4413      	add	r3, r2
 8016706:	00db      	lsls	r3, r3, #3
 8016708:	440b      	add	r3, r1
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d021      	beq.n	8016754 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016710:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016714:	4915      	ldr	r1, [pc, #84]	; (801676c <etharp_update_arp_entry+0x148>)
 8016716:	4613      	mov	r3, r2
 8016718:	005b      	lsls	r3, r3, #1
 801671a:	4413      	add	r3, r2
 801671c:	00db      	lsls	r3, r3, #3
 801671e:	440b      	add	r3, r1
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016724:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016728:	4910      	ldr	r1, [pc, #64]	; (801676c <etharp_update_arp_entry+0x148>)
 801672a:	4613      	mov	r3, r2
 801672c:	005b      	lsls	r3, r3, #1
 801672e:	4413      	add	r3, r2
 8016730:	00db      	lsls	r3, r3, #3
 8016732:	440b      	add	r3, r1
 8016734:	2200      	movs	r2, #0
 8016736:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801673e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016742:	9300      	str	r3, [sp, #0]
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6939      	ldr	r1, [r7, #16]
 8016748:	68f8      	ldr	r0, [r7, #12]
 801674a:	f002 f849 	bl	80187e0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801674e:	6938      	ldr	r0, [r7, #16]
 8016750:	f7f8 fee8 	bl	800f524 <pbuf_free>
  }
  return ERR_OK;
 8016754:	2300      	movs	r3, #0
}
 8016756:	4618      	mov	r0, r3
 8016758:	3718      	adds	r7, #24
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}
 801675e:	bf00      	nop
 8016760:	0801c128 	.word	0x0801c128
 8016764:	0801c220 	.word	0x0801c220
 8016768:	0801c1a0 	.word	0x0801c1a0
 801676c:	2400410c 	.word	0x2400410c

08016770 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b084      	sub	sp, #16
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016778:	2300      	movs	r3, #0
 801677a:	60fb      	str	r3, [r7, #12]
 801677c:	e01e      	b.n	80167bc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801677e:	4913      	ldr	r1, [pc, #76]	; (80167cc <etharp_cleanup_netif+0x5c>)
 8016780:	68fa      	ldr	r2, [r7, #12]
 8016782:	4613      	mov	r3, r2
 8016784:	005b      	lsls	r3, r3, #1
 8016786:	4413      	add	r3, r2
 8016788:	00db      	lsls	r3, r3, #3
 801678a:	440b      	add	r3, r1
 801678c:	3314      	adds	r3, #20
 801678e:	781b      	ldrb	r3, [r3, #0]
 8016790:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016792:	7afb      	ldrb	r3, [r7, #11]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d00e      	beq.n	80167b6 <etharp_cleanup_netif+0x46>
 8016798:	490c      	ldr	r1, [pc, #48]	; (80167cc <etharp_cleanup_netif+0x5c>)
 801679a:	68fa      	ldr	r2, [r7, #12]
 801679c:	4613      	mov	r3, r2
 801679e:	005b      	lsls	r3, r3, #1
 80167a0:	4413      	add	r3, r2
 80167a2:	00db      	lsls	r3, r3, #3
 80167a4:	440b      	add	r3, r1
 80167a6:	3308      	adds	r3, #8
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	687a      	ldr	r2, [r7, #4]
 80167ac:	429a      	cmp	r2, r3
 80167ae:	d102      	bne.n	80167b6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80167b0:	68f8      	ldr	r0, [r7, #12]
 80167b2:	f7ff fce5 	bl	8016180 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	3301      	adds	r3, #1
 80167ba:	60fb      	str	r3, [r7, #12]
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	2b09      	cmp	r3, #9
 80167c0:	dddd      	ble.n	801677e <etharp_cleanup_netif+0xe>
    }
  }
}
 80167c2:	bf00      	nop
 80167c4:	bf00      	nop
 80167c6:	3710      	adds	r7, #16
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	2400410c 	.word	0x2400410c

080167d0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80167d0:	b5b0      	push	{r4, r5, r7, lr}
 80167d2:	b08a      	sub	sp, #40	; 0x28
 80167d4:	af04      	add	r7, sp, #16
 80167d6:	6078      	str	r0, [r7, #4]
 80167d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80167da:	683b      	ldr	r3, [r7, #0]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d107      	bne.n	80167f0 <etharp_input+0x20>
 80167e0:	4b3d      	ldr	r3, [pc, #244]	; (80168d8 <etharp_input+0x108>)
 80167e2:	f240 228a 	movw	r2, #650	; 0x28a
 80167e6:	493d      	ldr	r1, [pc, #244]	; (80168dc <etharp_input+0x10c>)
 80167e8:	483d      	ldr	r0, [pc, #244]	; (80168e0 <etharp_input+0x110>)
 80167ea:	f002 f99f 	bl	8018b2c <iprintf>
 80167ee:	e06f      	b.n	80168d0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	685b      	ldr	r3, [r3, #4]
 80167f4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80167f6:	693b      	ldr	r3, [r7, #16]
 80167f8:	881b      	ldrh	r3, [r3, #0]
 80167fa:	b29b      	uxth	r3, r3
 80167fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016800:	d10c      	bne.n	801681c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016806:	2b06      	cmp	r3, #6
 8016808:	d108      	bne.n	801681c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801680e:	2b04      	cmp	r3, #4
 8016810:	d104      	bne.n	801681c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016812:	693b      	ldr	r3, [r7, #16]
 8016814:	885b      	ldrh	r3, [r3, #2]
 8016816:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016818:	2b08      	cmp	r3, #8
 801681a:	d003      	beq.n	8016824 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801681c:	6878      	ldr	r0, [r7, #4]
 801681e:	f7f8 fe81 	bl	800f524 <pbuf_free>
    return;
 8016822:	e055      	b.n	80168d0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016824:	693b      	ldr	r3, [r7, #16]
 8016826:	330e      	adds	r3, #14
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801682c:	693b      	ldr	r3, [r7, #16]
 801682e:	3318      	adds	r3, #24
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	3304      	adds	r3, #4
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d102      	bne.n	8016844 <etharp_input+0x74>
    for_us = 0;
 801683e:	2300      	movs	r3, #0
 8016840:	75fb      	strb	r3, [r7, #23]
 8016842:	e009      	b.n	8016858 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016844:	68ba      	ldr	r2, [r7, #8]
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	3304      	adds	r3, #4
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	429a      	cmp	r2, r3
 801684e:	bf0c      	ite	eq
 8016850:	2301      	moveq	r3, #1
 8016852:	2300      	movne	r3, #0
 8016854:	b2db      	uxtb	r3, r3
 8016856:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	f103 0208 	add.w	r2, r3, #8
 801685e:	7dfb      	ldrb	r3, [r7, #23]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d001      	beq.n	8016868 <etharp_input+0x98>
 8016864:	2301      	movs	r3, #1
 8016866:	e000      	b.n	801686a <etharp_input+0x9a>
 8016868:	2302      	movs	r3, #2
 801686a:	f107 010c 	add.w	r1, r7, #12
 801686e:	6838      	ldr	r0, [r7, #0]
 8016870:	f7ff fed8 	bl	8016624 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016874:	693b      	ldr	r3, [r7, #16]
 8016876:	88db      	ldrh	r3, [r3, #6]
 8016878:	b29b      	uxth	r3, r3
 801687a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801687e:	d003      	beq.n	8016888 <etharp_input+0xb8>
 8016880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016884:	d01e      	beq.n	80168c4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016886:	e020      	b.n	80168ca <etharp_input+0xfa>
      if (for_us) {
 8016888:	7dfb      	ldrb	r3, [r7, #23]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d01c      	beq.n	80168c8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016894:	693b      	ldr	r3, [r7, #16]
 8016896:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80168a0:	683b      	ldr	r3, [r7, #0]
 80168a2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80168a4:	693a      	ldr	r2, [r7, #16]
 80168a6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80168a8:	2102      	movs	r1, #2
 80168aa:	9103      	str	r1, [sp, #12]
 80168ac:	f107 010c 	add.w	r1, r7, #12
 80168b0:	9102      	str	r1, [sp, #8]
 80168b2:	9201      	str	r2, [sp, #4]
 80168b4:	9300      	str	r3, [sp, #0]
 80168b6:	462b      	mov	r3, r5
 80168b8:	4622      	mov	r2, r4
 80168ba:	4601      	mov	r1, r0
 80168bc:	6838      	ldr	r0, [r7, #0]
 80168be:	f000 faeb 	bl	8016e98 <etharp_raw>
      break;
 80168c2:	e001      	b.n	80168c8 <etharp_input+0xf8>
      break;
 80168c4:	bf00      	nop
 80168c6:	e000      	b.n	80168ca <etharp_input+0xfa>
      break;
 80168c8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f7f8 fe2a 	bl	800f524 <pbuf_free>
}
 80168d0:	3718      	adds	r7, #24
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bdb0      	pop	{r4, r5, r7, pc}
 80168d6:	bf00      	nop
 80168d8:	0801c128 	.word	0x0801c128
 80168dc:	0801c278 	.word	0x0801c278
 80168e0:	0801c1a0 	.word	0x0801c1a0

080168e4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b086      	sub	sp, #24
 80168e8:	af02      	add	r7, sp, #8
 80168ea:	60f8      	str	r0, [r7, #12]
 80168ec:	60b9      	str	r1, [r7, #8]
 80168ee:	4613      	mov	r3, r2
 80168f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80168f2:	79fa      	ldrb	r2, [r7, #7]
 80168f4:	4944      	ldr	r1, [pc, #272]	; (8016a08 <etharp_output_to_arp_index+0x124>)
 80168f6:	4613      	mov	r3, r2
 80168f8:	005b      	lsls	r3, r3, #1
 80168fa:	4413      	add	r3, r2
 80168fc:	00db      	lsls	r3, r3, #3
 80168fe:	440b      	add	r3, r1
 8016900:	3314      	adds	r3, #20
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	2b01      	cmp	r3, #1
 8016906:	d806      	bhi.n	8016916 <etharp_output_to_arp_index+0x32>
 8016908:	4b40      	ldr	r3, [pc, #256]	; (8016a0c <etharp_output_to_arp_index+0x128>)
 801690a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801690e:	4940      	ldr	r1, [pc, #256]	; (8016a10 <etharp_output_to_arp_index+0x12c>)
 8016910:	4840      	ldr	r0, [pc, #256]	; (8016a14 <etharp_output_to_arp_index+0x130>)
 8016912:	f002 f90b 	bl	8018b2c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016916:	79fa      	ldrb	r2, [r7, #7]
 8016918:	493b      	ldr	r1, [pc, #236]	; (8016a08 <etharp_output_to_arp_index+0x124>)
 801691a:	4613      	mov	r3, r2
 801691c:	005b      	lsls	r3, r3, #1
 801691e:	4413      	add	r3, r2
 8016920:	00db      	lsls	r3, r3, #3
 8016922:	440b      	add	r3, r1
 8016924:	3314      	adds	r3, #20
 8016926:	781b      	ldrb	r3, [r3, #0]
 8016928:	2b02      	cmp	r3, #2
 801692a:	d153      	bne.n	80169d4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801692c:	79fa      	ldrb	r2, [r7, #7]
 801692e:	4936      	ldr	r1, [pc, #216]	; (8016a08 <etharp_output_to_arp_index+0x124>)
 8016930:	4613      	mov	r3, r2
 8016932:	005b      	lsls	r3, r3, #1
 8016934:	4413      	add	r3, r2
 8016936:	00db      	lsls	r3, r3, #3
 8016938:	440b      	add	r3, r1
 801693a:	3312      	adds	r3, #18
 801693c:	881b      	ldrh	r3, [r3, #0]
 801693e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016942:	d919      	bls.n	8016978 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016944:	79fa      	ldrb	r2, [r7, #7]
 8016946:	4613      	mov	r3, r2
 8016948:	005b      	lsls	r3, r3, #1
 801694a:	4413      	add	r3, r2
 801694c:	00db      	lsls	r3, r3, #3
 801694e:	4a2e      	ldr	r2, [pc, #184]	; (8016a08 <etharp_output_to_arp_index+0x124>)
 8016950:	4413      	add	r3, r2
 8016952:	3304      	adds	r3, #4
 8016954:	4619      	mov	r1, r3
 8016956:	68f8      	ldr	r0, [r7, #12]
 8016958:	f000 fb4c 	bl	8016ff4 <etharp_request>
 801695c:	4603      	mov	r3, r0
 801695e:	2b00      	cmp	r3, #0
 8016960:	d138      	bne.n	80169d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016962:	79fa      	ldrb	r2, [r7, #7]
 8016964:	4928      	ldr	r1, [pc, #160]	; (8016a08 <etharp_output_to_arp_index+0x124>)
 8016966:	4613      	mov	r3, r2
 8016968:	005b      	lsls	r3, r3, #1
 801696a:	4413      	add	r3, r2
 801696c:	00db      	lsls	r3, r3, #3
 801696e:	440b      	add	r3, r1
 8016970:	3314      	adds	r3, #20
 8016972:	2203      	movs	r2, #3
 8016974:	701a      	strb	r2, [r3, #0]
 8016976:	e02d      	b.n	80169d4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016978:	79fa      	ldrb	r2, [r7, #7]
 801697a:	4923      	ldr	r1, [pc, #140]	; (8016a08 <etharp_output_to_arp_index+0x124>)
 801697c:	4613      	mov	r3, r2
 801697e:	005b      	lsls	r3, r3, #1
 8016980:	4413      	add	r3, r2
 8016982:	00db      	lsls	r3, r3, #3
 8016984:	440b      	add	r3, r1
 8016986:	3312      	adds	r3, #18
 8016988:	881b      	ldrh	r3, [r3, #0]
 801698a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801698e:	d321      	bcc.n	80169d4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016990:	79fa      	ldrb	r2, [r7, #7]
 8016992:	4613      	mov	r3, r2
 8016994:	005b      	lsls	r3, r3, #1
 8016996:	4413      	add	r3, r2
 8016998:	00db      	lsls	r3, r3, #3
 801699a:	4a1b      	ldr	r2, [pc, #108]	; (8016a08 <etharp_output_to_arp_index+0x124>)
 801699c:	4413      	add	r3, r2
 801699e:	1d19      	adds	r1, r3, #4
 80169a0:	79fa      	ldrb	r2, [r7, #7]
 80169a2:	4613      	mov	r3, r2
 80169a4:	005b      	lsls	r3, r3, #1
 80169a6:	4413      	add	r3, r2
 80169a8:	00db      	lsls	r3, r3, #3
 80169aa:	3308      	adds	r3, #8
 80169ac:	4a16      	ldr	r2, [pc, #88]	; (8016a08 <etharp_output_to_arp_index+0x124>)
 80169ae:	4413      	add	r3, r2
 80169b0:	3304      	adds	r3, #4
 80169b2:	461a      	mov	r2, r3
 80169b4:	68f8      	ldr	r0, [r7, #12]
 80169b6:	f000 fafb 	bl	8016fb0 <etharp_request_dst>
 80169ba:	4603      	mov	r3, r0
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d109      	bne.n	80169d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80169c0:	79fa      	ldrb	r2, [r7, #7]
 80169c2:	4911      	ldr	r1, [pc, #68]	; (8016a08 <etharp_output_to_arp_index+0x124>)
 80169c4:	4613      	mov	r3, r2
 80169c6:	005b      	lsls	r3, r3, #1
 80169c8:	4413      	add	r3, r2
 80169ca:	00db      	lsls	r3, r3, #3
 80169cc:	440b      	add	r3, r1
 80169ce:	3314      	adds	r3, #20
 80169d0:	2203      	movs	r2, #3
 80169d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80169da:	79fa      	ldrb	r2, [r7, #7]
 80169dc:	4613      	mov	r3, r2
 80169de:	005b      	lsls	r3, r3, #1
 80169e0:	4413      	add	r3, r2
 80169e2:	00db      	lsls	r3, r3, #3
 80169e4:	3308      	adds	r3, #8
 80169e6:	4a08      	ldr	r2, [pc, #32]	; (8016a08 <etharp_output_to_arp_index+0x124>)
 80169e8:	4413      	add	r3, r2
 80169ea:	3304      	adds	r3, #4
 80169ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80169f0:	9200      	str	r2, [sp, #0]
 80169f2:	460a      	mov	r2, r1
 80169f4:	68b9      	ldr	r1, [r7, #8]
 80169f6:	68f8      	ldr	r0, [r7, #12]
 80169f8:	f001 fef2 	bl	80187e0 <ethernet_output>
 80169fc:	4603      	mov	r3, r0
}
 80169fe:	4618      	mov	r0, r3
 8016a00:	3710      	adds	r7, #16
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}
 8016a06:	bf00      	nop
 8016a08:	2400410c 	.word	0x2400410c
 8016a0c:	0801c128 	.word	0x0801c128
 8016a10:	0801c298 	.word	0x0801c298
 8016a14:	0801c1a0 	.word	0x0801c1a0

08016a18 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b08a      	sub	sp, #40	; 0x28
 8016a1c:	af02      	add	r7, sp, #8
 8016a1e:	60f8      	str	r0, [r7, #12]
 8016a20:	60b9      	str	r1, [r7, #8]
 8016a22:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d106      	bne.n	8016a3c <etharp_output+0x24>
 8016a2e:	4b73      	ldr	r3, [pc, #460]	; (8016bfc <etharp_output+0x1e4>)
 8016a30:	f240 321e 	movw	r2, #798	; 0x31e
 8016a34:	4972      	ldr	r1, [pc, #456]	; (8016c00 <etharp_output+0x1e8>)
 8016a36:	4873      	ldr	r0, [pc, #460]	; (8016c04 <etharp_output+0x1ec>)
 8016a38:	f002 f878 	bl	8018b2c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016a3c:	68bb      	ldr	r3, [r7, #8]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d106      	bne.n	8016a50 <etharp_output+0x38>
 8016a42:	4b6e      	ldr	r3, [pc, #440]	; (8016bfc <etharp_output+0x1e4>)
 8016a44:	f240 321f 	movw	r2, #799	; 0x31f
 8016a48:	496f      	ldr	r1, [pc, #444]	; (8016c08 <etharp_output+0x1f0>)
 8016a4a:	486e      	ldr	r0, [pc, #440]	; (8016c04 <etharp_output+0x1ec>)
 8016a4c:	f002 f86e 	bl	8018b2c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d106      	bne.n	8016a64 <etharp_output+0x4c>
 8016a56:	4b69      	ldr	r3, [pc, #420]	; (8016bfc <etharp_output+0x1e4>)
 8016a58:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016a5c:	496b      	ldr	r1, [pc, #428]	; (8016c0c <etharp_output+0x1f4>)
 8016a5e:	4869      	ldr	r0, [pc, #420]	; (8016c04 <etharp_output+0x1ec>)
 8016a60:	f002 f864 	bl	8018b2c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	68f9      	ldr	r1, [r7, #12]
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f000 ff1e 	bl	80178ac <ip4_addr_isbroadcast_u32>
 8016a70:	4603      	mov	r3, r0
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d002      	beq.n	8016a7c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016a76:	4b66      	ldr	r3, [pc, #408]	; (8016c10 <etharp_output+0x1f8>)
 8016a78:	61fb      	str	r3, [r7, #28]
 8016a7a:	e0af      	b.n	8016bdc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a84:	2be0      	cmp	r3, #224	; 0xe0
 8016a86:	d118      	bne.n	8016aba <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016a88:	2301      	movs	r3, #1
 8016a8a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016a90:	235e      	movs	r3, #94	; 0x5e
 8016a92:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	3301      	adds	r3, #1
 8016a98:	781b      	ldrb	r3, [r3, #0]
 8016a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016a9e:	b2db      	uxtb	r3, r3
 8016aa0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	3302      	adds	r3, #2
 8016aa6:	781b      	ldrb	r3, [r3, #0]
 8016aa8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	3303      	adds	r3, #3
 8016aae:	781b      	ldrb	r3, [r3, #0]
 8016ab0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016ab2:	f107 0310 	add.w	r3, r7, #16
 8016ab6:	61fb      	str	r3, [r7, #28]
 8016ab8:	e090      	b.n	8016bdc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	681a      	ldr	r2, [r3, #0]
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	3304      	adds	r3, #4
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	405a      	eors	r2, r3
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	3308      	adds	r3, #8
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	4013      	ands	r3, r2
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d012      	beq.n	8016af8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016ad8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016adc:	4293      	cmp	r3, r2
 8016ade:	d00b      	beq.n	8016af8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	330c      	adds	r3, #12
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d003      	beq.n	8016af2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	330c      	adds	r3, #12
 8016aee:	61bb      	str	r3, [r7, #24]
 8016af0:	e002      	b.n	8016af8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016af2:	f06f 0303 	mvn.w	r3, #3
 8016af6:	e07d      	b.n	8016bf4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016af8:	4b46      	ldr	r3, [pc, #280]	; (8016c14 <etharp_output+0x1fc>)
 8016afa:	781b      	ldrb	r3, [r3, #0]
 8016afc:	4619      	mov	r1, r3
 8016afe:	4a46      	ldr	r2, [pc, #280]	; (8016c18 <etharp_output+0x200>)
 8016b00:	460b      	mov	r3, r1
 8016b02:	005b      	lsls	r3, r3, #1
 8016b04:	440b      	add	r3, r1
 8016b06:	00db      	lsls	r3, r3, #3
 8016b08:	4413      	add	r3, r2
 8016b0a:	3314      	adds	r3, #20
 8016b0c:	781b      	ldrb	r3, [r3, #0]
 8016b0e:	2b01      	cmp	r3, #1
 8016b10:	d925      	bls.n	8016b5e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016b12:	4b40      	ldr	r3, [pc, #256]	; (8016c14 <etharp_output+0x1fc>)
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	4619      	mov	r1, r3
 8016b18:	4a3f      	ldr	r2, [pc, #252]	; (8016c18 <etharp_output+0x200>)
 8016b1a:	460b      	mov	r3, r1
 8016b1c:	005b      	lsls	r3, r3, #1
 8016b1e:	440b      	add	r3, r1
 8016b20:	00db      	lsls	r3, r3, #3
 8016b22:	4413      	add	r3, r2
 8016b24:	3308      	adds	r3, #8
 8016b26:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016b28:	68fa      	ldr	r2, [r7, #12]
 8016b2a:	429a      	cmp	r2, r3
 8016b2c:	d117      	bne.n	8016b5e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016b2e:	69bb      	ldr	r3, [r7, #24]
 8016b30:	681a      	ldr	r2, [r3, #0]
 8016b32:	4b38      	ldr	r3, [pc, #224]	; (8016c14 <etharp_output+0x1fc>)
 8016b34:	781b      	ldrb	r3, [r3, #0]
 8016b36:	4618      	mov	r0, r3
 8016b38:	4937      	ldr	r1, [pc, #220]	; (8016c18 <etharp_output+0x200>)
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	005b      	lsls	r3, r3, #1
 8016b3e:	4403      	add	r3, r0
 8016b40:	00db      	lsls	r3, r3, #3
 8016b42:	440b      	add	r3, r1
 8016b44:	3304      	adds	r3, #4
 8016b46:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	d108      	bne.n	8016b5e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016b4c:	4b31      	ldr	r3, [pc, #196]	; (8016c14 <etharp_output+0x1fc>)
 8016b4e:	781b      	ldrb	r3, [r3, #0]
 8016b50:	461a      	mov	r2, r3
 8016b52:	68b9      	ldr	r1, [r7, #8]
 8016b54:	68f8      	ldr	r0, [r7, #12]
 8016b56:	f7ff fec5 	bl	80168e4 <etharp_output_to_arp_index>
 8016b5a:	4603      	mov	r3, r0
 8016b5c:	e04a      	b.n	8016bf4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016b5e:	2300      	movs	r3, #0
 8016b60:	75fb      	strb	r3, [r7, #23]
 8016b62:	e031      	b.n	8016bc8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016b64:	7dfa      	ldrb	r2, [r7, #23]
 8016b66:	492c      	ldr	r1, [pc, #176]	; (8016c18 <etharp_output+0x200>)
 8016b68:	4613      	mov	r3, r2
 8016b6a:	005b      	lsls	r3, r3, #1
 8016b6c:	4413      	add	r3, r2
 8016b6e:	00db      	lsls	r3, r3, #3
 8016b70:	440b      	add	r3, r1
 8016b72:	3314      	adds	r3, #20
 8016b74:	781b      	ldrb	r3, [r3, #0]
 8016b76:	2b01      	cmp	r3, #1
 8016b78:	d923      	bls.n	8016bc2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016b7a:	7dfa      	ldrb	r2, [r7, #23]
 8016b7c:	4926      	ldr	r1, [pc, #152]	; (8016c18 <etharp_output+0x200>)
 8016b7e:	4613      	mov	r3, r2
 8016b80:	005b      	lsls	r3, r3, #1
 8016b82:	4413      	add	r3, r2
 8016b84:	00db      	lsls	r3, r3, #3
 8016b86:	440b      	add	r3, r1
 8016b88:	3308      	adds	r3, #8
 8016b8a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016b8c:	68fa      	ldr	r2, [r7, #12]
 8016b8e:	429a      	cmp	r2, r3
 8016b90:	d117      	bne.n	8016bc2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016b92:	69bb      	ldr	r3, [r7, #24]
 8016b94:	6819      	ldr	r1, [r3, #0]
 8016b96:	7dfa      	ldrb	r2, [r7, #23]
 8016b98:	481f      	ldr	r0, [pc, #124]	; (8016c18 <etharp_output+0x200>)
 8016b9a:	4613      	mov	r3, r2
 8016b9c:	005b      	lsls	r3, r3, #1
 8016b9e:	4413      	add	r3, r2
 8016ba0:	00db      	lsls	r3, r3, #3
 8016ba2:	4403      	add	r3, r0
 8016ba4:	3304      	adds	r3, #4
 8016ba6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016ba8:	4299      	cmp	r1, r3
 8016baa:	d10a      	bne.n	8016bc2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016bac:	4a19      	ldr	r2, [pc, #100]	; (8016c14 <etharp_output+0x1fc>)
 8016bae:	7dfb      	ldrb	r3, [r7, #23]
 8016bb0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016bb2:	7dfb      	ldrb	r3, [r7, #23]
 8016bb4:	461a      	mov	r2, r3
 8016bb6:	68b9      	ldr	r1, [r7, #8]
 8016bb8:	68f8      	ldr	r0, [r7, #12]
 8016bba:	f7ff fe93 	bl	80168e4 <etharp_output_to_arp_index>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	e018      	b.n	8016bf4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016bc2:	7dfb      	ldrb	r3, [r7, #23]
 8016bc4:	3301      	adds	r3, #1
 8016bc6:	75fb      	strb	r3, [r7, #23]
 8016bc8:	7dfb      	ldrb	r3, [r7, #23]
 8016bca:	2b09      	cmp	r3, #9
 8016bcc:	d9ca      	bls.n	8016b64 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016bce:	68ba      	ldr	r2, [r7, #8]
 8016bd0:	69b9      	ldr	r1, [r7, #24]
 8016bd2:	68f8      	ldr	r0, [r7, #12]
 8016bd4:	f000 f822 	bl	8016c1c <etharp_query>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	e00b      	b.n	8016bf4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016be2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016be6:	9300      	str	r3, [sp, #0]
 8016be8:	69fb      	ldr	r3, [r7, #28]
 8016bea:	68b9      	ldr	r1, [r7, #8]
 8016bec:	68f8      	ldr	r0, [r7, #12]
 8016bee:	f001 fdf7 	bl	80187e0 <ethernet_output>
 8016bf2:	4603      	mov	r3, r0
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3720      	adds	r7, #32
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}
 8016bfc:	0801c128 	.word	0x0801c128
 8016c00:	0801c278 	.word	0x0801c278
 8016c04:	0801c1a0 	.word	0x0801c1a0
 8016c08:	0801c2c8 	.word	0x0801c2c8
 8016c0c:	0801c268 	.word	0x0801c268
 8016c10:	0801de90 	.word	0x0801de90
 8016c14:	240041fc 	.word	0x240041fc
 8016c18:	2400410c 	.word	0x2400410c

08016c1c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b08c      	sub	sp, #48	; 0x30
 8016c20:	af02      	add	r7, sp, #8
 8016c22:	60f8      	str	r0, [r7, #12]
 8016c24:	60b9      	str	r1, [r7, #8]
 8016c26:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	3326      	adds	r3, #38	; 0x26
 8016c2c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016c2e:	23ff      	movs	r3, #255	; 0xff
 8016c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016c34:	2300      	movs	r3, #0
 8016c36:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	68f9      	ldr	r1, [r7, #12]
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f000 fe34 	bl	80178ac <ip4_addr_isbroadcast_u32>
 8016c44:	4603      	mov	r3, r0
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d10c      	bne.n	8016c64 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016c4a:	68bb      	ldr	r3, [r7, #8]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c52:	2be0      	cmp	r3, #224	; 0xe0
 8016c54:	d006      	beq.n	8016c64 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016c56:	68bb      	ldr	r3, [r7, #8]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d003      	beq.n	8016c64 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016c5c:	68bb      	ldr	r3, [r7, #8]
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d102      	bne.n	8016c6a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016c64:	f06f 030f 	mvn.w	r3, #15
 8016c68:	e101      	b.n	8016e6e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016c6a:	68fa      	ldr	r2, [r7, #12]
 8016c6c:	2101      	movs	r1, #1
 8016c6e:	68b8      	ldr	r0, [r7, #8]
 8016c70:	f7ff fb60 	bl	8016334 <etharp_find_entry>
 8016c74:	4603      	mov	r3, r0
 8016c76:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016c78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	da02      	bge.n	8016c86 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016c80:	8a7b      	ldrh	r3, [r7, #18]
 8016c82:	b25b      	sxtb	r3, r3
 8016c84:	e0f3      	b.n	8016e6e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016c86:	8a7b      	ldrh	r3, [r7, #18]
 8016c88:	2b7e      	cmp	r3, #126	; 0x7e
 8016c8a:	d906      	bls.n	8016c9a <etharp_query+0x7e>
 8016c8c:	4b7a      	ldr	r3, [pc, #488]	; (8016e78 <etharp_query+0x25c>)
 8016c8e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016c92:	497a      	ldr	r1, [pc, #488]	; (8016e7c <etharp_query+0x260>)
 8016c94:	487a      	ldr	r0, [pc, #488]	; (8016e80 <etharp_query+0x264>)
 8016c96:	f001 ff49 	bl	8018b2c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016c9a:	8a7b      	ldrh	r3, [r7, #18]
 8016c9c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016c9e:	7c7a      	ldrb	r2, [r7, #17]
 8016ca0:	4978      	ldr	r1, [pc, #480]	; (8016e84 <etharp_query+0x268>)
 8016ca2:	4613      	mov	r3, r2
 8016ca4:	005b      	lsls	r3, r3, #1
 8016ca6:	4413      	add	r3, r2
 8016ca8:	00db      	lsls	r3, r3, #3
 8016caa:	440b      	add	r3, r1
 8016cac:	3314      	adds	r3, #20
 8016cae:	781b      	ldrb	r3, [r3, #0]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d115      	bne.n	8016ce0 <etharp_query+0xc4>
    is_new_entry = 1;
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016cb8:	7c7a      	ldrb	r2, [r7, #17]
 8016cba:	4972      	ldr	r1, [pc, #456]	; (8016e84 <etharp_query+0x268>)
 8016cbc:	4613      	mov	r3, r2
 8016cbe:	005b      	lsls	r3, r3, #1
 8016cc0:	4413      	add	r3, r2
 8016cc2:	00db      	lsls	r3, r3, #3
 8016cc4:	440b      	add	r3, r1
 8016cc6:	3314      	adds	r3, #20
 8016cc8:	2201      	movs	r2, #1
 8016cca:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016ccc:	7c7a      	ldrb	r2, [r7, #17]
 8016cce:	496d      	ldr	r1, [pc, #436]	; (8016e84 <etharp_query+0x268>)
 8016cd0:	4613      	mov	r3, r2
 8016cd2:	005b      	lsls	r3, r3, #1
 8016cd4:	4413      	add	r3, r2
 8016cd6:	00db      	lsls	r3, r3, #3
 8016cd8:	440b      	add	r3, r1
 8016cda:	3308      	adds	r3, #8
 8016cdc:	68fa      	ldr	r2, [r7, #12]
 8016cde:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016ce0:	7c7a      	ldrb	r2, [r7, #17]
 8016ce2:	4968      	ldr	r1, [pc, #416]	; (8016e84 <etharp_query+0x268>)
 8016ce4:	4613      	mov	r3, r2
 8016ce6:	005b      	lsls	r3, r3, #1
 8016ce8:	4413      	add	r3, r2
 8016cea:	00db      	lsls	r3, r3, #3
 8016cec:	440b      	add	r3, r1
 8016cee:	3314      	adds	r3, #20
 8016cf0:	781b      	ldrb	r3, [r3, #0]
 8016cf2:	2b01      	cmp	r3, #1
 8016cf4:	d011      	beq.n	8016d1a <etharp_query+0xfe>
 8016cf6:	7c7a      	ldrb	r2, [r7, #17]
 8016cf8:	4962      	ldr	r1, [pc, #392]	; (8016e84 <etharp_query+0x268>)
 8016cfa:	4613      	mov	r3, r2
 8016cfc:	005b      	lsls	r3, r3, #1
 8016cfe:	4413      	add	r3, r2
 8016d00:	00db      	lsls	r3, r3, #3
 8016d02:	440b      	add	r3, r1
 8016d04:	3314      	adds	r3, #20
 8016d06:	781b      	ldrb	r3, [r3, #0]
 8016d08:	2b01      	cmp	r3, #1
 8016d0a:	d806      	bhi.n	8016d1a <etharp_query+0xfe>
 8016d0c:	4b5a      	ldr	r3, [pc, #360]	; (8016e78 <etharp_query+0x25c>)
 8016d0e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016d12:	495d      	ldr	r1, [pc, #372]	; (8016e88 <etharp_query+0x26c>)
 8016d14:	485a      	ldr	r0, [pc, #360]	; (8016e80 <etharp_query+0x264>)
 8016d16:	f001 ff09 	bl	8018b2c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016d1a:	6a3b      	ldr	r3, [r7, #32]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d102      	bne.n	8016d26 <etharp_query+0x10a>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d10c      	bne.n	8016d40 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016d26:	68b9      	ldr	r1, [r7, #8]
 8016d28:	68f8      	ldr	r0, [r7, #12]
 8016d2a:	f000 f963 	bl	8016ff4 <etharp_request>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d102      	bne.n	8016d40 <etharp_query+0x124>
      return result;
 8016d3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016d3e:	e096      	b.n	8016e6e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d106      	bne.n	8016d54 <etharp_query+0x138>
 8016d46:	4b4c      	ldr	r3, [pc, #304]	; (8016e78 <etharp_query+0x25c>)
 8016d48:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016d4c:	494f      	ldr	r1, [pc, #316]	; (8016e8c <etharp_query+0x270>)
 8016d4e:	484c      	ldr	r0, [pc, #304]	; (8016e80 <etharp_query+0x264>)
 8016d50:	f001 feec 	bl	8018b2c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016d54:	7c7a      	ldrb	r2, [r7, #17]
 8016d56:	494b      	ldr	r1, [pc, #300]	; (8016e84 <etharp_query+0x268>)
 8016d58:	4613      	mov	r3, r2
 8016d5a:	005b      	lsls	r3, r3, #1
 8016d5c:	4413      	add	r3, r2
 8016d5e:	00db      	lsls	r3, r3, #3
 8016d60:	440b      	add	r3, r1
 8016d62:	3314      	adds	r3, #20
 8016d64:	781b      	ldrb	r3, [r3, #0]
 8016d66:	2b01      	cmp	r3, #1
 8016d68:	d917      	bls.n	8016d9a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016d6a:	4a49      	ldr	r2, [pc, #292]	; (8016e90 <etharp_query+0x274>)
 8016d6c:	7c7b      	ldrb	r3, [r7, #17]
 8016d6e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016d70:	7c7a      	ldrb	r2, [r7, #17]
 8016d72:	4613      	mov	r3, r2
 8016d74:	005b      	lsls	r3, r3, #1
 8016d76:	4413      	add	r3, r2
 8016d78:	00db      	lsls	r3, r3, #3
 8016d7a:	3308      	adds	r3, #8
 8016d7c:	4a41      	ldr	r2, [pc, #260]	; (8016e84 <etharp_query+0x268>)
 8016d7e:	4413      	add	r3, r2
 8016d80:	3304      	adds	r3, #4
 8016d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016d86:	9200      	str	r2, [sp, #0]
 8016d88:	697a      	ldr	r2, [r7, #20]
 8016d8a:	6879      	ldr	r1, [r7, #4]
 8016d8c:	68f8      	ldr	r0, [r7, #12]
 8016d8e:	f001 fd27 	bl	80187e0 <ethernet_output>
 8016d92:	4603      	mov	r3, r0
 8016d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016d98:	e067      	b.n	8016e6a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016d9a:	7c7a      	ldrb	r2, [r7, #17]
 8016d9c:	4939      	ldr	r1, [pc, #228]	; (8016e84 <etharp_query+0x268>)
 8016d9e:	4613      	mov	r3, r2
 8016da0:	005b      	lsls	r3, r3, #1
 8016da2:	4413      	add	r3, r2
 8016da4:	00db      	lsls	r3, r3, #3
 8016da6:	440b      	add	r3, r1
 8016da8:	3314      	adds	r3, #20
 8016daa:	781b      	ldrb	r3, [r3, #0]
 8016dac:	2b01      	cmp	r3, #1
 8016dae:	d15c      	bne.n	8016e6a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016db0:	2300      	movs	r3, #0
 8016db2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016db8:	e01c      	b.n	8016df4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016dba:	69fb      	ldr	r3, [r7, #28]
 8016dbc:	895a      	ldrh	r2, [r3, #10]
 8016dbe:	69fb      	ldr	r3, [r7, #28]
 8016dc0:	891b      	ldrh	r3, [r3, #8]
 8016dc2:	429a      	cmp	r2, r3
 8016dc4:	d10a      	bne.n	8016ddc <etharp_query+0x1c0>
 8016dc6:	69fb      	ldr	r3, [r7, #28]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d006      	beq.n	8016ddc <etharp_query+0x1c0>
 8016dce:	4b2a      	ldr	r3, [pc, #168]	; (8016e78 <etharp_query+0x25c>)
 8016dd0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016dd4:	492f      	ldr	r1, [pc, #188]	; (8016e94 <etharp_query+0x278>)
 8016dd6:	482a      	ldr	r0, [pc, #168]	; (8016e80 <etharp_query+0x264>)
 8016dd8:	f001 fea8 	bl	8018b2c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016ddc:	69fb      	ldr	r3, [r7, #28]
 8016dde:	7b1b      	ldrb	r3, [r3, #12]
 8016de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d002      	beq.n	8016dee <etharp_query+0x1d2>
        copy_needed = 1;
 8016de8:	2301      	movs	r3, #1
 8016dea:	61bb      	str	r3, [r7, #24]
        break;
 8016dec:	e005      	b.n	8016dfa <etharp_query+0x1de>
      }
      p = p->next;
 8016dee:	69fb      	ldr	r3, [r7, #28]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016df4:	69fb      	ldr	r3, [r7, #28]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d1df      	bne.n	8016dba <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016dfa:	69bb      	ldr	r3, [r7, #24]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d007      	beq.n	8016e10 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016e00:	687a      	ldr	r2, [r7, #4]
 8016e02:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016e06:	200e      	movs	r0, #14
 8016e08:	f7f8 fe04 	bl	800fa14 <pbuf_clone>
 8016e0c:	61f8      	str	r0, [r7, #28]
 8016e0e:	e004      	b.n	8016e1a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016e14:	69f8      	ldr	r0, [r7, #28]
 8016e16:	f7f8 fc2b 	bl	800f670 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016e1a:	69fb      	ldr	r3, [r7, #28]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d021      	beq.n	8016e64 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016e20:	7c7a      	ldrb	r2, [r7, #17]
 8016e22:	4918      	ldr	r1, [pc, #96]	; (8016e84 <etharp_query+0x268>)
 8016e24:	4613      	mov	r3, r2
 8016e26:	005b      	lsls	r3, r3, #1
 8016e28:	4413      	add	r3, r2
 8016e2a:	00db      	lsls	r3, r3, #3
 8016e2c:	440b      	add	r3, r1
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d00a      	beq.n	8016e4a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016e34:	7c7a      	ldrb	r2, [r7, #17]
 8016e36:	4913      	ldr	r1, [pc, #76]	; (8016e84 <etharp_query+0x268>)
 8016e38:	4613      	mov	r3, r2
 8016e3a:	005b      	lsls	r3, r3, #1
 8016e3c:	4413      	add	r3, r2
 8016e3e:	00db      	lsls	r3, r3, #3
 8016e40:	440b      	add	r3, r1
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	4618      	mov	r0, r3
 8016e46:	f7f8 fb6d 	bl	800f524 <pbuf_free>
      }
      arp_table[i].q = p;
 8016e4a:	7c7a      	ldrb	r2, [r7, #17]
 8016e4c:	490d      	ldr	r1, [pc, #52]	; (8016e84 <etharp_query+0x268>)
 8016e4e:	4613      	mov	r3, r2
 8016e50:	005b      	lsls	r3, r3, #1
 8016e52:	4413      	add	r3, r2
 8016e54:	00db      	lsls	r3, r3, #3
 8016e56:	440b      	add	r3, r1
 8016e58:	69fa      	ldr	r2, [r7, #28]
 8016e5a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016e62:	e002      	b.n	8016e6a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016e64:	23ff      	movs	r3, #255	; 0xff
 8016e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016e6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	3728      	adds	r7, #40	; 0x28
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}
 8016e76:	bf00      	nop
 8016e78:	0801c128 	.word	0x0801c128
 8016e7c:	0801c2d4 	.word	0x0801c2d4
 8016e80:	0801c1a0 	.word	0x0801c1a0
 8016e84:	2400410c 	.word	0x2400410c
 8016e88:	0801c2e4 	.word	0x0801c2e4
 8016e8c:	0801c2c8 	.word	0x0801c2c8
 8016e90:	240041fc 	.word	0x240041fc
 8016e94:	0801c30c 	.word	0x0801c30c

08016e98 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b08a      	sub	sp, #40	; 0x28
 8016e9c:	af02      	add	r7, sp, #8
 8016e9e:	60f8      	str	r0, [r7, #12]
 8016ea0:	60b9      	str	r1, [r7, #8]
 8016ea2:	607a      	str	r2, [r7, #4]
 8016ea4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d106      	bne.n	8016ebe <etharp_raw+0x26>
 8016eb0:	4b3a      	ldr	r3, [pc, #232]	; (8016f9c <etharp_raw+0x104>)
 8016eb2:	f240 4257 	movw	r2, #1111	; 0x457
 8016eb6:	493a      	ldr	r1, [pc, #232]	; (8016fa0 <etharp_raw+0x108>)
 8016eb8:	483a      	ldr	r0, [pc, #232]	; (8016fa4 <etharp_raw+0x10c>)
 8016eba:	f001 fe37 	bl	8018b2c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016ebe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ec2:	211c      	movs	r1, #28
 8016ec4:	200e      	movs	r0, #14
 8016ec6:	f7f8 f849 	bl	800ef5c <pbuf_alloc>
 8016eca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016ecc:	69bb      	ldr	r3, [r7, #24]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d102      	bne.n	8016ed8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8016ed6:	e05d      	b.n	8016f94 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016ed8:	69bb      	ldr	r3, [r7, #24]
 8016eda:	895b      	ldrh	r3, [r3, #10]
 8016edc:	2b1b      	cmp	r3, #27
 8016ede:	d806      	bhi.n	8016eee <etharp_raw+0x56>
 8016ee0:	4b2e      	ldr	r3, [pc, #184]	; (8016f9c <etharp_raw+0x104>)
 8016ee2:	f240 4262 	movw	r2, #1122	; 0x462
 8016ee6:	4930      	ldr	r1, [pc, #192]	; (8016fa8 <etharp_raw+0x110>)
 8016ee8:	482e      	ldr	r0, [pc, #184]	; (8016fa4 <etharp_raw+0x10c>)
 8016eea:	f001 fe1f 	bl	8018b2c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016eee:	69bb      	ldr	r3, [r7, #24]
 8016ef0:	685b      	ldr	r3, [r3, #4]
 8016ef2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016ef4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f7f6 fe6a 	bl	800dbd0 <lwip_htons>
 8016efc:	4603      	mov	r3, r0
 8016efe:	461a      	mov	r2, r3
 8016f00:	697b      	ldr	r3, [r7, #20]
 8016f02:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016f0a:	2b06      	cmp	r3, #6
 8016f0c:	d006      	beq.n	8016f1c <etharp_raw+0x84>
 8016f0e:	4b23      	ldr	r3, [pc, #140]	; (8016f9c <etharp_raw+0x104>)
 8016f10:	f240 4269 	movw	r2, #1129	; 0x469
 8016f14:	4925      	ldr	r1, [pc, #148]	; (8016fac <etharp_raw+0x114>)
 8016f16:	4823      	ldr	r0, [pc, #140]	; (8016fa4 <etharp_raw+0x10c>)
 8016f18:	f001 fe08 	bl	8018b2c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016f1c:	697b      	ldr	r3, [r7, #20]
 8016f1e:	3308      	adds	r3, #8
 8016f20:	2206      	movs	r2, #6
 8016f22:	6839      	ldr	r1, [r7, #0]
 8016f24:	4618      	mov	r0, r3
 8016f26:	f001 fdeb 	bl	8018b00 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016f2a:	697b      	ldr	r3, [r7, #20]
 8016f2c:	3312      	adds	r3, #18
 8016f2e:	2206      	movs	r2, #6
 8016f30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016f32:	4618      	mov	r0, r3
 8016f34:	f001 fde4 	bl	8018b00 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016f38:	697b      	ldr	r3, [r7, #20]
 8016f3a:	330e      	adds	r3, #14
 8016f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016f3e:	6812      	ldr	r2, [r2, #0]
 8016f40:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016f42:	697b      	ldr	r3, [r7, #20]
 8016f44:	3318      	adds	r3, #24
 8016f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f48:	6812      	ldr	r2, [r2, #0]
 8016f4a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016f4c:	697b      	ldr	r3, [r7, #20]
 8016f4e:	2200      	movs	r2, #0
 8016f50:	701a      	strb	r2, [r3, #0]
 8016f52:	2200      	movs	r2, #0
 8016f54:	f042 0201 	orr.w	r2, r2, #1
 8016f58:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016f5a:	697b      	ldr	r3, [r7, #20]
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	f042 0208 	orr.w	r2, r2, #8
 8016f62:	709a      	strb	r2, [r3, #2]
 8016f64:	2200      	movs	r2, #0
 8016f66:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016f68:	697b      	ldr	r3, [r7, #20]
 8016f6a:	2206      	movs	r2, #6
 8016f6c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016f6e:	697b      	ldr	r3, [r7, #20]
 8016f70:	2204      	movs	r2, #4
 8016f72:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016f74:	f640 0306 	movw	r3, #2054	; 0x806
 8016f78:	9300      	str	r3, [sp, #0]
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	68ba      	ldr	r2, [r7, #8]
 8016f7e:	69b9      	ldr	r1, [r7, #24]
 8016f80:	68f8      	ldr	r0, [r7, #12]
 8016f82:	f001 fc2d 	bl	80187e0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016f86:	69b8      	ldr	r0, [r7, #24]
 8016f88:	f7f8 facc 	bl	800f524 <pbuf_free>
  p = NULL;
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016f90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016f94:	4618      	mov	r0, r3
 8016f96:	3720      	adds	r7, #32
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}
 8016f9c:	0801c128 	.word	0x0801c128
 8016fa0:	0801c278 	.word	0x0801c278
 8016fa4:	0801c1a0 	.word	0x0801c1a0
 8016fa8:	0801c328 	.word	0x0801c328
 8016fac:	0801c35c 	.word	0x0801c35c

08016fb0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b088      	sub	sp, #32
 8016fb4:	af04      	add	r7, sp, #16
 8016fb6:	60f8      	str	r0, [r7, #12]
 8016fb8:	60b9      	str	r1, [r7, #8]
 8016fba:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016fcc:	2201      	movs	r2, #1
 8016fce:	9203      	str	r2, [sp, #12]
 8016fd0:	68ba      	ldr	r2, [r7, #8]
 8016fd2:	9202      	str	r2, [sp, #8]
 8016fd4:	4a06      	ldr	r2, [pc, #24]	; (8016ff0 <etharp_request_dst+0x40>)
 8016fd6:	9201      	str	r2, [sp, #4]
 8016fd8:	9300      	str	r3, [sp, #0]
 8016fda:	4603      	mov	r3, r0
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	68f8      	ldr	r0, [r7, #12]
 8016fe0:	f7ff ff5a 	bl	8016e98 <etharp_raw>
 8016fe4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	3710      	adds	r7, #16
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}
 8016fee:	bf00      	nop
 8016ff0:	0801de98 	.word	0x0801de98

08016ff4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b082      	sub	sp, #8
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
 8016ffc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016ffe:	4a05      	ldr	r2, [pc, #20]	; (8017014 <etharp_request+0x20>)
 8017000:	6839      	ldr	r1, [r7, #0]
 8017002:	6878      	ldr	r0, [r7, #4]
 8017004:	f7ff ffd4 	bl	8016fb0 <etharp_request_dst>
 8017008:	4603      	mov	r3, r0
}
 801700a:	4618      	mov	r0, r3
 801700c:	3708      	adds	r7, #8
 801700e:	46bd      	mov	sp, r7
 8017010:	bd80      	pop	{r7, pc}
 8017012:	bf00      	nop
 8017014:	0801de90 	.word	0x0801de90

08017018 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b08e      	sub	sp, #56	; 0x38
 801701c:	af04      	add	r7, sp, #16
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017022:	4b87      	ldr	r3, [pc, #540]	; (8017240 <icmp_input+0x228>)
 8017024:	689b      	ldr	r3, [r3, #8]
 8017026:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801702a:	781b      	ldrb	r3, [r3, #0]
 801702c:	f003 030f 	and.w	r3, r3, #15
 8017030:	b2db      	uxtb	r3, r3
 8017032:	009b      	lsls	r3, r3, #2
 8017034:	b2db      	uxtb	r3, r3
 8017036:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017038:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801703a:	2b13      	cmp	r3, #19
 801703c:	f240 80e8 	bls.w	8017210 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	895b      	ldrh	r3, [r3, #10]
 8017044:	2b03      	cmp	r3, #3
 8017046:	f240 80e5 	bls.w	8017214 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	685b      	ldr	r3, [r3, #4]
 801704e:	781b      	ldrb	r3, [r3, #0]
 8017050:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017054:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017058:	2b00      	cmp	r3, #0
 801705a:	f000 80d2 	beq.w	8017202 <icmp_input+0x1ea>
 801705e:	2b08      	cmp	r3, #8
 8017060:	f040 80d2 	bne.w	8017208 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017064:	4b77      	ldr	r3, [pc, #476]	; (8017244 <icmp_input+0x22c>)
 8017066:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017068:	4b75      	ldr	r3, [pc, #468]	; (8017240 <icmp_input+0x228>)
 801706a:	695b      	ldr	r3, [r3, #20]
 801706c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017070:	2be0      	cmp	r3, #224	; 0xe0
 8017072:	f000 80d6 	beq.w	8017222 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017076:	4b72      	ldr	r3, [pc, #456]	; (8017240 <icmp_input+0x228>)
 8017078:	695b      	ldr	r3, [r3, #20]
 801707a:	4a71      	ldr	r2, [pc, #452]	; (8017240 <icmp_input+0x228>)
 801707c:	6812      	ldr	r2, [r2, #0]
 801707e:	4611      	mov	r1, r2
 8017080:	4618      	mov	r0, r3
 8017082:	f000 fc13 	bl	80178ac <ip4_addr_isbroadcast_u32>
 8017086:	4603      	mov	r3, r0
 8017088:	2b00      	cmp	r3, #0
 801708a:	f040 80cc 	bne.w	8017226 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	891b      	ldrh	r3, [r3, #8]
 8017092:	2b07      	cmp	r3, #7
 8017094:	f240 80c0 	bls.w	8017218 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017098:	6878      	ldr	r0, [r7, #4]
 801709a:	f7f6 fe36 	bl	800dd0a <inet_chksum_pbuf>
 801709e:	4603      	mov	r3, r0
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d003      	beq.n	80170ac <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f7f8 fa3d 	bl	800f524 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80170aa:	e0c5      	b.n	8017238 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80170ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170ae:	330e      	adds	r3, #14
 80170b0:	4619      	mov	r1, r3
 80170b2:	6878      	ldr	r0, [r7, #4]
 80170b4:	f7f8 f9a0 	bl	800f3f8 <pbuf_add_header>
 80170b8:	4603      	mov	r3, r0
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d04b      	beq.n	8017156 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	891a      	ldrh	r2, [r3, #8]
 80170c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170c4:	4413      	add	r3, r2
 80170c6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	891b      	ldrh	r3, [r3, #8]
 80170cc:	8b7a      	ldrh	r2, [r7, #26]
 80170ce:	429a      	cmp	r2, r3
 80170d0:	f0c0 80ab 	bcc.w	801722a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80170d4:	8b7b      	ldrh	r3, [r7, #26]
 80170d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80170da:	4619      	mov	r1, r3
 80170dc:	200e      	movs	r0, #14
 80170de:	f7f7 ff3d 	bl	800ef5c <pbuf_alloc>
 80170e2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	f000 80a1 	beq.w	801722e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80170ec:	697b      	ldr	r3, [r7, #20]
 80170ee:	895b      	ldrh	r3, [r3, #10]
 80170f0:	461a      	mov	r2, r3
 80170f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170f4:	3308      	adds	r3, #8
 80170f6:	429a      	cmp	r2, r3
 80170f8:	d203      	bcs.n	8017102 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80170fa:	6978      	ldr	r0, [r7, #20]
 80170fc:	f7f8 fa12 	bl	800f524 <pbuf_free>
          goto icmperr;
 8017100:	e096      	b.n	8017230 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	685b      	ldr	r3, [r3, #4]
 8017106:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801710a:	4618      	mov	r0, r3
 801710c:	f001 fcf8 	bl	8018b00 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017112:	4619      	mov	r1, r3
 8017114:	6978      	ldr	r0, [r7, #20]
 8017116:	f7f8 f97f 	bl	800f418 <pbuf_remove_header>
 801711a:	4603      	mov	r3, r0
 801711c:	2b00      	cmp	r3, #0
 801711e:	d009      	beq.n	8017134 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017120:	4b49      	ldr	r3, [pc, #292]	; (8017248 <icmp_input+0x230>)
 8017122:	22b6      	movs	r2, #182	; 0xb6
 8017124:	4949      	ldr	r1, [pc, #292]	; (801724c <icmp_input+0x234>)
 8017126:	484a      	ldr	r0, [pc, #296]	; (8017250 <icmp_input+0x238>)
 8017128:	f001 fd00 	bl	8018b2c <iprintf>
          pbuf_free(r);
 801712c:	6978      	ldr	r0, [r7, #20]
 801712e:	f7f8 f9f9 	bl	800f524 <pbuf_free>
          goto icmperr;
 8017132:	e07d      	b.n	8017230 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017134:	6879      	ldr	r1, [r7, #4]
 8017136:	6978      	ldr	r0, [r7, #20]
 8017138:	f7f8 fb28 	bl	800f78c <pbuf_copy>
 801713c:	4603      	mov	r3, r0
 801713e:	2b00      	cmp	r3, #0
 8017140:	d003      	beq.n	801714a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017142:	6978      	ldr	r0, [r7, #20]
 8017144:	f7f8 f9ee 	bl	800f524 <pbuf_free>
          goto icmperr;
 8017148:	e072      	b.n	8017230 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801714a:	6878      	ldr	r0, [r7, #4]
 801714c:	f7f8 f9ea 	bl	800f524 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	607b      	str	r3, [r7, #4]
 8017154:	e00f      	b.n	8017176 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017156:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017158:	330e      	adds	r3, #14
 801715a:	4619      	mov	r1, r3
 801715c:	6878      	ldr	r0, [r7, #4]
 801715e:	f7f8 f95b 	bl	800f418 <pbuf_remove_header>
 8017162:	4603      	mov	r3, r0
 8017164:	2b00      	cmp	r3, #0
 8017166:	d006      	beq.n	8017176 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017168:	4b37      	ldr	r3, [pc, #220]	; (8017248 <icmp_input+0x230>)
 801716a:	22c7      	movs	r2, #199	; 0xc7
 801716c:	4939      	ldr	r1, [pc, #228]	; (8017254 <icmp_input+0x23c>)
 801716e:	4838      	ldr	r0, [pc, #224]	; (8017250 <icmp_input+0x238>)
 8017170:	f001 fcdc 	bl	8018b2c <iprintf>
          goto icmperr;
 8017174:	e05c      	b.n	8017230 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	685b      	ldr	r3, [r3, #4]
 801717a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801717c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801717e:	4619      	mov	r1, r3
 8017180:	6878      	ldr	r0, [r7, #4]
 8017182:	f7f8 f939 	bl	800f3f8 <pbuf_add_header>
 8017186:	4603      	mov	r3, r0
 8017188:	2b00      	cmp	r3, #0
 801718a:	d13c      	bne.n	8017206 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	685b      	ldr	r3, [r3, #4]
 8017190:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017192:	69fb      	ldr	r3, [r7, #28]
 8017194:	681a      	ldr	r2, [r3, #0]
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801719a:	4b29      	ldr	r3, [pc, #164]	; (8017240 <icmp_input+0x228>)
 801719c:	691a      	ldr	r2, [r3, #16]
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80171a2:	693b      	ldr	r3, [r7, #16]
 80171a4:	2200      	movs	r2, #0
 80171a6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80171a8:	693b      	ldr	r3, [r7, #16]
 80171aa:	885b      	ldrh	r3, [r3, #2]
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80171b2:	4293      	cmp	r3, r2
 80171b4:	d907      	bls.n	80171c6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80171b6:	693b      	ldr	r3, [r7, #16]
 80171b8:	885b      	ldrh	r3, [r3, #2]
 80171ba:	b29b      	uxth	r3, r3
 80171bc:	3309      	adds	r3, #9
 80171be:	b29a      	uxth	r2, r3
 80171c0:	693b      	ldr	r3, [r7, #16]
 80171c2:	805a      	strh	r2, [r3, #2]
 80171c4:	e006      	b.n	80171d4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80171c6:	693b      	ldr	r3, [r7, #16]
 80171c8:	885b      	ldrh	r3, [r3, #2]
 80171ca:	b29b      	uxth	r3, r3
 80171cc:	3308      	adds	r3, #8
 80171ce:	b29a      	uxth	r2, r3
 80171d0:	693b      	ldr	r3, [r7, #16]
 80171d2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	22ff      	movs	r2, #255	; 0xff
 80171d8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	2200      	movs	r2, #0
 80171de:	729a      	strb	r2, [r3, #10]
 80171e0:	2200      	movs	r2, #0
 80171e2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80171e4:	683b      	ldr	r3, [r7, #0]
 80171e6:	9302      	str	r3, [sp, #8]
 80171e8:	2301      	movs	r3, #1
 80171ea:	9301      	str	r3, [sp, #4]
 80171ec:	2300      	movs	r3, #0
 80171ee:	9300      	str	r3, [sp, #0]
 80171f0:	23ff      	movs	r3, #255	; 0xff
 80171f2:	2200      	movs	r2, #0
 80171f4:	69f9      	ldr	r1, [r7, #28]
 80171f6:	6878      	ldr	r0, [r7, #4]
 80171f8:	f000 fa80 	bl	80176fc <ip4_output_if>
 80171fc:	4603      	mov	r3, r0
 80171fe:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017200:	e001      	b.n	8017206 <icmp_input+0x1ee>
      break;
 8017202:	bf00      	nop
 8017204:	e000      	b.n	8017208 <icmp_input+0x1f0>
      break;
 8017206:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017208:	6878      	ldr	r0, [r7, #4]
 801720a:	f7f8 f98b 	bl	800f524 <pbuf_free>
  return;
 801720e:	e013      	b.n	8017238 <icmp_input+0x220>
    goto lenerr;
 8017210:	bf00      	nop
 8017212:	e002      	b.n	801721a <icmp_input+0x202>
    goto lenerr;
 8017214:	bf00      	nop
 8017216:	e000      	b.n	801721a <icmp_input+0x202>
        goto lenerr;
 8017218:	bf00      	nop
lenerr:
  pbuf_free(p);
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f7f8 f982 	bl	800f524 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017220:	e00a      	b.n	8017238 <icmp_input+0x220>
        goto icmperr;
 8017222:	bf00      	nop
 8017224:	e004      	b.n	8017230 <icmp_input+0x218>
        goto icmperr;
 8017226:	bf00      	nop
 8017228:	e002      	b.n	8017230 <icmp_input+0x218>
          goto icmperr;
 801722a:	bf00      	nop
 801722c:	e000      	b.n	8017230 <icmp_input+0x218>
          goto icmperr;
 801722e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f7f8 f977 	bl	800f524 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017236:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017238:	3728      	adds	r7, #40	; 0x28
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
 801723e:	bf00      	nop
 8017240:	24004740 	.word	0x24004740
 8017244:	24004754 	.word	0x24004754
 8017248:	0801c3a0 	.word	0x0801c3a0
 801724c:	0801c3d8 	.word	0x0801c3d8
 8017250:	0801c410 	.word	0x0801c410
 8017254:	0801c438 	.word	0x0801c438

08017258 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b082      	sub	sp, #8
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
 8017260:	460b      	mov	r3, r1
 8017262:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017264:	78fb      	ldrb	r3, [r7, #3]
 8017266:	461a      	mov	r2, r3
 8017268:	2103      	movs	r1, #3
 801726a:	6878      	ldr	r0, [r7, #4]
 801726c:	f000 f814 	bl	8017298 <icmp_send_response>
}
 8017270:	bf00      	nop
 8017272:	3708      	adds	r7, #8
 8017274:	46bd      	mov	sp, r7
 8017276:	bd80      	pop	{r7, pc}

08017278 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b082      	sub	sp, #8
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
 8017280:	460b      	mov	r3, r1
 8017282:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017284:	78fb      	ldrb	r3, [r7, #3]
 8017286:	461a      	mov	r2, r3
 8017288:	210b      	movs	r1, #11
 801728a:	6878      	ldr	r0, [r7, #4]
 801728c:	f000 f804 	bl	8017298 <icmp_send_response>
}
 8017290:	bf00      	nop
 8017292:	3708      	adds	r7, #8
 8017294:	46bd      	mov	sp, r7
 8017296:	bd80      	pop	{r7, pc}

08017298 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b08c      	sub	sp, #48	; 0x30
 801729c:	af04      	add	r7, sp, #16
 801729e:	6078      	str	r0, [r7, #4]
 80172a0:	460b      	mov	r3, r1
 80172a2:	70fb      	strb	r3, [r7, #3]
 80172a4:	4613      	mov	r3, r2
 80172a6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80172a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80172ac:	2124      	movs	r1, #36	; 0x24
 80172ae:	2022      	movs	r0, #34	; 0x22
 80172b0:	f7f7 fe54 	bl	800ef5c <pbuf_alloc>
 80172b4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80172b6:	69fb      	ldr	r3, [r7, #28]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d056      	beq.n	801736a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80172bc:	69fb      	ldr	r3, [r7, #28]
 80172be:	895b      	ldrh	r3, [r3, #10]
 80172c0:	2b23      	cmp	r3, #35	; 0x23
 80172c2:	d806      	bhi.n	80172d2 <icmp_send_response+0x3a>
 80172c4:	4b2b      	ldr	r3, [pc, #172]	; (8017374 <icmp_send_response+0xdc>)
 80172c6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80172ca:	492b      	ldr	r1, [pc, #172]	; (8017378 <icmp_send_response+0xe0>)
 80172cc:	482b      	ldr	r0, [pc, #172]	; (801737c <icmp_send_response+0xe4>)
 80172ce:	f001 fc2d 	bl	8018b2c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	685b      	ldr	r3, [r3, #4]
 80172d6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80172d8:	69fb      	ldr	r3, [r7, #28]
 80172da:	685b      	ldr	r3, [r3, #4]
 80172dc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80172de:	697b      	ldr	r3, [r7, #20]
 80172e0:	78fa      	ldrb	r2, [r7, #3]
 80172e2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80172e4:	697b      	ldr	r3, [r7, #20]
 80172e6:	78ba      	ldrb	r2, [r7, #2]
 80172e8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	2200      	movs	r2, #0
 80172ee:	711a      	strb	r2, [r3, #4]
 80172f0:	2200      	movs	r2, #0
 80172f2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80172f4:	697b      	ldr	r3, [r7, #20]
 80172f6:	2200      	movs	r2, #0
 80172f8:	719a      	strb	r2, [r3, #6]
 80172fa:	2200      	movs	r2, #0
 80172fc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80172fe:	69fb      	ldr	r3, [r7, #28]
 8017300:	685b      	ldr	r3, [r3, #4]
 8017302:	f103 0008 	add.w	r0, r3, #8
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	685b      	ldr	r3, [r3, #4]
 801730a:	221c      	movs	r2, #28
 801730c:	4619      	mov	r1, r3
 801730e:	f001 fbf7 	bl	8018b00 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017312:	69bb      	ldr	r3, [r7, #24]
 8017314:	68db      	ldr	r3, [r3, #12]
 8017316:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017318:	f107 030c 	add.w	r3, r7, #12
 801731c:	4618      	mov	r0, r3
 801731e:	f000 f82f 	bl	8017380 <ip4_route>
 8017322:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017324:	693b      	ldr	r3, [r7, #16]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d01b      	beq.n	8017362 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801732a:	697b      	ldr	r3, [r7, #20]
 801732c:	2200      	movs	r2, #0
 801732e:	709a      	strb	r2, [r3, #2]
 8017330:	2200      	movs	r2, #0
 8017332:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017334:	69fb      	ldr	r3, [r7, #28]
 8017336:	895b      	ldrh	r3, [r3, #10]
 8017338:	4619      	mov	r1, r3
 801733a:	6978      	ldr	r0, [r7, #20]
 801733c:	f7f6 fcd3 	bl	800dce6 <inet_chksum>
 8017340:	4603      	mov	r3, r0
 8017342:	461a      	mov	r2, r3
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017348:	f107 020c 	add.w	r2, r7, #12
 801734c:	693b      	ldr	r3, [r7, #16]
 801734e:	9302      	str	r3, [sp, #8]
 8017350:	2301      	movs	r3, #1
 8017352:	9301      	str	r3, [sp, #4]
 8017354:	2300      	movs	r3, #0
 8017356:	9300      	str	r3, [sp, #0]
 8017358:	23ff      	movs	r3, #255	; 0xff
 801735a:	2100      	movs	r1, #0
 801735c:	69f8      	ldr	r0, [r7, #28]
 801735e:	f000 f9cd 	bl	80176fc <ip4_output_if>
  }
  pbuf_free(q);
 8017362:	69f8      	ldr	r0, [r7, #28]
 8017364:	f7f8 f8de 	bl	800f524 <pbuf_free>
 8017368:	e000      	b.n	801736c <icmp_send_response+0xd4>
    return;
 801736a:	bf00      	nop
}
 801736c:	3720      	adds	r7, #32
 801736e:	46bd      	mov	sp, r7
 8017370:	bd80      	pop	{r7, pc}
 8017372:	bf00      	nop
 8017374:	0801c3a0 	.word	0x0801c3a0
 8017378:	0801c46c 	.word	0x0801c46c
 801737c:	0801c410 	.word	0x0801c410

08017380 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017380:	b480      	push	{r7}
 8017382:	b085      	sub	sp, #20
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017388:	4b33      	ldr	r3, [pc, #204]	; (8017458 <ip4_route+0xd8>)
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	60fb      	str	r3, [r7, #12]
 801738e:	e036      	b.n	80173fe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017396:	f003 0301 	and.w	r3, r3, #1
 801739a:	b2db      	uxtb	r3, r3
 801739c:	2b00      	cmp	r3, #0
 801739e:	d02b      	beq.n	80173f8 <ip4_route+0x78>
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80173a6:	089b      	lsrs	r3, r3, #2
 80173a8:	f003 0301 	and.w	r3, r3, #1
 80173ac:	b2db      	uxtb	r3, r3
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d022      	beq.n	80173f8 <ip4_route+0x78>
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	3304      	adds	r3, #4
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d01d      	beq.n	80173f8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	681a      	ldr	r2, [r3, #0]
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	3304      	adds	r3, #4
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	405a      	eors	r2, r3
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	3308      	adds	r3, #8
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	4013      	ands	r3, r2
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d101      	bne.n	80173d8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	e038      	b.n	801744a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80173de:	f003 0302 	and.w	r3, r3, #2
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d108      	bne.n	80173f8 <ip4_route+0x78>
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	681a      	ldr	r2, [r3, #0]
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	330c      	adds	r3, #12
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	429a      	cmp	r2, r3
 80173f2:	d101      	bne.n	80173f8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	e028      	b.n	801744a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	60fb      	str	r3, [r7, #12]
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d1c5      	bne.n	8017390 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017404:	4b15      	ldr	r3, [pc, #84]	; (801745c <ip4_route+0xdc>)
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d01a      	beq.n	8017442 <ip4_route+0xc2>
 801740c:	4b13      	ldr	r3, [pc, #76]	; (801745c <ip4_route+0xdc>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017414:	f003 0301 	and.w	r3, r3, #1
 8017418:	2b00      	cmp	r3, #0
 801741a:	d012      	beq.n	8017442 <ip4_route+0xc2>
 801741c:	4b0f      	ldr	r3, [pc, #60]	; (801745c <ip4_route+0xdc>)
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017424:	f003 0304 	and.w	r3, r3, #4
 8017428:	2b00      	cmp	r3, #0
 801742a:	d00a      	beq.n	8017442 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801742c:	4b0b      	ldr	r3, [pc, #44]	; (801745c <ip4_route+0xdc>)
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	3304      	adds	r3, #4
 8017432:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017434:	2b00      	cmp	r3, #0
 8017436:	d004      	beq.n	8017442 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	b2db      	uxtb	r3, r3
 801743e:	2b7f      	cmp	r3, #127	; 0x7f
 8017440:	d101      	bne.n	8017446 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017442:	2300      	movs	r3, #0
 8017444:	e001      	b.n	801744a <ip4_route+0xca>
  }

  return netif_default;
 8017446:	4b05      	ldr	r3, [pc, #20]	; (801745c <ip4_route+0xdc>)
 8017448:	681b      	ldr	r3, [r3, #0]
}
 801744a:	4618      	mov	r0, r3
 801744c:	3714      	adds	r7, #20
 801744e:	46bd      	mov	sp, r7
 8017450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017454:	4770      	bx	lr
 8017456:	bf00      	nop
 8017458:	240077f0 	.word	0x240077f0
 801745c:	240077f4 	.word	0x240077f4

08017460 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b082      	sub	sp, #8
 8017464:	af00      	add	r7, sp, #0
 8017466:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801746e:	f003 0301 	and.w	r3, r3, #1
 8017472:	b2db      	uxtb	r3, r3
 8017474:	2b00      	cmp	r3, #0
 8017476:	d016      	beq.n	80174a6 <ip4_input_accept+0x46>
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	3304      	adds	r3, #4
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d011      	beq.n	80174a6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017482:	4b0b      	ldr	r3, [pc, #44]	; (80174b0 <ip4_input_accept+0x50>)
 8017484:	695a      	ldr	r2, [r3, #20]
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	3304      	adds	r3, #4
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	429a      	cmp	r2, r3
 801748e:	d008      	beq.n	80174a2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017490:	4b07      	ldr	r3, [pc, #28]	; (80174b0 <ip4_input_accept+0x50>)
 8017492:	695b      	ldr	r3, [r3, #20]
 8017494:	6879      	ldr	r1, [r7, #4]
 8017496:	4618      	mov	r0, r3
 8017498:	f000 fa08 	bl	80178ac <ip4_addr_isbroadcast_u32>
 801749c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d001      	beq.n	80174a6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80174a2:	2301      	movs	r3, #1
 80174a4:	e000      	b.n	80174a8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80174a6:	2300      	movs	r3, #0
}
 80174a8:	4618      	mov	r0, r3
 80174aa:	3708      	adds	r7, #8
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}
 80174b0:	24004740 	.word	0x24004740

080174b4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b086      	sub	sp, #24
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
 80174bc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	685b      	ldr	r3, [r3, #4]
 80174c2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	781b      	ldrb	r3, [r3, #0]
 80174c8:	091b      	lsrs	r3, r3, #4
 80174ca:	b2db      	uxtb	r3, r3
 80174cc:	2b04      	cmp	r3, #4
 80174ce:	d004      	beq.n	80174da <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80174d0:	6878      	ldr	r0, [r7, #4]
 80174d2:	f7f8 f827 	bl	800f524 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80174d6:	2300      	movs	r3, #0
 80174d8:	e107      	b.n	80176ea <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80174da:	697b      	ldr	r3, [r7, #20]
 80174dc:	781b      	ldrb	r3, [r3, #0]
 80174de:	f003 030f 	and.w	r3, r3, #15
 80174e2:	b2db      	uxtb	r3, r3
 80174e4:	009b      	lsls	r3, r3, #2
 80174e6:	b2db      	uxtb	r3, r3
 80174e8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	885b      	ldrh	r3, [r3, #2]
 80174ee:	b29b      	uxth	r3, r3
 80174f0:	4618      	mov	r0, r3
 80174f2:	f7f6 fb6d 	bl	800dbd0 <lwip_htons>
 80174f6:	4603      	mov	r3, r0
 80174f8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	891b      	ldrh	r3, [r3, #8]
 80174fe:	89ba      	ldrh	r2, [r7, #12]
 8017500:	429a      	cmp	r2, r3
 8017502:	d204      	bcs.n	801750e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017504:	89bb      	ldrh	r3, [r7, #12]
 8017506:	4619      	mov	r1, r3
 8017508:	6878      	ldr	r0, [r7, #4]
 801750a:	f7f7 fe85 	bl	800f218 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	895b      	ldrh	r3, [r3, #10]
 8017512:	89fa      	ldrh	r2, [r7, #14]
 8017514:	429a      	cmp	r2, r3
 8017516:	d807      	bhi.n	8017528 <ip4_input+0x74>
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	891b      	ldrh	r3, [r3, #8]
 801751c:	89ba      	ldrh	r2, [r7, #12]
 801751e:	429a      	cmp	r2, r3
 8017520:	d802      	bhi.n	8017528 <ip4_input+0x74>
 8017522:	89fb      	ldrh	r3, [r7, #14]
 8017524:	2b13      	cmp	r3, #19
 8017526:	d804      	bhi.n	8017532 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017528:	6878      	ldr	r0, [r7, #4]
 801752a:	f7f7 fffb 	bl	800f524 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801752e:	2300      	movs	r3, #0
 8017530:	e0db      	b.n	80176ea <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017532:	697b      	ldr	r3, [r7, #20]
 8017534:	691b      	ldr	r3, [r3, #16]
 8017536:	4a6f      	ldr	r2, [pc, #444]	; (80176f4 <ip4_input+0x240>)
 8017538:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801753a:	697b      	ldr	r3, [r7, #20]
 801753c:	68db      	ldr	r3, [r3, #12]
 801753e:	4a6d      	ldr	r2, [pc, #436]	; (80176f4 <ip4_input+0x240>)
 8017540:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017542:	4b6c      	ldr	r3, [pc, #432]	; (80176f4 <ip4_input+0x240>)
 8017544:	695b      	ldr	r3, [r3, #20]
 8017546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801754a:	2be0      	cmp	r3, #224	; 0xe0
 801754c:	d112      	bne.n	8017574 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801754e:	683b      	ldr	r3, [r7, #0]
 8017550:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017554:	f003 0301 	and.w	r3, r3, #1
 8017558:	b2db      	uxtb	r3, r3
 801755a:	2b00      	cmp	r3, #0
 801755c:	d007      	beq.n	801756e <ip4_input+0xba>
 801755e:	683b      	ldr	r3, [r7, #0]
 8017560:	3304      	adds	r3, #4
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d002      	beq.n	801756e <ip4_input+0xba>
      netif = inp;
 8017568:	683b      	ldr	r3, [r7, #0]
 801756a:	613b      	str	r3, [r7, #16]
 801756c:	e02a      	b.n	80175c4 <ip4_input+0x110>
    } else {
      netif = NULL;
 801756e:	2300      	movs	r3, #0
 8017570:	613b      	str	r3, [r7, #16]
 8017572:	e027      	b.n	80175c4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017574:	6838      	ldr	r0, [r7, #0]
 8017576:	f7ff ff73 	bl	8017460 <ip4_input_accept>
 801757a:	4603      	mov	r3, r0
 801757c:	2b00      	cmp	r3, #0
 801757e:	d002      	beq.n	8017586 <ip4_input+0xd2>
      netif = inp;
 8017580:	683b      	ldr	r3, [r7, #0]
 8017582:	613b      	str	r3, [r7, #16]
 8017584:	e01e      	b.n	80175c4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017586:	2300      	movs	r3, #0
 8017588:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801758a:	4b5a      	ldr	r3, [pc, #360]	; (80176f4 <ip4_input+0x240>)
 801758c:	695b      	ldr	r3, [r3, #20]
 801758e:	b2db      	uxtb	r3, r3
 8017590:	2b7f      	cmp	r3, #127	; 0x7f
 8017592:	d017      	beq.n	80175c4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017594:	4b58      	ldr	r3, [pc, #352]	; (80176f8 <ip4_input+0x244>)
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	613b      	str	r3, [r7, #16]
 801759a:	e00e      	b.n	80175ba <ip4_input+0x106>
          if (netif == inp) {
 801759c:	693a      	ldr	r2, [r7, #16]
 801759e:	683b      	ldr	r3, [r7, #0]
 80175a0:	429a      	cmp	r2, r3
 80175a2:	d006      	beq.n	80175b2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80175a4:	6938      	ldr	r0, [r7, #16]
 80175a6:	f7ff ff5b 	bl	8017460 <ip4_input_accept>
 80175aa:	4603      	mov	r3, r0
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d108      	bne.n	80175c2 <ip4_input+0x10e>
 80175b0:	e000      	b.n	80175b4 <ip4_input+0x100>
            continue;
 80175b2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80175b4:	693b      	ldr	r3, [r7, #16]
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	613b      	str	r3, [r7, #16]
 80175ba:	693b      	ldr	r3, [r7, #16]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d1ed      	bne.n	801759c <ip4_input+0xe8>
 80175c0:	e000      	b.n	80175c4 <ip4_input+0x110>
            break;
 80175c2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80175c4:	4b4b      	ldr	r3, [pc, #300]	; (80176f4 <ip4_input+0x240>)
 80175c6:	691b      	ldr	r3, [r3, #16]
 80175c8:	6839      	ldr	r1, [r7, #0]
 80175ca:	4618      	mov	r0, r3
 80175cc:	f000 f96e 	bl	80178ac <ip4_addr_isbroadcast_u32>
 80175d0:	4603      	mov	r3, r0
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d105      	bne.n	80175e2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80175d6:	4b47      	ldr	r3, [pc, #284]	; (80176f4 <ip4_input+0x240>)
 80175d8:	691b      	ldr	r3, [r3, #16]
 80175da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80175de:	2be0      	cmp	r3, #224	; 0xe0
 80175e0:	d104      	bne.n	80175ec <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80175e2:	6878      	ldr	r0, [r7, #4]
 80175e4:	f7f7 ff9e 	bl	800f524 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80175e8:	2300      	movs	r3, #0
 80175ea:	e07e      	b.n	80176ea <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80175ec:	693b      	ldr	r3, [r7, #16]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d104      	bne.n	80175fc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80175f2:	6878      	ldr	r0, [r7, #4]
 80175f4:	f7f7 ff96 	bl	800f524 <pbuf_free>
    return ERR_OK;
 80175f8:	2300      	movs	r3, #0
 80175fa:	e076      	b.n	80176ea <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80175fc:	697b      	ldr	r3, [r7, #20]
 80175fe:	88db      	ldrh	r3, [r3, #6]
 8017600:	b29b      	uxth	r3, r3
 8017602:	461a      	mov	r2, r3
 8017604:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017608:	4013      	ands	r3, r2
 801760a:	2b00      	cmp	r3, #0
 801760c:	d00b      	beq.n	8017626 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f000 fd24 	bl	801805c <ip4_reass>
 8017614:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d101      	bne.n	8017620 <ip4_input+0x16c>
      return ERR_OK;
 801761c:	2300      	movs	r3, #0
 801761e:	e064      	b.n	80176ea <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	685b      	ldr	r3, [r3, #4]
 8017624:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017626:	4a33      	ldr	r2, [pc, #204]	; (80176f4 <ip4_input+0x240>)
 8017628:	693b      	ldr	r3, [r7, #16]
 801762a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801762c:	4a31      	ldr	r2, [pc, #196]	; (80176f4 <ip4_input+0x240>)
 801762e:	683b      	ldr	r3, [r7, #0]
 8017630:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017632:	4a30      	ldr	r2, [pc, #192]	; (80176f4 <ip4_input+0x240>)
 8017634:	697b      	ldr	r3, [r7, #20]
 8017636:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017638:	697b      	ldr	r3, [r7, #20]
 801763a:	781b      	ldrb	r3, [r3, #0]
 801763c:	f003 030f 	and.w	r3, r3, #15
 8017640:	b2db      	uxtb	r3, r3
 8017642:	009b      	lsls	r3, r3, #2
 8017644:	b2db      	uxtb	r3, r3
 8017646:	b29a      	uxth	r2, r3
 8017648:	4b2a      	ldr	r3, [pc, #168]	; (80176f4 <ip4_input+0x240>)
 801764a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801764c:	89fb      	ldrh	r3, [r7, #14]
 801764e:	4619      	mov	r1, r3
 8017650:	6878      	ldr	r0, [r7, #4]
 8017652:	f7f7 fee1 	bl	800f418 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017656:	697b      	ldr	r3, [r7, #20]
 8017658:	7a5b      	ldrb	r3, [r3, #9]
 801765a:	2b11      	cmp	r3, #17
 801765c:	d006      	beq.n	801766c <ip4_input+0x1b8>
 801765e:	2b11      	cmp	r3, #17
 8017660:	dc13      	bgt.n	801768a <ip4_input+0x1d6>
 8017662:	2b01      	cmp	r3, #1
 8017664:	d00c      	beq.n	8017680 <ip4_input+0x1cc>
 8017666:	2b06      	cmp	r3, #6
 8017668:	d005      	beq.n	8017676 <ip4_input+0x1c2>
 801766a:	e00e      	b.n	801768a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801766c:	6839      	ldr	r1, [r7, #0]
 801766e:	6878      	ldr	r0, [r7, #4]
 8017670:	f7fe fc42 	bl	8015ef8 <udp_input>
        break;
 8017674:	e026      	b.n	80176c4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017676:	6839      	ldr	r1, [r7, #0]
 8017678:	6878      	ldr	r0, [r7, #4]
 801767a:	f7fa f837 	bl	80116ec <tcp_input>
        break;
 801767e:	e021      	b.n	80176c4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017680:	6839      	ldr	r1, [r7, #0]
 8017682:	6878      	ldr	r0, [r7, #4]
 8017684:	f7ff fcc8 	bl	8017018 <icmp_input>
        break;
 8017688:	e01c      	b.n	80176c4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801768a:	4b1a      	ldr	r3, [pc, #104]	; (80176f4 <ip4_input+0x240>)
 801768c:	695b      	ldr	r3, [r3, #20]
 801768e:	6939      	ldr	r1, [r7, #16]
 8017690:	4618      	mov	r0, r3
 8017692:	f000 f90b 	bl	80178ac <ip4_addr_isbroadcast_u32>
 8017696:	4603      	mov	r3, r0
 8017698:	2b00      	cmp	r3, #0
 801769a:	d10f      	bne.n	80176bc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801769c:	4b15      	ldr	r3, [pc, #84]	; (80176f4 <ip4_input+0x240>)
 801769e:	695b      	ldr	r3, [r3, #20]
 80176a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80176a4:	2be0      	cmp	r3, #224	; 0xe0
 80176a6:	d009      	beq.n	80176bc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80176a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80176ac:	4619      	mov	r1, r3
 80176ae:	6878      	ldr	r0, [r7, #4]
 80176b0:	f7f7 ff25 	bl	800f4fe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80176b4:	2102      	movs	r1, #2
 80176b6:	6878      	ldr	r0, [r7, #4]
 80176b8:	f7ff fdce 	bl	8017258 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80176bc:	6878      	ldr	r0, [r7, #4]
 80176be:	f7f7 ff31 	bl	800f524 <pbuf_free>
        break;
 80176c2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80176c4:	4b0b      	ldr	r3, [pc, #44]	; (80176f4 <ip4_input+0x240>)
 80176c6:	2200      	movs	r2, #0
 80176c8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80176ca:	4b0a      	ldr	r3, [pc, #40]	; (80176f4 <ip4_input+0x240>)
 80176cc:	2200      	movs	r2, #0
 80176ce:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80176d0:	4b08      	ldr	r3, [pc, #32]	; (80176f4 <ip4_input+0x240>)
 80176d2:	2200      	movs	r2, #0
 80176d4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80176d6:	4b07      	ldr	r3, [pc, #28]	; (80176f4 <ip4_input+0x240>)
 80176d8:	2200      	movs	r2, #0
 80176da:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80176dc:	4b05      	ldr	r3, [pc, #20]	; (80176f4 <ip4_input+0x240>)
 80176de:	2200      	movs	r2, #0
 80176e0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80176e2:	4b04      	ldr	r3, [pc, #16]	; (80176f4 <ip4_input+0x240>)
 80176e4:	2200      	movs	r2, #0
 80176e6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80176e8:	2300      	movs	r3, #0
}
 80176ea:	4618      	mov	r0, r3
 80176ec:	3718      	adds	r7, #24
 80176ee:	46bd      	mov	sp, r7
 80176f0:	bd80      	pop	{r7, pc}
 80176f2:	bf00      	nop
 80176f4:	24004740 	.word	0x24004740
 80176f8:	240077f0 	.word	0x240077f0

080176fc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b08a      	sub	sp, #40	; 0x28
 8017700:	af04      	add	r7, sp, #16
 8017702:	60f8      	str	r0, [r7, #12]
 8017704:	60b9      	str	r1, [r7, #8]
 8017706:	607a      	str	r2, [r7, #4]
 8017708:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801770a:	68bb      	ldr	r3, [r7, #8]
 801770c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d009      	beq.n	8017728 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017714:	68bb      	ldr	r3, [r7, #8]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d003      	beq.n	8017722 <ip4_output_if+0x26>
 801771a:	68bb      	ldr	r3, [r7, #8]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d102      	bne.n	8017728 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017724:	3304      	adds	r3, #4
 8017726:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017728:	78fa      	ldrb	r2, [r7, #3]
 801772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801772c:	9302      	str	r3, [sp, #8]
 801772e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017732:	9301      	str	r3, [sp, #4]
 8017734:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017738:	9300      	str	r3, [sp, #0]
 801773a:	4613      	mov	r3, r2
 801773c:	687a      	ldr	r2, [r7, #4]
 801773e:	6979      	ldr	r1, [r7, #20]
 8017740:	68f8      	ldr	r0, [r7, #12]
 8017742:	f000 f805 	bl	8017750 <ip4_output_if_src>
 8017746:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017748:	4618      	mov	r0, r3
 801774a:	3718      	adds	r7, #24
 801774c:	46bd      	mov	sp, r7
 801774e:	bd80      	pop	{r7, pc}

08017750 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b088      	sub	sp, #32
 8017754:	af00      	add	r7, sp, #0
 8017756:	60f8      	str	r0, [r7, #12]
 8017758:	60b9      	str	r1, [r7, #8]
 801775a:	607a      	str	r2, [r7, #4]
 801775c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	7b9b      	ldrb	r3, [r3, #14]
 8017762:	2b01      	cmp	r3, #1
 8017764:	d006      	beq.n	8017774 <ip4_output_if_src+0x24>
 8017766:	4b4b      	ldr	r3, [pc, #300]	; (8017894 <ip4_output_if_src+0x144>)
 8017768:	f44f 7255 	mov.w	r2, #852	; 0x354
 801776c:	494a      	ldr	r1, [pc, #296]	; (8017898 <ip4_output_if_src+0x148>)
 801776e:	484b      	ldr	r0, [pc, #300]	; (801789c <ip4_output_if_src+0x14c>)
 8017770:	f001 f9dc 	bl	8018b2c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d060      	beq.n	801783c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801777a:	2314      	movs	r3, #20
 801777c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801777e:	2114      	movs	r1, #20
 8017780:	68f8      	ldr	r0, [r7, #12]
 8017782:	f7f7 fe39 	bl	800f3f8 <pbuf_add_header>
 8017786:	4603      	mov	r3, r0
 8017788:	2b00      	cmp	r3, #0
 801778a:	d002      	beq.n	8017792 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801778c:	f06f 0301 	mvn.w	r3, #1
 8017790:	e07c      	b.n	801788c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	685b      	ldr	r3, [r3, #4]
 8017796:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	895b      	ldrh	r3, [r3, #10]
 801779c:	2b13      	cmp	r3, #19
 801779e:	d806      	bhi.n	80177ae <ip4_output_if_src+0x5e>
 80177a0:	4b3c      	ldr	r3, [pc, #240]	; (8017894 <ip4_output_if_src+0x144>)
 80177a2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80177a6:	493e      	ldr	r1, [pc, #248]	; (80178a0 <ip4_output_if_src+0x150>)
 80177a8:	483c      	ldr	r0, [pc, #240]	; (801789c <ip4_output_if_src+0x14c>)
 80177aa:	f001 f9bf 	bl	8018b2c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80177ae:	69fb      	ldr	r3, [r7, #28]
 80177b0:	78fa      	ldrb	r2, [r7, #3]
 80177b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80177b4:	69fb      	ldr	r3, [r7, #28]
 80177b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80177ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	681a      	ldr	r2, [r3, #0]
 80177c0:	69fb      	ldr	r3, [r7, #28]
 80177c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80177c4:	8b7b      	ldrh	r3, [r7, #26]
 80177c6:	089b      	lsrs	r3, r3, #2
 80177c8:	b29b      	uxth	r3, r3
 80177ca:	b2db      	uxtb	r3, r3
 80177cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177d0:	b2da      	uxtb	r2, r3
 80177d2:	69fb      	ldr	r3, [r7, #28]
 80177d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80177d6:	69fb      	ldr	r3, [r7, #28]
 80177d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80177dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	891b      	ldrh	r3, [r3, #8]
 80177e2:	4618      	mov	r0, r3
 80177e4:	f7f6 f9f4 	bl	800dbd0 <lwip_htons>
 80177e8:	4603      	mov	r3, r0
 80177ea:	461a      	mov	r2, r3
 80177ec:	69fb      	ldr	r3, [r7, #28]
 80177ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80177f0:	69fb      	ldr	r3, [r7, #28]
 80177f2:	2200      	movs	r2, #0
 80177f4:	719a      	strb	r2, [r3, #6]
 80177f6:	2200      	movs	r2, #0
 80177f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80177fa:	4b2a      	ldr	r3, [pc, #168]	; (80178a4 <ip4_output_if_src+0x154>)
 80177fc:	881b      	ldrh	r3, [r3, #0]
 80177fe:	4618      	mov	r0, r3
 8017800:	f7f6 f9e6 	bl	800dbd0 <lwip_htons>
 8017804:	4603      	mov	r3, r0
 8017806:	461a      	mov	r2, r3
 8017808:	69fb      	ldr	r3, [r7, #28]
 801780a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801780c:	4b25      	ldr	r3, [pc, #148]	; (80178a4 <ip4_output_if_src+0x154>)
 801780e:	881b      	ldrh	r3, [r3, #0]
 8017810:	3301      	adds	r3, #1
 8017812:	b29a      	uxth	r2, r3
 8017814:	4b23      	ldr	r3, [pc, #140]	; (80178a4 <ip4_output_if_src+0x154>)
 8017816:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017818:	68bb      	ldr	r3, [r7, #8]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d104      	bne.n	8017828 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801781e:	4b22      	ldr	r3, [pc, #136]	; (80178a8 <ip4_output_if_src+0x158>)
 8017820:	681a      	ldr	r2, [r3, #0]
 8017822:	69fb      	ldr	r3, [r7, #28]
 8017824:	60da      	str	r2, [r3, #12]
 8017826:	e003      	b.n	8017830 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017828:	68bb      	ldr	r3, [r7, #8]
 801782a:	681a      	ldr	r2, [r3, #0]
 801782c:	69fb      	ldr	r3, [r7, #28]
 801782e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017830:	69fb      	ldr	r3, [r7, #28]
 8017832:	2200      	movs	r2, #0
 8017834:	729a      	strb	r2, [r3, #10]
 8017836:	2200      	movs	r2, #0
 8017838:	72da      	strb	r2, [r3, #11]
 801783a:	e00f      	b.n	801785c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	895b      	ldrh	r3, [r3, #10]
 8017840:	2b13      	cmp	r3, #19
 8017842:	d802      	bhi.n	801784a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017844:	f06f 0301 	mvn.w	r3, #1
 8017848:	e020      	b.n	801788c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	685b      	ldr	r3, [r3, #4]
 801784e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017850:	69fb      	ldr	r3, [r7, #28]
 8017852:	691b      	ldr	r3, [r3, #16]
 8017854:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017856:	f107 0314 	add.w	r3, r7, #20
 801785a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801785e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017860:	2b00      	cmp	r3, #0
 8017862:	d00c      	beq.n	801787e <ip4_output_if_src+0x12e>
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	891a      	ldrh	r2, [r3, #8]
 8017868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801786a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801786c:	429a      	cmp	r2, r3
 801786e:	d906      	bls.n	801787e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017870:	687a      	ldr	r2, [r7, #4]
 8017872:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017874:	68f8      	ldr	r0, [r7, #12]
 8017876:	f000 fddf 	bl	8018438 <ip4_frag>
 801787a:	4603      	mov	r3, r0
 801787c:	e006      	b.n	801788c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017880:	695b      	ldr	r3, [r3, #20]
 8017882:	687a      	ldr	r2, [r7, #4]
 8017884:	68f9      	ldr	r1, [r7, #12]
 8017886:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017888:	4798      	blx	r3
 801788a:	4603      	mov	r3, r0
}
 801788c:	4618      	mov	r0, r3
 801788e:	3720      	adds	r7, #32
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}
 8017894:	0801c498 	.word	0x0801c498
 8017898:	0801c4cc 	.word	0x0801c4cc
 801789c:	0801c4d8 	.word	0x0801c4d8
 80178a0:	0801c500 	.word	0x0801c500
 80178a4:	240041fe 	.word	0x240041fe
 80178a8:	0801de8c 	.word	0x0801de8c

080178ac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80178ac:	b480      	push	{r7}
 80178ae:	b085      	sub	sp, #20
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
 80178b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178c0:	d002      	beq.n	80178c8 <ip4_addr_isbroadcast_u32+0x1c>
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d101      	bne.n	80178cc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80178c8:	2301      	movs	r3, #1
 80178ca:	e02a      	b.n	8017922 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80178cc:	683b      	ldr	r3, [r7, #0]
 80178ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80178d2:	f003 0302 	and.w	r3, r3, #2
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d101      	bne.n	80178de <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80178da:	2300      	movs	r3, #0
 80178dc:	e021      	b.n	8017922 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80178de:	683b      	ldr	r3, [r7, #0]
 80178e0:	3304      	adds	r3, #4
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	687a      	ldr	r2, [r7, #4]
 80178e6:	429a      	cmp	r2, r3
 80178e8:	d101      	bne.n	80178ee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80178ea:	2300      	movs	r3, #0
 80178ec:	e019      	b.n	8017922 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80178ee:	68fa      	ldr	r2, [r7, #12]
 80178f0:	683b      	ldr	r3, [r7, #0]
 80178f2:	3304      	adds	r3, #4
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	405a      	eors	r2, r3
 80178f8:	683b      	ldr	r3, [r7, #0]
 80178fa:	3308      	adds	r3, #8
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	4013      	ands	r3, r2
 8017900:	2b00      	cmp	r3, #0
 8017902:	d10d      	bne.n	8017920 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017904:	683b      	ldr	r3, [r7, #0]
 8017906:	3308      	adds	r3, #8
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	43da      	mvns	r2, r3
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017910:	683b      	ldr	r3, [r7, #0]
 8017912:	3308      	adds	r3, #8
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017918:	429a      	cmp	r2, r3
 801791a:	d101      	bne.n	8017920 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801791c:	2301      	movs	r3, #1
 801791e:	e000      	b.n	8017922 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017920:	2300      	movs	r3, #0
  }
}
 8017922:	4618      	mov	r0, r3
 8017924:	3714      	adds	r7, #20
 8017926:	46bd      	mov	sp, r7
 8017928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792c:	4770      	bx	lr
	...

08017930 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8017930:	b580      	push	{r7, lr}
 8017932:	b082      	sub	sp, #8
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8017938:	2210      	movs	r2, #16
 801793a:	4904      	ldr	r1, [pc, #16]	; (801794c <ip4addr_ntoa+0x1c>)
 801793c:	6878      	ldr	r0, [r7, #4]
 801793e:	f000 f807 	bl	8017950 <ip4addr_ntoa_r>
 8017942:	4603      	mov	r3, r0
}
 8017944:	4618      	mov	r0, r3
 8017946:	3708      	adds	r7, #8
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}
 801794c:	24004200 	.word	0x24004200

08017950 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8017950:	b480      	push	{r7}
 8017952:	b08d      	sub	sp, #52	; 0x34
 8017954:	af00      	add	r7, sp, #0
 8017956:	60f8      	str	r0, [r7, #12]
 8017958:	60b9      	str	r1, [r7, #8]
 801795a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801795c:	2300      	movs	r3, #0
 801795e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8017966:	68bb      	ldr	r3, [r7, #8]
 8017968:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801796a:	f107 0318 	add.w	r3, r7, #24
 801796e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8017970:	2300      	movs	r3, #0
 8017972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017976:	e059      	b.n	8017a2c <ip4addr_ntoa_r+0xdc>
    i = 0;
 8017978:	2300      	movs	r3, #0
 801797a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017980:	781a      	ldrb	r2, [r3, #0]
 8017982:	4b33      	ldr	r3, [pc, #204]	; (8017a50 <ip4addr_ntoa_r+0x100>)
 8017984:	fba3 1302 	umull	r1, r3, r3, r2
 8017988:	08d9      	lsrs	r1, r3, #3
 801798a:	460b      	mov	r3, r1
 801798c:	009b      	lsls	r3, r3, #2
 801798e:	440b      	add	r3, r1
 8017990:	005b      	lsls	r3, r3, #1
 8017992:	1ad3      	subs	r3, r2, r3
 8017994:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8017996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017998:	781b      	ldrb	r3, [r3, #0]
 801799a:	4a2d      	ldr	r2, [pc, #180]	; (8017a50 <ip4addr_ntoa_r+0x100>)
 801799c:	fba2 2303 	umull	r2, r3, r2, r3
 80179a0:	08db      	lsrs	r3, r3, #3
 80179a2:	b2da      	uxtb	r2, r3
 80179a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179a6:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80179a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80179ac:	1c5a      	adds	r2, r3, #1
 80179ae:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80179b2:	4619      	mov	r1, r3
 80179b4:	7ffb      	ldrb	r3, [r7, #31]
 80179b6:	3330      	adds	r3, #48	; 0x30
 80179b8:	b2da      	uxtb	r2, r3
 80179ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80179be:	440b      	add	r3, r1
 80179c0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80179c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179c6:	781b      	ldrb	r3, [r3, #0]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d1d8      	bne.n	801797e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80179cc:	e012      	b.n	80179f4 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 80179ce:	6a3b      	ldr	r3, [r7, #32]
 80179d0:	1c5a      	adds	r2, r3, #1
 80179d2:	623a      	str	r2, [r7, #32]
 80179d4:	687a      	ldr	r2, [r7, #4]
 80179d6:	429a      	cmp	r2, r3
 80179d8:	dc01      	bgt.n	80179de <ip4addr_ntoa_r+0x8e>
        return NULL;
 80179da:	2300      	movs	r3, #0
 80179dc:	e031      	b.n	8017a42 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 80179de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80179e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e4:	1c59      	adds	r1, r3, #1
 80179e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80179e8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80179ec:	440a      	add	r2, r1
 80179ee:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80179f2:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80179f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80179f8:	1e5a      	subs	r2, r3, #1
 80179fa:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d1e5      	bne.n	80179ce <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8017a02:	6a3b      	ldr	r3, [r7, #32]
 8017a04:	1c5a      	adds	r2, r3, #1
 8017a06:	623a      	str	r2, [r7, #32]
 8017a08:	687a      	ldr	r2, [r7, #4]
 8017a0a:	429a      	cmp	r2, r3
 8017a0c:	dc01      	bgt.n	8017a12 <ip4addr_ntoa_r+0xc2>
      return NULL;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	e017      	b.n	8017a42 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8017a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a14:	1c5a      	adds	r2, r3, #1
 8017a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017a18:	222e      	movs	r2, #46	; 0x2e
 8017a1a:	701a      	strb	r2, [r3, #0]
    ap++;
 8017a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a1e:	3301      	adds	r3, #1
 8017a20:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8017a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a26:	3301      	adds	r3, #1
 8017a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a30:	2b03      	cmp	r3, #3
 8017a32:	d9a1      	bls.n	8017978 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8017a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a36:	3b01      	subs	r3, #1
 8017a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a3c:	2200      	movs	r2, #0
 8017a3e:	701a      	strb	r2, [r3, #0]
  return buf;
 8017a40:	68bb      	ldr	r3, [r7, #8]
}
 8017a42:	4618      	mov	r0, r3
 8017a44:	3734      	adds	r7, #52	; 0x34
 8017a46:	46bd      	mov	sp, r7
 8017a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4c:	4770      	bx	lr
 8017a4e:	bf00      	nop
 8017a50:	cccccccd 	.word	0xcccccccd

08017a54 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b084      	sub	sp, #16
 8017a58:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017a5e:	4b12      	ldr	r3, [pc, #72]	; (8017aa8 <ip_reass_tmr+0x54>)
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017a64:	e018      	b.n	8017a98 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	7fdb      	ldrb	r3, [r3, #31]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d00b      	beq.n	8017a86 <ip_reass_tmr+0x32>
      r->timer--;
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	7fdb      	ldrb	r3, [r3, #31]
 8017a72:	3b01      	subs	r3, #1
 8017a74:	b2da      	uxtb	r2, r3
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	60fb      	str	r3, [r7, #12]
 8017a84:	e008      	b.n	8017a98 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017a90:	68b9      	ldr	r1, [r7, #8]
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	f000 f80a 	bl	8017aac <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d1e3      	bne.n	8017a66 <ip_reass_tmr+0x12>
    }
  }
}
 8017a9e:	bf00      	nop
 8017aa0:	bf00      	nop
 8017aa2:	3710      	adds	r7, #16
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}
 8017aa8:	24004210 	.word	0x24004210

08017aac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b088      	sub	sp, #32
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
 8017ab4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017aba:	683a      	ldr	r2, [r7, #0]
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d105      	bne.n	8017ace <ip_reass_free_complete_datagram+0x22>
 8017ac2:	4b45      	ldr	r3, [pc, #276]	; (8017bd8 <ip_reass_free_complete_datagram+0x12c>)
 8017ac4:	22ab      	movs	r2, #171	; 0xab
 8017ac6:	4945      	ldr	r1, [pc, #276]	; (8017bdc <ip_reass_free_complete_datagram+0x130>)
 8017ac8:	4845      	ldr	r0, [pc, #276]	; (8017be0 <ip_reass_free_complete_datagram+0x134>)
 8017aca:	f001 f82f 	bl	8018b2c <iprintf>
  if (prev != NULL) {
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d00a      	beq.n	8017aea <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017ad4:	683b      	ldr	r3, [r7, #0]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	687a      	ldr	r2, [r7, #4]
 8017ada:	429a      	cmp	r2, r3
 8017adc:	d005      	beq.n	8017aea <ip_reass_free_complete_datagram+0x3e>
 8017ade:	4b3e      	ldr	r3, [pc, #248]	; (8017bd8 <ip_reass_free_complete_datagram+0x12c>)
 8017ae0:	22ad      	movs	r2, #173	; 0xad
 8017ae2:	4940      	ldr	r1, [pc, #256]	; (8017be4 <ip_reass_free_complete_datagram+0x138>)
 8017ae4:	483e      	ldr	r0, [pc, #248]	; (8017be0 <ip_reass_free_complete_datagram+0x134>)
 8017ae6:	f001 f821 	bl	8018b2c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	685b      	ldr	r3, [r3, #4]
 8017aee:	685b      	ldr	r3, [r3, #4]
 8017af0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017af2:	697b      	ldr	r3, [r7, #20]
 8017af4:	889b      	ldrh	r3, [r3, #4]
 8017af6:	b29b      	uxth	r3, r3
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d12a      	bne.n	8017b52 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	685b      	ldr	r3, [r3, #4]
 8017b00:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017b02:	697b      	ldr	r3, [r7, #20]
 8017b04:	681a      	ldr	r2, [r3, #0]
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017b0a:	69bb      	ldr	r3, [r7, #24]
 8017b0c:	6858      	ldr	r0, [r3, #4]
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	3308      	adds	r3, #8
 8017b12:	2214      	movs	r2, #20
 8017b14:	4619      	mov	r1, r3
 8017b16:	f000 fff3 	bl	8018b00 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017b1a:	2101      	movs	r1, #1
 8017b1c:	69b8      	ldr	r0, [r7, #24]
 8017b1e:	f7ff fbab 	bl	8017278 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017b22:	69b8      	ldr	r0, [r7, #24]
 8017b24:	f7f7 fd8c 	bl	800f640 <pbuf_clen>
 8017b28:	4603      	mov	r3, r0
 8017b2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017b2c:	8bfa      	ldrh	r2, [r7, #30]
 8017b2e:	8a7b      	ldrh	r3, [r7, #18]
 8017b30:	4413      	add	r3, r2
 8017b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017b36:	db05      	blt.n	8017b44 <ip_reass_free_complete_datagram+0x98>
 8017b38:	4b27      	ldr	r3, [pc, #156]	; (8017bd8 <ip_reass_free_complete_datagram+0x12c>)
 8017b3a:	22bc      	movs	r2, #188	; 0xbc
 8017b3c:	492a      	ldr	r1, [pc, #168]	; (8017be8 <ip_reass_free_complete_datagram+0x13c>)
 8017b3e:	4828      	ldr	r0, [pc, #160]	; (8017be0 <ip_reass_free_complete_datagram+0x134>)
 8017b40:	f000 fff4 	bl	8018b2c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017b44:	8bfa      	ldrh	r2, [r7, #30]
 8017b46:	8a7b      	ldrh	r3, [r7, #18]
 8017b48:	4413      	add	r3, r2
 8017b4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017b4c:	69b8      	ldr	r0, [r7, #24]
 8017b4e:	f7f7 fce9 	bl	800f524 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	685b      	ldr	r3, [r3, #4]
 8017b56:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017b58:	e01f      	b.n	8017b9a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017b5a:	69bb      	ldr	r3, [r7, #24]
 8017b5c:	685b      	ldr	r3, [r3, #4]
 8017b5e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017b60:	69bb      	ldr	r3, [r7, #24]
 8017b62:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017b64:	697b      	ldr	r3, [r7, #20]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017b6a:	68f8      	ldr	r0, [r7, #12]
 8017b6c:	f7f7 fd68 	bl	800f640 <pbuf_clen>
 8017b70:	4603      	mov	r3, r0
 8017b72:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017b74:	8bfa      	ldrh	r2, [r7, #30]
 8017b76:	8a7b      	ldrh	r3, [r7, #18]
 8017b78:	4413      	add	r3, r2
 8017b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017b7e:	db05      	blt.n	8017b8c <ip_reass_free_complete_datagram+0xe0>
 8017b80:	4b15      	ldr	r3, [pc, #84]	; (8017bd8 <ip_reass_free_complete_datagram+0x12c>)
 8017b82:	22cc      	movs	r2, #204	; 0xcc
 8017b84:	4918      	ldr	r1, [pc, #96]	; (8017be8 <ip_reass_free_complete_datagram+0x13c>)
 8017b86:	4816      	ldr	r0, [pc, #88]	; (8017be0 <ip_reass_free_complete_datagram+0x134>)
 8017b88:	f000 ffd0 	bl	8018b2c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017b8c:	8bfa      	ldrh	r2, [r7, #30]
 8017b8e:	8a7b      	ldrh	r3, [r7, #18]
 8017b90:	4413      	add	r3, r2
 8017b92:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017b94:	68f8      	ldr	r0, [r7, #12]
 8017b96:	f7f7 fcc5 	bl	800f524 <pbuf_free>
  while (p != NULL) {
 8017b9a:	69bb      	ldr	r3, [r7, #24]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d1dc      	bne.n	8017b5a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017ba0:	6839      	ldr	r1, [r7, #0]
 8017ba2:	6878      	ldr	r0, [r7, #4]
 8017ba4:	f000 f8c2 	bl	8017d2c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017ba8:	4b10      	ldr	r3, [pc, #64]	; (8017bec <ip_reass_free_complete_datagram+0x140>)
 8017baa:	881b      	ldrh	r3, [r3, #0]
 8017bac:	8bfa      	ldrh	r2, [r7, #30]
 8017bae:	429a      	cmp	r2, r3
 8017bb0:	d905      	bls.n	8017bbe <ip_reass_free_complete_datagram+0x112>
 8017bb2:	4b09      	ldr	r3, [pc, #36]	; (8017bd8 <ip_reass_free_complete_datagram+0x12c>)
 8017bb4:	22d2      	movs	r2, #210	; 0xd2
 8017bb6:	490e      	ldr	r1, [pc, #56]	; (8017bf0 <ip_reass_free_complete_datagram+0x144>)
 8017bb8:	4809      	ldr	r0, [pc, #36]	; (8017be0 <ip_reass_free_complete_datagram+0x134>)
 8017bba:	f000 ffb7 	bl	8018b2c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017bbe:	4b0b      	ldr	r3, [pc, #44]	; (8017bec <ip_reass_free_complete_datagram+0x140>)
 8017bc0:	881a      	ldrh	r2, [r3, #0]
 8017bc2:	8bfb      	ldrh	r3, [r7, #30]
 8017bc4:	1ad3      	subs	r3, r2, r3
 8017bc6:	b29a      	uxth	r2, r3
 8017bc8:	4b08      	ldr	r3, [pc, #32]	; (8017bec <ip_reass_free_complete_datagram+0x140>)
 8017bca:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017bcc:	8bfb      	ldrh	r3, [r7, #30]
}
 8017bce:	4618      	mov	r0, r3
 8017bd0:	3720      	adds	r7, #32
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	bd80      	pop	{r7, pc}
 8017bd6:	bf00      	nop
 8017bd8:	0801c530 	.word	0x0801c530
 8017bdc:	0801c56c 	.word	0x0801c56c
 8017be0:	0801c578 	.word	0x0801c578
 8017be4:	0801c5a0 	.word	0x0801c5a0
 8017be8:	0801c5b4 	.word	0x0801c5b4
 8017bec:	24004214 	.word	0x24004214
 8017bf0:	0801c5d4 	.word	0x0801c5d4

08017bf4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b08a      	sub	sp, #40	; 0x28
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
 8017bfc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017bfe:	2300      	movs	r3, #0
 8017c00:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017c02:	2300      	movs	r3, #0
 8017c04:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017c06:	2300      	movs	r3, #0
 8017c08:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017c12:	4b28      	ldr	r3, [pc, #160]	; (8017cb4 <ip_reass_remove_oldest_datagram+0xc0>)
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017c18:	e030      	b.n	8017c7c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1c:	695a      	ldr	r2, [r3, #20]
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	68db      	ldr	r3, [r3, #12]
 8017c22:	429a      	cmp	r2, r3
 8017c24:	d10c      	bne.n	8017c40 <ip_reass_remove_oldest_datagram+0x4c>
 8017c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c28:	699a      	ldr	r2, [r3, #24]
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	691b      	ldr	r3, [r3, #16]
 8017c2e:	429a      	cmp	r2, r3
 8017c30:	d106      	bne.n	8017c40 <ip_reass_remove_oldest_datagram+0x4c>
 8017c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c34:	899a      	ldrh	r2, [r3, #12]
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	889b      	ldrh	r3, [r3, #4]
 8017c3a:	b29b      	uxth	r3, r3
 8017c3c:	429a      	cmp	r2, r3
 8017c3e:	d014      	beq.n	8017c6a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017c40:	693b      	ldr	r3, [r7, #16]
 8017c42:	3301      	adds	r3, #1
 8017c44:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017c46:	6a3b      	ldr	r3, [r7, #32]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d104      	bne.n	8017c56 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c4e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017c50:	69fb      	ldr	r3, [r7, #28]
 8017c52:	61bb      	str	r3, [r7, #24]
 8017c54:	e009      	b.n	8017c6a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c58:	7fda      	ldrb	r2, [r3, #31]
 8017c5a:	6a3b      	ldr	r3, [r7, #32]
 8017c5c:	7fdb      	ldrb	r3, [r3, #31]
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	d803      	bhi.n	8017c6a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c64:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017c66:	69fb      	ldr	r3, [r7, #28]
 8017c68:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d001      	beq.n	8017c76 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c74:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d1cb      	bne.n	8017c1a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017c82:	6a3b      	ldr	r3, [r7, #32]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d008      	beq.n	8017c9a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017c88:	69b9      	ldr	r1, [r7, #24]
 8017c8a:	6a38      	ldr	r0, [r7, #32]
 8017c8c:	f7ff ff0e 	bl	8017aac <ip_reass_free_complete_datagram>
 8017c90:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017c92:	697a      	ldr	r2, [r7, #20]
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	4413      	add	r3, r2
 8017c98:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017c9a:	697a      	ldr	r2, [r7, #20]
 8017c9c:	683b      	ldr	r3, [r7, #0]
 8017c9e:	429a      	cmp	r2, r3
 8017ca0:	da02      	bge.n	8017ca8 <ip_reass_remove_oldest_datagram+0xb4>
 8017ca2:	693b      	ldr	r3, [r7, #16]
 8017ca4:	2b01      	cmp	r3, #1
 8017ca6:	dcac      	bgt.n	8017c02 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017ca8:	697b      	ldr	r3, [r7, #20]
}
 8017caa:	4618      	mov	r0, r3
 8017cac:	3728      	adds	r7, #40	; 0x28
 8017cae:	46bd      	mov	sp, r7
 8017cb0:	bd80      	pop	{r7, pc}
 8017cb2:	bf00      	nop
 8017cb4:	24004210 	.word	0x24004210

08017cb8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b084      	sub	sp, #16
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
 8017cc0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017cc2:	2004      	movs	r0, #4
 8017cc4:	f7f6 fd14 	bl	800e6f0 <memp_malloc>
 8017cc8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d110      	bne.n	8017cf2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017cd0:	6839      	ldr	r1, [r7, #0]
 8017cd2:	6878      	ldr	r0, [r7, #4]
 8017cd4:	f7ff ff8e 	bl	8017bf4 <ip_reass_remove_oldest_datagram>
 8017cd8:	4602      	mov	r2, r0
 8017cda:	683b      	ldr	r3, [r7, #0]
 8017cdc:	4293      	cmp	r3, r2
 8017cde:	dc03      	bgt.n	8017ce8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017ce0:	2004      	movs	r0, #4
 8017ce2:	f7f6 fd05 	bl	800e6f0 <memp_malloc>
 8017ce6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d101      	bne.n	8017cf2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017cee:	2300      	movs	r3, #0
 8017cf0:	e016      	b.n	8017d20 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017cf2:	2220      	movs	r2, #32
 8017cf4:	2100      	movs	r1, #0
 8017cf6:	68f8      	ldr	r0, [r7, #12]
 8017cf8:	f000 ff10 	bl	8018b1c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	220f      	movs	r2, #15
 8017d00:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017d02:	4b09      	ldr	r3, [pc, #36]	; (8017d28 <ip_reass_enqueue_new_datagram+0x70>)
 8017d04:	681a      	ldr	r2, [r3, #0]
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017d0a:	4a07      	ldr	r2, [pc, #28]	; (8017d28 <ip_reass_enqueue_new_datagram+0x70>)
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	3308      	adds	r3, #8
 8017d14:	2214      	movs	r2, #20
 8017d16:	6879      	ldr	r1, [r7, #4]
 8017d18:	4618      	mov	r0, r3
 8017d1a:	f000 fef1 	bl	8018b00 <memcpy>
  return ipr;
 8017d1e:	68fb      	ldr	r3, [r7, #12]
}
 8017d20:	4618      	mov	r0, r3
 8017d22:	3710      	adds	r7, #16
 8017d24:	46bd      	mov	sp, r7
 8017d26:	bd80      	pop	{r7, pc}
 8017d28:	24004210 	.word	0x24004210

08017d2c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017d2c:	b580      	push	{r7, lr}
 8017d2e:	b082      	sub	sp, #8
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	6078      	str	r0, [r7, #4]
 8017d34:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017d36:	4b10      	ldr	r3, [pc, #64]	; (8017d78 <ip_reass_dequeue_datagram+0x4c>)
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	687a      	ldr	r2, [r7, #4]
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d104      	bne.n	8017d4a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	4a0c      	ldr	r2, [pc, #48]	; (8017d78 <ip_reass_dequeue_datagram+0x4c>)
 8017d46:	6013      	str	r3, [r2, #0]
 8017d48:	e00d      	b.n	8017d66 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017d4a:	683b      	ldr	r3, [r7, #0]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d106      	bne.n	8017d5e <ip_reass_dequeue_datagram+0x32>
 8017d50:	4b0a      	ldr	r3, [pc, #40]	; (8017d7c <ip_reass_dequeue_datagram+0x50>)
 8017d52:	f240 1245 	movw	r2, #325	; 0x145
 8017d56:	490a      	ldr	r1, [pc, #40]	; (8017d80 <ip_reass_dequeue_datagram+0x54>)
 8017d58:	480a      	ldr	r0, [pc, #40]	; (8017d84 <ip_reass_dequeue_datagram+0x58>)
 8017d5a:	f000 fee7 	bl	8018b2c <iprintf>
    prev->next = ipr->next;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	681a      	ldr	r2, [r3, #0]
 8017d62:	683b      	ldr	r3, [r7, #0]
 8017d64:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017d66:	6879      	ldr	r1, [r7, #4]
 8017d68:	2004      	movs	r0, #4
 8017d6a:	f7f6 fd37 	bl	800e7dc <memp_free>
}
 8017d6e:	bf00      	nop
 8017d70:	3708      	adds	r7, #8
 8017d72:	46bd      	mov	sp, r7
 8017d74:	bd80      	pop	{r7, pc}
 8017d76:	bf00      	nop
 8017d78:	24004210 	.word	0x24004210
 8017d7c:	0801c530 	.word	0x0801c530
 8017d80:	0801c5f8 	.word	0x0801c5f8
 8017d84:	0801c578 	.word	0x0801c578

08017d88 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b08c      	sub	sp, #48	; 0x30
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	60f8      	str	r0, [r7, #12]
 8017d90:	60b9      	str	r1, [r7, #8]
 8017d92:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017d94:	2300      	movs	r3, #0
 8017d96:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017d98:	2301      	movs	r3, #1
 8017d9a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017d9c:	68bb      	ldr	r3, [r7, #8]
 8017d9e:	685b      	ldr	r3, [r3, #4]
 8017da0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017da2:	69fb      	ldr	r3, [r7, #28]
 8017da4:	885b      	ldrh	r3, [r3, #2]
 8017da6:	b29b      	uxth	r3, r3
 8017da8:	4618      	mov	r0, r3
 8017daa:	f7f5 ff11 	bl	800dbd0 <lwip_htons>
 8017dae:	4603      	mov	r3, r0
 8017db0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017db2:	69fb      	ldr	r3, [r7, #28]
 8017db4:	781b      	ldrb	r3, [r3, #0]
 8017db6:	f003 030f 	and.w	r3, r3, #15
 8017dba:	b2db      	uxtb	r3, r3
 8017dbc:	009b      	lsls	r3, r3, #2
 8017dbe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017dc0:	7e7b      	ldrb	r3, [r7, #25]
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	8b7a      	ldrh	r2, [r7, #26]
 8017dc6:	429a      	cmp	r2, r3
 8017dc8:	d202      	bcs.n	8017dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017dca:	f04f 33ff 	mov.w	r3, #4294967295
 8017dce:	e135      	b.n	801803c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017dd0:	7e7b      	ldrb	r3, [r7, #25]
 8017dd2:	b29b      	uxth	r3, r3
 8017dd4:	8b7a      	ldrh	r2, [r7, #26]
 8017dd6:	1ad3      	subs	r3, r2, r3
 8017dd8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017dda:	69fb      	ldr	r3, [r7, #28]
 8017ddc:	88db      	ldrh	r3, [r3, #6]
 8017dde:	b29b      	uxth	r3, r3
 8017de0:	4618      	mov	r0, r3
 8017de2:	f7f5 fef5 	bl	800dbd0 <lwip_htons>
 8017de6:	4603      	mov	r3, r0
 8017de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017dec:	b29b      	uxth	r3, r3
 8017dee:	00db      	lsls	r3, r3, #3
 8017df0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017df2:	68bb      	ldr	r3, [r7, #8]
 8017df4:	685b      	ldr	r3, [r3, #4]
 8017df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	701a      	strb	r2, [r3, #0]
 8017dfe:	2200      	movs	r2, #0
 8017e00:	705a      	strb	r2, [r3, #1]
 8017e02:	2200      	movs	r2, #0
 8017e04:	709a      	strb	r2, [r3, #2]
 8017e06:	2200      	movs	r2, #0
 8017e08:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e0c:	8afa      	ldrh	r2, [r7, #22]
 8017e0e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017e10:	8afa      	ldrh	r2, [r7, #22]
 8017e12:	8b7b      	ldrh	r3, [r7, #26]
 8017e14:	4413      	add	r3, r2
 8017e16:	b29a      	uxth	r2, r3
 8017e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e1a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e1e:	88db      	ldrh	r3, [r3, #6]
 8017e20:	b29b      	uxth	r3, r3
 8017e22:	8afa      	ldrh	r2, [r7, #22]
 8017e24:	429a      	cmp	r2, r3
 8017e26:	d902      	bls.n	8017e2e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e28:	f04f 33ff 	mov.w	r3, #4294967295
 8017e2c:	e106      	b.n	801803c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	685b      	ldr	r3, [r3, #4]
 8017e32:	627b      	str	r3, [r7, #36]	; 0x24
 8017e34:	e068      	b.n	8017f08 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e38:	685b      	ldr	r3, [r3, #4]
 8017e3a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e3e:	889b      	ldrh	r3, [r3, #4]
 8017e40:	b29a      	uxth	r2, r3
 8017e42:	693b      	ldr	r3, [r7, #16]
 8017e44:	889b      	ldrh	r3, [r3, #4]
 8017e46:	b29b      	uxth	r3, r3
 8017e48:	429a      	cmp	r2, r3
 8017e4a:	d235      	bcs.n	8017eb8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e50:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d020      	beq.n	8017e9a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e5a:	889b      	ldrh	r3, [r3, #4]
 8017e5c:	b29a      	uxth	r2, r3
 8017e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e60:	88db      	ldrh	r3, [r3, #6]
 8017e62:	b29b      	uxth	r3, r3
 8017e64:	429a      	cmp	r2, r3
 8017e66:	d307      	bcc.n	8017e78 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e6a:	88db      	ldrh	r3, [r3, #6]
 8017e6c:	b29a      	uxth	r2, r3
 8017e6e:	693b      	ldr	r3, [r7, #16]
 8017e70:	889b      	ldrh	r3, [r3, #4]
 8017e72:	b29b      	uxth	r3, r3
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d902      	bls.n	8017e7e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e78:	f04f 33ff 	mov.w	r3, #4294967295
 8017e7c:	e0de      	b.n	801803c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e80:	68ba      	ldr	r2, [r7, #8]
 8017e82:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e86:	88db      	ldrh	r3, [r3, #6]
 8017e88:	b29a      	uxth	r2, r3
 8017e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e8c:	889b      	ldrh	r3, [r3, #4]
 8017e8e:	b29b      	uxth	r3, r3
 8017e90:	429a      	cmp	r2, r3
 8017e92:	d03d      	beq.n	8017f10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017e94:	2300      	movs	r3, #0
 8017e96:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017e98:	e03a      	b.n	8017f10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e9c:	88db      	ldrh	r3, [r3, #6]
 8017e9e:	b29a      	uxth	r2, r3
 8017ea0:	693b      	ldr	r3, [r7, #16]
 8017ea2:	889b      	ldrh	r3, [r3, #4]
 8017ea4:	b29b      	uxth	r3, r3
 8017ea6:	429a      	cmp	r2, r3
 8017ea8:	d902      	bls.n	8017eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8017eae:	e0c5      	b.n	801803c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	68ba      	ldr	r2, [r7, #8]
 8017eb4:	605a      	str	r2, [r3, #4]
      break;
 8017eb6:	e02b      	b.n	8017f10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eba:	889b      	ldrh	r3, [r3, #4]
 8017ebc:	b29a      	uxth	r2, r3
 8017ebe:	693b      	ldr	r3, [r7, #16]
 8017ec0:	889b      	ldrh	r3, [r3, #4]
 8017ec2:	b29b      	uxth	r3, r3
 8017ec4:	429a      	cmp	r2, r3
 8017ec6:	d102      	bne.n	8017ece <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8017ecc:	e0b6      	b.n	801803c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ed0:	889b      	ldrh	r3, [r3, #4]
 8017ed2:	b29a      	uxth	r2, r3
 8017ed4:	693b      	ldr	r3, [r7, #16]
 8017ed6:	88db      	ldrh	r3, [r3, #6]
 8017ed8:	b29b      	uxth	r3, r3
 8017eda:	429a      	cmp	r2, r3
 8017edc:	d202      	bcs.n	8017ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ede:	f04f 33ff 	mov.w	r3, #4294967295
 8017ee2:	e0ab      	b.n	801803c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d009      	beq.n	8017efe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eec:	88db      	ldrh	r3, [r3, #6]
 8017eee:	b29a      	uxth	r2, r3
 8017ef0:	693b      	ldr	r3, [r7, #16]
 8017ef2:	889b      	ldrh	r3, [r3, #4]
 8017ef4:	b29b      	uxth	r3, r3
 8017ef6:	429a      	cmp	r2, r3
 8017ef8:	d001      	beq.n	8017efe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017efa:	2300      	movs	r3, #0
 8017efc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017efe:	693b      	ldr	r3, [r7, #16]
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017f04:	693b      	ldr	r3, [r7, #16]
 8017f06:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d193      	bne.n	8017e36 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017f0e:	e000      	b.n	8017f12 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017f10:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d12d      	bne.n	8017f74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d01c      	beq.n	8017f58 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f20:	88db      	ldrh	r3, [r3, #6]
 8017f22:	b29a      	uxth	r2, r3
 8017f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f26:	889b      	ldrh	r3, [r3, #4]
 8017f28:	b29b      	uxth	r3, r3
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d906      	bls.n	8017f3c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017f2e:	4b45      	ldr	r3, [pc, #276]	; (8018044 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f30:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017f34:	4944      	ldr	r1, [pc, #272]	; (8018048 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017f36:	4845      	ldr	r0, [pc, #276]	; (801804c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f38:	f000 fdf8 	bl	8018b2c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f3e:	68ba      	ldr	r2, [r7, #8]
 8017f40:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f44:	88db      	ldrh	r3, [r3, #6]
 8017f46:	b29a      	uxth	r2, r3
 8017f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f4a:	889b      	ldrh	r3, [r3, #4]
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	429a      	cmp	r2, r3
 8017f50:	d010      	beq.n	8017f74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017f52:	2300      	movs	r3, #0
 8017f54:	623b      	str	r3, [r7, #32]
 8017f56:	e00d      	b.n	8017f74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	685b      	ldr	r3, [r3, #4]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d006      	beq.n	8017f6e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017f60:	4b38      	ldr	r3, [pc, #224]	; (8018044 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f62:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017f66:	493a      	ldr	r1, [pc, #232]	; (8018050 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017f68:	4838      	ldr	r0, [pc, #224]	; (801804c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f6a:	f000 fddf 	bl	8018b2c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	68ba      	ldr	r2, [r7, #8]
 8017f72:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d105      	bne.n	8017f86 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	7f9b      	ldrb	r3, [r3, #30]
 8017f7e:	f003 0301 	and.w	r3, r3, #1
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d059      	beq.n	801803a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017f86:	6a3b      	ldr	r3, [r7, #32]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d04f      	beq.n	801802c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	685b      	ldr	r3, [r3, #4]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d006      	beq.n	8017fa2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	685b      	ldr	r3, [r3, #4]
 8017f98:	685b      	ldr	r3, [r3, #4]
 8017f9a:	889b      	ldrh	r3, [r3, #4]
 8017f9c:	b29b      	uxth	r3, r3
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d002      	beq.n	8017fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	623b      	str	r3, [r7, #32]
 8017fa6:	e041      	b.n	801802c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017faa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017fb2:	e012      	b.n	8017fda <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb6:	685b      	ldr	r3, [r3, #4]
 8017fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fbc:	88db      	ldrh	r3, [r3, #6]
 8017fbe:	b29a      	uxth	r2, r3
 8017fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc2:	889b      	ldrh	r3, [r3, #4]
 8017fc4:	b29b      	uxth	r3, r3
 8017fc6:	429a      	cmp	r2, r3
 8017fc8:	d002      	beq.n	8017fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017fca:	2300      	movs	r3, #0
 8017fcc:	623b      	str	r3, [r7, #32]
            break;
 8017fce:	e007      	b.n	8017fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d1e9      	bne.n	8017fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017fe0:	6a3b      	ldr	r3, [r7, #32]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d022      	beq.n	801802c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	685b      	ldr	r3, [r3, #4]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d106      	bne.n	8017ffc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017fee:	4b15      	ldr	r3, [pc, #84]	; (8018044 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017ff0:	f240 12df 	movw	r2, #479	; 0x1df
 8017ff4:	4917      	ldr	r1, [pc, #92]	; (8018054 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017ff6:	4815      	ldr	r0, [pc, #84]	; (801804c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017ff8:	f000 fd98 	bl	8018b2c <iprintf>
          LWIP_ASSERT("sanity check",
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	685b      	ldr	r3, [r3, #4]
 8018000:	685b      	ldr	r3, [r3, #4]
 8018002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018004:	429a      	cmp	r2, r3
 8018006:	d106      	bne.n	8018016 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018008:	4b0e      	ldr	r3, [pc, #56]	; (8018044 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801800a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801800e:	4911      	ldr	r1, [pc, #68]	; (8018054 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018010:	480e      	ldr	r0, [pc, #56]	; (801804c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018012:	f000 fd8b 	bl	8018b2c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d006      	beq.n	801802c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801801e:	4b09      	ldr	r3, [pc, #36]	; (8018044 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018020:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018024:	490c      	ldr	r1, [pc, #48]	; (8018058 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018026:	4809      	ldr	r0, [pc, #36]	; (801804c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018028:	f000 fd80 	bl	8018b2c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801802c:	6a3b      	ldr	r3, [r7, #32]
 801802e:	2b00      	cmp	r3, #0
 8018030:	bf14      	ite	ne
 8018032:	2301      	movne	r3, #1
 8018034:	2300      	moveq	r3, #0
 8018036:	b2db      	uxtb	r3, r3
 8018038:	e000      	b.n	801803c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801803a:	2300      	movs	r3, #0
}
 801803c:	4618      	mov	r0, r3
 801803e:	3730      	adds	r7, #48	; 0x30
 8018040:	46bd      	mov	sp, r7
 8018042:	bd80      	pop	{r7, pc}
 8018044:	0801c530 	.word	0x0801c530
 8018048:	0801c614 	.word	0x0801c614
 801804c:	0801c578 	.word	0x0801c578
 8018050:	0801c634 	.word	0x0801c634
 8018054:	0801c66c 	.word	0x0801c66c
 8018058:	0801c67c 	.word	0x0801c67c

0801805c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801805c:	b580      	push	{r7, lr}
 801805e:	b08e      	sub	sp, #56	; 0x38
 8018060:	af00      	add	r7, sp, #0
 8018062:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	685b      	ldr	r3, [r3, #4]
 8018068:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801806c:	781b      	ldrb	r3, [r3, #0]
 801806e:	f003 030f 	and.w	r3, r3, #15
 8018072:	b2db      	uxtb	r3, r3
 8018074:	009b      	lsls	r3, r3, #2
 8018076:	b2db      	uxtb	r3, r3
 8018078:	2b14      	cmp	r3, #20
 801807a:	f040 8167 	bne.w	801834c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018080:	88db      	ldrh	r3, [r3, #6]
 8018082:	b29b      	uxth	r3, r3
 8018084:	4618      	mov	r0, r3
 8018086:	f7f5 fda3 	bl	800dbd0 <lwip_htons>
 801808a:	4603      	mov	r3, r0
 801808c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018090:	b29b      	uxth	r3, r3
 8018092:	00db      	lsls	r3, r3, #3
 8018094:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018098:	885b      	ldrh	r3, [r3, #2]
 801809a:	b29b      	uxth	r3, r3
 801809c:	4618      	mov	r0, r3
 801809e:	f7f5 fd97 	bl	800dbd0 <lwip_htons>
 80180a2:	4603      	mov	r3, r0
 80180a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80180a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a8:	781b      	ldrb	r3, [r3, #0]
 80180aa:	f003 030f 	and.w	r3, r3, #15
 80180ae:	b2db      	uxtb	r3, r3
 80180b0:	009b      	lsls	r3, r3, #2
 80180b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80180b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180ba:	b29b      	uxth	r3, r3
 80180bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80180be:	429a      	cmp	r2, r3
 80180c0:	f0c0 8146 	bcc.w	8018350 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80180c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180c8:	b29b      	uxth	r3, r3
 80180ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80180cc:	1ad3      	subs	r3, r2, r3
 80180ce:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80180d0:	6878      	ldr	r0, [r7, #4]
 80180d2:	f7f7 fab5 	bl	800f640 <pbuf_clen>
 80180d6:	4603      	mov	r3, r0
 80180d8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80180da:	4b9f      	ldr	r3, [pc, #636]	; (8018358 <ip4_reass+0x2fc>)
 80180dc:	881b      	ldrh	r3, [r3, #0]
 80180de:	461a      	mov	r2, r3
 80180e0:	8c3b      	ldrh	r3, [r7, #32]
 80180e2:	4413      	add	r3, r2
 80180e4:	2b0a      	cmp	r3, #10
 80180e6:	dd10      	ble.n	801810a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80180e8:	8c3b      	ldrh	r3, [r7, #32]
 80180ea:	4619      	mov	r1, r3
 80180ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180ee:	f7ff fd81 	bl	8017bf4 <ip_reass_remove_oldest_datagram>
 80180f2:	4603      	mov	r3, r0
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	f000 812d 	beq.w	8018354 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80180fa:	4b97      	ldr	r3, [pc, #604]	; (8018358 <ip4_reass+0x2fc>)
 80180fc:	881b      	ldrh	r3, [r3, #0]
 80180fe:	461a      	mov	r2, r3
 8018100:	8c3b      	ldrh	r3, [r7, #32]
 8018102:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018104:	2b0a      	cmp	r3, #10
 8018106:	f300 8125 	bgt.w	8018354 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801810a:	4b94      	ldr	r3, [pc, #592]	; (801835c <ip4_reass+0x300>)
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	633b      	str	r3, [r7, #48]	; 0x30
 8018110:	e015      	b.n	801813e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018114:	695a      	ldr	r2, [r3, #20]
 8018116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018118:	68db      	ldr	r3, [r3, #12]
 801811a:	429a      	cmp	r2, r3
 801811c:	d10c      	bne.n	8018138 <ip4_reass+0xdc>
 801811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018120:	699a      	ldr	r2, [r3, #24]
 8018122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018124:	691b      	ldr	r3, [r3, #16]
 8018126:	429a      	cmp	r2, r3
 8018128:	d106      	bne.n	8018138 <ip4_reass+0xdc>
 801812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801812c:	899a      	ldrh	r2, [r3, #12]
 801812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018130:	889b      	ldrh	r3, [r3, #4]
 8018132:	b29b      	uxth	r3, r3
 8018134:	429a      	cmp	r2, r3
 8018136:	d006      	beq.n	8018146 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	633b      	str	r3, [r7, #48]	; 0x30
 801813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018140:	2b00      	cmp	r3, #0
 8018142:	d1e6      	bne.n	8018112 <ip4_reass+0xb6>
 8018144:	e000      	b.n	8018148 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018146:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801814a:	2b00      	cmp	r3, #0
 801814c:	d109      	bne.n	8018162 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801814e:	8c3b      	ldrh	r3, [r7, #32]
 8018150:	4619      	mov	r1, r3
 8018152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018154:	f7ff fdb0 	bl	8017cb8 <ip_reass_enqueue_new_datagram>
 8018158:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801815c:	2b00      	cmp	r3, #0
 801815e:	d11c      	bne.n	801819a <ip4_reass+0x13e>
      goto nullreturn;
 8018160:	e109      	b.n	8018376 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018164:	88db      	ldrh	r3, [r3, #6]
 8018166:	b29b      	uxth	r3, r3
 8018168:	4618      	mov	r0, r3
 801816a:	f7f5 fd31 	bl	800dbd0 <lwip_htons>
 801816e:	4603      	mov	r3, r0
 8018170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018174:	2b00      	cmp	r3, #0
 8018176:	d110      	bne.n	801819a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801817a:	89db      	ldrh	r3, [r3, #14]
 801817c:	4618      	mov	r0, r3
 801817e:	f7f5 fd27 	bl	800dbd0 <lwip_htons>
 8018182:	4603      	mov	r3, r0
 8018184:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018188:	2b00      	cmp	r3, #0
 801818a:	d006      	beq.n	801819a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801818e:	3308      	adds	r3, #8
 8018190:	2214      	movs	r2, #20
 8018192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018194:	4618      	mov	r0, r3
 8018196:	f000 fcb3 	bl	8018b00 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801819c:	88db      	ldrh	r3, [r3, #6]
 801819e:	b29b      	uxth	r3, r3
 80181a0:	f003 0320 	and.w	r3, r3, #32
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	bf0c      	ite	eq
 80181a8:	2301      	moveq	r3, #1
 80181aa:	2300      	movne	r3, #0
 80181ac:	b2db      	uxtb	r3, r3
 80181ae:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80181b0:	69fb      	ldr	r3, [r7, #28]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d00e      	beq.n	80181d4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80181b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80181b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80181ba:	4413      	add	r3, r2
 80181bc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80181be:	8b7a      	ldrh	r2, [r7, #26]
 80181c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80181c2:	429a      	cmp	r2, r3
 80181c4:	f0c0 80a0 	bcc.w	8018308 <ip4_reass+0x2ac>
 80181c8:	8b7b      	ldrh	r3, [r7, #26]
 80181ca:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80181ce:	4293      	cmp	r3, r2
 80181d0:	f200 809a 	bhi.w	8018308 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80181d4:	69fa      	ldr	r2, [r7, #28]
 80181d6:	6879      	ldr	r1, [r7, #4]
 80181d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181da:	f7ff fdd5 	bl	8017d88 <ip_reass_chain_frag_into_datagram_and_validate>
 80181de:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80181e0:	697b      	ldr	r3, [r7, #20]
 80181e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181e6:	f000 8091 	beq.w	801830c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80181ea:	4b5b      	ldr	r3, [pc, #364]	; (8018358 <ip4_reass+0x2fc>)
 80181ec:	881a      	ldrh	r2, [r3, #0]
 80181ee:	8c3b      	ldrh	r3, [r7, #32]
 80181f0:	4413      	add	r3, r2
 80181f2:	b29a      	uxth	r2, r3
 80181f4:	4b58      	ldr	r3, [pc, #352]	; (8018358 <ip4_reass+0x2fc>)
 80181f6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80181f8:	69fb      	ldr	r3, [r7, #28]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d00d      	beq.n	801821a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80181fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018202:	4413      	add	r3, r2
 8018204:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018208:	8a7a      	ldrh	r2, [r7, #18]
 801820a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801820e:	7f9b      	ldrb	r3, [r3, #30]
 8018210:	f043 0301 	orr.w	r3, r3, #1
 8018214:	b2da      	uxtb	r2, r3
 8018216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018218:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801821a:	697b      	ldr	r3, [r7, #20]
 801821c:	2b01      	cmp	r3, #1
 801821e:	d171      	bne.n	8018304 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018222:	8b9b      	ldrh	r3, [r3, #28]
 8018224:	3314      	adds	r3, #20
 8018226:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801822a:	685b      	ldr	r3, [r3, #4]
 801822c:	685b      	ldr	r3, [r3, #4]
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018234:	685b      	ldr	r3, [r3, #4]
 8018236:	685b      	ldr	r3, [r3, #4]
 8018238:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801823c:	3308      	adds	r3, #8
 801823e:	2214      	movs	r2, #20
 8018240:	4619      	mov	r1, r3
 8018242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018244:	f000 fc5c 	bl	8018b00 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018248:	8a3b      	ldrh	r3, [r7, #16]
 801824a:	4618      	mov	r0, r3
 801824c:	f7f5 fcc0 	bl	800dbd0 <lwip_htons>
 8018250:	4603      	mov	r3, r0
 8018252:	461a      	mov	r2, r3
 8018254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018256:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801825a:	2200      	movs	r2, #0
 801825c:	719a      	strb	r2, [r3, #6]
 801825e:	2200      	movs	r2, #0
 8018260:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018264:	2200      	movs	r2, #0
 8018266:	729a      	strb	r2, [r3, #10]
 8018268:	2200      	movs	r2, #0
 801826a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801826e:	685b      	ldr	r3, [r3, #4]
 8018270:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018272:	e00d      	b.n	8018290 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018276:	685b      	ldr	r3, [r3, #4]
 8018278:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801827a:	2114      	movs	r1, #20
 801827c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801827e:	f7f7 f8cb 	bl	800f418 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018282:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f7f7 fa1b 	bl	800f6c0 <pbuf_cat>
      r = iprh->next_pbuf;
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018292:	2b00      	cmp	r3, #0
 8018294:	d1ee      	bne.n	8018274 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018296:	4b31      	ldr	r3, [pc, #196]	; (801835c <ip4_reass+0x300>)
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801829c:	429a      	cmp	r2, r3
 801829e:	d102      	bne.n	80182a6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80182a0:	2300      	movs	r3, #0
 80182a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80182a4:	e010      	b.n	80182c8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80182a6:	4b2d      	ldr	r3, [pc, #180]	; (801835c <ip4_reass+0x300>)
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80182ac:	e007      	b.n	80182be <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80182ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182b4:	429a      	cmp	r2, r3
 80182b6:	d006      	beq.n	80182c6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80182b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80182be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d1f4      	bne.n	80182ae <ip4_reass+0x252>
 80182c4:	e000      	b.n	80182c8 <ip4_reass+0x26c>
          break;
 80182c6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80182c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80182ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80182cc:	f7ff fd2e 	bl	8017d2c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80182d0:	6878      	ldr	r0, [r7, #4]
 80182d2:	f7f7 f9b5 	bl	800f640 <pbuf_clen>
 80182d6:	4603      	mov	r3, r0
 80182d8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80182da:	4b1f      	ldr	r3, [pc, #124]	; (8018358 <ip4_reass+0x2fc>)
 80182dc:	881b      	ldrh	r3, [r3, #0]
 80182de:	8c3a      	ldrh	r2, [r7, #32]
 80182e0:	429a      	cmp	r2, r3
 80182e2:	d906      	bls.n	80182f2 <ip4_reass+0x296>
 80182e4:	4b1e      	ldr	r3, [pc, #120]	; (8018360 <ip4_reass+0x304>)
 80182e6:	f240 229b 	movw	r2, #667	; 0x29b
 80182ea:	491e      	ldr	r1, [pc, #120]	; (8018364 <ip4_reass+0x308>)
 80182ec:	481e      	ldr	r0, [pc, #120]	; (8018368 <ip4_reass+0x30c>)
 80182ee:	f000 fc1d 	bl	8018b2c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80182f2:	4b19      	ldr	r3, [pc, #100]	; (8018358 <ip4_reass+0x2fc>)
 80182f4:	881a      	ldrh	r2, [r3, #0]
 80182f6:	8c3b      	ldrh	r3, [r7, #32]
 80182f8:	1ad3      	subs	r3, r2, r3
 80182fa:	b29a      	uxth	r2, r3
 80182fc:	4b16      	ldr	r3, [pc, #88]	; (8018358 <ip4_reass+0x2fc>)
 80182fe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	e03c      	b.n	801837e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018304:	2300      	movs	r3, #0
 8018306:	e03a      	b.n	801837e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8018308:	bf00      	nop
 801830a:	e000      	b.n	801830e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801830c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018310:	2b00      	cmp	r3, #0
 8018312:	d106      	bne.n	8018322 <ip4_reass+0x2c6>
 8018314:	4b12      	ldr	r3, [pc, #72]	; (8018360 <ip4_reass+0x304>)
 8018316:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801831a:	4914      	ldr	r1, [pc, #80]	; (801836c <ip4_reass+0x310>)
 801831c:	4812      	ldr	r0, [pc, #72]	; (8018368 <ip4_reass+0x30c>)
 801831e:	f000 fc05 	bl	8018b2c <iprintf>
  if (ipr->p == NULL) {
 8018322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018324:	685b      	ldr	r3, [r3, #4]
 8018326:	2b00      	cmp	r3, #0
 8018328:	d124      	bne.n	8018374 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801832a:	4b0c      	ldr	r3, [pc, #48]	; (801835c <ip4_reass+0x300>)
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018330:	429a      	cmp	r2, r3
 8018332:	d006      	beq.n	8018342 <ip4_reass+0x2e6>
 8018334:	4b0a      	ldr	r3, [pc, #40]	; (8018360 <ip4_reass+0x304>)
 8018336:	f240 22ab 	movw	r2, #683	; 0x2ab
 801833a:	490d      	ldr	r1, [pc, #52]	; (8018370 <ip4_reass+0x314>)
 801833c:	480a      	ldr	r0, [pc, #40]	; (8018368 <ip4_reass+0x30c>)
 801833e:	f000 fbf5 	bl	8018b2c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018342:	2100      	movs	r1, #0
 8018344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018346:	f7ff fcf1 	bl	8017d2c <ip_reass_dequeue_datagram>
 801834a:	e014      	b.n	8018376 <ip4_reass+0x31a>
    goto nullreturn;
 801834c:	bf00      	nop
 801834e:	e012      	b.n	8018376 <ip4_reass+0x31a>
    goto nullreturn;
 8018350:	bf00      	nop
 8018352:	e010      	b.n	8018376 <ip4_reass+0x31a>
      goto nullreturn;
 8018354:	bf00      	nop
 8018356:	e00e      	b.n	8018376 <ip4_reass+0x31a>
 8018358:	24004214 	.word	0x24004214
 801835c:	24004210 	.word	0x24004210
 8018360:	0801c530 	.word	0x0801c530
 8018364:	0801c6a0 	.word	0x0801c6a0
 8018368:	0801c578 	.word	0x0801c578
 801836c:	0801c6bc 	.word	0x0801c6bc
 8018370:	0801c6c8 	.word	0x0801c6c8
  }

nullreturn:
 8018374:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018376:	6878      	ldr	r0, [r7, #4]
 8018378:	f7f7 f8d4 	bl	800f524 <pbuf_free>
  return NULL;
 801837c:	2300      	movs	r3, #0
}
 801837e:	4618      	mov	r0, r3
 8018380:	3738      	adds	r7, #56	; 0x38
 8018382:	46bd      	mov	sp, r7
 8018384:	bd80      	pop	{r7, pc}
 8018386:	bf00      	nop

08018388 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018388:	b580      	push	{r7, lr}
 801838a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801838c:	2005      	movs	r0, #5
 801838e:	f7f6 f9af 	bl	800e6f0 <memp_malloc>
 8018392:	4603      	mov	r3, r0
}
 8018394:	4618      	mov	r0, r3
 8018396:	bd80      	pop	{r7, pc}

08018398 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b082      	sub	sp, #8
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d106      	bne.n	80183b4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80183a6:	4b07      	ldr	r3, [pc, #28]	; (80183c4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80183a8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80183ac:	4906      	ldr	r1, [pc, #24]	; (80183c8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80183ae:	4807      	ldr	r0, [pc, #28]	; (80183cc <ip_frag_free_pbuf_custom_ref+0x34>)
 80183b0:	f000 fbbc 	bl	8018b2c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80183b4:	6879      	ldr	r1, [r7, #4]
 80183b6:	2005      	movs	r0, #5
 80183b8:	f7f6 fa10 	bl	800e7dc <memp_free>
}
 80183bc:	bf00      	nop
 80183be:	3708      	adds	r7, #8
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd80      	pop	{r7, pc}
 80183c4:	0801c530 	.word	0x0801c530
 80183c8:	0801c6e8 	.word	0x0801c6e8
 80183cc:	0801c578 	.word	0x0801c578

080183d0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b084      	sub	sp, #16
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d106      	bne.n	80183f0 <ipfrag_free_pbuf_custom+0x20>
 80183e2:	4b11      	ldr	r3, [pc, #68]	; (8018428 <ipfrag_free_pbuf_custom+0x58>)
 80183e4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80183e8:	4910      	ldr	r1, [pc, #64]	; (801842c <ipfrag_free_pbuf_custom+0x5c>)
 80183ea:	4811      	ldr	r0, [pc, #68]	; (8018430 <ipfrag_free_pbuf_custom+0x60>)
 80183ec:	f000 fb9e 	bl	8018b2c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80183f0:	68fa      	ldr	r2, [r7, #12]
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	429a      	cmp	r2, r3
 80183f6:	d006      	beq.n	8018406 <ipfrag_free_pbuf_custom+0x36>
 80183f8:	4b0b      	ldr	r3, [pc, #44]	; (8018428 <ipfrag_free_pbuf_custom+0x58>)
 80183fa:	f240 22cf 	movw	r2, #719	; 0x2cf
 80183fe:	490d      	ldr	r1, [pc, #52]	; (8018434 <ipfrag_free_pbuf_custom+0x64>)
 8018400:	480b      	ldr	r0, [pc, #44]	; (8018430 <ipfrag_free_pbuf_custom+0x60>)
 8018402:	f000 fb93 	bl	8018b2c <iprintf>
  if (pcr->original != NULL) {
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	695b      	ldr	r3, [r3, #20]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d004      	beq.n	8018418 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	695b      	ldr	r3, [r3, #20]
 8018412:	4618      	mov	r0, r3
 8018414:	f7f7 f886 	bl	800f524 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018418:	68f8      	ldr	r0, [r7, #12]
 801841a:	f7ff ffbd 	bl	8018398 <ip_frag_free_pbuf_custom_ref>
}
 801841e:	bf00      	nop
 8018420:	3710      	adds	r7, #16
 8018422:	46bd      	mov	sp, r7
 8018424:	bd80      	pop	{r7, pc}
 8018426:	bf00      	nop
 8018428:	0801c530 	.word	0x0801c530
 801842c:	0801c6f4 	.word	0x0801c6f4
 8018430:	0801c578 	.word	0x0801c578
 8018434:	0801c700 	.word	0x0801c700

08018438 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b094      	sub	sp, #80	; 0x50
 801843c:	af02      	add	r7, sp, #8
 801843e:	60f8      	str	r0, [r7, #12]
 8018440:	60b9      	str	r1, [r7, #8]
 8018442:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018444:	2300      	movs	r3, #0
 8018446:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801844a:	68bb      	ldr	r3, [r7, #8]
 801844c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801844e:	3b14      	subs	r3, #20
 8018450:	2b00      	cmp	r3, #0
 8018452:	da00      	bge.n	8018456 <ip4_frag+0x1e>
 8018454:	3307      	adds	r3, #7
 8018456:	10db      	asrs	r3, r3, #3
 8018458:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801845a:	2314      	movs	r3, #20
 801845c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018466:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801846a:	781b      	ldrb	r3, [r3, #0]
 801846c:	f003 030f 	and.w	r3, r3, #15
 8018470:	b2db      	uxtb	r3, r3
 8018472:	009b      	lsls	r3, r3, #2
 8018474:	b2db      	uxtb	r3, r3
 8018476:	2b14      	cmp	r3, #20
 8018478:	d002      	beq.n	8018480 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801847a:	f06f 0305 	mvn.w	r3, #5
 801847e:	e110      	b.n	80186a2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	895b      	ldrh	r3, [r3, #10]
 8018484:	2b13      	cmp	r3, #19
 8018486:	d809      	bhi.n	801849c <ip4_frag+0x64>
 8018488:	4b88      	ldr	r3, [pc, #544]	; (80186ac <ip4_frag+0x274>)
 801848a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801848e:	4988      	ldr	r1, [pc, #544]	; (80186b0 <ip4_frag+0x278>)
 8018490:	4888      	ldr	r0, [pc, #544]	; (80186b4 <ip4_frag+0x27c>)
 8018492:	f000 fb4b 	bl	8018b2c <iprintf>
 8018496:	f06f 0305 	mvn.w	r3, #5
 801849a:	e102      	b.n	80186a2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801849e:	88db      	ldrh	r3, [r3, #6]
 80184a0:	b29b      	uxth	r3, r3
 80184a2:	4618      	mov	r0, r3
 80184a4:	f7f5 fb94 	bl	800dbd0 <lwip_htons>
 80184a8:	4603      	mov	r3, r0
 80184aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80184ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80184ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80184b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80184b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80184b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80184bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	891b      	ldrh	r3, [r3, #8]
 80184c2:	3b14      	subs	r3, #20
 80184c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80184c8:	e0e1      	b.n	801868e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80184ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80184cc:	00db      	lsls	r3, r3, #3
 80184ce:	b29b      	uxth	r3, r3
 80184d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80184d4:	4293      	cmp	r3, r2
 80184d6:	bf28      	it	cs
 80184d8:	4613      	movcs	r3, r2
 80184da:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80184dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80184e0:	2114      	movs	r1, #20
 80184e2:	200e      	movs	r0, #14
 80184e4:	f7f6 fd3a 	bl	800ef5c <pbuf_alloc>
 80184e8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80184ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	f000 80d5 	beq.w	801869c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80184f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184f4:	895b      	ldrh	r3, [r3, #10]
 80184f6:	2b13      	cmp	r3, #19
 80184f8:	d806      	bhi.n	8018508 <ip4_frag+0xd0>
 80184fa:	4b6c      	ldr	r3, [pc, #432]	; (80186ac <ip4_frag+0x274>)
 80184fc:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018500:	496d      	ldr	r1, [pc, #436]	; (80186b8 <ip4_frag+0x280>)
 8018502:	486c      	ldr	r0, [pc, #432]	; (80186b4 <ip4_frag+0x27c>)
 8018504:	f000 fb12 	bl	8018b2c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801850a:	685b      	ldr	r3, [r3, #4]
 801850c:	2214      	movs	r2, #20
 801850e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018510:	4618      	mov	r0, r3
 8018512:	f000 faf5 	bl	8018b00 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018518:	685b      	ldr	r3, [r3, #4]
 801851a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801851c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801851e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018522:	e064      	b.n	80185ee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	895a      	ldrh	r2, [r3, #10]
 8018528:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801852a:	1ad3      	subs	r3, r2, r3
 801852c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	895b      	ldrh	r3, [r3, #10]
 8018532:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018534:	429a      	cmp	r2, r3
 8018536:	d906      	bls.n	8018546 <ip4_frag+0x10e>
 8018538:	4b5c      	ldr	r3, [pc, #368]	; (80186ac <ip4_frag+0x274>)
 801853a:	f240 322d 	movw	r2, #813	; 0x32d
 801853e:	495f      	ldr	r1, [pc, #380]	; (80186bc <ip4_frag+0x284>)
 8018540:	485c      	ldr	r0, [pc, #368]	; (80186b4 <ip4_frag+0x27c>)
 8018542:	f000 faf3 	bl	8018b2c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018546:	8bfa      	ldrh	r2, [r7, #30]
 8018548:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801854c:	4293      	cmp	r3, r2
 801854e:	bf28      	it	cs
 8018550:	4613      	movcs	r3, r2
 8018552:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018556:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801855a:	2b00      	cmp	r3, #0
 801855c:	d105      	bne.n	801856a <ip4_frag+0x132>
        poff = 0;
 801855e:	2300      	movs	r3, #0
 8018560:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	60fb      	str	r3, [r7, #12]
        continue;
 8018568:	e041      	b.n	80185ee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801856a:	f7ff ff0d 	bl	8018388 <ip_frag_alloc_pbuf_custom_ref>
 801856e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018570:	69bb      	ldr	r3, [r7, #24]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d103      	bne.n	801857e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018578:	f7f6 ffd4 	bl	800f524 <pbuf_free>
        goto memerr;
 801857c:	e08f      	b.n	801869e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801857e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018584:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018586:	4413      	add	r3, r2
 8018588:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801858c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018590:	9201      	str	r2, [sp, #4]
 8018592:	9300      	str	r3, [sp, #0]
 8018594:	4603      	mov	r3, r0
 8018596:	2241      	movs	r2, #65	; 0x41
 8018598:	2000      	movs	r0, #0
 801859a:	f7f6 fe09 	bl	800f1b0 <pbuf_alloced_custom>
 801859e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80185a0:	697b      	ldr	r3, [r7, #20]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d106      	bne.n	80185b4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80185a6:	69b8      	ldr	r0, [r7, #24]
 80185a8:	f7ff fef6 	bl	8018398 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80185ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80185ae:	f7f6 ffb9 	bl	800f524 <pbuf_free>
        goto memerr;
 80185b2:	e074      	b.n	801869e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80185b4:	68f8      	ldr	r0, [r7, #12]
 80185b6:	f7f7 f85b 	bl	800f670 <pbuf_ref>
      pcr->original = p;
 80185ba:	69bb      	ldr	r3, [r7, #24]
 80185bc:	68fa      	ldr	r2, [r7, #12]
 80185be:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80185c0:	69bb      	ldr	r3, [r7, #24]
 80185c2:	4a3f      	ldr	r2, [pc, #252]	; (80186c0 <ip4_frag+0x288>)
 80185c4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80185c6:	6979      	ldr	r1, [r7, #20]
 80185c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80185ca:	f7f7 f879 	bl	800f6c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80185ce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80185d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80185d6:	1ad3      	subs	r3, r2, r3
 80185d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80185dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d004      	beq.n	80185ee <ip4_frag+0x1b6>
        poff = 0;
 80185e4:	2300      	movs	r3, #0
 80185e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80185ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d196      	bne.n	8018524 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80185f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80185f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80185fc:	4413      	add	r3, r2
 80185fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018600:	68bb      	ldr	r3, [r7, #8]
 8018602:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018604:	f1a3 0213 	sub.w	r2, r3, #19
 8018608:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801860c:	429a      	cmp	r2, r3
 801860e:	bfcc      	ite	gt
 8018610:	2301      	movgt	r3, #1
 8018612:	2300      	movle	r3, #0
 8018614:	b2db      	uxtb	r3, r3
 8018616:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018618:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801861c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018620:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018622:	6a3b      	ldr	r3, [r7, #32]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d002      	beq.n	801862e <ip4_frag+0x1f6>
 8018628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801862a:	2b00      	cmp	r3, #0
 801862c:	d003      	beq.n	8018636 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801862e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018634:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018636:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018638:	4618      	mov	r0, r3
 801863a:	f7f5 fac9 	bl	800dbd0 <lwip_htons>
 801863e:	4603      	mov	r3, r0
 8018640:	461a      	mov	r2, r3
 8018642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018644:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018646:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018648:	3314      	adds	r3, #20
 801864a:	b29b      	uxth	r3, r3
 801864c:	4618      	mov	r0, r3
 801864e:	f7f5 fabf 	bl	800dbd0 <lwip_htons>
 8018652:	4603      	mov	r3, r0
 8018654:	461a      	mov	r2, r3
 8018656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018658:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801865c:	2200      	movs	r2, #0
 801865e:	729a      	strb	r2, [r3, #10]
 8018660:	2200      	movs	r2, #0
 8018662:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018664:	68bb      	ldr	r3, [r7, #8]
 8018666:	695b      	ldr	r3, [r3, #20]
 8018668:	687a      	ldr	r2, [r7, #4]
 801866a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801866c:	68b8      	ldr	r0, [r7, #8]
 801866e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018672:	f7f6 ff57 	bl	800f524 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018676:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801867a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801867c:	1ad3      	subs	r3, r2, r3
 801867e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018682:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018686:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018688:	4413      	add	r3, r2
 801868a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801868e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018692:	2b00      	cmp	r3, #0
 8018694:	f47f af19 	bne.w	80184ca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018698:	2300      	movs	r3, #0
 801869a:	e002      	b.n	80186a2 <ip4_frag+0x26a>
      goto memerr;
 801869c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801869e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80186a2:	4618      	mov	r0, r3
 80186a4:	3748      	adds	r7, #72	; 0x48
 80186a6:	46bd      	mov	sp, r7
 80186a8:	bd80      	pop	{r7, pc}
 80186aa:	bf00      	nop
 80186ac:	0801c530 	.word	0x0801c530
 80186b0:	0801c70c 	.word	0x0801c70c
 80186b4:	0801c578 	.word	0x0801c578
 80186b8:	0801c728 	.word	0x0801c728
 80186bc:	0801c748 	.word	0x0801c748
 80186c0:	080183d1 	.word	0x080183d1

080186c4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80186c4:	b580      	push	{r7, lr}
 80186c6:	b086      	sub	sp, #24
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	6078      	str	r0, [r7, #4]
 80186cc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80186ce:	230e      	movs	r3, #14
 80186d0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	895b      	ldrh	r3, [r3, #10]
 80186d6:	2b0e      	cmp	r3, #14
 80186d8:	d96e      	bls.n	80187b8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	7bdb      	ldrb	r3, [r3, #15]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d106      	bne.n	80186f0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80186e2:	683b      	ldr	r3, [r7, #0]
 80186e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80186e8:	3301      	adds	r3, #1
 80186ea:	b2da      	uxtb	r2, r3
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	685b      	ldr	r3, [r3, #4]
 80186f4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80186f6:	693b      	ldr	r3, [r7, #16]
 80186f8:	7b1a      	ldrb	r2, [r3, #12]
 80186fa:	7b5b      	ldrb	r3, [r3, #13]
 80186fc:	021b      	lsls	r3, r3, #8
 80186fe:	4313      	orrs	r3, r2
 8018700:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018702:	693b      	ldr	r3, [r7, #16]
 8018704:	781b      	ldrb	r3, [r3, #0]
 8018706:	f003 0301 	and.w	r3, r3, #1
 801870a:	2b00      	cmp	r3, #0
 801870c:	d023      	beq.n	8018756 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801870e:	693b      	ldr	r3, [r7, #16]
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	2b01      	cmp	r3, #1
 8018714:	d10f      	bne.n	8018736 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018716:	693b      	ldr	r3, [r7, #16]
 8018718:	785b      	ldrb	r3, [r3, #1]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d11b      	bne.n	8018756 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801871e:	693b      	ldr	r3, [r7, #16]
 8018720:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018722:	2b5e      	cmp	r3, #94	; 0x5e
 8018724:	d117      	bne.n	8018756 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	7b5b      	ldrb	r3, [r3, #13]
 801872a:	f043 0310 	orr.w	r3, r3, #16
 801872e:	b2da      	uxtb	r2, r3
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	735a      	strb	r2, [r3, #13]
 8018734:	e00f      	b.n	8018756 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018736:	693b      	ldr	r3, [r7, #16]
 8018738:	2206      	movs	r2, #6
 801873a:	4928      	ldr	r1, [pc, #160]	; (80187dc <ethernet_input+0x118>)
 801873c:	4618      	mov	r0, r3
 801873e:	f000 f9d1 	bl	8018ae4 <memcmp>
 8018742:	4603      	mov	r3, r0
 8018744:	2b00      	cmp	r3, #0
 8018746:	d106      	bne.n	8018756 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	7b5b      	ldrb	r3, [r3, #13]
 801874c:	f043 0308 	orr.w	r3, r3, #8
 8018750:	b2da      	uxtb	r2, r3
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018756:	89fb      	ldrh	r3, [r7, #14]
 8018758:	2b08      	cmp	r3, #8
 801875a:	d003      	beq.n	8018764 <ethernet_input+0xa0>
 801875c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018760:	d014      	beq.n	801878c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018762:	e032      	b.n	80187ca <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018764:	683b      	ldr	r3, [r7, #0]
 8018766:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801876a:	f003 0308 	and.w	r3, r3, #8
 801876e:	2b00      	cmp	r3, #0
 8018770:	d024      	beq.n	80187bc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018772:	8afb      	ldrh	r3, [r7, #22]
 8018774:	4619      	mov	r1, r3
 8018776:	6878      	ldr	r0, [r7, #4]
 8018778:	f7f6 fe4e 	bl	800f418 <pbuf_remove_header>
 801877c:	4603      	mov	r3, r0
 801877e:	2b00      	cmp	r3, #0
 8018780:	d11e      	bne.n	80187c0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018782:	6839      	ldr	r1, [r7, #0]
 8018784:	6878      	ldr	r0, [r7, #4]
 8018786:	f7fe fe95 	bl	80174b4 <ip4_input>
      break;
 801878a:	e013      	b.n	80187b4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801878c:	683b      	ldr	r3, [r7, #0]
 801878e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018792:	f003 0308 	and.w	r3, r3, #8
 8018796:	2b00      	cmp	r3, #0
 8018798:	d014      	beq.n	80187c4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801879a:	8afb      	ldrh	r3, [r7, #22]
 801879c:	4619      	mov	r1, r3
 801879e:	6878      	ldr	r0, [r7, #4]
 80187a0:	f7f6 fe3a 	bl	800f418 <pbuf_remove_header>
 80187a4:	4603      	mov	r3, r0
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d10e      	bne.n	80187c8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80187aa:	6839      	ldr	r1, [r7, #0]
 80187ac:	6878      	ldr	r0, [r7, #4]
 80187ae:	f7fe f80f 	bl	80167d0 <etharp_input>
      break;
 80187b2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80187b4:	2300      	movs	r3, #0
 80187b6:	e00c      	b.n	80187d2 <ethernet_input+0x10e>
    goto free_and_return;
 80187b8:	bf00      	nop
 80187ba:	e006      	b.n	80187ca <ethernet_input+0x106>
        goto free_and_return;
 80187bc:	bf00      	nop
 80187be:	e004      	b.n	80187ca <ethernet_input+0x106>
        goto free_and_return;
 80187c0:	bf00      	nop
 80187c2:	e002      	b.n	80187ca <ethernet_input+0x106>
        goto free_and_return;
 80187c4:	bf00      	nop
 80187c6:	e000      	b.n	80187ca <ethernet_input+0x106>
        goto free_and_return;
 80187c8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80187ca:	6878      	ldr	r0, [r7, #4]
 80187cc:	f7f6 feaa 	bl	800f524 <pbuf_free>
  return ERR_OK;
 80187d0:	2300      	movs	r3, #0
}
 80187d2:	4618      	mov	r0, r3
 80187d4:	3718      	adds	r7, #24
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bd80      	pop	{r7, pc}
 80187da:	bf00      	nop
 80187dc:	0801de90 	.word	0x0801de90

080187e0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b086      	sub	sp, #24
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	60f8      	str	r0, [r7, #12]
 80187e8:	60b9      	str	r1, [r7, #8]
 80187ea:	607a      	str	r2, [r7, #4]
 80187ec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80187ee:	8c3b      	ldrh	r3, [r7, #32]
 80187f0:	4618      	mov	r0, r3
 80187f2:	f7f5 f9ed 	bl	800dbd0 <lwip_htons>
 80187f6:	4603      	mov	r3, r0
 80187f8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80187fa:	210e      	movs	r1, #14
 80187fc:	68b8      	ldr	r0, [r7, #8]
 80187fe:	f7f6 fdfb 	bl	800f3f8 <pbuf_add_header>
 8018802:	4603      	mov	r3, r0
 8018804:	2b00      	cmp	r3, #0
 8018806:	d125      	bne.n	8018854 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018808:	68bb      	ldr	r3, [r7, #8]
 801880a:	685b      	ldr	r3, [r3, #4]
 801880c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801880e:	693b      	ldr	r3, [r7, #16]
 8018810:	8afa      	ldrh	r2, [r7, #22]
 8018812:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018814:	693b      	ldr	r3, [r7, #16]
 8018816:	2206      	movs	r2, #6
 8018818:	6839      	ldr	r1, [r7, #0]
 801881a:	4618      	mov	r0, r3
 801881c:	f000 f970 	bl	8018b00 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018820:	693b      	ldr	r3, [r7, #16]
 8018822:	3306      	adds	r3, #6
 8018824:	2206      	movs	r2, #6
 8018826:	6879      	ldr	r1, [r7, #4]
 8018828:	4618      	mov	r0, r3
 801882a:	f000 f969 	bl	8018b00 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018834:	2b06      	cmp	r3, #6
 8018836:	d006      	beq.n	8018846 <ethernet_output+0x66>
 8018838:	4b0a      	ldr	r3, [pc, #40]	; (8018864 <ethernet_output+0x84>)
 801883a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801883e:	490a      	ldr	r1, [pc, #40]	; (8018868 <ethernet_output+0x88>)
 8018840:	480a      	ldr	r0, [pc, #40]	; (801886c <ethernet_output+0x8c>)
 8018842:	f000 f973 	bl	8018b2c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	699b      	ldr	r3, [r3, #24]
 801884a:	68b9      	ldr	r1, [r7, #8]
 801884c:	68f8      	ldr	r0, [r7, #12]
 801884e:	4798      	blx	r3
 8018850:	4603      	mov	r3, r0
 8018852:	e002      	b.n	801885a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018854:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018856:	f06f 0301 	mvn.w	r3, #1
}
 801885a:	4618      	mov	r0, r3
 801885c:	3718      	adds	r7, #24
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}
 8018862:	bf00      	nop
 8018864:	0801c758 	.word	0x0801c758
 8018868:	0801c790 	.word	0x0801c790
 801886c:	0801c7c4 	.word	0x0801c7c4

08018870 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b086      	sub	sp, #24
 8018874:	af00      	add	r7, sp, #0
 8018876:	6078      	str	r0, [r7, #4]
 8018878:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801887a:	683b      	ldr	r3, [r7, #0]
 801887c:	60bb      	str	r3, [r7, #8]
 801887e:	2304      	movs	r3, #4
 8018880:	60fb      	str	r3, [r7, #12]
 8018882:	2300      	movs	r3, #0
 8018884:	613b      	str	r3, [r7, #16]
 8018886:	2300      	movs	r3, #0
 8018888:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801888a:	f107 0308 	add.w	r3, r7, #8
 801888e:	2100      	movs	r1, #0
 8018890:	4618      	mov	r0, r3
 8018892:	f7f2 faeb 	bl	800ae6c <osMessageCreate>
 8018896:	4602      	mov	r2, r0
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d102      	bne.n	80188aa <sys_mbox_new+0x3a>
    return ERR_MEM;
 80188a4:	f04f 33ff 	mov.w	r3, #4294967295
 80188a8:	e000      	b.n	80188ac <sys_mbox_new+0x3c>

  return ERR_OK;
 80188aa:	2300      	movs	r3, #0
}
 80188ac:	4618      	mov	r0, r3
 80188ae:	3718      	adds	r7, #24
 80188b0:	46bd      	mov	sp, r7
 80188b2:	bd80      	pop	{r7, pc}

080188b4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b084      	sub	sp, #16
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
 80188bc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	6839      	ldr	r1, [r7, #0]
 80188c4:	2200      	movs	r2, #0
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7f2 faf8 	bl	800aebc <osMessagePut>
 80188cc:	4603      	mov	r3, r0
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d102      	bne.n	80188d8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80188d2:	2300      	movs	r3, #0
 80188d4:	73fb      	strb	r3, [r7, #15]
 80188d6:	e001      	b.n	80188dc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80188d8:	23ff      	movs	r3, #255	; 0xff
 80188da:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80188dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80188e0:	4618      	mov	r0, r3
 80188e2:	3710      	adds	r7, #16
 80188e4:	46bd      	mov	sp, r7
 80188e6:	bd80      	pop	{r7, pc}

080188e8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b08c      	sub	sp, #48	; 0x30
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	61f8      	str	r0, [r7, #28]
 80188f0:	61b9      	str	r1, [r7, #24]
 80188f2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80188f4:	f7f2 f8f7 	bl	800aae6 <osKernelSysTick>
 80188f8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d017      	beq.n	8018930 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018900:	69fb      	ldr	r3, [r7, #28]
 8018902:	6819      	ldr	r1, [r3, #0]
 8018904:	f107 0320 	add.w	r3, r7, #32
 8018908:	697a      	ldr	r2, [r7, #20]
 801890a:	4618      	mov	r0, r3
 801890c:	f7f2 fb16 	bl	800af3c <osMessageGet>

    if(event.status == osEventMessage)
 8018910:	6a3b      	ldr	r3, [r7, #32]
 8018912:	2b10      	cmp	r3, #16
 8018914:	d109      	bne.n	801892a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018918:	461a      	mov	r2, r3
 801891a:	69bb      	ldr	r3, [r7, #24]
 801891c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801891e:	f7f2 f8e2 	bl	800aae6 <osKernelSysTick>
 8018922:	4602      	mov	r2, r0
 8018924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018926:	1ad3      	subs	r3, r2, r3
 8018928:	e019      	b.n	801895e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801892a:	f04f 33ff 	mov.w	r3, #4294967295
 801892e:	e016      	b.n	801895e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018930:	69fb      	ldr	r3, [r7, #28]
 8018932:	6819      	ldr	r1, [r3, #0]
 8018934:	463b      	mov	r3, r7
 8018936:	f04f 32ff 	mov.w	r2, #4294967295
 801893a:	4618      	mov	r0, r3
 801893c:	f7f2 fafe 	bl	800af3c <osMessageGet>
 8018940:	f107 0320 	add.w	r3, r7, #32
 8018944:	463a      	mov	r2, r7
 8018946:	ca07      	ldmia	r2, {r0, r1, r2}
 8018948:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801894e:	461a      	mov	r2, r3
 8018950:	69bb      	ldr	r3, [r7, #24]
 8018952:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018954:	f7f2 f8c7 	bl	800aae6 <osKernelSysTick>
 8018958:	4602      	mov	r2, r0
 801895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801895c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801895e:	4618      	mov	r0, r3
 8018960:	3730      	adds	r7, #48	; 0x30
 8018962:	46bd      	mov	sp, r7
 8018964:	bd80      	pop	{r7, pc}

08018966 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018966:	b480      	push	{r7}
 8018968:	b083      	sub	sp, #12
 801896a:	af00      	add	r7, sp, #0
 801896c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d101      	bne.n	801897a <sys_mbox_valid+0x14>
    return 0;
 8018976:	2300      	movs	r3, #0
 8018978:	e000      	b.n	801897c <sys_mbox_valid+0x16>
  else
    return 1;
 801897a:	2301      	movs	r3, #1
}
 801897c:	4618      	mov	r0, r3
 801897e:	370c      	adds	r7, #12
 8018980:	46bd      	mov	sp, r7
 8018982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018986:	4770      	bx	lr

08018988 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018988:	b580      	push	{r7, lr}
 801898a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801898c:	4803      	ldr	r0, [pc, #12]	; (801899c <sys_init+0x14>)
 801898e:	f7f2 f91a 	bl	800abc6 <osMutexCreate>
 8018992:	4603      	mov	r3, r0
 8018994:	4a02      	ldr	r2, [pc, #8]	; (80189a0 <sys_init+0x18>)
 8018996:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018998:	bf00      	nop
 801899a:	bd80      	pop	{r7, pc}
 801899c:	0801dea0 	.word	0x0801dea0
 80189a0:	24007820 	.word	0x24007820

080189a4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b084      	sub	sp, #16
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80189ac:	2300      	movs	r3, #0
 80189ae:	60bb      	str	r3, [r7, #8]
 80189b0:	2300      	movs	r3, #0
 80189b2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80189b4:	f107 0308 	add.w	r3, r7, #8
 80189b8:	4618      	mov	r0, r3
 80189ba:	f7f2 f904 	bl	800abc6 <osMutexCreate>
 80189be:	4602      	mov	r2, r0
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d102      	bne.n	80189d2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80189cc:	f04f 33ff 	mov.w	r3, #4294967295
 80189d0:	e000      	b.n	80189d4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80189d2:	2300      	movs	r3, #0
}
 80189d4:	4618      	mov	r0, r3
 80189d6:	3710      	adds	r7, #16
 80189d8:	46bd      	mov	sp, r7
 80189da:	bd80      	pop	{r7, pc}

080189dc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b082      	sub	sp, #8
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	f04f 31ff 	mov.w	r1, #4294967295
 80189ec:	4618      	mov	r0, r3
 80189ee:	f7f2 f903 	bl	800abf8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80189f2:	bf00      	nop
 80189f4:	3708      	adds	r7, #8
 80189f6:	46bd      	mov	sp, r7
 80189f8:	bd80      	pop	{r7, pc}

080189fa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80189fa:	b580      	push	{r7, lr}
 80189fc:	b082      	sub	sp, #8
 80189fe:	af00      	add	r7, sp, #0
 8018a00:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	4618      	mov	r0, r3
 8018a08:	f7f2 f944 	bl	800ac94 <osMutexRelease>
}
 8018a0c:	bf00      	nop
 8018a0e:	3708      	adds	r7, #8
 8018a10:	46bd      	mov	sp, r7
 8018a12:	bd80      	pop	{r7, pc}

08018a14 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	b08c      	sub	sp, #48	; 0x30
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	60f8      	str	r0, [r7, #12]
 8018a1c:	60b9      	str	r1, [r7, #8]
 8018a1e:	607a      	str	r2, [r7, #4]
 8018a20:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018a22:	f107 0314 	add.w	r3, r7, #20
 8018a26:	2200      	movs	r2, #0
 8018a28:	601a      	str	r2, [r3, #0]
 8018a2a:	605a      	str	r2, [r3, #4]
 8018a2c:	609a      	str	r2, [r3, #8]
 8018a2e:	60da      	str	r2, [r3, #12]
 8018a30:	611a      	str	r2, [r3, #16]
 8018a32:	615a      	str	r2, [r3, #20]
 8018a34:	619a      	str	r2, [r3, #24]
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	617b      	str	r3, [r7, #20]
 8018a3a:	68bb      	ldr	r3, [r7, #8]
 8018a3c:	61bb      	str	r3, [r7, #24]
 8018a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a40:	b21b      	sxth	r3, r3
 8018a42:	83bb      	strh	r3, [r7, #28]
 8018a44:	683b      	ldr	r3, [r7, #0]
 8018a46:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018a48:	f107 0314 	add.w	r3, r7, #20
 8018a4c:	6879      	ldr	r1, [r7, #4]
 8018a4e:	4618      	mov	r0, r3
 8018a50:	f7f2 f859 	bl	800ab06 <osThreadCreate>
 8018a54:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018a56:	4618      	mov	r0, r3
 8018a58:	3730      	adds	r7, #48	; 0x30
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	bd80      	pop	{r7, pc}
	...

08018a60 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018a64:	4b04      	ldr	r3, [pc, #16]	; (8018a78 <sys_arch_protect+0x18>)
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	f04f 31ff 	mov.w	r1, #4294967295
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f7f2 f8c3 	bl	800abf8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018a72:	2301      	movs	r3, #1
}
 8018a74:	4618      	mov	r0, r3
 8018a76:	bd80      	pop	{r7, pc}
 8018a78:	24007820 	.word	0x24007820

08018a7c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b082      	sub	sp, #8
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018a84:	4b04      	ldr	r3, [pc, #16]	; (8018a98 <sys_arch_unprotect+0x1c>)
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	4618      	mov	r0, r3
 8018a8a:	f7f2 f903 	bl	800ac94 <osMutexRelease>
}
 8018a8e:	bf00      	nop
 8018a90:	3708      	adds	r7, #8
 8018a92:	46bd      	mov	sp, r7
 8018a94:	bd80      	pop	{r7, pc}
 8018a96:	bf00      	nop
 8018a98:	24007820 	.word	0x24007820

08018a9c <__libc_init_array>:
 8018a9c:	b570      	push	{r4, r5, r6, lr}
 8018a9e:	4d0d      	ldr	r5, [pc, #52]	; (8018ad4 <__libc_init_array+0x38>)
 8018aa0:	4c0d      	ldr	r4, [pc, #52]	; (8018ad8 <__libc_init_array+0x3c>)
 8018aa2:	1b64      	subs	r4, r4, r5
 8018aa4:	10a4      	asrs	r4, r4, #2
 8018aa6:	2600      	movs	r6, #0
 8018aa8:	42a6      	cmp	r6, r4
 8018aaa:	d109      	bne.n	8018ac0 <__libc_init_array+0x24>
 8018aac:	4d0b      	ldr	r5, [pc, #44]	; (8018adc <__libc_init_array+0x40>)
 8018aae:	4c0c      	ldr	r4, [pc, #48]	; (8018ae0 <__libc_init_array+0x44>)
 8018ab0:	f001 f86a 	bl	8019b88 <_init>
 8018ab4:	1b64      	subs	r4, r4, r5
 8018ab6:	10a4      	asrs	r4, r4, #2
 8018ab8:	2600      	movs	r6, #0
 8018aba:	42a6      	cmp	r6, r4
 8018abc:	d105      	bne.n	8018aca <__libc_init_array+0x2e>
 8018abe:	bd70      	pop	{r4, r5, r6, pc}
 8018ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ac4:	4798      	blx	r3
 8018ac6:	3601      	adds	r6, #1
 8018ac8:	e7ee      	b.n	8018aa8 <__libc_init_array+0xc>
 8018aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ace:	4798      	blx	r3
 8018ad0:	3601      	adds	r6, #1
 8018ad2:	e7f2      	b.n	8018aba <__libc_init_array+0x1e>
 8018ad4:	0801dffc 	.word	0x0801dffc
 8018ad8:	0801dffc 	.word	0x0801dffc
 8018adc:	0801dffc 	.word	0x0801dffc
 8018ae0:	0801e000 	.word	0x0801e000

08018ae4 <memcmp>:
 8018ae4:	b530      	push	{r4, r5, lr}
 8018ae6:	3901      	subs	r1, #1
 8018ae8:	2400      	movs	r4, #0
 8018aea:	42a2      	cmp	r2, r4
 8018aec:	d101      	bne.n	8018af2 <memcmp+0xe>
 8018aee:	2000      	movs	r0, #0
 8018af0:	e005      	b.n	8018afe <memcmp+0x1a>
 8018af2:	5d03      	ldrb	r3, [r0, r4]
 8018af4:	3401      	adds	r4, #1
 8018af6:	5d0d      	ldrb	r5, [r1, r4]
 8018af8:	42ab      	cmp	r3, r5
 8018afa:	d0f6      	beq.n	8018aea <memcmp+0x6>
 8018afc:	1b58      	subs	r0, r3, r5
 8018afe:	bd30      	pop	{r4, r5, pc}

08018b00 <memcpy>:
 8018b00:	440a      	add	r2, r1
 8018b02:	4291      	cmp	r1, r2
 8018b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8018b08:	d100      	bne.n	8018b0c <memcpy+0xc>
 8018b0a:	4770      	bx	lr
 8018b0c:	b510      	push	{r4, lr}
 8018b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018b16:	4291      	cmp	r1, r2
 8018b18:	d1f9      	bne.n	8018b0e <memcpy+0xe>
 8018b1a:	bd10      	pop	{r4, pc}

08018b1c <memset>:
 8018b1c:	4402      	add	r2, r0
 8018b1e:	4603      	mov	r3, r0
 8018b20:	4293      	cmp	r3, r2
 8018b22:	d100      	bne.n	8018b26 <memset+0xa>
 8018b24:	4770      	bx	lr
 8018b26:	f803 1b01 	strb.w	r1, [r3], #1
 8018b2a:	e7f9      	b.n	8018b20 <memset+0x4>

08018b2c <iprintf>:
 8018b2c:	b40f      	push	{r0, r1, r2, r3}
 8018b2e:	4b0a      	ldr	r3, [pc, #40]	; (8018b58 <iprintf+0x2c>)
 8018b30:	b513      	push	{r0, r1, r4, lr}
 8018b32:	681c      	ldr	r4, [r3, #0]
 8018b34:	b124      	cbz	r4, 8018b40 <iprintf+0x14>
 8018b36:	69a3      	ldr	r3, [r4, #24]
 8018b38:	b913      	cbnz	r3, 8018b40 <iprintf+0x14>
 8018b3a:	4620      	mov	r0, r4
 8018b3c:	f000 f8d8 	bl	8018cf0 <__sinit>
 8018b40:	ab05      	add	r3, sp, #20
 8018b42:	9a04      	ldr	r2, [sp, #16]
 8018b44:	68a1      	ldr	r1, [r4, #8]
 8018b46:	9301      	str	r3, [sp, #4]
 8018b48:	4620      	mov	r0, r4
 8018b4a:	f000 fa5f 	bl	801900c <_vfiprintf_r>
 8018b4e:	b002      	add	sp, #8
 8018b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b54:	b004      	add	sp, #16
 8018b56:	4770      	bx	lr
 8018b58:	24000044 	.word	0x24000044

08018b5c <rand>:
 8018b5c:	4b17      	ldr	r3, [pc, #92]	; (8018bbc <rand+0x60>)
 8018b5e:	b510      	push	{r4, lr}
 8018b60:	681c      	ldr	r4, [r3, #0]
 8018b62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018b64:	b9b3      	cbnz	r3, 8018b94 <rand+0x38>
 8018b66:	2018      	movs	r0, #24
 8018b68:	f000 f974 	bl	8018e54 <malloc>
 8018b6c:	63a0      	str	r0, [r4, #56]	; 0x38
 8018b6e:	b928      	cbnz	r0, 8018b7c <rand+0x20>
 8018b70:	4602      	mov	r2, r0
 8018b72:	4b13      	ldr	r3, [pc, #76]	; (8018bc0 <rand+0x64>)
 8018b74:	4813      	ldr	r0, [pc, #76]	; (8018bc4 <rand+0x68>)
 8018b76:	214e      	movs	r1, #78	; 0x4e
 8018b78:	f000 f844 	bl	8018c04 <__assert_func>
 8018b7c:	4a12      	ldr	r2, [pc, #72]	; (8018bc8 <rand+0x6c>)
 8018b7e:	4b13      	ldr	r3, [pc, #76]	; (8018bcc <rand+0x70>)
 8018b80:	e9c0 2300 	strd	r2, r3, [r0]
 8018b84:	4b12      	ldr	r3, [pc, #72]	; (8018bd0 <rand+0x74>)
 8018b86:	6083      	str	r3, [r0, #8]
 8018b88:	230b      	movs	r3, #11
 8018b8a:	8183      	strh	r3, [r0, #12]
 8018b8c:	2201      	movs	r2, #1
 8018b8e:	2300      	movs	r3, #0
 8018b90:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018b94:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018b96:	480f      	ldr	r0, [pc, #60]	; (8018bd4 <rand+0x78>)
 8018b98:	690a      	ldr	r2, [r1, #16]
 8018b9a:	694b      	ldr	r3, [r1, #20]
 8018b9c:	4c0e      	ldr	r4, [pc, #56]	; (8018bd8 <rand+0x7c>)
 8018b9e:	4350      	muls	r0, r2
 8018ba0:	fb04 0003 	mla	r0, r4, r3, r0
 8018ba4:	fba2 3404 	umull	r3, r4, r2, r4
 8018ba8:	1c5a      	adds	r2, r3, #1
 8018baa:	4404      	add	r4, r0
 8018bac:	f144 0000 	adc.w	r0, r4, #0
 8018bb0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018bb4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018bb8:	bd10      	pop	{r4, pc}
 8018bba:	bf00      	nop
 8018bbc:	24000044 	.word	0x24000044
 8018bc0:	0801deac 	.word	0x0801deac
 8018bc4:	0801dec3 	.word	0x0801dec3
 8018bc8:	abcd330e 	.word	0xabcd330e
 8018bcc:	e66d1234 	.word	0xe66d1234
 8018bd0:	0005deec 	.word	0x0005deec
 8018bd4:	5851f42d 	.word	0x5851f42d
 8018bd8:	4c957f2d 	.word	0x4c957f2d

08018bdc <strncpy>:
 8018bdc:	b510      	push	{r4, lr}
 8018bde:	3901      	subs	r1, #1
 8018be0:	4603      	mov	r3, r0
 8018be2:	b132      	cbz	r2, 8018bf2 <strncpy+0x16>
 8018be4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018be8:	f803 4b01 	strb.w	r4, [r3], #1
 8018bec:	3a01      	subs	r2, #1
 8018bee:	2c00      	cmp	r4, #0
 8018bf0:	d1f7      	bne.n	8018be2 <strncpy+0x6>
 8018bf2:	441a      	add	r2, r3
 8018bf4:	2100      	movs	r1, #0
 8018bf6:	4293      	cmp	r3, r2
 8018bf8:	d100      	bne.n	8018bfc <strncpy+0x20>
 8018bfa:	bd10      	pop	{r4, pc}
 8018bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8018c00:	e7f9      	b.n	8018bf6 <strncpy+0x1a>
	...

08018c04 <__assert_func>:
 8018c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c06:	4614      	mov	r4, r2
 8018c08:	461a      	mov	r2, r3
 8018c0a:	4b09      	ldr	r3, [pc, #36]	; (8018c30 <__assert_func+0x2c>)
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	4605      	mov	r5, r0
 8018c10:	68d8      	ldr	r0, [r3, #12]
 8018c12:	b14c      	cbz	r4, 8018c28 <__assert_func+0x24>
 8018c14:	4b07      	ldr	r3, [pc, #28]	; (8018c34 <__assert_func+0x30>)
 8018c16:	9100      	str	r1, [sp, #0]
 8018c18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018c1c:	4906      	ldr	r1, [pc, #24]	; (8018c38 <__assert_func+0x34>)
 8018c1e:	462b      	mov	r3, r5
 8018c20:	f000 f8e4 	bl	8018dec <fiprintf>
 8018c24:	f000 fddc 	bl	80197e0 <abort>
 8018c28:	4b04      	ldr	r3, [pc, #16]	; (8018c3c <__assert_func+0x38>)
 8018c2a:	461c      	mov	r4, r3
 8018c2c:	e7f3      	b.n	8018c16 <__assert_func+0x12>
 8018c2e:	bf00      	nop
 8018c30:	24000044 	.word	0x24000044
 8018c34:	0801df22 	.word	0x0801df22
 8018c38:	0801df2f 	.word	0x0801df2f
 8018c3c:	0801df5d 	.word	0x0801df5d

08018c40 <std>:
 8018c40:	2300      	movs	r3, #0
 8018c42:	b510      	push	{r4, lr}
 8018c44:	4604      	mov	r4, r0
 8018c46:	e9c0 3300 	strd	r3, r3, [r0]
 8018c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018c4e:	6083      	str	r3, [r0, #8]
 8018c50:	8181      	strh	r1, [r0, #12]
 8018c52:	6643      	str	r3, [r0, #100]	; 0x64
 8018c54:	81c2      	strh	r2, [r0, #14]
 8018c56:	6183      	str	r3, [r0, #24]
 8018c58:	4619      	mov	r1, r3
 8018c5a:	2208      	movs	r2, #8
 8018c5c:	305c      	adds	r0, #92	; 0x5c
 8018c5e:	f7ff ff5d 	bl	8018b1c <memset>
 8018c62:	4b05      	ldr	r3, [pc, #20]	; (8018c78 <std+0x38>)
 8018c64:	6263      	str	r3, [r4, #36]	; 0x24
 8018c66:	4b05      	ldr	r3, [pc, #20]	; (8018c7c <std+0x3c>)
 8018c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8018c6a:	4b05      	ldr	r3, [pc, #20]	; (8018c80 <std+0x40>)
 8018c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018c6e:	4b05      	ldr	r3, [pc, #20]	; (8018c84 <std+0x44>)
 8018c70:	6224      	str	r4, [r4, #32]
 8018c72:	6323      	str	r3, [r4, #48]	; 0x30
 8018c74:	bd10      	pop	{r4, pc}
 8018c76:	bf00      	nop
 8018c78:	080195b5 	.word	0x080195b5
 8018c7c:	080195d7 	.word	0x080195d7
 8018c80:	0801960f 	.word	0x0801960f
 8018c84:	08019633 	.word	0x08019633

08018c88 <_cleanup_r>:
 8018c88:	4901      	ldr	r1, [pc, #4]	; (8018c90 <_cleanup_r+0x8>)
 8018c8a:	f000 b8c1 	b.w	8018e10 <_fwalk_reent>
 8018c8e:	bf00      	nop
 8018c90:	0801991d 	.word	0x0801991d

08018c94 <__sfmoreglue>:
 8018c94:	b570      	push	{r4, r5, r6, lr}
 8018c96:	1e4a      	subs	r2, r1, #1
 8018c98:	2568      	movs	r5, #104	; 0x68
 8018c9a:	4355      	muls	r5, r2
 8018c9c:	460e      	mov	r6, r1
 8018c9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018ca2:	f000 f92f 	bl	8018f04 <_malloc_r>
 8018ca6:	4604      	mov	r4, r0
 8018ca8:	b140      	cbz	r0, 8018cbc <__sfmoreglue+0x28>
 8018caa:	2100      	movs	r1, #0
 8018cac:	e9c0 1600 	strd	r1, r6, [r0]
 8018cb0:	300c      	adds	r0, #12
 8018cb2:	60a0      	str	r0, [r4, #8]
 8018cb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018cb8:	f7ff ff30 	bl	8018b1c <memset>
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	bd70      	pop	{r4, r5, r6, pc}

08018cc0 <__sfp_lock_acquire>:
 8018cc0:	4801      	ldr	r0, [pc, #4]	; (8018cc8 <__sfp_lock_acquire+0x8>)
 8018cc2:	f000 b8c5 	b.w	8018e50 <__retarget_lock_acquire_recursive>
 8018cc6:	bf00      	nop
 8018cc8:	2400782c 	.word	0x2400782c

08018ccc <__sfp_lock_release>:
 8018ccc:	4801      	ldr	r0, [pc, #4]	; (8018cd4 <__sfp_lock_release+0x8>)
 8018cce:	f000 b8c0 	b.w	8018e52 <__retarget_lock_release_recursive>
 8018cd2:	bf00      	nop
 8018cd4:	2400782c 	.word	0x2400782c

08018cd8 <__sinit_lock_acquire>:
 8018cd8:	4801      	ldr	r0, [pc, #4]	; (8018ce0 <__sinit_lock_acquire+0x8>)
 8018cda:	f000 b8b9 	b.w	8018e50 <__retarget_lock_acquire_recursive>
 8018cde:	bf00      	nop
 8018ce0:	24007827 	.word	0x24007827

08018ce4 <__sinit_lock_release>:
 8018ce4:	4801      	ldr	r0, [pc, #4]	; (8018cec <__sinit_lock_release+0x8>)
 8018ce6:	f000 b8b4 	b.w	8018e52 <__retarget_lock_release_recursive>
 8018cea:	bf00      	nop
 8018cec:	24007827 	.word	0x24007827

08018cf0 <__sinit>:
 8018cf0:	b510      	push	{r4, lr}
 8018cf2:	4604      	mov	r4, r0
 8018cf4:	f7ff fff0 	bl	8018cd8 <__sinit_lock_acquire>
 8018cf8:	69a3      	ldr	r3, [r4, #24]
 8018cfa:	b11b      	cbz	r3, 8018d04 <__sinit+0x14>
 8018cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d00:	f7ff bff0 	b.w	8018ce4 <__sinit_lock_release>
 8018d04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018d08:	6523      	str	r3, [r4, #80]	; 0x50
 8018d0a:	4b13      	ldr	r3, [pc, #76]	; (8018d58 <__sinit+0x68>)
 8018d0c:	4a13      	ldr	r2, [pc, #76]	; (8018d5c <__sinit+0x6c>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	62a2      	str	r2, [r4, #40]	; 0x28
 8018d12:	42a3      	cmp	r3, r4
 8018d14:	bf04      	itt	eq
 8018d16:	2301      	moveq	r3, #1
 8018d18:	61a3      	streq	r3, [r4, #24]
 8018d1a:	4620      	mov	r0, r4
 8018d1c:	f000 f820 	bl	8018d60 <__sfp>
 8018d20:	6060      	str	r0, [r4, #4]
 8018d22:	4620      	mov	r0, r4
 8018d24:	f000 f81c 	bl	8018d60 <__sfp>
 8018d28:	60a0      	str	r0, [r4, #8]
 8018d2a:	4620      	mov	r0, r4
 8018d2c:	f000 f818 	bl	8018d60 <__sfp>
 8018d30:	2200      	movs	r2, #0
 8018d32:	60e0      	str	r0, [r4, #12]
 8018d34:	2104      	movs	r1, #4
 8018d36:	6860      	ldr	r0, [r4, #4]
 8018d38:	f7ff ff82 	bl	8018c40 <std>
 8018d3c:	68a0      	ldr	r0, [r4, #8]
 8018d3e:	2201      	movs	r2, #1
 8018d40:	2109      	movs	r1, #9
 8018d42:	f7ff ff7d 	bl	8018c40 <std>
 8018d46:	68e0      	ldr	r0, [r4, #12]
 8018d48:	2202      	movs	r2, #2
 8018d4a:	2112      	movs	r1, #18
 8018d4c:	f7ff ff78 	bl	8018c40 <std>
 8018d50:	2301      	movs	r3, #1
 8018d52:	61a3      	str	r3, [r4, #24]
 8018d54:	e7d2      	b.n	8018cfc <__sinit+0xc>
 8018d56:	bf00      	nop
 8018d58:	0801dea8 	.word	0x0801dea8
 8018d5c:	08018c89 	.word	0x08018c89

08018d60 <__sfp>:
 8018d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d62:	4607      	mov	r7, r0
 8018d64:	f7ff ffac 	bl	8018cc0 <__sfp_lock_acquire>
 8018d68:	4b1e      	ldr	r3, [pc, #120]	; (8018de4 <__sfp+0x84>)
 8018d6a:	681e      	ldr	r6, [r3, #0]
 8018d6c:	69b3      	ldr	r3, [r6, #24]
 8018d6e:	b913      	cbnz	r3, 8018d76 <__sfp+0x16>
 8018d70:	4630      	mov	r0, r6
 8018d72:	f7ff ffbd 	bl	8018cf0 <__sinit>
 8018d76:	3648      	adds	r6, #72	; 0x48
 8018d78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018d7c:	3b01      	subs	r3, #1
 8018d7e:	d503      	bpl.n	8018d88 <__sfp+0x28>
 8018d80:	6833      	ldr	r3, [r6, #0]
 8018d82:	b30b      	cbz	r3, 8018dc8 <__sfp+0x68>
 8018d84:	6836      	ldr	r6, [r6, #0]
 8018d86:	e7f7      	b.n	8018d78 <__sfp+0x18>
 8018d88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018d8c:	b9d5      	cbnz	r5, 8018dc4 <__sfp+0x64>
 8018d8e:	4b16      	ldr	r3, [pc, #88]	; (8018de8 <__sfp+0x88>)
 8018d90:	60e3      	str	r3, [r4, #12]
 8018d92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018d96:	6665      	str	r5, [r4, #100]	; 0x64
 8018d98:	f000 f859 	bl	8018e4e <__retarget_lock_init_recursive>
 8018d9c:	f7ff ff96 	bl	8018ccc <__sfp_lock_release>
 8018da0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018da4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018da8:	6025      	str	r5, [r4, #0]
 8018daa:	61a5      	str	r5, [r4, #24]
 8018dac:	2208      	movs	r2, #8
 8018dae:	4629      	mov	r1, r5
 8018db0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018db4:	f7ff feb2 	bl	8018b1c <memset>
 8018db8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018dbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018dc0:	4620      	mov	r0, r4
 8018dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dc4:	3468      	adds	r4, #104	; 0x68
 8018dc6:	e7d9      	b.n	8018d7c <__sfp+0x1c>
 8018dc8:	2104      	movs	r1, #4
 8018dca:	4638      	mov	r0, r7
 8018dcc:	f7ff ff62 	bl	8018c94 <__sfmoreglue>
 8018dd0:	4604      	mov	r4, r0
 8018dd2:	6030      	str	r0, [r6, #0]
 8018dd4:	2800      	cmp	r0, #0
 8018dd6:	d1d5      	bne.n	8018d84 <__sfp+0x24>
 8018dd8:	f7ff ff78 	bl	8018ccc <__sfp_lock_release>
 8018ddc:	230c      	movs	r3, #12
 8018dde:	603b      	str	r3, [r7, #0]
 8018de0:	e7ee      	b.n	8018dc0 <__sfp+0x60>
 8018de2:	bf00      	nop
 8018de4:	0801dea8 	.word	0x0801dea8
 8018de8:	ffff0001 	.word	0xffff0001

08018dec <fiprintf>:
 8018dec:	b40e      	push	{r1, r2, r3}
 8018dee:	b503      	push	{r0, r1, lr}
 8018df0:	4601      	mov	r1, r0
 8018df2:	ab03      	add	r3, sp, #12
 8018df4:	4805      	ldr	r0, [pc, #20]	; (8018e0c <fiprintf+0x20>)
 8018df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018dfa:	6800      	ldr	r0, [r0, #0]
 8018dfc:	9301      	str	r3, [sp, #4]
 8018dfe:	f000 f905 	bl	801900c <_vfiprintf_r>
 8018e02:	b002      	add	sp, #8
 8018e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8018e08:	b003      	add	sp, #12
 8018e0a:	4770      	bx	lr
 8018e0c:	24000044 	.word	0x24000044

08018e10 <_fwalk_reent>:
 8018e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e14:	4606      	mov	r6, r0
 8018e16:	4688      	mov	r8, r1
 8018e18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018e1c:	2700      	movs	r7, #0
 8018e1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018e22:	f1b9 0901 	subs.w	r9, r9, #1
 8018e26:	d505      	bpl.n	8018e34 <_fwalk_reent+0x24>
 8018e28:	6824      	ldr	r4, [r4, #0]
 8018e2a:	2c00      	cmp	r4, #0
 8018e2c:	d1f7      	bne.n	8018e1e <_fwalk_reent+0xe>
 8018e2e:	4638      	mov	r0, r7
 8018e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e34:	89ab      	ldrh	r3, [r5, #12]
 8018e36:	2b01      	cmp	r3, #1
 8018e38:	d907      	bls.n	8018e4a <_fwalk_reent+0x3a>
 8018e3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018e3e:	3301      	adds	r3, #1
 8018e40:	d003      	beq.n	8018e4a <_fwalk_reent+0x3a>
 8018e42:	4629      	mov	r1, r5
 8018e44:	4630      	mov	r0, r6
 8018e46:	47c0      	blx	r8
 8018e48:	4307      	orrs	r7, r0
 8018e4a:	3568      	adds	r5, #104	; 0x68
 8018e4c:	e7e9      	b.n	8018e22 <_fwalk_reent+0x12>

08018e4e <__retarget_lock_init_recursive>:
 8018e4e:	4770      	bx	lr

08018e50 <__retarget_lock_acquire_recursive>:
 8018e50:	4770      	bx	lr

08018e52 <__retarget_lock_release_recursive>:
 8018e52:	4770      	bx	lr

08018e54 <malloc>:
 8018e54:	4b02      	ldr	r3, [pc, #8]	; (8018e60 <malloc+0xc>)
 8018e56:	4601      	mov	r1, r0
 8018e58:	6818      	ldr	r0, [r3, #0]
 8018e5a:	f000 b853 	b.w	8018f04 <_malloc_r>
 8018e5e:	bf00      	nop
 8018e60:	24000044 	.word	0x24000044

08018e64 <_free_r>:
 8018e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018e66:	2900      	cmp	r1, #0
 8018e68:	d048      	beq.n	8018efc <_free_r+0x98>
 8018e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018e6e:	9001      	str	r0, [sp, #4]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	f1a1 0404 	sub.w	r4, r1, #4
 8018e76:	bfb8      	it	lt
 8018e78:	18e4      	addlt	r4, r4, r3
 8018e7a:	f000 fe01 	bl	8019a80 <__malloc_lock>
 8018e7e:	4a20      	ldr	r2, [pc, #128]	; (8018f00 <_free_r+0x9c>)
 8018e80:	9801      	ldr	r0, [sp, #4]
 8018e82:	6813      	ldr	r3, [r2, #0]
 8018e84:	4615      	mov	r5, r2
 8018e86:	b933      	cbnz	r3, 8018e96 <_free_r+0x32>
 8018e88:	6063      	str	r3, [r4, #4]
 8018e8a:	6014      	str	r4, [r2, #0]
 8018e8c:	b003      	add	sp, #12
 8018e8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018e92:	f000 bdfb 	b.w	8019a8c <__malloc_unlock>
 8018e96:	42a3      	cmp	r3, r4
 8018e98:	d90b      	bls.n	8018eb2 <_free_r+0x4e>
 8018e9a:	6821      	ldr	r1, [r4, #0]
 8018e9c:	1862      	adds	r2, r4, r1
 8018e9e:	4293      	cmp	r3, r2
 8018ea0:	bf04      	itt	eq
 8018ea2:	681a      	ldreq	r2, [r3, #0]
 8018ea4:	685b      	ldreq	r3, [r3, #4]
 8018ea6:	6063      	str	r3, [r4, #4]
 8018ea8:	bf04      	itt	eq
 8018eaa:	1852      	addeq	r2, r2, r1
 8018eac:	6022      	streq	r2, [r4, #0]
 8018eae:	602c      	str	r4, [r5, #0]
 8018eb0:	e7ec      	b.n	8018e8c <_free_r+0x28>
 8018eb2:	461a      	mov	r2, r3
 8018eb4:	685b      	ldr	r3, [r3, #4]
 8018eb6:	b10b      	cbz	r3, 8018ebc <_free_r+0x58>
 8018eb8:	42a3      	cmp	r3, r4
 8018eba:	d9fa      	bls.n	8018eb2 <_free_r+0x4e>
 8018ebc:	6811      	ldr	r1, [r2, #0]
 8018ebe:	1855      	adds	r5, r2, r1
 8018ec0:	42a5      	cmp	r5, r4
 8018ec2:	d10b      	bne.n	8018edc <_free_r+0x78>
 8018ec4:	6824      	ldr	r4, [r4, #0]
 8018ec6:	4421      	add	r1, r4
 8018ec8:	1854      	adds	r4, r2, r1
 8018eca:	42a3      	cmp	r3, r4
 8018ecc:	6011      	str	r1, [r2, #0]
 8018ece:	d1dd      	bne.n	8018e8c <_free_r+0x28>
 8018ed0:	681c      	ldr	r4, [r3, #0]
 8018ed2:	685b      	ldr	r3, [r3, #4]
 8018ed4:	6053      	str	r3, [r2, #4]
 8018ed6:	4421      	add	r1, r4
 8018ed8:	6011      	str	r1, [r2, #0]
 8018eda:	e7d7      	b.n	8018e8c <_free_r+0x28>
 8018edc:	d902      	bls.n	8018ee4 <_free_r+0x80>
 8018ede:	230c      	movs	r3, #12
 8018ee0:	6003      	str	r3, [r0, #0]
 8018ee2:	e7d3      	b.n	8018e8c <_free_r+0x28>
 8018ee4:	6825      	ldr	r5, [r4, #0]
 8018ee6:	1961      	adds	r1, r4, r5
 8018ee8:	428b      	cmp	r3, r1
 8018eea:	bf04      	itt	eq
 8018eec:	6819      	ldreq	r1, [r3, #0]
 8018eee:	685b      	ldreq	r3, [r3, #4]
 8018ef0:	6063      	str	r3, [r4, #4]
 8018ef2:	bf04      	itt	eq
 8018ef4:	1949      	addeq	r1, r1, r5
 8018ef6:	6021      	streq	r1, [r4, #0]
 8018ef8:	6054      	str	r4, [r2, #4]
 8018efa:	e7c7      	b.n	8018e8c <_free_r+0x28>
 8018efc:	b003      	add	sp, #12
 8018efe:	bd30      	pop	{r4, r5, pc}
 8018f00:	24004218 	.word	0x24004218

08018f04 <_malloc_r>:
 8018f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f06:	1ccd      	adds	r5, r1, #3
 8018f08:	f025 0503 	bic.w	r5, r5, #3
 8018f0c:	3508      	adds	r5, #8
 8018f0e:	2d0c      	cmp	r5, #12
 8018f10:	bf38      	it	cc
 8018f12:	250c      	movcc	r5, #12
 8018f14:	2d00      	cmp	r5, #0
 8018f16:	4606      	mov	r6, r0
 8018f18:	db01      	blt.n	8018f1e <_malloc_r+0x1a>
 8018f1a:	42a9      	cmp	r1, r5
 8018f1c:	d903      	bls.n	8018f26 <_malloc_r+0x22>
 8018f1e:	230c      	movs	r3, #12
 8018f20:	6033      	str	r3, [r6, #0]
 8018f22:	2000      	movs	r0, #0
 8018f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f26:	f000 fdab 	bl	8019a80 <__malloc_lock>
 8018f2a:	4921      	ldr	r1, [pc, #132]	; (8018fb0 <_malloc_r+0xac>)
 8018f2c:	680a      	ldr	r2, [r1, #0]
 8018f2e:	4614      	mov	r4, r2
 8018f30:	b99c      	cbnz	r4, 8018f5a <_malloc_r+0x56>
 8018f32:	4f20      	ldr	r7, [pc, #128]	; (8018fb4 <_malloc_r+0xb0>)
 8018f34:	683b      	ldr	r3, [r7, #0]
 8018f36:	b923      	cbnz	r3, 8018f42 <_malloc_r+0x3e>
 8018f38:	4621      	mov	r1, r4
 8018f3a:	4630      	mov	r0, r6
 8018f3c:	f000 fb2a 	bl	8019594 <_sbrk_r>
 8018f40:	6038      	str	r0, [r7, #0]
 8018f42:	4629      	mov	r1, r5
 8018f44:	4630      	mov	r0, r6
 8018f46:	f000 fb25 	bl	8019594 <_sbrk_r>
 8018f4a:	1c43      	adds	r3, r0, #1
 8018f4c:	d123      	bne.n	8018f96 <_malloc_r+0x92>
 8018f4e:	230c      	movs	r3, #12
 8018f50:	6033      	str	r3, [r6, #0]
 8018f52:	4630      	mov	r0, r6
 8018f54:	f000 fd9a 	bl	8019a8c <__malloc_unlock>
 8018f58:	e7e3      	b.n	8018f22 <_malloc_r+0x1e>
 8018f5a:	6823      	ldr	r3, [r4, #0]
 8018f5c:	1b5b      	subs	r3, r3, r5
 8018f5e:	d417      	bmi.n	8018f90 <_malloc_r+0x8c>
 8018f60:	2b0b      	cmp	r3, #11
 8018f62:	d903      	bls.n	8018f6c <_malloc_r+0x68>
 8018f64:	6023      	str	r3, [r4, #0]
 8018f66:	441c      	add	r4, r3
 8018f68:	6025      	str	r5, [r4, #0]
 8018f6a:	e004      	b.n	8018f76 <_malloc_r+0x72>
 8018f6c:	6863      	ldr	r3, [r4, #4]
 8018f6e:	42a2      	cmp	r2, r4
 8018f70:	bf0c      	ite	eq
 8018f72:	600b      	streq	r3, [r1, #0]
 8018f74:	6053      	strne	r3, [r2, #4]
 8018f76:	4630      	mov	r0, r6
 8018f78:	f000 fd88 	bl	8019a8c <__malloc_unlock>
 8018f7c:	f104 000b 	add.w	r0, r4, #11
 8018f80:	1d23      	adds	r3, r4, #4
 8018f82:	f020 0007 	bic.w	r0, r0, #7
 8018f86:	1ac2      	subs	r2, r0, r3
 8018f88:	d0cc      	beq.n	8018f24 <_malloc_r+0x20>
 8018f8a:	1a1b      	subs	r3, r3, r0
 8018f8c:	50a3      	str	r3, [r4, r2]
 8018f8e:	e7c9      	b.n	8018f24 <_malloc_r+0x20>
 8018f90:	4622      	mov	r2, r4
 8018f92:	6864      	ldr	r4, [r4, #4]
 8018f94:	e7cc      	b.n	8018f30 <_malloc_r+0x2c>
 8018f96:	1cc4      	adds	r4, r0, #3
 8018f98:	f024 0403 	bic.w	r4, r4, #3
 8018f9c:	42a0      	cmp	r0, r4
 8018f9e:	d0e3      	beq.n	8018f68 <_malloc_r+0x64>
 8018fa0:	1a21      	subs	r1, r4, r0
 8018fa2:	4630      	mov	r0, r6
 8018fa4:	f000 faf6 	bl	8019594 <_sbrk_r>
 8018fa8:	3001      	adds	r0, #1
 8018faa:	d1dd      	bne.n	8018f68 <_malloc_r+0x64>
 8018fac:	e7cf      	b.n	8018f4e <_malloc_r+0x4a>
 8018fae:	bf00      	nop
 8018fb0:	24004218 	.word	0x24004218
 8018fb4:	2400421c 	.word	0x2400421c

08018fb8 <__sfputc_r>:
 8018fb8:	6893      	ldr	r3, [r2, #8]
 8018fba:	3b01      	subs	r3, #1
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	b410      	push	{r4}
 8018fc0:	6093      	str	r3, [r2, #8]
 8018fc2:	da08      	bge.n	8018fd6 <__sfputc_r+0x1e>
 8018fc4:	6994      	ldr	r4, [r2, #24]
 8018fc6:	42a3      	cmp	r3, r4
 8018fc8:	db01      	blt.n	8018fce <__sfputc_r+0x16>
 8018fca:	290a      	cmp	r1, #10
 8018fcc:	d103      	bne.n	8018fd6 <__sfputc_r+0x1e>
 8018fce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fd2:	f000 bb33 	b.w	801963c <__swbuf_r>
 8018fd6:	6813      	ldr	r3, [r2, #0]
 8018fd8:	1c58      	adds	r0, r3, #1
 8018fda:	6010      	str	r0, [r2, #0]
 8018fdc:	7019      	strb	r1, [r3, #0]
 8018fde:	4608      	mov	r0, r1
 8018fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fe4:	4770      	bx	lr

08018fe6 <__sfputs_r>:
 8018fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fe8:	4606      	mov	r6, r0
 8018fea:	460f      	mov	r7, r1
 8018fec:	4614      	mov	r4, r2
 8018fee:	18d5      	adds	r5, r2, r3
 8018ff0:	42ac      	cmp	r4, r5
 8018ff2:	d101      	bne.n	8018ff8 <__sfputs_r+0x12>
 8018ff4:	2000      	movs	r0, #0
 8018ff6:	e007      	b.n	8019008 <__sfputs_r+0x22>
 8018ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ffc:	463a      	mov	r2, r7
 8018ffe:	4630      	mov	r0, r6
 8019000:	f7ff ffda 	bl	8018fb8 <__sfputc_r>
 8019004:	1c43      	adds	r3, r0, #1
 8019006:	d1f3      	bne.n	8018ff0 <__sfputs_r+0xa>
 8019008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801900c <_vfiprintf_r>:
 801900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019010:	460d      	mov	r5, r1
 8019012:	b09d      	sub	sp, #116	; 0x74
 8019014:	4614      	mov	r4, r2
 8019016:	4698      	mov	r8, r3
 8019018:	4606      	mov	r6, r0
 801901a:	b118      	cbz	r0, 8019024 <_vfiprintf_r+0x18>
 801901c:	6983      	ldr	r3, [r0, #24]
 801901e:	b90b      	cbnz	r3, 8019024 <_vfiprintf_r+0x18>
 8019020:	f7ff fe66 	bl	8018cf0 <__sinit>
 8019024:	4b89      	ldr	r3, [pc, #548]	; (801924c <_vfiprintf_r+0x240>)
 8019026:	429d      	cmp	r5, r3
 8019028:	d11b      	bne.n	8019062 <_vfiprintf_r+0x56>
 801902a:	6875      	ldr	r5, [r6, #4]
 801902c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801902e:	07d9      	lsls	r1, r3, #31
 8019030:	d405      	bmi.n	801903e <_vfiprintf_r+0x32>
 8019032:	89ab      	ldrh	r3, [r5, #12]
 8019034:	059a      	lsls	r2, r3, #22
 8019036:	d402      	bmi.n	801903e <_vfiprintf_r+0x32>
 8019038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801903a:	f7ff ff09 	bl	8018e50 <__retarget_lock_acquire_recursive>
 801903e:	89ab      	ldrh	r3, [r5, #12]
 8019040:	071b      	lsls	r3, r3, #28
 8019042:	d501      	bpl.n	8019048 <_vfiprintf_r+0x3c>
 8019044:	692b      	ldr	r3, [r5, #16]
 8019046:	b9eb      	cbnz	r3, 8019084 <_vfiprintf_r+0x78>
 8019048:	4629      	mov	r1, r5
 801904a:	4630      	mov	r0, r6
 801904c:	f000 fb5a 	bl	8019704 <__swsetup_r>
 8019050:	b1c0      	cbz	r0, 8019084 <_vfiprintf_r+0x78>
 8019052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019054:	07dc      	lsls	r4, r3, #31
 8019056:	d50e      	bpl.n	8019076 <_vfiprintf_r+0x6a>
 8019058:	f04f 30ff 	mov.w	r0, #4294967295
 801905c:	b01d      	add	sp, #116	; 0x74
 801905e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019062:	4b7b      	ldr	r3, [pc, #492]	; (8019250 <_vfiprintf_r+0x244>)
 8019064:	429d      	cmp	r5, r3
 8019066:	d101      	bne.n	801906c <_vfiprintf_r+0x60>
 8019068:	68b5      	ldr	r5, [r6, #8]
 801906a:	e7df      	b.n	801902c <_vfiprintf_r+0x20>
 801906c:	4b79      	ldr	r3, [pc, #484]	; (8019254 <_vfiprintf_r+0x248>)
 801906e:	429d      	cmp	r5, r3
 8019070:	bf08      	it	eq
 8019072:	68f5      	ldreq	r5, [r6, #12]
 8019074:	e7da      	b.n	801902c <_vfiprintf_r+0x20>
 8019076:	89ab      	ldrh	r3, [r5, #12]
 8019078:	0598      	lsls	r0, r3, #22
 801907a:	d4ed      	bmi.n	8019058 <_vfiprintf_r+0x4c>
 801907c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801907e:	f7ff fee8 	bl	8018e52 <__retarget_lock_release_recursive>
 8019082:	e7e9      	b.n	8019058 <_vfiprintf_r+0x4c>
 8019084:	2300      	movs	r3, #0
 8019086:	9309      	str	r3, [sp, #36]	; 0x24
 8019088:	2320      	movs	r3, #32
 801908a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801908e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019092:	2330      	movs	r3, #48	; 0x30
 8019094:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019258 <_vfiprintf_r+0x24c>
 8019098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801909c:	f04f 0901 	mov.w	r9, #1
 80190a0:	4623      	mov	r3, r4
 80190a2:	469a      	mov	sl, r3
 80190a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190a8:	b10a      	cbz	r2, 80190ae <_vfiprintf_r+0xa2>
 80190aa:	2a25      	cmp	r2, #37	; 0x25
 80190ac:	d1f9      	bne.n	80190a2 <_vfiprintf_r+0x96>
 80190ae:	ebba 0b04 	subs.w	fp, sl, r4
 80190b2:	d00b      	beq.n	80190cc <_vfiprintf_r+0xc0>
 80190b4:	465b      	mov	r3, fp
 80190b6:	4622      	mov	r2, r4
 80190b8:	4629      	mov	r1, r5
 80190ba:	4630      	mov	r0, r6
 80190bc:	f7ff ff93 	bl	8018fe6 <__sfputs_r>
 80190c0:	3001      	adds	r0, #1
 80190c2:	f000 80aa 	beq.w	801921a <_vfiprintf_r+0x20e>
 80190c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190c8:	445a      	add	r2, fp
 80190ca:	9209      	str	r2, [sp, #36]	; 0x24
 80190cc:	f89a 3000 	ldrb.w	r3, [sl]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	f000 80a2 	beq.w	801921a <_vfiprintf_r+0x20e>
 80190d6:	2300      	movs	r3, #0
 80190d8:	f04f 32ff 	mov.w	r2, #4294967295
 80190dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190e0:	f10a 0a01 	add.w	sl, sl, #1
 80190e4:	9304      	str	r3, [sp, #16]
 80190e6:	9307      	str	r3, [sp, #28]
 80190e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80190ec:	931a      	str	r3, [sp, #104]	; 0x68
 80190ee:	4654      	mov	r4, sl
 80190f0:	2205      	movs	r2, #5
 80190f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190f6:	4858      	ldr	r0, [pc, #352]	; (8019258 <_vfiprintf_r+0x24c>)
 80190f8:	f7e7 f912 	bl	8000320 <memchr>
 80190fc:	9a04      	ldr	r2, [sp, #16]
 80190fe:	b9d8      	cbnz	r0, 8019138 <_vfiprintf_r+0x12c>
 8019100:	06d1      	lsls	r1, r2, #27
 8019102:	bf44      	itt	mi
 8019104:	2320      	movmi	r3, #32
 8019106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801910a:	0713      	lsls	r3, r2, #28
 801910c:	bf44      	itt	mi
 801910e:	232b      	movmi	r3, #43	; 0x2b
 8019110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019114:	f89a 3000 	ldrb.w	r3, [sl]
 8019118:	2b2a      	cmp	r3, #42	; 0x2a
 801911a:	d015      	beq.n	8019148 <_vfiprintf_r+0x13c>
 801911c:	9a07      	ldr	r2, [sp, #28]
 801911e:	4654      	mov	r4, sl
 8019120:	2000      	movs	r0, #0
 8019122:	f04f 0c0a 	mov.w	ip, #10
 8019126:	4621      	mov	r1, r4
 8019128:	f811 3b01 	ldrb.w	r3, [r1], #1
 801912c:	3b30      	subs	r3, #48	; 0x30
 801912e:	2b09      	cmp	r3, #9
 8019130:	d94e      	bls.n	80191d0 <_vfiprintf_r+0x1c4>
 8019132:	b1b0      	cbz	r0, 8019162 <_vfiprintf_r+0x156>
 8019134:	9207      	str	r2, [sp, #28]
 8019136:	e014      	b.n	8019162 <_vfiprintf_r+0x156>
 8019138:	eba0 0308 	sub.w	r3, r0, r8
 801913c:	fa09 f303 	lsl.w	r3, r9, r3
 8019140:	4313      	orrs	r3, r2
 8019142:	9304      	str	r3, [sp, #16]
 8019144:	46a2      	mov	sl, r4
 8019146:	e7d2      	b.n	80190ee <_vfiprintf_r+0xe2>
 8019148:	9b03      	ldr	r3, [sp, #12]
 801914a:	1d19      	adds	r1, r3, #4
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	9103      	str	r1, [sp, #12]
 8019150:	2b00      	cmp	r3, #0
 8019152:	bfbb      	ittet	lt
 8019154:	425b      	neglt	r3, r3
 8019156:	f042 0202 	orrlt.w	r2, r2, #2
 801915a:	9307      	strge	r3, [sp, #28]
 801915c:	9307      	strlt	r3, [sp, #28]
 801915e:	bfb8      	it	lt
 8019160:	9204      	strlt	r2, [sp, #16]
 8019162:	7823      	ldrb	r3, [r4, #0]
 8019164:	2b2e      	cmp	r3, #46	; 0x2e
 8019166:	d10c      	bne.n	8019182 <_vfiprintf_r+0x176>
 8019168:	7863      	ldrb	r3, [r4, #1]
 801916a:	2b2a      	cmp	r3, #42	; 0x2a
 801916c:	d135      	bne.n	80191da <_vfiprintf_r+0x1ce>
 801916e:	9b03      	ldr	r3, [sp, #12]
 8019170:	1d1a      	adds	r2, r3, #4
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	9203      	str	r2, [sp, #12]
 8019176:	2b00      	cmp	r3, #0
 8019178:	bfb8      	it	lt
 801917a:	f04f 33ff 	movlt.w	r3, #4294967295
 801917e:	3402      	adds	r4, #2
 8019180:	9305      	str	r3, [sp, #20]
 8019182:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019268 <_vfiprintf_r+0x25c>
 8019186:	7821      	ldrb	r1, [r4, #0]
 8019188:	2203      	movs	r2, #3
 801918a:	4650      	mov	r0, sl
 801918c:	f7e7 f8c8 	bl	8000320 <memchr>
 8019190:	b140      	cbz	r0, 80191a4 <_vfiprintf_r+0x198>
 8019192:	2340      	movs	r3, #64	; 0x40
 8019194:	eba0 000a 	sub.w	r0, r0, sl
 8019198:	fa03 f000 	lsl.w	r0, r3, r0
 801919c:	9b04      	ldr	r3, [sp, #16]
 801919e:	4303      	orrs	r3, r0
 80191a0:	3401      	adds	r4, #1
 80191a2:	9304      	str	r3, [sp, #16]
 80191a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191a8:	482c      	ldr	r0, [pc, #176]	; (801925c <_vfiprintf_r+0x250>)
 80191aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191ae:	2206      	movs	r2, #6
 80191b0:	f7e7 f8b6 	bl	8000320 <memchr>
 80191b4:	2800      	cmp	r0, #0
 80191b6:	d03f      	beq.n	8019238 <_vfiprintf_r+0x22c>
 80191b8:	4b29      	ldr	r3, [pc, #164]	; (8019260 <_vfiprintf_r+0x254>)
 80191ba:	bb1b      	cbnz	r3, 8019204 <_vfiprintf_r+0x1f8>
 80191bc:	9b03      	ldr	r3, [sp, #12]
 80191be:	3307      	adds	r3, #7
 80191c0:	f023 0307 	bic.w	r3, r3, #7
 80191c4:	3308      	adds	r3, #8
 80191c6:	9303      	str	r3, [sp, #12]
 80191c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191ca:	443b      	add	r3, r7
 80191cc:	9309      	str	r3, [sp, #36]	; 0x24
 80191ce:	e767      	b.n	80190a0 <_vfiprintf_r+0x94>
 80191d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80191d4:	460c      	mov	r4, r1
 80191d6:	2001      	movs	r0, #1
 80191d8:	e7a5      	b.n	8019126 <_vfiprintf_r+0x11a>
 80191da:	2300      	movs	r3, #0
 80191dc:	3401      	adds	r4, #1
 80191de:	9305      	str	r3, [sp, #20]
 80191e0:	4619      	mov	r1, r3
 80191e2:	f04f 0c0a 	mov.w	ip, #10
 80191e6:	4620      	mov	r0, r4
 80191e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80191ec:	3a30      	subs	r2, #48	; 0x30
 80191ee:	2a09      	cmp	r2, #9
 80191f0:	d903      	bls.n	80191fa <_vfiprintf_r+0x1ee>
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d0c5      	beq.n	8019182 <_vfiprintf_r+0x176>
 80191f6:	9105      	str	r1, [sp, #20]
 80191f8:	e7c3      	b.n	8019182 <_vfiprintf_r+0x176>
 80191fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80191fe:	4604      	mov	r4, r0
 8019200:	2301      	movs	r3, #1
 8019202:	e7f0      	b.n	80191e6 <_vfiprintf_r+0x1da>
 8019204:	ab03      	add	r3, sp, #12
 8019206:	9300      	str	r3, [sp, #0]
 8019208:	462a      	mov	r2, r5
 801920a:	4b16      	ldr	r3, [pc, #88]	; (8019264 <_vfiprintf_r+0x258>)
 801920c:	a904      	add	r1, sp, #16
 801920e:	4630      	mov	r0, r6
 8019210:	f3af 8000 	nop.w
 8019214:	4607      	mov	r7, r0
 8019216:	1c78      	adds	r0, r7, #1
 8019218:	d1d6      	bne.n	80191c8 <_vfiprintf_r+0x1bc>
 801921a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801921c:	07d9      	lsls	r1, r3, #31
 801921e:	d405      	bmi.n	801922c <_vfiprintf_r+0x220>
 8019220:	89ab      	ldrh	r3, [r5, #12]
 8019222:	059a      	lsls	r2, r3, #22
 8019224:	d402      	bmi.n	801922c <_vfiprintf_r+0x220>
 8019226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019228:	f7ff fe13 	bl	8018e52 <__retarget_lock_release_recursive>
 801922c:	89ab      	ldrh	r3, [r5, #12]
 801922e:	065b      	lsls	r3, r3, #25
 8019230:	f53f af12 	bmi.w	8019058 <_vfiprintf_r+0x4c>
 8019234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019236:	e711      	b.n	801905c <_vfiprintf_r+0x50>
 8019238:	ab03      	add	r3, sp, #12
 801923a:	9300      	str	r3, [sp, #0]
 801923c:	462a      	mov	r2, r5
 801923e:	4b09      	ldr	r3, [pc, #36]	; (8019264 <_vfiprintf_r+0x258>)
 8019240:	a904      	add	r1, sp, #16
 8019242:	4630      	mov	r0, r6
 8019244:	f000 f880 	bl	8019348 <_printf_i>
 8019248:	e7e4      	b.n	8019214 <_vfiprintf_r+0x208>
 801924a:	bf00      	nop
 801924c:	0801df80 	.word	0x0801df80
 8019250:	0801dfa0 	.word	0x0801dfa0
 8019254:	0801df60 	.word	0x0801df60
 8019258:	0801dfc0 	.word	0x0801dfc0
 801925c:	0801dfca 	.word	0x0801dfca
 8019260:	00000000 	.word	0x00000000
 8019264:	08018fe7 	.word	0x08018fe7
 8019268:	0801dfc6 	.word	0x0801dfc6

0801926c <_printf_common>:
 801926c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019270:	4616      	mov	r6, r2
 8019272:	4699      	mov	r9, r3
 8019274:	688a      	ldr	r2, [r1, #8]
 8019276:	690b      	ldr	r3, [r1, #16]
 8019278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801927c:	4293      	cmp	r3, r2
 801927e:	bfb8      	it	lt
 8019280:	4613      	movlt	r3, r2
 8019282:	6033      	str	r3, [r6, #0]
 8019284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019288:	4607      	mov	r7, r0
 801928a:	460c      	mov	r4, r1
 801928c:	b10a      	cbz	r2, 8019292 <_printf_common+0x26>
 801928e:	3301      	adds	r3, #1
 8019290:	6033      	str	r3, [r6, #0]
 8019292:	6823      	ldr	r3, [r4, #0]
 8019294:	0699      	lsls	r1, r3, #26
 8019296:	bf42      	ittt	mi
 8019298:	6833      	ldrmi	r3, [r6, #0]
 801929a:	3302      	addmi	r3, #2
 801929c:	6033      	strmi	r3, [r6, #0]
 801929e:	6825      	ldr	r5, [r4, #0]
 80192a0:	f015 0506 	ands.w	r5, r5, #6
 80192a4:	d106      	bne.n	80192b4 <_printf_common+0x48>
 80192a6:	f104 0a19 	add.w	sl, r4, #25
 80192aa:	68e3      	ldr	r3, [r4, #12]
 80192ac:	6832      	ldr	r2, [r6, #0]
 80192ae:	1a9b      	subs	r3, r3, r2
 80192b0:	42ab      	cmp	r3, r5
 80192b2:	dc26      	bgt.n	8019302 <_printf_common+0x96>
 80192b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80192b8:	1e13      	subs	r3, r2, #0
 80192ba:	6822      	ldr	r2, [r4, #0]
 80192bc:	bf18      	it	ne
 80192be:	2301      	movne	r3, #1
 80192c0:	0692      	lsls	r2, r2, #26
 80192c2:	d42b      	bmi.n	801931c <_printf_common+0xb0>
 80192c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80192c8:	4649      	mov	r1, r9
 80192ca:	4638      	mov	r0, r7
 80192cc:	47c0      	blx	r8
 80192ce:	3001      	adds	r0, #1
 80192d0:	d01e      	beq.n	8019310 <_printf_common+0xa4>
 80192d2:	6823      	ldr	r3, [r4, #0]
 80192d4:	68e5      	ldr	r5, [r4, #12]
 80192d6:	6832      	ldr	r2, [r6, #0]
 80192d8:	f003 0306 	and.w	r3, r3, #6
 80192dc:	2b04      	cmp	r3, #4
 80192de:	bf08      	it	eq
 80192e0:	1aad      	subeq	r5, r5, r2
 80192e2:	68a3      	ldr	r3, [r4, #8]
 80192e4:	6922      	ldr	r2, [r4, #16]
 80192e6:	bf0c      	ite	eq
 80192e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80192ec:	2500      	movne	r5, #0
 80192ee:	4293      	cmp	r3, r2
 80192f0:	bfc4      	itt	gt
 80192f2:	1a9b      	subgt	r3, r3, r2
 80192f4:	18ed      	addgt	r5, r5, r3
 80192f6:	2600      	movs	r6, #0
 80192f8:	341a      	adds	r4, #26
 80192fa:	42b5      	cmp	r5, r6
 80192fc:	d11a      	bne.n	8019334 <_printf_common+0xc8>
 80192fe:	2000      	movs	r0, #0
 8019300:	e008      	b.n	8019314 <_printf_common+0xa8>
 8019302:	2301      	movs	r3, #1
 8019304:	4652      	mov	r2, sl
 8019306:	4649      	mov	r1, r9
 8019308:	4638      	mov	r0, r7
 801930a:	47c0      	blx	r8
 801930c:	3001      	adds	r0, #1
 801930e:	d103      	bne.n	8019318 <_printf_common+0xac>
 8019310:	f04f 30ff 	mov.w	r0, #4294967295
 8019314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019318:	3501      	adds	r5, #1
 801931a:	e7c6      	b.n	80192aa <_printf_common+0x3e>
 801931c:	18e1      	adds	r1, r4, r3
 801931e:	1c5a      	adds	r2, r3, #1
 8019320:	2030      	movs	r0, #48	; 0x30
 8019322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019326:	4422      	add	r2, r4
 8019328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801932c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019330:	3302      	adds	r3, #2
 8019332:	e7c7      	b.n	80192c4 <_printf_common+0x58>
 8019334:	2301      	movs	r3, #1
 8019336:	4622      	mov	r2, r4
 8019338:	4649      	mov	r1, r9
 801933a:	4638      	mov	r0, r7
 801933c:	47c0      	blx	r8
 801933e:	3001      	adds	r0, #1
 8019340:	d0e6      	beq.n	8019310 <_printf_common+0xa4>
 8019342:	3601      	adds	r6, #1
 8019344:	e7d9      	b.n	80192fa <_printf_common+0x8e>
	...

08019348 <_printf_i>:
 8019348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801934c:	460c      	mov	r4, r1
 801934e:	4691      	mov	r9, r2
 8019350:	7e27      	ldrb	r7, [r4, #24]
 8019352:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019354:	2f78      	cmp	r7, #120	; 0x78
 8019356:	4680      	mov	r8, r0
 8019358:	469a      	mov	sl, r3
 801935a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801935e:	d807      	bhi.n	8019370 <_printf_i+0x28>
 8019360:	2f62      	cmp	r7, #98	; 0x62
 8019362:	d80a      	bhi.n	801937a <_printf_i+0x32>
 8019364:	2f00      	cmp	r7, #0
 8019366:	f000 80d8 	beq.w	801951a <_printf_i+0x1d2>
 801936a:	2f58      	cmp	r7, #88	; 0x58
 801936c:	f000 80a3 	beq.w	80194b6 <_printf_i+0x16e>
 8019370:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019378:	e03a      	b.n	80193f0 <_printf_i+0xa8>
 801937a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801937e:	2b15      	cmp	r3, #21
 8019380:	d8f6      	bhi.n	8019370 <_printf_i+0x28>
 8019382:	a001      	add	r0, pc, #4	; (adr r0, 8019388 <_printf_i+0x40>)
 8019384:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019388:	080193e1 	.word	0x080193e1
 801938c:	080193f5 	.word	0x080193f5
 8019390:	08019371 	.word	0x08019371
 8019394:	08019371 	.word	0x08019371
 8019398:	08019371 	.word	0x08019371
 801939c:	08019371 	.word	0x08019371
 80193a0:	080193f5 	.word	0x080193f5
 80193a4:	08019371 	.word	0x08019371
 80193a8:	08019371 	.word	0x08019371
 80193ac:	08019371 	.word	0x08019371
 80193b0:	08019371 	.word	0x08019371
 80193b4:	08019501 	.word	0x08019501
 80193b8:	08019425 	.word	0x08019425
 80193bc:	080194e3 	.word	0x080194e3
 80193c0:	08019371 	.word	0x08019371
 80193c4:	08019371 	.word	0x08019371
 80193c8:	08019523 	.word	0x08019523
 80193cc:	08019371 	.word	0x08019371
 80193d0:	08019425 	.word	0x08019425
 80193d4:	08019371 	.word	0x08019371
 80193d8:	08019371 	.word	0x08019371
 80193dc:	080194eb 	.word	0x080194eb
 80193e0:	680b      	ldr	r3, [r1, #0]
 80193e2:	1d1a      	adds	r2, r3, #4
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	600a      	str	r2, [r1, #0]
 80193e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80193ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80193f0:	2301      	movs	r3, #1
 80193f2:	e0a3      	b.n	801953c <_printf_i+0x1f4>
 80193f4:	6825      	ldr	r5, [r4, #0]
 80193f6:	6808      	ldr	r0, [r1, #0]
 80193f8:	062e      	lsls	r6, r5, #24
 80193fa:	f100 0304 	add.w	r3, r0, #4
 80193fe:	d50a      	bpl.n	8019416 <_printf_i+0xce>
 8019400:	6805      	ldr	r5, [r0, #0]
 8019402:	600b      	str	r3, [r1, #0]
 8019404:	2d00      	cmp	r5, #0
 8019406:	da03      	bge.n	8019410 <_printf_i+0xc8>
 8019408:	232d      	movs	r3, #45	; 0x2d
 801940a:	426d      	negs	r5, r5
 801940c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019410:	485e      	ldr	r0, [pc, #376]	; (801958c <_printf_i+0x244>)
 8019412:	230a      	movs	r3, #10
 8019414:	e019      	b.n	801944a <_printf_i+0x102>
 8019416:	f015 0f40 	tst.w	r5, #64	; 0x40
 801941a:	6805      	ldr	r5, [r0, #0]
 801941c:	600b      	str	r3, [r1, #0]
 801941e:	bf18      	it	ne
 8019420:	b22d      	sxthne	r5, r5
 8019422:	e7ef      	b.n	8019404 <_printf_i+0xbc>
 8019424:	680b      	ldr	r3, [r1, #0]
 8019426:	6825      	ldr	r5, [r4, #0]
 8019428:	1d18      	adds	r0, r3, #4
 801942a:	6008      	str	r0, [r1, #0]
 801942c:	0628      	lsls	r0, r5, #24
 801942e:	d501      	bpl.n	8019434 <_printf_i+0xec>
 8019430:	681d      	ldr	r5, [r3, #0]
 8019432:	e002      	b.n	801943a <_printf_i+0xf2>
 8019434:	0669      	lsls	r1, r5, #25
 8019436:	d5fb      	bpl.n	8019430 <_printf_i+0xe8>
 8019438:	881d      	ldrh	r5, [r3, #0]
 801943a:	4854      	ldr	r0, [pc, #336]	; (801958c <_printf_i+0x244>)
 801943c:	2f6f      	cmp	r7, #111	; 0x6f
 801943e:	bf0c      	ite	eq
 8019440:	2308      	moveq	r3, #8
 8019442:	230a      	movne	r3, #10
 8019444:	2100      	movs	r1, #0
 8019446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801944a:	6866      	ldr	r6, [r4, #4]
 801944c:	60a6      	str	r6, [r4, #8]
 801944e:	2e00      	cmp	r6, #0
 8019450:	bfa2      	ittt	ge
 8019452:	6821      	ldrge	r1, [r4, #0]
 8019454:	f021 0104 	bicge.w	r1, r1, #4
 8019458:	6021      	strge	r1, [r4, #0]
 801945a:	b90d      	cbnz	r5, 8019460 <_printf_i+0x118>
 801945c:	2e00      	cmp	r6, #0
 801945e:	d04d      	beq.n	80194fc <_printf_i+0x1b4>
 8019460:	4616      	mov	r6, r2
 8019462:	fbb5 f1f3 	udiv	r1, r5, r3
 8019466:	fb03 5711 	mls	r7, r3, r1, r5
 801946a:	5dc7      	ldrb	r7, [r0, r7]
 801946c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019470:	462f      	mov	r7, r5
 8019472:	42bb      	cmp	r3, r7
 8019474:	460d      	mov	r5, r1
 8019476:	d9f4      	bls.n	8019462 <_printf_i+0x11a>
 8019478:	2b08      	cmp	r3, #8
 801947a:	d10b      	bne.n	8019494 <_printf_i+0x14c>
 801947c:	6823      	ldr	r3, [r4, #0]
 801947e:	07df      	lsls	r7, r3, #31
 8019480:	d508      	bpl.n	8019494 <_printf_i+0x14c>
 8019482:	6923      	ldr	r3, [r4, #16]
 8019484:	6861      	ldr	r1, [r4, #4]
 8019486:	4299      	cmp	r1, r3
 8019488:	bfde      	ittt	le
 801948a:	2330      	movle	r3, #48	; 0x30
 801948c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019490:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019494:	1b92      	subs	r2, r2, r6
 8019496:	6122      	str	r2, [r4, #16]
 8019498:	f8cd a000 	str.w	sl, [sp]
 801949c:	464b      	mov	r3, r9
 801949e:	aa03      	add	r2, sp, #12
 80194a0:	4621      	mov	r1, r4
 80194a2:	4640      	mov	r0, r8
 80194a4:	f7ff fee2 	bl	801926c <_printf_common>
 80194a8:	3001      	adds	r0, #1
 80194aa:	d14c      	bne.n	8019546 <_printf_i+0x1fe>
 80194ac:	f04f 30ff 	mov.w	r0, #4294967295
 80194b0:	b004      	add	sp, #16
 80194b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194b6:	4835      	ldr	r0, [pc, #212]	; (801958c <_printf_i+0x244>)
 80194b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80194bc:	6823      	ldr	r3, [r4, #0]
 80194be:	680e      	ldr	r6, [r1, #0]
 80194c0:	061f      	lsls	r7, r3, #24
 80194c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80194c6:	600e      	str	r6, [r1, #0]
 80194c8:	d514      	bpl.n	80194f4 <_printf_i+0x1ac>
 80194ca:	07d9      	lsls	r1, r3, #31
 80194cc:	bf44      	itt	mi
 80194ce:	f043 0320 	orrmi.w	r3, r3, #32
 80194d2:	6023      	strmi	r3, [r4, #0]
 80194d4:	b91d      	cbnz	r5, 80194de <_printf_i+0x196>
 80194d6:	6823      	ldr	r3, [r4, #0]
 80194d8:	f023 0320 	bic.w	r3, r3, #32
 80194dc:	6023      	str	r3, [r4, #0]
 80194de:	2310      	movs	r3, #16
 80194e0:	e7b0      	b.n	8019444 <_printf_i+0xfc>
 80194e2:	6823      	ldr	r3, [r4, #0]
 80194e4:	f043 0320 	orr.w	r3, r3, #32
 80194e8:	6023      	str	r3, [r4, #0]
 80194ea:	2378      	movs	r3, #120	; 0x78
 80194ec:	4828      	ldr	r0, [pc, #160]	; (8019590 <_printf_i+0x248>)
 80194ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80194f2:	e7e3      	b.n	80194bc <_printf_i+0x174>
 80194f4:	065e      	lsls	r6, r3, #25
 80194f6:	bf48      	it	mi
 80194f8:	b2ad      	uxthmi	r5, r5
 80194fa:	e7e6      	b.n	80194ca <_printf_i+0x182>
 80194fc:	4616      	mov	r6, r2
 80194fe:	e7bb      	b.n	8019478 <_printf_i+0x130>
 8019500:	680b      	ldr	r3, [r1, #0]
 8019502:	6826      	ldr	r6, [r4, #0]
 8019504:	6960      	ldr	r0, [r4, #20]
 8019506:	1d1d      	adds	r5, r3, #4
 8019508:	600d      	str	r5, [r1, #0]
 801950a:	0635      	lsls	r5, r6, #24
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	d501      	bpl.n	8019514 <_printf_i+0x1cc>
 8019510:	6018      	str	r0, [r3, #0]
 8019512:	e002      	b.n	801951a <_printf_i+0x1d2>
 8019514:	0671      	lsls	r1, r6, #25
 8019516:	d5fb      	bpl.n	8019510 <_printf_i+0x1c8>
 8019518:	8018      	strh	r0, [r3, #0]
 801951a:	2300      	movs	r3, #0
 801951c:	6123      	str	r3, [r4, #16]
 801951e:	4616      	mov	r6, r2
 8019520:	e7ba      	b.n	8019498 <_printf_i+0x150>
 8019522:	680b      	ldr	r3, [r1, #0]
 8019524:	1d1a      	adds	r2, r3, #4
 8019526:	600a      	str	r2, [r1, #0]
 8019528:	681e      	ldr	r6, [r3, #0]
 801952a:	6862      	ldr	r2, [r4, #4]
 801952c:	2100      	movs	r1, #0
 801952e:	4630      	mov	r0, r6
 8019530:	f7e6 fef6 	bl	8000320 <memchr>
 8019534:	b108      	cbz	r0, 801953a <_printf_i+0x1f2>
 8019536:	1b80      	subs	r0, r0, r6
 8019538:	6060      	str	r0, [r4, #4]
 801953a:	6863      	ldr	r3, [r4, #4]
 801953c:	6123      	str	r3, [r4, #16]
 801953e:	2300      	movs	r3, #0
 8019540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019544:	e7a8      	b.n	8019498 <_printf_i+0x150>
 8019546:	6923      	ldr	r3, [r4, #16]
 8019548:	4632      	mov	r2, r6
 801954a:	4649      	mov	r1, r9
 801954c:	4640      	mov	r0, r8
 801954e:	47d0      	blx	sl
 8019550:	3001      	adds	r0, #1
 8019552:	d0ab      	beq.n	80194ac <_printf_i+0x164>
 8019554:	6823      	ldr	r3, [r4, #0]
 8019556:	079b      	lsls	r3, r3, #30
 8019558:	d413      	bmi.n	8019582 <_printf_i+0x23a>
 801955a:	68e0      	ldr	r0, [r4, #12]
 801955c:	9b03      	ldr	r3, [sp, #12]
 801955e:	4298      	cmp	r0, r3
 8019560:	bfb8      	it	lt
 8019562:	4618      	movlt	r0, r3
 8019564:	e7a4      	b.n	80194b0 <_printf_i+0x168>
 8019566:	2301      	movs	r3, #1
 8019568:	4632      	mov	r2, r6
 801956a:	4649      	mov	r1, r9
 801956c:	4640      	mov	r0, r8
 801956e:	47d0      	blx	sl
 8019570:	3001      	adds	r0, #1
 8019572:	d09b      	beq.n	80194ac <_printf_i+0x164>
 8019574:	3501      	adds	r5, #1
 8019576:	68e3      	ldr	r3, [r4, #12]
 8019578:	9903      	ldr	r1, [sp, #12]
 801957a:	1a5b      	subs	r3, r3, r1
 801957c:	42ab      	cmp	r3, r5
 801957e:	dcf2      	bgt.n	8019566 <_printf_i+0x21e>
 8019580:	e7eb      	b.n	801955a <_printf_i+0x212>
 8019582:	2500      	movs	r5, #0
 8019584:	f104 0619 	add.w	r6, r4, #25
 8019588:	e7f5      	b.n	8019576 <_printf_i+0x22e>
 801958a:	bf00      	nop
 801958c:	0801dfd1 	.word	0x0801dfd1
 8019590:	0801dfe2 	.word	0x0801dfe2

08019594 <_sbrk_r>:
 8019594:	b538      	push	{r3, r4, r5, lr}
 8019596:	4d06      	ldr	r5, [pc, #24]	; (80195b0 <_sbrk_r+0x1c>)
 8019598:	2300      	movs	r3, #0
 801959a:	4604      	mov	r4, r0
 801959c:	4608      	mov	r0, r1
 801959e:	602b      	str	r3, [r5, #0]
 80195a0:	f7e8 fab2 	bl	8001b08 <_sbrk>
 80195a4:	1c43      	adds	r3, r0, #1
 80195a6:	d102      	bne.n	80195ae <_sbrk_r+0x1a>
 80195a8:	682b      	ldr	r3, [r5, #0]
 80195aa:	b103      	cbz	r3, 80195ae <_sbrk_r+0x1a>
 80195ac:	6023      	str	r3, [r4, #0]
 80195ae:	bd38      	pop	{r3, r4, r5, pc}
 80195b0:	2400781c 	.word	0x2400781c

080195b4 <__sread>:
 80195b4:	b510      	push	{r4, lr}
 80195b6:	460c      	mov	r4, r1
 80195b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195bc:	f000 fa6c 	bl	8019a98 <_read_r>
 80195c0:	2800      	cmp	r0, #0
 80195c2:	bfab      	itete	ge
 80195c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80195c6:	89a3      	ldrhlt	r3, [r4, #12]
 80195c8:	181b      	addge	r3, r3, r0
 80195ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80195ce:	bfac      	ite	ge
 80195d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80195d2:	81a3      	strhlt	r3, [r4, #12]
 80195d4:	bd10      	pop	{r4, pc}

080195d6 <__swrite>:
 80195d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195da:	461f      	mov	r7, r3
 80195dc:	898b      	ldrh	r3, [r1, #12]
 80195de:	05db      	lsls	r3, r3, #23
 80195e0:	4605      	mov	r5, r0
 80195e2:	460c      	mov	r4, r1
 80195e4:	4616      	mov	r6, r2
 80195e6:	d505      	bpl.n	80195f4 <__swrite+0x1e>
 80195e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195ec:	2302      	movs	r3, #2
 80195ee:	2200      	movs	r2, #0
 80195f0:	f000 f9d0 	bl	8019994 <_lseek_r>
 80195f4:	89a3      	ldrh	r3, [r4, #12]
 80195f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80195fe:	81a3      	strh	r3, [r4, #12]
 8019600:	4632      	mov	r2, r6
 8019602:	463b      	mov	r3, r7
 8019604:	4628      	mov	r0, r5
 8019606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801960a:	f000 b869 	b.w	80196e0 <_write_r>

0801960e <__sseek>:
 801960e:	b510      	push	{r4, lr}
 8019610:	460c      	mov	r4, r1
 8019612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019616:	f000 f9bd 	bl	8019994 <_lseek_r>
 801961a:	1c43      	adds	r3, r0, #1
 801961c:	89a3      	ldrh	r3, [r4, #12]
 801961e:	bf15      	itete	ne
 8019620:	6560      	strne	r0, [r4, #84]	; 0x54
 8019622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801962a:	81a3      	strheq	r3, [r4, #12]
 801962c:	bf18      	it	ne
 801962e:	81a3      	strhne	r3, [r4, #12]
 8019630:	bd10      	pop	{r4, pc}

08019632 <__sclose>:
 8019632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019636:	f000 b8db 	b.w	80197f0 <_close_r>
	...

0801963c <__swbuf_r>:
 801963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801963e:	460e      	mov	r6, r1
 8019640:	4614      	mov	r4, r2
 8019642:	4605      	mov	r5, r0
 8019644:	b118      	cbz	r0, 801964e <__swbuf_r+0x12>
 8019646:	6983      	ldr	r3, [r0, #24]
 8019648:	b90b      	cbnz	r3, 801964e <__swbuf_r+0x12>
 801964a:	f7ff fb51 	bl	8018cf0 <__sinit>
 801964e:	4b21      	ldr	r3, [pc, #132]	; (80196d4 <__swbuf_r+0x98>)
 8019650:	429c      	cmp	r4, r3
 8019652:	d12b      	bne.n	80196ac <__swbuf_r+0x70>
 8019654:	686c      	ldr	r4, [r5, #4]
 8019656:	69a3      	ldr	r3, [r4, #24]
 8019658:	60a3      	str	r3, [r4, #8]
 801965a:	89a3      	ldrh	r3, [r4, #12]
 801965c:	071a      	lsls	r2, r3, #28
 801965e:	d52f      	bpl.n	80196c0 <__swbuf_r+0x84>
 8019660:	6923      	ldr	r3, [r4, #16]
 8019662:	b36b      	cbz	r3, 80196c0 <__swbuf_r+0x84>
 8019664:	6923      	ldr	r3, [r4, #16]
 8019666:	6820      	ldr	r0, [r4, #0]
 8019668:	1ac0      	subs	r0, r0, r3
 801966a:	6963      	ldr	r3, [r4, #20]
 801966c:	b2f6      	uxtb	r6, r6
 801966e:	4283      	cmp	r3, r0
 8019670:	4637      	mov	r7, r6
 8019672:	dc04      	bgt.n	801967e <__swbuf_r+0x42>
 8019674:	4621      	mov	r1, r4
 8019676:	4628      	mov	r0, r5
 8019678:	f000 f950 	bl	801991c <_fflush_r>
 801967c:	bb30      	cbnz	r0, 80196cc <__swbuf_r+0x90>
 801967e:	68a3      	ldr	r3, [r4, #8]
 8019680:	3b01      	subs	r3, #1
 8019682:	60a3      	str	r3, [r4, #8]
 8019684:	6823      	ldr	r3, [r4, #0]
 8019686:	1c5a      	adds	r2, r3, #1
 8019688:	6022      	str	r2, [r4, #0]
 801968a:	701e      	strb	r6, [r3, #0]
 801968c:	6963      	ldr	r3, [r4, #20]
 801968e:	3001      	adds	r0, #1
 8019690:	4283      	cmp	r3, r0
 8019692:	d004      	beq.n	801969e <__swbuf_r+0x62>
 8019694:	89a3      	ldrh	r3, [r4, #12]
 8019696:	07db      	lsls	r3, r3, #31
 8019698:	d506      	bpl.n	80196a8 <__swbuf_r+0x6c>
 801969a:	2e0a      	cmp	r6, #10
 801969c:	d104      	bne.n	80196a8 <__swbuf_r+0x6c>
 801969e:	4621      	mov	r1, r4
 80196a0:	4628      	mov	r0, r5
 80196a2:	f000 f93b 	bl	801991c <_fflush_r>
 80196a6:	b988      	cbnz	r0, 80196cc <__swbuf_r+0x90>
 80196a8:	4638      	mov	r0, r7
 80196aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196ac:	4b0a      	ldr	r3, [pc, #40]	; (80196d8 <__swbuf_r+0x9c>)
 80196ae:	429c      	cmp	r4, r3
 80196b0:	d101      	bne.n	80196b6 <__swbuf_r+0x7a>
 80196b2:	68ac      	ldr	r4, [r5, #8]
 80196b4:	e7cf      	b.n	8019656 <__swbuf_r+0x1a>
 80196b6:	4b09      	ldr	r3, [pc, #36]	; (80196dc <__swbuf_r+0xa0>)
 80196b8:	429c      	cmp	r4, r3
 80196ba:	bf08      	it	eq
 80196bc:	68ec      	ldreq	r4, [r5, #12]
 80196be:	e7ca      	b.n	8019656 <__swbuf_r+0x1a>
 80196c0:	4621      	mov	r1, r4
 80196c2:	4628      	mov	r0, r5
 80196c4:	f000 f81e 	bl	8019704 <__swsetup_r>
 80196c8:	2800      	cmp	r0, #0
 80196ca:	d0cb      	beq.n	8019664 <__swbuf_r+0x28>
 80196cc:	f04f 37ff 	mov.w	r7, #4294967295
 80196d0:	e7ea      	b.n	80196a8 <__swbuf_r+0x6c>
 80196d2:	bf00      	nop
 80196d4:	0801df80 	.word	0x0801df80
 80196d8:	0801dfa0 	.word	0x0801dfa0
 80196dc:	0801df60 	.word	0x0801df60

080196e0 <_write_r>:
 80196e0:	b538      	push	{r3, r4, r5, lr}
 80196e2:	4d07      	ldr	r5, [pc, #28]	; (8019700 <_write_r+0x20>)
 80196e4:	4604      	mov	r4, r0
 80196e6:	4608      	mov	r0, r1
 80196e8:	4611      	mov	r1, r2
 80196ea:	2200      	movs	r2, #0
 80196ec:	602a      	str	r2, [r5, #0]
 80196ee:	461a      	mov	r2, r3
 80196f0:	f7e8 f9b9 	bl	8001a66 <_write>
 80196f4:	1c43      	adds	r3, r0, #1
 80196f6:	d102      	bne.n	80196fe <_write_r+0x1e>
 80196f8:	682b      	ldr	r3, [r5, #0]
 80196fa:	b103      	cbz	r3, 80196fe <_write_r+0x1e>
 80196fc:	6023      	str	r3, [r4, #0]
 80196fe:	bd38      	pop	{r3, r4, r5, pc}
 8019700:	2400781c 	.word	0x2400781c

08019704 <__swsetup_r>:
 8019704:	4b32      	ldr	r3, [pc, #200]	; (80197d0 <__swsetup_r+0xcc>)
 8019706:	b570      	push	{r4, r5, r6, lr}
 8019708:	681d      	ldr	r5, [r3, #0]
 801970a:	4606      	mov	r6, r0
 801970c:	460c      	mov	r4, r1
 801970e:	b125      	cbz	r5, 801971a <__swsetup_r+0x16>
 8019710:	69ab      	ldr	r3, [r5, #24]
 8019712:	b913      	cbnz	r3, 801971a <__swsetup_r+0x16>
 8019714:	4628      	mov	r0, r5
 8019716:	f7ff faeb 	bl	8018cf0 <__sinit>
 801971a:	4b2e      	ldr	r3, [pc, #184]	; (80197d4 <__swsetup_r+0xd0>)
 801971c:	429c      	cmp	r4, r3
 801971e:	d10f      	bne.n	8019740 <__swsetup_r+0x3c>
 8019720:	686c      	ldr	r4, [r5, #4]
 8019722:	89a3      	ldrh	r3, [r4, #12]
 8019724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019728:	0719      	lsls	r1, r3, #28
 801972a:	d42c      	bmi.n	8019786 <__swsetup_r+0x82>
 801972c:	06dd      	lsls	r5, r3, #27
 801972e:	d411      	bmi.n	8019754 <__swsetup_r+0x50>
 8019730:	2309      	movs	r3, #9
 8019732:	6033      	str	r3, [r6, #0]
 8019734:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019738:	81a3      	strh	r3, [r4, #12]
 801973a:	f04f 30ff 	mov.w	r0, #4294967295
 801973e:	e03e      	b.n	80197be <__swsetup_r+0xba>
 8019740:	4b25      	ldr	r3, [pc, #148]	; (80197d8 <__swsetup_r+0xd4>)
 8019742:	429c      	cmp	r4, r3
 8019744:	d101      	bne.n	801974a <__swsetup_r+0x46>
 8019746:	68ac      	ldr	r4, [r5, #8]
 8019748:	e7eb      	b.n	8019722 <__swsetup_r+0x1e>
 801974a:	4b24      	ldr	r3, [pc, #144]	; (80197dc <__swsetup_r+0xd8>)
 801974c:	429c      	cmp	r4, r3
 801974e:	bf08      	it	eq
 8019750:	68ec      	ldreq	r4, [r5, #12]
 8019752:	e7e6      	b.n	8019722 <__swsetup_r+0x1e>
 8019754:	0758      	lsls	r0, r3, #29
 8019756:	d512      	bpl.n	801977e <__swsetup_r+0x7a>
 8019758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801975a:	b141      	cbz	r1, 801976e <__swsetup_r+0x6a>
 801975c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019760:	4299      	cmp	r1, r3
 8019762:	d002      	beq.n	801976a <__swsetup_r+0x66>
 8019764:	4630      	mov	r0, r6
 8019766:	f7ff fb7d 	bl	8018e64 <_free_r>
 801976a:	2300      	movs	r3, #0
 801976c:	6363      	str	r3, [r4, #52]	; 0x34
 801976e:	89a3      	ldrh	r3, [r4, #12]
 8019770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019774:	81a3      	strh	r3, [r4, #12]
 8019776:	2300      	movs	r3, #0
 8019778:	6063      	str	r3, [r4, #4]
 801977a:	6923      	ldr	r3, [r4, #16]
 801977c:	6023      	str	r3, [r4, #0]
 801977e:	89a3      	ldrh	r3, [r4, #12]
 8019780:	f043 0308 	orr.w	r3, r3, #8
 8019784:	81a3      	strh	r3, [r4, #12]
 8019786:	6923      	ldr	r3, [r4, #16]
 8019788:	b94b      	cbnz	r3, 801979e <__swsetup_r+0x9a>
 801978a:	89a3      	ldrh	r3, [r4, #12]
 801978c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019794:	d003      	beq.n	801979e <__swsetup_r+0x9a>
 8019796:	4621      	mov	r1, r4
 8019798:	4630      	mov	r0, r6
 801979a:	f000 f931 	bl	8019a00 <__smakebuf_r>
 801979e:	89a0      	ldrh	r0, [r4, #12]
 80197a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80197a4:	f010 0301 	ands.w	r3, r0, #1
 80197a8:	d00a      	beq.n	80197c0 <__swsetup_r+0xbc>
 80197aa:	2300      	movs	r3, #0
 80197ac:	60a3      	str	r3, [r4, #8]
 80197ae:	6963      	ldr	r3, [r4, #20]
 80197b0:	425b      	negs	r3, r3
 80197b2:	61a3      	str	r3, [r4, #24]
 80197b4:	6923      	ldr	r3, [r4, #16]
 80197b6:	b943      	cbnz	r3, 80197ca <__swsetup_r+0xc6>
 80197b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80197bc:	d1ba      	bne.n	8019734 <__swsetup_r+0x30>
 80197be:	bd70      	pop	{r4, r5, r6, pc}
 80197c0:	0781      	lsls	r1, r0, #30
 80197c2:	bf58      	it	pl
 80197c4:	6963      	ldrpl	r3, [r4, #20]
 80197c6:	60a3      	str	r3, [r4, #8]
 80197c8:	e7f4      	b.n	80197b4 <__swsetup_r+0xb0>
 80197ca:	2000      	movs	r0, #0
 80197cc:	e7f7      	b.n	80197be <__swsetup_r+0xba>
 80197ce:	bf00      	nop
 80197d0:	24000044 	.word	0x24000044
 80197d4:	0801df80 	.word	0x0801df80
 80197d8:	0801dfa0 	.word	0x0801dfa0
 80197dc:	0801df60 	.word	0x0801df60

080197e0 <abort>:
 80197e0:	b508      	push	{r3, lr}
 80197e2:	2006      	movs	r0, #6
 80197e4:	f000 f992 	bl	8019b0c <raise>
 80197e8:	2001      	movs	r0, #1
 80197ea:	f7e8 f915 	bl	8001a18 <_exit>
	...

080197f0 <_close_r>:
 80197f0:	b538      	push	{r3, r4, r5, lr}
 80197f2:	4d06      	ldr	r5, [pc, #24]	; (801980c <_close_r+0x1c>)
 80197f4:	2300      	movs	r3, #0
 80197f6:	4604      	mov	r4, r0
 80197f8:	4608      	mov	r0, r1
 80197fa:	602b      	str	r3, [r5, #0]
 80197fc:	f7e8 f94f 	bl	8001a9e <_close>
 8019800:	1c43      	adds	r3, r0, #1
 8019802:	d102      	bne.n	801980a <_close_r+0x1a>
 8019804:	682b      	ldr	r3, [r5, #0]
 8019806:	b103      	cbz	r3, 801980a <_close_r+0x1a>
 8019808:	6023      	str	r3, [r4, #0]
 801980a:	bd38      	pop	{r3, r4, r5, pc}
 801980c:	2400781c 	.word	0x2400781c

08019810 <__sflush_r>:
 8019810:	898a      	ldrh	r2, [r1, #12]
 8019812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019816:	4605      	mov	r5, r0
 8019818:	0710      	lsls	r0, r2, #28
 801981a:	460c      	mov	r4, r1
 801981c:	d458      	bmi.n	80198d0 <__sflush_r+0xc0>
 801981e:	684b      	ldr	r3, [r1, #4]
 8019820:	2b00      	cmp	r3, #0
 8019822:	dc05      	bgt.n	8019830 <__sflush_r+0x20>
 8019824:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019826:	2b00      	cmp	r3, #0
 8019828:	dc02      	bgt.n	8019830 <__sflush_r+0x20>
 801982a:	2000      	movs	r0, #0
 801982c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019832:	2e00      	cmp	r6, #0
 8019834:	d0f9      	beq.n	801982a <__sflush_r+0x1a>
 8019836:	2300      	movs	r3, #0
 8019838:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801983c:	682f      	ldr	r7, [r5, #0]
 801983e:	602b      	str	r3, [r5, #0]
 8019840:	d032      	beq.n	80198a8 <__sflush_r+0x98>
 8019842:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019844:	89a3      	ldrh	r3, [r4, #12]
 8019846:	075a      	lsls	r2, r3, #29
 8019848:	d505      	bpl.n	8019856 <__sflush_r+0x46>
 801984a:	6863      	ldr	r3, [r4, #4]
 801984c:	1ac0      	subs	r0, r0, r3
 801984e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019850:	b10b      	cbz	r3, 8019856 <__sflush_r+0x46>
 8019852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019854:	1ac0      	subs	r0, r0, r3
 8019856:	2300      	movs	r3, #0
 8019858:	4602      	mov	r2, r0
 801985a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801985c:	6a21      	ldr	r1, [r4, #32]
 801985e:	4628      	mov	r0, r5
 8019860:	47b0      	blx	r6
 8019862:	1c43      	adds	r3, r0, #1
 8019864:	89a3      	ldrh	r3, [r4, #12]
 8019866:	d106      	bne.n	8019876 <__sflush_r+0x66>
 8019868:	6829      	ldr	r1, [r5, #0]
 801986a:	291d      	cmp	r1, #29
 801986c:	d82c      	bhi.n	80198c8 <__sflush_r+0xb8>
 801986e:	4a2a      	ldr	r2, [pc, #168]	; (8019918 <__sflush_r+0x108>)
 8019870:	40ca      	lsrs	r2, r1
 8019872:	07d6      	lsls	r6, r2, #31
 8019874:	d528      	bpl.n	80198c8 <__sflush_r+0xb8>
 8019876:	2200      	movs	r2, #0
 8019878:	6062      	str	r2, [r4, #4]
 801987a:	04d9      	lsls	r1, r3, #19
 801987c:	6922      	ldr	r2, [r4, #16]
 801987e:	6022      	str	r2, [r4, #0]
 8019880:	d504      	bpl.n	801988c <__sflush_r+0x7c>
 8019882:	1c42      	adds	r2, r0, #1
 8019884:	d101      	bne.n	801988a <__sflush_r+0x7a>
 8019886:	682b      	ldr	r3, [r5, #0]
 8019888:	b903      	cbnz	r3, 801988c <__sflush_r+0x7c>
 801988a:	6560      	str	r0, [r4, #84]	; 0x54
 801988c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801988e:	602f      	str	r7, [r5, #0]
 8019890:	2900      	cmp	r1, #0
 8019892:	d0ca      	beq.n	801982a <__sflush_r+0x1a>
 8019894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019898:	4299      	cmp	r1, r3
 801989a:	d002      	beq.n	80198a2 <__sflush_r+0x92>
 801989c:	4628      	mov	r0, r5
 801989e:	f7ff fae1 	bl	8018e64 <_free_r>
 80198a2:	2000      	movs	r0, #0
 80198a4:	6360      	str	r0, [r4, #52]	; 0x34
 80198a6:	e7c1      	b.n	801982c <__sflush_r+0x1c>
 80198a8:	6a21      	ldr	r1, [r4, #32]
 80198aa:	2301      	movs	r3, #1
 80198ac:	4628      	mov	r0, r5
 80198ae:	47b0      	blx	r6
 80198b0:	1c41      	adds	r1, r0, #1
 80198b2:	d1c7      	bne.n	8019844 <__sflush_r+0x34>
 80198b4:	682b      	ldr	r3, [r5, #0]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d0c4      	beq.n	8019844 <__sflush_r+0x34>
 80198ba:	2b1d      	cmp	r3, #29
 80198bc:	d001      	beq.n	80198c2 <__sflush_r+0xb2>
 80198be:	2b16      	cmp	r3, #22
 80198c0:	d101      	bne.n	80198c6 <__sflush_r+0xb6>
 80198c2:	602f      	str	r7, [r5, #0]
 80198c4:	e7b1      	b.n	801982a <__sflush_r+0x1a>
 80198c6:	89a3      	ldrh	r3, [r4, #12]
 80198c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198cc:	81a3      	strh	r3, [r4, #12]
 80198ce:	e7ad      	b.n	801982c <__sflush_r+0x1c>
 80198d0:	690f      	ldr	r7, [r1, #16]
 80198d2:	2f00      	cmp	r7, #0
 80198d4:	d0a9      	beq.n	801982a <__sflush_r+0x1a>
 80198d6:	0793      	lsls	r3, r2, #30
 80198d8:	680e      	ldr	r6, [r1, #0]
 80198da:	bf08      	it	eq
 80198dc:	694b      	ldreq	r3, [r1, #20]
 80198de:	600f      	str	r7, [r1, #0]
 80198e0:	bf18      	it	ne
 80198e2:	2300      	movne	r3, #0
 80198e4:	eba6 0807 	sub.w	r8, r6, r7
 80198e8:	608b      	str	r3, [r1, #8]
 80198ea:	f1b8 0f00 	cmp.w	r8, #0
 80198ee:	dd9c      	ble.n	801982a <__sflush_r+0x1a>
 80198f0:	6a21      	ldr	r1, [r4, #32]
 80198f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80198f4:	4643      	mov	r3, r8
 80198f6:	463a      	mov	r2, r7
 80198f8:	4628      	mov	r0, r5
 80198fa:	47b0      	blx	r6
 80198fc:	2800      	cmp	r0, #0
 80198fe:	dc06      	bgt.n	801990e <__sflush_r+0xfe>
 8019900:	89a3      	ldrh	r3, [r4, #12]
 8019902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019906:	81a3      	strh	r3, [r4, #12]
 8019908:	f04f 30ff 	mov.w	r0, #4294967295
 801990c:	e78e      	b.n	801982c <__sflush_r+0x1c>
 801990e:	4407      	add	r7, r0
 8019910:	eba8 0800 	sub.w	r8, r8, r0
 8019914:	e7e9      	b.n	80198ea <__sflush_r+0xda>
 8019916:	bf00      	nop
 8019918:	20400001 	.word	0x20400001

0801991c <_fflush_r>:
 801991c:	b538      	push	{r3, r4, r5, lr}
 801991e:	690b      	ldr	r3, [r1, #16]
 8019920:	4605      	mov	r5, r0
 8019922:	460c      	mov	r4, r1
 8019924:	b913      	cbnz	r3, 801992c <_fflush_r+0x10>
 8019926:	2500      	movs	r5, #0
 8019928:	4628      	mov	r0, r5
 801992a:	bd38      	pop	{r3, r4, r5, pc}
 801992c:	b118      	cbz	r0, 8019936 <_fflush_r+0x1a>
 801992e:	6983      	ldr	r3, [r0, #24]
 8019930:	b90b      	cbnz	r3, 8019936 <_fflush_r+0x1a>
 8019932:	f7ff f9dd 	bl	8018cf0 <__sinit>
 8019936:	4b14      	ldr	r3, [pc, #80]	; (8019988 <_fflush_r+0x6c>)
 8019938:	429c      	cmp	r4, r3
 801993a:	d11b      	bne.n	8019974 <_fflush_r+0x58>
 801993c:	686c      	ldr	r4, [r5, #4]
 801993e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019942:	2b00      	cmp	r3, #0
 8019944:	d0ef      	beq.n	8019926 <_fflush_r+0xa>
 8019946:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019948:	07d0      	lsls	r0, r2, #31
 801994a:	d404      	bmi.n	8019956 <_fflush_r+0x3a>
 801994c:	0599      	lsls	r1, r3, #22
 801994e:	d402      	bmi.n	8019956 <_fflush_r+0x3a>
 8019950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019952:	f7ff fa7d 	bl	8018e50 <__retarget_lock_acquire_recursive>
 8019956:	4628      	mov	r0, r5
 8019958:	4621      	mov	r1, r4
 801995a:	f7ff ff59 	bl	8019810 <__sflush_r>
 801995e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019960:	07da      	lsls	r2, r3, #31
 8019962:	4605      	mov	r5, r0
 8019964:	d4e0      	bmi.n	8019928 <_fflush_r+0xc>
 8019966:	89a3      	ldrh	r3, [r4, #12]
 8019968:	059b      	lsls	r3, r3, #22
 801996a:	d4dd      	bmi.n	8019928 <_fflush_r+0xc>
 801996c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801996e:	f7ff fa70 	bl	8018e52 <__retarget_lock_release_recursive>
 8019972:	e7d9      	b.n	8019928 <_fflush_r+0xc>
 8019974:	4b05      	ldr	r3, [pc, #20]	; (801998c <_fflush_r+0x70>)
 8019976:	429c      	cmp	r4, r3
 8019978:	d101      	bne.n	801997e <_fflush_r+0x62>
 801997a:	68ac      	ldr	r4, [r5, #8]
 801997c:	e7df      	b.n	801993e <_fflush_r+0x22>
 801997e:	4b04      	ldr	r3, [pc, #16]	; (8019990 <_fflush_r+0x74>)
 8019980:	429c      	cmp	r4, r3
 8019982:	bf08      	it	eq
 8019984:	68ec      	ldreq	r4, [r5, #12]
 8019986:	e7da      	b.n	801993e <_fflush_r+0x22>
 8019988:	0801df80 	.word	0x0801df80
 801998c:	0801dfa0 	.word	0x0801dfa0
 8019990:	0801df60 	.word	0x0801df60

08019994 <_lseek_r>:
 8019994:	b538      	push	{r3, r4, r5, lr}
 8019996:	4d07      	ldr	r5, [pc, #28]	; (80199b4 <_lseek_r+0x20>)
 8019998:	4604      	mov	r4, r0
 801999a:	4608      	mov	r0, r1
 801999c:	4611      	mov	r1, r2
 801999e:	2200      	movs	r2, #0
 80199a0:	602a      	str	r2, [r5, #0]
 80199a2:	461a      	mov	r2, r3
 80199a4:	f7e8 f8a2 	bl	8001aec <_lseek>
 80199a8:	1c43      	adds	r3, r0, #1
 80199aa:	d102      	bne.n	80199b2 <_lseek_r+0x1e>
 80199ac:	682b      	ldr	r3, [r5, #0]
 80199ae:	b103      	cbz	r3, 80199b2 <_lseek_r+0x1e>
 80199b0:	6023      	str	r3, [r4, #0]
 80199b2:	bd38      	pop	{r3, r4, r5, pc}
 80199b4:	2400781c 	.word	0x2400781c

080199b8 <__swhatbuf_r>:
 80199b8:	b570      	push	{r4, r5, r6, lr}
 80199ba:	460e      	mov	r6, r1
 80199bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199c0:	2900      	cmp	r1, #0
 80199c2:	b096      	sub	sp, #88	; 0x58
 80199c4:	4614      	mov	r4, r2
 80199c6:	461d      	mov	r5, r3
 80199c8:	da07      	bge.n	80199da <__swhatbuf_r+0x22>
 80199ca:	2300      	movs	r3, #0
 80199cc:	602b      	str	r3, [r5, #0]
 80199ce:	89b3      	ldrh	r3, [r6, #12]
 80199d0:	061a      	lsls	r2, r3, #24
 80199d2:	d410      	bmi.n	80199f6 <__swhatbuf_r+0x3e>
 80199d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80199d8:	e00e      	b.n	80199f8 <__swhatbuf_r+0x40>
 80199da:	466a      	mov	r2, sp
 80199dc:	f000 f8b2 	bl	8019b44 <_fstat_r>
 80199e0:	2800      	cmp	r0, #0
 80199e2:	dbf2      	blt.n	80199ca <__swhatbuf_r+0x12>
 80199e4:	9a01      	ldr	r2, [sp, #4]
 80199e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80199ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80199ee:	425a      	negs	r2, r3
 80199f0:	415a      	adcs	r2, r3
 80199f2:	602a      	str	r2, [r5, #0]
 80199f4:	e7ee      	b.n	80199d4 <__swhatbuf_r+0x1c>
 80199f6:	2340      	movs	r3, #64	; 0x40
 80199f8:	2000      	movs	r0, #0
 80199fa:	6023      	str	r3, [r4, #0]
 80199fc:	b016      	add	sp, #88	; 0x58
 80199fe:	bd70      	pop	{r4, r5, r6, pc}

08019a00 <__smakebuf_r>:
 8019a00:	898b      	ldrh	r3, [r1, #12]
 8019a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019a04:	079d      	lsls	r5, r3, #30
 8019a06:	4606      	mov	r6, r0
 8019a08:	460c      	mov	r4, r1
 8019a0a:	d507      	bpl.n	8019a1c <__smakebuf_r+0x1c>
 8019a0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019a10:	6023      	str	r3, [r4, #0]
 8019a12:	6123      	str	r3, [r4, #16]
 8019a14:	2301      	movs	r3, #1
 8019a16:	6163      	str	r3, [r4, #20]
 8019a18:	b002      	add	sp, #8
 8019a1a:	bd70      	pop	{r4, r5, r6, pc}
 8019a1c:	ab01      	add	r3, sp, #4
 8019a1e:	466a      	mov	r2, sp
 8019a20:	f7ff ffca 	bl	80199b8 <__swhatbuf_r>
 8019a24:	9900      	ldr	r1, [sp, #0]
 8019a26:	4605      	mov	r5, r0
 8019a28:	4630      	mov	r0, r6
 8019a2a:	f7ff fa6b 	bl	8018f04 <_malloc_r>
 8019a2e:	b948      	cbnz	r0, 8019a44 <__smakebuf_r+0x44>
 8019a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a34:	059a      	lsls	r2, r3, #22
 8019a36:	d4ef      	bmi.n	8019a18 <__smakebuf_r+0x18>
 8019a38:	f023 0303 	bic.w	r3, r3, #3
 8019a3c:	f043 0302 	orr.w	r3, r3, #2
 8019a40:	81a3      	strh	r3, [r4, #12]
 8019a42:	e7e3      	b.n	8019a0c <__smakebuf_r+0xc>
 8019a44:	4b0d      	ldr	r3, [pc, #52]	; (8019a7c <__smakebuf_r+0x7c>)
 8019a46:	62b3      	str	r3, [r6, #40]	; 0x28
 8019a48:	89a3      	ldrh	r3, [r4, #12]
 8019a4a:	6020      	str	r0, [r4, #0]
 8019a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a50:	81a3      	strh	r3, [r4, #12]
 8019a52:	9b00      	ldr	r3, [sp, #0]
 8019a54:	6163      	str	r3, [r4, #20]
 8019a56:	9b01      	ldr	r3, [sp, #4]
 8019a58:	6120      	str	r0, [r4, #16]
 8019a5a:	b15b      	cbz	r3, 8019a74 <__smakebuf_r+0x74>
 8019a5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a60:	4630      	mov	r0, r6
 8019a62:	f000 f881 	bl	8019b68 <_isatty_r>
 8019a66:	b128      	cbz	r0, 8019a74 <__smakebuf_r+0x74>
 8019a68:	89a3      	ldrh	r3, [r4, #12]
 8019a6a:	f023 0303 	bic.w	r3, r3, #3
 8019a6e:	f043 0301 	orr.w	r3, r3, #1
 8019a72:	81a3      	strh	r3, [r4, #12]
 8019a74:	89a0      	ldrh	r0, [r4, #12]
 8019a76:	4305      	orrs	r5, r0
 8019a78:	81a5      	strh	r5, [r4, #12]
 8019a7a:	e7cd      	b.n	8019a18 <__smakebuf_r+0x18>
 8019a7c:	08018c89 	.word	0x08018c89

08019a80 <__malloc_lock>:
 8019a80:	4801      	ldr	r0, [pc, #4]	; (8019a88 <__malloc_lock+0x8>)
 8019a82:	f7ff b9e5 	b.w	8018e50 <__retarget_lock_acquire_recursive>
 8019a86:	bf00      	nop
 8019a88:	24007828 	.word	0x24007828

08019a8c <__malloc_unlock>:
 8019a8c:	4801      	ldr	r0, [pc, #4]	; (8019a94 <__malloc_unlock+0x8>)
 8019a8e:	f7ff b9e0 	b.w	8018e52 <__retarget_lock_release_recursive>
 8019a92:	bf00      	nop
 8019a94:	24007828 	.word	0x24007828

08019a98 <_read_r>:
 8019a98:	b538      	push	{r3, r4, r5, lr}
 8019a9a:	4d07      	ldr	r5, [pc, #28]	; (8019ab8 <_read_r+0x20>)
 8019a9c:	4604      	mov	r4, r0
 8019a9e:	4608      	mov	r0, r1
 8019aa0:	4611      	mov	r1, r2
 8019aa2:	2200      	movs	r2, #0
 8019aa4:	602a      	str	r2, [r5, #0]
 8019aa6:	461a      	mov	r2, r3
 8019aa8:	f7e7 ffc0 	bl	8001a2c <_read>
 8019aac:	1c43      	adds	r3, r0, #1
 8019aae:	d102      	bne.n	8019ab6 <_read_r+0x1e>
 8019ab0:	682b      	ldr	r3, [r5, #0]
 8019ab2:	b103      	cbz	r3, 8019ab6 <_read_r+0x1e>
 8019ab4:	6023      	str	r3, [r4, #0]
 8019ab6:	bd38      	pop	{r3, r4, r5, pc}
 8019ab8:	2400781c 	.word	0x2400781c

08019abc <_raise_r>:
 8019abc:	291f      	cmp	r1, #31
 8019abe:	b538      	push	{r3, r4, r5, lr}
 8019ac0:	4604      	mov	r4, r0
 8019ac2:	460d      	mov	r5, r1
 8019ac4:	d904      	bls.n	8019ad0 <_raise_r+0x14>
 8019ac6:	2316      	movs	r3, #22
 8019ac8:	6003      	str	r3, [r0, #0]
 8019aca:	f04f 30ff 	mov.w	r0, #4294967295
 8019ace:	bd38      	pop	{r3, r4, r5, pc}
 8019ad0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019ad2:	b112      	cbz	r2, 8019ada <_raise_r+0x1e>
 8019ad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019ad8:	b94b      	cbnz	r3, 8019aee <_raise_r+0x32>
 8019ada:	4620      	mov	r0, r4
 8019adc:	f000 f830 	bl	8019b40 <_getpid_r>
 8019ae0:	462a      	mov	r2, r5
 8019ae2:	4601      	mov	r1, r0
 8019ae4:	4620      	mov	r0, r4
 8019ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019aea:	f000 b817 	b.w	8019b1c <_kill_r>
 8019aee:	2b01      	cmp	r3, #1
 8019af0:	d00a      	beq.n	8019b08 <_raise_r+0x4c>
 8019af2:	1c59      	adds	r1, r3, #1
 8019af4:	d103      	bne.n	8019afe <_raise_r+0x42>
 8019af6:	2316      	movs	r3, #22
 8019af8:	6003      	str	r3, [r0, #0]
 8019afa:	2001      	movs	r0, #1
 8019afc:	e7e7      	b.n	8019ace <_raise_r+0x12>
 8019afe:	2400      	movs	r4, #0
 8019b00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019b04:	4628      	mov	r0, r5
 8019b06:	4798      	blx	r3
 8019b08:	2000      	movs	r0, #0
 8019b0a:	e7e0      	b.n	8019ace <_raise_r+0x12>

08019b0c <raise>:
 8019b0c:	4b02      	ldr	r3, [pc, #8]	; (8019b18 <raise+0xc>)
 8019b0e:	4601      	mov	r1, r0
 8019b10:	6818      	ldr	r0, [r3, #0]
 8019b12:	f7ff bfd3 	b.w	8019abc <_raise_r>
 8019b16:	bf00      	nop
 8019b18:	24000044 	.word	0x24000044

08019b1c <_kill_r>:
 8019b1c:	b538      	push	{r3, r4, r5, lr}
 8019b1e:	4d07      	ldr	r5, [pc, #28]	; (8019b3c <_kill_r+0x20>)
 8019b20:	2300      	movs	r3, #0
 8019b22:	4604      	mov	r4, r0
 8019b24:	4608      	mov	r0, r1
 8019b26:	4611      	mov	r1, r2
 8019b28:	602b      	str	r3, [r5, #0]
 8019b2a:	f7e7 ff63 	bl	80019f4 <_kill>
 8019b2e:	1c43      	adds	r3, r0, #1
 8019b30:	d102      	bne.n	8019b38 <_kill_r+0x1c>
 8019b32:	682b      	ldr	r3, [r5, #0]
 8019b34:	b103      	cbz	r3, 8019b38 <_kill_r+0x1c>
 8019b36:	6023      	str	r3, [r4, #0]
 8019b38:	bd38      	pop	{r3, r4, r5, pc}
 8019b3a:	bf00      	nop
 8019b3c:	2400781c 	.word	0x2400781c

08019b40 <_getpid_r>:
 8019b40:	f7e7 bf50 	b.w	80019e4 <_getpid>

08019b44 <_fstat_r>:
 8019b44:	b538      	push	{r3, r4, r5, lr}
 8019b46:	4d07      	ldr	r5, [pc, #28]	; (8019b64 <_fstat_r+0x20>)
 8019b48:	2300      	movs	r3, #0
 8019b4a:	4604      	mov	r4, r0
 8019b4c:	4608      	mov	r0, r1
 8019b4e:	4611      	mov	r1, r2
 8019b50:	602b      	str	r3, [r5, #0]
 8019b52:	f7e7 ffb0 	bl	8001ab6 <_fstat>
 8019b56:	1c43      	adds	r3, r0, #1
 8019b58:	d102      	bne.n	8019b60 <_fstat_r+0x1c>
 8019b5a:	682b      	ldr	r3, [r5, #0]
 8019b5c:	b103      	cbz	r3, 8019b60 <_fstat_r+0x1c>
 8019b5e:	6023      	str	r3, [r4, #0]
 8019b60:	bd38      	pop	{r3, r4, r5, pc}
 8019b62:	bf00      	nop
 8019b64:	2400781c 	.word	0x2400781c

08019b68 <_isatty_r>:
 8019b68:	b538      	push	{r3, r4, r5, lr}
 8019b6a:	4d06      	ldr	r5, [pc, #24]	; (8019b84 <_isatty_r+0x1c>)
 8019b6c:	2300      	movs	r3, #0
 8019b6e:	4604      	mov	r4, r0
 8019b70:	4608      	mov	r0, r1
 8019b72:	602b      	str	r3, [r5, #0]
 8019b74:	f7e7 ffaf 	bl	8001ad6 <_isatty>
 8019b78:	1c43      	adds	r3, r0, #1
 8019b7a:	d102      	bne.n	8019b82 <_isatty_r+0x1a>
 8019b7c:	682b      	ldr	r3, [r5, #0]
 8019b7e:	b103      	cbz	r3, 8019b82 <_isatty_r+0x1a>
 8019b80:	6023      	str	r3, [r4, #0]
 8019b82:	bd38      	pop	{r3, r4, r5, pc}
 8019b84:	2400781c 	.word	0x2400781c

08019b88 <_init>:
 8019b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b8a:	bf00      	nop
 8019b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b8e:	bc08      	pop	{r3}
 8019b90:	469e      	mov	lr, r3
 8019b92:	4770      	bx	lr

08019b94 <_fini>:
 8019b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b96:	bf00      	nop
 8019b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b9a:	bc08      	pop	{r3}
 8019b9c:	469e      	mov	lr, r3
 8019b9e:	4770      	bx	lr
