
ECE_554_ProjectBaseline.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000182fc  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000440c  080185cc  080185cc  000285cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c9d8  0801c9d8  0002c9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c9e0  0801c9e0  0002c9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c9e4  0801c9e4  0002c9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a8  24000000  0801c9e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000077dc  240000a8  0801ca90  000300a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24007884  0801ca90  00037884  2**0
                  ALLOC
  9 .lwip_sec     00001900  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0006c78d  00000000  00000000  000300d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000ab1c  00000000  00000000  0009c863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c08  00000000  00000000  000a7380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000029e0  00000000  00000000  000a9f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00047548  00000000  00000000  000ac968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000458d3  00000000  00000000  000f3eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001803af  00000000  00000000  00139783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002b9b32  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c050  00000000  00000000  002b9b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000a8 	.word	0x240000a8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080185b4 	.word	0x080185b4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000ac 	.word	0x240000ac
 800030c:	080185b4 	.word	0x080185b4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	4604      	mov	r4, r0
 80006b0:	4608      	mov	r0, r1
 80006b2:	4611      	mov	r1, r2
 80006b4:	461a      	mov	r2, r3
 80006b6:	4623      	mov	r3, r4
 80006b8:	80fb      	strh	r3, [r7, #6]
 80006ba:	4603      	mov	r3, r0
 80006bc:	80bb      	strh	r3, [r7, #4]
 80006be:	460b      	mov	r3, r1
 80006c0:	807b      	strh	r3, [r7, #2]
 80006c2:	4613      	mov	r3, r2
 80006c4:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80006c6:	88f8      	ldrh	r0, [r7, #6]
 80006c8:	88b9      	ldrh	r1, [r7, #4]
 80006ca:	887a      	ldrh	r2, [r7, #2]
 80006cc:	883c      	ldrh	r4, [r7, #0]
 80006ce:	8b3b      	ldrh	r3, [r7, #24]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	4623      	mov	r3, r4
 80006d4:	f000 fa88 	bl	8000be8 <ST7735_FillRectangle>
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd90      	pop	{r4, r7, pc}

080006e0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <fillScreen+0x2c>)
 80006ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <fillScreen+0x30>)
 80006f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	460b      	mov	r3, r1
 80006fc:	2100      	movs	r1, #0
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff ffd2 	bl	80006a8 <fillRect>
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24004278 	.word	0x24004278
 8000710:	2400427c 	.word	0x2400427c

08000714 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2101      	movs	r1, #1
 800071c:	4802      	ldr	r0, [pc, #8]	; (8000728 <ST7735_Select+0x14>)
 800071e:	f004 fbff 	bl	8004f20 <HAL_GPIO_WritePin>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	58020800 	.word	0x58020800

0800072c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	2101      	movs	r1, #1
 8000734:	4802      	ldr	r0, [pc, #8]	; (8000740 <ST7735_Unselect+0x14>)
 8000736:	f004 fbf3 	bl	8004f20 <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	58020800 	.word	0x58020800

08000744 <ST7735_Reset>:

void ST7735_Reset()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2108      	movs	r1, #8
 800074c:	4806      	ldr	r0, [pc, #24]	; (8000768 <ST7735_Reset+0x24>)
 800074e:	f004 fbe7 	bl	8004f20 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000752:	2005      	movs	r0, #5
 8000754:	f001 fd9c 	bl	8002290 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2108      	movs	r1, #8
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <ST7735_Reset+0x24>)
 800075e:	f004 fbdf 	bl	8004f20 <HAL_GPIO_WritePin>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	58020800 	.word	0x58020800

0800076c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2108      	movs	r1, #8
 800077a:	4807      	ldr	r0, [pc, #28]	; (8000798 <ST7735_WriteCommand+0x2c>)
 800077c:	f004 fbd0 	bl	8004f20 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000780:	1df9      	adds	r1, r7, #7
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	2201      	movs	r2, #1
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <ST7735_WriteCommand+0x30>)
 800078a:	f006 ffed 	bl	8007768 <HAL_SPI_Transmit>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	58020000 	.word	0x58020000
 800079c:	240043e8 	.word	0x240043e8

080007a0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2108      	movs	r1, #8
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <ST7735_WriteData+0x2c>)
 80007b0:	f004 fbb6 	bl	8004f20 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <ST7735_WriteData+0x30>)
 80007c0:	f006 ffd2 	bl	8007768 <HAL_SPI_Transmit>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020000 	.word	0x58020000
 80007d0:	240043e8 	.word	0x240043e8

080007d4 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80007e6:	e034      	b.n	8000852 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80007f2:	7afb      	ldrb	r3, [r7, #11]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ffb9 	bl	800076c <ST7735_WriteCommand>

        numArgs = *addr++;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	607a      	str	r2, [r7, #4]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000804:	7abb      	ldrb	r3, [r7, #10]
 8000806:	b29b      	uxth	r3, r3
 8000808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800080e:	7abb      	ldrb	r3, [r7, #10]
 8000810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000814:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000816:	7abb      	ldrb	r3, [r7, #10]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d008      	beq.n	800082e <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800081c:	7abb      	ldrb	r3, [r7, #10]
 800081e:	4619      	mov	r1, r3
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ffbd 	bl	80007a0 <ST7735_WriteData>
            addr += numArgs;
 8000826:	7abb      	ldrb	r3, [r7, #10]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4413      	add	r3, r2
 800082c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800082e:	89bb      	ldrh	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00e      	beq.n	8000852 <DisplayInit+0x7e>
            ms = *addr++;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800083e:	89bb      	ldrh	r3, [r7, #12]
 8000840:	2bff      	cmp	r3, #255	; 0xff
 8000842:	d102      	bne.n	800084a <DisplayInit+0x76>
 8000844:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000848:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800084a:	89bb      	ldrh	r3, [r7, #12]
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fd1f 	bl	8002290 <HAL_Delay>
    while(numCommands--) {
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	73fa      	strb	r2, [r7, #15]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1c5      	bne.n	80007e8 <DisplayInit+0x14>
        }
    }
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	4604      	mov	r4, r0
 8000870:	4608      	mov	r0, r1
 8000872:	4611      	mov	r1, r2
 8000874:	461a      	mov	r2, r3
 8000876:	4623      	mov	r3, r4
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	4603      	mov	r3, r0
 800087c:	71bb      	strb	r3, [r7, #6]
 800087e:	460b      	mov	r3, r1
 8000880:	717b      	strb	r3, [r7, #5]
 8000882:	4613      	mov	r3, r2
 8000884:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ff70 	bl	800076c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800088c:	2300      	movs	r3, #0
 800088e:	733b      	strb	r3, [r7, #12]
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <ST7735_SetAddressWindow+0x88>)
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4413      	add	r3, r2
 8000898:	b2db      	uxtb	r3, r3
 800089a:	737b      	strb	r3, [r7, #13]
 800089c:	2300      	movs	r3, #0
 800089e:	73bb      	strb	r3, [r7, #14]
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <ST7735_SetAddressWindow+0x88>)
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	797b      	ldrb	r3, [r7, #5]
 80008a6:	4413      	add	r3, r2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2104      	movs	r1, #4
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff74 	bl	80007a0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80008b8:	202b      	movs	r0, #43	; 0x2b
 80008ba:	f7ff ff57 	bl	800076c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ST7735_SetAddressWindow+0x8c>)
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	4413      	add	r3, r2
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <ST7735_SetAddressWindow+0x8c>)
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	793b      	ldrb	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2104      	movs	r1, #4
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff5f 	bl	80007a0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80008e2:	202c      	movs	r0, #44	; 0x2c
 80008e4:	f7ff ff42 	bl	800076c <ST7735_WriteCommand>
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	24004270 	.word	0x24004270
 80008f4:	24004274 	.word	0x24004274

080008f8 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000902:	f7ff ff07 	bl	8000714 <ST7735_Select>
    ST7735_Reset();
 8000906:	f7ff ff1d 	bl	8000744 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <ST7735_Init+0x44>)
 800090c:	f7ff ff62 	bl	80007d4 <DisplayInit>
    DisplayInit(init_cmds2);
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <ST7735_Init+0x48>)
 8000912:	f7ff ff5f 	bl	80007d4 <DisplayInit>
    DisplayInit(init_cmds3);
 8000916:	480b      	ldr	r0, [pc, #44]	; (8000944 <ST7735_Init+0x4c>)
 8000918:	f7ff ff5c 	bl	80007d4 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <ST7735_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <ST7735_Init+0x54>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f810 	bl	8000950 <ST7735_SetRotation>
    ST7735_Unselect();
 8000930:	f7ff fefc 	bl	800072c <ST7735_Unselect>

}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	0801b1d0 	.word	0x0801b1d0
 8000940:	0801b208 	.word	0x0801b208
 8000944:	0801b218 	.word	0x0801b218
 8000948:	24004271 	.word	0x24004271
 800094c:	24004275 	.word	0x24004275

08000950 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <ST7735_SetRotation+0xe4>)
 8000968:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800096a:	4b32      	ldr	r3, [pc, #200]	; (8000a34 <ST7735_SetRotation+0xe4>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b03      	cmp	r3, #3
 8000970:	d84e      	bhi.n	8000a10 <ST7735_SetRotation+0xc0>
 8000972:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <ST7735_SetRotation+0x28>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	08000989 	.word	0x08000989
 800097c:	080009ab 	.word	0x080009ab
 8000980:	080009cd 	.word	0x080009cd
 8000984:	080009ef 	.word	0x080009ef
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000988:	23c0      	movs	r3, #192	; 0xc0
 800098a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <ST7735_SetRotation+0xe8>)
 800098e:	22a0      	movs	r2, #160	; 0xa0
 8000990:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <ST7735_SetRotation+0xec>)
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000998:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <ST7735_SetRotation+0xf0>)
 800099a:	781a      	ldrb	r2, [r3, #0]
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <ST7735_SetRotation+0xf4>)
 800099e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80009a0:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <ST7735_SetRotation+0xf8>)
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <ST7735_SetRotation+0xfc>)
 80009a6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009a8:	e032      	b.n	8000a10 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009aa:	23a0      	movs	r3, #160	; 0xa0
 80009ac:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <ST7735_SetRotation+0xec>)
 80009b0:	22a0      	movs	r2, #160	; 0xa0
 80009b2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <ST7735_SetRotation+0xe8>)
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <ST7735_SetRotation+0xf0>)
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <ST7735_SetRotation+0xfc>)
 80009c0:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <ST7735_SetRotation+0xf8>)
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <ST7735_SetRotation+0xf4>)
 80009c8:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009ca:	e021      	b.n	8000a10 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <ST7735_SetRotation+0xe8>)
 80009d2:	22a0      	movs	r2, #160	; 0xa0
 80009d4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <ST7735_SetRotation+0xec>)
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <ST7735_SetRotation+0xf0>)
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <ST7735_SetRotation+0xf4>)
 80009e2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <ST7735_SetRotation+0xf8>)
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <ST7735_SetRotation+0xfc>)
 80009ea:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009ec:	e010      	b.n	8000a10 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009ee:	2360      	movs	r3, #96	; 0x60
 80009f0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <ST7735_SetRotation+0xec>)
 80009f4:	22a0      	movs	r2, #160	; 0xa0
 80009f6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <ST7735_SetRotation+0xe8>)
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <ST7735_SetRotation+0xf0>)
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <ST7735_SetRotation+0xfc>)
 8000a04:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <ST7735_SetRotation+0xf8>)
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <ST7735_SetRotation+0xf4>)
 8000a0c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a0e:	bf00      	nop
  }
  ST7735_Select();
 8000a10:	f7ff fe80 	bl	8000714 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a14:	2036      	movs	r0, #54	; 0x36
 8000a16:	f7ff fea9 	bl	800076c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a1a:	f107 030f 	add.w	r3, r7, #15
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff febd 	bl	80007a0 <ST7735_WriteData>
  ST7735_Unselect();
 8000a26:	f7ff fe81 	bl	800072c <ST7735_Unselect>
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	24004276 	.word	0x24004276
 8000a38:	2400427c 	.word	0x2400427c
 8000a3c:	24004278 	.word	0x24004278
 8000a40:	24004271 	.word	0x24004271
 8000a44:	24004270 	.word	0x24004270
 8000a48:	24004275 	.word	0x24004275
 8000a4c:	24004274 	.word	0x24004274

08000a50 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a50:	b082      	sub	sp, #8
 8000a52:	b590      	push	{r4, r7, lr}
 8000a54:	b089      	sub	sp, #36	; 0x24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	80bb      	strh	r3, [r7, #4]
 8000a62:	4613      	mov	r3, r2
 8000a64:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	b2d8      	uxtb	r0, r3
 8000a6a:	88bb      	ldrh	r3, [r7, #4]
 8000a6c:	b2d9      	uxtb	r1, r3
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a76:	4413      	add	r3, r2
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	b2dc      	uxtb	r4, r3
 8000a7e:	88bb      	ldrh	r3, [r7, #4]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a86:	4413      	add	r3, r2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4622      	mov	r2, r4
 8000a90:	f7ff feea 	bl	8000868 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
 8000a98:	e043      	b.n	8000b22 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	3b20      	subs	r3, #32
 8000aa0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000aa4:	fb01 f303 	mul.w	r3, r1, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	440b      	add	r3, r1
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	4413      	add	r3, r2
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	e029      	b.n	8000b10 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00e      	beq.n	8000aea <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000acc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ace:	0a1b      	lsrs	r3, r3, #8
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	743b      	strb	r3, [r7, #16]
 8000ad6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fe5c 	bl	80007a0 <ST7735_WriteData>
 8000ae8:	e00f      	b.n	8000b0a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000aea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000aee:	0a1b      	lsrs	r3, r3, #8
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	733b      	strb	r3, [r7, #12]
 8000af6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2102      	movs	r1, #2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe4b 	bl	80007a0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b14:	461a      	mov	r2, r3
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d3cf      	bcc.n	8000abc <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b26:	461a      	mov	r2, r3
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d3b5      	bcc.n	8000a9a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	3724      	adds	r7, #36	; 0x24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b3a:	b002      	add	sp, #8
 8000b3c:	4770      	bx	lr
	...

08000b40 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b40:	b082      	sub	sp, #8
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af04      	add	r7, sp, #16
 8000b48:	603a      	str	r2, [r7, #0]
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	80fb      	strh	r3, [r7, #6]
 8000b50:	460b      	mov	r3, r1
 8000b52:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000b54:	f7ff fdde 	bl	8000714 <ST7735_Select>

    while(*str) {
 8000b58:	e033      	b.n	8000bc2 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	7d3a      	ldrb	r2, [r7, #20]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <ST7735_WriteString+0xa0>)
 8000b62:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b66:	4293      	cmp	r3, r2
 8000b68:	db16      	blt.n	8000b98 <ST7735_WriteString+0x58>
            x = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b6e:	7d7b      	ldrb	r3, [r7, #21]
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	88bb      	ldrh	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000b78:	88bb      	ldrh	r3, [r7, #4]
 8000b7a:	7d7a      	ldrb	r2, [r7, #21]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <ST7735_WriteString+0xa4>)
 8000b80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b84:	4293      	cmp	r3, r2
 8000b86:	da21      	bge.n	8000bcc <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b20      	cmp	r3, #32
 8000b8e:	d103      	bne.n	8000b98 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	3301      	adds	r3, #1
 8000b94:	603b      	str	r3, [r7, #0]
                continue;
 8000b96:	e014      	b.n	8000bc2 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	88b9      	ldrh	r1, [r7, #4]
 8000b9e:	88f8      	ldrh	r0, [r7, #6]
 8000ba0:	8c3b      	ldrh	r3, [r7, #32]
 8000ba2:	9302      	str	r3, [sp, #8]
 8000ba4:	8bbb      	ldrh	r3, [r7, #28]
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f7ff ff4f 	bl	8000a50 <ST7735_WriteChar>
        x += font.width;
 8000bb2:	7d3b      	ldrb	r3, [r7, #20]
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	4413      	add	r3, r2
 8000bba:	80fb      	strh	r3, [r7, #6]
        str++;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1c7      	bne.n	8000b5a <ST7735_WriteString+0x1a>
 8000bca:	e000      	b.n	8000bce <ST7735_WriteString+0x8e>
                break;
 8000bcc:	bf00      	nop
    }

    ST7735_Unselect();
 8000bce:	f7ff fdad 	bl	800072c <ST7735_Unselect>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bdc:	b002      	add	sp, #8
 8000bde:	4770      	bx	lr
 8000be0:	24004278 	.word	0x24004278
 8000be4:	2400427c 	.word	0x2400427c

08000be8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	80fb      	strh	r3, [r7, #6]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80bb      	strh	r3, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	807b      	strh	r3, [r7, #2]
 8000c02:	4613      	mov	r3, r2
 8000c04:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	4a37      	ldr	r2, [pc, #220]	; (8000ce8 <ST7735_FillRectangle+0x100>)
 8000c0a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	da66      	bge.n	8000ce0 <ST7735_FillRectangle+0xf8>
 8000c12:	88bb      	ldrh	r3, [r7, #4]
 8000c14:	4a35      	ldr	r2, [pc, #212]	; (8000cec <ST7735_FillRectangle+0x104>)
 8000c16:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	da60      	bge.n	8000ce0 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000c1e:	88fa      	ldrh	r2, [r7, #6]
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a30      	ldr	r2, [pc, #192]	; (8000ce8 <ST7735_FillRectangle+0x100>)
 8000c26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	dd06      	ble.n	8000c3c <ST7735_FillRectangle+0x54>
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <ST7735_FillRectangle+0x100>)
 8000c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000c3c:	88ba      	ldrh	r2, [r7, #4]
 8000c3e:	883b      	ldrh	r3, [r7, #0]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a2a      	ldr	r2, [pc, #168]	; (8000cec <ST7735_FillRectangle+0x104>)
 8000c44:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	dd06      	ble.n	8000c5a <ST7735_FillRectangle+0x72>
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <ST7735_FillRectangle+0x104>)
 8000c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	88bb      	ldrh	r3, [r7, #4]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000c5a:	f7ff fd5b 	bl	8000714 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	b2d8      	uxtb	r0, r3
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	b2d9      	uxtb	r1, r3
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	3b01      	subs	r3, #1
 8000c74:	b2dc      	uxtb	r4, r3
 8000c76:	88bb      	ldrh	r3, [r7, #4]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	883b      	ldrh	r3, [r7, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4413      	add	r3, r2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	3b01      	subs	r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4622      	mov	r2, r4
 8000c88:	f7ff fdee 	bl	8000868 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c8c:	8c3b      	ldrh	r3, [r7, #32]
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	733b      	strb	r3, [r7, #12]
 8000c96:	8c3b      	ldrh	r3, [r7, #32]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <ST7735_FillRectangle+0x108>)
 8000ca2:	f004 f93d 	bl	8004f20 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000ca6:	883b      	ldrh	r3, [r7, #0]
 8000ca8:	80bb      	strh	r3, [r7, #4]
 8000caa:	e013      	b.n	8000cd4 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	80fb      	strh	r3, [r7, #6]
 8000cb0:	e00a      	b.n	8000cc8 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000cb2:	f107 010c 	add.w	r1, r7, #12
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	2202      	movs	r2, #2
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <ST7735_FillRectangle+0x10c>)
 8000cbe:	f006 fd53 	bl	8007768 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	80fb      	strh	r3, [r7, #6]
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1f1      	bne.n	8000cb2 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000cce:	88bb      	ldrh	r3, [r7, #4]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	80bb      	strh	r3, [r7, #4]
 8000cd4:	88bb      	ldrh	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1e8      	bne.n	8000cac <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000cda:	f7ff fd27 	bl	800072c <ST7735_Unselect>
 8000cde:	e000      	b.n	8000ce2 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8000ce0:	bf00      	nop
}
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	24004278 	.word	0x24004278
 8000cec:	2400427c 	.word	0x2400427c
 8000cf0:	58020000 	.word	0x58020000
 8000cf4:	240043e8 	.word	0x240043e8

08000cf8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000cfe:	4a2f      	ldr	r2, [pc, #188]	; (8000dbc <MX_FDCAN1_Init+0xc4>)
 8000d00:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d08:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000d1a:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000d20:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000d26:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d28:	2208      	movs	r2, #8
 8000d2a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d2e:	221f      	movs	r2, #31
 8000d30:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d34:	2208      	movs	r2, #8
 8000d36:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d4a:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d76:	2204      	movs	r2, #4
 8000d78:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d82:	2204      	movs	r2, #4
 8000d84:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000da0:	2204      	movs	r2, #4
 8000da2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_FDCAN1_Init+0xc0>)
 8000da6:	f003 f989 	bl	80040bc <HAL_FDCAN_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000db0:	f000 fca0 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24004288 	.word	0x24004288
 8000dbc:	4000a000 	.word	0x4000a000

08000dc0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0b6      	sub	sp, #216	; 0xd8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	22b4      	movs	r2, #180	; 0xb4
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f016 fc52 	bl	801768a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a2d      	ldr	r2, [pc, #180]	; (8000ea0 <HAL_FDCAN_MspInit+0xe0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d152      	bne.n	8000e96 <HAL_FDCAN_MspInit+0xd6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000df4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000dfa:	2319      	movs	r3, #25
 8000dfc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 5;
 8000e02:	2305      	movs	r3, #5
 8000e04:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e0a:	23c0      	movs	r3, #192	; 0xc0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000e16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e1a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4618      	mov	r0, r3
 8000e22:	f005 f87f 	bl	8005f24 <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8000e2c:	f000 fc62 	bl	80016f4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HAL_FDCAN_MspInit+0xe4>)
 8000e32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e36:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <HAL_FDCAN_MspInit+0xe4>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_FDCAN_MspInit+0xe4>)
 8000e42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_FDCAN_MspInit+0xe4>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <HAL_FDCAN_MspInit+0xe4>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_FDCAN_MspInit+0xe4>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e84:	2309      	movs	r3, #9
 8000e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_FDCAN_MspInit+0xe8>)
 8000e92:	f003 fe9d 	bl	8004bd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000e96:	bf00      	nop
 8000e98:	37d8      	adds	r7, #216	; 0xd8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	4000a000 	.word	0x4000a000
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58020c00 	.word	0x58020c00

08000eac <FDCAN1_MSG_config>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void FDCAN1_MSG_config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	//Prepare CAN data
	myTxData[0] = 0xFF;
 8000eb2:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <FDCAN1_MSG_config+0xa8>)
 8000eb4:	22ff      	movs	r2, #255	; 0xff
 8000eb6:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x00;
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <FDCAN1_MSG_config+0xa8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFF;
 8000ebe:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <FDCAN1_MSG_config+0xa8>)
 8000ec0:	22ff      	movs	r2, #255	; 0xff
 8000ec2:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x00;
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <FDCAN1_MSG_config+0xa8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	70da      	strb	r2, [r3, #3]

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x123;
 8000eda:	f240 1323 	movw	r3, #291	; 0x123
 8000ede:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000ee0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ee4:	617b      	str	r3, [r7, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	481b      	ldr	r0, [pc, #108]	; (8000f58 <FDCAN1_MSG_config+0xac>)
 8000eec:	f003 fac8 	bl	8004480 <HAL_FDCAN_ConfigFilter>


	/* Configure global filter to reject all non-matching frames */
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4817      	ldr	r0, [pc, #92]	; (8000f58 <FDCAN1_MSG_config+0xac>)
 8000efc:	f003 fb36 	bl	800456c <HAL_FDCAN_ConfigGlobalFilter>

	/* Start the FDCAN module */
	HAL_FDCAN_Start(&hfdcan1);
 8000f00:	4815      	ldr	r0, [pc, #84]	; (8000f58 <FDCAN1_MSG_config+0xac>)
 8000f02:	f003 fb60 	bl	80045c6 <HAL_FDCAN_Start>

	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4813      	ldr	r0, [pc, #76]	; (8000f58 <FDCAN1_MSG_config+0xac>)
 8000f0c:	f003 fbe2 	bl	80046d4 <HAL_FDCAN_ActivateNotification>

	/* Prepare Tx Header */
	TxHeader.Identifier = 0x322;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <FDCAN1_MSG_config+0xb0>)
 8000f12:	f240 3222 	movw	r2, #802	; 0x322
 8000f16:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <FDCAN1_MSG_config+0xb0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <FDCAN1_MSG_config+0xb0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <FDCAN1_MSG_config+0xb0>)
 8000f26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f2a:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <FDCAN1_MSG_config+0xb0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <FDCAN1_MSG_config+0xb0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <FDCAN1_MSG_config+0xb0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <FDCAN1_MSG_config+0xb0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <FDCAN1_MSG_config+0xb0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
}
 8000f4a:	bf00      	nop
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	24004280 	.word	0x24004280
 8000f58:	24004288 	.word	0x24004288
 8000f5c:	24004394 	.word	0x24004394

08000f60 <Toggle_CAN_Data>:


void Toggle_CAN_Data(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
	if(myTxData[0] == 0x00)
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <Toggle_CAN_Data+0x48>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10c      	bne.n	8000f86 <Toggle_CAN_Data+0x26>
	{
		myTxData[0] = 0xFF;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <Toggle_CAN_Data+0x48>)
 8000f6e:	22ff      	movs	r2, #255	; 0xff
 8000f70:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0x00;
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <Toggle_CAN_Data+0x48>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0xFF;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <Toggle_CAN_Data+0x48>)
 8000f7a:	22ff      	movs	r2, #255	; 0xff
 8000f7c:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0x00;
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <Toggle_CAN_Data+0x48>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	70da      	strb	r2, [r3, #3]
		myTxData[0] = 0x00;
		myTxData[1] = 0xFF;
		myTxData[2] = 0x00;
		myTxData[3] = 0xFF;
	}
}
 8000f84:	e00b      	b.n	8000f9e <Toggle_CAN_Data+0x3e>
		myTxData[0] = 0x00;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <Toggle_CAN_Data+0x48>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0xFF;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <Toggle_CAN_Data+0x48>)
 8000f8e:	22ff      	movs	r2, #255	; 0xff
 8000f90:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0x00;
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <Toggle_CAN_Data+0x48>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0xFF;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <Toggle_CAN_Data+0x48>)
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	70da      	strb	r2, [r3, #3]
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	24004280 	.word	0x24004280

08000fac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <vApplicationGetIdleTaskMemory+0x30>)
 8000fc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	240000c4 	.word	0x240000c4
 8000fdc:	24000178 	.word	0x24000178

08000fe0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b08e      	sub	sp, #56	; 0x38
 8000fe4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_FREERTOS_Init+0x58>)
 8000fe8:	f107 041c 	add.w	r4, r7, #28
 8000fec:	461d      	mov	r5, r3
 8000fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f009 f9e0 	bl	800a3c6 <osThreadCreate>
 8001006:	4603      	mov	r3, r0
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <MX_FREERTOS_Init+0x5c>)
 800100a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_init, osPriorityNormal, 0, 128);
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_FREERTOS_Init+0x60>)
 800100e:	463c      	mov	r4, r7
 8001010:	461d      	mov	r5, r3
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 800101e:	463b      	mov	r3, r7
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f009 f9cf 	bl	800a3c6 <osThreadCreate>
 8001028:	4603      	mov	r3, r0
 800102a:	4a06      	ldr	r2, [pc, #24]	; (8001044 <MX_FREERTOS_Init+0x64>)
 800102c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800102e:	bf00      	nop
 8001030:	3738      	adds	r7, #56	; 0x38
 8001032:	46bd      	mov	sp, r7
 8001034:	bdb0      	pop	{r4, r5, r7, pc}
 8001036:	bf00      	nop
 8001038:	080185e0 	.word	0x080185e0
 800103c:	240043e0 	.word	0x240043e0
 8001040:	080185fc 	.word	0x080185fc
 8001044:	240043e4 	.word	0x240043e4

08001048 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001050:	f008 fbce 	bl	80097f0 <MX_LWIP_Init>
  //tcp_server_init();

  /* USER CODE BEGIN StartDefaultTask */
  SM_STATES state = INIT;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]

  //Start Timer
  HAL_TIM_Base_Start(&htim6);
 8001058:	4834      	ldr	r0, [pc, #208]	; (800112c <StartDefaultTask+0xe4>)
 800105a:	f006 feb7 	bl	8007dcc <HAL_TIM_Base_Start>

  //Get current time
  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <StartDefaultTask+0xe4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	b29a      	uxth	r2, r3
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <StartDefaultTask+0xe8>)
 8001068:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	  switch(state)
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d056      	beq.n	800111e <StartDefaultTask+0xd6>
 8001070:	2b02      	cmp	r3, #2
 8001072:	dc56      	bgt.n	8001122 <StartDefaultTask+0xda>
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <StartDefaultTask+0x36>
 8001078:	2b01      	cmp	r3, #1
 800107a:	d030      	beq.n	80010de <StartDefaultTask+0x96>

					 state = IDLE;
					 break;

		  case STATE_2: break;
		  default: break;
 800107c:	e051      	b.n	8001122 <StartDefaultTask+0xda>
					 ST7735_SetRotation(2);
 800107e:	2002      	movs	r0, #2
 8001080:	f7ff fc66 	bl	8000950 <ST7735_SetRotation>
					 ST7735_WriteString(0, 0, "Hello Ethernet!", Font_7x10, WHITE,BLACK);
 8001084:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <StartDefaultTask+0xec>)
 8001086:	2200      	movs	r2, #0
 8001088:	9202      	str	r2, [sp, #8]
 800108a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108e:	9201      	str	r2, [sp, #4]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	9200      	str	r2, [sp, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a28      	ldr	r2, [pc, #160]	; (8001138 <StartDefaultTask+0xf0>)
 8001098:	2100      	movs	r1, #0
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff fd50 	bl	8000b40 <ST7735_WriteString>
					 ST7735_WriteString(0, 12, "Hello CAN!", Font_7x10, WHITE,BLACK);
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <StartDefaultTask+0xec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	9202      	str	r2, [sp, #8]
 80010a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010aa:	9201      	str	r2, [sp, #4]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	9200      	str	r2, [sp, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a22      	ldr	r2, [pc, #136]	; (800113c <StartDefaultTask+0xf4>)
 80010b4:	210c      	movs	r1, #12
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff fd42 	bl	8000b40 <ST7735_WriteString>
					 ST7735_WriteString(0, 24, "Hello SPI!", Font_7x10, WHITE,BLACK);
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <StartDefaultTask+0xec>)
 80010be:	2200      	movs	r2, #0
 80010c0:	9202      	str	r2, [sp, #8]
 80010c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c6:	9201      	str	r2, [sp, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <StartDefaultTask+0xf8>)
 80010d0:	2118      	movs	r1, #24
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fd34 	bl	8000b40 <ST7735_WriteString>
					 state = IDLE;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
					 break;
 80010dc:	e022      	b.n	8001124 <StartDefaultTask+0xdc>
					 sys_check_timeouts();
 80010de:	f013 fb73 	bl	80147c8 <sys_check_timeouts>
					 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_val >= 10000)
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <StartDefaultTask+0xe4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	4a11      	ldr	r2, [pc, #68]	; (8001130 <StartDefaultTask+0xe8>)
 80010ea:	8812      	ldrh	r2, [r2, #0]
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d910      	bls.n	8001118 <StartDefaultTask+0xd0>
						  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80010f6:	2102      	movs	r1, #2
 80010f8:	4812      	ldr	r0, [pc, #72]	; (8001144 <StartDefaultTask+0xfc>)
 80010fa:	f003 ff2a 	bl	8004f52 <HAL_GPIO_TogglePin>
						  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <StartDefaultTask+0xe4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	b29a      	uxth	r2, r3
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <StartDefaultTask+0xe8>)
 8001108:	801a      	strh	r2, [r3, #0]
						  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <StartDefaultTask+0x100>)
 800110c:	490f      	ldr	r1, [pc, #60]	; (800114c <StartDefaultTask+0x104>)
 800110e:	4810      	ldr	r0, [pc, #64]	; (8001150 <StartDefaultTask+0x108>)
 8001110:	f003 fa84 	bl	800461c <HAL_FDCAN_AddMessageToTxFifoQ>
						  Toggle_CAN_Data();
 8001114:	f7ff ff24 	bl	8000f60 <Toggle_CAN_Data>
					 state = IDLE;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
					 break;
 800111c:	e002      	b.n	8001124 <StartDefaultTask+0xdc>
		  case STATE_2: break;
 800111e:	bf00      	nop
 8001120:	e000      	b.n	8001124 <StartDefaultTask+0xdc>
		  default: break;
 8001122:	bf00      	nop
	  }

	  osDelay(1);
 8001124:	2001      	movs	r0, #1
 8001126:	f009 f99a 	bl	800a45e <osDelay>
	  switch(state)
 800112a:	e79e      	b.n	800106a <StartDefaultTask+0x22>
 800112c:	240044bc 	.word	0x240044bc
 8001130:	24004328 	.word	0x24004328
 8001134:	24000000 	.word	0x24000000
 8001138:	08018618 	.word	0x08018618
 800113c:	08018628 	.word	0x08018628
 8001140:	08018634 	.word	0x08018634
 8001144:	58021000 	.word	0x58021000
 8001148:	24004280 	.word	0x24004280
 800114c:	24004394 	.word	0x24004394
 8001150:	24004288 	.word	0x24004288

08001154 <Task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f009 f97e 	bl	800a45e <osDelay>
 8001162:	e7fb      	b.n	800115c <Task2_init+0x8>

08001164 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b8f      	ldr	r3, [pc, #572]	; (80013b8 <MX_GPIO_Init+0x254>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	4a8d      	ldr	r2, [pc, #564]	; (80013b8 <MX_GPIO_Init+0x254>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118a:	4b8b      	ldr	r3, [pc, #556]	; (80013b8 <MX_GPIO_Init+0x254>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001198:	4b87      	ldr	r3, [pc, #540]	; (80013b8 <MX_GPIO_Init+0x254>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	4a86      	ldr	r2, [pc, #536]	; (80013b8 <MX_GPIO_Init+0x254>)
 80011a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a8:	4b83      	ldr	r3, [pc, #524]	; (80013b8 <MX_GPIO_Init+0x254>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b80      	ldr	r3, [pc, #512]	; (80013b8 <MX_GPIO_Init+0x254>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	4a7e      	ldr	r2, [pc, #504]	; (80013b8 <MX_GPIO_Init+0x254>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c6:	4b7c      	ldr	r3, [pc, #496]	; (80013b8 <MX_GPIO_Init+0x254>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b78      	ldr	r3, [pc, #480]	; (80013b8 <MX_GPIO_Init+0x254>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	4a77      	ldr	r2, [pc, #476]	; (80013b8 <MX_GPIO_Init+0x254>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e4:	4b74      	ldr	r3, [pc, #464]	; (80013b8 <MX_GPIO_Init+0x254>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	4b71      	ldr	r3, [pc, #452]	; (80013b8 <MX_GPIO_Init+0x254>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f8:	4a6f      	ldr	r2, [pc, #444]	; (80013b8 <MX_GPIO_Init+0x254>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001202:	4b6d      	ldr	r3, [pc, #436]	; (80013b8 <MX_GPIO_Init+0x254>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001210:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <MX_GPIO_Init+0x254>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	4a68      	ldr	r2, [pc, #416]	; (80013b8 <MX_GPIO_Init+0x254>)
 8001218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001220:	4b65      	ldr	r3, [pc, #404]	; (80013b8 <MX_GPIO_Init+0x254>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800122e:	4b62      	ldr	r3, [pc, #392]	; (80013b8 <MX_GPIO_Init+0x254>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a60      	ldr	r2, [pc, #384]	; (80013b8 <MX_GPIO_Init+0x254>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b5e      	ldr	r3, [pc, #376]	; (80013b8 <MX_GPIO_Init+0x254>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2109      	movs	r1, #9
 8001250:	485a      	ldr	r0, [pc, #360]	; (80013bc <MX_GPIO_Init+0x258>)
 8001252:	f003 fe65 	bl	8004f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2108      	movs	r1, #8
 800125a:	4859      	ldr	r0, [pc, #356]	; (80013c0 <MX_GPIO_Init+0x25c>)
 800125c:	f003 fe60 	bl	8004f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f244 0101 	movw	r1, #16385	; 0x4001
 8001266:	4857      	ldr	r0, [pc, #348]	; (80013c4 <MX_GPIO_Init+0x260>)
 8001268:	f003 fe5a 	bl	8004f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001272:	4855      	ldr	r0, [pc, #340]	; (80013c8 <MX_GPIO_Init+0x264>)
 8001274:	f003 fe54 	bl	8004f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2102      	movs	r1, #2
 800127c:	4853      	ldr	r0, [pc, #332]	; (80013cc <MX_GPIO_Init+0x268>)
 800127e:	f003 fe4f 	bl	8004f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4849      	ldr	r0, [pc, #292]	; (80013bc <MX_GPIO_Init+0x258>)
 8001298:	f003 fc9a 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800129c:	2309      	movs	r3, #9
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4842      	ldr	r0, [pc, #264]	; (80013bc <MX_GPIO_Init+0x258>)
 80012b4:	f003 fc8c 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012b8:	2308      	movs	r3, #8
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	483c      	ldr	r0, [pc, #240]	; (80013c0 <MX_GPIO_Init+0x25c>)
 80012d0:	f003 fc7e 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80012d4:	f244 0301 	movw	r3, #16385	; 0x4001
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	4835      	ldr	r0, [pc, #212]	; (80013c4 <MX_GPIO_Init+0x260>)
 80012ee:	f003 fc6f 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80012f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	482f      	ldr	r0, [pc, #188]	; (80013c8 <MX_GPIO_Init+0x264>)
 800130c:	f003 fc60 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001314:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	482a      	ldr	r0, [pc, #168]	; (80013d0 <MX_GPIO_Init+0x26c>)
 8001326:	f003 fc53 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800132a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4820      	ldr	r0, [pc, #128]	; (80013c0 <MX_GPIO_Init+0x25c>)
 8001340:	f003 fc46 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001356:	230a      	movs	r3, #10
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4817      	ldr	r0, [pc, #92]	; (80013c0 <MX_GPIO_Init+0x25c>)
 8001362:	f003 fc35 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800136c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	480f      	ldr	r0, [pc, #60]	; (80013bc <MX_GPIO_Init+0x258>)
 800137e:	f003 fc27 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001382:	2302      	movs	r3, #2
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <MX_GPIO_Init+0x268>)
 800139a:	f003 fc19 	bl	8004bd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2105      	movs	r1, #5
 80013a2:	2028      	movs	r0, #40	; 0x28
 80013a4:	f001 f864 	bl	8002470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013a8:	2028      	movs	r0, #40	; 0x28
 80013aa:	f001 f87b 	bl	80024a4 <HAL_NVIC_EnableIRQ>

}
 80013ae:	bf00      	nop
 80013b0:	3730      	adds	r7, #48	; 0x30
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	58024400 	.word	0x58024400
 80013bc:	58020800 	.word	0x58020800
 80013c0:	58020000 	.word	0x58020000
 80013c4:	58020400 	.word	0x58020400
 80013c8:	58020c00 	.word	0x58020c00
 80013cc:	58021000 	.word	0x58021000
 80013d0:	58021800 	.word	0x58021800

080013d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af04      	add	r7, sp, #16
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN1_Pin) /* Interrupt only for BTN1_Pin (1st button from left to right in the breadboard) */
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e4:	d133      	bne.n	800144e <HAL_GPIO_EXTI_Callback+0x7a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80013e6:	2101      	movs	r1, #1
 80013e8:	481b      	ldr	r0, [pc, #108]	; (8001458 <HAL_GPIO_EXTI_Callback+0x84>)
 80013ea:	f003 fdb2 	bl	8004f52 <HAL_GPIO_TogglePin>

		if(globalCluster.btn1_flag == 0)
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_GPIO_EXTI_Callback+0x88>)
 80013f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d115      	bne.n	8001424 <HAL_GPIO_EXTI_Callback+0x50>
		{
			fillScreen(BLACK);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff f971 	bl	80006e0 <fillScreen>
			ST7735_WriteString(0, 0, "BTN1 ON!", Font_11x18, RED,BLACK);
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001400:	2200      	movs	r2, #0
 8001402:	9202      	str	r2, [sp, #8]
 8001404:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001408:	9201      	str	r2, [sp, #4]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	9200      	str	r2, [sp, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_GPIO_EXTI_Callback+0x90>)
 8001412:	2100      	movs	r1, #0
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fb93 	bl	8000b40 <ST7735_WriteString>
			globalCluster.btn1_flag = 1;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_GPIO_EXTI_Callback+0x88>)
 800141c:	2201      	movs	r2, #1
 800141e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			ST7735_WriteString(0, 0, "BTN1 OFF!", Font_11x18, RED,BLACK);
			globalCluster.btn1_flag = 0;
		}
	}

}
 8001422:	e014      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x7a>
			fillScreen(BLACK);
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff f95b 	bl	80006e0 <fillScreen>
			ST7735_WriteString(0, 0, "BTN1 OFF!", Font_11x18, RED,BLACK);
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_GPIO_EXTI_Callback+0x8c>)
 800142c:	2200      	movs	r2, #0
 800142e:	9202      	str	r2, [sp, #8]
 8001430:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001434:	9201      	str	r2, [sp, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	9200      	str	r2, [sp, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_GPIO_EXTI_Callback+0x94>)
 800143e:	2100      	movs	r1, #0
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff fb7d 	bl	8000b40 <ST7735_WriteString>
			globalCluster.btn1_flag = 0;
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_GPIO_EXTI_Callback+0x88>)
 8001448:	2200      	movs	r2, #0
 800144a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	58020400 	.word	0x58020400
 800145c:	2400432c 	.word	0x2400432c
 8001460:	24000008 	.word	0x24000008
 8001464:	08018640 	.word	0x08018640
 8001468:	0801864c 	.word	0x0801864c

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001472:	f000 f8ff 	bl	8001674 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001476:	4b40      	ldr	r3, [pc, #256]	; (8001578 <main+0x10c>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d11b      	bne.n	80014ba <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001482:	f3bf 8f4f 	dsb	sy
}
 8001486:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001488:	f3bf 8f6f 	isb	sy
}
 800148c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <main+0x10c>)
 8001490:	2200      	movs	r2, #0
 8001492:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001496:	f3bf 8f4f 	dsb	sy
}
 800149a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800149c:	f3bf 8f6f 	isb	sy
}
 80014a0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014a2:	4b35      	ldr	r3, [pc, #212]	; (8001578 <main+0x10c>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	4a34      	ldr	r2, [pc, #208]	; (8001578 <main+0x10c>)
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014ae:	f3bf 8f4f 	dsb	sy
}
 80014b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014b4:	f3bf 8f6f 	isb	sy
}
 80014b8:	e000      	b.n	80014bc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014ba:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80014bc:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <main+0x10c>)
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d138      	bne.n	800153a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <main+0x10c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80014d0:	f3bf 8f4f 	dsb	sy
}
 80014d4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80014d6:	4b28      	ldr	r3, [pc, #160]	; (8001578 <main+0x10c>)
 80014d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014dc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	0b5b      	lsrs	r3, r3, #13
 80014e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014e6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	08db      	lsrs	r3, r3, #3
 80014ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014f0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80014fa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001500:	491d      	ldr	r1, [pc, #116]	; (8001578 <main+0x10c>)
 8001502:	4313      	orrs	r3, r2
 8001504:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	1e5a      	subs	r2, r3, #1
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1ef      	bne.n	80014f2 <main+0x86>
    } while(sets-- != 0U);
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	60ba      	str	r2, [r7, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1e5      	bne.n	80014e8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <main+0x10c>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a14      	ldr	r2, [pc, #80]	; (8001578 <main+0x10c>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800152e:	f3bf 8f4f 	dsb	sy
}
 8001532:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001534:	f3bf 8f6f 	isb	sy
}
 8001538:	e000      	b.n	800153c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800153a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153c:	f000 fe4c 	bl	80021d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001540:	f000 f81c 	bl	800157c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001544:	f7ff fe0e 	bl	8001164 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001548:	f000 fc02 	bl	8001d50 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800154c:	f000 fcb2 	bl	8001eb4 <MX_USB_OTG_HS_USB_Init>
  MX_FDCAN1_Init();
 8001550:	f7ff fbd2 	bl	8000cf8 <MX_FDCAN1_Init>
  MX_TIM6_Init();
 8001554:	f000 fba2 	bl	8001c9c <MX_TIM6_Init>
  MX_SPI1_Init();
 8001558:	f000 f8d2 	bl	8001700 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_MSG_config();
 800155c:	f7ff fca6 	bl	8000eac <FDCAN1_MSG_config>
  ST7735_Init(0);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff f9c9 	bl	80008f8 <ST7735_Init>
  fillScreen(BLACK);
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff f8ba 	bl	80006e0 <fillScreen>
  //testAll();

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800156c:	f7ff fd38 	bl	8000fe0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001570:	f008 ff12 	bl	800a398 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001574:	e7fe      	b.n	8001574 <main+0x108>
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b09c      	sub	sp, #112	; 0x70
 8001580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	224c      	movs	r2, #76	; 0x4c
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f016 f87d 	bl	801768a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2220      	movs	r2, #32
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f016 f877 	bl	801768a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800159c:	2002      	movs	r0, #2
 800159e:	f003 fd0d 	bl	8004fbc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <SystemClock_Config+0xf0>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015ae:	4a2f      	ldr	r2, [pc, #188]	; (800166c <SystemClock_Config+0xf0>)
 80015b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b4:	6193      	str	r3, [r2, #24]
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <SystemClock_Config+0xf0>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015c2:	bf00      	nop
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <SystemClock_Config+0xf0>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d0:	d1f8      	bne.n	80015c4 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <SystemClock_Config+0xf4>)
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	f023 0303 	bic.w	r3, r3, #3
 80015da:	4a25      	ldr	r2, [pc, #148]	; (8001670 <SystemClock_Config+0xf4>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80015e2:	2321      	movs	r3, #33	; 0x21
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015e6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015ec:	2301      	movs	r3, #1
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f0:	2302      	movs	r3, #2
 80015f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f4:	2302      	movs	r3, #2
 80015f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015f8:	2301      	movs	r3, #1
 80015fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80015fc:	2318      	movs	r3, #24
 80015fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001604:	2302      	movs	r3, #2
 8001606:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001608:	2302      	movs	r3, #2
 800160a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800160c:	230c      	movs	r3, #12
 800160e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001610:	2300      	movs	r3, #0
 8001612:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4618      	mov	r0, r3
 800161e:	f003 fd07 	bl	8005030 <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001628:	f000 f864 	bl	80016f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	233f      	movs	r3, #63	; 0x3f
 800162e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	2303      	movs	r3, #3
 8001632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001638:	2308      	movs	r3, #8
 800163a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800163c:	2340      	movs	r3, #64	; 0x40
 800163e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001640:	2340      	movs	r3, #64	; 0x40
 8001642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001648:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800164a:	2340      	movs	r3, #64	; 0x40
 800164c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2101      	movs	r1, #1
 8001652:	4618      	mov	r0, r3
 8001654:	f004 f898 	bl	8005788 <HAL_RCC_ClockConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800165e:	f000 f849 	bl	80016f4 <Error_Handler>
  }
}
 8001662:	bf00      	nop
 8001664:	3770      	adds	r7, #112	; 0x70
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	58024800 	.word	0x58024800
 8001670:	58024400 	.word	0x58024400

08001674 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800167a:	463b      	mov	r3, r7
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001686:	f000 ff1b 	bl	80024c0 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800168e:	2300      	movs	r3, #0
 8001690:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001692:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001696:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001698:	230e      	movs	r3, #14
 800169a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800169c:	2300      	movs	r3, #0
 800169e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80016a4:	2303      	movs	r3, #3
 80016a6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016a8:	2301      	movs	r3, #1
 80016aa:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016b8:	463b      	mov	r3, r7
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 ff38 	bl	8002530 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016c0:	2004      	movs	r0, #4
 80016c2:	f000 ff15 	bl	80024f0 <HAL_MPU_Enable>

}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d101      	bne.n	80016e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016e2:	f000 fdb5 	bl	8002250 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40010000 	.word	0x40010000

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016fc:	e7fe      	b.n	80016fc <Error_Handler+0x8>
	...

08001700 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001706:	4a28      	ldr	r2, [pc, #160]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800170c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001714:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001718:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800171c:	2207      	movs	r2, #7
 800171e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800172e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001732:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001736:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800173a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800174a:	2200      	movs	r2, #0
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001750:	2200      	movs	r2, #0
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001756:	2200      	movs	r2, #0
 8001758:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800175c:	2200      	movs	r2, #0
 800175e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001762:	2200      	movs	r2, #0
 8001764:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001768:	2200      	movs	r2, #0
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800176e:	2200      	movs	r2, #0
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001774:	2200      	movs	r2, #0
 8001776:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800177a:	2200      	movs	r2, #0
 800177c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001780:	2200      	movs	r2, #0
 8001782:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001786:	2200      	movs	r2, #0
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001792:	f005 fee3 	bl	800755c <HAL_SPI_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800179c:	f7ff ffaa 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	240043e8 	.word	0x240043e8
 80017a8:	40013000 	.word	0x40013000

080017ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b0b8      	sub	sp, #224	; 0xe0
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017c4:	f107 0318 	add.w	r3, r7, #24
 80017c8:	22b4      	movs	r2, #180	; 0xb4
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f015 ff5c 	bl	801768a <memset>
  if(spiHandle->Instance==SPI1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a36      	ldr	r2, [pc, #216]	; (80018b0 <HAL_SPI_MspInit+0x104>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d165      	bne.n	80018a8 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e6:	f107 0318 	add.w	r3, r7, #24
 80017ea:	4618      	mov	r0, r3
 80017ec:	f004 fb9a 	bl	8005f24 <HAL_RCCEx_PeriphCLKConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80017f6:	f7ff ff7d 	bl	80016f4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017fa:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <HAL_SPI_MspInit+0x108>)
 80017fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001800:	4a2c      	ldr	r2, [pc, #176]	; (80018b4 <HAL_SPI_MspInit+0x108>)
 8001802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001806:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_SPI_MspInit+0x108>)
 800180c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_SPI_MspInit+0x108>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181e:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <HAL_SPI_MspInit+0x108>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <HAL_SPI_MspInit+0x108>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <HAL_SPI_MspInit+0x108>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183c:	4a1d      	ldr	r2, [pc, #116]	; (80018b4 <HAL_SPI_MspInit+0x108>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_SPI_MspInit+0x108>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001854:	2320      	movs	r3, #32
 8001856:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800186c:	2305      	movs	r3, #5
 800186e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001876:	4619      	mov	r1, r3
 8001878:	480f      	ldr	r0, [pc, #60]	; (80018b8 <HAL_SPI_MspInit+0x10c>)
 800187a:	f003 f9a9 	bl	8004bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001896:	2305      	movs	r3, #5
 8001898:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800189c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <HAL_SPI_MspInit+0x110>)
 80018a4:	f003 f994 	bl	8004bd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018a8:	bf00      	nop
 80018aa:	37e0      	adds	r7, #224	; 0xe0
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40013000 	.word	0x40013000
 80018b4:	58024400 	.word	0x58024400
 80018b8:	58020000 	.word	0x58020000
 80018bc:	58020c00 	.word	0x58020c00

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_MspInit+0x38>)
 80018c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_MspInit+0x38>)
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_MspInit+0x38>)
 80018d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	210f      	movs	r1, #15
 80018e8:	f06f 0001 	mvn.w	r0, #1
 80018ec:	f000 fdc0 	bl	8002470 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	58024400 	.word	0x58024400

080018fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08e      	sub	sp, #56	; 0x38
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	d844      	bhi.n	8001994 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800190a:	2200      	movs	r2, #0
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	2019      	movs	r0, #25
 8001910:	f000 fdae 	bl	8002470 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001914:	2019      	movs	r0, #25
 8001916:	f000 fdc5 	bl	80024a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800191a:	4a24      	ldr	r2, [pc, #144]	; (80019ac <HAL_InitTick+0xb0>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_InitTick+0xb4>)
 8001922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001926:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <HAL_InitTick+0xb4>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <HAL_InitTick+0xb4>)
 8001932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800193e:	f107 020c 	add.w	r2, r7, #12
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f004 faa9 	bl	8005ea0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800194e:	f004 fa91 	bl	8005e74 <HAL_RCC_GetPCLK2Freq>
 8001952:	4603      	mov	r3, r0
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <HAL_InitTick+0xb8>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	0c9b      	lsrs	r3, r3, #18
 8001962:	3b01      	subs	r3, #1
 8001964:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_InitTick+0xbc>)
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <HAL_InitTick+0xc0>)
 800196a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_InitTick+0xbc>)
 800196e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001972:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001974:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <HAL_InitTick+0xbc>)
 8001976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001978:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_InitTick+0xbc>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_InitTick+0xbc>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <HAL_InitTick+0xbc>)
 8001988:	f006 f9c9 	bl	8007d1e <HAL_TIM_Base_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d107      	bne.n	80019a2 <HAL_InitTick+0xa6>
 8001992:	e001      	b.n	8001998 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e005      	b.n	80019a4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001998:	4807      	ldr	r0, [pc, #28]	; (80019b8 <HAL_InitTick+0xbc>)
 800199a:	f006 fa95 	bl	8007ec8 <HAL_TIM_Base_Start_IT>
 800199e:	4603      	mov	r3, r0
 80019a0:	e000      	b.n	80019a4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3738      	adds	r7, #56	; 0x38
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	24000018 	.word	0x24000018
 80019b0:	58024400 	.word	0x58024400
 80019b4:	431bde83 	.word	0x431bde83
 80019b8:	24004470 	.word	0x24004470
 80019bc:	40010000 	.word	0x40010000

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <NMI_Handler+0x4>

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler+0x4>

080019d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <UsageFault_Handler+0x4>

080019de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <TIM1_UP_IRQHandler+0x10>)
 80019f2:	f006 faef 	bl	8007fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	24004470 	.word	0x24004470

08001a00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_PWR_EN_Pin);
 8001a04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a08:	f003 fabd 	bl	8004f86 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return 1;
 8001a14:	2301      	movs	r3, #1
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_kill>:

int _kill(int pid, int sig)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <_kill+0x20>)
 8001a2c:	2216      	movs	r2, #22
 8001a2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	24007870 	.word	0x24007870

08001a44 <_exit>:

void _exit (int status)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ffe5 	bl	8001a20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a56:	e7fe      	b.n	8001a56 <_exit+0x12>

08001a58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	e00a      	b.n	8001a80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a6a:	f3af 8000 	nop.w
 8001a6e:	4601      	mov	r1, r0
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	60ba      	str	r2, [r7, #8]
 8001a76:	b2ca      	uxtb	r2, r1
 8001a78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbf0      	blt.n	8001a6a <_read+0x12>
	}

return len;
 8001a88:	687b      	ldr	r3, [r7, #4]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e009      	b.n	8001ab8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60ba      	str	r2, [r7, #8]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf1      	blt.n	8001aa4 <_write+0x12>
	}
	return len;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_close>:

int _close(int file)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af2:	605a      	str	r2, [r3, #4]
	return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_isatty>:

int _isatty(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
	return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d205      	bcs.n	8001b70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <_sbrk+0x6c>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	24050000 	.word	0x24050000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	24000378 	.word	0x24000378
 8001b9c:	24007888 	.word	0x24007888
 8001ba0:	24007870 	.word	0x24007870

08001ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ba8:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <SystemInit+0xd8>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bae:	4a33      	ldr	r2, [pc, #204]	; (8001c7c <SystemInit+0xd8>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bb8:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <SystemInit+0xdc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	2b06      	cmp	r3, #6
 8001bc2:	d807      	bhi.n	8001bd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <SystemInit+0xdc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 030f 	bic.w	r3, r3, #15
 8001bcc:	4a2c      	ldr	r2, [pc, #176]	; (8001c80 <SystemInit+0xdc>)
 8001bce:	f043 0307 	orr.w	r3, r3, #7
 8001bd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <SystemInit+0xe0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2a      	ldr	r2, [pc, #168]	; (8001c84 <SystemInit+0xe0>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <SystemInit+0xe0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001be6:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <SystemInit+0xe0>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4926      	ldr	r1, [pc, #152]	; (8001c84 <SystemInit+0xe0>)
 8001bec:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <SystemInit+0xe4>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <SystemInit+0xdc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <SystemInit+0xdc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 030f 	bic.w	r3, r3, #15
 8001c06:	4a1e      	ldr	r2, [pc, #120]	; (8001c80 <SystemInit+0xdc>)
 8001c08:	f043 0307 	orr.w	r3, r3, #7
 8001c0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <SystemInit+0xe0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <SystemInit+0xe0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <SystemInit+0xe0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <SystemInit+0xe0>)
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <SystemInit+0xe8>)
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <SystemInit+0xe0>)
 8001c28:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <SystemInit+0xec>)
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <SystemInit+0xe0>)
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <SystemInit+0xf0>)
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <SystemInit+0xe0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <SystemInit+0xe0>)
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <SystemInit+0xf0>)
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <SystemInit+0xe0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <SystemInit+0xe0>)
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <SystemInit+0xf0>)
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <SystemInit+0xe0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <SystemInit+0xe0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <SystemInit+0xe0>)
 8001c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <SystemInit+0xe0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <SystemInit+0xf4>)
 8001c64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c68:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SystemInit+0xd8>)
 8001c6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c70:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00
 8001c80:	52002000 	.word	0x52002000
 8001c84:	58024400 	.word	0x58024400
 8001c88:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c8c:	02020200 	.word	0x02020200
 8001c90:	01ff0000 	.word	0x01ff0000
 8001c94:	01010280 	.word	0x01010280
 8001c98:	52004000 	.word	0x52004000

08001c9c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <MX_TIM6_Init+0x68>)
 8001cae:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <MX_TIM6_Init+0x6c>)
 8001cb0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <MX_TIM6_Init+0x68>)
 8001cb4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001cb8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_TIM6_Init+0x68>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_TIM6_Init+0x68>)
 8001cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_TIM6_Init+0x68>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cce:	480d      	ldr	r0, [pc, #52]	; (8001d04 <MX_TIM6_Init+0x68>)
 8001cd0:	f006 f825 	bl	8007d1e <HAL_TIM_Base_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001cda:	f7ff fd0b 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4806      	ldr	r0, [pc, #24]	; (8001d04 <MX_TIM6_Init+0x68>)
 8001cec:	f006 fb60 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001cf6:	f7ff fcfd 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	240044bc 	.word	0x240044bc
 8001d08:	40001000 	.word	0x40001000

08001d0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <HAL_TIM_Base_MspInit+0x3c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10e      	bne.n	8001d3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_TIM_Base_MspInit+0x40>)
 8001d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d24:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_TIM_Base_MspInit+0x40>)
 8001d26:	f043 0310 	orr.w	r3, r3, #16
 8001d2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <HAL_TIM_Base_MspInit+0x40>)
 8001d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40001000 	.word	0x40001000
 8001d4c:	58024400 	.word	0x58024400

08001d50 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d54:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001d56:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <MX_USART3_UART_Init+0x94>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d92:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d98:	4811      	ldr	r0, [pc, #68]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001d9a:	f006 fbc3 	bl	8008524 <HAL_UART_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001da4:	f7ff fca6 	bl	80016f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da8:	2100      	movs	r1, #0
 8001daa:	480d      	ldr	r0, [pc, #52]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001dac:	f007 fc56 	bl	800965c <HAL_UARTEx_SetTxFifoThreshold>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001db6:	f7ff fc9d 	bl	80016f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4808      	ldr	r0, [pc, #32]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001dbe:	f007 fc8b 	bl	80096d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001dc8:	f7ff fc94 	bl	80016f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001dcc:	4804      	ldr	r0, [pc, #16]	; (8001de0 <MX_USART3_UART_Init+0x90>)
 8001dce:	f007 fc0c 	bl	80095ea <HAL_UARTEx_DisableFifoMode>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001dd8:	f7ff fc8c 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	24004508 	.word	0x24004508
 8001de4:	40004800 	.word	0x40004800

08001de8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0b6      	sub	sp, #216	; 0xd8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	22b4      	movs	r2, #180	; 0xb4
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f015 fc3e 	bl	801768a <memset>
  if(uartHandle->Instance==USART3)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <HAL_UART_MspInit+0xc0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d142      	bne.n	8001e9e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 f87c 	bl	8005f24 <HAL_RCCEx_PeriphCLKConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e32:	f7ff fc5f 	bl	80016f4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_UART_MspInit+0xc4>)
 8001e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_UART_MspInit+0xc4>)
 8001e3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_UART_MspInit+0xc4>)
 8001e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_UART_MspInit+0xc4>)
 8001e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5a:	4a14      	ldr	r2, [pc, #80]	; (8001eac <HAL_UART_MspInit+0xc4>)
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_UART_MspInit+0xc4>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e8c:	2307      	movs	r3, #7
 8001e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <HAL_UART_MspInit+0xc8>)
 8001e9a:	f002 fe99 	bl	8004bd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	37d8      	adds	r7, #216	; 0xd8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40004800 	.word	0x40004800
 8001eac:	58024400 	.word	0x58024400
 8001eb0:	58020c00 	.word	0x58020c00

08001eb4 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001efc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ec8:	f7ff fe6c 	bl	8001ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ece:	490d      	ldr	r1, [pc, #52]	; (8001f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ee4:	4c0a      	ldr	r4, [pc, #40]	; (8001f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f015 fb87 	bl	8017604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef6:	f7ff fab9 	bl	800146c <main>
  bx  lr
 8001efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001efc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001f00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f04:	240000a8 	.word	0x240000a8
  ldr r2, =_sidata
 8001f08:	0801c9e8 	.word	0x0801c9e8
  ldr r2, =_sbss
 8001f0c:	240000a8 	.word	0x240000a8
  ldr r4, =_ebss
 8001f10:	24007884 	.word	0x24007884

08001f14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC3_IRQHandler>

08001f16 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <LAN8742_RegisterBusIO+0x28>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <LAN8742_RegisterBusIO+0x28>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <LAN8742_RegisterBusIO+0x28>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e014      	b.n	8001f6e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d17c      	bne.n	8002094 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e01c      	b.n	8001fee <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	f107 0208 	add.w	r2, r7, #8
 8001fbc:	2112      	movs	r1, #18
 8001fbe:	6978      	ldr	r0, [r7, #20]
 8001fc0:	4798      	blx	r3
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	da03      	bge.n	8001fd0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001fc8:	f06f 0304 	mvn.w	r3, #4
 8001fcc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001fce:	e00b      	b.n	8001fe8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d105      	bne.n	8001fe8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
         break;
 8001fe6:	e005      	b.n	8001ff4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b1f      	cmp	r3, #31
 8001ff2:	d9df      	bls.n	8001fb4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b1f      	cmp	r3, #31
 8001ffa:	d902      	bls.n	8002002 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001ffc:	f06f 0302 	mvn.w	r3, #2
 8002000:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d145      	bne.n	8002094 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6810      	ldr	r0, [r2, #0]
 8002010:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002014:	2100      	movs	r1, #0
 8002016:	4798      	blx	r3
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	db37      	blt.n	800208e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6810      	ldr	r0, [r2, #0]
 8002026:	f107 0208 	add.w	r2, r7, #8
 800202a:	2100      	movs	r1, #0
 800202c:	4798      	blx	r3
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	db28      	blt.n	8002086 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4798      	blx	r3
 800203a:	4603      	mov	r3, r0
 800203c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800203e:	e01c      	b.n	800207a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4798      	blx	r3
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002052:	d80e      	bhi.n	8002072 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6810      	ldr	r0, [r2, #0]
 800205c:	f107 0208 	add.w	r2, r7, #8
 8002060:	2100      	movs	r1, #0
 8002062:	4798      	blx	r3
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	da07      	bge.n	800207a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800206a:	f06f 0304 	mvn.w	r3, #4
 800206e:	613b      	str	r3, [r7, #16]
                 break;
 8002070:	e010      	b.n	8002094 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002072:	f06f 0301 	mvn.w	r3, #1
 8002076:	613b      	str	r3, [r7, #16]
               break;
 8002078:	e00c      	b.n	8002094 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1dd      	bne.n	8002040 <LAN8742_Init+0xc6>
 8002084:	e006      	b.n	8002094 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002086:	f06f 0304 	mvn.w	r3, #4
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	e002      	b.n	8002094 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800208e:	f06f 0303 	mvn.w	r3, #3
 8002092:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d112      	bne.n	80020c0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	4798      	blx	r3
 80020a0:	4603      	mov	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80020a4:	bf00      	nop
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	4798      	blx	r3
 80020ac:	4603      	mov	r3, r0
 80020ae:	461a      	mov	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020b8:	d9f5      	bls.n	80020a6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80020c0:	693b      	ldr	r3, [r7, #16]
 }
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6810      	ldr	r0, [r2, #0]
 80020de:	f107 020c 	add.w	r2, r7, #12
 80020e2:	2101      	movs	r1, #1
 80020e4:	4798      	blx	r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da02      	bge.n	80020f2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80020ec:	f06f 0304 	mvn.w	r3, #4
 80020f0:	e06e      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6810      	ldr	r0, [r2, #0]
 80020fa:	f107 020c 	add.w	r2, r7, #12
 80020fe:	2101      	movs	r1, #1
 8002100:	4798      	blx	r3
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	da02      	bge.n	800210e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002108:	f06f 0304 	mvn.w	r3, #4
 800210c:	e060      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002118:	2301      	movs	r3, #1
 800211a:	e059      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6810      	ldr	r0, [r2, #0]
 8002124:	f107 020c 	add.w	r2, r7, #12
 8002128:	2100      	movs	r1, #0
 800212a:	4798      	blx	r3
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	da02      	bge.n	8002138 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002132:	f06f 0304 	mvn.w	r3, #4
 8002136:	e04b      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d11b      	bne.n	800217a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <LAN8742_GetLinkState+0x90>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002156:	2302      	movs	r3, #2
 8002158:	e03a      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002164:	2303      	movs	r3, #3
 8002166:	e033      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002172:	2304      	movs	r3, #4
 8002174:	e02c      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002176:	2305      	movs	r3, #5
 8002178:	e02a      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6810      	ldr	r0, [r2, #0]
 8002182:	f107 020c 	add.w	r2, r7, #12
 8002186:	211f      	movs	r1, #31
 8002188:	4798      	blx	r3
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	da02      	bge.n	8002196 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002190:	f06f 0304 	mvn.w	r3, #4
 8002194:	e01c      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80021a0:	2306      	movs	r3, #6
 80021a2:	e015      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 031c 	and.w	r3, r3, #28
 80021aa:	2b18      	cmp	r3, #24
 80021ac:	d101      	bne.n	80021b2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80021ae:	2302      	movs	r3, #2
 80021b0:	e00e      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 031c 	and.w	r3, r3, #28
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d101      	bne.n	80021c0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80021bc:	2303      	movs	r3, #3
 80021be:	e007      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 031c 	and.w	r3, r3, #28
 80021c6:	2b14      	cmp	r3, #20
 80021c8:	d101      	bne.n	80021ce <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80021ca:	2304      	movs	r3, #4
 80021cc:	e000      	b.n	80021d0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80021ce:	2305      	movs	r3, #5
    }				
  }
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021de:	2003      	movs	r0, #3
 80021e0:	f000 f93b 	bl	800245a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021e4:	f003 fc86 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_Init+0x68>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	4913      	ldr	r1, [pc, #76]	; (8002244 <HAL_Init+0x6c>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_Init+0x68>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <HAL_Init+0x6c>)
 800220c:	5cd3      	ldrb	r3, [r2, r3]
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
 8002218:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <HAL_Init+0x70>)
 800221a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800221c:	4a0b      	ldr	r2, [pc, #44]	; (800224c <HAL_Init+0x74>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002222:	200f      	movs	r0, #15
 8002224:	f7ff fb6a 	bl	80018fc <HAL_InitTick>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e002      	b.n	8002238 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002232:	f7ff fb45 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	58024400 	.word	0x58024400
 8002244:	0801c70c 	.word	0x0801c70c
 8002248:	24000014 	.word	0x24000014
 800224c:	24000010 	.word	0x24000010

08002250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_IncTick+0x20>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_IncTick+0x24>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <HAL_IncTick+0x24>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	2400001c 	.word	0x2400001c
 8002274:	24004598 	.word	0x24004598

08002278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_GetTick+0x14>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	24004598 	.word	0x24004598

08002290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff ffee 	bl	8002278 <HAL_GetTick>
 800229c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d005      	beq.n	80022b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022aa:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_Delay+0x44>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022b6:	bf00      	nop
 80022b8:	f7ff ffde 	bl	8002278 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d8f7      	bhi.n	80022b8 <HAL_Delay+0x28>
  {
  }
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2400001c 	.word	0x2400001c

080022d8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80022e8:	4904      	ldr	r1, [pc, #16]	; (80022fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	58000400 	.word	0x58000400

08002300 <__NVIC_SetPriorityGrouping>:
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <__NVIC_SetPriorityGrouping+0x40>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	4313      	orrs	r3, r2
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <__NVIC_SetPriorityGrouping+0x40>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00
 8002344:	05fa0000 	.word	0x05fa0000

08002348 <__NVIC_GetPriorityGrouping>:
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <__NVIC_GetPriorityGrouping+0x18>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0307 	and.w	r3, r3, #7
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_EnableIRQ>:
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800236e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db0b      	blt.n	800238e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4907      	ldr	r1, [pc, #28]	; (800239c <__NVIC_EnableIRQ+0x38>)
 800237e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2001      	movs	r0, #1
 8002386:	fa00 f202 	lsl.w	r2, r0, r2
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_SetPriority>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0a      	blt.n	80023ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	490c      	ldr	r1, [pc, #48]	; (80023ec <__NVIC_SetPriority+0x4c>)
 80023ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	440b      	add	r3, r1
 80023c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023c8:	e00a      	b.n	80023e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4908      	ldr	r1, [pc, #32]	; (80023f0 <__NVIC_SetPriority+0x50>)
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3b04      	subs	r3, #4
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	440b      	add	r3, r1
 80023de:	761a      	strb	r2, [r3, #24]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <NVIC_EncodePriority>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f1c3 0307 	rsb	r3, r3, #7
 800240e:	2b04      	cmp	r3, #4
 8002410:	bf28      	it	cs
 8002412:	2304      	movcs	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	2b06      	cmp	r3, #6
 800241c:	d902      	bls.n	8002424 <NVIC_EncodePriority+0x30>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3b03      	subs	r3, #3
 8002422:	e000      	b.n	8002426 <NVIC_EncodePriority+0x32>
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43d9      	mvns	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	4313      	orrs	r3, r2
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	; 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ff4c 	bl	8002300 <__NVIC_SetPriorityGrouping>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800247e:	f7ff ff63 	bl	8002348 <__NVIC_GetPriorityGrouping>
 8002482:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	6978      	ldr	r0, [r7, #20]
 800248a:	f7ff ffb3 	bl	80023f4 <NVIC_EncodePriority>
 800248e:	4602      	mov	r2, r0
 8002490:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff82 	bl	80023a0 <__NVIC_SetPriority>
}
 800249c:	bf00      	nop
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ff56 	bl	8002364 <__NVIC_EnableIRQ>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80024c4:	f3bf 8f5f 	dmb	sy
}
 80024c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <HAL_MPU_Disable+0x28>)
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_MPU_Disable+0x28>)
 80024d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_MPU_Disable+0x2c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	605a      	str	r2, [r3, #4]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000ed00 	.word	0xe000ed00
 80024ec:	e000ed90 	.word	0xe000ed90

080024f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80024f8:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <HAL_MPU_Enable+0x38>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_MPU_Enable+0x3c>)
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_MPU_Enable+0x3c>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800250e:	f3bf 8f4f 	dsb	sy
}
 8002512:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002514:	f3bf 8f6f 	isb	sy
}
 8002518:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000ed90 	.word	0xe000ed90
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	785a      	ldrb	r2, [r3, #1]
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_MPU_ConfigRegion+0x84>)
 800253e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d029      	beq.n	800259c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002548:	4a1a      	ldr	r2, [pc, #104]	; (80025b4 <HAL_MPU_ConfigRegion+0x84>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7b1b      	ldrb	r3, [r3, #12]
 8002554:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7adb      	ldrb	r3, [r3, #11]
 800255a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800255c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7a9b      	ldrb	r3, [r3, #10]
 8002562:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002564:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7b5b      	ldrb	r3, [r3, #13]
 800256a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800256c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	7b9b      	ldrb	r3, [r3, #14]
 8002572:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002574:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	7bdb      	ldrb	r3, [r3, #15]
 800257a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800257c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7a5b      	ldrb	r3, [r3, #9]
 8002582:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002584:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7a1b      	ldrb	r3, [r3, #8]
 800258a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800258c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002596:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002598:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800259a:	e005      	b.n	80025a8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_MPU_ConfigRegion+0x84>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80025a2:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <HAL_MPU_ConfigRegion+0x84>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed90 	.word	0xe000ed90

080025b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e0c6      	b.n	8002758 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f007 fa5c 	bl	8009a90 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2223      	movs	r2, #35	; 0x23
 80025dc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	4b60      	ldr	r3, [pc, #384]	; (8002760 <HAL_ETH_Init+0x1a8>)
 80025e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025e4:	4a5e      	ldr	r2, [pc, #376]	; (8002760 <HAL_ETH_Init+0x1a8>)
 80025e6:	f043 0302 	orr.w	r3, r3, #2
 80025ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025ee:	4b5c      	ldr	r3, [pc, #368]	; (8002760 <HAL_ETH_Init+0x1a8>)
 80025f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7a1b      	ldrb	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d103      	bne.n	800260c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002604:	2000      	movs	r0, #0
 8002606:	f7ff fe67 	bl	80022d8 <HAL_SYSCFG_ETHInterfaceSelect>
 800260a:	e003      	b.n	8002614 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800260c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002610:	f7ff fe62 	bl	80022d8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800262c:	f7ff fe24 	bl	8002278 <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002632:	e00f      	b.n	8002654 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002634:	f7ff fe20 	bl	8002278 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002642:	d907      	bls.n	8002654 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2204      	movs	r2, #4
 8002648:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	22e0      	movs	r2, #224	; 0xe0
 800264e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e081      	b.n	8002758 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1e6      	bne.n	8002634 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f001 f9ae 	bl	80039c8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800266c:	f003 fbbc 	bl	8005de8 <HAL_RCC_GetHCLKFreq>
 8002670:	4603      	mov	r3, r0
 8002672:	4a3c      	ldr	r2, [pc, #240]	; (8002764 <HAL_ETH_Init+0x1ac>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9a      	lsrs	r2, r3, #18
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3a01      	subs	r2, #1
 8002680:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f001 f901 	bl	800388c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80026a0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80026a4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	22e0      	movs	r2, #224	; 0xe0
 80026bc:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e04a      	b.n	8002758 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	f241 1308 	movw	r3, #4360	; 0x1108
 80026ca:	4413      	add	r3, r2
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <HAL_ETH_Init+0x1b0>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6952      	ldr	r2, [r2, #20]
 80026d6:	0052      	lsls	r2, r2, #1
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	6809      	ldr	r1, [r1, #0]
 80026dc:	431a      	orrs	r2, r3
 80026de:	f241 1308 	movw	r3, #4360	; 0x1108
 80026e2:	440b      	add	r3, r1
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f001 f9c6 	bl	8003a78 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f001 fa0a 	bl	8003b06 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	3305      	adds	r3, #5
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	021a      	lsls	r2, r3, #8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	3303      	adds	r3, #3
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	061a      	lsls	r2, r3, #24
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	3302      	adds	r3, #2
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	3301      	adds	r3, #1
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002730:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800273e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002740:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2210      	movs	r2, #16
 800274e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2210      	movs	r2, #16
 8002754:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	58024400 	.word	0x58024400
 8002764:	431bde83 	.word	0x431bde83
 8002768:	ffff8001 	.word	0xffff8001

0800276c <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	3310      	adds	r3, #16
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_ETH_DescAssignMemory+0x28>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d904      	bls.n	800279e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e021      	b.n	80027e2 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00b      	beq.n	80027d4 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d174      	bne.n	80028e8 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2223      	movs	r2, #35	; 0x23
 8002802:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e00f      	b.n	800282a <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3310      	adds	r3, #16
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3301      	adds	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d9ec      	bls.n	800280a <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0202 	orr.w	r2, r2, #2
 8002844:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0201 	orr.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002872:	4413      	add	r3, r2
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6811      	ldr	r1, [r2, #0]
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002882:	440b      	add	r3, r1
 8002884:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	f241 1308 	movw	r3, #4360	; 0x1108
 800288e:	4413      	add	r3, r2
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6811      	ldr	r1, [r2, #0]
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	f241 1308 	movw	r3, #4360	; 0x1108
 800289e:	440b      	add	r3, r1
 80028a0:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 80028b4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80028b8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	f241 1334 	movw	r3, #4404	; 0x1134
 80028c2:	4413      	add	r3, r2
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6811      	ldr	r1, [r2, #0]
 80028ca:	f24d 0241 	movw	r2, #53313	; 0xd041
 80028ce:	431a      	orrs	r2, r3
 80028d0:	f241 1334 	movw	r3, #4404	; 0x1134
 80028d4:	440b      	add	r3, r1
 80028d6:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2210      	movs	r2, #16
 80028dc:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2222      	movs	r2, #34	; 0x22
 80028e2:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d067      	beq.n	80029d8 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2223      	movs	r2, #35	; 0x23
 800290c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	f241 1334 	movw	r3, #4404	; 0x1134
 8002916:	4413      	add	r3, r2
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6811      	ldr	r1, [r2, #0]
 800291e:	4a32      	ldr	r2, [pc, #200]	; (80029e8 <HAL_ETH_Stop_IT+0xf0>)
 8002920:	401a      	ands	r2, r3
 8002922:	f241 1334 	movw	r3, #4404	; 0x1134
 8002926:	440b      	add	r3, r1
 8002928:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002932:	4413      	add	r3, r2
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6811      	ldr	r1, [r2, #0]
 800293a:	f023 0201 	bic.w	r2, r3, #1
 800293e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002942:	440b      	add	r3, r1
 8002944:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f241 1308 	movw	r3, #4360	; 0x1108
 800294e:	4413      	add	r3, r2
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6811      	ldr	r1, [r2, #0]
 8002956:	f023 0201 	bic.w	r2, r3, #1
 800295a:	f241 1308 	movw	r3, #4360	; 0x1108
 800295e:	440b      	add	r3, r1
 8002960:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0202 	bic.w	r2, r2, #2
 8002994:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e00f      	b.n	80029bc <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3310      	adds	r3, #16
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d9ec      	bls.n	800299c <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2210      	movs	r2, #16
 80029cc:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2210      	movs	r2, #16
 80029d2:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e000      	b.n	80029da <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	ffff2fbe 	.word	0xffff2fbe

080029ec <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e073      	b.n	8002af6 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d16e      	bne.n	8002af4 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002a16:	2200      	movs	r2, #0
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f001 f8d0 	bl	8003bc0 <ETH_Prepare_Tx_Descriptors>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	f043 0202 	orr.w	r2, r3, #2
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e05f      	b.n	8002af6 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3206      	adds	r2, #6
 8002a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a42:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	629a      	str	r2, [r3, #40]	; 0x28
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d904      	bls.n	8002a60 <HAL_ETH_Transmit+0x74>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	1f1a      	subs	r2, r3, #4
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	3106      	adds	r1, #6
 8002a6c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002a70:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002a74:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8002a76:	f7ff fbff 	bl	8002278 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002a7c:	e034      	b.n	8002ae8 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d011      	beq.n	8002ab4 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a94:	f043 0208 	orr.w	r2, r3, #8
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	22e0      	movs	r2, #224	; 0xe0
 8002aae:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e020      	b.n	8002af6 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d015      	beq.n	8002ae8 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002abc:	f7ff fbdc 	bl	8002278 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d302      	bcc.n	8002ad2 <HAL_ETH_Transmit+0xe6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10a      	bne.n	8002ae8 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad6:	f043 0204 	orr.w	r2, r3, #4
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	22e0      	movs	r2, #224	; 0xe0
 8002ae2:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e006      	b.n	8002af6 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	dbc6      	blt.n	8002a7e <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e000      	b.n	8002af6 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
  }
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b089      	sub	sp, #36	; 0x24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3344      	adds	r3, #68	; 0x44
 8002b0a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1a:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d06b      	beq.n	8002c08 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e0ce      	b.n	8002cd2 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3301      	adds	r3, #1
 8002b38:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d036      	beq.n	8002bb4 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d902      	bls.n	8002b68 <HAL_ETH_IsRxDataAvailable+0x6a>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3b04      	subs	r3, #4
 8002b66:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b70:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db11      	blt.n	8002b9e <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d902      	bls.n	8002b9e <HAL_ETH_IsRxDataAvailable+0xa0>
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	3b04      	subs	r3, #4
 8002b9c:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e08e      	b.n	8002cd2 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d012      	beq.n	8002be6 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d902      	bls.n	8002bda <HAL_ETH_IsRxDataAvailable+0xdc>
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	e010      	b.n	8002c08 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	3301      	adds	r3, #1
 8002bea:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d902      	bls.n	8002bfe <HAL_ETH_IsRxDataAvailable+0x100>
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c06:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db02      	blt.n	8002c16 <HAL_ETH_IsRxDataAvailable+0x118>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d98e      	bls.n	8002b34 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d056      	beq.n	8002cca <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c34:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	e03b      	b.n	8002cb4 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c4a:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d20d      	bcs.n	8002cae <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d902      	bls.n	8002ca4 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3b04      	subs	r3, #4
 8002ca2:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cac:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d3bf      	bcc.n	8002c3c <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6819      	ldr	r1, [r3, #0]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	f241 1328 	movw	r3, #4392	; 0x1128
 8002cc6:	440b      	add	r3, r1
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]

  return 0;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	; 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b08a      	sub	sp, #40	; 0x28
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3344      	adds	r3, #68	; 0x44
 8002cec:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d00:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d104      	bne.n	8002d16 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e07d      	b.n	8002e12 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff feed 	bl	8002afe <HAL_ETH_IsRxDataAvailable>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e071      	b.n	8002e12 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	623b      	str	r3, [r7, #32]
 8002d42:	e031      	b.n	8002da8 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002d7e:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	3301      	adds	r3, #1
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d902      	bls.n	8002d92 <HAL_ETH_GetRxDataBuffer+0xb4>
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	3b04      	subs	r3, #4
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9a:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	3301      	adds	r3, #1
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	6a3a      	ldr	r2, [r7, #32]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d3c7      	bcc.n	8002d44 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d803      	bhi.n	8002dde <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	e018      	b.n	8002e10 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d012      	beq.n	8002e0c <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	1ad2      	subs	r2, r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	e001      	b.n	8002e10 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3728      	adds	r7, #40	; 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3344      	adds	r3, #68	; 0x44
 8002e28:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d107      	bne.n	8002e48 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff fe60 	bl	8002afe <HAL_ETH_IsRxDataAvailable>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e017      	b.n	8002e78 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	4413      	add	r3, r2
 8002e50:	3b01      	subs	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d902      	bls.n	8002e60 <HAL_ETH_GetRxDataLength+0x46>
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	3b04      	subs	r3, #4
 8002e5e:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e68:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3344      	adds	r3, #68	; 0x44
 8002e8c:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9c:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e057      	b.n	8002f60 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	e03b      	b.n	8002f3c <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ed2:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d20d      	bcs.n	8002f36 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d902      	bls.n	8002f2c <HAL_ETH_BuildRxDescriptors+0xac>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3b04      	subs	r3, #4
 8002f2a:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d3bf      	bcc.n	8002ec4 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	f241 1328 	movw	r3, #4392	; 0x1128
 8002f4e:	440b      	add	r3, r1
 8002f50:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3724      	adds	r7, #36	; 0x24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e03e      	b.n	800300c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f96:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	055b      	lsls	r3, r3, #21
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	041b      	lsls	r3, r3, #16
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f043 030c 	orr.w	r3, r3, #12
 8002fba:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002fce:	f7ff f953 	bl	8002278 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002fd4:	e009      	b.n	8002fea <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002fd6:	f7ff f94f 	bl	8002278 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fe4:	d901      	bls.n	8002fea <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e010      	b.n	800300c <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1ed      	bne.n	8002fd6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003002:	b29b      	uxth	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e03c      	b.n	80030b0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800303e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	055b      	lsls	r3, r3, #21
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	041b      	lsls	r3, r3, #16
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f023 030c 	bic.w	r3, r3, #12
 8003062:	f043 0304 	orr.w	r3, r3, #4
 8003066:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b29a      	uxth	r2, r3
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_ETH_WritePHYRegister+0xa4>)
 8003076:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800307a:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <HAL_ETH_WritePHYRegister+0xa4>)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003082:	f7ff f8f9 	bl	8002278 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003088:	e009      	b.n	800309e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800308a:	f7ff f8f5 	bl	8002278 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003098:	d901      	bls.n	800309e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e008      	b.n	80030b0 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ed      	bne.n	800308a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40028000 	.word	0x40028000

080030bc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e1c3      	b.n	8003458 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf14      	ite	ne
 8003132:	2301      	movne	r3, #1
 8003134:	2300      	moveq	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003162:	2b00      	cmp	r3, #0
 8003164:	bf14      	ite	ne
 8003166:	2301      	movne	r3, #1
 8003168:	2300      	moveq	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf14      	ite	ne
 8003180:	2301      	movne	r3, #1
 8003182:	2300      	moveq	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf14      	ite	ne
 80031b6:	2301      	movne	r3, #1
 80031b8:	2300      	moveq	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bf0c      	ite	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	2300      	movne	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf14      	ite	ne
 8003204:	2301      	movne	r3, #1
 8003206:	2300      	moveq	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf14      	ite	ne
 800321e:	2301      	movne	r3, #1
 8003220:	2300      	moveq	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf14      	ite	ne
 8003238:	2301      	movne	r3, #1
 800323a:	2300      	moveq	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf14      	ite	ne
 8003252:	2301      	movne	r3, #1
 8003254:	2300      	moveq	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf14      	ite	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	2300      	moveq	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	0e5b      	lsrs	r3, r3, #25
 800331a:	f003 021f 	and.w	r2, r3, #31
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 020f 	and.w	r2, r3, #15
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	bf14      	ite	ne
 800335a:	2301      	movne	r3, #1
 800335c:	2300      	moveq	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	b29a      	uxth	r2, r3
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf14      	ite	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	2300      	moveq	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf14      	ite	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	2300      	moveq	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80033e4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80033f4:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	bf14      	ite	ne
 800342a:	2301      	movne	r3, #1
 800342c:	2300      	moveq	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e00a      	b.n	800348e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	2b10      	cmp	r3, #16
 800347e:	d105      	bne.n	800348c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8003480:	6839      	ldr	r1, [r7, #0]
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f860 	bl	8003548 <ETH_SetMACConfig>

    return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034a8:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034b0:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80034b2:	f002 fc99 	bl	8005de8 <HAL_RCC_GetHCLKFreq>
 80034b6:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d908      	bls.n	80034d2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d804      	bhi.n	80034d2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e027      	b.n	8003522 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d908      	bls.n	80034ec <HAL_ETH_SetMDIOClockRange+0x54>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4a17      	ldr	r2, [pc, #92]	; (800353c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d204      	bcs.n	80034ec <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e01a      	b.n	8003522 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4a13      	ldr	r2, [pc, #76]	; (800353c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d303      	bcc.n	80034fc <HAL_ETH_SetMDIOClockRange+0x64>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4a12      	ldr	r2, [pc, #72]	; (8003540 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d911      	bls.n	8003520 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4a10      	ldr	r2, [pc, #64]	; (8003540 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d908      	bls.n	8003516 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d804      	bhi.n	8003516 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	e005      	b.n	8003522 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	e000      	b.n	8003522 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003520:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	01312cff 	.word	0x01312cff
 8003538:	02160ebf 	.word	0x02160ebf
 800353c:	03938700 	.word	0x03938700
 8003540:	05f5e0ff 	.word	0x05f5e0ff
 8003544:	08f0d17f 	.word	0x08f0d17f

08003548 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800355a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	791b      	ldrb	r3, [r3, #4]
 8003560:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003562:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	7b1b      	ldrb	r3, [r3, #12]
 8003568:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800356a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	7b5b      	ldrb	r3, [r3, #13]
 8003570:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003572:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	7b9b      	ldrb	r3, [r3, #14]
 8003578:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800357a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	7bdb      	ldrb	r3, [r3, #15]
 8003580:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003582:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	7c12      	ldrb	r2, [r2, #16]
 8003588:	2a00      	cmp	r2, #0
 800358a:	d102      	bne.n	8003592 <ETH_SetMACConfig+0x4a>
 800358c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003590:	e000      	b.n	8003594 <ETH_SetMACConfig+0x4c>
 8003592:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003594:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	7c52      	ldrb	r2, [r2, #17]
 800359a:	2a00      	cmp	r2, #0
 800359c:	d102      	bne.n	80035a4 <ETH_SetMACConfig+0x5c>
 800359e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035a2:	e000      	b.n	80035a6 <ETH_SetMACConfig+0x5e>
 80035a4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80035a6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	7c9b      	ldrb	r3, [r3, #18]
 80035ac:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80035ae:	431a      	orrs	r2, r3
                                macconf->Speed |
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80035b4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80035ba:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	7f1b      	ldrb	r3, [r3, #28]
 80035c0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80035c2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	7f5b      	ldrb	r3, [r3, #29]
 80035c8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80035ca:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	7f92      	ldrb	r2, [r2, #30]
 80035d0:	2a00      	cmp	r2, #0
 80035d2:	d102      	bne.n	80035da <ETH_SetMACConfig+0x92>
 80035d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035d8:	e000      	b.n	80035dc <ETH_SetMACConfig+0x94>
 80035da:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80035dc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	7fdb      	ldrb	r3, [r3, #31]
 80035e2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80035e4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80035ec:	2a00      	cmp	r2, #0
 80035ee:	d102      	bne.n	80035f6 <ETH_SetMACConfig+0xae>
 80035f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035f4:	e000      	b.n	80035f8 <ETH_SetMACConfig+0xb0>
 80035f6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80035f8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80035fe:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003606:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003608:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b56      	ldr	r3, [pc, #344]	; (8003774 <ETH_SetMACConfig+0x22c>)
 800361a:	4013      	ands	r3, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	68f9      	ldr	r1, [r7, #12]
 8003622:	430b      	orrs	r3, r1
 8003624:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003632:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003634:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800363c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800363e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003646:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003648:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003650:	2a00      	cmp	r2, #0
 8003652:	d102      	bne.n	800365a <ETH_SetMACConfig+0x112>
 8003654:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003658:	e000      	b.n	800365c <ETH_SetMACConfig+0x114>
 800365a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800365c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	4b42      	ldr	r3, [pc, #264]	; (8003778 <ETH_SetMACConfig+0x230>)
 800366e:	4013      	ands	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	430b      	orrs	r3, r1
 8003678:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003680:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	4b3a      	ldr	r3, [pc, #232]	; (800377c <ETH_SetMACConfig+0x234>)
 8003692:	4013      	ands	r3, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	68f9      	ldr	r1, [r7, #12]
 800369a:	430b      	orrs	r3, r1
 800369c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80036a4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80036aa:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80036b2:	2a00      	cmp	r2, #0
 80036b4:	d101      	bne.n	80036ba <ETH_SetMACConfig+0x172>
 80036b6:	2280      	movs	r2, #128	; 0x80
 80036b8:	e000      	b.n	80036bc <ETH_SetMACConfig+0x174>
 80036ba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80036bc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036ce:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80036d2:	4013      	ands	r3, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	68f9      	ldr	r1, [r7, #12]
 80036da:	430b      	orrs	r3, r1
 80036dc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80036e4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80036ec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f023 0103 	bic.w	r1, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	430a      	orrs	r2, r1
 8003706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003712:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800372e:	2a00      	cmp	r2, #0
 8003730:	d101      	bne.n	8003736 <ETH_SetMACConfig+0x1ee>
 8003732:	2240      	movs	r2, #64	; 0x40
 8003734:	e000      	b.n	8003738 <ETH_SetMACConfig+0x1f0>
 8003736:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003738:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003740:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003742:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800374a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003758:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	430a      	orrs	r2, r1
 8003764:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	00048083 	.word	0x00048083
 8003778:	c0f88000 	.word	0xc0f88000
 800377c:	fffffef0 	.word	0xfffffef0

08003780 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b38      	ldr	r3, [pc, #224]	; (8003878 <ETH_SetDMAConfig+0xf8>)
 8003796:	4013      	ands	r3, r2
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	6809      	ldr	r1, [r1, #0]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80037a6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	791b      	ldrb	r3, [r3, #4]
 80037ac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80037b2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	7b1b      	ldrb	r3, [r3, #12]
 80037b8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	f241 0304 	movw	r3, #4100	; 0x1004
 80037c6:	4413      	add	r3, r2
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b2c      	ldr	r3, [pc, #176]	; (800387c <ETH_SetDMAConfig+0xfc>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6811      	ldr	r1, [r2, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	f241 0304 	movw	r3, #4100	; 0x1004
 80037da:	440b      	add	r3, r1
 80037dc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	7b5b      	ldrb	r3, [r3, #13]
 80037e2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b22      	ldr	r3, [pc, #136]	; (8003880 <ETH_SetDMAConfig+0x100>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6811      	ldr	r1, [r2, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	431a      	orrs	r2, r3
 8003802:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003806:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	7d1b      	ldrb	r3, [r3, #20]
 8003810:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003812:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	7f5b      	ldrb	r3, [r3, #29]
 8003818:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	f241 1304 	movw	r3, #4356	; 0x1104
 8003826:	4413      	add	r3, r2
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b16      	ldr	r3, [pc, #88]	; (8003884 <ETH_SetDMAConfig+0x104>)
 800382c:	4013      	ands	r3, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6811      	ldr	r1, [r2, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	431a      	orrs	r2, r3
 8003836:	f241 1304 	movw	r3, #4356	; 0x1104
 800383a:	440b      	add	r3, r1
 800383c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	7f1b      	ldrb	r3, [r3, #28]
 8003842:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	f241 1308 	movw	r3, #4360	; 0x1108
 8003854:	4413      	add	r3, r2
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <ETH_SetDMAConfig+0x108>)
 800385a:	4013      	ands	r3, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6811      	ldr	r1, [r2, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	431a      	orrs	r2, r3
 8003864:	f241 1308 	movw	r3, #4360	; 0x1108
 8003868:	440b      	add	r3, r1
 800386a:	601a      	str	r2, [r3, #0]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	ffff87fd 	.word	0xffff87fd
 800387c:	ffff2ffe 	.word	0xffff2ffe
 8003880:	fffec000 	.word	0xfffec000
 8003884:	ffc0efef 	.word	0xffc0efef
 8003888:	7fc0ffff 	.word	0x7fc0ffff

0800388c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b0a4      	sub	sp, #144	; 0x90
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003894:	2301      	movs	r3, #1
 8003896:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800389a:	2300      	movs	r3, #0
 800389c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800389e:	2300      	movs	r3, #0
 80038a0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80038c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038cc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80038d8:	2300      	movs	r3, #0
 80038da:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80038de:	2300      	movs	r3, #0
 80038e0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80038e4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80038e8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80038f0:	2300      	movs	r3, #0
 80038f2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003900:	2300      	movs	r3, #0
 8003902:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003906:	2300      	movs	r3, #0
 8003908:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800390a:	2300      	movs	r3, #0
 800390c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800390e:	2300      	movs	r3, #0
 8003910:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003912:	2300      	movs	r3, #0
 8003914:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003918:	2300      	movs	r3, #0
 800391a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003924:	2320      	movs	r3, #32
 8003926:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003930:	2300      	movs	r3, #0
 8003932:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003936:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800393c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003940:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003942:	2300      	movs	r3, #0
 8003944:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003948:	2302      	movs	r3, #2
 800394a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800394e:	2300      	movs	r3, #0
 8003950:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003954:	2300      	movs	r3, #0
 8003956:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800395a:	2300      	movs	r3, #0
 800395c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003966:	2300      	movs	r3, #0
 8003968:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fde6 	bl	8003548 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800397c:	2301      	movs	r3, #1
 800397e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003980:	2301      	movs	r3, #1
 8003982:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003984:	2300      	movs	r3, #0
 8003986:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003988:	2300      	movs	r3, #0
 800398a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800398e:	2300      	movs	r3, #0
 8003990:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003992:	2300      	movs	r3, #0
 8003994:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003996:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800399a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800399c:	2300      	movs	r3, #0
 800399e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80039a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80039ac:	f44f 7306 	mov.w	r3, #536	; 0x218
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80039b2:	f107 0308 	add.w	r3, r7, #8
 80039b6:	4619      	mov	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff fee1 	bl	8003780 <ETH_SetDMAConfig>
}
 80039be:	bf00      	nop
 80039c0:	3790      	adds	r7, #144	; 0x90
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80039e2:	f002 fa01 	bl	8005de8 <HAL_RCC_GetHCLKFreq>
 80039e6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4a1e      	ldr	r2, [pc, #120]	; (8003a64 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d908      	bls.n	8003a02 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4a1d      	ldr	r2, [pc, #116]	; (8003a68 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d804      	bhi.n	8003a02 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e027      	b.n	8003a52 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d908      	bls.n	8003a1c <ETH_MAC_MDIO_ClkConfig+0x54>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d204      	bcs.n	8003a1c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	e01a      	b.n	8003a52 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d303      	bcc.n	8003a2c <ETH_MAC_MDIO_ClkConfig+0x64>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d911      	bls.n	8003a50 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4a10      	ldr	r2, [pc, #64]	; (8003a70 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d908      	bls.n	8003a46 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4a0f      	ldr	r2, [pc, #60]	; (8003a74 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d804      	bhi.n	8003a46 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	e005      	b.n	8003a52 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e000      	b.n	8003a52 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003a50:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	01312cff 	.word	0x01312cff
 8003a68:	02160ebf 	.word	0x02160ebf
 8003a6c:	03938700 	.word	0x03938700
 8003a70:	05f5e0ff 	.word	0x05f5e0ff
 8003a74:	08f0d17f 	.word	0x08f0d17f

08003a78 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e01d      	b.n	8003ac2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68d9      	ldr	r1, [r3, #12]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	440b      	add	r3, r1
 8003a96:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2200      	movs	r2, #0
 8003aae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	3206      	adds	r2, #6
 8003ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d9de      	bls.n	8003a86 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	f241 132c 	movw	r3, #4396	; 0x112c
 8003ad6:	4413      	add	r3, r2
 8003ad8:	2203      	movs	r2, #3
 8003ada:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68d9      	ldr	r1, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	f241 1314 	movw	r3, #4372	; 0x1114
 8003ae8:	4413      	add	r3, r2
 8003aea:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003af8:	601a      	str	r2, [r3, #0]
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	e024      	b.n	8003b5e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6919      	ldr	r1, [r3, #16]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	4413      	add	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	440b      	add	r3, r1
 8003b24:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2200      	movs	r2, #0
 8003b36:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2200      	movs	r2, #0
 8003b42:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2200      	movs	r2, #0
 8003b48:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3310      	adds	r3, #16
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d9d7      	bls.n	8003b14 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	f241 1330 	movw	r3, #4400	; 0x1130
 8003b8a:	4413      	add	r3, r2
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6919      	ldr	r1, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	f241 131c 	movw	r3, #4380	; 0x111c
 8003b9c:	4413      	add	r3, r2
 8003b9e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	f241 1328 	movw	r3, #4392	; 0x1128
 8003bb0:	4413      	add	r3, r2
 8003bb2:	6019      	str	r1, [r3, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b08d      	sub	sp, #52	; 0x34
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3318      	adds	r3, #24
 8003bd0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003bde:	2300      	movs	r3, #0
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bea:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c02:	d007      	beq.n	8003c14 <ETH_Prepare_Tx_Descriptors+0x54>
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	3304      	adds	r3, #4
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003c14:	2302      	movs	r3, #2
 8003c16:	e24a      	b.n	80040ae <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d044      	beq.n	8003cae <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	4b72      	ldr	r3, [pc, #456]	; (8003df4 <ETH_Prepare_Tx_Descriptors+0x234>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c30:	431a      	orrs	r2, r3
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c50:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d027      	beq.n	8003cae <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	041b      	lsls	r3, r3, #16
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c9c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003cac:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00e      	beq.n	8003cd8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	4b4e      	ldr	r3, [pc, #312]	; (8003df8 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	6992      	ldr	r2, [r2, #24]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <ETH_Prepare_Tx_Descriptors+0x130>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d030      	beq.n	8003d52 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d902      	bls.n	8003d1a <ETH_Prepare_Tx_Descriptors+0x15a>
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	3b04      	subs	r3, #4
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d22:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	3301      	adds	r3, #1
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d36:	d10c      	bne.n	8003d52 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d40:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e1ad      	b.n	80040ae <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	3301      	adds	r3, #1
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	6852      	ldr	r2, [r2, #4]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d012      	beq.n	8003da2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	6852      	ldr	r2, [r2, #4]
 8003d98:	0412      	lsls	r2, r2, #16
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	e008      	b.n	8003db4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d021      	beq.n	8003e04 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	04db      	lsls	r3, r3, #19
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	69d2      	ldr	r2, [r2, #28]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	e02e      	b.n	8003e52 <ETH_Prepare_Tx_Descriptors+0x292>
 8003df4:	ffff0000 	.word	0xffff0000
 8003df8:	ffffc000 	.word	0xffffc000
 8003dfc:	c000ffff 	.word	0xc000ffff
 8003e00:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	4b93      	ldr	r3, [pc, #588]	; (8004058 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	6852      	ldr	r2, [r2, #4]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80cb 	beq.w	8004038 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003eb4:	e0c0      	b.n	8004038 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d902      	bls.n	8003ed4 <ETH_Prepare_Tx_Descriptors+0x314>
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	3b04      	subs	r3, #4
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003edc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef6:	d007      	beq.n	8003f08 <ETH_Prepare_Tx_Descriptors+0x348>
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	3304      	adds	r3, #4
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d026      	beq.n	8003f56 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f14:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1a:	e016      	b.n	8003f4a <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d902      	bls.n	8003f3a <ETH_Prepare_Tx_Descriptors+0x37a>
 8003f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f36:	3b04      	subs	r3, #4
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f42:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	3301      	adds	r3, #1
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d3e4      	bcc.n	8003f1c <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8003f52:	2302      	movs	r3, #2
 8003f54:	e0ab      	b.n	80040ae <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8003f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f58:	3301      	adds	r3, #1
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	4b3a      	ldr	r3, [pc, #232]	; (800405c <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	6852      	ldr	r2, [r2, #4]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d012      	beq.n	8003fac <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	4b31      	ldr	r3, [pc, #196]	; (8004060 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	6852      	ldr	r2, [r2, #4]
 8003fa2:	0412      	lsls	r2, r2, #16
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	609a      	str	r2, [r3, #8]
 8003faa:	e008      	b.n	8003fbe <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	6a3a      	ldr	r2, [r7, #32]
 8003fbc:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00f      	beq.n	8003fea <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	4b25      	ldr	r3, [pc, #148]	; (8004064 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	69d2      	ldr	r2, [r2, #28]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	60da      	str	r2, [r3, #12]
 8003fe8:	e017      	b.n	800401a <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	6852      	ldr	r2, [r2, #4]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	431a      	orrs	r2, r3
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	3301      	adds	r3, #1
 800401e:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f47f af3a 	bne.w	8003eb6 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00f      	beq.n	8004068 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	e00e      	b.n	8004074 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8004056:	bf00      	nop
 8004058:	ffff8000 	.word	0xffff8000
 800405c:	ffffc000 	.word	0xffffc000
 8004060:	c000ffff 	.word	0xc000ffff
 8004064:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004084:	6979      	ldr	r1, [r7, #20]
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	3304      	adds	r3, #4
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004094:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004096:	b672      	cpsid	i
}
 8004098:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	4413      	add	r3, r2
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80040a8:	b662      	cpsie	i
}
 80040aa:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3734      	adds	r7, #52	; 0x34
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop

080040bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b098      	sub	sp, #96	; 0x60
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80040c4:	4a84      	ldr	r2, [pc, #528]	; (80042d8 <HAL_FDCAN_Init+0x21c>)
 80040c6:	f107 030c 	add.w	r3, r7, #12
 80040ca:	4611      	mov	r1, r2
 80040cc:	224c      	movs	r2, #76	; 0x4c
 80040ce:	4618      	mov	r0, r3
 80040d0:	f013 facd 	bl	801766e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e1ca      	b.n	8004474 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a7e      	ldr	r2, [pc, #504]	; (80042dc <HAL_FDCAN_Init+0x220>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d106      	bne.n	80040f6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fc fe58 	bl	8000dc0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0210 	bic.w	r2, r2, #16
 800411e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004120:	f7fe f8aa 	bl	8002278 <HAL_GetTick>
 8004124:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004126:	e014      	b.n	8004152 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004128:	f7fe f8a6 	bl	8002278 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b0a      	cmp	r3, #10
 8004134:	d90d      	bls.n	8004152 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800413c:	f043 0201 	orr.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2203      	movs	r2, #3
 800414a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e190      	b.n	8004474 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b08      	cmp	r3, #8
 800415e:	d0e3      	beq.n	8004128 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004170:	f7fe f882 	bl	8002278 <HAL_GetTick>
 8004174:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004176:	e014      	b.n	80041a2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004178:	f7fe f87e 	bl	8002278 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b0a      	cmp	r3, #10
 8004184:	d90d      	bls.n	80041a2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800418c:	f043 0201 	orr.w	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2203      	movs	r2, #3
 800419a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e168      	b.n	8004474 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0e3      	beq.n	8004178 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0202 	orr.w	r2, r2, #2
 80041be:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	7c1b      	ldrb	r3, [r3, #16]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d108      	bne.n	80041da <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d6:	619a      	str	r2, [r3, #24]
 80041d8:	e007      	b.n	80041ea <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	7c5b      	ldrb	r3, [r3, #17]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d108      	bne.n	8004204 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699a      	ldr	r2, [r3, #24]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004200:	619a      	str	r2, [r3, #24]
 8004202:	e007      	b.n	8004214 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004212:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	7c9b      	ldrb	r3, [r3, #18]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d108      	bne.n	800422e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800422a:	619a      	str	r2, [r3, #24]
 800422c:	e007      	b.n	800423e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699a      	ldr	r2, [r3, #24]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800423c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004262:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0210 	bic.w	r2, r2, #16
 8004272:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d108      	bne.n	800428e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0204 	orr.w	r2, r2, #4
 800428a:	619a      	str	r2, [r3, #24]
 800428c:	e030      	b.n	80042f0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d02c      	beq.n	80042f0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d020      	beq.n	80042e0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699a      	ldr	r2, [r3, #24]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042ac:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0210 	orr.w	r2, r2, #16
 80042bc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d114      	bne.n	80042f0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699a      	ldr	r2, [r3, #24]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0220 	orr.w	r2, r2, #32
 80042d4:	619a      	str	r2, [r3, #24]
 80042d6:	e00b      	b.n	80042f0 <HAL_FDCAN_Init+0x234>
 80042d8:	08018658 	.word	0x08018658
 80042dc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0220 	orr.w	r2, r2, #32
 80042ee:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004300:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004308:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	3b01      	subs	r3, #1
 8004312:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004318:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800431a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004324:	d115      	bne.n	8004352 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	3b01      	subs	r3, #1
 8004332:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004334:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	3b01      	subs	r3, #1
 800433c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800433e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	3b01      	subs	r3, #1
 8004348:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800434e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004350:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004378:	4413      	add	r3, r2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d012      	beq.n	80043a4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004386:	f023 0107 	bic.w	r1, r3, #7
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004394:	4413      	add	r3, r2
 8004396:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d012      	beq.n	80043d2 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043b4:	f023 0107 	bic.w	r1, r3, #7
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043c2:	4413      	add	r3, r2
 80043c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d013      	beq.n	8004402 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043e2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043f0:	4413      	add	r3, r2
 80043f2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80043f6:	011a      	lsls	r2, r3, #4
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004406:	2b00      	cmp	r3, #0
 8004408:	d013      	beq.n	8004432 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004412:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004420:	4413      	add	r3, r2
 8004422:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004426:	021a      	lsls	r2, r3, #8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a11      	ldr	r2, [pc, #68]	; (800447c <HAL_FDCAN_Init+0x3c0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d107      	bne.n	800444c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f022 0203 	bic.w	r2, r2, #3
 800444a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f9af 	bl	80047c8 <FDCAN_CalcultateRamBlockAddresses>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004470:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004474:	4618      	mov	r0, r3
 8004476:	3760      	adds	r7, #96	; 0x60
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	4000a000 	.word	0x4000a000

08004480 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004490:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d002      	beq.n	800449e <HAL_FDCAN_ConfigFilter+0x1e>
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d157      	bne.n	800454e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d12b      	bne.n	80044fe <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b07      	cmp	r3, #7
 80044ac:	d10d      	bne.n	80044ca <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80044ba:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80044c0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80044c2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e00e      	b.n	80044e8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80044d6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80044de:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e025      	b.n	800454a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	075a      	lsls	r2, r3, #29
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	2b07      	cmp	r3, #7
 8004512:	d103      	bne.n	800451c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	e006      	b.n	800452a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	079a      	lsls	r2, r3, #30
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	3304      	adds	r3, #4
 8004542:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e008      	b.n	8004560 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004554:	f043 0202 	orr.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
  }
}
 8004560:	4618      	mov	r0, r3
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	d110      	bne.n	80045a8 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800458e:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004594:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80045a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e008      	b.n	80045ba <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ae:	f043 0204 	orr.w	r2, r3, #4
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d111      	bne.n	80045fe <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699a      	ldr	r2, [r3, #24]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e008      	b.n	8004610 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004604:	f043 0204 	orr.w	r2, r3, #4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
  }
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d141      	bne.n	80046b8 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800463c:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d109      	bne.n	8004658 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800464a:	f043 0220 	orr.w	r2, r3, #32
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e038      	b.n	80046ca <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d009      	beq.n	800467c <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800466e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e026      	b.n	80046ca <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004684:	0c1b      	lsrs	r3, r3, #16
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fa1e 	bl	8004ad4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2101      	movs	r1, #1
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	fa01 f202 	lsl.w	r2, r1, r2
 80046a4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80046a8:	2201      	movs	r2, #1
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	409a      	lsls	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e008      	b.n	80046ca <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046be:	f043 0208 	orr.w	r2, r3, #8
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
  }
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80046e6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d002      	beq.n	80046f4 <HAL_FDCAN_ActivateNotification+0x20>
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d155      	bne.n	80047a0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d108      	bne.n	8004714 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	65da      	str	r2, [r3, #92]	; 0x5c
 8004712:	e014      	b.n	800473e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4013      	ands	r3, r2
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	429a      	cmp	r2, r3
 8004722:	d108      	bne.n	8004736 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0202 	orr.w	r2, r2, #2
 8004732:	65da      	str	r2, [r3, #92]	; 0x5c
 8004734:	e003      	b.n	800473e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2203      	movs	r2, #3
 800473c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004744:	2b00      	cmp	r3, #0
 8004746:	d009      	beq.n	800475c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	430a      	orrs	r2, r1
 8004758:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	430a      	orrs	r2, r1
 8004776:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <HAL_FDCAN_ActivateNotification+0xec>)
 8004784:	4013      	ands	r3, r2
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	430b      	orrs	r3, r1
 800478c:	6553      	str	r3, [r2, #84]	; 0x54
 800478e:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004790:	695a      	ldr	r2, [r3, #20]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	0f9b      	lsrs	r3, r3, #30
 8004796:	490b      	ldr	r1, [pc, #44]	; (80047c4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e008      	b.n	80047b2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047a6:	f043 0202 	orr.w	r2, r3, #2
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
  }
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	3fcfffff 	.word	0x3fcfffff
 80047c4:	4000a800 	.word	0x4000a800

080047c8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80047de:	4ba7      	ldr	r3, [pc, #668]	; (8004a7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	0091      	lsls	r1, r2, #2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	430b      	orrs	r3, r1
 80047ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	041a      	lsls	r2, r3, #16
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	4413      	add	r3, r2
 8004814:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800481e:	4b97      	ldr	r3, [pc, #604]	; (8004a7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004820:	4013      	ands	r3, r2
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	0091      	lsls	r1, r2, #2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6812      	ldr	r2, [r2, #0]
 800482a:	430b      	orrs	r3, r1
 800482c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	041a      	lsls	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	4413      	add	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004860:	4b86      	ldr	r3, [pc, #536]	; (8004a7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004862:	4013      	ands	r3, r2
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	0091      	lsls	r1, r2, #2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	430b      	orrs	r3, r1
 800486e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800487a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	041a      	lsls	r2, r3, #16
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	4413      	add	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80048a8:	4b74      	ldr	r3, [pc, #464]	; (8004a7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	0091      	lsls	r1, r2, #2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	430b      	orrs	r3, r1
 80048b6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048c2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ca:	041a      	lsls	r2, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	4413      	add	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80048f0:	4b62      	ldr	r3, [pc, #392]	; (8004a7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	0091      	lsls	r1, r2, #2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	430b      	orrs	r3, r1
 80048fe:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800490a:	fb02 f303 	mul.w	r3, r2, r3
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	4413      	add	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800491c:	4b57      	ldr	r3, [pc, #348]	; (8004a7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800491e:	4013      	ands	r3, r2
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	0091      	lsls	r1, r2, #2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	430b      	orrs	r3, r1
 800492a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004936:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	041a      	lsls	r2, r3, #16
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	4413      	add	r3, r2
 8004954:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004960:	4013      	ands	r3, r2
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	0091      	lsls	r1, r2, #2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	430b      	orrs	r3, r1
 800496c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004978:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004980:	041a      	lsls	r2, r3, #16
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004994:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499c:	061a      	lsls	r2, r3, #24
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ac:	4b34      	ldr	r3, [pc, #208]	; (8004a80 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80049ae:	4413      	add	r3, r2
 80049b0:	009a      	lsls	r2, r3, #2
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	441a      	add	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	441a      	add	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	441a      	add	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	441a      	add	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004a5e:	fb01 f303 	mul.w	r3, r1, r3
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	441a      	add	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	4a04      	ldr	r2, [pc, #16]	; (8004a84 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d915      	bls.n	8004aa4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004a78:	e006      	b.n	8004a88 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004a7a:	bf00      	nop
 8004a7c:	ffff0003 	.word	0xffff0003
 8004a80:	10002b00 	.word	0x10002b00
 8004a84:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a8e:	f043 0220 	orr.w	r2, r3, #32
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e010      	b.n	8004ac6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	e005      	b.n	8004ab8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3f3      	bcc.n	8004aac <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop

08004ad4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b089      	sub	sp, #36	; 0x24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004af2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004afa:	4313      	orrs	r3, r2
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	e00a      	b.n	8004b16 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004b08:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004b0e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b14:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004b20:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004b26:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004b2c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b40:	6839      	ldr	r1, [r7, #0]
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	3304      	adds	r3, #4
 8004b56:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	3304      	adds	r3, #4
 8004b62:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e020      	b.n	8004bac <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	3303      	adds	r3, #3
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4413      	add	r3, r2
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	3302      	adds	r3, #2
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	440b      	add	r3, r1
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004b82:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	3301      	adds	r3, #1
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	440b      	add	r3, r1
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004b90:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	440a      	add	r2, r1
 8004b98:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004b9a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	4a06      	ldr	r2, [pc, #24]	; (8004bcc <FDCAN_CopyMessageToRAM+0xf8>)
 8004bb4:	5cd3      	ldrb	r3, [r2, r3]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d3d5      	bcc.n	8004b6a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	3724      	adds	r7, #36	; 0x24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	0801c71c 	.word	0x0801c71c

08004bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bde:	4b86      	ldr	r3, [pc, #536]	; (8004df8 <HAL_GPIO_Init+0x228>)
 8004be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004be2:	e18c      	b.n	8004efe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	2101      	movs	r1, #1
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 817e 	beq.w	8004ef8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d005      	beq.n	8004c14 <HAL_GPIO_Init+0x44>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d130      	bne.n	8004c76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	2203      	movs	r2, #3
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	f003 0201 	and.w	r2, r3, #1
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d017      	beq.n	8004cb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	4013      	ands	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d123      	bne.n	8004d06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	08da      	lsrs	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3208      	adds	r2, #8
 8004cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	08da      	lsrs	r2, r3, #3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3208      	adds	r2, #8
 8004d00:	69b9      	ldr	r1, [r7, #24]
 8004d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	2203      	movs	r2, #3
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0203 	and.w	r2, r3, #3
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 80d8 	beq.w	8004ef8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d48:	4b2c      	ldr	r3, [pc, #176]	; (8004dfc <HAL_GPIO_Init+0x22c>)
 8004d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d4e:	4a2b      	ldr	r2, [pc, #172]	; (8004dfc <HAL_GPIO_Init+0x22c>)
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d58:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <HAL_GPIO_Init+0x22c>)
 8004d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d66:	4a26      	ldr	r2, [pc, #152]	; (8004e00 <HAL_GPIO_Init+0x230>)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	220f      	movs	r2, #15
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4013      	ands	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a1d      	ldr	r2, [pc, #116]	; (8004e04 <HAL_GPIO_Init+0x234>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d04a      	beq.n	8004e28 <HAL_GPIO_Init+0x258>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a1c      	ldr	r2, [pc, #112]	; (8004e08 <HAL_GPIO_Init+0x238>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d02b      	beq.n	8004df2 <HAL_GPIO_Init+0x222>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <HAL_GPIO_Init+0x23c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d025      	beq.n	8004dee <HAL_GPIO_Init+0x21e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a1a      	ldr	r2, [pc, #104]	; (8004e10 <HAL_GPIO_Init+0x240>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01f      	beq.n	8004dea <HAL_GPIO_Init+0x21a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <HAL_GPIO_Init+0x244>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d019      	beq.n	8004de6 <HAL_GPIO_Init+0x216>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <HAL_GPIO_Init+0x248>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_GPIO_Init+0x212>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <HAL_GPIO_Init+0x24c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00d      	beq.n	8004dde <HAL_GPIO_Init+0x20e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a16      	ldr	r2, [pc, #88]	; (8004e20 <HAL_GPIO_Init+0x250>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <HAL_GPIO_Init+0x20a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a15      	ldr	r2, [pc, #84]	; (8004e24 <HAL_GPIO_Init+0x254>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d101      	bne.n	8004dd6 <HAL_GPIO_Init+0x206>
 8004dd2:	2309      	movs	r3, #9
 8004dd4:	e029      	b.n	8004e2a <HAL_GPIO_Init+0x25a>
 8004dd6:	230a      	movs	r3, #10
 8004dd8:	e027      	b.n	8004e2a <HAL_GPIO_Init+0x25a>
 8004dda:	2307      	movs	r3, #7
 8004ddc:	e025      	b.n	8004e2a <HAL_GPIO_Init+0x25a>
 8004dde:	2306      	movs	r3, #6
 8004de0:	e023      	b.n	8004e2a <HAL_GPIO_Init+0x25a>
 8004de2:	2305      	movs	r3, #5
 8004de4:	e021      	b.n	8004e2a <HAL_GPIO_Init+0x25a>
 8004de6:	2304      	movs	r3, #4
 8004de8:	e01f      	b.n	8004e2a <HAL_GPIO_Init+0x25a>
 8004dea:	2303      	movs	r3, #3
 8004dec:	e01d      	b.n	8004e2a <HAL_GPIO_Init+0x25a>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e01b      	b.n	8004e2a <HAL_GPIO_Init+0x25a>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e019      	b.n	8004e2a <HAL_GPIO_Init+0x25a>
 8004df6:	bf00      	nop
 8004df8:	58000080 	.word	0x58000080
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	58000400 	.word	0x58000400
 8004e04:	58020000 	.word	0x58020000
 8004e08:	58020400 	.word	0x58020400
 8004e0c:	58020800 	.word	0x58020800
 8004e10:	58020c00 	.word	0x58020c00
 8004e14:	58021000 	.word	0x58021000
 8004e18:	58021400 	.word	0x58021400
 8004e1c:	58021800 	.word	0x58021800
 8004e20:	58021c00 	.word	0x58021c00
 8004e24:	58022400 	.word	0x58022400
 8004e28:	2300      	movs	r3, #0
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	f002 0203 	and.w	r2, r2, #3
 8004e30:	0092      	lsls	r2, r2, #2
 8004e32:	4093      	lsls	r3, r2
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e3a:	4938      	ldr	r1, [pc, #224]	; (8004f1c <HAL_GPIO_Init+0x34c>)
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	3302      	adds	r3, #2
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	43db      	mvns	r3, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4013      	ands	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	43db      	mvns	r3, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4013      	ands	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	3301      	adds	r3, #1
 8004efc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f47f ae6b 	bne.w	8004be4 <HAL_GPIO_Init+0x14>
  }
}
 8004f0e:	bf00      	nop
 8004f10:	bf00      	nop
 8004f12:	3724      	adds	r7, #36	; 0x24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	58000400 	.word	0x58000400

08004f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	807b      	strh	r3, [r7, #2]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f30:	787b      	ldrb	r3, [r7, #1]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f36:	887a      	ldrh	r2, [r7, #2]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f3c:	e003      	b.n	8004f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f3e:	887b      	ldrh	r3, [r7, #2]
 8004f40:	041a      	lsls	r2, r3, #16
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	619a      	str	r2, [r3, #24]
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f64:	887a      	ldrh	r2, [r7, #2]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	041a      	lsls	r2, r3, #16
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	43d9      	mvns	r1, r3
 8004f70:	887b      	ldrh	r3, [r7, #2]
 8004f72:	400b      	ands	r3, r1
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	619a      	str	r2, [r3, #24]
}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f98:	88fb      	ldrh	r3, [r7, #6]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fc fa11 	bl	80013d4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004fc4:	4b19      	ldr	r3, [pc, #100]	; (800502c <HAL_PWREx_ConfigSupply+0x70>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d00a      	beq.n	8004fe6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004fd0:	4b16      	ldr	r3, [pc, #88]	; (800502c <HAL_PWREx_ConfigSupply+0x70>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d001      	beq.n	8004fe2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e01f      	b.n	8005022 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e01d      	b.n	8005022 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004fe6:	4b11      	ldr	r3, [pc, #68]	; (800502c <HAL_PWREx_ConfigSupply+0x70>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f023 0207 	bic.w	r2, r3, #7
 8004fee:	490f      	ldr	r1, [pc, #60]	; (800502c <HAL_PWREx_ConfigSupply+0x70>)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004ff6:	f7fd f93f 	bl	8002278 <HAL_GetTick>
 8004ffa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ffc:	e009      	b.n	8005012 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ffe:	f7fd f93b 	bl	8002278 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800500c:	d901      	bls.n	8005012 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e007      	b.n	8005022 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_PWREx_ConfigSupply+0x70>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800501a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501e:	d1ee      	bne.n	8004ffe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	58024800 	.word	0x58024800

08005030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08c      	sub	sp, #48	; 0x30
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e397      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 8087 	beq.w	800515e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005050:	4b9e      	ldr	r3, [pc, #632]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800505a:	4b9c      	ldr	r3, [pc, #624]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	2b10      	cmp	r3, #16
 8005064:	d007      	beq.n	8005076 <HAL_RCC_OscConfig+0x46>
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	2b18      	cmp	r3, #24
 800506a:	d110      	bne.n	800508e <HAL_RCC_OscConfig+0x5e>
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d10b      	bne.n	800508e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005076:	4b95      	ldr	r3, [pc, #596]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d06c      	beq.n	800515c <HAL_RCC_OscConfig+0x12c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d168      	bne.n	800515c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e371      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005096:	d106      	bne.n	80050a6 <HAL_RCC_OscConfig+0x76>
 8005098:	4b8c      	ldr	r3, [pc, #560]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a8b      	ldr	r2, [pc, #556]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 800509e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e02e      	b.n	8005104 <HAL_RCC_OscConfig+0xd4>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x98>
 80050ae:	4b87      	ldr	r3, [pc, #540]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a86      	ldr	r2, [pc, #536]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80050b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	4b84      	ldr	r3, [pc, #528]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a83      	ldr	r2, [pc, #524]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80050c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e01d      	b.n	8005104 <HAL_RCC_OscConfig+0xd4>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0xbc>
 80050d2:	4b7e      	ldr	r3, [pc, #504]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a7d      	ldr	r2, [pc, #500]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80050d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b7b      	ldr	r3, [pc, #492]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a7a      	ldr	r2, [pc, #488]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e00b      	b.n	8005104 <HAL_RCC_OscConfig+0xd4>
 80050ec:	4b77      	ldr	r3, [pc, #476]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a76      	ldr	r2, [pc, #472]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	4b74      	ldr	r3, [pc, #464]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a73      	ldr	r2, [pc, #460]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d013      	beq.n	8005134 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fd f8b4 	bl	8002278 <HAL_GetTick>
 8005110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005114:	f7fd f8b0 	bl	8002278 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e325      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005126:	4b69      	ldr	r3, [pc, #420]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0xe4>
 8005132:	e014      	b.n	800515e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fd f8a0 	bl	8002278 <HAL_GetTick>
 8005138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800513c:	f7fd f89c 	bl	8002278 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	; 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e311      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800514e:	4b5f      	ldr	r3, [pc, #380]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x10c>
 800515a:	e000      	b.n	800515e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 808a 	beq.w	8005280 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800516c:	4b57      	ldr	r3, [pc, #348]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005174:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005176:	4b55      	ldr	r3, [pc, #340]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 8005178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <HAL_RCC_OscConfig+0x162>
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	2b18      	cmp	r3, #24
 8005186:	d137      	bne.n	80051f8 <HAL_RCC_OscConfig+0x1c8>
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d132      	bne.n	80051f8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005192:	4b4e      	ldr	r3, [pc, #312]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <HAL_RCC_OscConfig+0x17a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e2e3      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051aa:	4b48      	ldr	r3, [pc, #288]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f023 0219 	bic.w	r2, r3, #25
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	4945      	ldr	r1, [pc, #276]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051bc:	f7fd f85c 	bl	8002278 <HAL_GetTick>
 80051c0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051c4:	f7fd f858 	bl	8002278 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e2cd      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051d6:	4b3d      	ldr	r3, [pc, #244]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0f0      	beq.n	80051c4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e2:	4b3a      	ldr	r3, [pc, #232]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	061b      	lsls	r3, r3, #24
 80051f0:	4936      	ldr	r1, [pc, #216]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f6:	e043      	b.n	8005280 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d026      	beq.n	800524e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005200:	4b32      	ldr	r3, [pc, #200]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f023 0219 	bic.w	r2, r3, #25
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	492f      	ldr	r1, [pc, #188]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 800520e:	4313      	orrs	r3, r2
 8005210:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005212:	f7fd f831 	bl	8002278 <HAL_GetTick>
 8005216:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800521a:	f7fd f82d 	bl	8002278 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e2a2      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800522c:	4b27      	ldr	r3, [pc, #156]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005238:	4b24      	ldr	r3, [pc, #144]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	061b      	lsls	r3, r3, #24
 8005246:	4921      	ldr	r1, [pc, #132]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 8005248:	4313      	orrs	r3, r2
 800524a:	604b      	str	r3, [r1, #4]
 800524c:	e018      	b.n	8005280 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800524e:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1e      	ldr	r2, [pc, #120]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525a:	f7fd f80d 	bl	8002278 <HAL_GetTick>
 800525e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005262:	f7fd f809 	bl	8002278 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e27e      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005274:	4b15      	ldr	r3, [pc, #84]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f0      	bne.n	8005262 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	2b00      	cmp	r3, #0
 800528a:	d06d      	beq.n	8005368 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005294:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d007      	beq.n	80052b2 <HAL_RCC_OscConfig+0x282>
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b18      	cmp	r3, #24
 80052a6:	d11e      	bne.n	80052e6 <HAL_RCC_OscConfig+0x2b6>
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d119      	bne.n	80052e6 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_RCC_OscConfig+0x29c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d008      	beq.n	80052d0 <HAL_RCC_OscConfig+0x2a0>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	2b80      	cmp	r3, #128	; 0x80
 80052c4:	d004      	beq.n	80052d0 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e253      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
 80052ca:	bf00      	nop
 80052cc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052d0:	4ba3      	ldr	r3, [pc, #652]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	49a0      	ldr	r1, [pc, #640]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052e4:	e040      	b.n	8005368 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d023      	beq.n	8005336 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80052ee:	4b9c      	ldr	r3, [pc, #624]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a9b      	ldr	r2, [pc, #620]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80052f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fc ffbd 	bl	8002278 <HAL_GetTick>
 80052fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005302:	f7fc ffb9 	bl	8002278 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e22e      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005314:	4b92      	ldr	r3, [pc, #584]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0f0      	beq.n	8005302 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005320:	4b8f      	ldr	r3, [pc, #572]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	061b      	lsls	r3, r3, #24
 800532e:	498c      	ldr	r1, [pc, #560]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 8005330:	4313      	orrs	r3, r2
 8005332:	60cb      	str	r3, [r1, #12]
 8005334:	e018      	b.n	8005368 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005336:	4b8a      	ldr	r3, [pc, #552]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a89      	ldr	r2, [pc, #548]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 800533c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005342:	f7fc ff99 	bl	8002278 <HAL_GetTick>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800534a:	f7fc ff95 	bl	8002278 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e20a      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800535c:	4b80      	ldr	r3, [pc, #512]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f0      	bne.n	800534a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d036      	beq.n	80053e2 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d019      	beq.n	80053b0 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800537c:	4b78      	ldr	r3, [pc, #480]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 800537e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005380:	4a77      	ldr	r2, [pc, #476]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005388:	f7fc ff76 	bl	8002278 <HAL_GetTick>
 800538c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005390:	f7fc ff72 	bl	8002278 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e1e7      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053a2:	4b6f      	ldr	r3, [pc, #444]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80053a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0x360>
 80053ae:	e018      	b.n	80053e2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053b0:	4b6b      	ldr	r3, [pc, #428]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80053b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b4:	4a6a      	ldr	r2, [pc, #424]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80053b6:	f023 0301 	bic.w	r3, r3, #1
 80053ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053bc:	f7fc ff5c 	bl	8002278 <HAL_GetTick>
 80053c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c4:	f7fc ff58 	bl	8002278 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e1cd      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053d6:	4b62      	ldr	r3, [pc, #392]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80053d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d036      	beq.n	800545c <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d019      	beq.n	800542a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053f6:	4b5a      	ldr	r3, [pc, #360]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a59      	ldr	r2, [pc, #356]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80053fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005400:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005402:	f7fc ff39 	bl	8002278 <HAL_GetTick>
 8005406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800540a:	f7fc ff35 	bl	8002278 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e1aa      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800541c:	4b50      	ldr	r3, [pc, #320]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <HAL_RCC_OscConfig+0x3da>
 8005428:	e018      	b.n	800545c <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800542a:	4b4d      	ldr	r3, [pc, #308]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a4c      	ldr	r2, [pc, #304]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 8005430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005434:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005436:	f7fc ff1f 	bl	8002278 <HAL_GetTick>
 800543a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800543e:	f7fc ff1b 	bl	8002278 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e190      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005450:	4b43      	ldr	r3, [pc, #268]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f0      	bne.n	800543e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8085 	beq.w	8005574 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800546a:	4b3e      	ldr	r3, [pc, #248]	; (8005564 <HAL_RCC_OscConfig+0x534>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a3d      	ldr	r2, [pc, #244]	; (8005564 <HAL_RCC_OscConfig+0x534>)
 8005470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005474:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005476:	f7fc feff 	bl	8002278 <HAL_GetTick>
 800547a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800547e:	f7fc fefb 	bl	8002278 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b64      	cmp	r3, #100	; 0x64
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e170      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005490:	4b34      	ldr	r3, [pc, #208]	; (8005564 <HAL_RCC_OscConfig+0x534>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f0      	beq.n	800547e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d106      	bne.n	80054b2 <HAL_RCC_OscConfig+0x482>
 80054a4:	4b2e      	ldr	r3, [pc, #184]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80054a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a8:	4a2d      	ldr	r2, [pc, #180]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	6713      	str	r3, [r2, #112]	; 0x70
 80054b0:	e02d      	b.n	800550e <HAL_RCC_OscConfig+0x4de>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4a4>
 80054ba:	4b29      	ldr	r3, [pc, #164]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80054bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054be:	4a28      	ldr	r2, [pc, #160]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	6713      	str	r3, [r2, #112]	; 0x70
 80054c6:	4b26      	ldr	r3, [pc, #152]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	4a25      	ldr	r2, [pc, #148]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80054cc:	f023 0304 	bic.w	r3, r3, #4
 80054d0:	6713      	str	r3, [r2, #112]	; 0x70
 80054d2:	e01c      	b.n	800550e <HAL_RCC_OscConfig+0x4de>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b05      	cmp	r3, #5
 80054da:	d10c      	bne.n	80054f6 <HAL_RCC_OscConfig+0x4c6>
 80054dc:	4b20      	ldr	r3, [pc, #128]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80054de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e0:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80054e2:	f043 0304 	orr.w	r3, r3, #4
 80054e6:	6713      	str	r3, [r2, #112]	; 0x70
 80054e8:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	4a1c      	ldr	r2, [pc, #112]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	6713      	str	r3, [r2, #112]	; 0x70
 80054f4:	e00b      	b.n	800550e <HAL_RCC_OscConfig+0x4de>
 80054f6:	4b1a      	ldr	r3, [pc, #104]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	4a19      	ldr	r2, [pc, #100]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	6713      	str	r3, [r2, #112]	; 0x70
 8005502:	4b17      	ldr	r3, [pc, #92]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	4a16      	ldr	r2, [pc, #88]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 8005508:	f023 0304 	bic.w	r3, r3, #4
 800550c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d015      	beq.n	8005542 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005516:	f7fc feaf 	bl	8002278 <HAL_GetTick>
 800551a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800551c:	e00a      	b.n	8005534 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800551e:	f7fc feab 	bl	8002278 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	f241 3288 	movw	r2, #5000	; 0x1388
 800552c:	4293      	cmp	r3, r2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e11e      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005534:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <HAL_RCC_OscConfig+0x530>)
 8005536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0ee      	beq.n	800551e <HAL_RCC_OscConfig+0x4ee>
 8005540:	e018      	b.n	8005574 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7fc fe99 	bl	8002278 <HAL_GetTick>
 8005546:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005548:	e00e      	b.n	8005568 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800554a:	f7fc fe95 	bl	8002278 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f241 3288 	movw	r2, #5000	; 0x1388
 8005558:	4293      	cmp	r3, r2
 800555a:	d905      	bls.n	8005568 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e108      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
 8005560:	58024400 	.word	0x58024400
 8005564:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005568:	4b84      	ldr	r3, [pc, #528]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1ea      	bne.n	800554a <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80f9 	beq.w	8005770 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800557e:	4b7f      	ldr	r3, [pc, #508]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005586:	2b18      	cmp	r3, #24
 8005588:	f000 80b4 	beq.w	80056f4 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	2b02      	cmp	r3, #2
 8005592:	f040 8095 	bne.w	80056c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005596:	4b79      	ldr	r3, [pc, #484]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a78      	ldr	r2, [pc, #480]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 800559c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a2:	f7fc fe69 	bl	8002278 <HAL_GetTick>
 80055a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055aa:	f7fc fe65 	bl	8002278 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e0da      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055bc:	4b6f      	ldr	r3, [pc, #444]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1f0      	bne.n	80055aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055c8:	4b6c      	ldr	r3, [pc, #432]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 80055ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055cc:	4b6c      	ldr	r3, [pc, #432]	; (8005780 <HAL_RCC_OscConfig+0x750>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055d8:	0112      	lsls	r2, r2, #4
 80055da:	430a      	orrs	r2, r1
 80055dc:	4967      	ldr	r1, [pc, #412]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	628b      	str	r3, [r1, #40]	; 0x28
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	3b01      	subs	r3, #1
 80055e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f0:	3b01      	subs	r3, #1
 80055f2:	025b      	lsls	r3, r3, #9
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	3b01      	subs	r3, #1
 80055fe:	041b      	lsls	r3, r3, #16
 8005600:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560a:	3b01      	subs	r3, #1
 800560c:	061b      	lsls	r3, r3, #24
 800560e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005612:	495a      	ldr	r1, [pc, #360]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 8005614:	4313      	orrs	r3, r2
 8005616:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005618:	4b58      	ldr	r3, [pc, #352]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	4a57      	ldr	r2, [pc, #348]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005624:	4b55      	ldr	r3, [pc, #340]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 8005626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005628:	4b56      	ldr	r3, [pc, #344]	; (8005784 <HAL_RCC_OscConfig+0x754>)
 800562a:	4013      	ands	r3, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005630:	00d2      	lsls	r2, r2, #3
 8005632:	4952      	ldr	r1, [pc, #328]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 8005634:	4313      	orrs	r3, r2
 8005636:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005638:	4b50      	ldr	r3, [pc, #320]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	f023 020c 	bic.w	r2, r3, #12
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	494d      	ldr	r1, [pc, #308]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 8005646:	4313      	orrs	r3, r2
 8005648:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800564a:	4b4c      	ldr	r3, [pc, #304]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	f023 0202 	bic.w	r2, r3, #2
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005656:	4949      	ldr	r1, [pc, #292]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 8005658:	4313      	orrs	r3, r2
 800565a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800565c:	4b47      	ldr	r3, [pc, #284]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	4a46      	ldr	r2, [pc, #280]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 8005662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005668:	4b44      	ldr	r3, [pc, #272]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	4a43      	ldr	r2, [pc, #268]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 800566e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005672:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005674:	4b41      	ldr	r3, [pc, #260]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	4a40      	ldr	r2, [pc, #256]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 800567a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800567e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005680:	4b3e      	ldr	r3, [pc, #248]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	4a3d      	ldr	r2, [pc, #244]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800568c:	4b3b      	ldr	r3, [pc, #236]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a3a      	ldr	r2, [pc, #232]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 8005692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fc fdee 	bl	8002278 <HAL_GetTick>
 800569c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fc fdea 	bl	8002278 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e05f      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056b2:	4b32      	ldr	r3, [pc, #200]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCC_OscConfig+0x670>
 80056be:	e057      	b.n	8005770 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c0:	4b2e      	ldr	r3, [pc, #184]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2d      	ldr	r2, [pc, #180]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 80056c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fc fdd4 	bl	8002278 <HAL_GetTick>
 80056d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d4:	f7fc fdd0 	bl	8002278 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e045      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056e6:	4b25      	ldr	r3, [pc, #148]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0x6a4>
 80056f2:	e03d      	b.n	8005770 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056f4:	4b21      	ldr	r3, [pc, #132]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056fa:	4b20      	ldr	r3, [pc, #128]	; (800577c <HAL_RCC_OscConfig+0x74c>)
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b01      	cmp	r3, #1
 8005706:	d031      	beq.n	800576c <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f003 0203 	and.w	r2, r3, #3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d12a      	bne.n	800576c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005722:	429a      	cmp	r2, r3
 8005724:	d122      	bne.n	800576c <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005732:	429a      	cmp	r2, r3
 8005734:	d11a      	bne.n	800576c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	0a5b      	lsrs	r3, r3, #9
 800573a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005744:	429a      	cmp	r2, r3
 8005746:	d111      	bne.n	800576c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	0c1b      	lsrs	r3, r3, #16
 800574c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d108      	bne.n	800576c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	0e1b      	lsrs	r3, r3, #24
 800575e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005768:	429a      	cmp	r2, r3
 800576a:	d001      	beq.n	8005770 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3730      	adds	r7, #48	; 0x30
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	58024400 	.word	0x58024400
 8005780:	fffffc0c 	.word	0xfffffc0c
 8005784:	ffff0007 	.word	0xffff0007

08005788 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e19c      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800579c:	4b8a      	ldr	r3, [pc, #552]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d910      	bls.n	80057cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b87      	ldr	r3, [pc, #540]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 020f 	bic.w	r2, r3, #15
 80057b2:	4985      	ldr	r1, [pc, #532]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ba:	4b83      	ldr	r3, [pc, #524]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d001      	beq.n	80057cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e184      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d010      	beq.n	80057fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	4b7b      	ldr	r3, [pc, #492]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d908      	bls.n	80057fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057e8:	4b78      	ldr	r3, [pc, #480]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	4975      	ldr	r1, [pc, #468]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d010      	beq.n	8005828 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	4b70      	ldr	r3, [pc, #448]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005812:	429a      	cmp	r2, r3
 8005814:	d908      	bls.n	8005828 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005816:	4b6d      	ldr	r3, [pc, #436]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	496a      	ldr	r1, [pc, #424]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005824:	4313      	orrs	r3, r2
 8005826:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	2b00      	cmp	r3, #0
 8005832:	d010      	beq.n	8005856 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	4b64      	ldr	r3, [pc, #400]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005840:	429a      	cmp	r2, r3
 8005842:	d908      	bls.n	8005856 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005844:	4b61      	ldr	r3, [pc, #388]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	495e      	ldr	r1, [pc, #376]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005852:	4313      	orrs	r3, r2
 8005854:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d010      	beq.n	8005884 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69da      	ldr	r2, [r3, #28]
 8005866:	4b59      	ldr	r3, [pc, #356]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800586e:	429a      	cmp	r2, r3
 8005870:	d908      	bls.n	8005884 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005872:	4b56      	ldr	r3, [pc, #344]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	4953      	ldr	r1, [pc, #332]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005880:	4313      	orrs	r3, r2
 8005882:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d010      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	4b4d      	ldr	r3, [pc, #308]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	429a      	cmp	r2, r3
 800589e:	d908      	bls.n	80058b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a0:	4b4a      	ldr	r3, [pc, #296]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f023 020f 	bic.w	r2, r3, #15
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4947      	ldr	r1, [pc, #284]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d055      	beq.n	800596a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058be:	4b43      	ldr	r3, [pc, #268]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4940      	ldr	r1, [pc, #256]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d107      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058d8:	4b3c      	ldr	r3, [pc, #240]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d121      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0f6      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058f0:	4b36      	ldr	r3, [pc, #216]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d115      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0ea      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005908:	4b30      	ldr	r3, [pc, #192]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0de      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0d6      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005928:	4b28      	ldr	r3, [pc, #160]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f023 0207 	bic.w	r2, r3, #7
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4925      	ldr	r1, [pc, #148]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005936:	4313      	orrs	r3, r2
 8005938:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593a:	f7fc fc9d 	bl	8002278 <HAL_GetTick>
 800593e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005940:	e00a      	b.n	8005958 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005942:	f7fc fc99 	bl	8002278 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005950:	4293      	cmp	r3, r2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e0be      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005958:	4b1c      	ldr	r3, [pc, #112]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	429a      	cmp	r2, r3
 8005968:	d1eb      	bne.n	8005942 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d010      	beq.n	8005998 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	4b14      	ldr	r3, [pc, #80]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	429a      	cmp	r2, r3
 8005984:	d208      	bcs.n	8005998 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005986:	4b11      	ldr	r3, [pc, #68]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f023 020f 	bic.w	r2, r3, #15
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	490e      	ldr	r1, [pc, #56]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005994:	4313      	orrs	r3, r2
 8005996:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005998:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d214      	bcs.n	80059d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a6:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f023 020f 	bic.w	r2, r3, #15
 80059ae:	4906      	ldr	r1, [pc, #24]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d005      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e086      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
 80059c8:	52002000 	.word	0x52002000
 80059cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d010      	beq.n	80059fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	4b3f      	ldr	r3, [pc, #252]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d208      	bcs.n	80059fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059ec:	4b3c      	ldr	r3, [pc, #240]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	4939      	ldr	r1, [pc, #228]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d010      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	4b34      	ldr	r3, [pc, #208]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d208      	bcs.n	8005a2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a1a:	4b31      	ldr	r3, [pc, #196]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	492e      	ldr	r1, [pc, #184]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d010      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699a      	ldr	r2, [r3, #24]
 8005a3c:	4b28      	ldr	r3, [pc, #160]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d208      	bcs.n	8005a5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a48:	4b25      	ldr	r3, [pc, #148]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	4922      	ldr	r1, [pc, #136]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d010      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d208      	bcs.n	8005a88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a76:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	4917      	ldr	r1, [pc, #92]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a88:	f000 f834 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	4912      	ldr	r1, [pc, #72]	; (8005ae4 <HAL_RCC_ClockConfig+0x35c>)
 8005a9a:	5ccb      	ldrb	r3, [r1, r3]
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005aa6:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	4a0d      	ldr	r2, [pc, #52]	; (8005ae4 <HAL_RCC_ClockConfig+0x35c>)
 8005ab0:	5cd3      	ldrb	r3, [r2, r3]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8005abc:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <HAL_RCC_ClockConfig+0x360>)
 8005abe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ac0:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <HAL_RCC_ClockConfig+0x364>)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005ac6:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <HAL_RCC_ClockConfig+0x368>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fb ff16 	bl	80018fc <HAL_InitTick>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	0801c70c 	.word	0x0801c70c
 8005ae8:	24000014 	.word	0x24000014
 8005aec:	24000010 	.word	0x24000010
 8005af0:	24000018 	.word	0x24000018

08005af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b089      	sub	sp, #36	; 0x24
 8005af8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005afa:	4bb3      	ldr	r3, [pc, #716]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b02:	2b18      	cmp	r3, #24
 8005b04:	f200 8155 	bhi.w	8005db2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b75 	.word	0x08005b75
 8005b14:	08005db3 	.word	0x08005db3
 8005b18:	08005db3 	.word	0x08005db3
 8005b1c:	08005db3 	.word	0x08005db3
 8005b20:	08005db3 	.word	0x08005db3
 8005b24:	08005db3 	.word	0x08005db3
 8005b28:	08005db3 	.word	0x08005db3
 8005b2c:	08005db3 	.word	0x08005db3
 8005b30:	08005b9b 	.word	0x08005b9b
 8005b34:	08005db3 	.word	0x08005db3
 8005b38:	08005db3 	.word	0x08005db3
 8005b3c:	08005db3 	.word	0x08005db3
 8005b40:	08005db3 	.word	0x08005db3
 8005b44:	08005db3 	.word	0x08005db3
 8005b48:	08005db3 	.word	0x08005db3
 8005b4c:	08005db3 	.word	0x08005db3
 8005b50:	08005ba1 	.word	0x08005ba1
 8005b54:	08005db3 	.word	0x08005db3
 8005b58:	08005db3 	.word	0x08005db3
 8005b5c:	08005db3 	.word	0x08005db3
 8005b60:	08005db3 	.word	0x08005db3
 8005b64:	08005db3 	.word	0x08005db3
 8005b68:	08005db3 	.word	0x08005db3
 8005b6c:	08005db3 	.word	0x08005db3
 8005b70:	08005ba7 	.word	0x08005ba7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b74:	4b94      	ldr	r3, [pc, #592]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b80:	4b91      	ldr	r3, [pc, #580]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	08db      	lsrs	r3, r3, #3
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	4a90      	ldr	r2, [pc, #576]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005b92:	e111      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b94:	4b8d      	ldr	r3, [pc, #564]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b96:	61bb      	str	r3, [r7, #24]
    break;
 8005b98:	e10e      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005b9a:	4b8d      	ldr	r3, [pc, #564]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b9c:	61bb      	str	r3, [r7, #24]
    break;
 8005b9e:	e10b      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005ba0:	4b8c      	ldr	r3, [pc, #560]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ba2:	61bb      	str	r3, [r7, #24]
    break;
 8005ba4:	e108      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ba6:	4b88      	ldr	r3, [pc, #544]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005bb0:	4b85      	ldr	r3, [pc, #532]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	091b      	lsrs	r3, r3, #4
 8005bb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005bbc:	4b82      	ldr	r3, [pc, #520]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005bc6:	4b80      	ldr	r3, [pc, #512]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	08db      	lsrs	r3, r3, #3
 8005bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80e1 	beq.w	8005dac <HAL_RCC_GetSysClockFreq+0x2b8>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	f000 8083 	beq.w	8005cf8 <HAL_RCC_GetSysClockFreq+0x204>
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	f200 80a1 	bhi.w	8005d3c <HAL_RCC_GetSysClockFreq+0x248>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0x114>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d056      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005c06:	e099      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c08:	4b6f      	ldr	r3, [pc, #444]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d02d      	beq.n	8005c70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c14:	4b6c      	ldr	r3, [pc, #432]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	08db      	lsrs	r3, r3, #3
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	4a6b      	ldr	r2, [pc, #428]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
 8005c24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	ee07 3a90 	vmov	s15, r3
 8005c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3e:	4b62      	ldr	r3, [pc, #392]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c52:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005c6e:	e087      	b.n	8005d80 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005ddc <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c82:	4b51      	ldr	r3, [pc, #324]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c96:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cb2:	e065      	b.n	8005d80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005de0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc6:	4b40      	ldr	r3, [pc, #256]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cf6:	e043      	b.n	8005d80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d02:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005de4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0a:	4b2f      	ldr	r3, [pc, #188]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d3a:	e021      	b.n	8005d80 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005de0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4e:	4b1e      	ldr	r3, [pc, #120]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d7e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005d80:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	0a5b      	lsrs	r3, r3, #9
 8005d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	ee07 3a90 	vmov	s15, r3
 8005d94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d98:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da4:	ee17 3a90 	vmov	r3, s15
 8005da8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005daa:	e005      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	61bb      	str	r3, [r7, #24]
    break;
 8005db0:	e002      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005db2:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005db4:	61bb      	str	r3, [r7, #24]
    break;
 8005db6:	bf00      	nop
  }

  return sysclockfreq;
 8005db8:	69bb      	ldr	r3, [r7, #24]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3724      	adds	r7, #36	; 0x24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	58024400 	.word	0x58024400
 8005dcc:	03d09000 	.word	0x03d09000
 8005dd0:	003d0900 	.word	0x003d0900
 8005dd4:	007a1200 	.word	0x007a1200
 8005dd8:	46000000 	.word	0x46000000
 8005ddc:	4c742400 	.word	0x4c742400
 8005de0:	4a742400 	.word	0x4a742400
 8005de4:	4af42400 	.word	0x4af42400

08005de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005dee:	f7ff fe81 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8005df2:	4602      	mov	r2, r0
 8005df4:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <HAL_RCC_GetHCLKFreq+0x50>)
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	0a1b      	lsrs	r3, r3, #8
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	490f      	ldr	r1, [pc, #60]	; (8005e3c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e00:	5ccb      	ldrb	r3, [r1, r3]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	4a09      	ldr	r2, [pc, #36]	; (8005e3c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e16:	5cd3      	ldrb	r3, [r2, r3]
 8005e18:	f003 031f 	and.w	r3, r3, #31
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e22:	4a07      	ldr	r2, [pc, #28]	; (8005e40 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e26:	4a07      	ldr	r2, [pc, #28]	; (8005e44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e2c:	4b04      	ldr	r3, [pc, #16]	; (8005e40 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	58024400 	.word	0x58024400
 8005e3c:	0801c70c 	.word	0x0801c70c
 8005e40:	24000014 	.word	0x24000014
 8005e44:	24000010 	.word	0x24000010

08005e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e4c:	f7ff ffcc 	bl	8005de8 <HAL_RCC_GetHCLKFreq>
 8005e50:	4602      	mov	r2, r0
 8005e52:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	091b      	lsrs	r3, r3, #4
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	4904      	ldr	r1, [pc, #16]	; (8005e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e5e:	5ccb      	ldrb	r3, [r1, r3]
 8005e60:	f003 031f 	and.w	r3, r3, #31
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	0801c70c 	.word	0x0801c70c

08005e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e78:	f7ff ffb6 	bl	8005de8 <HAL_RCC_GetHCLKFreq>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	0a1b      	lsrs	r3, r3, #8
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	4904      	ldr	r1, [pc, #16]	; (8005e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e8a:	5ccb      	ldrb	r3, [r1, r3]
 8005e8c:	f003 031f 	and.w	r3, r3, #31
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	58024400 	.word	0x58024400
 8005e9c:	0801c70c 	.word	0x0801c70c

08005ea0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	223f      	movs	r2, #63	; 0x3f
 8005eae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005eb0:	4b1a      	ldr	r3, [pc, #104]	; (8005f1c <HAL_RCC_GetClockConfig+0x7c>)
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f003 0207 	and.w	r2, r3, #7
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005ebc:	4b17      	ldr	r3, [pc, #92]	; (8005f1c <HAL_RCC_GetClockConfig+0x7c>)
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005ec8:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <HAL_RCC_GetClockConfig+0x7c>)
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f003 020f 	and.w	r2, r3, #15
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005ed4:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <HAL_RCC_GetClockConfig+0x7c>)
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005ee0:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <HAL_RCC_GetClockConfig+0x7c>)
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005eec:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <HAL_RCC_GetClockConfig+0x7c>)
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005ef8:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <HAL_RCC_GetClockConfig+0x7c>)
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <HAL_RCC_GetClockConfig+0x80>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 020f 	and.w	r2, r3, #15
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	601a      	str	r2, [r3, #0]
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	58024400 	.word	0x58024400
 8005f20:	52002000 	.word	0x52002000

08005f24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f30:	2300      	movs	r3, #0
 8005f32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d03f      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f48:	d02a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005f4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f4e:	d824      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f54:	d018      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f5a:	d81e      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f64:	d007      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005f66:	e018      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f68:	4bab      	ldr	r3, [pc, #684]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	4aaa      	ldr	r2, [pc, #680]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f74:	e015      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	2102      	movs	r1, #2
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f001 f989 	bl	8007294 <RCCEx_PLL2_Config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f86:	e00c      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3324      	adds	r3, #36	; 0x24
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 fa32 	bl	80073f8 <RCCEx_PLL3_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f98:	e003      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f9e:	e000      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d109      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005fa8:	4b9b      	ldr	r3, [pc, #620]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb4:	4998      	ldr	r1, [pc, #608]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	650b      	str	r3, [r1, #80]	; 0x50
 8005fba:	e001      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbc:	7dfb      	ldrb	r3, [r7, #23]
 8005fbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d03d      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d826      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005fd4:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08005ff1 	.word	0x08005ff1
 8005fe0:	08005fff 	.word	0x08005fff
 8005fe4:	08006011 	.word	0x08006011
 8005fe8:	08006029 	.word	0x08006029
 8005fec:	08006029 	.word	0x08006029
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff0:	4b89      	ldr	r3, [pc, #548]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	4a88      	ldr	r2, [pc, #544]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ffc:	e015      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f001 f945 	bl	8007294 <RCCEx_PLL2_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800600e:	e00c      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3324      	adds	r3, #36	; 0x24
 8006014:	2100      	movs	r1, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f001 f9ee 	bl	80073f8 <RCCEx_PLL3_Config>
 800601c:	4603      	mov	r3, r0
 800601e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006020:	e003      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	75fb      	strb	r3, [r7, #23]
      break;
 8006026:	e000      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d109      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006030:	4b79      	ldr	r3, [pc, #484]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006034:	f023 0207 	bic.w	r2, r3, #7
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	4976      	ldr	r1, [pc, #472]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800603e:	4313      	orrs	r3, r2
 8006040:	650b      	str	r3, [r1, #80]	; 0x50
 8006042:	e001      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006050:	2b00      	cmp	r3, #0
 8006052:	d051      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800605a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800605e:	d036      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006060:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006064:	d830      	bhi.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800606a:	d032      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800606c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006070:	d82a      	bhi.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006072:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006076:	d02e      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006078:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800607c:	d824      	bhi.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800607e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006082:	d018      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006088:	d81e      	bhi.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800608e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006092:	d007      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006094:	e018      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006096:	4b60      	ldr	r3, [pc, #384]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	4a5f      	ldr	r2, [pc, #380]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800609c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060a2:	e019      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3304      	adds	r3, #4
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 f8f2 	bl	8007294 <RCCEx_PLL2_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80060b4:	e010      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3324      	adds	r3, #36	; 0x24
 80060ba:	2100      	movs	r1, #0
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 f99b 	bl	80073f8 <RCCEx_PLL3_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060c6:	e007      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	75fb      	strb	r3, [r7, #23]
      break;
 80060cc:	e004      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80060ce:	bf00      	nop
 80060d0:	e002      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80060d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060de:	4b4e      	ldr	r3, [pc, #312]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060ec:	494a      	ldr	r1, [pc, #296]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	658b      	str	r3, [r1, #88]	; 0x58
 80060f2:	e001      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006100:	2b00      	cmp	r3, #0
 8006102:	d051      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800610a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800610e:	d036      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006110:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006114:	d830      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006116:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800611a:	d032      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800611c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006120:	d82a      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006122:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006126:	d02e      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006128:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800612c:	d824      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800612e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006132:	d018      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006134:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006138:	d81e      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800613e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006142:	d007      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006144:	e018      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006146:	4b34      	ldr	r3, [pc, #208]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	4a33      	ldr	r2, [pc, #204]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800614c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006150:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006152:	e019      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3304      	adds	r3, #4
 8006158:	2100      	movs	r1, #0
 800615a:	4618      	mov	r0, r3
 800615c:	f001 f89a 	bl	8007294 <RCCEx_PLL2_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006164:	e010      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3324      	adds	r3, #36	; 0x24
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f001 f943 	bl	80073f8 <RCCEx_PLL3_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006176:	e007      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75fb      	strb	r3, [r7, #23]
      break;
 800617c:	e004      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800617e:	bf00      	nop
 8006180:	e002      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006182:	bf00      	nop
 8006184:	e000      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006188:	7dfb      	ldrb	r3, [r7, #23]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800618e:	4b22      	ldr	r3, [pc, #136]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006192:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800619c:	491e      	ldr	r1, [pc, #120]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	658b      	str	r3, [r1, #88]	; 0x58
 80061a2:	e001      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
 80061a6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d035      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b8:	2b30      	cmp	r3, #48	; 0x30
 80061ba:	d01c      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80061bc:	2b30      	cmp	r3, #48	; 0x30
 80061be:	d817      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	d00c      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d813      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d016      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80061cc:	2b10      	cmp	r3, #16
 80061ce:	d10f      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d0:	4b11      	ldr	r3, [pc, #68]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	4a10      	ldr	r2, [pc, #64]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80061dc:	e00e      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3304      	adds	r3, #4
 80061e2:	2102      	movs	r1, #2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f855 	bl	8007294 <RCCEx_PLL2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80061ee:	e005      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	75fb      	strb	r3, [r7, #23]
      break;
 80061f4:	e002      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80061f6:	bf00      	nop
 80061f8:	e000      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80061fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10c      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006202:	4b05      	ldr	r3, [pc, #20]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006206:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620e:	4902      	ldr	r1, [pc, #8]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006210:	4313      	orrs	r3, r2
 8006212:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006214:	e004      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006216:	bf00      	nop
 8006218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d047      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006234:	d030      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800623a:	d82a      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800623c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006240:	d02c      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006242:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006246:	d824      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624c:	d018      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800624e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006252:	d81e      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625c:	d007      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800625e:	e018      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006260:	4bac      	ldr	r3, [pc, #688]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	4aab      	ldr	r2, [pc, #684]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800626a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800626c:	e017      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3304      	adds	r3, #4
 8006272:	2100      	movs	r1, #0
 8006274:	4618      	mov	r0, r3
 8006276:	f001 f80d 	bl	8007294 <RCCEx_PLL2_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800627e:	e00e      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3324      	adds	r3, #36	; 0x24
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f001 f8b6 	bl	80073f8 <RCCEx_PLL3_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006290:	e005      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
      break;
 8006296:	e002      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006298:	bf00      	nop
 800629a:	e000      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800629c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d109      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80062a4:	4b9b      	ldr	r3, [pc, #620]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80062a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b0:	4998      	ldr	r1, [pc, #608]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	650b      	str	r3, [r1, #80]	; 0x50
 80062b6:	e001      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
 80062ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d049      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062d0:	d02e      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80062d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062d6:	d828      	bhi.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80062d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062dc:	d02a      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80062de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062e2:	d822      	bhi.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80062e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062e8:	d026      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80062ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062ee:	d81c      	bhi.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80062f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062f4:	d010      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80062f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062fa:	d816      	bhi.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01d      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006304:	d111      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3304      	adds	r3, #4
 800630a:	2101      	movs	r1, #1
 800630c:	4618      	mov	r0, r3
 800630e:	f000 ffc1 	bl	8007294 <RCCEx_PLL2_Config>
 8006312:	4603      	mov	r3, r0
 8006314:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006316:	e012      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3324      	adds	r3, #36	; 0x24
 800631c:	2101      	movs	r1, #1
 800631e:	4618      	mov	r0, r3
 8006320:	f001 f86a 	bl	80073f8 <RCCEx_PLL3_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006328:	e009      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	75fb      	strb	r3, [r7, #23]
      break;
 800632e:	e006      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006330:	bf00      	nop
 8006332:	e004      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006334:	bf00      	nop
 8006336:	e002      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006338:	bf00      	nop
 800633a:	e000      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800633c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800633e:	7dfb      	ldrb	r3, [r7, #23]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d109      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006344:	4b73      	ldr	r3, [pc, #460]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006350:	4970      	ldr	r1, [pc, #448]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006352:	4313      	orrs	r3, r2
 8006354:	650b      	str	r3, [r1, #80]	; 0x50
 8006356:	e001      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
 800635a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d04b      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800636e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006372:	d02e      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006378:	d828      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800637a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637e:	d02a      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006384:	d822      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006386:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800638a:	d026      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800638c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006390:	d81c      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006396:	d010      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800639c:	d816      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d01d      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80063a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063a6:	d111      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3304      	adds	r3, #4
 80063ac:	2101      	movs	r1, #1
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 ff70 	bl	8007294 <RCCEx_PLL2_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80063b8:	e012      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3324      	adds	r3, #36	; 0x24
 80063be:	2101      	movs	r1, #1
 80063c0:	4618      	mov	r0, r3
 80063c2:	f001 f819 	bl	80073f8 <RCCEx_PLL3_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80063ca:	e009      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	75fb      	strb	r3, [r7, #23]
      break;
 80063d0:	e006      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80063d2:	bf00      	nop
 80063d4:	e004      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80063d6:	bf00      	nop
 80063d8:	e002      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80063de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10a      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80063e6:	4b4b      	ldr	r3, [pc, #300]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80063e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063f4:	4947      	ldr	r1, [pc, #284]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	658b      	str	r3, [r1, #88]	; 0x58
 80063fa:	e001      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
 80063fe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d02f      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006414:	d00e      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800641a:	d814      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d015      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006424:	d10f      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006426:	4b3b      	ldr	r3, [pc, #236]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	4a3a      	ldr	r2, [pc, #232]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800642c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006430:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006432:	e00c      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	2101      	movs	r1, #1
 800643a:	4618      	mov	r0, r3
 800643c:	f000 ff2a 	bl	8007294 <RCCEx_PLL2_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006444:	e003      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	75fb      	strb	r3, [r7, #23]
      break;
 800644a:	e000      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800644c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d109      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006454:	4b2f      	ldr	r3, [pc, #188]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006458:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006460:	492c      	ldr	r1, [pc, #176]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006462:	4313      	orrs	r3, r2
 8006464:	650b      	str	r3, [r1, #80]	; 0x50
 8006466:	e001      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d032      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647c:	2b03      	cmp	r3, #3
 800647e:	d81b      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	080064bf 	.word	0x080064bf
 800648c:	08006499 	.word	0x08006499
 8006490:	080064a7 	.word	0x080064a7
 8006494:	080064bf 	.word	0x080064bf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006498:	4b1e      	ldr	r3, [pc, #120]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	4a1d      	ldr	r2, [pc, #116]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800649e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80064a4:	e00c      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3304      	adds	r3, #4
 80064aa:	2102      	movs	r1, #2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fef1 	bl	8007294 <RCCEx_PLL2_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80064b6:	e003      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
      break;
 80064bc:	e000      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80064be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ca:	f023 0203 	bic.w	r2, r3, #3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d2:	4910      	ldr	r1, [pc, #64]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064d8:	e001      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 808a 	beq.w	8006600 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064ec:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a09      	ldr	r2, [pc, #36]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80064f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064f8:	f7fb febe 	bl	8002278 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064fe:	e00d      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006500:	f7fb feba 	bl	8002278 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b64      	cmp	r3, #100	; 0x64
 800650c:	d906      	bls.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	75fb      	strb	r3, [r7, #23]
        break;
 8006512:	e009      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006514:	58024400 	.word	0x58024400
 8006518:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800651c:	4bb9      	ldr	r3, [pc, #740]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0eb      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d166      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800652e:	4bb6      	ldr	r3, [pc, #728]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006530:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006538:	4053      	eors	r3, r2
 800653a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800653e:	2b00      	cmp	r3, #0
 8006540:	d013      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006542:	4bb1      	ldr	r3, [pc, #708]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800654a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800654c:	4bae      	ldr	r3, [pc, #696]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800654e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006550:	4aad      	ldr	r2, [pc, #692]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006556:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006558:	4bab      	ldr	r3, [pc, #684]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	4aaa      	ldr	r2, [pc, #680]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800655e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006562:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006564:	4aa8      	ldr	r2, [pc, #672]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006574:	d115      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006576:	f7fb fe7f 	bl	8002278 <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800657c:	e00b      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657e:	f7fb fe7b 	bl	8002278 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	f241 3288 	movw	r2, #5000	; 0x1388
 800658c:	4293      	cmp	r3, r2
 800658e:	d902      	bls.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	75fb      	strb	r3, [r7, #23]
            break;
 8006594:	e005      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006596:	4b9c      	ldr	r3, [pc, #624]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0ed      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d126      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065b6:	d10d      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80065b8:	4b93      	ldr	r3, [pc, #588]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065c6:	0919      	lsrs	r1, r3, #4
 80065c8:	4b90      	ldr	r3, [pc, #576]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065ca:	400b      	ands	r3, r1
 80065cc:	498e      	ldr	r1, [pc, #568]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	610b      	str	r3, [r1, #16]
 80065d2:	e005      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80065d4:	4b8c      	ldr	r3, [pc, #560]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	4a8b      	ldr	r2, [pc, #556]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80065da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80065de:	6113      	str	r3, [r2, #16]
 80065e0:	4b89      	ldr	r3, [pc, #548]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80065e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ee:	4986      	ldr	r1, [pc, #536]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	670b      	str	r3, [r1, #112]	; 0x70
 80065f4:	e004      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	75bb      	strb	r3, [r7, #22]
 80065fa:	e001      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d07e      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006610:	2b28      	cmp	r3, #40	; 0x28
 8006612:	d867      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	080066eb 	.word	0x080066eb
 8006620:	080066e5 	.word	0x080066e5
 8006624:	080066e5 	.word	0x080066e5
 8006628:	080066e5 	.word	0x080066e5
 800662c:	080066e5 	.word	0x080066e5
 8006630:	080066e5 	.word	0x080066e5
 8006634:	080066e5 	.word	0x080066e5
 8006638:	080066e5 	.word	0x080066e5
 800663c:	080066c1 	.word	0x080066c1
 8006640:	080066e5 	.word	0x080066e5
 8006644:	080066e5 	.word	0x080066e5
 8006648:	080066e5 	.word	0x080066e5
 800664c:	080066e5 	.word	0x080066e5
 8006650:	080066e5 	.word	0x080066e5
 8006654:	080066e5 	.word	0x080066e5
 8006658:	080066e5 	.word	0x080066e5
 800665c:	080066d3 	.word	0x080066d3
 8006660:	080066e5 	.word	0x080066e5
 8006664:	080066e5 	.word	0x080066e5
 8006668:	080066e5 	.word	0x080066e5
 800666c:	080066e5 	.word	0x080066e5
 8006670:	080066e5 	.word	0x080066e5
 8006674:	080066e5 	.word	0x080066e5
 8006678:	080066e5 	.word	0x080066e5
 800667c:	080066eb 	.word	0x080066eb
 8006680:	080066e5 	.word	0x080066e5
 8006684:	080066e5 	.word	0x080066e5
 8006688:	080066e5 	.word	0x080066e5
 800668c:	080066e5 	.word	0x080066e5
 8006690:	080066e5 	.word	0x080066e5
 8006694:	080066e5 	.word	0x080066e5
 8006698:	080066e5 	.word	0x080066e5
 800669c:	080066eb 	.word	0x080066eb
 80066a0:	080066e5 	.word	0x080066e5
 80066a4:	080066e5 	.word	0x080066e5
 80066a8:	080066e5 	.word	0x080066e5
 80066ac:	080066e5 	.word	0x080066e5
 80066b0:	080066e5 	.word	0x080066e5
 80066b4:	080066e5 	.word	0x080066e5
 80066b8:	080066e5 	.word	0x080066e5
 80066bc:	080066eb 	.word	0x080066eb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3304      	adds	r3, #4
 80066c4:	2101      	movs	r1, #1
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fde4 	bl	8007294 <RCCEx_PLL2_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80066d0:	e00c      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3324      	adds	r3, #36	; 0x24
 80066d6:	2101      	movs	r1, #1
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fe8d 	bl	80073f8 <RCCEx_PLL3_Config>
 80066de:	4603      	mov	r3, r0
 80066e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80066e2:	e003      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	75fb      	strb	r3, [r7, #23]
      break;
 80066e8:	e000      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80066ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d109      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80066f2:	4b45      	ldr	r3, [pc, #276]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066fe:	4942      	ldr	r1, [pc, #264]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006700:	4313      	orrs	r3, r2
 8006702:	654b      	str	r3, [r1, #84]	; 0x54
 8006704:	e001      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006706:	7dfb      	ldrb	r3, [r7, #23]
 8006708:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d037      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	2b05      	cmp	r3, #5
 800671c:	d820      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800671e:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	08006767 	.word	0x08006767
 8006728:	0800673d 	.word	0x0800673d
 800672c:	0800674f 	.word	0x0800674f
 8006730:	08006767 	.word	0x08006767
 8006734:	08006767 	.word	0x08006767
 8006738:	08006767 	.word	0x08006767
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3304      	adds	r3, #4
 8006740:	2101      	movs	r1, #1
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fda6 	bl	8007294 <RCCEx_PLL2_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800674c:	e00c      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3324      	adds	r3, #36	; 0x24
 8006752:	2101      	movs	r1, #1
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fe4f 	bl	80073f8 <RCCEx_PLL3_Config>
 800675a:	4603      	mov	r3, r0
 800675c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800675e:	e003      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
      break;
 8006764:	e000      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d109      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800676e:	4b26      	ldr	r3, [pc, #152]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006772:	f023 0207 	bic.w	r2, r3, #7
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677a:	4923      	ldr	r1, [pc, #140]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800677c:	4313      	orrs	r3, r2
 800677e:	654b      	str	r3, [r1, #84]	; 0x54
 8006780:	e001      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0304 	and.w	r3, r3, #4
 800678e:	2b00      	cmp	r3, #0
 8006790:	d040      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006798:	2b05      	cmp	r3, #5
 800679a:	d821      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800679c:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800679e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a2:	bf00      	nop
 80067a4:	080067e7 	.word	0x080067e7
 80067a8:	080067bd 	.word	0x080067bd
 80067ac:	080067cf 	.word	0x080067cf
 80067b0:	080067e7 	.word	0x080067e7
 80067b4:	080067e7 	.word	0x080067e7
 80067b8:	080067e7 	.word	0x080067e7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3304      	adds	r3, #4
 80067c0:	2101      	movs	r1, #1
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fd66 	bl	8007294 <RCCEx_PLL2_Config>
 80067c8:	4603      	mov	r3, r0
 80067ca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80067cc:	e00c      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3324      	adds	r3, #36	; 0x24
 80067d2:	2101      	movs	r1, #1
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fe0f 	bl	80073f8 <RCCEx_PLL3_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80067de:	e003      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	75fb      	strb	r3, [r7, #23]
      break;
 80067e4:	e000      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80067e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d110      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	f023 0207 	bic.w	r2, r3, #7
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067fc:	4902      	ldr	r1, [pc, #8]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	658b      	str	r3, [r1, #88]	; 0x58
 8006802:	e007      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006804:	58024800 	.word	0x58024800
 8006808:	58024400 	.word	0x58024400
 800680c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006810:	7dfb      	ldrb	r3, [r7, #23]
 8006812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b00      	cmp	r3, #0
 800681e:	d04b      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800682a:	d02e      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800682c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006830:	d828      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006836:	d02a      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683c:	d822      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800683e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006842:	d026      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006844:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006848:	d81c      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800684a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800684e:	d010      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006854:	d816      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01d      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800685a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800685e:	d111      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3304      	adds	r3, #4
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fd14 	bl	8007294 <RCCEx_PLL2_Config>
 800686c:	4603      	mov	r3, r0
 800686e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006870:	e012      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3324      	adds	r3, #36	; 0x24
 8006876:	2102      	movs	r1, #2
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fdbd 	bl	80073f8 <RCCEx_PLL3_Config>
 800687e:	4603      	mov	r3, r0
 8006880:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006882:	e009      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
      break;
 8006888:	e006      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800688a:	bf00      	nop
 800688c:	e004      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800688e:	bf00      	nop
 8006890:	e002      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006892:	bf00      	nop
 8006894:	e000      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800689e:	4bb2      	ldr	r3, [pc, #712]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ac:	49ae      	ldr	r1, [pc, #696]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	654b      	str	r3, [r1, #84]	; 0x54
 80068b2:	e001      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d04b      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068ce:	d02e      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80068d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068d4:	d828      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068da:	d02a      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80068dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e0:	d822      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80068e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068e6:	d026      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80068e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ec:	d81c      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80068ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f2:	d010      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80068f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f8:	d816      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d01d      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80068fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006902:	d111      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3304      	adds	r3, #4
 8006908:	2100      	movs	r1, #0
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fcc2 	bl	8007294 <RCCEx_PLL2_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006914:	e012      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3324      	adds	r3, #36	; 0x24
 800691a:	2102      	movs	r1, #2
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fd6b 	bl	80073f8 <RCCEx_PLL3_Config>
 8006922:	4603      	mov	r3, r0
 8006924:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006926:	e009      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	75fb      	strb	r3, [r7, #23]
      break;
 800692c:	e006      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800692e:	bf00      	nop
 8006930:	e004      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006932:	bf00      	nop
 8006934:	e002      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800693a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006942:	4b89      	ldr	r3, [pc, #548]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006946:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006950:	4985      	ldr	r1, [pc, #532]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006952:	4313      	orrs	r3, r2
 8006954:	658b      	str	r3, [r1, #88]	; 0x58
 8006956:	e001      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b00      	cmp	r3, #0
 8006966:	d04b      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800696e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006972:	d02e      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006974:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006978:	d828      	bhi.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800697a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697e:	d02a      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006984:	d822      	bhi.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006986:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800698a:	d026      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800698c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006990:	d81c      	bhi.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006996:	d010      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800699c:	d816      	bhi.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01d      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80069a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a6:	d111      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3304      	adds	r3, #4
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fc70 	bl	8007294 <RCCEx_PLL2_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80069b8:	e012      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3324      	adds	r3, #36	; 0x24
 80069be:	2102      	movs	r1, #2
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fd19 	bl	80073f8 <RCCEx_PLL3_Config>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80069ca:	e009      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	e006      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80069d2:	bf00      	nop
 80069d4:	e004      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80069d6:	bf00      	nop
 80069d8:	e002      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80069da:	bf00      	nop
 80069dc:	e000      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80069de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80069e6:	4b60      	ldr	r3, [pc, #384]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069f4:	495c      	ldr	r1, [pc, #368]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	658b      	str	r3, [r1, #88]	; 0x58
 80069fa:	e001      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d018      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a14:	d10a      	bne.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3324      	adds	r3, #36	; 0x24
 8006a1a:	2102      	movs	r1, #2
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fceb 	bl	80073f8 <RCCEx_PLL3_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006a2c:	4b4e      	ldr	r3, [pc, #312]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a38:	494b      	ldr	r1, [pc, #300]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d01a      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a54:	d10a      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3324      	adds	r3, #36	; 0x24
 8006a5a:	2102      	movs	r1, #2
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 fccb 	bl	80073f8 <RCCEx_PLL3_Config>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a6c:	4b3e      	ldr	r3, [pc, #248]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7a:	493b      	ldr	r1, [pc, #236]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d034      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a96:	d01d      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006a98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a9c:	d817      	bhi.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa6:	d009      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006aa8:	e011      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3304      	adds	r3, #4
 8006aae:	2100      	movs	r1, #0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fbef 	bl	8007294 <RCCEx_PLL2_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006aba:	e00c      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3324      	adds	r3, #36	; 0x24
 8006ac0:	2102      	movs	r1, #2
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fc98 	bl	80073f8 <RCCEx_PLL3_Config>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006acc:	e003      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006adc:	4b22      	ldr	r3, [pc, #136]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aea:	491f      	ldr	r1, [pc, #124]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	658b      	str	r3, [r1, #88]	; 0x58
 8006af0:	e001      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
 8006af4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d036      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b0c:	d01c      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006b0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b12:	d816      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b18:	d003      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006b1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b1e:	d007      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006b20:	e00f      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b22:	4b11      	ldr	r3, [pc, #68]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	4a10      	ldr	r2, [pc, #64]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006b2e:	e00c      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3324      	adds	r3, #36	; 0x24
 8006b34:	2101      	movs	r1, #1
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fc5e 	bl	80073f8 <RCCEx_PLL3_Config>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006b40:	e003      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	75fb      	strb	r3, [r7, #23]
      break;
 8006b46:	e000      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10d      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b5e:	4902      	ldr	r1, [pc, #8]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	654b      	str	r3, [r1, #84]	; 0x54
 8006b64:	e004      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8006b66:	bf00      	nop
 8006b68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
 8006b6e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d029      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b88:	d007      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006b8a:	e00f      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b8c:	4b61      	ldr	r3, [pc, #388]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	4a60      	ldr	r2, [pc, #384]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006b98:	e00b      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	2102      	movs	r1, #2
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 fb77 	bl	8007294 <RCCEx_PLL2_Config>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006baa:	e002      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d109      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006bb8:	4b56      	ldr	r3, [pc, #344]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc4:	4953      	ldr	r1, [pc, #332]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006bca:	e001      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00a      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3324      	adds	r3, #36	; 0x24
 8006be0:	2102      	movs	r1, #2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fc08 	bl	80073f8 <RCCEx_PLL3_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d030      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c06:	d017      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006c08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c0c:	d811      	bhi.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c12:	d013      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c18:	d80b      	bhi.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d010      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c22:	d106      	bne.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c24:	4b3b      	ldr	r3, [pc, #236]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	4a3a      	ldr	r2, [pc, #232]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006c30:	e007      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	75fb      	strb	r3, [r7, #23]
      break;
 8006c36:	e004      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006c38:	bf00      	nop
 8006c3a:	e002      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006c3c:	bf00      	nop
 8006c3e:	e000      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d109      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c48:	4b32      	ldr	r3, [pc, #200]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c54:	492f      	ldr	r1, [pc, #188]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	654b      	str	r3, [r1, #84]	; 0x54
 8006c5a:	e001      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d008      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c6c:	4b29      	ldr	r3, [pc, #164]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c78:	4926      	ldr	r1, [pc, #152]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d008      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c8a:	4b22      	ldr	r3, [pc, #136]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c96:	491f      	ldr	r1, [pc, #124]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00d      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ca8:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006cae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cb2:	6113      	str	r3, [r2, #16]
 8006cb4:	4b17      	ldr	r3, [pc, #92]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cbe:	4915      	ldr	r1, [pc, #84]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	da08      	bge.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ccc:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd8:	490e      	ldr	r1, [pc, #56]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d009      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cea:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cf8:	4906      	ldr	r1, [pc, #24]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006cfe:	7dbb      	ldrb	r3, [r7, #22]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e000      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	58024400 	.word	0x58024400

08006d18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006d1c:	f7ff f864 	bl	8005de8 <HAL_RCC_GetHCLKFreq>
 8006d20:	4602      	mov	r2, r0
 8006d22:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	091b      	lsrs	r3, r3, #4
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	4904      	ldr	r1, [pc, #16]	; (8006d40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006d2e:	5ccb      	ldrb	r3, [r1, r3]
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	58024400 	.word	0x58024400
 8006d40:	0801c70c 	.word	0x0801c70c

08006d44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b089      	sub	sp, #36	; 0x24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d4c:	4ba1      	ldr	r3, [pc, #644]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d50:	f003 0303 	and.w	r3, r3, #3
 8006d54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006d56:	4b9f      	ldr	r3, [pc, #636]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	0b1b      	lsrs	r3, r3, #12
 8006d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006d62:	4b9c      	ldr	r3, [pc, #624]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	091b      	lsrs	r3, r3, #4
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006d6e:	4b99      	ldr	r3, [pc, #612]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d72:	08db      	lsrs	r3, r3, #3
 8006d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	fb02 f303 	mul.w	r3, r2, r3
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8111 	beq.w	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	f000 8083 	beq.w	8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	f200 80a1 	bhi.w	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d056      	beq.n	8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006dae:	e099      	b.n	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006db0:	4b88      	ldr	r3, [pc, #544]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d02d      	beq.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dbc:	4b85      	ldr	r3, [pc, #532]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	08db      	lsrs	r3, r3, #3
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	4a84      	ldr	r2, [pc, #528]	; (8006fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dcc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	ee07 3a90 	vmov	s15, r3
 8006dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de6:	4b7b      	ldr	r3, [pc, #492]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e16:	e087      	b.n	8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2a:	4b6a      	ldr	r3, [pc, #424]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e5a:	e065      	b.n	8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e6e:	4b59      	ldr	r3, [pc, #356]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e9e:	e043      	b.n	8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb2:	4b48      	ldr	r3, [pc, #288]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ec6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ee2:	e021      	b.n	8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef6:	4b37      	ldr	r3, [pc, #220]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006f28:	4b2a      	ldr	r3, [pc, #168]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	0a5b      	lsrs	r3, r3, #9
 8006f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f4e:	ee17 2a90 	vmov	r2, s15
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006f56:	4b1f      	ldr	r3, [pc, #124]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	0c1b      	lsrs	r3, r3, #16
 8006f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f60:	ee07 3a90 	vmov	s15, r3
 8006f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f7c:	ee17 2a90 	vmov	r2, s15
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006f84:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	0e1b      	lsrs	r3, r3, #24
 8006f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006faa:	ee17 2a90 	vmov	r2, s15
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	609a      	str	r2, [r3, #8]
}
 8006fc6:	bf00      	nop
 8006fc8:	3724      	adds	r7, #36	; 0x24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	58024400 	.word	0x58024400
 8006fd8:	03d09000 	.word	0x03d09000
 8006fdc:	46000000 	.word	0x46000000
 8006fe0:	4c742400 	.word	0x4c742400
 8006fe4:	4a742400 	.word	0x4a742400
 8006fe8:	4af42400 	.word	0x4af42400

08006fec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b089      	sub	sp, #36	; 0x24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ff4:	4ba1      	ldr	r3, [pc, #644]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	f003 0303 	and.w	r3, r3, #3
 8006ffc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ffe:	4b9f      	ldr	r3, [pc, #636]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	0d1b      	lsrs	r3, r3, #20
 8007004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007008:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800700a:	4b9c      	ldr	r3, [pc, #624]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	0a1b      	lsrs	r3, r3, #8
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007016:	4b99      	ldr	r3, [pc, #612]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701a:	08db      	lsrs	r3, r3, #3
 800701c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	fb02 f303 	mul.w	r3, r2, r3
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 8111 	beq.w	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b02      	cmp	r3, #2
 800703e:	f000 8083 	beq.w	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b02      	cmp	r3, #2
 8007046:	f200 80a1 	bhi.w	800718c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d056      	beq.n	8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007056:	e099      	b.n	800718c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007058:	4b88      	ldr	r3, [pc, #544]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b00      	cmp	r3, #0
 8007062:	d02d      	beq.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007064:	4b85      	ldr	r3, [pc, #532]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	08db      	lsrs	r3, r3, #3
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	4a84      	ldr	r2, [pc, #528]	; (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007070:	fa22 f303 	lsr.w	r3, r2, r3
 8007074:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	ee07 3a90 	vmov	s15, r3
 800707c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708e:	4b7b      	ldr	r3, [pc, #492]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709e:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070be:	e087      	b.n	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80070ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d2:	4b6a      	ldr	r3, [pc, #424]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007102:	e065      	b.n	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007116:	4b59      	ldr	r3, [pc, #356]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007126:	ed97 6a03 	vldr	s12, [r7, #12]
 800712a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800712e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007146:	e043      	b.n	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715a:	4b48      	ldr	r3, [pc, #288]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716a:	ed97 6a03 	vldr	s12, [r7, #12]
 800716e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800718a:	e021      	b.n	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800719a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719e:	4b37      	ldr	r3, [pc, #220]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80071d0:	4b2a      	ldr	r3, [pc, #168]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	0a5b      	lsrs	r3, r3, #9
 80071d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f6:	ee17 2a90 	vmov	r2, s15
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80071fe:	4b1f      	ldr	r3, [pc, #124]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	0c1b      	lsrs	r3, r3, #16
 8007204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007208:	ee07 3a90 	vmov	s15, r3
 800720c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007218:	edd7 6a07 	vldr	s13, [r7, #28]
 800721c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007224:	ee17 2a90 	vmov	r2, s15
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800722c:	4b13      	ldr	r3, [pc, #76]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	0e1b      	lsrs	r3, r3, #24
 8007232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007246:	edd7 6a07 	vldr	s13, [r7, #28]
 800724a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007252:	ee17 2a90 	vmov	r2, s15
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800725a:	e008      	b.n	800726e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	609a      	str	r2, [r3, #8]
}
 800726e:	bf00      	nop
 8007270:	3724      	adds	r7, #36	; 0x24
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	58024400 	.word	0x58024400
 8007280:	03d09000 	.word	0x03d09000
 8007284:	46000000 	.word	0x46000000
 8007288:	4c742400 	.word	0x4c742400
 800728c:	4a742400 	.word	0x4a742400
 8007290:	4af42400 	.word	0x4af42400

08007294 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072a2:	4b53      	ldr	r3, [pc, #332]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d101      	bne.n	80072b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e099      	b.n	80073e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072b2:	4b4f      	ldr	r3, [pc, #316]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a4e      	ldr	r2, [pc, #312]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072be:	f7fa ffdb 	bl	8002278 <HAL_GetTick>
 80072c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072c4:	e008      	b.n	80072d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80072c6:	f7fa ffd7 	bl	8002278 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d901      	bls.n	80072d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e086      	b.n	80073e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072d8:	4b45      	ldr	r3, [pc, #276]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1f0      	bne.n	80072c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072e4:	4b42      	ldr	r3, [pc, #264]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	031b      	lsls	r3, r3, #12
 80072f2:	493f      	ldr	r1, [pc, #252]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	628b      	str	r3, [r1, #40]	; 0x28
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	3b01      	subs	r3, #1
 8007308:	025b      	lsls	r3, r3, #9
 800730a:	b29b      	uxth	r3, r3
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	3b01      	subs	r3, #1
 8007314:	041b      	lsls	r3, r3, #16
 8007316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	3b01      	subs	r3, #1
 8007322:	061b      	lsls	r3, r3, #24
 8007324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007328:	4931      	ldr	r1, [pc, #196]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800732a:	4313      	orrs	r3, r2
 800732c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800732e:	4b30      	ldr	r3, [pc, #192]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	492d      	ldr	r1, [pc, #180]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800733c:	4313      	orrs	r3, r2
 800733e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	f023 0220 	bic.w	r2, r3, #32
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	4928      	ldr	r1, [pc, #160]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800734e:	4313      	orrs	r3, r2
 8007350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007352:	4b27      	ldr	r3, [pc, #156]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	4a26      	ldr	r2, [pc, #152]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007358:	f023 0310 	bic.w	r3, r3, #16
 800735c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007362:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <RCCEx_PLL2_Config+0x160>)
 8007364:	4013      	ands	r3, r2
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	69d2      	ldr	r2, [r2, #28]
 800736a:	00d2      	lsls	r2, r2, #3
 800736c:	4920      	ldr	r1, [pc, #128]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800736e:	4313      	orrs	r3, r2
 8007370:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007372:	4b1f      	ldr	r3, [pc, #124]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	4a1e      	ldr	r2, [pc, #120]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007378:	f043 0310 	orr.w	r3, r3, #16
 800737c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007384:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	4a19      	ldr	r2, [pc, #100]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800738a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800738e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007390:	e00f      	b.n	80073b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d106      	bne.n	80073a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800739e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073a4:	e005      	b.n	80073b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073aa:	4a11      	ldr	r2, [pc, #68]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073b2:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a0e      	ldr	r2, [pc, #56]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073be:	f7fa ff5b 	bl	8002278 <HAL_GetTick>
 80073c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073c4:	e008      	b.n	80073d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073c6:	f7fa ff57 	bl	8002278 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e006      	b.n	80073e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0f0      	beq.n	80073c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	58024400 	.word	0x58024400
 80073f4:	ffff0007 	.word	0xffff0007

080073f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007406:	4b53      	ldr	r3, [pc, #332]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	2b03      	cmp	r3, #3
 8007410:	d101      	bne.n	8007416 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e099      	b.n	800754a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007416:	4b4f      	ldr	r3, [pc, #316]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a4e      	ldr	r2, [pc, #312]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800741c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007422:	f7fa ff29 	bl	8002278 <HAL_GetTick>
 8007426:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007428:	e008      	b.n	800743c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800742a:	f7fa ff25 	bl	8002278 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e086      	b.n	800754a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800743c:	4b45      	ldr	r3, [pc, #276]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1f0      	bne.n	800742a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007448:	4b42      	ldr	r3, [pc, #264]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800744a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	051b      	lsls	r3, r3, #20
 8007456:	493f      	ldr	r1, [pc, #252]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007458:	4313      	orrs	r3, r2
 800745a:	628b      	str	r3, [r1, #40]	; 0x28
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	3b01      	subs	r3, #1
 8007462:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	3b01      	subs	r3, #1
 800746c:	025b      	lsls	r3, r3, #9
 800746e:	b29b      	uxth	r3, r3
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	3b01      	subs	r3, #1
 8007478:	041b      	lsls	r3, r3, #16
 800747a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	3b01      	subs	r3, #1
 8007486:	061b      	lsls	r3, r3, #24
 8007488:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800748c:	4931      	ldr	r1, [pc, #196]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800748e:	4313      	orrs	r3, r2
 8007490:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007492:	4b30      	ldr	r3, [pc, #192]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	492d      	ldr	r1, [pc, #180]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80074a4:	4b2b      	ldr	r3, [pc, #172]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	4928      	ldr	r1, [pc, #160]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074b6:	4b27      	ldr	r3, [pc, #156]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	4a26      	ldr	r2, [pc, #152]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074c2:	4b24      	ldr	r3, [pc, #144]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074c6:	4b24      	ldr	r3, [pc, #144]	; (8007558 <RCCEx_PLL3_Config+0x160>)
 80074c8:	4013      	ands	r3, r2
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	69d2      	ldr	r2, [r2, #28]
 80074ce:	00d2      	lsls	r2, r2, #3
 80074d0:	4920      	ldr	r1, [pc, #128]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80074d6:	4b1f      	ldr	r3, [pc, #124]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074da:	4a1e      	ldr	r2, [pc, #120]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d106      	bne.n	80074f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074e8:	4b1a      	ldr	r3, [pc, #104]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	4a19      	ldr	r2, [pc, #100]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074f4:	e00f      	b.n	8007516 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d106      	bne.n	800750a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80074fc:	4b15      	ldr	r3, [pc, #84]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	4a14      	ldr	r2, [pc, #80]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007502:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007506:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007508:	e005      	b.n	8007516 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800750a:	4b12      	ldr	r3, [pc, #72]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	4a11      	ldr	r2, [pc, #68]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007514:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007516:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a0e      	ldr	r2, [pc, #56]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800751c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007522:	f7fa fea9 	bl	8002278 <HAL_GetTick>
 8007526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007528:	e008      	b.n	800753c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800752a:	f7fa fea5 	bl	8002278 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e006      	b.n	800754a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800753c:	4b05      	ldr	r3, [pc, #20]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0f0      	beq.n	800752a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	58024400 	.word	0x58024400
 8007558:	ffff0007 	.word	0xffff0007

0800755c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e0f1      	b.n	8007752 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a78      	ldr	r2, [pc, #480]	; (800775c <HAL_SPI_Init+0x200>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00f      	beq.n	800759e <HAL_SPI_Init+0x42>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a77      	ldr	r2, [pc, #476]	; (8007760 <HAL_SPI_Init+0x204>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00a      	beq.n	800759e <HAL_SPI_Init+0x42>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a75      	ldr	r2, [pc, #468]	; (8007764 <HAL_SPI_Init+0x208>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d005      	beq.n	800759e <HAL_SPI_Init+0x42>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	2b0f      	cmp	r3, #15
 8007598:	d901      	bls.n	800759e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e0d9      	b.n	8007752 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fba2 	bl	8007ce8 <SPI_GetPacketSize>
 80075a4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a6c      	ldr	r2, [pc, #432]	; (800775c <HAL_SPI_Init+0x200>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00c      	beq.n	80075ca <HAL_SPI_Init+0x6e>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a6a      	ldr	r2, [pc, #424]	; (8007760 <HAL_SPI_Init+0x204>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d007      	beq.n	80075ca <HAL_SPI_Init+0x6e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a69      	ldr	r2, [pc, #420]	; (8007764 <HAL_SPI_Init+0x208>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d002      	beq.n	80075ca <HAL_SPI_Init+0x6e>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b08      	cmp	r3, #8
 80075c8:	d811      	bhi.n	80075ee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075ce:	4a63      	ldr	r2, [pc, #396]	; (800775c <HAL_SPI_Init+0x200>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d009      	beq.n	80075e8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a61      	ldr	r2, [pc, #388]	; (8007760 <HAL_SPI_Init+0x204>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d004      	beq.n	80075e8 <HAL_SPI_Init+0x8c>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a60      	ldr	r2, [pc, #384]	; (8007764 <HAL_SPI_Init+0x208>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d104      	bne.n	80075f2 <HAL_SPI_Init+0x96>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b10      	cmp	r3, #16
 80075ec:	d901      	bls.n	80075f2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e0af      	b.n	8007752 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fa f8d0 	bl	80017ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0201 	bic.w	r2, r2, #1
 8007622:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800762e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007638:	d119      	bne.n	800766e <HAL_SPI_Init+0x112>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007642:	d103      	bne.n	800764c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007648:	2b00      	cmp	r3, #0
 800764a:	d008      	beq.n	800765e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10c      	bne.n	800766e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800765c:	d107      	bne.n	800766e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800766c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69da      	ldr	r2, [r3, #28]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	431a      	orrs	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007680:	ea42 0103 	orr.w	r1, r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	431a      	orrs	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	431a      	orrs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ce:	ea42 0103 	orr.w	r1, r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d113      	bne.n	800770e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800770c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 0201 	bic.w	r2, r2, #1
 800771c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	40013000 	.word	0x40013000
 8007760:	40003800 	.word	0x40003800
 8007764:	40003c00 	.word	0x40003c00

08007768 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08a      	sub	sp, #40	; 0x28
 800776c:	af02      	add	r7, sp, #8
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3320      	adds	r3, #32
 800777e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <HAL_SPI_Transmit+0x2a>
 800778e:	2302      	movs	r3, #2
 8007790:	e1d7      	b.n	8007b42 <HAL_SPI_Transmit+0x3da>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800779a:	f7fa fd6d 	bl	8002278 <HAL_GetTick>
 800779e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d007      	beq.n	80077bc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80077ac:	2302      	movs	r3, #2
 80077ae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80077b8:	7efb      	ldrb	r3, [r7, #27]
 80077ba:	e1c2      	b.n	8007b42 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <HAL_SPI_Transmit+0x60>
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d107      	bne.n	80077d8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80077d4:	7efb      	ldrb	r3, [r7, #27]
 80077d6:	e1b4      	b.n	8007b42 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2203      	movs	r2, #3
 80077dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	88fa      	ldrh	r2, [r7, #6]
 80077f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	88fa      	ldrh	r2, [r7, #6]
 80077fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007828:	d107      	bne.n	800783a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007838:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	4b96      	ldr	r3, [pc, #600]	; (8007a9c <HAL_SPI_Transmit+0x334>)
 8007842:	4013      	ands	r3, r2
 8007844:	88f9      	ldrh	r1, [r7, #6]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	6812      	ldr	r2, [r2, #0]
 800784a:	430b      	orrs	r3, r1
 800784c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f042 0201 	orr.w	r2, r2, #1
 800785c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007866:	d107      	bne.n	8007878 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007876:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	2b0f      	cmp	r3, #15
 800787e:	d947      	bls.n	8007910 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007880:	e03f      	b.n	8007902 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b02      	cmp	r3, #2
 800788e:	d114      	bne.n	80078ba <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6812      	ldr	r2, [r2, #0]
 800789a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a0:	1d1a      	adds	r2, r3, #4
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80078b8:	e023      	b.n	8007902 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078ba:	f7fa fcdd 	bl	8002278 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d803      	bhi.n	80078d2 <HAL_SPI_Transmit+0x16a>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d102      	bne.n	80078d8 <HAL_SPI_Transmit+0x170>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d114      	bne.n	8007902 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 f937 	bl	8007b4c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e11f      	b.n	8007b42 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1b9      	bne.n	8007882 <HAL_SPI_Transmit+0x11a>
 800790e:	e0f2      	b.n	8007af6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	2b07      	cmp	r3, #7
 8007916:	f240 80e7 	bls.w	8007ae8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800791a:	e05d      	b.n	80079d8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b02      	cmp	r3, #2
 8007928:	d132      	bne.n	8007990 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007930:	b29b      	uxth	r3, r3
 8007932:	2b01      	cmp	r3, #1
 8007934:	d918      	bls.n	8007968 <HAL_SPI_Transmit+0x200>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d014      	beq.n	8007968 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6812      	ldr	r2, [r2, #0]
 8007948:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794e:	1d1a      	adds	r2, r3, #4
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b02      	subs	r3, #2
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007966:	e037      	b.n	80079d8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796c:	881a      	ldrh	r2, [r3, #0]
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007976:	1c9a      	adds	r2, r3, #2
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007982:	b29b      	uxth	r3, r3
 8007984:	3b01      	subs	r3, #1
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800798e:	e023      	b.n	80079d8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007990:	f7fa fc72 	bl	8002278 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d803      	bhi.n	80079a8 <HAL_SPI_Transmit+0x240>
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a6:	d102      	bne.n	80079ae <HAL_SPI_Transmit+0x246>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d114      	bne.n	80079d8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 f8cc 	bl	8007b4c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e0b4      	b.n	8007b42 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d19b      	bne.n	800791c <HAL_SPI_Transmit+0x1b4>
 80079e4:	e087      	b.n	8007af6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d155      	bne.n	8007aa0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d918      	bls.n	8007a32 <HAL_SPI_Transmit+0x2ca>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a04:	2b40      	cmp	r3, #64	; 0x40
 8007a06:	d914      	bls.n	8007a32 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6812      	ldr	r2, [r2, #0]
 8007a12:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a18:	1d1a      	adds	r2, r3, #4
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	3b04      	subs	r3, #4
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007a30:	e05a      	b.n	8007ae8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d917      	bls.n	8007a6e <HAL_SPI_Transmit+0x306>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d013      	beq.n	8007a6e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a4a:	881a      	ldrh	r2, [r3, #0]
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a54:	1c9a      	adds	r2, r3, #2
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b02      	subs	r3, #2
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007a6c:	e03c      	b.n	8007ae8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3320      	adds	r3, #32
 8007a78:	7812      	ldrb	r2, [r2, #0]
 8007a7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007a98:	e026      	b.n	8007ae8 <HAL_SPI_Transmit+0x380>
 8007a9a:	bf00      	nop
 8007a9c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aa0:	f7fa fbea 	bl	8002278 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d803      	bhi.n	8007ab8 <HAL_SPI_Transmit+0x350>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab6:	d102      	bne.n	8007abe <HAL_SPI_Transmit+0x356>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d114      	bne.n	8007ae8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f844 	bl	8007b4c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ad2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e02c      	b.n	8007b42 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f47f af78 	bne.w	80079e6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2200      	movs	r2, #0
 8007afe:	2108      	movs	r1, #8
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f8c3 	bl	8007c8c <SPI_WaitOnFlagUntilTimeout>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d007      	beq.n	8007b1c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b12:	f043 0220 	orr.w	r2, r3, #32
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f815 	bl	8007b4c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e000      	b.n	8007b42 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007b40:	7efb      	ldrb	r3, [r7, #27]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3720      	adds	r7, #32
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop

08007b4c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699a      	ldr	r2, [r3, #24]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0208 	orr.w	r2, r2, #8
 8007b6a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	699a      	ldr	r2, [r3, #24]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0210 	orr.w	r2, r2, #16
 8007b7a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 0201 	bic.w	r2, r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6919      	ldr	r1, [r3, #16]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4b3c      	ldr	r3, [pc, #240]	; (8007c88 <SPI_CloseTransfer+0x13c>)
 8007b98:	400b      	ands	r3, r1
 8007b9a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007baa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d014      	beq.n	8007be2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00f      	beq.n	8007be2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	699a      	ldr	r2, [r3, #24]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0220 	orr.w	r2, r2, #32
 8007be0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d014      	beq.n	8007c18 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00f      	beq.n	8007c18 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bfe:	f043 0204 	orr.w	r2, r3, #4
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699a      	ldr	r2, [r3, #24]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c16:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00f      	beq.n	8007c42 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c28:	f043 0201 	orr.w	r2, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	699a      	ldr	r2, [r3, #24]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c40:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00f      	beq.n	8007c6c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c52:	f043 0208 	orr.w	r2, r3, #8
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c6a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007c7c:	bf00      	nop
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	fffffc90 	.word	0xfffffc90

08007c8c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	603b      	str	r3, [r7, #0]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007c9c:	e010      	b.n	8007cc0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c9e:	f7fa faeb 	bl	8002278 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d803      	bhi.n	8007cb6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb4:	d102      	bne.n	8007cbc <SPI_WaitOnFlagUntilTimeout+0x30>
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e00f      	b.n	8007ce0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	695a      	ldr	r2, [r3, #20]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	bf0c      	ite	eq
 8007cd0:	2301      	moveq	r3, #1
 8007cd2:	2300      	movne	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d0df      	beq.n	8007c9e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf4:	095b      	lsrs	r3, r3, #5
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	3307      	adds	r3, #7
 8007d06:	08db      	lsrs	r3, r3, #3
 8007d08:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e049      	b.n	8007dc4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d106      	bne.n	8007d4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7f9 ffe1 	bl	8001d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f000 fa81 	bl	8008264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d001      	beq.n	8007de4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e056      	b.n	8007e92 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a2b      	ldr	r2, [pc, #172]	; (8007ea0 <HAL_TIM_Base_Start+0xd4>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d02c      	beq.n	8007e50 <HAL_TIM_Base_Start+0x84>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfe:	d027      	beq.n	8007e50 <HAL_TIM_Base_Start+0x84>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a27      	ldr	r2, [pc, #156]	; (8007ea4 <HAL_TIM_Base_Start+0xd8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d022      	beq.n	8007e50 <HAL_TIM_Base_Start+0x84>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a26      	ldr	r2, [pc, #152]	; (8007ea8 <HAL_TIM_Base_Start+0xdc>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d01d      	beq.n	8007e50 <HAL_TIM_Base_Start+0x84>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a24      	ldr	r2, [pc, #144]	; (8007eac <HAL_TIM_Base_Start+0xe0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d018      	beq.n	8007e50 <HAL_TIM_Base_Start+0x84>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a23      	ldr	r2, [pc, #140]	; (8007eb0 <HAL_TIM_Base_Start+0xe4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d013      	beq.n	8007e50 <HAL_TIM_Base_Start+0x84>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a21      	ldr	r2, [pc, #132]	; (8007eb4 <HAL_TIM_Base_Start+0xe8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00e      	beq.n	8007e50 <HAL_TIM_Base_Start+0x84>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a20      	ldr	r2, [pc, #128]	; (8007eb8 <HAL_TIM_Base_Start+0xec>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d009      	beq.n	8007e50 <HAL_TIM_Base_Start+0x84>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a1e      	ldr	r2, [pc, #120]	; (8007ebc <HAL_TIM_Base_Start+0xf0>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d004      	beq.n	8007e50 <HAL_TIM_Base_Start+0x84>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1d      	ldr	r2, [pc, #116]	; (8007ec0 <HAL_TIM_Base_Start+0xf4>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d115      	bne.n	8007e7c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	4b1b      	ldr	r3, [pc, #108]	; (8007ec4 <HAL_TIM_Base_Start+0xf8>)
 8007e58:	4013      	ands	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2b06      	cmp	r3, #6
 8007e60:	d015      	beq.n	8007e8e <HAL_TIM_Base_Start+0xc2>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e68:	d011      	beq.n	8007e8e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f042 0201 	orr.w	r2, r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e7a:	e008      	b.n	8007e8e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0201 	orr.w	r2, r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e000      	b.n	8007e90 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40000400 	.word	0x40000400
 8007ea8:	40000800 	.word	0x40000800
 8007eac:	40000c00 	.word	0x40000c00
 8007eb0:	40010400 	.word	0x40010400
 8007eb4:	40001800 	.word	0x40001800
 8007eb8:	40014000 	.word	0x40014000
 8007ebc:	4000e000 	.word	0x4000e000
 8007ec0:	4000e400 	.word	0x4000e400
 8007ec4:	00010007 	.word	0x00010007

08007ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d001      	beq.n	8007ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e05e      	b.n	8007f9e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0201 	orr.w	r2, r2, #1
 8007ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a2b      	ldr	r2, [pc, #172]	; (8007fac <HAL_TIM_Base_Start_IT+0xe4>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d02c      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x94>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f0a:	d027      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x94>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a27      	ldr	r2, [pc, #156]	; (8007fb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d022      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x94>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a26      	ldr	r2, [pc, #152]	; (8007fb4 <HAL_TIM_Base_Start_IT+0xec>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d01d      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x94>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a24      	ldr	r2, [pc, #144]	; (8007fb8 <HAL_TIM_Base_Start_IT+0xf0>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d018      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x94>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a23      	ldr	r2, [pc, #140]	; (8007fbc <HAL_TIM_Base_Start_IT+0xf4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d013      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x94>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <HAL_TIM_Base_Start_IT+0xf8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00e      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x94>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a20      	ldr	r2, [pc, #128]	; (8007fc4 <HAL_TIM_Base_Start_IT+0xfc>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d009      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x94>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a1e      	ldr	r2, [pc, #120]	; (8007fc8 <HAL_TIM_Base_Start_IT+0x100>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d004      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x94>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a1d      	ldr	r2, [pc, #116]	; (8007fcc <HAL_TIM_Base_Start_IT+0x104>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d115      	bne.n	8007f88 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	4b1b      	ldr	r3, [pc, #108]	; (8007fd0 <HAL_TIM_Base_Start_IT+0x108>)
 8007f64:	4013      	ands	r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b06      	cmp	r3, #6
 8007f6c:	d015      	beq.n	8007f9a <HAL_TIM_Base_Start_IT+0xd2>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f74:	d011      	beq.n	8007f9a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f042 0201 	orr.w	r2, r2, #1
 8007f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f86:	e008      	b.n	8007f9a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0201 	orr.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	e000      	b.n	8007f9c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40010000 	.word	0x40010000
 8007fb0:	40000400 	.word	0x40000400
 8007fb4:	40000800 	.word	0x40000800
 8007fb8:	40000c00 	.word	0x40000c00
 8007fbc:	40010400 	.word	0x40010400
 8007fc0:	40001800 	.word	0x40001800
 8007fc4:	40014000 	.word	0x40014000
 8007fc8:	4000e000 	.word	0x4000e000
 8007fcc:	4000e400 	.word	0x4000e400
 8007fd0:	00010007 	.word	0x00010007

08007fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d122      	bne.n	8008030 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f003 0302 	and.w	r3, r3, #2
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d11b      	bne.n	8008030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f06f 0202 	mvn.w	r2, #2
 8008000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f905 	bl	8008226 <HAL_TIM_IC_CaptureCallback>
 800801c:	e005      	b.n	800802a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f8f7 	bl	8008212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f908 	bl	800823a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f003 0304 	and.w	r3, r3, #4
 800803a:	2b04      	cmp	r3, #4
 800803c:	d122      	bne.n	8008084 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b04      	cmp	r3, #4
 800804a:	d11b      	bne.n	8008084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0204 	mvn.w	r2, #4
 8008054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2202      	movs	r2, #2
 800805a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f8db 	bl	8008226 <HAL_TIM_IC_CaptureCallback>
 8008070:	e005      	b.n	800807e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f8cd 	bl	8008212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f8de 	bl	800823a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0308 	and.w	r3, r3, #8
 800808e:	2b08      	cmp	r3, #8
 8008090:	d122      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0308 	and.w	r3, r3, #8
 800809c:	2b08      	cmp	r3, #8
 800809e:	d11b      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0208 	mvn.w	r2, #8
 80080a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2204      	movs	r2, #4
 80080ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f8b1 	bl	8008226 <HAL_TIM_IC_CaptureCallback>
 80080c4:	e005      	b.n	80080d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8a3 	bl	8008212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f8b4 	bl	800823a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 0310 	and.w	r3, r3, #16
 80080e2:	2b10      	cmp	r3, #16
 80080e4:	d122      	bne.n	800812c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f003 0310 	and.w	r3, r3, #16
 80080f0:	2b10      	cmp	r3, #16
 80080f2:	d11b      	bne.n	800812c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0210 	mvn.w	r2, #16
 80080fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2208      	movs	r2, #8
 8008102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f887 	bl	8008226 <HAL_TIM_IC_CaptureCallback>
 8008118:	e005      	b.n	8008126 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f879 	bl	8008212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f88a 	bl	800823a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b01      	cmp	r3, #1
 8008138:	d10e      	bne.n	8008158 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b01      	cmp	r3, #1
 8008146:	d107      	bne.n	8008158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f06f 0201 	mvn.w	r2, #1
 8008150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7f9 fabc 	bl	80016d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008162:	2b80      	cmp	r3, #128	; 0x80
 8008164:	d10e      	bne.n	8008184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008170:	2b80      	cmp	r3, #128	; 0x80
 8008172:	d107      	bne.n	8008184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800817c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f9bc 	bl	80084fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008192:	d10e      	bne.n	80081b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819e:	2b80      	cmp	r3, #128	; 0x80
 80081a0:	d107      	bne.n	80081b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80081aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f9af 	bl	8008510 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081bc:	2b40      	cmp	r3, #64	; 0x40
 80081be:	d10e      	bne.n	80081de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	d107      	bne.n	80081de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f838 	bl	800824e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f003 0320 	and.w	r3, r3, #32
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	d10e      	bne.n	800820a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	d107      	bne.n	800820a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f06f 0220 	mvn.w	r2, #32
 8008202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f96f 	bl	80084e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
	...

08008264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a44      	ldr	r2, [pc, #272]	; (8008388 <TIM_Base_SetConfig+0x124>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d013      	beq.n	80082a4 <TIM_Base_SetConfig+0x40>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008282:	d00f      	beq.n	80082a4 <TIM_Base_SetConfig+0x40>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a41      	ldr	r2, [pc, #260]	; (800838c <TIM_Base_SetConfig+0x128>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d00b      	beq.n	80082a4 <TIM_Base_SetConfig+0x40>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a40      	ldr	r2, [pc, #256]	; (8008390 <TIM_Base_SetConfig+0x12c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d007      	beq.n	80082a4 <TIM_Base_SetConfig+0x40>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a3f      	ldr	r2, [pc, #252]	; (8008394 <TIM_Base_SetConfig+0x130>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d003      	beq.n	80082a4 <TIM_Base_SetConfig+0x40>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a3e      	ldr	r2, [pc, #248]	; (8008398 <TIM_Base_SetConfig+0x134>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d108      	bne.n	80082b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a33      	ldr	r2, [pc, #204]	; (8008388 <TIM_Base_SetConfig+0x124>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d027      	beq.n	800830e <TIM_Base_SetConfig+0xaa>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c4:	d023      	beq.n	800830e <TIM_Base_SetConfig+0xaa>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a30      	ldr	r2, [pc, #192]	; (800838c <TIM_Base_SetConfig+0x128>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d01f      	beq.n	800830e <TIM_Base_SetConfig+0xaa>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a2f      	ldr	r2, [pc, #188]	; (8008390 <TIM_Base_SetConfig+0x12c>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d01b      	beq.n	800830e <TIM_Base_SetConfig+0xaa>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a2e      	ldr	r2, [pc, #184]	; (8008394 <TIM_Base_SetConfig+0x130>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d017      	beq.n	800830e <TIM_Base_SetConfig+0xaa>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a2d      	ldr	r2, [pc, #180]	; (8008398 <TIM_Base_SetConfig+0x134>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d013      	beq.n	800830e <TIM_Base_SetConfig+0xaa>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a2c      	ldr	r2, [pc, #176]	; (800839c <TIM_Base_SetConfig+0x138>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d00f      	beq.n	800830e <TIM_Base_SetConfig+0xaa>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a2b      	ldr	r2, [pc, #172]	; (80083a0 <TIM_Base_SetConfig+0x13c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d00b      	beq.n	800830e <TIM_Base_SetConfig+0xaa>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a2a      	ldr	r2, [pc, #168]	; (80083a4 <TIM_Base_SetConfig+0x140>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d007      	beq.n	800830e <TIM_Base_SetConfig+0xaa>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a29      	ldr	r2, [pc, #164]	; (80083a8 <TIM_Base_SetConfig+0x144>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d003      	beq.n	800830e <TIM_Base_SetConfig+0xaa>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a28      	ldr	r2, [pc, #160]	; (80083ac <TIM_Base_SetConfig+0x148>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d108      	bne.n	8008320 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	4313      	orrs	r3, r2
 800831e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a10      	ldr	r2, [pc, #64]	; (8008388 <TIM_Base_SetConfig+0x124>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d00f      	beq.n	800836c <TIM_Base_SetConfig+0x108>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a12      	ldr	r2, [pc, #72]	; (8008398 <TIM_Base_SetConfig+0x134>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d00b      	beq.n	800836c <TIM_Base_SetConfig+0x108>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a11      	ldr	r2, [pc, #68]	; (800839c <TIM_Base_SetConfig+0x138>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d007      	beq.n	800836c <TIM_Base_SetConfig+0x108>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a10      	ldr	r2, [pc, #64]	; (80083a0 <TIM_Base_SetConfig+0x13c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d003      	beq.n	800836c <TIM_Base_SetConfig+0x108>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a0f      	ldr	r2, [pc, #60]	; (80083a4 <TIM_Base_SetConfig+0x140>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d103      	bne.n	8008374 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	691a      	ldr	r2, [r3, #16]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	615a      	str	r2, [r3, #20]
}
 800837a:	bf00      	nop
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	40010000 	.word	0x40010000
 800838c:	40000400 	.word	0x40000400
 8008390:	40000800 	.word	0x40000800
 8008394:	40000c00 	.word	0x40000c00
 8008398:	40010400 	.word	0x40010400
 800839c:	40014000 	.word	0x40014000
 80083a0:	40014400 	.word	0x40014400
 80083a4:	40014800 	.word	0x40014800
 80083a8:	4000e000 	.word	0x4000e000
 80083ac:	4000e400 	.word	0x4000e400

080083b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d101      	bne.n	80083c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e077      	b.n	80084b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a35      	ldr	r2, [pc, #212]	; (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d004      	beq.n	80083fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a34      	ldr	r2, [pc, #208]	; (80084c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d108      	bne.n	800840e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008402:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	4313      	orrs	r3, r2
 800840c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008414:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	4313      	orrs	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a25      	ldr	r2, [pc, #148]	; (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d02c      	beq.n	800848c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800843a:	d027      	beq.n	800848c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a22      	ldr	r2, [pc, #136]	; (80084cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d022      	beq.n	800848c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a21      	ldr	r2, [pc, #132]	; (80084d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d01d      	beq.n	800848c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a1f      	ldr	r2, [pc, #124]	; (80084d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d018      	beq.n	800848c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a1a      	ldr	r2, [pc, #104]	; (80084c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d013      	beq.n	800848c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a1b      	ldr	r2, [pc, #108]	; (80084d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00e      	beq.n	800848c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a1a      	ldr	r2, [pc, #104]	; (80084dc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d009      	beq.n	800848c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a18      	ldr	r2, [pc, #96]	; (80084e0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d004      	beq.n	800848c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a17      	ldr	r2, [pc, #92]	; (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d10c      	bne.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008492:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	4313      	orrs	r3, r2
 800849c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	40010000 	.word	0x40010000
 80084c8:	40010400 	.word	0x40010400
 80084cc:	40000400 	.word	0x40000400
 80084d0:	40000800 	.word	0x40000800
 80084d4:	40000c00 	.word	0x40000c00
 80084d8:	40001800 	.word	0x40001800
 80084dc:	40014000 	.word	0x40014000
 80084e0:	4000e000 	.word	0x4000e000
 80084e4:	4000e400 	.word	0x4000e400

080084e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e042      	b.n	80085bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800853c:	2b00      	cmp	r3, #0
 800853e:	d106      	bne.n	800854e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7f9 fc4d 	bl	8001de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2224      	movs	r2, #36	; 0x24
 8008552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 0201 	bic.w	r2, r2, #1
 8008564:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f82c 	bl	80085c4 <UART_SetConfig>
 800856c:	4603      	mov	r3, r0
 800856e:	2b01      	cmp	r3, #1
 8008570:	d101      	bne.n	8008576 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e022      	b.n	80085bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fe7e 	bl	8009280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f042 0201 	orr.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 ff05 	bl	80093c4 <UART_CheckIdleState>
 80085ba:	4603      	mov	r3, r0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085c4:	b5b0      	push	{r4, r5, r7, lr}
 80085c6:	b08e      	sub	sp, #56	; 0x38
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689a      	ldr	r2, [r3, #8]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	4bbf      	ldr	r3, [pc, #764]	; (80088f0 <UART_SetConfig+0x32c>)
 80085f2:	4013      	ands	r3, r2
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	6812      	ldr	r2, [r2, #0]
 80085f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80085fa:	430b      	orrs	r3, r1
 80085fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68da      	ldr	r2, [r3, #12]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	430a      	orrs	r2, r1
 8008612:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4ab5      	ldr	r2, [pc, #724]	; (80088f4 <UART_SetConfig+0x330>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d004      	beq.n	800862e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800862a:	4313      	orrs	r3, r2
 800862c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689a      	ldr	r2, [r3, #8]
 8008634:	4bb0      	ldr	r3, [pc, #704]	; (80088f8 <UART_SetConfig+0x334>)
 8008636:	4013      	ands	r3, r2
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	6812      	ldr	r2, [r2, #0]
 800863c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800863e:	430b      	orrs	r3, r1
 8008640:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	f023 010f 	bic.w	r1, r3, #15
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	430a      	orrs	r2, r1
 8008656:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4aa7      	ldr	r2, [pc, #668]	; (80088fc <UART_SetConfig+0x338>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d176      	bne.n	8008750 <UART_SetConfig+0x18c>
 8008662:	4ba7      	ldr	r3, [pc, #668]	; (8008900 <UART_SetConfig+0x33c>)
 8008664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800866a:	2b28      	cmp	r3, #40	; 0x28
 800866c:	d86c      	bhi.n	8008748 <UART_SetConfig+0x184>
 800866e:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <UART_SetConfig+0xb0>)
 8008670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008674:	08008719 	.word	0x08008719
 8008678:	08008749 	.word	0x08008749
 800867c:	08008749 	.word	0x08008749
 8008680:	08008749 	.word	0x08008749
 8008684:	08008749 	.word	0x08008749
 8008688:	08008749 	.word	0x08008749
 800868c:	08008749 	.word	0x08008749
 8008690:	08008749 	.word	0x08008749
 8008694:	08008721 	.word	0x08008721
 8008698:	08008749 	.word	0x08008749
 800869c:	08008749 	.word	0x08008749
 80086a0:	08008749 	.word	0x08008749
 80086a4:	08008749 	.word	0x08008749
 80086a8:	08008749 	.word	0x08008749
 80086ac:	08008749 	.word	0x08008749
 80086b0:	08008749 	.word	0x08008749
 80086b4:	08008729 	.word	0x08008729
 80086b8:	08008749 	.word	0x08008749
 80086bc:	08008749 	.word	0x08008749
 80086c0:	08008749 	.word	0x08008749
 80086c4:	08008749 	.word	0x08008749
 80086c8:	08008749 	.word	0x08008749
 80086cc:	08008749 	.word	0x08008749
 80086d0:	08008749 	.word	0x08008749
 80086d4:	08008731 	.word	0x08008731
 80086d8:	08008749 	.word	0x08008749
 80086dc:	08008749 	.word	0x08008749
 80086e0:	08008749 	.word	0x08008749
 80086e4:	08008749 	.word	0x08008749
 80086e8:	08008749 	.word	0x08008749
 80086ec:	08008749 	.word	0x08008749
 80086f0:	08008749 	.word	0x08008749
 80086f4:	08008739 	.word	0x08008739
 80086f8:	08008749 	.word	0x08008749
 80086fc:	08008749 	.word	0x08008749
 8008700:	08008749 	.word	0x08008749
 8008704:	08008749 	.word	0x08008749
 8008708:	08008749 	.word	0x08008749
 800870c:	08008749 	.word	0x08008749
 8008710:	08008749 	.word	0x08008749
 8008714:	08008741 	.word	0x08008741
 8008718:	2301      	movs	r3, #1
 800871a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800871e:	e326      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008720:	2304      	movs	r3, #4
 8008722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008726:	e322      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008728:	2308      	movs	r3, #8
 800872a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800872e:	e31e      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008730:	2310      	movs	r3, #16
 8008732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008736:	e31a      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008738:	2320      	movs	r3, #32
 800873a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800873e:	e316      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008740:	2340      	movs	r3, #64	; 0x40
 8008742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008746:	e312      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008748:	2380      	movs	r3, #128	; 0x80
 800874a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800874e:	e30e      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a6b      	ldr	r2, [pc, #428]	; (8008904 <UART_SetConfig+0x340>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d130      	bne.n	80087bc <UART_SetConfig+0x1f8>
 800875a:	4b69      	ldr	r3, [pc, #420]	; (8008900 <UART_SetConfig+0x33c>)
 800875c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875e:	f003 0307 	and.w	r3, r3, #7
 8008762:	2b05      	cmp	r3, #5
 8008764:	d826      	bhi.n	80087b4 <UART_SetConfig+0x1f0>
 8008766:	a201      	add	r2, pc, #4	; (adr r2, 800876c <UART_SetConfig+0x1a8>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	08008785 	.word	0x08008785
 8008770:	0800878d 	.word	0x0800878d
 8008774:	08008795 	.word	0x08008795
 8008778:	0800879d 	.word	0x0800879d
 800877c:	080087a5 	.word	0x080087a5
 8008780:	080087ad 	.word	0x080087ad
 8008784:	2300      	movs	r3, #0
 8008786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800878a:	e2f0      	b.n	8008d6e <UART_SetConfig+0x7aa>
 800878c:	2304      	movs	r3, #4
 800878e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008792:	e2ec      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008794:	2308      	movs	r3, #8
 8008796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800879a:	e2e8      	b.n	8008d6e <UART_SetConfig+0x7aa>
 800879c:	2310      	movs	r3, #16
 800879e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087a2:	e2e4      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80087a4:	2320      	movs	r3, #32
 80087a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087aa:	e2e0      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80087ac:	2340      	movs	r3, #64	; 0x40
 80087ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087b2:	e2dc      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80087b4:	2380      	movs	r3, #128	; 0x80
 80087b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ba:	e2d8      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a51      	ldr	r2, [pc, #324]	; (8008908 <UART_SetConfig+0x344>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d130      	bne.n	8008828 <UART_SetConfig+0x264>
 80087c6:	4b4e      	ldr	r3, [pc, #312]	; (8008900 <UART_SetConfig+0x33c>)
 80087c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ca:	f003 0307 	and.w	r3, r3, #7
 80087ce:	2b05      	cmp	r3, #5
 80087d0:	d826      	bhi.n	8008820 <UART_SetConfig+0x25c>
 80087d2:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <UART_SetConfig+0x214>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	080087f1 	.word	0x080087f1
 80087dc:	080087f9 	.word	0x080087f9
 80087e0:	08008801 	.word	0x08008801
 80087e4:	08008809 	.word	0x08008809
 80087e8:	08008811 	.word	0x08008811
 80087ec:	08008819 	.word	0x08008819
 80087f0:	2300      	movs	r3, #0
 80087f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087f6:	e2ba      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80087f8:	2304      	movs	r3, #4
 80087fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087fe:	e2b6      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008800:	2308      	movs	r3, #8
 8008802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008806:	e2b2      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008808:	2310      	movs	r3, #16
 800880a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800880e:	e2ae      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008810:	2320      	movs	r3, #32
 8008812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008816:	e2aa      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008818:	2340      	movs	r3, #64	; 0x40
 800881a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800881e:	e2a6      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008820:	2380      	movs	r3, #128	; 0x80
 8008822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008826:	e2a2      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a37      	ldr	r2, [pc, #220]	; (800890c <UART_SetConfig+0x348>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d130      	bne.n	8008894 <UART_SetConfig+0x2d0>
 8008832:	4b33      	ldr	r3, [pc, #204]	; (8008900 <UART_SetConfig+0x33c>)
 8008834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008836:	f003 0307 	and.w	r3, r3, #7
 800883a:	2b05      	cmp	r3, #5
 800883c:	d826      	bhi.n	800888c <UART_SetConfig+0x2c8>
 800883e:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <UART_SetConfig+0x280>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	0800885d 	.word	0x0800885d
 8008848:	08008865 	.word	0x08008865
 800884c:	0800886d 	.word	0x0800886d
 8008850:	08008875 	.word	0x08008875
 8008854:	0800887d 	.word	0x0800887d
 8008858:	08008885 	.word	0x08008885
 800885c:	2300      	movs	r3, #0
 800885e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008862:	e284      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008864:	2304      	movs	r3, #4
 8008866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800886a:	e280      	b.n	8008d6e <UART_SetConfig+0x7aa>
 800886c:	2308      	movs	r3, #8
 800886e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008872:	e27c      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008874:	2310      	movs	r3, #16
 8008876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887a:	e278      	b.n	8008d6e <UART_SetConfig+0x7aa>
 800887c:	2320      	movs	r3, #32
 800887e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008882:	e274      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008884:	2340      	movs	r3, #64	; 0x40
 8008886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800888a:	e270      	b.n	8008d6e <UART_SetConfig+0x7aa>
 800888c:	2380      	movs	r3, #128	; 0x80
 800888e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008892:	e26c      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a1d      	ldr	r2, [pc, #116]	; (8008910 <UART_SetConfig+0x34c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d142      	bne.n	8008924 <UART_SetConfig+0x360>
 800889e:	4b18      	ldr	r3, [pc, #96]	; (8008900 <UART_SetConfig+0x33c>)
 80088a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	2b05      	cmp	r3, #5
 80088a8:	d838      	bhi.n	800891c <UART_SetConfig+0x358>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <UART_SetConfig+0x2ec>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	080088c9 	.word	0x080088c9
 80088b4:	080088d1 	.word	0x080088d1
 80088b8:	080088d9 	.word	0x080088d9
 80088bc:	080088e1 	.word	0x080088e1
 80088c0:	080088e9 	.word	0x080088e9
 80088c4:	08008915 	.word	0x08008915
 80088c8:	2300      	movs	r3, #0
 80088ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ce:	e24e      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80088d0:	2304      	movs	r3, #4
 80088d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d6:	e24a      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80088d8:	2308      	movs	r3, #8
 80088da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088de:	e246      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80088e0:	2310      	movs	r3, #16
 80088e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e6:	e242      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80088e8:	2320      	movs	r3, #32
 80088ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ee:	e23e      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80088f0:	cfff69f3 	.word	0xcfff69f3
 80088f4:	58000c00 	.word	0x58000c00
 80088f8:	11fff4ff 	.word	0x11fff4ff
 80088fc:	40011000 	.word	0x40011000
 8008900:	58024400 	.word	0x58024400
 8008904:	40004400 	.word	0x40004400
 8008908:	40004800 	.word	0x40004800
 800890c:	40004c00 	.word	0x40004c00
 8008910:	40005000 	.word	0x40005000
 8008914:	2340      	movs	r3, #64	; 0x40
 8008916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800891a:	e228      	b.n	8008d6e <UART_SetConfig+0x7aa>
 800891c:	2380      	movs	r3, #128	; 0x80
 800891e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008922:	e224      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4ab1      	ldr	r2, [pc, #708]	; (8008bf0 <UART_SetConfig+0x62c>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d176      	bne.n	8008a1c <UART_SetConfig+0x458>
 800892e:	4bb1      	ldr	r3, [pc, #708]	; (8008bf4 <UART_SetConfig+0x630>)
 8008930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008936:	2b28      	cmp	r3, #40	; 0x28
 8008938:	d86c      	bhi.n	8008a14 <UART_SetConfig+0x450>
 800893a:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <UART_SetConfig+0x37c>)
 800893c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008940:	080089e5 	.word	0x080089e5
 8008944:	08008a15 	.word	0x08008a15
 8008948:	08008a15 	.word	0x08008a15
 800894c:	08008a15 	.word	0x08008a15
 8008950:	08008a15 	.word	0x08008a15
 8008954:	08008a15 	.word	0x08008a15
 8008958:	08008a15 	.word	0x08008a15
 800895c:	08008a15 	.word	0x08008a15
 8008960:	080089ed 	.word	0x080089ed
 8008964:	08008a15 	.word	0x08008a15
 8008968:	08008a15 	.word	0x08008a15
 800896c:	08008a15 	.word	0x08008a15
 8008970:	08008a15 	.word	0x08008a15
 8008974:	08008a15 	.word	0x08008a15
 8008978:	08008a15 	.word	0x08008a15
 800897c:	08008a15 	.word	0x08008a15
 8008980:	080089f5 	.word	0x080089f5
 8008984:	08008a15 	.word	0x08008a15
 8008988:	08008a15 	.word	0x08008a15
 800898c:	08008a15 	.word	0x08008a15
 8008990:	08008a15 	.word	0x08008a15
 8008994:	08008a15 	.word	0x08008a15
 8008998:	08008a15 	.word	0x08008a15
 800899c:	08008a15 	.word	0x08008a15
 80089a0:	080089fd 	.word	0x080089fd
 80089a4:	08008a15 	.word	0x08008a15
 80089a8:	08008a15 	.word	0x08008a15
 80089ac:	08008a15 	.word	0x08008a15
 80089b0:	08008a15 	.word	0x08008a15
 80089b4:	08008a15 	.word	0x08008a15
 80089b8:	08008a15 	.word	0x08008a15
 80089bc:	08008a15 	.word	0x08008a15
 80089c0:	08008a05 	.word	0x08008a05
 80089c4:	08008a15 	.word	0x08008a15
 80089c8:	08008a15 	.word	0x08008a15
 80089cc:	08008a15 	.word	0x08008a15
 80089d0:	08008a15 	.word	0x08008a15
 80089d4:	08008a15 	.word	0x08008a15
 80089d8:	08008a15 	.word	0x08008a15
 80089dc:	08008a15 	.word	0x08008a15
 80089e0:	08008a0d 	.word	0x08008a0d
 80089e4:	2301      	movs	r3, #1
 80089e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ea:	e1c0      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80089ec:	2304      	movs	r3, #4
 80089ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089f2:	e1bc      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80089f4:	2308      	movs	r3, #8
 80089f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089fa:	e1b8      	b.n	8008d6e <UART_SetConfig+0x7aa>
 80089fc:	2310      	movs	r3, #16
 80089fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a02:	e1b4      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008a04:	2320      	movs	r3, #32
 8008a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a0a:	e1b0      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008a0c:	2340      	movs	r3, #64	; 0x40
 8008a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a12:	e1ac      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008a14:	2380      	movs	r3, #128	; 0x80
 8008a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a1a:	e1a8      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a75      	ldr	r2, [pc, #468]	; (8008bf8 <UART_SetConfig+0x634>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d130      	bne.n	8008a88 <UART_SetConfig+0x4c4>
 8008a26:	4b73      	ldr	r3, [pc, #460]	; (8008bf4 <UART_SetConfig+0x630>)
 8008a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	2b05      	cmp	r3, #5
 8008a30:	d826      	bhi.n	8008a80 <UART_SetConfig+0x4bc>
 8008a32:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <UART_SetConfig+0x474>)
 8008a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a38:	08008a51 	.word	0x08008a51
 8008a3c:	08008a59 	.word	0x08008a59
 8008a40:	08008a61 	.word	0x08008a61
 8008a44:	08008a69 	.word	0x08008a69
 8008a48:	08008a71 	.word	0x08008a71
 8008a4c:	08008a79 	.word	0x08008a79
 8008a50:	2300      	movs	r3, #0
 8008a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a56:	e18a      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008a58:	2304      	movs	r3, #4
 8008a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a5e:	e186      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008a60:	2308      	movs	r3, #8
 8008a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a66:	e182      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008a68:	2310      	movs	r3, #16
 8008a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6e:	e17e      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008a70:	2320      	movs	r3, #32
 8008a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a76:	e17a      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008a78:	2340      	movs	r3, #64	; 0x40
 8008a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a7e:	e176      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008a80:	2380      	movs	r3, #128	; 0x80
 8008a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a86:	e172      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a5b      	ldr	r2, [pc, #364]	; (8008bfc <UART_SetConfig+0x638>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d130      	bne.n	8008af4 <UART_SetConfig+0x530>
 8008a92:	4b58      	ldr	r3, [pc, #352]	; (8008bf4 <UART_SetConfig+0x630>)
 8008a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a96:	f003 0307 	and.w	r3, r3, #7
 8008a9a:	2b05      	cmp	r3, #5
 8008a9c:	d826      	bhi.n	8008aec <UART_SetConfig+0x528>
 8008a9e:	a201      	add	r2, pc, #4	; (adr r2, 8008aa4 <UART_SetConfig+0x4e0>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008abd 	.word	0x08008abd
 8008aa8:	08008ac5 	.word	0x08008ac5
 8008aac:	08008acd 	.word	0x08008acd
 8008ab0:	08008ad5 	.word	0x08008ad5
 8008ab4:	08008add 	.word	0x08008add
 8008ab8:	08008ae5 	.word	0x08008ae5
 8008abc:	2300      	movs	r3, #0
 8008abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ac2:	e154      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008ac4:	2304      	movs	r3, #4
 8008ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aca:	e150      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008acc:	2308      	movs	r3, #8
 8008ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ad2:	e14c      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ada:	e148      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008adc:	2320      	movs	r3, #32
 8008ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ae2:	e144      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008ae4:	2340      	movs	r3, #64	; 0x40
 8008ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aea:	e140      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008aec:	2380      	movs	r3, #128	; 0x80
 8008aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008af2:	e13c      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a41      	ldr	r2, [pc, #260]	; (8008c00 <UART_SetConfig+0x63c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	f040 8082 	bne.w	8008c04 <UART_SetConfig+0x640>
 8008b00:	4b3c      	ldr	r3, [pc, #240]	; (8008bf4 <UART_SetConfig+0x630>)
 8008b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b08:	2b28      	cmp	r3, #40	; 0x28
 8008b0a:	d86d      	bhi.n	8008be8 <UART_SetConfig+0x624>
 8008b0c:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <UART_SetConfig+0x550>)
 8008b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b12:	bf00      	nop
 8008b14:	08008bb9 	.word	0x08008bb9
 8008b18:	08008be9 	.word	0x08008be9
 8008b1c:	08008be9 	.word	0x08008be9
 8008b20:	08008be9 	.word	0x08008be9
 8008b24:	08008be9 	.word	0x08008be9
 8008b28:	08008be9 	.word	0x08008be9
 8008b2c:	08008be9 	.word	0x08008be9
 8008b30:	08008be9 	.word	0x08008be9
 8008b34:	08008bc1 	.word	0x08008bc1
 8008b38:	08008be9 	.word	0x08008be9
 8008b3c:	08008be9 	.word	0x08008be9
 8008b40:	08008be9 	.word	0x08008be9
 8008b44:	08008be9 	.word	0x08008be9
 8008b48:	08008be9 	.word	0x08008be9
 8008b4c:	08008be9 	.word	0x08008be9
 8008b50:	08008be9 	.word	0x08008be9
 8008b54:	08008bc9 	.word	0x08008bc9
 8008b58:	08008be9 	.word	0x08008be9
 8008b5c:	08008be9 	.word	0x08008be9
 8008b60:	08008be9 	.word	0x08008be9
 8008b64:	08008be9 	.word	0x08008be9
 8008b68:	08008be9 	.word	0x08008be9
 8008b6c:	08008be9 	.word	0x08008be9
 8008b70:	08008be9 	.word	0x08008be9
 8008b74:	08008bd1 	.word	0x08008bd1
 8008b78:	08008be9 	.word	0x08008be9
 8008b7c:	08008be9 	.word	0x08008be9
 8008b80:	08008be9 	.word	0x08008be9
 8008b84:	08008be9 	.word	0x08008be9
 8008b88:	08008be9 	.word	0x08008be9
 8008b8c:	08008be9 	.word	0x08008be9
 8008b90:	08008be9 	.word	0x08008be9
 8008b94:	08008bd9 	.word	0x08008bd9
 8008b98:	08008be9 	.word	0x08008be9
 8008b9c:	08008be9 	.word	0x08008be9
 8008ba0:	08008be9 	.word	0x08008be9
 8008ba4:	08008be9 	.word	0x08008be9
 8008ba8:	08008be9 	.word	0x08008be9
 8008bac:	08008be9 	.word	0x08008be9
 8008bb0:	08008be9 	.word	0x08008be9
 8008bb4:	08008be1 	.word	0x08008be1
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bbe:	e0d6      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008bc0:	2304      	movs	r3, #4
 8008bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bc6:	e0d2      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008bc8:	2308      	movs	r3, #8
 8008bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bce:	e0ce      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd6:	e0ca      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008bd8:	2320      	movs	r3, #32
 8008bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bde:	e0c6      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008be0:	2340      	movs	r3, #64	; 0x40
 8008be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be6:	e0c2      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008be8:	2380      	movs	r3, #128	; 0x80
 8008bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bee:	e0be      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008bf0:	40011400 	.word	0x40011400
 8008bf4:	58024400 	.word	0x58024400
 8008bf8:	40007800 	.word	0x40007800
 8008bfc:	40007c00 	.word	0x40007c00
 8008c00:	40011800 	.word	0x40011800
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4aad      	ldr	r2, [pc, #692]	; (8008ec0 <UART_SetConfig+0x8fc>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d176      	bne.n	8008cfc <UART_SetConfig+0x738>
 8008c0e:	4bad      	ldr	r3, [pc, #692]	; (8008ec4 <UART_SetConfig+0x900>)
 8008c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c16:	2b28      	cmp	r3, #40	; 0x28
 8008c18:	d86c      	bhi.n	8008cf4 <UART_SetConfig+0x730>
 8008c1a:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <UART_SetConfig+0x65c>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008cc5 	.word	0x08008cc5
 8008c24:	08008cf5 	.word	0x08008cf5
 8008c28:	08008cf5 	.word	0x08008cf5
 8008c2c:	08008cf5 	.word	0x08008cf5
 8008c30:	08008cf5 	.word	0x08008cf5
 8008c34:	08008cf5 	.word	0x08008cf5
 8008c38:	08008cf5 	.word	0x08008cf5
 8008c3c:	08008cf5 	.word	0x08008cf5
 8008c40:	08008ccd 	.word	0x08008ccd
 8008c44:	08008cf5 	.word	0x08008cf5
 8008c48:	08008cf5 	.word	0x08008cf5
 8008c4c:	08008cf5 	.word	0x08008cf5
 8008c50:	08008cf5 	.word	0x08008cf5
 8008c54:	08008cf5 	.word	0x08008cf5
 8008c58:	08008cf5 	.word	0x08008cf5
 8008c5c:	08008cf5 	.word	0x08008cf5
 8008c60:	08008cd5 	.word	0x08008cd5
 8008c64:	08008cf5 	.word	0x08008cf5
 8008c68:	08008cf5 	.word	0x08008cf5
 8008c6c:	08008cf5 	.word	0x08008cf5
 8008c70:	08008cf5 	.word	0x08008cf5
 8008c74:	08008cf5 	.word	0x08008cf5
 8008c78:	08008cf5 	.word	0x08008cf5
 8008c7c:	08008cf5 	.word	0x08008cf5
 8008c80:	08008cdd 	.word	0x08008cdd
 8008c84:	08008cf5 	.word	0x08008cf5
 8008c88:	08008cf5 	.word	0x08008cf5
 8008c8c:	08008cf5 	.word	0x08008cf5
 8008c90:	08008cf5 	.word	0x08008cf5
 8008c94:	08008cf5 	.word	0x08008cf5
 8008c98:	08008cf5 	.word	0x08008cf5
 8008c9c:	08008cf5 	.word	0x08008cf5
 8008ca0:	08008ce5 	.word	0x08008ce5
 8008ca4:	08008cf5 	.word	0x08008cf5
 8008ca8:	08008cf5 	.word	0x08008cf5
 8008cac:	08008cf5 	.word	0x08008cf5
 8008cb0:	08008cf5 	.word	0x08008cf5
 8008cb4:	08008cf5 	.word	0x08008cf5
 8008cb8:	08008cf5 	.word	0x08008cf5
 8008cbc:	08008cf5 	.word	0x08008cf5
 8008cc0:	08008ced 	.word	0x08008ced
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cca:	e050      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008ccc:	2304      	movs	r3, #4
 8008cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cd2:	e04c      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cda:	e048      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008cdc:	2310      	movs	r3, #16
 8008cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ce2:	e044      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cea:	e040      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008cec:	2340      	movs	r3, #64	; 0x40
 8008cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf2:	e03c      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008cf4:	2380      	movs	r3, #128	; 0x80
 8008cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cfa:	e038      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a71      	ldr	r2, [pc, #452]	; (8008ec8 <UART_SetConfig+0x904>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d130      	bne.n	8008d68 <UART_SetConfig+0x7a4>
 8008d06:	4b6f      	ldr	r3, [pc, #444]	; (8008ec4 <UART_SetConfig+0x900>)
 8008d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	2b05      	cmp	r3, #5
 8008d10:	d826      	bhi.n	8008d60 <UART_SetConfig+0x79c>
 8008d12:	a201      	add	r2, pc, #4	; (adr r2, 8008d18 <UART_SetConfig+0x754>)
 8008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d18:	08008d31 	.word	0x08008d31
 8008d1c:	08008d39 	.word	0x08008d39
 8008d20:	08008d41 	.word	0x08008d41
 8008d24:	08008d49 	.word	0x08008d49
 8008d28:	08008d51 	.word	0x08008d51
 8008d2c:	08008d59 	.word	0x08008d59
 8008d30:	2302      	movs	r3, #2
 8008d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d36:	e01a      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008d38:	2304      	movs	r3, #4
 8008d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d3e:	e016      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008d40:	2308      	movs	r3, #8
 8008d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d46:	e012      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008d48:	2310      	movs	r3, #16
 8008d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d4e:	e00e      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008d50:	2320      	movs	r3, #32
 8008d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d56:	e00a      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008d58:	2340      	movs	r3, #64	; 0x40
 8008d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d5e:	e006      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008d60:	2380      	movs	r3, #128	; 0x80
 8008d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d66:	e002      	b.n	8008d6e <UART_SetConfig+0x7aa>
 8008d68:	2380      	movs	r3, #128	; 0x80
 8008d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a55      	ldr	r2, [pc, #340]	; (8008ec8 <UART_SetConfig+0x904>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	f040 80f0 	bne.w	8008f5a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d7e:	2b20      	cmp	r3, #32
 8008d80:	dc46      	bgt.n	8008e10 <UART_SetConfig+0x84c>
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	db75      	blt.n	8008e72 <UART_SetConfig+0x8ae>
 8008d86:	3b02      	subs	r3, #2
 8008d88:	2b1e      	cmp	r3, #30
 8008d8a:	d872      	bhi.n	8008e72 <UART_SetConfig+0x8ae>
 8008d8c:	a201      	add	r2, pc, #4	; (adr r2, 8008d94 <UART_SetConfig+0x7d0>)
 8008d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d92:	bf00      	nop
 8008d94:	08008e17 	.word	0x08008e17
 8008d98:	08008e73 	.word	0x08008e73
 8008d9c:	08008e1f 	.word	0x08008e1f
 8008da0:	08008e73 	.word	0x08008e73
 8008da4:	08008e73 	.word	0x08008e73
 8008da8:	08008e73 	.word	0x08008e73
 8008dac:	08008e2f 	.word	0x08008e2f
 8008db0:	08008e73 	.word	0x08008e73
 8008db4:	08008e73 	.word	0x08008e73
 8008db8:	08008e73 	.word	0x08008e73
 8008dbc:	08008e73 	.word	0x08008e73
 8008dc0:	08008e73 	.word	0x08008e73
 8008dc4:	08008e73 	.word	0x08008e73
 8008dc8:	08008e73 	.word	0x08008e73
 8008dcc:	08008e3f 	.word	0x08008e3f
 8008dd0:	08008e73 	.word	0x08008e73
 8008dd4:	08008e73 	.word	0x08008e73
 8008dd8:	08008e73 	.word	0x08008e73
 8008ddc:	08008e73 	.word	0x08008e73
 8008de0:	08008e73 	.word	0x08008e73
 8008de4:	08008e73 	.word	0x08008e73
 8008de8:	08008e73 	.word	0x08008e73
 8008dec:	08008e73 	.word	0x08008e73
 8008df0:	08008e73 	.word	0x08008e73
 8008df4:	08008e73 	.word	0x08008e73
 8008df8:	08008e73 	.word	0x08008e73
 8008dfc:	08008e73 	.word	0x08008e73
 8008e00:	08008e73 	.word	0x08008e73
 8008e04:	08008e73 	.word	0x08008e73
 8008e08:	08008e73 	.word	0x08008e73
 8008e0c:	08008e65 	.word	0x08008e65
 8008e10:	2b40      	cmp	r3, #64	; 0x40
 8008e12:	d02a      	beq.n	8008e6a <UART_SetConfig+0x8a6>
 8008e14:	e02d      	b.n	8008e72 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008e16:	f7fd ff7f 	bl	8006d18 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008e1c:	e02f      	b.n	8008e7e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e1e:	f107 0314 	add.w	r3, r7, #20
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fd ff8e 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e2c:	e027      	b.n	8008e7e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e2e:	f107 0308 	add.w	r3, r7, #8
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe f8da 	bl	8006fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e3c:	e01f      	b.n	8008e7e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e3e:	4b21      	ldr	r3, [pc, #132]	; (8008ec4 <UART_SetConfig+0x900>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d009      	beq.n	8008e5e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e4a:	4b1e      	ldr	r3, [pc, #120]	; (8008ec4 <UART_SetConfig+0x900>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	08db      	lsrs	r3, r3, #3
 8008e50:	f003 0303 	and.w	r3, r3, #3
 8008e54:	4a1d      	ldr	r2, [pc, #116]	; (8008ecc <UART_SetConfig+0x908>)
 8008e56:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e5c:	e00f      	b.n	8008e7e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8008e5e:	4b1b      	ldr	r3, [pc, #108]	; (8008ecc <UART_SetConfig+0x908>)
 8008e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e62:	e00c      	b.n	8008e7e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e64:	4b1a      	ldr	r3, [pc, #104]	; (8008ed0 <UART_SetConfig+0x90c>)
 8008e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e68:	e009      	b.n	8008e7e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e70:	e005      	b.n	8008e7e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008e7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 81e6 	beq.w	8009252 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	4a12      	ldr	r2, [pc, #72]	; (8008ed4 <UART_SetConfig+0x910>)
 8008e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e90:	461a      	mov	r2, r3
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e98:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	005b      	lsls	r3, r3, #1
 8008ea2:	4413      	add	r3, r2
 8008ea4:	6a3a      	ldr	r2, [r7, #32]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d305      	bcc.n	8008eb6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008eb0:	6a3a      	ldr	r2, [r7, #32]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d910      	bls.n	8008ed8 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008ebc:	e1c9      	b.n	8009252 <UART_SetConfig+0xc8e>
 8008ebe:	bf00      	nop
 8008ec0:	40011c00 	.word	0x40011c00
 8008ec4:	58024400 	.word	0x58024400
 8008ec8:	58000c00 	.word	0x58000c00
 8008ecc:	03d09000 	.word	0x03d09000
 8008ed0:	003d0900 	.word	0x003d0900
 8008ed4:	0801c72c 	.word	0x0801c72c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eda:	4618      	mov	r0, r3
 8008edc:	f04f 0100 	mov.w	r1, #0
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	4ac1      	ldr	r2, [pc, #772]	; (80091ec <UART_SetConfig+0xc28>)
 8008ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	f04f 0300 	mov.w	r3, #0
 8008ef0:	f7f7 fa5e 	bl	80003b0 <__aeabi_uldivmod>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4619      	mov	r1, r3
 8008efc:	f04f 0200 	mov.w	r2, #0
 8008f00:	f04f 0300 	mov.w	r3, #0
 8008f04:	020b      	lsls	r3, r1, #8
 8008f06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f0a:	0202      	lsls	r2, r0, #8
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	6849      	ldr	r1, [r1, #4]
 8008f10:	0849      	lsrs	r1, r1, #1
 8008f12:	4608      	mov	r0, r1
 8008f14:	f04f 0100 	mov.w	r1, #0
 8008f18:	1814      	adds	r4, r2, r0
 8008f1a:	eb43 0501 	adc.w	r5, r3, r1
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f04f 0300 	mov.w	r3, #0
 8008f28:	4620      	mov	r0, r4
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	f7f7 fa40 	bl	80003b0 <__aeabi_uldivmod>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4613      	mov	r3, r2
 8008f36:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f3e:	d308      	bcc.n	8008f52 <UART_SetConfig+0x98e>
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f46:	d204      	bcs.n	8008f52 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f4e:	60da      	str	r2, [r3, #12]
 8008f50:	e17f      	b.n	8009252 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008f58:	e17b      	b.n	8009252 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f62:	f040 80bd 	bne.w	80090e0 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8008f66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	dc48      	bgt.n	8009000 <UART_SetConfig+0xa3c>
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	db7b      	blt.n	800906a <UART_SetConfig+0xaa6>
 8008f72:	2b20      	cmp	r3, #32
 8008f74:	d879      	bhi.n	800906a <UART_SetConfig+0xaa6>
 8008f76:	a201      	add	r2, pc, #4	; (adr r2, 8008f7c <UART_SetConfig+0x9b8>)
 8008f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7c:	08009007 	.word	0x08009007
 8008f80:	0800900f 	.word	0x0800900f
 8008f84:	0800906b 	.word	0x0800906b
 8008f88:	0800906b 	.word	0x0800906b
 8008f8c:	08009017 	.word	0x08009017
 8008f90:	0800906b 	.word	0x0800906b
 8008f94:	0800906b 	.word	0x0800906b
 8008f98:	0800906b 	.word	0x0800906b
 8008f9c:	08009027 	.word	0x08009027
 8008fa0:	0800906b 	.word	0x0800906b
 8008fa4:	0800906b 	.word	0x0800906b
 8008fa8:	0800906b 	.word	0x0800906b
 8008fac:	0800906b 	.word	0x0800906b
 8008fb0:	0800906b 	.word	0x0800906b
 8008fb4:	0800906b 	.word	0x0800906b
 8008fb8:	0800906b 	.word	0x0800906b
 8008fbc:	08009037 	.word	0x08009037
 8008fc0:	0800906b 	.word	0x0800906b
 8008fc4:	0800906b 	.word	0x0800906b
 8008fc8:	0800906b 	.word	0x0800906b
 8008fcc:	0800906b 	.word	0x0800906b
 8008fd0:	0800906b 	.word	0x0800906b
 8008fd4:	0800906b 	.word	0x0800906b
 8008fd8:	0800906b 	.word	0x0800906b
 8008fdc:	0800906b 	.word	0x0800906b
 8008fe0:	0800906b 	.word	0x0800906b
 8008fe4:	0800906b 	.word	0x0800906b
 8008fe8:	0800906b 	.word	0x0800906b
 8008fec:	0800906b 	.word	0x0800906b
 8008ff0:	0800906b 	.word	0x0800906b
 8008ff4:	0800906b 	.word	0x0800906b
 8008ff8:	0800906b 	.word	0x0800906b
 8008ffc:	0800905d 	.word	0x0800905d
 8009000:	2b40      	cmp	r3, #64	; 0x40
 8009002:	d02e      	beq.n	8009062 <UART_SetConfig+0xa9e>
 8009004:	e031      	b.n	800906a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009006:	f7fc ff1f 	bl	8005e48 <HAL_RCC_GetPCLK1Freq>
 800900a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800900c:	e033      	b.n	8009076 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800900e:	f7fc ff31 	bl	8005e74 <HAL_RCC_GetPCLK2Freq>
 8009012:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009014:	e02f      	b.n	8009076 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009016:	f107 0314 	add.w	r3, r7, #20
 800901a:	4618      	mov	r0, r3
 800901c:	f7fd fe92 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009024:	e027      	b.n	8009076 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009026:	f107 0308 	add.w	r3, r7, #8
 800902a:	4618      	mov	r0, r3
 800902c:	f7fd ffde 	bl	8006fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009034:	e01f      	b.n	8009076 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009036:	4b6e      	ldr	r3, [pc, #440]	; (80091f0 <UART_SetConfig+0xc2c>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	2b00      	cmp	r3, #0
 8009040:	d009      	beq.n	8009056 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009042:	4b6b      	ldr	r3, [pc, #428]	; (80091f0 <UART_SetConfig+0xc2c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	08db      	lsrs	r3, r3, #3
 8009048:	f003 0303 	and.w	r3, r3, #3
 800904c:	4a69      	ldr	r2, [pc, #420]	; (80091f4 <UART_SetConfig+0xc30>)
 800904e:	fa22 f303 	lsr.w	r3, r2, r3
 8009052:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009054:	e00f      	b.n	8009076 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8009056:	4b67      	ldr	r3, [pc, #412]	; (80091f4 <UART_SetConfig+0xc30>)
 8009058:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800905a:	e00c      	b.n	8009076 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800905c:	4b66      	ldr	r3, [pc, #408]	; (80091f8 <UART_SetConfig+0xc34>)
 800905e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009060:	e009      	b.n	8009076 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009068:	e005      	b.n	8009076 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009074:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 80ea 	beq.w	8009252 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	4a5a      	ldr	r2, [pc, #360]	; (80091ec <UART_SetConfig+0xc28>)
 8009084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009088:	461a      	mov	r2, r3
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009090:	005a      	lsls	r2, r3, #1
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	085b      	lsrs	r3, r3, #1
 8009098:	441a      	add	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	2b0f      	cmp	r3, #15
 80090a8:	d916      	bls.n	80090d8 <UART_SetConfig+0xb14>
 80090aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090b0:	d212      	bcs.n	80090d8 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	f023 030f 	bic.w	r3, r3, #15
 80090ba:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	085b      	lsrs	r3, r3, #1
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	f003 0307 	and.w	r3, r3, #7
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090ca:	4313      	orrs	r3, r2
 80090cc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80090d4:	60da      	str	r2, [r3, #12]
 80090d6:	e0bc      	b.n	8009252 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80090de:	e0b8      	b.n	8009252 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090e4:	2b20      	cmp	r3, #32
 80090e6:	dc4b      	bgt.n	8009180 <UART_SetConfig+0xbbc>
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f2c0 8087 	blt.w	80091fc <UART_SetConfig+0xc38>
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	f200 8084 	bhi.w	80091fc <UART_SetConfig+0xc38>
 80090f4:	a201      	add	r2, pc, #4	; (adr r2, 80090fc <UART_SetConfig+0xb38>)
 80090f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fa:	bf00      	nop
 80090fc:	08009187 	.word	0x08009187
 8009100:	0800918f 	.word	0x0800918f
 8009104:	080091fd 	.word	0x080091fd
 8009108:	080091fd 	.word	0x080091fd
 800910c:	08009197 	.word	0x08009197
 8009110:	080091fd 	.word	0x080091fd
 8009114:	080091fd 	.word	0x080091fd
 8009118:	080091fd 	.word	0x080091fd
 800911c:	080091a7 	.word	0x080091a7
 8009120:	080091fd 	.word	0x080091fd
 8009124:	080091fd 	.word	0x080091fd
 8009128:	080091fd 	.word	0x080091fd
 800912c:	080091fd 	.word	0x080091fd
 8009130:	080091fd 	.word	0x080091fd
 8009134:	080091fd 	.word	0x080091fd
 8009138:	080091fd 	.word	0x080091fd
 800913c:	080091b7 	.word	0x080091b7
 8009140:	080091fd 	.word	0x080091fd
 8009144:	080091fd 	.word	0x080091fd
 8009148:	080091fd 	.word	0x080091fd
 800914c:	080091fd 	.word	0x080091fd
 8009150:	080091fd 	.word	0x080091fd
 8009154:	080091fd 	.word	0x080091fd
 8009158:	080091fd 	.word	0x080091fd
 800915c:	080091fd 	.word	0x080091fd
 8009160:	080091fd 	.word	0x080091fd
 8009164:	080091fd 	.word	0x080091fd
 8009168:	080091fd 	.word	0x080091fd
 800916c:	080091fd 	.word	0x080091fd
 8009170:	080091fd 	.word	0x080091fd
 8009174:	080091fd 	.word	0x080091fd
 8009178:	080091fd 	.word	0x080091fd
 800917c:	080091dd 	.word	0x080091dd
 8009180:	2b40      	cmp	r3, #64	; 0x40
 8009182:	d02e      	beq.n	80091e2 <UART_SetConfig+0xc1e>
 8009184:	e03a      	b.n	80091fc <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009186:	f7fc fe5f 	bl	8005e48 <HAL_RCC_GetPCLK1Freq>
 800918a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800918c:	e03c      	b.n	8009208 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800918e:	f7fc fe71 	bl	8005e74 <HAL_RCC_GetPCLK2Freq>
 8009192:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009194:	e038      	b.n	8009208 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009196:	f107 0314 	add.w	r3, r7, #20
 800919a:	4618      	mov	r0, r3
 800919c:	f7fd fdd2 	bl	8006d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091a4:	e030      	b.n	8009208 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091a6:	f107 0308 	add.w	r3, r7, #8
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fd ff1e 	bl	8006fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091b4:	e028      	b.n	8009208 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091b6:	4b0e      	ldr	r3, [pc, #56]	; (80091f0 <UART_SetConfig+0xc2c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d009      	beq.n	80091d6 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091c2:	4b0b      	ldr	r3, [pc, #44]	; (80091f0 <UART_SetConfig+0xc2c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	08db      	lsrs	r3, r3, #3
 80091c8:	f003 0303 	and.w	r3, r3, #3
 80091cc:	4a09      	ldr	r2, [pc, #36]	; (80091f4 <UART_SetConfig+0xc30>)
 80091ce:	fa22 f303 	lsr.w	r3, r2, r3
 80091d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091d4:	e018      	b.n	8009208 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80091d6:	4b07      	ldr	r3, [pc, #28]	; (80091f4 <UART_SetConfig+0xc30>)
 80091d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091da:	e015      	b.n	8009208 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091dc:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <UART_SetConfig+0xc34>)
 80091de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091e0:	e012      	b.n	8009208 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091e8:	e00e      	b.n	8009208 <UART_SetConfig+0xc44>
 80091ea:	bf00      	nop
 80091ec:	0801c72c 	.word	0x0801c72c
 80091f0:	58024400 	.word	0x58024400
 80091f4:	03d09000 	.word	0x03d09000
 80091f8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009206:	bf00      	nop
    }

    if (pclk != 0U)
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d021      	beq.n	8009252 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	4a1a      	ldr	r2, [pc, #104]	; (800927c <UART_SetConfig+0xcb8>)
 8009214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009218:	461a      	mov	r2, r3
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	085b      	lsrs	r3, r3, #1
 8009226:	441a      	add	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009230:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	2b0f      	cmp	r3, #15
 8009236:	d909      	bls.n	800924c <UART_SetConfig+0xc88>
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800923e:	d205      	bcs.n	800924c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	b29a      	uxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60da      	str	r2, [r3, #12]
 800924a:	e002      	b.n	8009252 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800926e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009272:	4618      	mov	r0, r3
 8009274:	3738      	adds	r7, #56	; 0x38
 8009276:	46bd      	mov	sp, r7
 8009278:	bdb0      	pop	{r4, r5, r7, pc}
 800927a:	bf00      	nop
 800927c:	0801c72c 	.word	0x0801c72c

08009280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928c:	f003 0301 	and.w	r3, r3, #1
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00a      	beq.n	80092aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ae:	f003 0302 	and.w	r3, r3, #2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00a      	beq.n	80092ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f2:	f003 0308 	and.w	r3, r3, #8
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009314:	f003 0310 	and.w	r3, r3, #16
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00a      	beq.n	8009332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00a      	beq.n	8009354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	430a      	orrs	r2, r1
 8009352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935c:	2b00      	cmp	r3, #0
 800935e:	d01a      	beq.n	8009396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800937e:	d10a      	bne.n	8009396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	605a      	str	r2, [r3, #4]
  }
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093d4:	f7f8 ff50 	bl	8002278 <HAL_GetTick>
 80093d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0308 	and.w	r3, r3, #8
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	d10e      	bne.n	8009406 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f82f 	bl	800945a <UART_WaitOnFlagUntilTimeout>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e025      	b.n	8009452 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b04      	cmp	r3, #4
 8009412:	d10e      	bne.n	8009432 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f819 	bl	800945a <UART_WaitOnFlagUntilTimeout>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e00f      	b.n	8009452 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2220      	movs	r2, #32
 800943e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b09c      	sub	sp, #112	; 0x70
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	603b      	str	r3, [r7, #0]
 8009466:	4613      	mov	r3, r2
 8009468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800946a:	e0a9      	b.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800946c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800946e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009472:	f000 80a5 	beq.w	80095c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009476:	f7f8 feff 	bl	8002278 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009482:	429a      	cmp	r2, r3
 8009484:	d302      	bcc.n	800948c <UART_WaitOnFlagUntilTimeout+0x32>
 8009486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009488:	2b00      	cmp	r3, #0
 800948a:	d140      	bne.n	800950e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800949a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800949c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094a0:	667b      	str	r3, [r7, #100]	; 0x64
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80094b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e6      	bne.n	800948c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3308      	adds	r3, #8
 80094c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	f023 0301 	bic.w	r3, r3, #1
 80094d4:	663b      	str	r3, [r7, #96]	; 0x60
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3308      	adds	r3, #8
 80094dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094de:	64ba      	str	r2, [r7, #72]	; 0x48
 80094e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80094ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e5      	bne.n	80094be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2220      	movs	r2, #32
 80094f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800950a:	2303      	movs	r3, #3
 800950c:	e069      	b.n	80095e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0304 	and.w	r3, r3, #4
 8009518:	2b00      	cmp	r3, #0
 800951a:	d051      	beq.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800952a:	d149      	bne.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009534:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	e853 3f00 	ldrex	r3, [r3]
 8009542:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800954a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	461a      	mov	r2, r3
 8009552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009554:	637b      	str	r3, [r7, #52]	; 0x34
 8009556:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800955a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800955c:	e841 2300 	strex	r3, r2, [r1]
 8009560:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e6      	bne.n	8009536 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3308      	adds	r3, #8
 800956e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	e853 3f00 	ldrex	r3, [r3]
 8009576:	613b      	str	r3, [r7, #16]
   return(result);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f023 0301 	bic.w	r3, r3, #1
 800957e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3308      	adds	r3, #8
 8009586:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009588:	623a      	str	r2, [r7, #32]
 800958a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	69f9      	ldr	r1, [r7, #28]
 800958e:	6a3a      	ldr	r2, [r7, #32]
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	61bb      	str	r3, [r7, #24]
   return(result);
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e5      	bne.n	8009568 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2220      	movs	r2, #32
 80095a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2220      	movs	r2, #32
 80095b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e010      	b.n	80095e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	69da      	ldr	r2, [r3, #28]
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	4013      	ands	r3, r2
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	bf0c      	ite	eq
 80095d0:	2301      	moveq	r3, #1
 80095d2:	2300      	movne	r3, #0
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	461a      	mov	r2, r3
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	429a      	cmp	r2, r3
 80095dc:	f43f af46 	beq.w	800946c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3770      	adds	r7, #112	; 0x70
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d101      	bne.n	8009600 <HAL_UARTEx_DisableFifoMode+0x16>
 80095fc:	2302      	movs	r3, #2
 80095fe:	e027      	b.n	8009650 <HAL_UARTEx_DisableFifoMode+0x66>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2224      	movs	r2, #36	; 0x24
 800960c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f022 0201 	bic.w	r2, r2, #1
 8009626:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800962e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2220      	movs	r2, #32
 8009642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800966c:	2b01      	cmp	r3, #1
 800966e:	d101      	bne.n	8009674 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009670:	2302      	movs	r3, #2
 8009672:	e02d      	b.n	80096d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2224      	movs	r2, #36	; 0x24
 8009680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 0201 	bic.w	r2, r2, #1
 800969a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f84f 	bl	8009754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2220      	movs	r2, #32
 80096c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d101      	bne.n	80096f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096ec:	2302      	movs	r3, #2
 80096ee:	e02d      	b.n	800974c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2224      	movs	r2, #36	; 0x24
 80096fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0201 	bic.w	r2, r2, #1
 8009716:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	430a      	orrs	r2, r1
 800972a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f811 	bl	8009754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2220      	movs	r2, #32
 800973e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009760:	2b00      	cmp	r3, #0
 8009762:	d108      	bne.n	8009776 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009774:	e031      	b.n	80097da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009776:	2310      	movs	r3, #16
 8009778:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800977a:	2310      	movs	r3, #16
 800977c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	0e5b      	lsrs	r3, r3, #25
 8009786:	b2db      	uxtb	r3, r3
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	0f5b      	lsrs	r3, r3, #29
 8009796:	b2db      	uxtb	r3, r3
 8009798:	f003 0307 	and.w	r3, r3, #7
 800979c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	7b3a      	ldrb	r2, [r7, #12]
 80097a2:	4911      	ldr	r1, [pc, #68]	; (80097e8 <UARTEx_SetNbDataToProcess+0x94>)
 80097a4:	5c8a      	ldrb	r2, [r1, r2]
 80097a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097aa:	7b3a      	ldrb	r2, [r7, #12]
 80097ac:	490f      	ldr	r1, [pc, #60]	; (80097ec <UARTEx_SetNbDataToProcess+0x98>)
 80097ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	7b7a      	ldrb	r2, [r7, #13]
 80097c0:	4909      	ldr	r1, [pc, #36]	; (80097e8 <UARTEx_SetNbDataToProcess+0x94>)
 80097c2:	5c8a      	ldrb	r2, [r1, r2]
 80097c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097c8:	7b7a      	ldrb	r2, [r7, #13]
 80097ca:	4908      	ldr	r1, [pc, #32]	; (80097ec <UARTEx_SetNbDataToProcess+0x98>)
 80097cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097da:	bf00      	nop
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	0801c744 	.word	0x0801c744
 80097ec:	0801c74c 	.word	0x0801c74c

080097f0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80097f0:	b5b0      	push	{r4, r5, r7, lr}
 80097f2:	b08c      	sub	sp, #48	; 0x30
 80097f4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80097f6:	4b96      	ldr	r3, [pc, #600]	; (8009a50 <MX_LWIP_Init+0x260>)
 80097f8:	22c0      	movs	r2, #192	; 0xc0
 80097fa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80097fc:	4b94      	ldr	r3, [pc, #592]	; (8009a50 <MX_LWIP_Init+0x260>)
 80097fe:	22a8      	movs	r2, #168	; 0xa8
 8009800:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8009802:	4b93      	ldr	r3, [pc, #588]	; (8009a50 <MX_LWIP_Init+0x260>)
 8009804:	2201      	movs	r2, #1
 8009806:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 8009808:	4b91      	ldr	r3, [pc, #580]	; (8009a50 <MX_LWIP_Init+0x260>)
 800980a:	22c8      	movs	r2, #200	; 0xc8
 800980c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800980e:	4b91      	ldr	r3, [pc, #580]	; (8009a54 <MX_LWIP_Init+0x264>)
 8009810:	22ff      	movs	r2, #255	; 0xff
 8009812:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009814:	4b8f      	ldr	r3, [pc, #572]	; (8009a54 <MX_LWIP_Init+0x264>)
 8009816:	22ff      	movs	r2, #255	; 0xff
 8009818:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800981a:	4b8e      	ldr	r3, [pc, #568]	; (8009a54 <MX_LWIP_Init+0x264>)
 800981c:	22ff      	movs	r2, #255	; 0xff
 800981e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009820:	4b8c      	ldr	r3, [pc, #560]	; (8009a54 <MX_LWIP_Init+0x264>)
 8009822:	2200      	movs	r2, #0
 8009824:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009826:	4b8c      	ldr	r3, [pc, #560]	; (8009a58 <MX_LWIP_Init+0x268>)
 8009828:	22c0      	movs	r2, #192	; 0xc0
 800982a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800982c:	4b8a      	ldr	r3, [pc, #552]	; (8009a58 <MX_LWIP_Init+0x268>)
 800982e:	22a8      	movs	r2, #168	; 0xa8
 8009830:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8009832:	4b89      	ldr	r3, [pc, #548]	; (8009a58 <MX_LWIP_Init+0x268>)
 8009834:	2201      	movs	r2, #1
 8009836:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009838:	4b87      	ldr	r3, [pc, #540]	; (8009a58 <MX_LWIP_Init+0x268>)
 800983a:	2201      	movs	r2, #1
 800983c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800983e:	2100      	movs	r1, #0
 8009840:	2000      	movs	r0, #0
 8009842:	f003 fdd3 	bl	800d3ec <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009846:	4b82      	ldr	r3, [pc, #520]	; (8009a50 <MX_LWIP_Init+0x260>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	061a      	lsls	r2, r3, #24
 800984c:	4b80      	ldr	r3, [pc, #512]	; (8009a50 <MX_LWIP_Init+0x260>)
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	041b      	lsls	r3, r3, #16
 8009852:	431a      	orrs	r2, r3
 8009854:	4b7e      	ldr	r3, [pc, #504]	; (8009a50 <MX_LWIP_Init+0x260>)
 8009856:	789b      	ldrb	r3, [r3, #2]
 8009858:	021b      	lsls	r3, r3, #8
 800985a:	4313      	orrs	r3, r2
 800985c:	4a7c      	ldr	r2, [pc, #496]	; (8009a50 <MX_LWIP_Init+0x260>)
 800985e:	78d2      	ldrb	r2, [r2, #3]
 8009860:	4313      	orrs	r3, r2
 8009862:	061a      	lsls	r2, r3, #24
 8009864:	4b7a      	ldr	r3, [pc, #488]	; (8009a50 <MX_LWIP_Init+0x260>)
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	0619      	lsls	r1, r3, #24
 800986a:	4b79      	ldr	r3, [pc, #484]	; (8009a50 <MX_LWIP_Init+0x260>)
 800986c:	785b      	ldrb	r3, [r3, #1]
 800986e:	041b      	lsls	r3, r3, #16
 8009870:	4319      	orrs	r1, r3
 8009872:	4b77      	ldr	r3, [pc, #476]	; (8009a50 <MX_LWIP_Init+0x260>)
 8009874:	789b      	ldrb	r3, [r3, #2]
 8009876:	021b      	lsls	r3, r3, #8
 8009878:	430b      	orrs	r3, r1
 800987a:	4975      	ldr	r1, [pc, #468]	; (8009a50 <MX_LWIP_Init+0x260>)
 800987c:	78c9      	ldrb	r1, [r1, #3]
 800987e:	430b      	orrs	r3, r1
 8009880:	021b      	lsls	r3, r3, #8
 8009882:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009886:	431a      	orrs	r2, r3
 8009888:	4b71      	ldr	r3, [pc, #452]	; (8009a50 <MX_LWIP_Init+0x260>)
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	0619      	lsls	r1, r3, #24
 800988e:	4b70      	ldr	r3, [pc, #448]	; (8009a50 <MX_LWIP_Init+0x260>)
 8009890:	785b      	ldrb	r3, [r3, #1]
 8009892:	041b      	lsls	r3, r3, #16
 8009894:	4319      	orrs	r1, r3
 8009896:	4b6e      	ldr	r3, [pc, #440]	; (8009a50 <MX_LWIP_Init+0x260>)
 8009898:	789b      	ldrb	r3, [r3, #2]
 800989a:	021b      	lsls	r3, r3, #8
 800989c:	430b      	orrs	r3, r1
 800989e:	496c      	ldr	r1, [pc, #432]	; (8009a50 <MX_LWIP_Init+0x260>)
 80098a0:	78c9      	ldrb	r1, [r1, #3]
 80098a2:	430b      	orrs	r3, r1
 80098a4:	0a1b      	lsrs	r3, r3, #8
 80098a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80098aa:	431a      	orrs	r2, r3
 80098ac:	4b68      	ldr	r3, [pc, #416]	; (8009a50 <MX_LWIP_Init+0x260>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	0619      	lsls	r1, r3, #24
 80098b2:	4b67      	ldr	r3, [pc, #412]	; (8009a50 <MX_LWIP_Init+0x260>)
 80098b4:	785b      	ldrb	r3, [r3, #1]
 80098b6:	041b      	lsls	r3, r3, #16
 80098b8:	4319      	orrs	r1, r3
 80098ba:	4b65      	ldr	r3, [pc, #404]	; (8009a50 <MX_LWIP_Init+0x260>)
 80098bc:	789b      	ldrb	r3, [r3, #2]
 80098be:	021b      	lsls	r3, r3, #8
 80098c0:	430b      	orrs	r3, r1
 80098c2:	4963      	ldr	r1, [pc, #396]	; (8009a50 <MX_LWIP_Init+0x260>)
 80098c4:	78c9      	ldrb	r1, [r1, #3]
 80098c6:	430b      	orrs	r3, r1
 80098c8:	0e1b      	lsrs	r3, r3, #24
 80098ca:	4313      	orrs	r3, r2
 80098cc:	4a63      	ldr	r2, [pc, #396]	; (8009a5c <MX_LWIP_Init+0x26c>)
 80098ce:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80098d0:	4b60      	ldr	r3, [pc, #384]	; (8009a54 <MX_LWIP_Init+0x264>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	061a      	lsls	r2, r3, #24
 80098d6:	4b5f      	ldr	r3, [pc, #380]	; (8009a54 <MX_LWIP_Init+0x264>)
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	041b      	lsls	r3, r3, #16
 80098dc:	431a      	orrs	r2, r3
 80098de:	4b5d      	ldr	r3, [pc, #372]	; (8009a54 <MX_LWIP_Init+0x264>)
 80098e0:	789b      	ldrb	r3, [r3, #2]
 80098e2:	021b      	lsls	r3, r3, #8
 80098e4:	4313      	orrs	r3, r2
 80098e6:	4a5b      	ldr	r2, [pc, #364]	; (8009a54 <MX_LWIP_Init+0x264>)
 80098e8:	78d2      	ldrb	r2, [r2, #3]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	061a      	lsls	r2, r3, #24
 80098ee:	4b59      	ldr	r3, [pc, #356]	; (8009a54 <MX_LWIP_Init+0x264>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	0619      	lsls	r1, r3, #24
 80098f4:	4b57      	ldr	r3, [pc, #348]	; (8009a54 <MX_LWIP_Init+0x264>)
 80098f6:	785b      	ldrb	r3, [r3, #1]
 80098f8:	041b      	lsls	r3, r3, #16
 80098fa:	4319      	orrs	r1, r3
 80098fc:	4b55      	ldr	r3, [pc, #340]	; (8009a54 <MX_LWIP_Init+0x264>)
 80098fe:	789b      	ldrb	r3, [r3, #2]
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	430b      	orrs	r3, r1
 8009904:	4953      	ldr	r1, [pc, #332]	; (8009a54 <MX_LWIP_Init+0x264>)
 8009906:	78c9      	ldrb	r1, [r1, #3]
 8009908:	430b      	orrs	r3, r1
 800990a:	021b      	lsls	r3, r3, #8
 800990c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009910:	431a      	orrs	r2, r3
 8009912:	4b50      	ldr	r3, [pc, #320]	; (8009a54 <MX_LWIP_Init+0x264>)
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	0619      	lsls	r1, r3, #24
 8009918:	4b4e      	ldr	r3, [pc, #312]	; (8009a54 <MX_LWIP_Init+0x264>)
 800991a:	785b      	ldrb	r3, [r3, #1]
 800991c:	041b      	lsls	r3, r3, #16
 800991e:	4319      	orrs	r1, r3
 8009920:	4b4c      	ldr	r3, [pc, #304]	; (8009a54 <MX_LWIP_Init+0x264>)
 8009922:	789b      	ldrb	r3, [r3, #2]
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	430b      	orrs	r3, r1
 8009928:	494a      	ldr	r1, [pc, #296]	; (8009a54 <MX_LWIP_Init+0x264>)
 800992a:	78c9      	ldrb	r1, [r1, #3]
 800992c:	430b      	orrs	r3, r1
 800992e:	0a1b      	lsrs	r3, r3, #8
 8009930:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009934:	431a      	orrs	r2, r3
 8009936:	4b47      	ldr	r3, [pc, #284]	; (8009a54 <MX_LWIP_Init+0x264>)
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	0619      	lsls	r1, r3, #24
 800993c:	4b45      	ldr	r3, [pc, #276]	; (8009a54 <MX_LWIP_Init+0x264>)
 800993e:	785b      	ldrb	r3, [r3, #1]
 8009940:	041b      	lsls	r3, r3, #16
 8009942:	4319      	orrs	r1, r3
 8009944:	4b43      	ldr	r3, [pc, #268]	; (8009a54 <MX_LWIP_Init+0x264>)
 8009946:	789b      	ldrb	r3, [r3, #2]
 8009948:	021b      	lsls	r3, r3, #8
 800994a:	430b      	orrs	r3, r1
 800994c:	4941      	ldr	r1, [pc, #260]	; (8009a54 <MX_LWIP_Init+0x264>)
 800994e:	78c9      	ldrb	r1, [r1, #3]
 8009950:	430b      	orrs	r3, r1
 8009952:	0e1b      	lsrs	r3, r3, #24
 8009954:	4313      	orrs	r3, r2
 8009956:	4a42      	ldr	r2, [pc, #264]	; (8009a60 <MX_LWIP_Init+0x270>)
 8009958:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800995a:	4b3f      	ldr	r3, [pc, #252]	; (8009a58 <MX_LWIP_Init+0x268>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	061a      	lsls	r2, r3, #24
 8009960:	4b3d      	ldr	r3, [pc, #244]	; (8009a58 <MX_LWIP_Init+0x268>)
 8009962:	785b      	ldrb	r3, [r3, #1]
 8009964:	041b      	lsls	r3, r3, #16
 8009966:	431a      	orrs	r2, r3
 8009968:	4b3b      	ldr	r3, [pc, #236]	; (8009a58 <MX_LWIP_Init+0x268>)
 800996a:	789b      	ldrb	r3, [r3, #2]
 800996c:	021b      	lsls	r3, r3, #8
 800996e:	4313      	orrs	r3, r2
 8009970:	4a39      	ldr	r2, [pc, #228]	; (8009a58 <MX_LWIP_Init+0x268>)
 8009972:	78d2      	ldrb	r2, [r2, #3]
 8009974:	4313      	orrs	r3, r2
 8009976:	061a      	lsls	r2, r3, #24
 8009978:	4b37      	ldr	r3, [pc, #220]	; (8009a58 <MX_LWIP_Init+0x268>)
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	0619      	lsls	r1, r3, #24
 800997e:	4b36      	ldr	r3, [pc, #216]	; (8009a58 <MX_LWIP_Init+0x268>)
 8009980:	785b      	ldrb	r3, [r3, #1]
 8009982:	041b      	lsls	r3, r3, #16
 8009984:	4319      	orrs	r1, r3
 8009986:	4b34      	ldr	r3, [pc, #208]	; (8009a58 <MX_LWIP_Init+0x268>)
 8009988:	789b      	ldrb	r3, [r3, #2]
 800998a:	021b      	lsls	r3, r3, #8
 800998c:	430b      	orrs	r3, r1
 800998e:	4932      	ldr	r1, [pc, #200]	; (8009a58 <MX_LWIP_Init+0x268>)
 8009990:	78c9      	ldrb	r1, [r1, #3]
 8009992:	430b      	orrs	r3, r1
 8009994:	021b      	lsls	r3, r3, #8
 8009996:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800999a:	431a      	orrs	r2, r3
 800999c:	4b2e      	ldr	r3, [pc, #184]	; (8009a58 <MX_LWIP_Init+0x268>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	0619      	lsls	r1, r3, #24
 80099a2:	4b2d      	ldr	r3, [pc, #180]	; (8009a58 <MX_LWIP_Init+0x268>)
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	041b      	lsls	r3, r3, #16
 80099a8:	4319      	orrs	r1, r3
 80099aa:	4b2b      	ldr	r3, [pc, #172]	; (8009a58 <MX_LWIP_Init+0x268>)
 80099ac:	789b      	ldrb	r3, [r3, #2]
 80099ae:	021b      	lsls	r3, r3, #8
 80099b0:	430b      	orrs	r3, r1
 80099b2:	4929      	ldr	r1, [pc, #164]	; (8009a58 <MX_LWIP_Init+0x268>)
 80099b4:	78c9      	ldrb	r1, [r1, #3]
 80099b6:	430b      	orrs	r3, r1
 80099b8:	0a1b      	lsrs	r3, r3, #8
 80099ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80099be:	431a      	orrs	r2, r3
 80099c0:	4b25      	ldr	r3, [pc, #148]	; (8009a58 <MX_LWIP_Init+0x268>)
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	0619      	lsls	r1, r3, #24
 80099c6:	4b24      	ldr	r3, [pc, #144]	; (8009a58 <MX_LWIP_Init+0x268>)
 80099c8:	785b      	ldrb	r3, [r3, #1]
 80099ca:	041b      	lsls	r3, r3, #16
 80099cc:	4319      	orrs	r1, r3
 80099ce:	4b22      	ldr	r3, [pc, #136]	; (8009a58 <MX_LWIP_Init+0x268>)
 80099d0:	789b      	ldrb	r3, [r3, #2]
 80099d2:	021b      	lsls	r3, r3, #8
 80099d4:	430b      	orrs	r3, r1
 80099d6:	4920      	ldr	r1, [pc, #128]	; (8009a58 <MX_LWIP_Init+0x268>)
 80099d8:	78c9      	ldrb	r1, [r1, #3]
 80099da:	430b      	orrs	r3, r1
 80099dc:	0e1b      	lsrs	r3, r3, #24
 80099de:	4313      	orrs	r3, r2
 80099e0:	4a20      	ldr	r2, [pc, #128]	; (8009a64 <MX_LWIP_Init+0x274>)
 80099e2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80099e4:	4b20      	ldr	r3, [pc, #128]	; (8009a68 <MX_LWIP_Init+0x278>)
 80099e6:	9302      	str	r3, [sp, #8]
 80099e8:	4b20      	ldr	r3, [pc, #128]	; (8009a6c <MX_LWIP_Init+0x27c>)
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	2300      	movs	r3, #0
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	4b1c      	ldr	r3, [pc, #112]	; (8009a64 <MX_LWIP_Init+0x274>)
 80099f2:	4a1b      	ldr	r2, [pc, #108]	; (8009a60 <MX_LWIP_Init+0x270>)
 80099f4:	4919      	ldr	r1, [pc, #100]	; (8009a5c <MX_LWIP_Init+0x26c>)
 80099f6:	481e      	ldr	r0, [pc, #120]	; (8009a70 <MX_LWIP_Init+0x280>)
 80099f8:	f004 fb7a 	bl	800e0f0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80099fc:	481c      	ldr	r0, [pc, #112]	; (8009a70 <MX_LWIP_Init+0x280>)
 80099fe:	f004 fd29 	bl	800e454 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009a02:	4b1b      	ldr	r3, [pc, #108]	; (8009a70 <MX_LWIP_Init+0x280>)
 8009a04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a08:	089b      	lsrs	r3, r3, #2
 8009a0a:	f003 0301 	and.w	r3, r3, #1
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d003      	beq.n	8009a1c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009a14:	4816      	ldr	r0, [pc, #88]	; (8009a70 <MX_LWIP_Init+0x280>)
 8009a16:	f004 fd2d 	bl	800e474 <netif_set_up>
 8009a1a:	e002      	b.n	8009a22 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009a1c:	4814      	ldr	r0, [pc, #80]	; (8009a70 <MX_LWIP_Init+0x280>)
 8009a1e:	f004 fd95 	bl	800e54c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009a22:	4914      	ldr	r1, [pc, #80]	; (8009a74 <MX_LWIP_Init+0x284>)
 8009a24:	4812      	ldr	r0, [pc, #72]	; (8009a70 <MX_LWIP_Init+0x280>)
 8009a26:	f004 fe27 	bl	800e678 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8009a2a:	4b13      	ldr	r3, [pc, #76]	; (8009a78 <MX_LWIP_Init+0x288>)
 8009a2c:	1d3c      	adds	r4, r7, #4
 8009a2e:	461d      	mov	r5, r3
 8009a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009a38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8009a3c:	1d3b      	adds	r3, r7, #4
 8009a3e:	490c      	ldr	r1, [pc, #48]	; (8009a70 <MX_LWIP_Init+0x280>)
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fcc0 	bl	800a3c6 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009a46:	bf00      	nop
 8009a48:	3720      	adds	r7, #32
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	240045dc 	.word	0x240045dc
 8009a54:	240045d8 	.word	0x240045d8
 8009a58:	2400459c 	.word	0x2400459c
 8009a5c:	240045d4 	.word	0x240045d4
 8009a60:	240045e0 	.word	0x240045e0
 8009a64:	240045e4 	.word	0x240045e4
 8009a68:	0800d329 	.word	0x0800d329
 8009a6c:	0800a111 	.word	0x0800a111
 8009a70:	240045a0 	.word	0x240045a0
 8009a74:	08009a7d 	.word	0x08009a7d
 8009a78:	080186ac 	.word	0x080186ac

08009a7c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08e      	sub	sp, #56	; 0x38
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	601a      	str	r2, [r3, #0]
 8009aa0:	605a      	str	r2, [r3, #4]
 8009aa2:	609a      	str	r2, [r3, #8]
 8009aa4:	60da      	str	r2, [r3, #12]
 8009aa6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a59      	ldr	r2, [pc, #356]	; (8009c14 <HAL_ETH_MspInit+0x184>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	f040 80ab 	bne.w	8009c0a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009ab4:	4b58      	ldr	r3, [pc, #352]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009ab6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009aba:	4a57      	ldr	r2, [pc, #348]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009ac4:	4b54      	ldr	r3, [pc, #336]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009ac6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ace:	623b      	str	r3, [r7, #32]
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009ad2:	4b51      	ldr	r3, [pc, #324]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009ad4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009ad8:	4a4f      	ldr	r2, [pc, #316]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ade:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009ae2:	4b4d      	ldr	r3, [pc, #308]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009ae4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aec:	61fb      	str	r3, [r7, #28]
 8009aee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009af0:	4b49      	ldr	r3, [pc, #292]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009af2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009af6:	4a48      	ldr	r2, [pc, #288]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009afc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009b00:	4b45      	ldr	r3, [pc, #276]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b0a:	61bb      	str	r3, [r7, #24]
 8009b0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b0e:	4b42      	ldr	r3, [pc, #264]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b14:	4a40      	ldr	r2, [pc, #256]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b16:	f043 0304 	orr.w	r3, r3, #4
 8009b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b1e:	4b3e      	ldr	r3, [pc, #248]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b24:	f003 0304 	and.w	r3, r3, #4
 8009b28:	617b      	str	r3, [r7, #20]
 8009b2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b2c:	4b3a      	ldr	r3, [pc, #232]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b32:	4a39      	ldr	r2, [pc, #228]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b34:	f043 0301 	orr.w	r3, r3, #1
 8009b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b3c:	4b36      	ldr	r3, [pc, #216]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	613b      	str	r3, [r7, #16]
 8009b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b4a:	4b33      	ldr	r3, [pc, #204]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b50:	4a31      	ldr	r2, [pc, #196]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b52:	f043 0302 	orr.w	r3, r3, #2
 8009b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b5a:	4b2f      	ldr	r3, [pc, #188]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	60fb      	str	r3, [r7, #12]
 8009b66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009b68:	4b2b      	ldr	r3, [pc, #172]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b6e:	4a2a      	ldr	r2, [pc, #168]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b78:	4b27      	ldr	r3, [pc, #156]	; (8009c18 <HAL_ETH_MspInit+0x188>)
 8009b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b82:	60bb      	str	r3, [r7, #8]
 8009b84:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009b86:	2332      	movs	r3, #50	; 0x32
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b92:	2300      	movs	r3, #0
 8009b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b96:	230b      	movs	r3, #11
 8009b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	481e      	ldr	r0, [pc, #120]	; (8009c1c <HAL_ETH_MspInit+0x18c>)
 8009ba2:	f7fb f815 	bl	8004bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009ba6:	2386      	movs	r3, #134	; 0x86
 8009ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009baa:	2302      	movs	r3, #2
 8009bac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009bb6:	230b      	movs	r3, #11
 8009bb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4817      	ldr	r0, [pc, #92]	; (8009c20 <HAL_ETH_MspInit+0x190>)
 8009bc2:	f7fb f805 	bl	8004bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8009bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bcc:	2302      	movs	r3, #2
 8009bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009bd8:	230b      	movs	r3, #11
 8009bda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8009bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009be0:	4619      	mov	r1, r3
 8009be2:	4810      	ldr	r0, [pc, #64]	; (8009c24 <HAL_ETH_MspInit+0x194>)
 8009be4:	f7fa fff4 	bl	8004bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8009be8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bee:	2302      	movs	r3, #2
 8009bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009bfa:	230b      	movs	r3, #11
 8009bfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c02:	4619      	mov	r1, r3
 8009c04:	4808      	ldr	r0, [pc, #32]	; (8009c28 <HAL_ETH_MspInit+0x198>)
 8009c06:	f7fa ffe3 	bl	8004bd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009c0a:	bf00      	nop
 8009c0c:	3738      	adds	r7, #56	; 0x38
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	40028000 	.word	0x40028000
 8009c18:	58024400 	.word	0x58024400
 8009c1c:	58020800 	.word	0x58020800
 8009c20:	58020000 	.word	0x58020000
 8009c24:	58020400 	.word	0x58020400
 8009c28:	58021800 	.word	0x58021800

08009c2c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009c2c:	b5b0      	push	{r4, r5, r7, lr}
 8009c2e:	b0ac      	sub	sp, #176	; 0xb0
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009c46:	4b91      	ldr	r3, [pc, #580]	; (8009e8c <low_level_init+0x260>)
 8009c48:	4a91      	ldr	r2, [pc, #580]	; (8009e90 <low_level_init+0x264>)
 8009c4a:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8009c52:	2380      	movs	r3, #128	; 0x80
 8009c54:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8009c58:	23e1      	movs	r3, #225	; 0xe1
 8009c5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8009c64:	2300      	movs	r3, #0
 8009c66:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8009c70:	4a86      	ldr	r2, [pc, #536]	; (8009e8c <low_level_init+0x260>)
 8009c72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c76:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009c78:	4b84      	ldr	r3, [pc, #528]	; (8009e8c <low_level_init+0x260>)
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009c7e:	4b83      	ldr	r3, [pc, #524]	; (8009e8c <low_level_init+0x260>)
 8009c80:	4a84      	ldr	r2, [pc, #528]	; (8009e94 <low_level_init+0x268>)
 8009c82:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009c84:	4b81      	ldr	r3, [pc, #516]	; (8009e8c <low_level_init+0x260>)
 8009c86:	4a84      	ldr	r2, [pc, #528]	; (8009e98 <low_level_init+0x26c>)
 8009c88:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009c8a:	4b80      	ldr	r3, [pc, #512]	; (8009e8c <low_level_init+0x260>)
 8009c8c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009c90:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009c92:	487e      	ldr	r0, [pc, #504]	; (8009e8c <low_level_init+0x260>)
 8009c94:	f7f8 fc90 	bl	80025b8 <HAL_ETH_Init>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009c9e:	2234      	movs	r2, #52	; 0x34
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	487e      	ldr	r0, [pc, #504]	; (8009e9c <low_level_init+0x270>)
 8009ca4:	f00d fcf1 	bl	801768a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009ca8:	4b7c      	ldr	r3, [pc, #496]	; (8009e9c <low_level_init+0x270>)
 8009caa:	2221      	movs	r2, #33	; 0x21
 8009cac:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009cae:	4b7b      	ldr	r3, [pc, #492]	; (8009e9c <low_level_init+0x270>)
 8009cb0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009cb4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009cb6:	4b79      	ldr	r3, [pc, #484]	; (8009e9c <low_level_init+0x270>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009cbc:	4878      	ldr	r0, [pc, #480]	; (8009ea0 <low_level_init+0x274>)
 8009cbe:	f004 f8d1 	bl	800de64 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2206      	movs	r2, #6
 8009cc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009cca:	4b70      	ldr	r3, [pc, #448]	; (8009e8c <low_level_init+0x260>)
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	781a      	ldrb	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009cd6:	4b6d      	ldr	r3, [pc, #436]	; (8009e8c <low_level_init+0x260>)
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	785a      	ldrb	r2, [r3, #1]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009ce2:	4b6a      	ldr	r3, [pc, #424]	; (8009e8c <low_level_init+0x260>)
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	789a      	ldrb	r2, [r3, #2]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009cee:	4b67      	ldr	r3, [pc, #412]	; (8009e8c <low_level_init+0x260>)
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	78da      	ldrb	r2, [r3, #3]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009cfa:	4b64      	ldr	r3, [pc, #400]	; (8009e8c <low_level_init+0x260>)
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	791a      	ldrb	r2, [r3, #4]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009d06:	4b61      	ldr	r3, [pc, #388]	; (8009e8c <low_level_init+0x260>)
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	795a      	ldrb	r2, [r3, #5]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009d18:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d20:	f043 030a 	orr.w	r3, r3, #10
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d32:	e012      	b.n	8009d5a <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8009d34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009d38:	4613      	mov	r3, r2
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	4413      	add	r3, r2
 8009d3e:	025b      	lsls	r3, r3, #9
 8009d40:	4a58      	ldr	r2, [pc, #352]	; (8009ea4 <low_level_init+0x278>)
 8009d42:	441a      	add	r2, r3
 8009d44:	2300      	movs	r3, #0
 8009d46:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009d4a:	4850      	ldr	r0, [pc, #320]	; (8009e8c <low_level_init+0x260>)
 8009d4c:	f7f8 fd0e 	bl	800276c <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d54:	3301      	adds	r3, #1
 8009d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d9e8      	bls.n	8009d34 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8009d62:	2300      	movs	r3, #0
 8009d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d66:	2300      	movs	r3, #0
 8009d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8009d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d6e:	2101      	movs	r1, #1
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 fc25 	bl	800a5c0 <osSemaphoreCreate>
 8009d76:	4603      	mov	r3, r0
 8009d78:	4a4b      	ldr	r2, [pc, #300]	; (8009ea8 <low_level_init+0x27c>)
 8009d7a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009d7c:	4b4b      	ldr	r3, [pc, #300]	; (8009eac <low_level_init+0x280>)
 8009d7e:	f107 040c 	add.w	r4, r7, #12
 8009d82:	461d      	mov	r5, r3
 8009d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009d8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009d90:	f107 030c 	add.w	r3, r7, #12
 8009d94:	6879      	ldr	r1, [r7, #4]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 fb15 	bl	800a3c6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009d9c:	4944      	ldr	r1, [pc, #272]	; (8009eb0 <low_level_init+0x284>)
 8009d9e:	4845      	ldr	r0, [pc, #276]	; (8009eb4 <low_level_init+0x288>)
 8009da0:	f7f8 f8b9 	bl	8001f16 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009da4:	4843      	ldr	r0, [pc, #268]	; (8009eb4 <low_level_init+0x288>)
 8009da6:	f7f8 f8e8 	bl	8001f7a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009daa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d165      	bne.n	8009e7e <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009db2:	4840      	ldr	r0, [pc, #256]	; (8009eb4 <low_level_init+0x288>)
 8009db4:	f7f8 f989 	bl	80020ca <LAN8742_GetLinkState>
 8009db8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8009dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	dc06      	bgt.n	8009dd2 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f004 fc27 	bl	800e618 <netif_set_link_down>
      netif_set_down(netif);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f004 fbbe 	bl	800e54c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009dd0:	e057      	b.n	8009e82 <low_level_init+0x256>
 8009dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dd6:	3b02      	subs	r3, #2
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d82b      	bhi.n	8009e34 <low_level_init+0x208>
 8009ddc:	a201      	add	r2, pc, #4	; (adr r2, 8009de4 <low_level_init+0x1b8>)
 8009dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de2:	bf00      	nop
 8009de4:	08009df5 	.word	0x08009df5
 8009de8:	08009e07 	.word	0x08009e07
 8009dec:	08009e17 	.word	0x08009e17
 8009df0:	08009e27 	.word	0x08009e27
        duplex = ETH_FULLDUPLEX_MODE;
 8009df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8009dfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8009e04:	e01f      	b.n	8009e46 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 8009e06:	2300      	movs	r3, #0
 8009e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8009e0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8009e14:	e017      	b.n	8009e46 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 8009e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8009e24:	e00f      	b.n	8009e46 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 8009e26:	2300      	movs	r3, #0
 8009e28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8009e32:	e008      	b.n	8009e46 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 8009e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8009e3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8009e44:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009e46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	480f      	ldr	r0, [pc, #60]	; (8009e8c <low_level_init+0x260>)
 8009e4e:	f7f9 f935 	bl	80030bc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8009e52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e56:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 8009e58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009e5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e62:	4619      	mov	r1, r3
 8009e64:	4809      	ldr	r0, [pc, #36]	; (8009e8c <low_level_init+0x260>)
 8009e66:	f7f9 fafd 	bl	8003464 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8009e6a:	4808      	ldr	r0, [pc, #32]	; (8009e8c <low_level_init+0x260>)
 8009e6c:	f7f8 fcbf 	bl	80027ee <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f004 faff 	bl	800e474 <netif_set_up>
    netif_set_link_up(netif);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f004 fb9a 	bl	800e5b0 <netif_set_link_up>
}
 8009e7c:	e001      	b.n	8009e82 <low_level_init+0x256>
    Error_Handler();
 8009e7e:	f7f7 fc39 	bl	80016f4 <Error_Handler>
}
 8009e82:	bf00      	nop
 8009e84:	37b0      	adds	r7, #176	; 0xb0
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bdb0      	pop	{r4, r5, r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	240046d4 	.word	0x240046d4
 8009e90:	40028000 	.word	0x40028000
 8009e94:	30000080 	.word	0x30000080
 8009e98:	30000000 	.word	0x30000000
 8009e9c:	2400475c 	.word	0x2400475c
 8009ea0:	0801c754 	.word	0x0801c754
 8009ea4:	30000100 	.word	0x30000100
 8009ea8:	2400037c 	.word	0x2400037c
 8009eac:	080186d0 	.word	0x080186d0
 8009eb0:	24000020 	.word	0x24000020
 8009eb4:	240046b4 	.word	0x240046b4

08009eb8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b092      	sub	sp, #72	; 0x48
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009ecc:	f107 030c 	add.w	r3, r7, #12
 8009ed0:	2230      	movs	r2, #48	; 0x30
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f00d fbd8 	bl	801768a <memset>

  for(q = p; q != NULL; q = q->next)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	643b      	str	r3, [r7, #64]	; 0x40
 8009ede:	e049      	b.n	8009f74 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d902      	bls.n	8009eec <low_level_output+0x34>
      return ERR_IF;
 8009ee6:	f06f 030b 	mvn.w	r3, #11
 8009eea:	e056      	b.n	8009f9a <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8009eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eee:	6859      	ldr	r1, [r3, #4]
 8009ef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009efe:	4413      	add	r3, r2
 8009f00:	3b3c      	subs	r3, #60	; 0x3c
 8009f02:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f06:	895b      	ldrh	r3, [r3, #10]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	4413      	add	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f18:	4413      	add	r3, r2
 8009f1a:	3b38      	subs	r3, #56	; 0x38
 8009f1c:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d012      	beq.n	8009f4a <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f26:	1e5a      	subs	r2, r3, #1
 8009f28:	f107 000c 	add.w	r0, r7, #12
 8009f2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f2e:	460b      	mov	r3, r1
 8009f30:	005b      	lsls	r3, r3, #1
 8009f32:	440b      	add	r3, r1
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	18c1      	adds	r1, r0, r3
 8009f38:	4613      	mov	r3, r2
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	4413      	add	r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f44:	4413      	add	r3, r2
 8009f46:	3b34      	subs	r3, #52	; 0x34
 8009f48:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10a      	bne.n	8009f68 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8009f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f54:	4613      	mov	r3, r2
 8009f56:	005b      	lsls	r3, r3, #1
 8009f58:	4413      	add	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f60:	4413      	add	r3, r2
 8009f62:	3b34      	subs	r3, #52	; 0x34
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	643b      	str	r3, [r7, #64]	; 0x40
 8009f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1b2      	bne.n	8009ee0 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	891b      	ldrh	r3, [r3, #8]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4b08      	ldr	r3, [pc, #32]	; (8009fa4 <low_level_output+0xec>)
 8009f82:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009f84:	4a07      	ldr	r2, [pc, #28]	; (8009fa4 <low_level_output+0xec>)
 8009f86:	f107 030c 	add.w	r3, r7, #12
 8009f8a:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009f8c:	2214      	movs	r2, #20
 8009f8e:	4905      	ldr	r1, [pc, #20]	; (8009fa4 <low_level_output+0xec>)
 8009f90:	4805      	ldr	r0, [pc, #20]	; (8009fa8 <low_level_output+0xf0>)
 8009f92:	f7f8 fd2b 	bl	80029ec <HAL_ETH_Transmit>

  return errval;
 8009f96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3748      	adds	r7, #72	; 0x48
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	2400475c 	.word	0x2400475c
 8009fa8:	240046d4 	.word	0x240046d4

08009fac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b098      	sub	sp, #96	; 0x60
 8009fb0:	af02      	add	r7, sp, #8
 8009fb2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60bb      	str	r3, [r7, #8]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009fc0:	f107 030c 	add.w	r3, r7, #12
 8009fc4:	2230      	movs	r2, #48	; 0x30
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f00d fb5e 	bl	801768a <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8009fce:	2300      	movs	r3, #0
 8009fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8009fd2:	e015      	b.n	800a000 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8009fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fd6:	1c5a      	adds	r2, r3, #1
 8009fd8:	f107 010c 	add.w	r1, r7, #12
 8009fdc:	4613      	mov	r3, r2
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	4413      	add	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4419      	add	r1, r3
 8009fe6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fe8:	4613      	mov	r3, r2
 8009fea:	005b      	lsls	r3, r3, #1
 8009fec:	4413      	add	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009ff4:	4413      	add	r3, r2
 8009ff6:	3b44      	subs	r3, #68	; 0x44
 8009ff8:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8009ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	653b      	str	r3, [r7, #80]	; 0x50
 800a000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a002:	2b02      	cmp	r3, #2
 800a004:	d9e6      	bls.n	8009fd4 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800a006:	f107 030c 	add.w	r3, r7, #12
 800a00a:	4619      	mov	r1, r3
 800a00c:	4828      	ldr	r0, [pc, #160]	; (800a0b0 <low_level_input+0x104>)
 800a00e:	f7f8 fe66 	bl	8002cde <HAL_ETH_GetRxDataBuffer>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d145      	bne.n	800a0a4 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800a018:	f107 0308 	add.w	r3, r7, #8
 800a01c:	4619      	mov	r1, r3
 800a01e:	4824      	ldr	r0, [pc, #144]	; (800a0b0 <low_level_input+0x104>)
 800a020:	f7f8 fefb 	bl	8002e1a <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800a024:	4822      	ldr	r0, [pc, #136]	; (800a0b0 <low_level_input+0x104>)
 800a026:	f7f8 ff2b 	bl	8002e80 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a030:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800a032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a034:	2b00      	cmp	r3, #0
 800a036:	dd1d      	ble.n	800a074 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800a038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a03a:	f003 021f 	and.w	r2, r3, #31
 800a03e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a040:	4413      	add	r3, r2
 800a042:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800a044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a046:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800a048:	f3bf 8f4f 	dsb	sy
}
 800a04c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800a04e:	4a19      	ldr	r2, [pc, #100]	; (800a0b4 <low_level_input+0x108>)
 800a050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a052:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800a056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a058:	3320      	adds	r3, #32
 800a05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800a05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a05e:	3b20      	subs	r3, #32
 800a060:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800a062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a064:	2b00      	cmp	r3, #0
 800a066:	dcf2      	bgt.n	800a04e <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800a068:	f3bf 8f4f 	dsb	sy
}
 800a06c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a06e:	f3bf 8f6f 	isb	sy
}
 800a072:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800a074:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a076:	4810      	ldr	r0, [pc, #64]	; (800a0b8 <low_level_input+0x10c>)
 800a078:	f003 ff70 	bl	800df5c <memp_malloc_pool>
 800a07c:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800a07e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00f      	beq.n	800a0a4 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800a084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a086:	4a0d      	ldr	r2, [pc, #52]	; (800a0bc <low_level_input+0x110>)
 800a088:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	b299      	uxth	r1, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	b292      	uxth	r2, r2
 800a094:	9201      	str	r2, [sp, #4]
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a09a:	2241      	movs	r2, #65	; 0x41
 800a09c:	2000      	movs	r0, #0
 800a09e:	f004 fcdf 	bl	800ea60 <pbuf_alloced_custom>
 800a0a2:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800a0a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3758      	adds	r7, #88	; 0x58
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	240046d4 	.word	0x240046d4
 800a0b4:	e000ed00 	.word	0xe000ed00
 800a0b8:	0801c754 	.word	0x0801c754
 800a0bc:	0800a16d 	.word	0x0800a16d

0800a0c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a0cc:	4b0f      	ldr	r3, [pc, #60]	; (800a10c <ethernetif_input+0x4c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f04f 31ff 	mov.w	r1, #4294967295
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 faa5 	bl	800a624 <osSemaphoreWait>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1f5      	bne.n	800a0cc <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f7ff ff63 	bl	8009fac <low_level_input>
 800a0e6:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	68f9      	ldr	r1, [r7, #12]
 800a0f4:	68b8      	ldr	r0, [r7, #8]
 800a0f6:	4798      	blx	r3
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800a0fe:	68b8      	ldr	r0, [r7, #8]
 800a100:	f004 fe68 	bl	800edd4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1ea      	bne.n	800a0e0 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a10a:	e7df      	b.n	800a0cc <ethernetif_input+0xc>
 800a10c:	2400037c 	.word	0x2400037c

0800a110 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d106      	bne.n	800a12c <ethernetif_init+0x1c>
 800a11e:	4b0e      	ldr	r3, [pc, #56]	; (800a158 <ethernetif_init+0x48>)
 800a120:	f240 2243 	movw	r2, #579	; 0x243
 800a124:	490d      	ldr	r1, [pc, #52]	; (800a15c <ethernetif_init+0x4c>)
 800a126:	480e      	ldr	r0, [pc, #56]	; (800a160 <ethernetif_init+0x50>)
 800a128:	f00d fb12 	bl	8017750 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2273      	movs	r2, #115	; 0x73
 800a130:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2274      	movs	r2, #116	; 0x74
 800a138:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a09      	ldr	r2, [pc, #36]	; (800a164 <ethernetif_init+0x54>)
 800a140:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a08      	ldr	r2, [pc, #32]	; (800a168 <ethernetif_init+0x58>)
 800a146:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff fd6f 	bl	8009c2c <low_level_init>

  return ERR_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	080186ec 	.word	0x080186ec
 800a15c:	08018708 	.word	0x08018708
 800a160:	08018718 	.word	0x08018718
 800a164:	080154b9 	.word	0x080154b9
 800a168:	08009eb9 	.word	0x08009eb9

0800a16c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a178:	68f9      	ldr	r1, [r7, #12]
 800a17a:	4803      	ldr	r0, [pc, #12]	; (800a188 <pbuf_free_custom+0x1c>)
 800a17c:	f003 ff62 	bl	800e044 <memp_free_pool>
}
 800a180:	bf00      	nop
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	0801c754 	.word	0x0801c754

0800a18c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a190:	f7f8 f872 	bl	8002278 <HAL_GetTick>
 800a194:	4603      	mov	r3, r0
}
 800a196:	4618      	mov	r0, r3
 800a198:	bd80      	pop	{r7, pc}
	...

0800a19c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a1a0:	4802      	ldr	r0, [pc, #8]	; (800a1ac <ETH_PHY_IO_Init+0x10>)
 800a1a2:	f7f9 f979 	bl	8003498 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	240046d4 	.word	0x240046d4

0800a1b0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
  return 0;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	68f9      	ldr	r1, [r7, #12]
 800a1d2:	4807      	ldr	r0, [pc, #28]	; (800a1f0 <ETH_PHY_IO_ReadReg+0x30>)
 800a1d4:	f7f8 feca 	bl	8002f6c <HAL_ETH_ReadPHYRegister>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a1de:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e2:	e000      	b.n	800a1e6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	240046d4 	.word	0x240046d4

0800a1f4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	68f9      	ldr	r1, [r7, #12]
 800a206:	4807      	ldr	r0, [pc, #28]	; (800a224 <ETH_PHY_IO_WriteReg+0x30>)
 800a208:	f7f8 ff04 	bl	8003014 <HAL_ETH_WritePHYRegister>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d002      	beq.n	800a218 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a212:	f04f 33ff 	mov.w	r3, #4294967295
 800a216:	e000      	b.n	800a21a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	240046d4 	.word	0x240046d4

0800a228 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a22c:	f7f8 f824 	bl	8002278 <HAL_GetTick>
 800a230:	4603      	mov	r3, r0
}
 800a232:	4618      	mov	r0, r3
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b0a0      	sub	sp, #128	; 0x80
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800a240:	2300      	movs	r3, #0
 800a242:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a244:	2300      	movs	r3, #0
 800a246:	67bb      	str	r3, [r7, #120]	; 0x78
 800a248:	2300      	movs	r3, #0
 800a24a:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a250:	483a      	ldr	r0, [pc, #232]	; (800a33c <ethernet_link_thread+0x104>)
 800a252:	f7f7 ff3a 	bl	80020ca <LAN8742_GetLinkState>
 800a256:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a25a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a25e:	089b      	lsrs	r3, r3, #2
 800a260:	f003 0301 	and.w	r3, r3, #1
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00c      	beq.n	800a284 <ethernet_link_thread+0x4c>
 800a26a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	dc09      	bgt.n	800a284 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 800a270:	4833      	ldr	r0, [pc, #204]	; (800a340 <ethernet_link_thread+0x108>)
 800a272:	f7f8 fb41 	bl	80028f8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a276:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a278:	f004 f968 	bl	800e54c <netif_set_down>
    netif_set_link_down(netif);
 800a27c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a27e:	f004 f9cb 	bl	800e618 <netif_set_link_down>
 800a282:	e056      	b.n	800a332 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a28a:	f003 0304 	and.w	r3, r3, #4
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d14f      	bne.n	800a332 <ethernet_link_thread+0xfa>
 800a292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a294:	2b01      	cmp	r3, #1
 800a296:	dd4c      	ble.n	800a332 <ethernet_link_thread+0xfa>
 800a298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a29a:	3b02      	subs	r3, #2
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	d82b      	bhi.n	800a2f8 <ethernet_link_thread+0xc0>
 800a2a0:	a201      	add	r2, pc, #4	; (adr r2, 800a2a8 <ethernet_link_thread+0x70>)
 800a2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a6:	bf00      	nop
 800a2a8:	0800a2b9 	.word	0x0800a2b9
 800a2ac:	0800a2cb 	.word	0x0800a2cb
 800a2b0:	0800a2db 	.word	0x0800a2db
 800a2b4:	0800a2eb 	.word	0x0800a2eb
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a2b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2bc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a2be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2c2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a2c8:	e017      	b.n	800a2fa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a2ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a2d8:	e00f      	b.n	800a2fa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a2da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2de:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a2e8:	e007      	b.n	800a2fa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a2f6:	e000      	b.n	800a2fa <ethernet_link_thread+0xc2>
    default:
      break;
 800a2f8:	bf00      	nop
    }

    if(linkchanged)
 800a2fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d018      	beq.n	800a332 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a300:	f107 0308 	add.w	r3, r7, #8
 800a304:	4619      	mov	r1, r3
 800a306:	480e      	ldr	r0, [pc, #56]	; (800a340 <ethernet_link_thread+0x108>)
 800a308:	f7f8 fed8 	bl	80030bc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a30c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a30e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a312:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a314:	f107 0308 	add.w	r3, r7, #8
 800a318:	4619      	mov	r1, r3
 800a31a:	4809      	ldr	r0, [pc, #36]	; (800a340 <ethernet_link_thread+0x108>)
 800a31c:	f7f9 f8a2 	bl	8003464 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800a320:	4807      	ldr	r0, [pc, #28]	; (800a340 <ethernet_link_thread+0x108>)
 800a322:	f7f8 fa64 	bl	80027ee <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a326:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a328:	f004 f8a4 	bl	800e474 <netif_set_up>
      netif_set_link_up(netif);
 800a32c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a32e:	f004 f93f 	bl	800e5b0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a332:	2064      	movs	r0, #100	; 0x64
 800a334:	f000 f893 	bl	800a45e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a338:	e78a      	b.n	800a250 <ethernet_link_thread+0x18>
 800a33a:	bf00      	nop
 800a33c:	240046b4 	.word	0x240046b4
 800a340:	240046d4 	.word	0x240046d4

0800a344 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a34e:	2300      	movs	r3, #0
 800a350:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a356:	2b84      	cmp	r3, #132	; 0x84
 800a358:	d005      	beq.n	800a366 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a35a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	4413      	add	r3, r2
 800a362:	3303      	adds	r3, #3
 800a364:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a366:	68fb      	ldr	r3, [r7, #12]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a37a:	f3ef 8305 	mrs	r3, IPSR
 800a37e:	607b      	str	r3, [r7, #4]
  return(result);
 800a380:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a382:	2b00      	cmp	r3, #0
 800a384:	bf14      	ite	ne
 800a386:	2301      	movne	r3, #1
 800a388:	2300      	moveq	r3, #0
 800a38a:	b2db      	uxtb	r3, r3
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a39c:	f001 fc3e 	bl	800bc1c <vTaskStartScheduler>
  
  return osOK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a3aa:	f7ff ffe3 	bl	800a374 <inHandlerMode>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d003      	beq.n	800a3bc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a3b4:	f001 fd56 	bl	800be64 <xTaskGetTickCountFromISR>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	e002      	b.n	800a3c2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a3bc:	f001 fd42 	bl	800be44 <xTaskGetTickCount>
 800a3c0:	4603      	mov	r3, r0
  }
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a3c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3c8:	b089      	sub	sp, #36	; 0x24
 800a3ca:	af04      	add	r7, sp, #16
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d020      	beq.n	800a41a <osThreadCreate+0x54>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d01c      	beq.n	800a41a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685c      	ldr	r4, [r3, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681d      	ldr	r5, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691e      	ldr	r6, [r3, #16]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff ffa6 	bl	800a344 <makeFreeRtosPriority>
 800a3f8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a402:	9202      	str	r2, [sp, #8]
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	9100      	str	r1, [sp, #0]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	4632      	mov	r2, r6
 800a40c:	4629      	mov	r1, r5
 800a40e:	4620      	mov	r0, r4
 800a410:	f001 fa26 	bl	800b860 <xTaskCreateStatic>
 800a414:	4603      	mov	r3, r0
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	e01c      	b.n	800a454 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685c      	ldr	r4, [r3, #4]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a426:	b29e      	uxth	r6, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a42e:	4618      	mov	r0, r3
 800a430:	f7ff ff88 	bl	800a344 <makeFreeRtosPriority>
 800a434:	4602      	mov	r2, r0
 800a436:	f107 030c 	add.w	r3, r7, #12
 800a43a:	9301      	str	r3, [sp, #4]
 800a43c:	9200      	str	r2, [sp, #0]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	4632      	mov	r2, r6
 800a442:	4629      	mov	r1, r5
 800a444:	4620      	mov	r0, r4
 800a446:	f001 fa68 	bl	800b91a <xTaskCreate>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d001      	beq.n	800a454 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a450:	2300      	movs	r3, #0
 800a452:	e000      	b.n	800a456 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a454:	68fb      	ldr	r3, [r7, #12]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a45e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b084      	sub	sp, #16
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <osDelay+0x16>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	e000      	b.n	800a476 <osDelay+0x18>
 800a474:	2301      	movs	r3, #1
 800a476:	4618      	mov	r0, r3
 800a478:	f001 fb9c 	bl	800bbb4 <vTaskDelay>
  
  return osOK;
 800a47c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b082      	sub	sp, #8
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d007      	beq.n	800a4a6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	4619      	mov	r1, r3
 800a49c:	2001      	movs	r0, #1
 800a49e:	f000 fc0a 	bl	800acb6 <xQueueCreateMutexStatic>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	e003      	b.n	800a4ae <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a4a6:	2001      	movs	r0, #1
 800a4a8:	f000 fbed 	bl	800ac86 <xQueueCreateMutex>
 800a4ac:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <osMutexWait+0x18>
    return osErrorParameter;
 800a4cc:	2380      	movs	r3, #128	; 0x80
 800a4ce:	e03a      	b.n	800a546 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4da:	d103      	bne.n	800a4e4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e0:	60fb      	str	r3, [r7, #12]
 800a4e2:	e009      	b.n	800a4f8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d006      	beq.n	800a4f8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <osMutexWait+0x40>
      ticks = 1;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a4f8:	f7ff ff3c 	bl	800a374 <inHandlerMode>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d017      	beq.n	800a532 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a502:	f107 0308 	add.w	r3, r7, #8
 800a506:	461a      	mov	r2, r3
 800a508:	2100      	movs	r1, #0
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f001 f800 	bl	800b510 <xQueueReceiveFromISR>
 800a510:	4603      	mov	r3, r0
 800a512:	2b01      	cmp	r3, #1
 800a514:	d001      	beq.n	800a51a <osMutexWait+0x62>
      return osErrorOS;
 800a516:	23ff      	movs	r3, #255	; 0xff
 800a518:	e015      	b.n	800a546 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d011      	beq.n	800a544 <osMutexWait+0x8c>
 800a520:	4b0b      	ldr	r3, [pc, #44]	; (800a550 <osMutexWait+0x98>)
 800a522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	e008      	b.n	800a544 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a532:	68f9      	ldr	r1, [r7, #12]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fedf 	bl	800b2f8 <xQueueSemaphoreTake>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d001      	beq.n	800a544 <osMutexWait+0x8c>
    return osErrorOS;
 800a540:	23ff      	movs	r3, #255	; 0xff
 800a542:	e000      	b.n	800a546 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	e000ed04 	.word	0xe000ed04

0800a554 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a560:	2300      	movs	r3, #0
 800a562:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a564:	f7ff ff06 	bl	800a374 <inHandlerMode>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d016      	beq.n	800a59c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a56e:	f107 0308 	add.w	r3, r7, #8
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fd52 	bl	800b01e <xQueueGiveFromISR>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d001      	beq.n	800a584 <osMutexRelease+0x30>
      return osErrorOS;
 800a580:	23ff      	movs	r3, #255	; 0xff
 800a582:	e017      	b.n	800a5b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d013      	beq.n	800a5b2 <osMutexRelease+0x5e>
 800a58a:	4b0c      	ldr	r3, [pc, #48]	; (800a5bc <osMutexRelease+0x68>)
 800a58c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a590:	601a      	str	r2, [r3, #0]
 800a592:	f3bf 8f4f 	dsb	sy
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	e00a      	b.n	800a5b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a59c:	2300      	movs	r3, #0
 800a59e:	2200      	movs	r2, #0
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fba2 	bl	800acec <xQueueGenericSend>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d001      	beq.n	800a5b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a5ae:	23ff      	movs	r3, #255	; 0xff
 800a5b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	e000ed04 	.word	0xe000ed04

0800a5c0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af02      	add	r7, sp, #8
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00f      	beq.n	800a5f2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d10a      	bne.n	800a5ee <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	2203      	movs	r2, #3
 800a5de:	9200      	str	r2, [sp, #0]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	2001      	movs	r0, #1
 800a5e6:	f000 fa63 	bl	800aab0 <xQueueGenericCreateStatic>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	e016      	b.n	800a61c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	e014      	b.n	800a61c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d110      	bne.n	800a61a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a5f8:	2203      	movs	r2, #3
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	f000 facf 	bl	800aba0 <xQueueGenericCreate>
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d005      	beq.n	800a616 <osSemaphoreCreate+0x56>
 800a60a:	2300      	movs	r3, #0
 800a60c:	2200      	movs	r2, #0
 800a60e:	2100      	movs	r1, #0
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f000 fb6b 	bl	800acec <xQueueGenericSend>
      return sema;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	e000      	b.n	800a61c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a61a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a62e:	2300      	movs	r3, #0
 800a630:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d101      	bne.n	800a63c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a638:	2380      	movs	r3, #128	; 0x80
 800a63a:	e03a      	b.n	800a6b2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a646:	d103      	bne.n	800a650 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a648:	f04f 33ff 	mov.w	r3, #4294967295
 800a64c:	60fb      	str	r3, [r7, #12]
 800a64e:	e009      	b.n	800a664 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d006      	beq.n	800a664 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <osSemaphoreWait+0x40>
      ticks = 1;
 800a660:	2301      	movs	r3, #1
 800a662:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a664:	f7ff fe86 	bl	800a374 <inHandlerMode>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d017      	beq.n	800a69e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a66e:	f107 0308 	add.w	r3, r7, #8
 800a672:	461a      	mov	r2, r3
 800a674:	2100      	movs	r1, #0
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 ff4a 	bl	800b510 <xQueueReceiveFromISR>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d001      	beq.n	800a686 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a682:	23ff      	movs	r3, #255	; 0xff
 800a684:	e015      	b.n	800a6b2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d011      	beq.n	800a6b0 <osSemaphoreWait+0x8c>
 800a68c:	4b0b      	ldr	r3, [pc, #44]	; (800a6bc <osSemaphoreWait+0x98>)
 800a68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	e008      	b.n	800a6b0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a69e:	68f9      	ldr	r1, [r7, #12]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fe29 	bl	800b2f8 <xQueueSemaphoreTake>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d001      	beq.n	800a6b0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a6ac:	23ff      	movs	r3, #255	; 0xff
 800a6ae:	e000      	b.n	800a6b2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	e000ed04 	.word	0xe000ed04

0800a6c0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a6c0:	b590      	push	{r4, r7, lr}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af02      	add	r7, sp, #8
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d011      	beq.n	800a6f6 <osMessageCreate+0x36>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00d      	beq.n	800a6f6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6818      	ldr	r0, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6859      	ldr	r1, [r3, #4]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	689a      	ldr	r2, [r3, #8]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	2400      	movs	r4, #0
 800a6ec:	9400      	str	r4, [sp, #0]
 800a6ee:	f000 f9df 	bl	800aab0 <xQueueGenericCreateStatic>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	e008      	b.n	800a708 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6818      	ldr	r0, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	4619      	mov	r1, r3
 800a702:	f000 fa4d 	bl	800aba0 <xQueueGenericCreate>
 800a706:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a708:	4618      	mov	r0, r3
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd90      	pop	{r4, r7, pc}

0800a710 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a71c:	2300      	movs	r3, #0
 800a71e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <osMessagePut+0x1e>
    ticks = 1;
 800a72a:	2301      	movs	r3, #1
 800a72c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a72e:	f7ff fe21 	bl	800a374 <inHandlerMode>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d018      	beq.n	800a76a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a738:	f107 0210 	add.w	r2, r7, #16
 800a73c:	f107 0108 	add.w	r1, r7, #8
 800a740:	2300      	movs	r3, #0
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f000 fbd0 	bl	800aee8 <xQueueGenericSendFromISR>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d001      	beq.n	800a752 <osMessagePut+0x42>
      return osErrorOS;
 800a74e:	23ff      	movs	r3, #255	; 0xff
 800a750:	e018      	b.n	800a784 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d014      	beq.n	800a782 <osMessagePut+0x72>
 800a758:	4b0c      	ldr	r3, [pc, #48]	; (800a78c <osMessagePut+0x7c>)
 800a75a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a75e:	601a      	str	r2, [r3, #0]
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	e00b      	b.n	800a782 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a76a:	f107 0108 	add.w	r1, r7, #8
 800a76e:	2300      	movs	r3, #0
 800a770:	697a      	ldr	r2, [r7, #20]
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 faba 	bl	800acec <xQueueGenericSend>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d001      	beq.n	800a782 <osMessagePut+0x72>
      return osErrorOS;
 800a77e:	23ff      	movs	r3, #255	; 0xff
 800a780:	e000      	b.n	800a784 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	e000ed04 	.word	0xe000ed04

0800a790 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a790:	b590      	push	{r4, r7, lr}
 800a792:	b08b      	sub	sp, #44	; 0x2c
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10a      	bne.n	800a7c0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a7aa:	2380      	movs	r3, #128	; 0x80
 800a7ac:	617b      	str	r3, [r7, #20]
    return event;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	461c      	mov	r4, r3
 800a7b2:	f107 0314 	add.w	r3, r7, #20
 800a7b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a7be:	e054      	b.n	800a86a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ce:	d103      	bne.n	800a7d8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800a7d6:	e009      	b.n	800a7ec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d006      	beq.n	800a7ec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d101      	bne.n	800a7ec <osMessageGet+0x5c>
      ticks = 1;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a7ec:	f7ff fdc2 	bl	800a374 <inHandlerMode>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d01c      	beq.n	800a830 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a7f6:	f107 0220 	add.w	r2, r7, #32
 800a7fa:	f107 0314 	add.w	r3, r7, #20
 800a7fe:	3304      	adds	r3, #4
 800a800:	4619      	mov	r1, r3
 800a802:	68b8      	ldr	r0, [r7, #8]
 800a804:	f000 fe84 	bl	800b510 <xQueueReceiveFromISR>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d102      	bne.n	800a814 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a80e:	2310      	movs	r3, #16
 800a810:	617b      	str	r3, [r7, #20]
 800a812:	e001      	b.n	800a818 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a814:	2300      	movs	r3, #0
 800a816:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d01d      	beq.n	800a85a <osMessageGet+0xca>
 800a81e:	4b15      	ldr	r3, [pc, #84]	; (800a874 <osMessageGet+0xe4>)
 800a820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	e014      	b.n	800a85a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a830:	f107 0314 	add.w	r3, r7, #20
 800a834:	3304      	adds	r3, #4
 800a836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a838:	4619      	mov	r1, r3
 800a83a:	68b8      	ldr	r0, [r7, #8]
 800a83c:	f000 fc7c 	bl	800b138 <xQueueReceive>
 800a840:	4603      	mov	r3, r0
 800a842:	2b01      	cmp	r3, #1
 800a844:	d102      	bne.n	800a84c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a846:	2310      	movs	r3, #16
 800a848:	617b      	str	r3, [r7, #20]
 800a84a:	e006      	b.n	800a85a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <osMessageGet+0xc6>
 800a852:	2300      	movs	r3, #0
 800a854:	e000      	b.n	800a858 <osMessageGet+0xc8>
 800a856:	2340      	movs	r3, #64	; 0x40
 800a858:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	461c      	mov	r4, r3
 800a85e:	f107 0314 	add.w	r3, r7, #20
 800a862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	372c      	adds	r7, #44	; 0x2c
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd90      	pop	{r4, r7, pc}
 800a872:	bf00      	nop
 800a874:	e000ed04 	.word	0xe000ed04

0800a878 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f103 0208 	add.w	r2, r3, #8
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f04f 32ff 	mov.w	r2, #4294967295
 800a890:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f103 0208 	add.w	r2, r3, #8
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f103 0208 	add.w	r2, r3, #8
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a8c6:	bf00      	nop
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b085      	sub	sp, #20
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	689a      	ldr	r2, [r3, #8]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	1c5a      	adds	r2, r3, #1
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	601a      	str	r2, [r3, #0]
}
 800a90e:	bf00      	nop
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a91a:	b480      	push	{r7}
 800a91c:	b085      	sub	sp, #20
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a930:	d103      	bne.n	800a93a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	60fb      	str	r3, [r7, #12]
 800a938:	e00c      	b.n	800a954 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	3308      	adds	r3, #8
 800a93e:	60fb      	str	r3, [r7, #12]
 800a940:	e002      	b.n	800a948 <vListInsert+0x2e>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	60fb      	str	r3, [r7, #12]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	429a      	cmp	r2, r3
 800a952:	d2f6      	bcs.n	800a942 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	685a      	ldr	r2, [r3, #4]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	601a      	str	r2, [r3, #0]
}
 800a980:	bf00      	nop
 800a982:	3714      	adds	r7, #20
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	6892      	ldr	r2, [r2, #8]
 800a9a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	6852      	ldr	r2, [r2, #4]
 800a9ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d103      	bne.n	800a9c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	689a      	ldr	r2, [r3, #8]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	1e5a      	subs	r2, r3, #1
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10a      	bne.n	800aa0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aa06:	bf00      	nop
 800aa08:	e7fe      	b.n	800aa08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aa0a:	f002 f88b 	bl	800cb24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa16:	68f9      	ldr	r1, [r7, #12]
 800aa18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa1a:	fb01 f303 	mul.w	r3, r1, r3
 800aa1e:	441a      	add	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	68f9      	ldr	r1, [r7, #12]
 800aa3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa40:	fb01 f303 	mul.w	r3, r1, r3
 800aa44:	441a      	add	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	22ff      	movs	r2, #255	; 0xff
 800aa4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	22ff      	movs	r2, #255	; 0xff
 800aa56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d114      	bne.n	800aa8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d01a      	beq.n	800aa9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3310      	adds	r3, #16
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f001 fb49 	bl	800c104 <xTaskRemoveFromEventList>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d012      	beq.n	800aa9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa78:	4b0c      	ldr	r3, [pc, #48]	; (800aaac <xQueueGenericReset+0xcc>)
 800aa7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa7e:	601a      	str	r2, [r3, #0]
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	e009      	b.n	800aa9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	3310      	adds	r3, #16
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff fef2 	bl	800a878 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3324      	adds	r3, #36	; 0x24
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7ff feed 	bl	800a878 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa9e:	f002 f871 	bl	800cb84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aaa2:	2301      	movs	r3, #1
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	e000ed04 	.word	0xe000ed04

0800aab0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08e      	sub	sp, #56	; 0x38
 800aab4:	af02      	add	r7, sp, #8
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
 800aabc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10a      	bne.n	800aada <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aad6:	bf00      	nop
 800aad8:	e7fe      	b.n	800aad8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10a      	bne.n	800aaf6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aaf2:	bf00      	nop
 800aaf4:	e7fe      	b.n	800aaf4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <xQueueGenericCreateStatic+0x52>
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <xQueueGenericCreateStatic+0x56>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e000      	b.n	800ab08 <xQueueGenericCreateStatic+0x58>
 800ab06:	2300      	movs	r3, #0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10a      	bne.n	800ab22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	623b      	str	r3, [r7, #32]
}
 800ab1e:	bf00      	nop
 800ab20:	e7fe      	b.n	800ab20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d102      	bne.n	800ab2e <xQueueGenericCreateStatic+0x7e>
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <xQueueGenericCreateStatic+0x82>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e000      	b.n	800ab34 <xQueueGenericCreateStatic+0x84>
 800ab32:	2300      	movs	r3, #0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10a      	bne.n	800ab4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	61fb      	str	r3, [r7, #28]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ab4e:	2348      	movs	r3, #72	; 0x48
 800ab50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2b48      	cmp	r3, #72	; 0x48
 800ab56:	d00a      	beq.n	800ab6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	61bb      	str	r3, [r7, #24]
}
 800ab6a:	bf00      	nop
 800ab6c:	e7fe      	b.n	800ab6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ab6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ab74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00d      	beq.n	800ab96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ab7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ab86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	68b9      	ldr	r1, [r7, #8]
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f000 f83f 	bl	800ac14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3730      	adds	r7, #48	; 0x30
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b08a      	sub	sp, #40	; 0x28
 800aba4:	af02      	add	r7, sp, #8
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	4613      	mov	r3, r2
 800abac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10a      	bne.n	800abca <xQueueGenericCreate+0x2a>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	613b      	str	r3, [r7, #16]
}
 800abc6:	bf00      	nop
 800abc8:	e7fe      	b.n	800abc8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	fb02 f303 	mul.w	r3, r2, r3
 800abd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	3348      	adds	r3, #72	; 0x48
 800abd8:	4618      	mov	r0, r3
 800abda:	f002 f8c5 	bl	800cd68 <pvPortMalloc>
 800abde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d011      	beq.n	800ac0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	3348      	adds	r3, #72	; 0x48
 800abee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abf8:	79fa      	ldrb	r2, [r7, #7]
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	4613      	mov	r3, r2
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	68b9      	ldr	r1, [r7, #8]
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 f805 	bl	800ac14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac0a:	69bb      	ldr	r3, [r7, #24]
	}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3720      	adds	r7, #32
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d103      	bne.n	800ac30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	69ba      	ldr	r2, [r7, #24]
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	e002      	b.n	800ac36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac42:	2101      	movs	r1, #1
 800ac44:	69b8      	ldr	r0, [r7, #24]
 800ac46:	f7ff fecb 	bl	800a9e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac4a:	bf00      	nop
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00e      	beq.n	800ac7e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ac72:	2300      	movs	r3, #0
 800ac74:	2200      	movs	r2, #0
 800ac76:	2100      	movs	r1, #0
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f837 	bl	800acec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b086      	sub	sp, #24
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ac90:	2301      	movs	r3, #1
 800ac92:	617b      	str	r3, [r7, #20]
 800ac94:	2300      	movs	r3, #0
 800ac96:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ac98:	79fb      	ldrb	r3, [r7, #7]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	6939      	ldr	r1, [r7, #16]
 800ac9e:	6978      	ldr	r0, [r7, #20]
 800aca0:	f7ff ff7e 	bl	800aba0 <xQueueGenericCreate>
 800aca4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff ffd3 	bl	800ac52 <prvInitialiseMutex>

		return xNewQueue;
 800acac:	68fb      	ldr	r3, [r7, #12]
	}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b088      	sub	sp, #32
 800acba:	af02      	add	r7, sp, #8
 800acbc:	4603      	mov	r3, r0
 800acbe:	6039      	str	r1, [r7, #0]
 800acc0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800acc2:	2301      	movs	r3, #1
 800acc4:	617b      	str	r3, [r7, #20]
 800acc6:	2300      	movs	r3, #0
 800acc8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800acca:	79fb      	ldrb	r3, [r7, #7]
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	2200      	movs	r2, #0
 800acd2:	6939      	ldr	r1, [r7, #16]
 800acd4:	6978      	ldr	r0, [r7, #20]
 800acd6:	f7ff feeb 	bl	800aab0 <xQueueGenericCreateStatic>
 800acda:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f7ff ffb8 	bl	800ac52 <prvInitialiseMutex>

		return xNewQueue;
 800ace2:	68fb      	ldr	r3, [r7, #12]
	}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08e      	sub	sp, #56	; 0x38
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800acfa:	2300      	movs	r3, #0
 800acfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10a      	bne.n	800ad1e <xQueueGenericSend+0x32>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad1a:	bf00      	nop
 800ad1c:	e7fe      	b.n	800ad1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d103      	bne.n	800ad2c <xQueueGenericSend+0x40>
 800ad24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <xQueueGenericSend+0x44>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e000      	b.n	800ad32 <xQueueGenericSend+0x46>
 800ad30:	2300      	movs	r3, #0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10a      	bne.n	800ad4c <xQueueGenericSend+0x60>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad48:	bf00      	nop
 800ad4a:	e7fe      	b.n	800ad4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d103      	bne.n	800ad5a <xQueueGenericSend+0x6e>
 800ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d101      	bne.n	800ad5e <xQueueGenericSend+0x72>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e000      	b.n	800ad60 <xQueueGenericSend+0x74>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10a      	bne.n	800ad7a <xQueueGenericSend+0x8e>
	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	623b      	str	r3, [r7, #32]
}
 800ad76:	bf00      	nop
 800ad78:	e7fe      	b.n	800ad78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad7a:	f001 fb83 	bl	800c484 <xTaskGetSchedulerState>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d102      	bne.n	800ad8a <xQueueGenericSend+0x9e>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <xQueueGenericSend+0xa2>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e000      	b.n	800ad90 <xQueueGenericSend+0xa4>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10a      	bne.n	800adaa <xQueueGenericSend+0xbe>
	__asm volatile
 800ad94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	61fb      	str	r3, [r7, #28]
}
 800ada6:	bf00      	nop
 800ada8:	e7fe      	b.n	800ada8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adaa:	f001 febb 	bl	800cb24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d302      	bcc.n	800adc0 <xQueueGenericSend+0xd4>
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d129      	bne.n	800ae14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adc0:	683a      	ldr	r2, [r7, #0]
 800adc2:	68b9      	ldr	r1, [r7, #8]
 800adc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adc6:	f000 fc3b 	bl	800b640 <prvCopyDataToQueue>
 800adca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b00      	cmp	r3, #0
 800add2:	d010      	beq.n	800adf6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add6:	3324      	adds	r3, #36	; 0x24
 800add8:	4618      	mov	r0, r3
 800adda:	f001 f993 	bl	800c104 <xTaskRemoveFromEventList>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d013      	beq.n	800ae0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ade4:	4b3f      	ldr	r3, [pc, #252]	; (800aee4 <xQueueGenericSend+0x1f8>)
 800ade6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	e00a      	b.n	800ae0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800adf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d007      	beq.n	800ae0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800adfc:	4b39      	ldr	r3, [pc, #228]	; (800aee4 <xQueueGenericSend+0x1f8>)
 800adfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae0c:	f001 feba 	bl	800cb84 <vPortExitCritical>
				return pdPASS;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e063      	b.n	800aedc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d103      	bne.n	800ae22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae1a:	f001 feb3 	bl	800cb84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	e05c      	b.n	800aedc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d106      	bne.n	800ae36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae28:	f107 0314 	add.w	r3, r7, #20
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f001 f9cb 	bl	800c1c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae32:	2301      	movs	r3, #1
 800ae34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae36:	f001 fea5 	bl	800cb84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae3a:	f000 ff59 	bl	800bcf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae3e:	f001 fe71 	bl	800cb24 <vPortEnterCritical>
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae48:	b25b      	sxtb	r3, r3
 800ae4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4e:	d103      	bne.n	800ae58 <xQueueGenericSend+0x16c>
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae5e:	b25b      	sxtb	r3, r3
 800ae60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae64:	d103      	bne.n	800ae6e <xQueueGenericSend+0x182>
 800ae66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae6e:	f001 fe89 	bl	800cb84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae72:	1d3a      	adds	r2, r7, #4
 800ae74:	f107 0314 	add.w	r3, r7, #20
 800ae78:	4611      	mov	r1, r2
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f001 f9ba 	bl	800c1f4 <xTaskCheckForTimeOut>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d124      	bne.n	800aed0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae88:	f000 fcd2 	bl	800b830 <prvIsQueueFull>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d018      	beq.n	800aec4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	3310      	adds	r3, #16
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	4611      	mov	r1, r2
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f001 f90e 	bl	800c0bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aea2:	f000 fc5d 	bl	800b760 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aea6:	f000 ff31 	bl	800bd0c <xTaskResumeAll>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f47f af7c 	bne.w	800adaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aeb2:	4b0c      	ldr	r3, [pc, #48]	; (800aee4 <xQueueGenericSend+0x1f8>)
 800aeb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	e772      	b.n	800adaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aec6:	f000 fc4b 	bl	800b760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aeca:	f000 ff1f 	bl	800bd0c <xTaskResumeAll>
 800aece:	e76c      	b.n	800adaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed2:	f000 fc45 	bl	800b760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aed6:	f000 ff19 	bl	800bd0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aeda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3738      	adds	r7, #56	; 0x38
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	e000ed04 	.word	0xe000ed04

0800aee8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b090      	sub	sp, #64	; 0x40
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
 800aef4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10a      	bne.n	800af16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af12:	bf00      	nop
 800af14:	e7fe      	b.n	800af14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d103      	bne.n	800af24 <xQueueGenericSendFromISR+0x3c>
 800af1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af20:	2b00      	cmp	r3, #0
 800af22:	d101      	bne.n	800af28 <xQueueGenericSendFromISR+0x40>
 800af24:	2301      	movs	r3, #1
 800af26:	e000      	b.n	800af2a <xQueueGenericSendFromISR+0x42>
 800af28:	2300      	movs	r3, #0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10a      	bne.n	800af44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af40:	bf00      	nop
 800af42:	e7fe      	b.n	800af42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d103      	bne.n	800af52 <xQueueGenericSendFromISR+0x6a>
 800af4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d101      	bne.n	800af56 <xQueueGenericSendFromISR+0x6e>
 800af52:	2301      	movs	r3, #1
 800af54:	e000      	b.n	800af58 <xQueueGenericSendFromISR+0x70>
 800af56:	2300      	movs	r3, #0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10a      	bne.n	800af72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	623b      	str	r3, [r7, #32]
}
 800af6e:	bf00      	nop
 800af70:	e7fe      	b.n	800af70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af72:	f001 feb9 	bl	800cce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af76:	f3ef 8211 	mrs	r2, BASEPRI
 800af7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	61fa      	str	r2, [r7, #28]
 800af8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d302      	bcc.n	800afa4 <xQueueGenericSendFromISR+0xbc>
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d12f      	bne.n	800b004 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	68b9      	ldr	r1, [r7, #8]
 800afb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afba:	f000 fb41 	bl	800b640 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800afc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc6:	d112      	bne.n	800afee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d016      	beq.n	800affe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd2:	3324      	adds	r3, #36	; 0x24
 800afd4:	4618      	mov	r0, r3
 800afd6:	f001 f895 	bl	800c104 <xTaskRemoveFromEventList>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00e      	beq.n	800affe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00b      	beq.n	800affe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2201      	movs	r2, #1
 800afea:	601a      	str	r2, [r3, #0]
 800afec:	e007      	b.n	800affe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800afee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aff2:	3301      	adds	r3, #1
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	b25a      	sxtb	r2, r3
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800affe:	2301      	movs	r3, #1
 800b000:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b002:	e001      	b.n	800b008 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b004:	2300      	movs	r3, #0
 800b006:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b00a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b012:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b016:	4618      	mov	r0, r3
 800b018:	3740      	adds	r7, #64	; 0x40
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b08e      	sub	sp, #56	; 0x38
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10a      	bne.n	800b048 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	623b      	str	r3, [r7, #32]
}
 800b044:	bf00      	nop
 800b046:	e7fe      	b.n	800b046 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00a      	beq.n	800b066 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	61fb      	str	r3, [r7, #28]
}
 800b062:	bf00      	nop
 800b064:	e7fe      	b.n	800b064 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d103      	bne.n	800b076 <xQueueGiveFromISR+0x58>
 800b06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d101      	bne.n	800b07a <xQueueGiveFromISR+0x5c>
 800b076:	2301      	movs	r3, #1
 800b078:	e000      	b.n	800b07c <xQueueGiveFromISR+0x5e>
 800b07a:	2300      	movs	r3, #0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10a      	bne.n	800b096 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	61bb      	str	r3, [r7, #24]
}
 800b092:	bf00      	nop
 800b094:	e7fe      	b.n	800b094 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b096:	f001 fe27 	bl	800cce8 <vPortValidateInterruptPriority>
	__asm volatile
 800b09a:	f3ef 8211 	mrs	r2, BASEPRI
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	617a      	str	r2, [r7, #20]
 800b0b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b0b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d22b      	bcs.n	800b11e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e0:	d112      	bne.n	800b108 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d016      	beq.n	800b118 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ec:	3324      	adds	r3, #36	; 0x24
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f001 f808 	bl	800c104 <xTaskRemoveFromEventList>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00e      	beq.n	800b118 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00b      	beq.n	800b118 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	2201      	movs	r2, #1
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	e007      	b.n	800b118 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b10c:	3301      	adds	r3, #1
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	b25a      	sxtb	r2, r3
 800b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b118:	2301      	movs	r3, #1
 800b11a:	637b      	str	r3, [r7, #52]	; 0x34
 800b11c:	e001      	b.n	800b122 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b11e:	2300      	movs	r3, #0
 800b120:	637b      	str	r3, [r7, #52]	; 0x34
 800b122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b124:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f383 8811 	msr	BASEPRI, r3
}
 800b12c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b130:	4618      	mov	r0, r3
 800b132:	3738      	adds	r7, #56	; 0x38
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08c      	sub	sp, #48	; 0x30
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b144:	2300      	movs	r3, #0
 800b146:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <xQueueReceive+0x30>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	623b      	str	r3, [r7, #32]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d103      	bne.n	800b176 <xQueueReceive+0x3e>
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <xQueueReceive+0x42>
 800b176:	2301      	movs	r3, #1
 800b178:	e000      	b.n	800b17c <xQueueReceive+0x44>
 800b17a:	2300      	movs	r3, #0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10a      	bne.n	800b196 <xQueueReceive+0x5e>
	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	61fb      	str	r3, [r7, #28]
}
 800b192:	bf00      	nop
 800b194:	e7fe      	b.n	800b194 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b196:	f001 f975 	bl	800c484 <xTaskGetSchedulerState>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d102      	bne.n	800b1a6 <xQueueReceive+0x6e>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <xQueueReceive+0x72>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e000      	b.n	800b1ac <xQueueReceive+0x74>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d10a      	bne.n	800b1c6 <xQueueReceive+0x8e>
	__asm volatile
 800b1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b4:	f383 8811 	msr	BASEPRI, r3
 800b1b8:	f3bf 8f6f 	isb	sy
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	61bb      	str	r3, [r7, #24]
}
 800b1c2:	bf00      	nop
 800b1c4:	e7fe      	b.n	800b1c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1c6:	f001 fcad 	bl	800cb24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d01f      	beq.n	800b216 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1d6:	68b9      	ldr	r1, [r7, #8]
 800b1d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1da:	f000 fa9b 	bl	800b714 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e0:	1e5a      	subs	r2, r3, #1
 800b1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00f      	beq.n	800b20e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	3310      	adds	r3, #16
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 ff86 	bl	800c104 <xTaskRemoveFromEventList>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d007      	beq.n	800b20e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1fe:	4b3d      	ldr	r3, [pc, #244]	; (800b2f4 <xQueueReceive+0x1bc>)
 800b200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b204:	601a      	str	r2, [r3, #0]
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b20e:	f001 fcb9 	bl	800cb84 <vPortExitCritical>
				return pdPASS;
 800b212:	2301      	movs	r3, #1
 800b214:	e069      	b.n	800b2ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d103      	bne.n	800b224 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b21c:	f001 fcb2 	bl	800cb84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b220:	2300      	movs	r3, #0
 800b222:	e062      	b.n	800b2ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b226:	2b00      	cmp	r3, #0
 800b228:	d106      	bne.n	800b238 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b22a:	f107 0310 	add.w	r3, r7, #16
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 ffca 	bl	800c1c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b234:	2301      	movs	r3, #1
 800b236:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b238:	f001 fca4 	bl	800cb84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b23c:	f000 fd58 	bl	800bcf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b240:	f001 fc70 	bl	800cb24 <vPortEnterCritical>
 800b244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b24a:	b25b      	sxtb	r3, r3
 800b24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b250:	d103      	bne.n	800b25a <xQueueReceive+0x122>
 800b252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b260:	b25b      	sxtb	r3, r3
 800b262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b266:	d103      	bne.n	800b270 <xQueueReceive+0x138>
 800b268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b270:	f001 fc88 	bl	800cb84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b274:	1d3a      	adds	r2, r7, #4
 800b276:	f107 0310 	add.w	r3, r7, #16
 800b27a:	4611      	mov	r1, r2
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 ffb9 	bl	800c1f4 <xTaskCheckForTimeOut>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d123      	bne.n	800b2d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b28a:	f000 fabb 	bl	800b804 <prvIsQueueEmpty>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d017      	beq.n	800b2c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	3324      	adds	r3, #36	; 0x24
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	4611      	mov	r1, r2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f000 ff0d 	bl	800c0bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2a4:	f000 fa5c 	bl	800b760 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2a8:	f000 fd30 	bl	800bd0c <xTaskResumeAll>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d189      	bne.n	800b1c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b2b2:	4b10      	ldr	r3, [pc, #64]	; (800b2f4 <xQueueReceive+0x1bc>)
 800b2b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b8:	601a      	str	r2, [r3, #0]
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	f3bf 8f6f 	isb	sy
 800b2c2:	e780      	b.n	800b1c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2c6:	f000 fa4b 	bl	800b760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2ca:	f000 fd1f 	bl	800bd0c <xTaskResumeAll>
 800b2ce:	e77a      	b.n	800b1c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2d2:	f000 fa45 	bl	800b760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2d6:	f000 fd19 	bl	800bd0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2dc:	f000 fa92 	bl	800b804 <prvIsQueueEmpty>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f43f af6f 	beq.w	800b1c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3730      	adds	r7, #48	; 0x30
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	e000ed04 	.word	0xe000ed04

0800b2f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b08e      	sub	sp, #56	; 0x38
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b302:	2300      	movs	r3, #0
 800b304:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b30a:	2300      	movs	r3, #0
 800b30c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	623b      	str	r3, [r7, #32]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00a      	beq.n	800b348 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	61fb      	str	r3, [r7, #28]
}
 800b344:	bf00      	nop
 800b346:	e7fe      	b.n	800b346 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b348:	f001 f89c 	bl	800c484 <xTaskGetSchedulerState>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d102      	bne.n	800b358 <xQueueSemaphoreTake+0x60>
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <xQueueSemaphoreTake+0x64>
 800b358:	2301      	movs	r3, #1
 800b35a:	e000      	b.n	800b35e <xQueueSemaphoreTake+0x66>
 800b35c:	2300      	movs	r3, #0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10a      	bne.n	800b378 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	61bb      	str	r3, [r7, #24]
}
 800b374:	bf00      	nop
 800b376:	e7fe      	b.n	800b376 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b378:	f001 fbd4 	bl	800cb24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b380:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b384:	2b00      	cmp	r3, #0
 800b386:	d024      	beq.n	800b3d2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38a:	1e5a      	subs	r2, r3, #1
 800b38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d104      	bne.n	800b3a2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b398:	f001 fa1c 	bl	800c7d4 <pvTaskIncrementMutexHeldCount>
 800b39c:	4602      	mov	r2, r0
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00f      	beq.n	800b3ca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ac:	3310      	adds	r3, #16
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f000 fea8 	bl	800c104 <xTaskRemoveFromEventList>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d007      	beq.n	800b3ca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3ba:	4b54      	ldr	r3, [pc, #336]	; (800b50c <xQueueSemaphoreTake+0x214>)
 800b3bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3ca:	f001 fbdb 	bl	800cb84 <vPortExitCritical>
				return pdPASS;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e097      	b.n	800b502 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d111      	bne.n	800b3fc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00a      	beq.n	800b3f4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	617b      	str	r3, [r7, #20]
}
 800b3f0:	bf00      	nop
 800b3f2:	e7fe      	b.n	800b3f2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b3f4:	f001 fbc6 	bl	800cb84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	e082      	b.n	800b502 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d106      	bne.n	800b410 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b402:	f107 030c 	add.w	r3, r7, #12
 800b406:	4618      	mov	r0, r3
 800b408:	f000 fede 	bl	800c1c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b40c:	2301      	movs	r3, #1
 800b40e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b410:	f001 fbb8 	bl	800cb84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b414:	f000 fc6c 	bl	800bcf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b418:	f001 fb84 	bl	800cb24 <vPortEnterCritical>
 800b41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b422:	b25b      	sxtb	r3, r3
 800b424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b428:	d103      	bne.n	800b432 <xQueueSemaphoreTake+0x13a>
 800b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42c:	2200      	movs	r2, #0
 800b42e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b438:	b25b      	sxtb	r3, r3
 800b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43e:	d103      	bne.n	800b448 <xQueueSemaphoreTake+0x150>
 800b440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b448:	f001 fb9c 	bl	800cb84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b44c:	463a      	mov	r2, r7
 800b44e:	f107 030c 	add.w	r3, r7, #12
 800b452:	4611      	mov	r1, r2
 800b454:	4618      	mov	r0, r3
 800b456:	f000 fecd 	bl	800c1f4 <xTaskCheckForTimeOut>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d132      	bne.n	800b4c6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b462:	f000 f9cf 	bl	800b804 <prvIsQueueEmpty>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d026      	beq.n	800b4ba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d109      	bne.n	800b488 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b474:	f001 fb56 	bl	800cb24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f001 f81f 	bl	800c4c0 <xTaskPriorityInherit>
 800b482:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b484:	f001 fb7e 	bl	800cb84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48a:	3324      	adds	r3, #36	; 0x24
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	4611      	mov	r1, r2
 800b490:	4618      	mov	r0, r3
 800b492:	f000 fe13 	bl	800c0bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b498:	f000 f962 	bl	800b760 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b49c:	f000 fc36 	bl	800bd0c <xTaskResumeAll>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f47f af68 	bne.w	800b378 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b4a8:	4b18      	ldr	r3, [pc, #96]	; (800b50c <xQueueSemaphoreTake+0x214>)
 800b4aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ae:	601a      	str	r2, [r3, #0]
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	e75e      	b.n	800b378 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b4ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4bc:	f000 f950 	bl	800b760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4c0:	f000 fc24 	bl	800bd0c <xTaskResumeAll>
 800b4c4:	e758      	b.n	800b378 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b4c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4c8:	f000 f94a 	bl	800b760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4cc:	f000 fc1e 	bl	800bd0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4d2:	f000 f997 	bl	800b804 <prvIsQueueEmpty>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f43f af4d 	beq.w	800b378 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00d      	beq.n	800b500 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b4e4:	f001 fb1e 	bl	800cb24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b4e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4ea:	f000 f891 	bl	800b610 <prvGetDisinheritPriorityAfterTimeout>
 800b4ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f001 f8de 	bl	800c6b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b4fc:	f001 fb42 	bl	800cb84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b500:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b502:	4618      	mov	r0, r3
 800b504:	3738      	adds	r7, #56	; 0x38
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	e000ed04 	.word	0xe000ed04

0800b510 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b08e      	sub	sp, #56	; 0x38
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10a      	bne.n	800b53c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52a:	f383 8811 	msr	BASEPRI, r3
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	623b      	str	r3, [r7, #32]
}
 800b538:	bf00      	nop
 800b53a:	e7fe      	b.n	800b53a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d103      	bne.n	800b54a <xQueueReceiveFromISR+0x3a>
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <xQueueReceiveFromISR+0x3e>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e000      	b.n	800b550 <xQueueReceiveFromISR+0x40>
 800b54e:	2300      	movs	r3, #0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10a      	bne.n	800b56a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	61fb      	str	r3, [r7, #28]
}
 800b566:	bf00      	nop
 800b568:	e7fe      	b.n	800b568 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b56a:	f001 fbbd 	bl	800cce8 <vPortValidateInterruptPriority>
	__asm volatile
 800b56e:	f3ef 8211 	mrs	r2, BASEPRI
 800b572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	61ba      	str	r2, [r7, #24]
 800b584:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b586:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b588:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b592:	2b00      	cmp	r3, #0
 800b594:	d02f      	beq.n	800b5f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b59c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5a4:	f000 f8b6 	bl	800b714 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5aa:	1e5a      	subs	r2, r3, #1
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b5b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b8:	d112      	bne.n	800b5e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d016      	beq.n	800b5f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	3310      	adds	r3, #16
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 fd9c 	bl	800c104 <xTaskRemoveFromEventList>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00e      	beq.n	800b5f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00b      	beq.n	800b5f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	601a      	str	r2, [r3, #0]
 800b5de:	e007      	b.n	800b5f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	b25a      	sxtb	r2, r3
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	637b      	str	r3, [r7, #52]	; 0x34
 800b5f4:	e001      	b.n	800b5fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	f383 8811 	msr	BASEPRI, r3
}
 800b604:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3738      	adds	r7, #56	; 0x38
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d006      	beq.n	800b62e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f1c3 0307 	rsb	r3, r3, #7
 800b62a:	60fb      	str	r3, [r7, #12]
 800b62c:	e001      	b.n	800b632 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b62e:	2300      	movs	r3, #0
 800b630:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b632:	68fb      	ldr	r3, [r7, #12]
	}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b64c:	2300      	movs	r3, #0
 800b64e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b654:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10d      	bne.n	800b67a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d14d      	bne.n	800b702 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 ff9e 	bl	800c5ac <xTaskPriorityDisinherit>
 800b670:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2200      	movs	r2, #0
 800b676:	609a      	str	r2, [r3, #8]
 800b678:	e043      	b.n	800b702 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d119      	bne.n	800b6b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6858      	ldr	r0, [r3, #4]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b688:	461a      	mov	r2, r3
 800b68a:	68b9      	ldr	r1, [r7, #8]
 800b68c:	f00b ffef 	bl	801766e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	685a      	ldr	r2, [r3, #4]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b698:	441a      	add	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d32b      	bcc.n	800b702 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	605a      	str	r2, [r3, #4]
 800b6b2:	e026      	b.n	800b702 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	68d8      	ldr	r0, [r3, #12]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6bc:	461a      	mov	r2, r3
 800b6be:	68b9      	ldr	r1, [r7, #8]
 800b6c0:	f00b ffd5 	bl	801766e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	68da      	ldr	r2, [r3, #12]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6cc:	425b      	negs	r3, r3
 800b6ce:	441a      	add	r2, r3
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	68da      	ldr	r2, [r3, #12]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d207      	bcs.n	800b6f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	689a      	ldr	r2, [r3, #8]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e8:	425b      	negs	r3, r3
 800b6ea:	441a      	add	r2, r3
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	d105      	bne.n	800b702 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	3b01      	subs	r3, #1
 800b700:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	1c5a      	adds	r2, r3, #1
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b70a:	697b      	ldr	r3, [r7, #20]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3718      	adds	r7, #24
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b722:	2b00      	cmp	r3, #0
 800b724:	d018      	beq.n	800b758 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68da      	ldr	r2, [r3, #12]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72e:	441a      	add	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	68da      	ldr	r2, [r3, #12]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d303      	bcc.n	800b748 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	68d9      	ldr	r1, [r3, #12]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b750:	461a      	mov	r2, r3
 800b752:	6838      	ldr	r0, [r7, #0]
 800b754:	f00b ff8b 	bl	801766e <memcpy>
	}
}
 800b758:	bf00      	nop
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b768:	f001 f9dc 	bl	800cb24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b772:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b774:	e011      	b.n	800b79a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d012      	beq.n	800b7a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3324      	adds	r3, #36	; 0x24
 800b782:	4618      	mov	r0, r3
 800b784:	f000 fcbe 	bl	800c104 <xTaskRemoveFromEventList>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d001      	beq.n	800b792 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b78e:	f000 fd93 	bl	800c2b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	3b01      	subs	r3, #1
 800b796:	b2db      	uxtb	r3, r3
 800b798:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b79a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	dce9      	bgt.n	800b776 <prvUnlockQueue+0x16>
 800b7a2:	e000      	b.n	800b7a6 <prvUnlockQueue+0x46>
					break;
 800b7a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	22ff      	movs	r2, #255	; 0xff
 800b7aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b7ae:	f001 f9e9 	bl	800cb84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b7b2:	f001 f9b7 	bl	800cb24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7be:	e011      	b.n	800b7e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d012      	beq.n	800b7ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	3310      	adds	r3, #16
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f000 fc99 	bl	800c104 <xTaskRemoveFromEventList>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d001      	beq.n	800b7dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b7d8:	f000 fd6e 	bl	800c2b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b7dc:	7bbb      	ldrb	r3, [r7, #14]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	dce9      	bgt.n	800b7c0 <prvUnlockQueue+0x60>
 800b7ec:	e000      	b.n	800b7f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b7ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	22ff      	movs	r2, #255	; 0xff
 800b7f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b7f8:	f001 f9c4 	bl	800cb84 <vPortExitCritical>
}
 800b7fc:	bf00      	nop
 800b7fe:	3710      	adds	r7, #16
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b80c:	f001 f98a 	bl	800cb24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b814:	2b00      	cmp	r3, #0
 800b816:	d102      	bne.n	800b81e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b818:	2301      	movs	r3, #1
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	e001      	b.n	800b822 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b81e:	2300      	movs	r3, #0
 800b820:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b822:	f001 f9af 	bl	800cb84 <vPortExitCritical>

	return xReturn;
 800b826:	68fb      	ldr	r3, [r7, #12]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b838:	f001 f974 	bl	800cb24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b844:	429a      	cmp	r2, r3
 800b846:	d102      	bne.n	800b84e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b848:	2301      	movs	r3, #1
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	e001      	b.n	800b852 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b84e:	2300      	movs	r3, #0
 800b850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b852:	f001 f997 	bl	800cb84 <vPortExitCritical>

	return xReturn;
 800b856:	68fb      	ldr	r3, [r7, #12]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b860:	b580      	push	{r7, lr}
 800b862:	b08e      	sub	sp, #56	; 0x38
 800b864:	af04      	add	r7, sp, #16
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10a      	bne.n	800b88a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b878:	f383 8811 	msr	BASEPRI, r3
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	623b      	str	r3, [r7, #32]
}
 800b886:	bf00      	nop
 800b888:	e7fe      	b.n	800b888 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10a      	bne.n	800b8a6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	61fb      	str	r3, [r7, #28]
}
 800b8a2:	bf00      	nop
 800b8a4:	e7fe      	b.n	800b8a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8a6:	23b4      	movs	r3, #180	; 0xb4
 800b8a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	2bb4      	cmp	r3, #180	; 0xb4
 800b8ae:	d00a      	beq.n	800b8c6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	61bb      	str	r3, [r7, #24]
}
 800b8c2:	bf00      	nop
 800b8c4:	e7fe      	b.n	800b8c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b8c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d01e      	beq.n	800b90c <xTaskCreateStatic+0xac>
 800b8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d01b      	beq.n	800b90c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	2202      	movs	r2, #2
 800b8e2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	9303      	str	r3, [sp, #12]
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	9302      	str	r3, [sp, #8]
 800b8ee:	f107 0314 	add.w	r3, r7, #20
 800b8f2:	9301      	str	r3, [sp, #4]
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	68b9      	ldr	r1, [r7, #8]
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 f850 	bl	800b9a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b906:	f000 f8eb 	bl	800bae0 <prvAddNewTaskToReadyList>
 800b90a:	e001      	b.n	800b910 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b90c:	2300      	movs	r3, #0
 800b90e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b910:	697b      	ldr	r3, [r7, #20]
	}
 800b912:	4618      	mov	r0, r3
 800b914:	3728      	adds	r7, #40	; 0x28
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b08c      	sub	sp, #48	; 0x30
 800b91e:	af04      	add	r7, sp, #16
 800b920:	60f8      	str	r0, [r7, #12]
 800b922:	60b9      	str	r1, [r7, #8]
 800b924:	603b      	str	r3, [r7, #0]
 800b926:	4613      	mov	r3, r2
 800b928:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b92a:	88fb      	ldrh	r3, [r7, #6]
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4618      	mov	r0, r3
 800b930:	f001 fa1a 	bl	800cd68 <pvPortMalloc>
 800b934:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00e      	beq.n	800b95a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b93c:	20b4      	movs	r0, #180	; 0xb4
 800b93e:	f001 fa13 	bl	800cd68 <pvPortMalloc>
 800b942:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	631a      	str	r2, [r3, #48]	; 0x30
 800b950:	e005      	b.n	800b95e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b952:	6978      	ldr	r0, [r7, #20]
 800b954:	f001 fad4 	bl	800cf00 <vPortFree>
 800b958:	e001      	b.n	800b95e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b95a:	2300      	movs	r3, #0
 800b95c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d017      	beq.n	800b994 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	2200      	movs	r2, #0
 800b968:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b96c:	88fa      	ldrh	r2, [r7, #6]
 800b96e:	2300      	movs	r3, #0
 800b970:	9303      	str	r3, [sp, #12]
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	9302      	str	r3, [sp, #8]
 800b976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b978:	9301      	str	r3, [sp, #4]
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	68b9      	ldr	r1, [r7, #8]
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f000 f80e 	bl	800b9a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b988:	69f8      	ldr	r0, [r7, #28]
 800b98a:	f000 f8a9 	bl	800bae0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b98e:	2301      	movs	r3, #1
 800b990:	61bb      	str	r3, [r7, #24]
 800b992:	e002      	b.n	800b99a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b994:	f04f 33ff 	mov.w	r3, #4294967295
 800b998:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b99a:	69bb      	ldr	r3, [r7, #24]
	}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3720      	adds	r7, #32
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b088      	sub	sp, #32
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
 800b9b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9b6:	6879      	ldr	r1, [r7, #4]
 800b9b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b9bc:	440b      	add	r3, r1
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	4413      	add	r3, r2
 800b9c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	f023 0307 	bic.w	r3, r3, #7
 800b9ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	f003 0307 	and.w	r3, r3, #7
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00a      	beq.n	800b9ec <prvInitialiseNewTask+0x48>
	__asm volatile
 800b9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	617b      	str	r3, [r7, #20]
}
 800b9e8:	bf00      	nop
 800b9ea:	e7fe      	b.n	800b9ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d01f      	beq.n	800ba32 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	61fb      	str	r3, [r7, #28]
 800b9f6:	e012      	b.n	800ba1e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	7819      	ldrb	r1, [r3, #0]
 800ba00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	4413      	add	r3, r2
 800ba06:	3334      	adds	r3, #52	; 0x34
 800ba08:	460a      	mov	r2, r1
 800ba0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	4413      	add	r3, r2
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d006      	beq.n	800ba26 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	61fb      	str	r3, [r7, #28]
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	2b0f      	cmp	r3, #15
 800ba22:	d9e9      	bls.n	800b9f8 <prvInitialiseNewTask+0x54>
 800ba24:	e000      	b.n	800ba28 <prvInitialiseNewTask+0x84>
			{
				break;
 800ba26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba30:	e003      	b.n	800ba3a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3c:	2b06      	cmp	r3, #6
 800ba3e:	d901      	bls.n	800ba44 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba40:	2306      	movs	r3, #6
 800ba42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba4e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ba50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba52:	2200      	movs	r2, #0
 800ba54:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba58:	3304      	adds	r3, #4
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fe ff2c 	bl	800a8b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba62:	3318      	adds	r3, #24
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fe ff27 	bl	800a8b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba72:	f1c3 0207 	rsb	r2, r3, #7
 800ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba82:	2200      	movs	r2, #0
 800ba84:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	334c      	adds	r3, #76	; 0x4c
 800ba94:	2260      	movs	r2, #96	; 0x60
 800ba96:	2100      	movs	r1, #0
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f00b fdf6 	bl	801768a <memset>
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	4a0c      	ldr	r2, [pc, #48]	; (800bad4 <prvInitialiseNewTask+0x130>)
 800baa2:	651a      	str	r2, [r3, #80]	; 0x50
 800baa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa6:	4a0c      	ldr	r2, [pc, #48]	; (800bad8 <prvInitialiseNewTask+0x134>)
 800baa8:	655a      	str	r2, [r3, #84]	; 0x54
 800baaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baac:	4a0b      	ldr	r2, [pc, #44]	; (800badc <prvInitialiseNewTask+0x138>)
 800baae:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bab0:	683a      	ldr	r2, [r7, #0]
 800bab2:	68f9      	ldr	r1, [r7, #12]
 800bab4:	69b8      	ldr	r0, [r7, #24]
 800bab6:	f000 ff07 	bl	800c8c8 <pxPortInitialiseStack>
 800baba:	4602      	mov	r2, r0
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d002      	beq.n	800bacc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bacc:	bf00      	nop
 800bace:	3720      	adds	r7, #32
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	0801c8ac 	.word	0x0801c8ac
 800bad8:	0801c8cc 	.word	0x0801c8cc
 800badc:	0801c88c 	.word	0x0801c88c

0800bae0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bae8:	f001 f81c 	bl	800cb24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800baec:	4b2a      	ldr	r3, [pc, #168]	; (800bb98 <prvAddNewTaskToReadyList+0xb8>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3301      	adds	r3, #1
 800baf2:	4a29      	ldr	r2, [pc, #164]	; (800bb98 <prvAddNewTaskToReadyList+0xb8>)
 800baf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800baf6:	4b29      	ldr	r3, [pc, #164]	; (800bb9c <prvAddNewTaskToReadyList+0xbc>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d109      	bne.n	800bb12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bafe:	4a27      	ldr	r2, [pc, #156]	; (800bb9c <prvAddNewTaskToReadyList+0xbc>)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb04:	4b24      	ldr	r3, [pc, #144]	; (800bb98 <prvAddNewTaskToReadyList+0xb8>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d110      	bne.n	800bb2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb0c:	f000 fbf8 	bl	800c300 <prvInitialiseTaskLists>
 800bb10:	e00d      	b.n	800bb2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb12:	4b23      	ldr	r3, [pc, #140]	; (800bba0 <prvAddNewTaskToReadyList+0xc0>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d109      	bne.n	800bb2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb1a:	4b20      	ldr	r3, [pc, #128]	; (800bb9c <prvAddNewTaskToReadyList+0xbc>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d802      	bhi.n	800bb2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb28:	4a1c      	ldr	r2, [pc, #112]	; (800bb9c <prvAddNewTaskToReadyList+0xbc>)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb2e:	4b1d      	ldr	r3, [pc, #116]	; (800bba4 <prvAddNewTaskToReadyList+0xc4>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	4a1b      	ldr	r2, [pc, #108]	; (800bba4 <prvAddNewTaskToReadyList+0xc4>)
 800bb36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	409a      	lsls	r2, r3
 800bb40:	4b19      	ldr	r3, [pc, #100]	; (800bba8 <prvAddNewTaskToReadyList+0xc8>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4313      	orrs	r3, r2
 800bb46:	4a18      	ldr	r2, [pc, #96]	; (800bba8 <prvAddNewTaskToReadyList+0xc8>)
 800bb48:	6013      	str	r3, [r2, #0]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4e:	4613      	mov	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4a15      	ldr	r2, [pc, #84]	; (800bbac <prvAddNewTaskToReadyList+0xcc>)
 800bb58:	441a      	add	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	4619      	mov	r1, r3
 800bb60:	4610      	mov	r0, r2
 800bb62:	f7fe feb6 	bl	800a8d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb66:	f001 f80d 	bl	800cb84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb6a:	4b0d      	ldr	r3, [pc, #52]	; (800bba0 <prvAddNewTaskToReadyList+0xc0>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00e      	beq.n	800bb90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb72:	4b0a      	ldr	r3, [pc, #40]	; (800bb9c <prvAddNewTaskToReadyList+0xbc>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d207      	bcs.n	800bb90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb80:	4b0b      	ldr	r3, [pc, #44]	; (800bbb0 <prvAddNewTaskToReadyList+0xd0>)
 800bb82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb86:	601a      	str	r2, [r3, #0]
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb90:	bf00      	nop
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	24000484 	.word	0x24000484
 800bb9c:	24000384 	.word	0x24000384
 800bba0:	24000490 	.word	0x24000490
 800bba4:	240004a0 	.word	0x240004a0
 800bba8:	2400048c 	.word	0x2400048c
 800bbac:	24000388 	.word	0x24000388
 800bbb0:	e000ed04 	.word	0xe000ed04

0800bbb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d017      	beq.n	800bbf6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bbc6:	4b13      	ldr	r3, [pc, #76]	; (800bc14 <vTaskDelay+0x60>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00a      	beq.n	800bbe4 <vTaskDelay+0x30>
	__asm volatile
 800bbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	60bb      	str	r3, [r7, #8]
}
 800bbe0:	bf00      	nop
 800bbe2:	e7fe      	b.n	800bbe2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bbe4:	f000 f884 	bl	800bcf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbe8:	2100      	movs	r1, #0
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 fe06 	bl	800c7fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bbf0:	f000 f88c 	bl	800bd0c <xTaskResumeAll>
 800bbf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d107      	bne.n	800bc0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bbfc:	4b06      	ldr	r3, [pc, #24]	; (800bc18 <vTaskDelay+0x64>)
 800bbfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc02:	601a      	str	r2, [r3, #0]
 800bc04:	f3bf 8f4f 	dsb	sy
 800bc08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc0c:	bf00      	nop
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	240004ac 	.word	0x240004ac
 800bc18:	e000ed04 	.word	0xe000ed04

0800bc1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b08a      	sub	sp, #40	; 0x28
 800bc20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc26:	2300      	movs	r3, #0
 800bc28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc2a:	463a      	mov	r2, r7
 800bc2c:	1d39      	adds	r1, r7, #4
 800bc2e:	f107 0308 	add.w	r3, r7, #8
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7f5 f9ba 	bl	8000fac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	9202      	str	r2, [sp, #8]
 800bc40:	9301      	str	r3, [sp, #4]
 800bc42:	2300      	movs	r3, #0
 800bc44:	9300      	str	r3, [sp, #0]
 800bc46:	2300      	movs	r3, #0
 800bc48:	460a      	mov	r2, r1
 800bc4a:	4921      	ldr	r1, [pc, #132]	; (800bcd0 <vTaskStartScheduler+0xb4>)
 800bc4c:	4821      	ldr	r0, [pc, #132]	; (800bcd4 <vTaskStartScheduler+0xb8>)
 800bc4e:	f7ff fe07 	bl	800b860 <xTaskCreateStatic>
 800bc52:	4603      	mov	r3, r0
 800bc54:	4a20      	ldr	r2, [pc, #128]	; (800bcd8 <vTaskStartScheduler+0xbc>)
 800bc56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc58:	4b1f      	ldr	r3, [pc, #124]	; (800bcd8 <vTaskStartScheduler+0xbc>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc60:	2301      	movs	r3, #1
 800bc62:	617b      	str	r3, [r7, #20]
 800bc64:	e001      	b.n	800bc6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc66:	2300      	movs	r3, #0
 800bc68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d11b      	bne.n	800bca8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	613b      	str	r3, [r7, #16]
}
 800bc82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc84:	4b15      	ldr	r3, [pc, #84]	; (800bcdc <vTaskStartScheduler+0xc0>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	334c      	adds	r3, #76	; 0x4c
 800bc8a:	4a15      	ldr	r2, [pc, #84]	; (800bce0 <vTaskStartScheduler+0xc4>)
 800bc8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc8e:	4b15      	ldr	r3, [pc, #84]	; (800bce4 <vTaskStartScheduler+0xc8>)
 800bc90:	f04f 32ff 	mov.w	r2, #4294967295
 800bc94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc96:	4b14      	ldr	r3, [pc, #80]	; (800bce8 <vTaskStartScheduler+0xcc>)
 800bc98:	2201      	movs	r2, #1
 800bc9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc9c:	4b13      	ldr	r3, [pc, #76]	; (800bcec <vTaskStartScheduler+0xd0>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bca2:	f000 fe9d 	bl	800c9e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bca6:	e00e      	b.n	800bcc6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcae:	d10a      	bne.n	800bcc6 <vTaskStartScheduler+0xaa>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	60fb      	str	r3, [r7, #12]
}
 800bcc2:	bf00      	nop
 800bcc4:	e7fe      	b.n	800bcc4 <vTaskStartScheduler+0xa8>
}
 800bcc6:	bf00      	nop
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	08018740 	.word	0x08018740
 800bcd4:	0800c2d1 	.word	0x0800c2d1
 800bcd8:	240004a8 	.word	0x240004a8
 800bcdc:	24000384 	.word	0x24000384
 800bce0:	24000044 	.word	0x24000044
 800bce4:	240004a4 	.word	0x240004a4
 800bce8:	24000490 	.word	0x24000490
 800bcec:	24000488 	.word	0x24000488

0800bcf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bcf4:	4b04      	ldr	r3, [pc, #16]	; (800bd08 <vTaskSuspendAll+0x18>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	4a03      	ldr	r2, [pc, #12]	; (800bd08 <vTaskSuspendAll+0x18>)
 800bcfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bcfe:	bf00      	nop
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	240004ac 	.word	0x240004ac

0800bd0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd12:	2300      	movs	r3, #0
 800bd14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd16:	2300      	movs	r3, #0
 800bd18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd1a:	4b41      	ldr	r3, [pc, #260]	; (800be20 <xTaskResumeAll+0x114>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d10a      	bne.n	800bd38 <xTaskResumeAll+0x2c>
	__asm volatile
 800bd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd26:	f383 8811 	msr	BASEPRI, r3
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	603b      	str	r3, [r7, #0]
}
 800bd34:	bf00      	nop
 800bd36:	e7fe      	b.n	800bd36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd38:	f000 fef4 	bl	800cb24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd3c:	4b38      	ldr	r3, [pc, #224]	; (800be20 <xTaskResumeAll+0x114>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	3b01      	subs	r3, #1
 800bd42:	4a37      	ldr	r2, [pc, #220]	; (800be20 <xTaskResumeAll+0x114>)
 800bd44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd46:	4b36      	ldr	r3, [pc, #216]	; (800be20 <xTaskResumeAll+0x114>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d161      	bne.n	800be12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd4e:	4b35      	ldr	r3, [pc, #212]	; (800be24 <xTaskResumeAll+0x118>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d05d      	beq.n	800be12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd56:	e02e      	b.n	800bdb6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd58:	4b33      	ldr	r3, [pc, #204]	; (800be28 <xTaskResumeAll+0x11c>)
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	3318      	adds	r3, #24
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7fe fe11 	bl	800a98c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe fe0c 	bl	800a98c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd78:	2201      	movs	r2, #1
 800bd7a:	409a      	lsls	r2, r3
 800bd7c:	4b2b      	ldr	r3, [pc, #172]	; (800be2c <xTaskResumeAll+0x120>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	4a2a      	ldr	r2, [pc, #168]	; (800be2c <xTaskResumeAll+0x120>)
 800bd84:	6013      	str	r3, [r2, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4413      	add	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4a27      	ldr	r2, [pc, #156]	; (800be30 <xTaskResumeAll+0x124>)
 800bd94:	441a      	add	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	3304      	adds	r3, #4
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	4610      	mov	r0, r2
 800bd9e:	f7fe fd98 	bl	800a8d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda6:	4b23      	ldr	r3, [pc, #140]	; (800be34 <xTaskResumeAll+0x128>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d302      	bcc.n	800bdb6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bdb0:	4b21      	ldr	r3, [pc, #132]	; (800be38 <xTaskResumeAll+0x12c>)
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdb6:	4b1c      	ldr	r3, [pc, #112]	; (800be28 <xTaskResumeAll+0x11c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1cc      	bne.n	800bd58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d001      	beq.n	800bdc8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bdc4:	f000 fb3e 	bl	800c444 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bdc8:	4b1c      	ldr	r3, [pc, #112]	; (800be3c <xTaskResumeAll+0x130>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d010      	beq.n	800bdf6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bdd4:	f000 f858 	bl	800be88 <xTaskIncrementTick>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d002      	beq.n	800bde4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bdde:	4b16      	ldr	r3, [pc, #88]	; (800be38 <xTaskResumeAll+0x12c>)
 800bde0:	2201      	movs	r2, #1
 800bde2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	3b01      	subs	r3, #1
 800bde8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1f1      	bne.n	800bdd4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bdf0:	4b12      	ldr	r3, [pc, #72]	; (800be3c <xTaskResumeAll+0x130>)
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bdf6:	4b10      	ldr	r3, [pc, #64]	; (800be38 <xTaskResumeAll+0x12c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d009      	beq.n	800be12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdfe:	2301      	movs	r3, #1
 800be00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be02:	4b0f      	ldr	r3, [pc, #60]	; (800be40 <xTaskResumeAll+0x134>)
 800be04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be08:	601a      	str	r2, [r3, #0]
 800be0a:	f3bf 8f4f 	dsb	sy
 800be0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be12:	f000 feb7 	bl	800cb84 <vPortExitCritical>

	return xAlreadyYielded;
 800be16:	68bb      	ldr	r3, [r7, #8]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	240004ac 	.word	0x240004ac
 800be24:	24000484 	.word	0x24000484
 800be28:	24000444 	.word	0x24000444
 800be2c:	2400048c 	.word	0x2400048c
 800be30:	24000388 	.word	0x24000388
 800be34:	24000384 	.word	0x24000384
 800be38:	24000498 	.word	0x24000498
 800be3c:	24000494 	.word	0x24000494
 800be40:	e000ed04 	.word	0xe000ed04

0800be44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be4a:	4b05      	ldr	r3, [pc, #20]	; (800be60 <xTaskGetTickCount+0x1c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be50:	687b      	ldr	r3, [r7, #4]
}
 800be52:	4618      	mov	r0, r3
 800be54:	370c      	adds	r7, #12
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	24000488 	.word	0x24000488

0800be64 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be6a:	f000 ff3d 	bl	800cce8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800be6e:	2300      	movs	r3, #0
 800be70:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800be72:	4b04      	ldr	r3, [pc, #16]	; (800be84 <xTaskGetTickCountFromISR+0x20>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be78:	683b      	ldr	r3, [r7, #0]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	24000488 	.word	0x24000488

0800be88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be8e:	2300      	movs	r3, #0
 800be90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be92:	4b4e      	ldr	r3, [pc, #312]	; (800bfcc <xTaskIncrementTick+0x144>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f040 808e 	bne.w	800bfb8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be9c:	4b4c      	ldr	r3, [pc, #304]	; (800bfd0 <xTaskIncrementTick+0x148>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3301      	adds	r3, #1
 800bea2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bea4:	4a4a      	ldr	r2, [pc, #296]	; (800bfd0 <xTaskIncrementTick+0x148>)
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d120      	bne.n	800bef2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800beb0:	4b48      	ldr	r3, [pc, #288]	; (800bfd4 <xTaskIncrementTick+0x14c>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00a      	beq.n	800bed0 <xTaskIncrementTick+0x48>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	603b      	str	r3, [r7, #0]
}
 800becc:	bf00      	nop
 800bece:	e7fe      	b.n	800bece <xTaskIncrementTick+0x46>
 800bed0:	4b40      	ldr	r3, [pc, #256]	; (800bfd4 <xTaskIncrementTick+0x14c>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	60fb      	str	r3, [r7, #12]
 800bed6:	4b40      	ldr	r3, [pc, #256]	; (800bfd8 <xTaskIncrementTick+0x150>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a3e      	ldr	r2, [pc, #248]	; (800bfd4 <xTaskIncrementTick+0x14c>)
 800bedc:	6013      	str	r3, [r2, #0]
 800bede:	4a3e      	ldr	r2, [pc, #248]	; (800bfd8 <xTaskIncrementTick+0x150>)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6013      	str	r3, [r2, #0]
 800bee4:	4b3d      	ldr	r3, [pc, #244]	; (800bfdc <xTaskIncrementTick+0x154>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	3301      	adds	r3, #1
 800beea:	4a3c      	ldr	r2, [pc, #240]	; (800bfdc <xTaskIncrementTick+0x154>)
 800beec:	6013      	str	r3, [r2, #0]
 800beee:	f000 faa9 	bl	800c444 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bef2:	4b3b      	ldr	r3, [pc, #236]	; (800bfe0 <xTaskIncrementTick+0x158>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	693a      	ldr	r2, [r7, #16]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d348      	bcc.n	800bf8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800befc:	4b35      	ldr	r3, [pc, #212]	; (800bfd4 <xTaskIncrementTick+0x14c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d104      	bne.n	800bf10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf06:	4b36      	ldr	r3, [pc, #216]	; (800bfe0 <xTaskIncrementTick+0x158>)
 800bf08:	f04f 32ff 	mov.w	r2, #4294967295
 800bf0c:	601a      	str	r2, [r3, #0]
					break;
 800bf0e:	e03e      	b.n	800bf8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf10:	4b30      	ldr	r3, [pc, #192]	; (800bfd4 <xTaskIncrementTick+0x14c>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf20:	693a      	ldr	r2, [r7, #16]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d203      	bcs.n	800bf30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf28:	4a2d      	ldr	r2, [pc, #180]	; (800bfe0 <xTaskIncrementTick+0x158>)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf2e:	e02e      	b.n	800bf8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	3304      	adds	r3, #4
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fe fd29 	bl	800a98c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d004      	beq.n	800bf4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	3318      	adds	r3, #24
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fe fd20 	bl	800a98c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf50:	2201      	movs	r2, #1
 800bf52:	409a      	lsls	r2, r3
 800bf54:	4b23      	ldr	r3, [pc, #140]	; (800bfe4 <xTaskIncrementTick+0x15c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	4a22      	ldr	r2, [pc, #136]	; (800bfe4 <xTaskIncrementTick+0x15c>)
 800bf5c:	6013      	str	r3, [r2, #0]
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf62:	4613      	mov	r3, r2
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4413      	add	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4a1f      	ldr	r2, [pc, #124]	; (800bfe8 <xTaskIncrementTick+0x160>)
 800bf6c:	441a      	add	r2, r3
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	3304      	adds	r3, #4
 800bf72:	4619      	mov	r1, r3
 800bf74:	4610      	mov	r0, r2
 800bf76:	f7fe fcac 	bl	800a8d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7e:	4b1b      	ldr	r3, [pc, #108]	; (800bfec <xTaskIncrementTick+0x164>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d3b9      	bcc.n	800befc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf8c:	e7b6      	b.n	800befc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf8e:	4b17      	ldr	r3, [pc, #92]	; (800bfec <xTaskIncrementTick+0x164>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf94:	4914      	ldr	r1, [pc, #80]	; (800bfe8 <xTaskIncrementTick+0x160>)
 800bf96:	4613      	mov	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4413      	add	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d901      	bls.n	800bfaa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bfaa:	4b11      	ldr	r3, [pc, #68]	; (800bff0 <xTaskIncrementTick+0x168>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d007      	beq.n	800bfc2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	617b      	str	r3, [r7, #20]
 800bfb6:	e004      	b.n	800bfc2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bfb8:	4b0e      	ldr	r3, [pc, #56]	; (800bff4 <xTaskIncrementTick+0x16c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	4a0d      	ldr	r2, [pc, #52]	; (800bff4 <xTaskIncrementTick+0x16c>)
 800bfc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bfc2:	697b      	ldr	r3, [r7, #20]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3718      	adds	r7, #24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	240004ac 	.word	0x240004ac
 800bfd0:	24000488 	.word	0x24000488
 800bfd4:	2400043c 	.word	0x2400043c
 800bfd8:	24000440 	.word	0x24000440
 800bfdc:	2400049c 	.word	0x2400049c
 800bfe0:	240004a4 	.word	0x240004a4
 800bfe4:	2400048c 	.word	0x2400048c
 800bfe8:	24000388 	.word	0x24000388
 800bfec:	24000384 	.word	0x24000384
 800bff0:	24000498 	.word	0x24000498
 800bff4:	24000494 	.word	0x24000494

0800bff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bff8:	b480      	push	{r7}
 800bffa:	b087      	sub	sp, #28
 800bffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bffe:	4b29      	ldr	r3, [pc, #164]	; (800c0a4 <vTaskSwitchContext+0xac>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c006:	4b28      	ldr	r3, [pc, #160]	; (800c0a8 <vTaskSwitchContext+0xb0>)
 800c008:	2201      	movs	r2, #1
 800c00a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c00c:	e044      	b.n	800c098 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c00e:	4b26      	ldr	r3, [pc, #152]	; (800c0a8 <vTaskSwitchContext+0xb0>)
 800c010:	2200      	movs	r2, #0
 800c012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c014:	4b25      	ldr	r3, [pc, #148]	; (800c0ac <vTaskSwitchContext+0xb4>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	fab3 f383 	clz	r3, r3
 800c020:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c022:	7afb      	ldrb	r3, [r7, #11]
 800c024:	f1c3 031f 	rsb	r3, r3, #31
 800c028:	617b      	str	r3, [r7, #20]
 800c02a:	4921      	ldr	r1, [pc, #132]	; (800c0b0 <vTaskSwitchContext+0xb8>)
 800c02c:	697a      	ldr	r2, [r7, #20]
 800c02e:	4613      	mov	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	440b      	add	r3, r1
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d10a      	bne.n	800c054 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	607b      	str	r3, [r7, #4]
}
 800c050:	bf00      	nop
 800c052:	e7fe      	b.n	800c052 <vTaskSwitchContext+0x5a>
 800c054:	697a      	ldr	r2, [r7, #20]
 800c056:	4613      	mov	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4413      	add	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	4a14      	ldr	r2, [pc, #80]	; (800c0b0 <vTaskSwitchContext+0xb8>)
 800c060:	4413      	add	r3, r2
 800c062:	613b      	str	r3, [r7, #16]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	605a      	str	r2, [r3, #4]
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	685a      	ldr	r2, [r3, #4]
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	3308      	adds	r3, #8
 800c076:	429a      	cmp	r2, r3
 800c078:	d104      	bne.n	800c084 <vTaskSwitchContext+0x8c>
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	685a      	ldr	r2, [r3, #4]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	605a      	str	r2, [r3, #4]
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	4a0a      	ldr	r2, [pc, #40]	; (800c0b4 <vTaskSwitchContext+0xbc>)
 800c08c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c08e:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <vTaskSwitchContext+0xbc>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	334c      	adds	r3, #76	; 0x4c
 800c094:	4a08      	ldr	r2, [pc, #32]	; (800c0b8 <vTaskSwitchContext+0xc0>)
 800c096:	6013      	str	r3, [r2, #0]
}
 800c098:	bf00      	nop
 800c09a:	371c      	adds	r7, #28
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	240004ac 	.word	0x240004ac
 800c0a8:	24000498 	.word	0x24000498
 800c0ac:	2400048c 	.word	0x2400048c
 800c0b0:	24000388 	.word	0x24000388
 800c0b4:	24000384 	.word	0x24000384
 800c0b8:	24000044 	.word	0x24000044

0800c0bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10a      	bne.n	800c0e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	60fb      	str	r3, [r7, #12]
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0e2:	4b07      	ldr	r3, [pc, #28]	; (800c100 <vTaskPlaceOnEventList+0x44>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3318      	adds	r3, #24
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7fe fc15 	bl	800a91a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	6838      	ldr	r0, [r7, #0]
 800c0f4:	f000 fb82 	bl	800c7fc <prvAddCurrentTaskToDelayedList>
}
 800c0f8:	bf00      	nop
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	24000384 	.word	0x24000384

0800c104 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10a      	bne.n	800c130 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	60fb      	str	r3, [r7, #12]
}
 800c12c:	bf00      	nop
 800c12e:	e7fe      	b.n	800c12e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	3318      	adds	r3, #24
 800c134:	4618      	mov	r0, r3
 800c136:	f7fe fc29 	bl	800a98c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c13a:	4b1d      	ldr	r3, [pc, #116]	; (800c1b0 <xTaskRemoveFromEventList+0xac>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d11c      	bne.n	800c17c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	3304      	adds	r3, #4
 800c146:	4618      	mov	r0, r3
 800c148:	f7fe fc20 	bl	800a98c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c150:	2201      	movs	r2, #1
 800c152:	409a      	lsls	r2, r3
 800c154:	4b17      	ldr	r3, [pc, #92]	; (800c1b4 <xTaskRemoveFromEventList+0xb0>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4313      	orrs	r3, r2
 800c15a:	4a16      	ldr	r2, [pc, #88]	; (800c1b4 <xTaskRemoveFromEventList+0xb0>)
 800c15c:	6013      	str	r3, [r2, #0]
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c162:	4613      	mov	r3, r2
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	4413      	add	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4a13      	ldr	r2, [pc, #76]	; (800c1b8 <xTaskRemoveFromEventList+0xb4>)
 800c16c:	441a      	add	r2, r3
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	3304      	adds	r3, #4
 800c172:	4619      	mov	r1, r3
 800c174:	4610      	mov	r0, r2
 800c176:	f7fe fbac 	bl	800a8d2 <vListInsertEnd>
 800c17a:	e005      	b.n	800c188 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	3318      	adds	r3, #24
 800c180:	4619      	mov	r1, r3
 800c182:	480e      	ldr	r0, [pc, #56]	; (800c1bc <xTaskRemoveFromEventList+0xb8>)
 800c184:	f7fe fba5 	bl	800a8d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18c:	4b0c      	ldr	r3, [pc, #48]	; (800c1c0 <xTaskRemoveFromEventList+0xbc>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c192:	429a      	cmp	r2, r3
 800c194:	d905      	bls.n	800c1a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c196:	2301      	movs	r3, #1
 800c198:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c19a:	4b0a      	ldr	r3, [pc, #40]	; (800c1c4 <xTaskRemoveFromEventList+0xc0>)
 800c19c:	2201      	movs	r2, #1
 800c19e:	601a      	str	r2, [r3, #0]
 800c1a0:	e001      	b.n	800c1a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c1a6:	697b      	ldr	r3, [r7, #20]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3718      	adds	r7, #24
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	240004ac 	.word	0x240004ac
 800c1b4:	2400048c 	.word	0x2400048c
 800c1b8:	24000388 	.word	0x24000388
 800c1bc:	24000444 	.word	0x24000444
 800c1c0:	24000384 	.word	0x24000384
 800c1c4:	24000498 	.word	0x24000498

0800c1c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c1d0:	4b06      	ldr	r3, [pc, #24]	; (800c1ec <vTaskInternalSetTimeOutState+0x24>)
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c1d8:	4b05      	ldr	r3, [pc, #20]	; (800c1f0 <vTaskInternalSetTimeOutState+0x28>)
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	605a      	str	r2, [r3, #4]
}
 800c1e0:	bf00      	nop
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr
 800c1ec:	2400049c 	.word	0x2400049c
 800c1f0:	24000488 	.word	0x24000488

0800c1f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b088      	sub	sp, #32
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d10a      	bne.n	800c21a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c208:	f383 8811 	msr	BASEPRI, r3
 800c20c:	f3bf 8f6f 	isb	sy
 800c210:	f3bf 8f4f 	dsb	sy
 800c214:	613b      	str	r3, [r7, #16]
}
 800c216:	bf00      	nop
 800c218:	e7fe      	b.n	800c218 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10a      	bne.n	800c236 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	60fb      	str	r3, [r7, #12]
}
 800c232:	bf00      	nop
 800c234:	e7fe      	b.n	800c234 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c236:	f000 fc75 	bl	800cb24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c23a:	4b1d      	ldr	r3, [pc, #116]	; (800c2b0 <xTaskCheckForTimeOut+0xbc>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	69ba      	ldr	r2, [r7, #24]
 800c246:	1ad3      	subs	r3, r2, r3
 800c248:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c252:	d102      	bne.n	800c25a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c254:	2300      	movs	r3, #0
 800c256:	61fb      	str	r3, [r7, #28]
 800c258:	e023      	b.n	800c2a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	4b15      	ldr	r3, [pc, #84]	; (800c2b4 <xTaskCheckForTimeOut+0xc0>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	429a      	cmp	r2, r3
 800c264:	d007      	beq.n	800c276 <xTaskCheckForTimeOut+0x82>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	69ba      	ldr	r2, [r7, #24]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d302      	bcc.n	800c276 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c270:	2301      	movs	r3, #1
 800c272:	61fb      	str	r3, [r7, #28]
 800c274:	e015      	b.n	800c2a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d20b      	bcs.n	800c298 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	1ad2      	subs	r2, r2, r3
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7ff ff9b 	bl	800c1c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c292:	2300      	movs	r3, #0
 800c294:	61fb      	str	r3, [r7, #28]
 800c296:	e004      	b.n	800c2a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	2200      	movs	r2, #0
 800c29c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2a2:	f000 fc6f 	bl	800cb84 <vPortExitCritical>

	return xReturn;
 800c2a6:	69fb      	ldr	r3, [r7, #28]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3720      	adds	r7, #32
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	24000488 	.word	0x24000488
 800c2b4:	2400049c 	.word	0x2400049c

0800c2b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c2bc:	4b03      	ldr	r3, [pc, #12]	; (800c2cc <vTaskMissedYield+0x14>)
 800c2be:	2201      	movs	r2, #1
 800c2c0:	601a      	str	r2, [r3, #0]
}
 800c2c2:	bf00      	nop
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	24000498 	.word	0x24000498

0800c2d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c2d8:	f000 f852 	bl	800c380 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c2dc:	4b06      	ldr	r3, [pc, #24]	; (800c2f8 <prvIdleTask+0x28>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d9f9      	bls.n	800c2d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c2e4:	4b05      	ldr	r3, [pc, #20]	; (800c2fc <prvIdleTask+0x2c>)
 800c2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ea:	601a      	str	r2, [r3, #0]
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c2f4:	e7f0      	b.n	800c2d8 <prvIdleTask+0x8>
 800c2f6:	bf00      	nop
 800c2f8:	24000388 	.word	0x24000388
 800c2fc:	e000ed04 	.word	0xe000ed04

0800c300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c306:	2300      	movs	r3, #0
 800c308:	607b      	str	r3, [r7, #4]
 800c30a:	e00c      	b.n	800c326 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	4613      	mov	r3, r2
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	4a12      	ldr	r2, [pc, #72]	; (800c360 <prvInitialiseTaskLists+0x60>)
 800c318:	4413      	add	r3, r2
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fe faac 	bl	800a878 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	3301      	adds	r3, #1
 800c324:	607b      	str	r3, [r7, #4]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b06      	cmp	r3, #6
 800c32a:	d9ef      	bls.n	800c30c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c32c:	480d      	ldr	r0, [pc, #52]	; (800c364 <prvInitialiseTaskLists+0x64>)
 800c32e:	f7fe faa3 	bl	800a878 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c332:	480d      	ldr	r0, [pc, #52]	; (800c368 <prvInitialiseTaskLists+0x68>)
 800c334:	f7fe faa0 	bl	800a878 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c338:	480c      	ldr	r0, [pc, #48]	; (800c36c <prvInitialiseTaskLists+0x6c>)
 800c33a:	f7fe fa9d 	bl	800a878 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c33e:	480c      	ldr	r0, [pc, #48]	; (800c370 <prvInitialiseTaskLists+0x70>)
 800c340:	f7fe fa9a 	bl	800a878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c344:	480b      	ldr	r0, [pc, #44]	; (800c374 <prvInitialiseTaskLists+0x74>)
 800c346:	f7fe fa97 	bl	800a878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c34a:	4b0b      	ldr	r3, [pc, #44]	; (800c378 <prvInitialiseTaskLists+0x78>)
 800c34c:	4a05      	ldr	r2, [pc, #20]	; (800c364 <prvInitialiseTaskLists+0x64>)
 800c34e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c350:	4b0a      	ldr	r3, [pc, #40]	; (800c37c <prvInitialiseTaskLists+0x7c>)
 800c352:	4a05      	ldr	r2, [pc, #20]	; (800c368 <prvInitialiseTaskLists+0x68>)
 800c354:	601a      	str	r2, [r3, #0]
}
 800c356:	bf00      	nop
 800c358:	3708      	adds	r7, #8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	24000388 	.word	0x24000388
 800c364:	24000414 	.word	0x24000414
 800c368:	24000428 	.word	0x24000428
 800c36c:	24000444 	.word	0x24000444
 800c370:	24000458 	.word	0x24000458
 800c374:	24000470 	.word	0x24000470
 800c378:	2400043c 	.word	0x2400043c
 800c37c:	24000440 	.word	0x24000440

0800c380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c386:	e019      	b.n	800c3bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c388:	f000 fbcc 	bl	800cb24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c38c:	4b10      	ldr	r3, [pc, #64]	; (800c3d0 <prvCheckTasksWaitingTermination+0x50>)
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	3304      	adds	r3, #4
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fe faf7 	bl	800a98c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c39e:	4b0d      	ldr	r3, [pc, #52]	; (800c3d4 <prvCheckTasksWaitingTermination+0x54>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	4a0b      	ldr	r2, [pc, #44]	; (800c3d4 <prvCheckTasksWaitingTermination+0x54>)
 800c3a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c3a8:	4b0b      	ldr	r3, [pc, #44]	; (800c3d8 <prvCheckTasksWaitingTermination+0x58>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	4a0a      	ldr	r2, [pc, #40]	; (800c3d8 <prvCheckTasksWaitingTermination+0x58>)
 800c3b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c3b2:	f000 fbe7 	bl	800cb84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f810 	bl	800c3dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3bc:	4b06      	ldr	r3, [pc, #24]	; (800c3d8 <prvCheckTasksWaitingTermination+0x58>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1e1      	bne.n	800c388 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c3c4:	bf00      	nop
 800c3c6:	bf00      	nop
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	24000458 	.word	0x24000458
 800c3d4:	24000484 	.word	0x24000484
 800c3d8:	2400046c 	.word	0x2400046c

0800c3dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	334c      	adds	r3, #76	; 0x4c
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f00b fa17 	bl	801781c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d108      	bne.n	800c40a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f000 fd7f 	bl	800cf00 <vPortFree>
				vPortFree( pxTCB );
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 fd7c 	bl	800cf00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c408:	e018      	b.n	800c43c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c410:	2b01      	cmp	r3, #1
 800c412:	d103      	bne.n	800c41c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fd73 	bl	800cf00 <vPortFree>
	}
 800c41a:	e00f      	b.n	800c43c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c422:	2b02      	cmp	r3, #2
 800c424:	d00a      	beq.n	800c43c <prvDeleteTCB+0x60>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	60fb      	str	r3, [r7, #12]
}
 800c438:	bf00      	nop
 800c43a:	e7fe      	b.n	800c43a <prvDeleteTCB+0x5e>
	}
 800c43c:	bf00      	nop
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c44a:	4b0c      	ldr	r3, [pc, #48]	; (800c47c <prvResetNextTaskUnblockTime+0x38>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d104      	bne.n	800c45e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c454:	4b0a      	ldr	r3, [pc, #40]	; (800c480 <prvResetNextTaskUnblockTime+0x3c>)
 800c456:	f04f 32ff 	mov.w	r2, #4294967295
 800c45a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c45c:	e008      	b.n	800c470 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c45e:	4b07      	ldr	r3, [pc, #28]	; (800c47c <prvResetNextTaskUnblockTime+0x38>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	4a04      	ldr	r2, [pc, #16]	; (800c480 <prvResetNextTaskUnblockTime+0x3c>)
 800c46e:	6013      	str	r3, [r2, #0]
}
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	2400043c 	.word	0x2400043c
 800c480:	240004a4 	.word	0x240004a4

0800c484 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c48a:	4b0b      	ldr	r3, [pc, #44]	; (800c4b8 <xTaskGetSchedulerState+0x34>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d102      	bne.n	800c498 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c492:	2301      	movs	r3, #1
 800c494:	607b      	str	r3, [r7, #4]
 800c496:	e008      	b.n	800c4aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c498:	4b08      	ldr	r3, [pc, #32]	; (800c4bc <xTaskGetSchedulerState+0x38>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	607b      	str	r3, [r7, #4]
 800c4a4:	e001      	b.n	800c4aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4aa:	687b      	ldr	r3, [r7, #4]
	}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	24000490 	.word	0x24000490
 800c4bc:	240004ac 	.word	0x240004ac

0800c4c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d05e      	beq.n	800c594 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4da:	4b31      	ldr	r3, [pc, #196]	; (800c5a0 <xTaskPriorityInherit+0xe0>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d24e      	bcs.n	800c582 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	db06      	blt.n	800c4fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ec:	4b2c      	ldr	r3, [pc, #176]	; (800c5a0 <xTaskPriorityInherit+0xe0>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f2:	f1c3 0207 	rsb	r2, r3, #7
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	6959      	ldr	r1, [r3, #20]
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c502:	4613      	mov	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4a26      	ldr	r2, [pc, #152]	; (800c5a4 <xTaskPriorityInherit+0xe4>)
 800c50c:	4413      	add	r3, r2
 800c50e:	4299      	cmp	r1, r3
 800c510:	d12f      	bne.n	800c572 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	3304      	adds	r3, #4
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe fa38 	bl	800a98c <uxListRemove>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10a      	bne.n	800c538 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c526:	2201      	movs	r2, #1
 800c528:	fa02 f303 	lsl.w	r3, r2, r3
 800c52c:	43da      	mvns	r2, r3
 800c52e:	4b1e      	ldr	r3, [pc, #120]	; (800c5a8 <xTaskPriorityInherit+0xe8>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4013      	ands	r3, r2
 800c534:	4a1c      	ldr	r2, [pc, #112]	; (800c5a8 <xTaskPriorityInherit+0xe8>)
 800c536:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c538:	4b19      	ldr	r3, [pc, #100]	; (800c5a0 <xTaskPriorityInherit+0xe0>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c546:	2201      	movs	r2, #1
 800c548:	409a      	lsls	r2, r3
 800c54a:	4b17      	ldr	r3, [pc, #92]	; (800c5a8 <xTaskPriorityInherit+0xe8>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4313      	orrs	r3, r2
 800c550:	4a15      	ldr	r2, [pc, #84]	; (800c5a8 <xTaskPriorityInherit+0xe8>)
 800c552:	6013      	str	r3, [r2, #0]
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c558:	4613      	mov	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4a10      	ldr	r2, [pc, #64]	; (800c5a4 <xTaskPriorityInherit+0xe4>)
 800c562:	441a      	add	r2, r3
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	3304      	adds	r3, #4
 800c568:	4619      	mov	r1, r3
 800c56a:	4610      	mov	r0, r2
 800c56c:	f7fe f9b1 	bl	800a8d2 <vListInsertEnd>
 800c570:	e004      	b.n	800c57c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c572:	4b0b      	ldr	r3, [pc, #44]	; (800c5a0 <xTaskPriorityInherit+0xe0>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c57c:	2301      	movs	r3, #1
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	e008      	b.n	800c594 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c586:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <xTaskPriorityInherit+0xe0>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d201      	bcs.n	800c594 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c590:	2301      	movs	r3, #1
 800c592:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c594:	68fb      	ldr	r3, [r7, #12]
	}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	24000384 	.word	0x24000384
 800c5a4:	24000388 	.word	0x24000388
 800c5a8:	2400048c 	.word	0x2400048c

0800c5ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d06e      	beq.n	800c6a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c5c2:	4b3a      	ldr	r3, [pc, #232]	; (800c6ac <xTaskPriorityDisinherit+0x100>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	693a      	ldr	r2, [r7, #16]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d00a      	beq.n	800c5e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	60fb      	str	r3, [r7, #12]
}
 800c5de:	bf00      	nop
 800c5e0:	e7fe      	b.n	800c5e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10a      	bne.n	800c600 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ee:	f383 8811 	msr	BASEPRI, r3
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	60bb      	str	r3, [r7, #8]
}
 800c5fc:	bf00      	nop
 800c5fe:	e7fe      	b.n	800c5fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c604:	1e5a      	subs	r2, r3, #1
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c612:	429a      	cmp	r2, r3
 800c614:	d044      	beq.n	800c6a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d140      	bne.n	800c6a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	3304      	adds	r3, #4
 800c622:	4618      	mov	r0, r3
 800c624:	f7fe f9b2 	bl	800a98c <uxListRemove>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d115      	bne.n	800c65a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c632:	491f      	ldr	r1, [pc, #124]	; (800c6b0 <xTaskPriorityDisinherit+0x104>)
 800c634:	4613      	mov	r3, r2
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	4413      	add	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	440b      	add	r3, r1
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d10a      	bne.n	800c65a <xTaskPriorityDisinherit+0xae>
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c648:	2201      	movs	r2, #1
 800c64a:	fa02 f303 	lsl.w	r3, r2, r3
 800c64e:	43da      	mvns	r2, r3
 800c650:	4b18      	ldr	r3, [pc, #96]	; (800c6b4 <xTaskPriorityDisinherit+0x108>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4013      	ands	r3, r2
 800c656:	4a17      	ldr	r2, [pc, #92]	; (800c6b4 <xTaskPriorityDisinherit+0x108>)
 800c658:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c666:	f1c3 0207 	rsb	r2, r3, #7
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c672:	2201      	movs	r2, #1
 800c674:	409a      	lsls	r2, r3
 800c676:	4b0f      	ldr	r3, [pc, #60]	; (800c6b4 <xTaskPriorityDisinherit+0x108>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	4a0d      	ldr	r2, [pc, #52]	; (800c6b4 <xTaskPriorityDisinherit+0x108>)
 800c67e:	6013      	str	r3, [r2, #0]
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c684:	4613      	mov	r3, r2
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	4413      	add	r3, r2
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4a08      	ldr	r2, [pc, #32]	; (800c6b0 <xTaskPriorityDisinherit+0x104>)
 800c68e:	441a      	add	r2, r3
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	3304      	adds	r3, #4
 800c694:	4619      	mov	r1, r3
 800c696:	4610      	mov	r0, r2
 800c698:	f7fe f91b 	bl	800a8d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c69c:	2301      	movs	r3, #1
 800c69e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6a0:	697b      	ldr	r3, [r7, #20]
	}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3718      	adds	r7, #24
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	24000384 	.word	0x24000384
 800c6b0:	24000388 	.word	0x24000388
 800c6b4:	2400048c 	.word	0x2400048c

0800c6b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b088      	sub	sp, #32
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d077      	beq.n	800c7c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10a      	bne.n	800c6ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6dc:	f383 8811 	msr	BASEPRI, r3
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	60fb      	str	r3, [r7, #12]
}
 800c6ea:	bf00      	nop
 800c6ec:	e7fe      	b.n	800c6ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d902      	bls.n	800c6fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	61fb      	str	r3, [r7, #28]
 800c6fc:	e002      	b.n	800c704 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c702:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c708:	69fa      	ldr	r2, [r7, #28]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d058      	beq.n	800c7c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c712:	697a      	ldr	r2, [r7, #20]
 800c714:	429a      	cmp	r2, r3
 800c716:	d153      	bne.n	800c7c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c718:	4b2b      	ldr	r3, [pc, #172]	; (800c7c8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	69ba      	ldr	r2, [r7, #24]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d10a      	bne.n	800c738 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	60bb      	str	r3, [r7, #8]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	69fa      	ldr	r2, [r7, #28]
 800c742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	db04      	blt.n	800c756 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	f1c3 0207 	rsb	r2, r3, #7
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	6959      	ldr	r1, [r3, #20]
 800c75a:	693a      	ldr	r2, [r7, #16]
 800c75c:	4613      	mov	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4a19      	ldr	r2, [pc, #100]	; (800c7cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c766:	4413      	add	r3, r2
 800c768:	4299      	cmp	r1, r3
 800c76a:	d129      	bne.n	800c7c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	3304      	adds	r3, #4
 800c770:	4618      	mov	r0, r3
 800c772:	f7fe f90b 	bl	800a98c <uxListRemove>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10a      	bne.n	800c792 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c780:	2201      	movs	r2, #1
 800c782:	fa02 f303 	lsl.w	r3, r2, r3
 800c786:	43da      	mvns	r2, r3
 800c788:	4b11      	ldr	r3, [pc, #68]	; (800c7d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4013      	ands	r3, r2
 800c78e:	4a10      	ldr	r2, [pc, #64]	; (800c7d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c790:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c796:	2201      	movs	r2, #1
 800c798:	409a      	lsls	r2, r3
 800c79a:	4b0d      	ldr	r3, [pc, #52]	; (800c7d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	4a0b      	ldr	r2, [pc, #44]	; (800c7d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c7a2:	6013      	str	r3, [r2, #0]
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4a06      	ldr	r2, [pc, #24]	; (800c7cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c7b2:	441a      	add	r2, r3
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	f7fe f889 	bl	800a8d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7c0:	bf00      	nop
 800c7c2:	3720      	adds	r7, #32
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	24000384 	.word	0x24000384
 800c7cc:	24000388 	.word	0x24000388
 800c7d0:	2400048c 	.word	0x2400048c

0800c7d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c7d4:	b480      	push	{r7}
 800c7d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c7d8:	4b07      	ldr	r3, [pc, #28]	; (800c7f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d004      	beq.n	800c7ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c7e0:	4b05      	ldr	r3, [pc, #20]	; (800c7f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c7e6:	3201      	adds	r2, #1
 800c7e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c7ea:	4b03      	ldr	r3, [pc, #12]	; (800c7f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
	}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr
 800c7f8:	24000384 	.word	0x24000384

0800c7fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c806:	4b29      	ldr	r3, [pc, #164]	; (800c8ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c80c:	4b28      	ldr	r3, [pc, #160]	; (800c8b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	3304      	adds	r3, #4
 800c812:	4618      	mov	r0, r3
 800c814:	f7fe f8ba 	bl	800a98c <uxListRemove>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10b      	bne.n	800c836 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c81e:	4b24      	ldr	r3, [pc, #144]	; (800c8b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c824:	2201      	movs	r2, #1
 800c826:	fa02 f303 	lsl.w	r3, r2, r3
 800c82a:	43da      	mvns	r2, r3
 800c82c:	4b21      	ldr	r3, [pc, #132]	; (800c8b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4013      	ands	r3, r2
 800c832:	4a20      	ldr	r2, [pc, #128]	; (800c8b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c834:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c83c:	d10a      	bne.n	800c854 <prvAddCurrentTaskToDelayedList+0x58>
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d007      	beq.n	800c854 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c844:	4b1a      	ldr	r3, [pc, #104]	; (800c8b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	3304      	adds	r3, #4
 800c84a:	4619      	mov	r1, r3
 800c84c:	481a      	ldr	r0, [pc, #104]	; (800c8b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c84e:	f7fe f840 	bl	800a8d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c852:	e026      	b.n	800c8a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4413      	add	r3, r2
 800c85a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c85c:	4b14      	ldr	r3, [pc, #80]	; (800c8b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c864:	68ba      	ldr	r2, [r7, #8]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d209      	bcs.n	800c880 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c86c:	4b13      	ldr	r3, [pc, #76]	; (800c8bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	4b0f      	ldr	r3, [pc, #60]	; (800c8b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	3304      	adds	r3, #4
 800c876:	4619      	mov	r1, r3
 800c878:	4610      	mov	r0, r2
 800c87a:	f7fe f84e 	bl	800a91a <vListInsert>
}
 800c87e:	e010      	b.n	800c8a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c880:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	4b0a      	ldr	r3, [pc, #40]	; (800c8b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3304      	adds	r3, #4
 800c88a:	4619      	mov	r1, r3
 800c88c:	4610      	mov	r0, r2
 800c88e:	f7fe f844 	bl	800a91a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c892:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d202      	bcs.n	800c8a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c89c:	4a09      	ldr	r2, [pc, #36]	; (800c8c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	6013      	str	r3, [r2, #0]
}
 800c8a2:	bf00      	nop
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	24000488 	.word	0x24000488
 800c8b0:	24000384 	.word	0x24000384
 800c8b4:	2400048c 	.word	0x2400048c
 800c8b8:	24000470 	.word	0x24000470
 800c8bc:	24000440 	.word	0x24000440
 800c8c0:	2400043c 	.word	0x2400043c
 800c8c4:	240004a4 	.word	0x240004a4

0800c8c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	3b04      	subs	r3, #4
 800c8d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c8e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	3b04      	subs	r3, #4
 800c8e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	f023 0201 	bic.w	r2, r3, #1
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	3b04      	subs	r3, #4
 800c8f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8f8:	4a0c      	ldr	r2, [pc, #48]	; (800c92c <pxPortInitialiseStack+0x64>)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	3b14      	subs	r3, #20
 800c902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3b04      	subs	r3, #4
 800c90e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f06f 0202 	mvn.w	r2, #2
 800c916:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	3b20      	subs	r3, #32
 800c91c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c91e:	68fb      	ldr	r3, [r7, #12]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3714      	adds	r7, #20
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	0800c931 	.word	0x0800c931

0800c930 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c93a:	4b12      	ldr	r3, [pc, #72]	; (800c984 <prvTaskExitError+0x54>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c942:	d00a      	beq.n	800c95a <prvTaskExitError+0x2a>
	__asm volatile
 800c944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	60fb      	str	r3, [r7, #12]
}
 800c956:	bf00      	nop
 800c958:	e7fe      	b.n	800c958 <prvTaskExitError+0x28>
	__asm volatile
 800c95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	60bb      	str	r3, [r7, #8]
}
 800c96c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c96e:	bf00      	nop
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d0fc      	beq.n	800c970 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c976:	bf00      	nop
 800c978:	bf00      	nop
 800c97a:	3714      	adds	r7, #20
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr
 800c984:	24000034 	.word	0x24000034
	...

0800c990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c990:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <pxCurrentTCBConst2>)
 800c992:	6819      	ldr	r1, [r3, #0]
 800c994:	6808      	ldr	r0, [r1, #0]
 800c996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99a:	f380 8809 	msr	PSP, r0
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f04f 0000 	mov.w	r0, #0
 800c9a6:	f380 8811 	msr	BASEPRI, r0
 800c9aa:	4770      	bx	lr
 800c9ac:	f3af 8000 	nop.w

0800c9b0 <pxCurrentTCBConst2>:
 800c9b0:	24000384 	.word	0x24000384
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c9b4:	bf00      	nop
 800c9b6:	bf00      	nop

0800c9b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c9b8:	4808      	ldr	r0, [pc, #32]	; (800c9dc <prvPortStartFirstTask+0x24>)
 800c9ba:	6800      	ldr	r0, [r0, #0]
 800c9bc:	6800      	ldr	r0, [r0, #0]
 800c9be:	f380 8808 	msr	MSP, r0
 800c9c2:	f04f 0000 	mov.w	r0, #0
 800c9c6:	f380 8814 	msr	CONTROL, r0
 800c9ca:	b662      	cpsie	i
 800c9cc:	b661      	cpsie	f
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	df00      	svc	0
 800c9d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c9da:	bf00      	nop
 800c9dc:	e000ed08 	.word	0xe000ed08

0800c9e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c9e6:	4b46      	ldr	r3, [pc, #280]	; (800cb00 <xPortStartScheduler+0x120>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a46      	ldr	r2, [pc, #280]	; (800cb04 <xPortStartScheduler+0x124>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d10a      	bne.n	800ca06 <xPortStartScheduler+0x26>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	613b      	str	r3, [r7, #16]
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca06:	4b3e      	ldr	r3, [pc, #248]	; (800cb00 <xPortStartScheduler+0x120>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a3f      	ldr	r2, [pc, #252]	; (800cb08 <xPortStartScheduler+0x128>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d10a      	bne.n	800ca26 <xPortStartScheduler+0x46>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	60fb      	str	r3, [r7, #12]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca26:	4b39      	ldr	r3, [pc, #228]	; (800cb0c <xPortStartScheduler+0x12c>)
 800ca28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	22ff      	movs	r2, #255	; 0xff
 800ca36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca40:	78fb      	ldrb	r3, [r7, #3]
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	4b31      	ldr	r3, [pc, #196]	; (800cb10 <xPortStartScheduler+0x130>)
 800ca4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca4e:	4b31      	ldr	r3, [pc, #196]	; (800cb14 <xPortStartScheduler+0x134>)
 800ca50:	2207      	movs	r2, #7
 800ca52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca54:	e009      	b.n	800ca6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ca56:	4b2f      	ldr	r3, [pc, #188]	; (800cb14 <xPortStartScheduler+0x134>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	3b01      	subs	r3, #1
 800ca5c:	4a2d      	ldr	r2, [pc, #180]	; (800cb14 <xPortStartScheduler+0x134>)
 800ca5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca60:	78fb      	ldrb	r3, [r7, #3]
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	005b      	lsls	r3, r3, #1
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca6a:	78fb      	ldrb	r3, [r7, #3]
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca72:	2b80      	cmp	r3, #128	; 0x80
 800ca74:	d0ef      	beq.n	800ca56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca76:	4b27      	ldr	r3, [pc, #156]	; (800cb14 <xPortStartScheduler+0x134>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f1c3 0307 	rsb	r3, r3, #7
 800ca7e:	2b04      	cmp	r3, #4
 800ca80:	d00a      	beq.n	800ca98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ca82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca86:	f383 8811 	msr	BASEPRI, r3
 800ca8a:	f3bf 8f6f 	isb	sy
 800ca8e:	f3bf 8f4f 	dsb	sy
 800ca92:	60bb      	str	r3, [r7, #8]
}
 800ca94:	bf00      	nop
 800ca96:	e7fe      	b.n	800ca96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca98:	4b1e      	ldr	r3, [pc, #120]	; (800cb14 <xPortStartScheduler+0x134>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	021b      	lsls	r3, r3, #8
 800ca9e:	4a1d      	ldr	r2, [pc, #116]	; (800cb14 <xPortStartScheduler+0x134>)
 800caa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800caa2:	4b1c      	ldr	r3, [pc, #112]	; (800cb14 <xPortStartScheduler+0x134>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800caaa:	4a1a      	ldr	r2, [pc, #104]	; (800cb14 <xPortStartScheduler+0x134>)
 800caac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	b2da      	uxtb	r2, r3
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cab6:	4b18      	ldr	r3, [pc, #96]	; (800cb18 <xPortStartScheduler+0x138>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a17      	ldr	r2, [pc, #92]	; (800cb18 <xPortStartScheduler+0x138>)
 800cabc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cac2:	4b15      	ldr	r3, [pc, #84]	; (800cb18 <xPortStartScheduler+0x138>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a14      	ldr	r2, [pc, #80]	; (800cb18 <xPortStartScheduler+0x138>)
 800cac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cacc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cace:	f000 f8dd 	bl	800cc8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cad2:	4b12      	ldr	r3, [pc, #72]	; (800cb1c <xPortStartScheduler+0x13c>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cad8:	f000 f8fc 	bl	800ccd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cadc:	4b10      	ldr	r3, [pc, #64]	; (800cb20 <xPortStartScheduler+0x140>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a0f      	ldr	r2, [pc, #60]	; (800cb20 <xPortStartScheduler+0x140>)
 800cae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cae8:	f7ff ff66 	bl	800c9b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800caec:	f7ff fa84 	bl	800bff8 <vTaskSwitchContext>
	prvTaskExitError();
 800caf0:	f7ff ff1e 	bl	800c930 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	e000ed00 	.word	0xe000ed00
 800cb04:	410fc271 	.word	0x410fc271
 800cb08:	410fc270 	.word	0x410fc270
 800cb0c:	e000e400 	.word	0xe000e400
 800cb10:	240004b0 	.word	0x240004b0
 800cb14:	240004b4 	.word	0x240004b4
 800cb18:	e000ed20 	.word	0xe000ed20
 800cb1c:	24000034 	.word	0x24000034
 800cb20:	e000ef34 	.word	0xe000ef34

0800cb24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
	__asm volatile
 800cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
 800cb3a:	607b      	str	r3, [r7, #4]
}
 800cb3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb3e:	4b0f      	ldr	r3, [pc, #60]	; (800cb7c <vPortEnterCritical+0x58>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3301      	adds	r3, #1
 800cb44:	4a0d      	ldr	r2, [pc, #52]	; (800cb7c <vPortEnterCritical+0x58>)
 800cb46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb48:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <vPortEnterCritical+0x58>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d10f      	bne.n	800cb70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb50:	4b0b      	ldr	r3, [pc, #44]	; (800cb80 <vPortEnterCritical+0x5c>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00a      	beq.n	800cb70 <vPortEnterCritical+0x4c>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	603b      	str	r3, [r7, #0]
}
 800cb6c:	bf00      	nop
 800cb6e:	e7fe      	b.n	800cb6e <vPortEnterCritical+0x4a>
	}
}
 800cb70:	bf00      	nop
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr
 800cb7c:	24000034 	.word	0x24000034
 800cb80:	e000ed04 	.word	0xe000ed04

0800cb84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb8a:	4b12      	ldr	r3, [pc, #72]	; (800cbd4 <vPortExitCritical+0x50>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d10a      	bne.n	800cba8 <vPortExitCritical+0x24>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	607b      	str	r3, [r7, #4]
}
 800cba4:	bf00      	nop
 800cba6:	e7fe      	b.n	800cba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cba8:	4b0a      	ldr	r3, [pc, #40]	; (800cbd4 <vPortExitCritical+0x50>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	3b01      	subs	r3, #1
 800cbae:	4a09      	ldr	r2, [pc, #36]	; (800cbd4 <vPortExitCritical+0x50>)
 800cbb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cbb2:	4b08      	ldr	r3, [pc, #32]	; (800cbd4 <vPortExitCritical+0x50>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d105      	bne.n	800cbc6 <vPortExitCritical+0x42>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	f383 8811 	msr	BASEPRI, r3
}
 800cbc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cbc6:	bf00      	nop
 800cbc8:	370c      	adds	r7, #12
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	24000034 	.word	0x24000034
	...

0800cbe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cbe0:	f3ef 8009 	mrs	r0, PSP
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	4b15      	ldr	r3, [pc, #84]	; (800cc40 <pxCurrentTCBConst>)
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	f01e 0f10 	tst.w	lr, #16
 800cbf0:	bf08      	it	eq
 800cbf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cbf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbfa:	6010      	str	r0, [r2, #0]
 800cbfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cc04:	f380 8811 	msr	BASEPRI, r0
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f7ff f9f2 	bl	800bff8 <vTaskSwitchContext>
 800cc14:	f04f 0000 	mov.w	r0, #0
 800cc18:	f380 8811 	msr	BASEPRI, r0
 800cc1c:	bc09      	pop	{r0, r3}
 800cc1e:	6819      	ldr	r1, [r3, #0]
 800cc20:	6808      	ldr	r0, [r1, #0]
 800cc22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc26:	f01e 0f10 	tst.w	lr, #16
 800cc2a:	bf08      	it	eq
 800cc2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc30:	f380 8809 	msr	PSP, r0
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	f3af 8000 	nop.w

0800cc40 <pxCurrentTCBConst>:
 800cc40:	24000384 	.word	0x24000384
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc44:	bf00      	nop
 800cc46:	bf00      	nop

0800cc48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	607b      	str	r3, [r7, #4]
}
 800cc60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc62:	f7ff f911 	bl	800be88 <xTaskIncrementTick>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d003      	beq.n	800cc74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc6c:	4b06      	ldr	r3, [pc, #24]	; (800cc88 <SysTick_Handler+0x40>)
 800cc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	2300      	movs	r3, #0
 800cc76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	f383 8811 	msr	BASEPRI, r3
}
 800cc7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc80:	bf00      	nop
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	e000ed04 	.word	0xe000ed04

0800cc8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc90:	4b0b      	ldr	r3, [pc, #44]	; (800ccc0 <vPortSetupTimerInterrupt+0x34>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc96:	4b0b      	ldr	r3, [pc, #44]	; (800ccc4 <vPortSetupTimerInterrupt+0x38>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc9c:	4b0a      	ldr	r3, [pc, #40]	; (800ccc8 <vPortSetupTimerInterrupt+0x3c>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a0a      	ldr	r2, [pc, #40]	; (800cccc <vPortSetupTimerInterrupt+0x40>)
 800cca2:	fba2 2303 	umull	r2, r3, r2, r3
 800cca6:	099b      	lsrs	r3, r3, #6
 800cca8:	4a09      	ldr	r2, [pc, #36]	; (800ccd0 <vPortSetupTimerInterrupt+0x44>)
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ccae:	4b04      	ldr	r3, [pc, #16]	; (800ccc0 <vPortSetupTimerInterrupt+0x34>)
 800ccb0:	2207      	movs	r2, #7
 800ccb2:	601a      	str	r2, [r3, #0]
}
 800ccb4:	bf00      	nop
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	e000e010 	.word	0xe000e010
 800ccc4:	e000e018 	.word	0xe000e018
 800ccc8:	24000010 	.word	0x24000010
 800cccc:	10624dd3 	.word	0x10624dd3
 800ccd0:	e000e014 	.word	0xe000e014

0800ccd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ccd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cce4 <vPortEnableVFP+0x10>
 800ccd8:	6801      	ldr	r1, [r0, #0]
 800ccda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ccde:	6001      	str	r1, [r0, #0]
 800cce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cce2:	bf00      	nop
 800cce4:	e000ed88 	.word	0xe000ed88

0800cce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ccee:	f3ef 8305 	mrs	r3, IPSR
 800ccf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2b0f      	cmp	r3, #15
 800ccf8:	d914      	bls.n	800cd24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ccfa:	4a17      	ldr	r2, [pc, #92]	; (800cd58 <vPortValidateInterruptPriority+0x70>)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	4413      	add	r3, r2
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd04:	4b15      	ldr	r3, [pc, #84]	; (800cd5c <vPortValidateInterruptPriority+0x74>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	7afa      	ldrb	r2, [r7, #11]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d20a      	bcs.n	800cd24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	607b      	str	r3, [r7, #4]
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd24:	4b0e      	ldr	r3, [pc, #56]	; (800cd60 <vPortValidateInterruptPriority+0x78>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cd2c:	4b0d      	ldr	r3, [pc, #52]	; (800cd64 <vPortValidateInterruptPriority+0x7c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d90a      	bls.n	800cd4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd38:	f383 8811 	msr	BASEPRI, r3
 800cd3c:	f3bf 8f6f 	isb	sy
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	603b      	str	r3, [r7, #0]
}
 800cd46:	bf00      	nop
 800cd48:	e7fe      	b.n	800cd48 <vPortValidateInterruptPriority+0x60>
	}
 800cd4a:	bf00      	nop
 800cd4c:	3714      	adds	r7, #20
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	e000e3f0 	.word	0xe000e3f0
 800cd5c:	240004b0 	.word	0x240004b0
 800cd60:	e000ed0c 	.word	0xe000ed0c
 800cd64:	240004b4 	.word	0x240004b4

0800cd68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b08a      	sub	sp, #40	; 0x28
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd70:	2300      	movs	r3, #0
 800cd72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd74:	f7fe ffbc 	bl	800bcf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd78:	4b5b      	ldr	r3, [pc, #364]	; (800cee8 <pvPortMalloc+0x180>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d101      	bne.n	800cd84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd80:	f000 f920 	bl	800cfc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd84:	4b59      	ldr	r3, [pc, #356]	; (800ceec <pvPortMalloc+0x184>)
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4013      	ands	r3, r2
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f040 8093 	bne.w	800ceb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d01d      	beq.n	800cdd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cd98:	2208      	movs	r2, #8
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f003 0307 	and.w	r3, r3, #7
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d014      	beq.n	800cdd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f023 0307 	bic.w	r3, r3, #7
 800cdb0:	3308      	adds	r3, #8
 800cdb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f003 0307 	and.w	r3, r3, #7
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00a      	beq.n	800cdd4 <pvPortMalloc+0x6c>
	__asm volatile
 800cdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc2:	f383 8811 	msr	BASEPRI, r3
 800cdc6:	f3bf 8f6f 	isb	sy
 800cdca:	f3bf 8f4f 	dsb	sy
 800cdce:	617b      	str	r3, [r7, #20]
}
 800cdd0:	bf00      	nop
 800cdd2:	e7fe      	b.n	800cdd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d06e      	beq.n	800ceb8 <pvPortMalloc+0x150>
 800cdda:	4b45      	ldr	r3, [pc, #276]	; (800cef0 <pvPortMalloc+0x188>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d869      	bhi.n	800ceb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cde4:	4b43      	ldr	r3, [pc, #268]	; (800cef4 <pvPortMalloc+0x18c>)
 800cde6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cde8:	4b42      	ldr	r3, [pc, #264]	; (800cef4 <pvPortMalloc+0x18c>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdee:	e004      	b.n	800cdfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d903      	bls.n	800ce0c <pvPortMalloc+0xa4>
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d1f1      	bne.n	800cdf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce0c:	4b36      	ldr	r3, [pc, #216]	; (800cee8 <pvPortMalloc+0x180>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d050      	beq.n	800ceb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce16:	6a3b      	ldr	r3, [r7, #32]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2208      	movs	r2, #8
 800ce1c:	4413      	add	r3, r2
 800ce1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	6a3b      	ldr	r3, [r7, #32]
 800ce26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	1ad2      	subs	r2, r2, r3
 800ce30:	2308      	movs	r3, #8
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d91f      	bls.n	800ce78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	f003 0307 	and.w	r3, r3, #7
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00a      	beq.n	800ce60 <pvPortMalloc+0xf8>
	__asm volatile
 800ce4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4e:	f383 8811 	msr	BASEPRI, r3
 800ce52:	f3bf 8f6f 	isb	sy
 800ce56:	f3bf 8f4f 	dsb	sy
 800ce5a:	613b      	str	r3, [r7, #16]
}
 800ce5c:	bf00      	nop
 800ce5e:	e7fe      	b.n	800ce5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce62:	685a      	ldr	r2, [r3, #4]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	1ad2      	subs	r2, r2, r3
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce72:	69b8      	ldr	r0, [r7, #24]
 800ce74:	f000 f908 	bl	800d088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce78:	4b1d      	ldr	r3, [pc, #116]	; (800cef0 <pvPortMalloc+0x188>)
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	1ad3      	subs	r3, r2, r3
 800ce82:	4a1b      	ldr	r2, [pc, #108]	; (800cef0 <pvPortMalloc+0x188>)
 800ce84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce86:	4b1a      	ldr	r3, [pc, #104]	; (800cef0 <pvPortMalloc+0x188>)
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	4b1b      	ldr	r3, [pc, #108]	; (800cef8 <pvPortMalloc+0x190>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d203      	bcs.n	800ce9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce92:	4b17      	ldr	r3, [pc, #92]	; (800cef0 <pvPortMalloc+0x188>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a18      	ldr	r2, [pc, #96]	; (800cef8 <pvPortMalloc+0x190>)
 800ce98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9c:	685a      	ldr	r2, [r3, #4]
 800ce9e:	4b13      	ldr	r3, [pc, #76]	; (800ceec <pvPortMalloc+0x184>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	431a      	orrs	r2, r3
 800cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceaa:	2200      	movs	r2, #0
 800ceac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ceae:	4b13      	ldr	r3, [pc, #76]	; (800cefc <pvPortMalloc+0x194>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	4a11      	ldr	r2, [pc, #68]	; (800cefc <pvPortMalloc+0x194>)
 800ceb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ceb8:	f7fe ff28 	bl	800bd0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	f003 0307 	and.w	r3, r3, #7
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00a      	beq.n	800cedc <pvPortMalloc+0x174>
	__asm volatile
 800cec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceca:	f383 8811 	msr	BASEPRI, r3
 800cece:	f3bf 8f6f 	isb	sy
 800ced2:	f3bf 8f4f 	dsb	sy
 800ced6:	60fb      	str	r3, [r7, #12]
}
 800ced8:	bf00      	nop
 800ceda:	e7fe      	b.n	800ceda <pvPortMalloc+0x172>
	return pvReturn;
 800cedc:	69fb      	ldr	r3, [r7, #28]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3728      	adds	r7, #40	; 0x28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	240040c0 	.word	0x240040c0
 800ceec:	240040d4 	.word	0x240040d4
 800cef0:	240040c4 	.word	0x240040c4
 800cef4:	240040b8 	.word	0x240040b8
 800cef8:	240040c8 	.word	0x240040c8
 800cefc:	240040cc 	.word	0x240040cc

0800cf00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d04d      	beq.n	800cfae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf12:	2308      	movs	r3, #8
 800cf14:	425b      	negs	r3, r3
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	4413      	add	r3, r2
 800cf1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	685a      	ldr	r2, [r3, #4]
 800cf24:	4b24      	ldr	r3, [pc, #144]	; (800cfb8 <vPortFree+0xb8>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4013      	ands	r3, r2
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d10a      	bne.n	800cf44 <vPortFree+0x44>
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	60fb      	str	r3, [r7, #12]
}
 800cf40:	bf00      	nop
 800cf42:	e7fe      	b.n	800cf42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00a      	beq.n	800cf62 <vPortFree+0x62>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	60bb      	str	r3, [r7, #8]
}
 800cf5e:	bf00      	nop
 800cf60:	e7fe      	b.n	800cf60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	685a      	ldr	r2, [r3, #4]
 800cf66:	4b14      	ldr	r3, [pc, #80]	; (800cfb8 <vPortFree+0xb8>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4013      	ands	r3, r2
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d01e      	beq.n	800cfae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d11a      	bne.n	800cfae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	685a      	ldr	r2, [r3, #4]
 800cf7c:	4b0e      	ldr	r3, [pc, #56]	; (800cfb8 <vPortFree+0xb8>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	43db      	mvns	r3, r3
 800cf82:	401a      	ands	r2, r3
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf88:	f7fe feb2 	bl	800bcf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	685a      	ldr	r2, [r3, #4]
 800cf90:	4b0a      	ldr	r3, [pc, #40]	; (800cfbc <vPortFree+0xbc>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4413      	add	r3, r2
 800cf96:	4a09      	ldr	r2, [pc, #36]	; (800cfbc <vPortFree+0xbc>)
 800cf98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf9a:	6938      	ldr	r0, [r7, #16]
 800cf9c:	f000 f874 	bl	800d088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cfa0:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <vPortFree+0xc0>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	4a06      	ldr	r2, [pc, #24]	; (800cfc0 <vPortFree+0xc0>)
 800cfa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cfaa:	f7fe feaf 	bl	800bd0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cfae:	bf00      	nop
 800cfb0:	3718      	adds	r7, #24
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	240040d4 	.word	0x240040d4
 800cfbc:	240040c4 	.word	0x240040c4
 800cfc0:	240040d0 	.word	0x240040d0

0800cfc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b085      	sub	sp, #20
 800cfc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cfca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cfce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cfd0:	4b27      	ldr	r3, [pc, #156]	; (800d070 <prvHeapInit+0xac>)
 800cfd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f003 0307 	and.w	r3, r3, #7
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00c      	beq.n	800cff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	3307      	adds	r3, #7
 800cfe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f023 0307 	bic.w	r3, r3, #7
 800cfea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cfec:	68ba      	ldr	r2, [r7, #8]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	4a1f      	ldr	r2, [pc, #124]	; (800d070 <prvHeapInit+0xac>)
 800cff4:	4413      	add	r3, r2
 800cff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cffc:	4a1d      	ldr	r2, [pc, #116]	; (800d074 <prvHeapInit+0xb0>)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d002:	4b1c      	ldr	r3, [pc, #112]	; (800d074 <prvHeapInit+0xb0>)
 800d004:	2200      	movs	r2, #0
 800d006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	68ba      	ldr	r2, [r7, #8]
 800d00c:	4413      	add	r3, r2
 800d00e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d010:	2208      	movs	r2, #8
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	1a9b      	subs	r3, r3, r2
 800d016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f023 0307 	bic.w	r3, r3, #7
 800d01e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	4a15      	ldr	r2, [pc, #84]	; (800d078 <prvHeapInit+0xb4>)
 800d024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d026:	4b14      	ldr	r3, [pc, #80]	; (800d078 <prvHeapInit+0xb4>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	2200      	movs	r2, #0
 800d02c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d02e:	4b12      	ldr	r3, [pc, #72]	; (800d078 <prvHeapInit+0xb4>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2200      	movs	r2, #0
 800d034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	1ad2      	subs	r2, r2, r3
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d044:	4b0c      	ldr	r3, [pc, #48]	; (800d078 <prvHeapInit+0xb4>)
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	4a0a      	ldr	r2, [pc, #40]	; (800d07c <prvHeapInit+0xb8>)
 800d052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	4a09      	ldr	r2, [pc, #36]	; (800d080 <prvHeapInit+0xbc>)
 800d05a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d05c:	4b09      	ldr	r3, [pc, #36]	; (800d084 <prvHeapInit+0xc0>)
 800d05e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d062:	601a      	str	r2, [r3, #0]
}
 800d064:	bf00      	nop
 800d066:	3714      	adds	r7, #20
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr
 800d070:	240004b8 	.word	0x240004b8
 800d074:	240040b8 	.word	0x240040b8
 800d078:	240040c0 	.word	0x240040c0
 800d07c:	240040c8 	.word	0x240040c8
 800d080:	240040c4 	.word	0x240040c4
 800d084:	240040d4 	.word	0x240040d4

0800d088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d090:	4b28      	ldr	r3, [pc, #160]	; (800d134 <prvInsertBlockIntoFreeList+0xac>)
 800d092:	60fb      	str	r3, [r7, #12]
 800d094:	e002      	b.n	800d09c <prvInsertBlockIntoFreeList+0x14>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	60fb      	str	r3, [r7, #12]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d8f7      	bhi.n	800d096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	68ba      	ldr	r2, [r7, #8]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d108      	bne.n	800d0ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	685a      	ldr	r2, [r3, #4]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	441a      	add	r2, r3
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	441a      	add	r2, r3
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d118      	bne.n	800d110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	4b15      	ldr	r3, [pc, #84]	; (800d138 <prvInsertBlockIntoFreeList+0xb0>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d00d      	beq.n	800d106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	685a      	ldr	r2, [r3, #4]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	441a      	add	r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	e008      	b.n	800d118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d106:	4b0c      	ldr	r3, [pc, #48]	; (800d138 <prvInsertBlockIntoFreeList+0xb0>)
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	601a      	str	r2, [r3, #0]
 800d10e:	e003      	b.n	800d118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d002      	beq.n	800d126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d126:	bf00      	nop
 800d128:	3714      	adds	r7, #20
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	240040b8 	.word	0x240040b8
 800d138:	240040c0 	.word	0x240040c0

0800d13c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d146:	f007 fb79 	bl	801483c <sys_timeouts_sleeptime>
 800d14a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d152:	d10b      	bne.n	800d16c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d154:	4813      	ldr	r0, [pc, #76]	; (800d1a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800d156:	f00a f90e 	bl	8017376 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d15a:	2200      	movs	r2, #0
 800d15c:	6839      	ldr	r1, [r7, #0]
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f00a f880 	bl	8017264 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d164:	480f      	ldr	r0, [pc, #60]	; (800d1a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800d166:	f00a f8f7 	bl	8017358 <sys_mutex_lock>
    return;
 800d16a:	e018      	b.n	800d19e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d102      	bne.n	800d178 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d172:	f007 fb29 	bl	80147c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d176:	e7e6      	b.n	800d146 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d178:	480a      	ldr	r0, [pc, #40]	; (800d1a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800d17a:	f00a f8fc 	bl	8017376 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f00a f86e 	bl	8017264 <sys_arch_mbox_fetch>
 800d188:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d18a:	4806      	ldr	r0, [pc, #24]	; (800d1a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800d18c:	f00a f8e4 	bl	8017358 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d196:	d102      	bne.n	800d19e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d198:	f007 fb16 	bl	80147c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d19c:	e7d3      	b.n	800d146 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	24004790 	.word	0x24004790

0800d1a8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d1b0:	4810      	ldr	r0, [pc, #64]	; (800d1f4 <tcpip_thread+0x4c>)
 800d1b2:	f00a f8d1 	bl	8017358 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d1b6:	4b10      	ldr	r3, [pc, #64]	; (800d1f8 <tcpip_thread+0x50>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d005      	beq.n	800d1ca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d1be:	4b0e      	ldr	r3, [pc, #56]	; (800d1f8 <tcpip_thread+0x50>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a0e      	ldr	r2, [pc, #56]	; (800d1fc <tcpip_thread+0x54>)
 800d1c4:	6812      	ldr	r2, [r2, #0]
 800d1c6:	4610      	mov	r0, r2
 800d1c8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d1ca:	f107 030c 	add.w	r3, r7, #12
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	480b      	ldr	r0, [pc, #44]	; (800d200 <tcpip_thread+0x58>)
 800d1d2:	f7ff ffb3 	bl	800d13c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d106      	bne.n	800d1ea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d1dc:	4b09      	ldr	r3, [pc, #36]	; (800d204 <tcpip_thread+0x5c>)
 800d1de:	2291      	movs	r2, #145	; 0x91
 800d1e0:	4909      	ldr	r1, [pc, #36]	; (800d208 <tcpip_thread+0x60>)
 800d1e2:	480a      	ldr	r0, [pc, #40]	; (800d20c <tcpip_thread+0x64>)
 800d1e4:	f00a fab4 	bl	8017750 <iprintf>
      continue;
 800d1e8:	e003      	b.n	800d1f2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f000 f80f 	bl	800d210 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d1f2:	e7ea      	b.n	800d1ca <tcpip_thread+0x22>
 800d1f4:	24004790 	.word	0x24004790
 800d1f8:	240040d8 	.word	0x240040d8
 800d1fc:	240040dc 	.word	0x240040dc
 800d200:	240040e0 	.word	0x240040e0
 800d204:	08018748 	.word	0x08018748
 800d208:	08018778 	.word	0x08018778
 800d20c:	08018798 	.word	0x08018798

0800d210 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d026      	beq.n	800d26e <tcpip_thread_handle_msg+0x5e>
 800d220:	2b02      	cmp	r3, #2
 800d222:	dc2b      	bgt.n	800d27c <tcpip_thread_handle_msg+0x6c>
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <tcpip_thread_handle_msg+0x1e>
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d015      	beq.n	800d258 <tcpip_thread_handle_msg+0x48>
 800d22c:	e026      	b.n	800d27c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	6850      	ldr	r0, [r2, #4]
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	6892      	ldr	r2, [r2, #8]
 800d23a:	4611      	mov	r1, r2
 800d23c:	4798      	blx	r3
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d004      	beq.n	800d24e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	4618      	mov	r0, r3
 800d24a:	f001 fdc3 	bl	800edd4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d24e:	6879      	ldr	r1, [r7, #4]
 800d250:	2009      	movs	r0, #9
 800d252:	f000 ff1b 	bl	800e08c <memp_free>
      break;
 800d256:	e018      	b.n	800d28a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	6892      	ldr	r2, [r2, #8]
 800d260:	4610      	mov	r0, r2
 800d262:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d264:	6879      	ldr	r1, [r7, #4]
 800d266:	2008      	movs	r0, #8
 800d268:	f000 ff10 	bl	800e08c <memp_free>
      break;
 800d26c:	e00d      	b.n	800d28a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	6892      	ldr	r2, [r2, #8]
 800d276:	4610      	mov	r0, r2
 800d278:	4798      	blx	r3
      break;
 800d27a:	e006      	b.n	800d28a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d27c:	4b05      	ldr	r3, [pc, #20]	; (800d294 <tcpip_thread_handle_msg+0x84>)
 800d27e:	22cf      	movs	r2, #207	; 0xcf
 800d280:	4905      	ldr	r1, [pc, #20]	; (800d298 <tcpip_thread_handle_msg+0x88>)
 800d282:	4806      	ldr	r0, [pc, #24]	; (800d29c <tcpip_thread_handle_msg+0x8c>)
 800d284:	f00a fa64 	bl	8017750 <iprintf>
      break;
 800d288:	bf00      	nop
  }
}
 800d28a:	bf00      	nop
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	08018748 	.word	0x08018748
 800d298:	08018778 	.word	0x08018778
 800d29c:	08018798 	.word	0x08018798

0800d2a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d2ac:	481a      	ldr	r0, [pc, #104]	; (800d318 <tcpip_inpkt+0x78>)
 800d2ae:	f00a f818 	bl	80172e2 <sys_mbox_valid>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d105      	bne.n	800d2c4 <tcpip_inpkt+0x24>
 800d2b8:	4b18      	ldr	r3, [pc, #96]	; (800d31c <tcpip_inpkt+0x7c>)
 800d2ba:	22fc      	movs	r2, #252	; 0xfc
 800d2bc:	4918      	ldr	r1, [pc, #96]	; (800d320 <tcpip_inpkt+0x80>)
 800d2be:	4819      	ldr	r0, [pc, #100]	; (800d324 <tcpip_inpkt+0x84>)
 800d2c0:	f00a fa46 	bl	8017750 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d2c4:	2009      	movs	r0, #9
 800d2c6:	f000 fe6b 	bl	800dfa0 <memp_malloc>
 800d2ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d102      	bne.n	800d2d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d2d6:	e01a      	b.n	800d30e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d2f0:	6979      	ldr	r1, [r7, #20]
 800d2f2:	4809      	ldr	r0, [pc, #36]	; (800d318 <tcpip_inpkt+0x78>)
 800d2f4:	f009 ff9c 	bl	8017230 <sys_mbox_trypost>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d006      	beq.n	800d30c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d2fe:	6979      	ldr	r1, [r7, #20]
 800d300:	2009      	movs	r0, #9
 800d302:	f000 fec3 	bl	800e08c <memp_free>
    return ERR_MEM;
 800d306:	f04f 33ff 	mov.w	r3, #4294967295
 800d30a:	e000      	b.n	800d30e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d30c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3718      	adds	r7, #24
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	240040e0 	.word	0x240040e0
 800d31c:	08018748 	.word	0x08018748
 800d320:	080187c0 	.word	0x080187c0
 800d324:	08018798 	.word	0x08018798

0800d328 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d338:	f003 0318 	and.w	r3, r3, #24
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d006      	beq.n	800d34e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d340:	4a08      	ldr	r2, [pc, #32]	; (800d364 <tcpip_input+0x3c>)
 800d342:	6839      	ldr	r1, [r7, #0]
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff ffab 	bl	800d2a0 <tcpip_inpkt>
 800d34a:	4603      	mov	r3, r0
 800d34c:	e005      	b.n	800d35a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d34e:	4a06      	ldr	r2, [pc, #24]	; (800d368 <tcpip_input+0x40>)
 800d350:	6839      	ldr	r1, [r7, #0]
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f7ff ffa4 	bl	800d2a0 <tcpip_inpkt>
 800d358:	4603      	mov	r3, r0
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	08017041 	.word	0x08017041
 800d368:	08015f55 	.word	0x08015f55

0800d36c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d376:	4819      	ldr	r0, [pc, #100]	; (800d3dc <tcpip_try_callback+0x70>)
 800d378:	f009 ffb3 	bl	80172e2 <sys_mbox_valid>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d106      	bne.n	800d390 <tcpip_try_callback+0x24>
 800d382:	4b17      	ldr	r3, [pc, #92]	; (800d3e0 <tcpip_try_callback+0x74>)
 800d384:	f240 125d 	movw	r2, #349	; 0x15d
 800d388:	4916      	ldr	r1, [pc, #88]	; (800d3e4 <tcpip_try_callback+0x78>)
 800d38a:	4817      	ldr	r0, [pc, #92]	; (800d3e8 <tcpip_try_callback+0x7c>)
 800d38c:	f00a f9e0 	bl	8017750 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d390:	2008      	movs	r0, #8
 800d392:	f000 fe05 	bl	800dfa0 <memp_malloc>
 800d396:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d102      	bne.n	800d3a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d39e:	f04f 33ff 	mov.w	r3, #4294967295
 800d3a2:	e017      	b.n	800d3d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d3b6:	68f9      	ldr	r1, [r7, #12]
 800d3b8:	4808      	ldr	r0, [pc, #32]	; (800d3dc <tcpip_try_callback+0x70>)
 800d3ba:	f009 ff39 	bl	8017230 <sys_mbox_trypost>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d006      	beq.n	800d3d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d3c4:	68f9      	ldr	r1, [r7, #12]
 800d3c6:	2008      	movs	r0, #8
 800d3c8:	f000 fe60 	bl	800e08c <memp_free>
    return ERR_MEM;
 800d3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d3d0:	e000      	b.n	800d3d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3710      	adds	r7, #16
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	240040e0 	.word	0x240040e0
 800d3e0:	08018748 	.word	0x08018748
 800d3e4:	080187c0 	.word	0x080187c0
 800d3e8:	08018798 	.word	0x08018798

0800d3ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af02      	add	r7, sp, #8
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d3f6:	f000 f92d 	bl	800d654 <lwip_init>

  tcpip_init_done = initfunc;
 800d3fa:	4a17      	ldr	r2, [pc, #92]	; (800d458 <tcpip_init+0x6c>)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d400:	4a16      	ldr	r2, [pc, #88]	; (800d45c <tcpip_init+0x70>)
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d406:	2106      	movs	r1, #6
 800d408:	4815      	ldr	r0, [pc, #84]	; (800d460 <tcpip_init+0x74>)
 800d40a:	f009 feef 	bl	80171ec <sys_mbox_new>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d006      	beq.n	800d422 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d414:	4b13      	ldr	r3, [pc, #76]	; (800d464 <tcpip_init+0x78>)
 800d416:	f240 2261 	movw	r2, #609	; 0x261
 800d41a:	4913      	ldr	r1, [pc, #76]	; (800d468 <tcpip_init+0x7c>)
 800d41c:	4813      	ldr	r0, [pc, #76]	; (800d46c <tcpip_init+0x80>)
 800d41e:	f00a f997 	bl	8017750 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d422:	4813      	ldr	r0, [pc, #76]	; (800d470 <tcpip_init+0x84>)
 800d424:	f009 ff7c 	bl	8017320 <sys_mutex_new>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d006      	beq.n	800d43c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d42e:	4b0d      	ldr	r3, [pc, #52]	; (800d464 <tcpip_init+0x78>)
 800d430:	f240 2265 	movw	r2, #613	; 0x265
 800d434:	490f      	ldr	r1, [pc, #60]	; (800d474 <tcpip_init+0x88>)
 800d436:	480d      	ldr	r0, [pc, #52]	; (800d46c <tcpip_init+0x80>)
 800d438:	f00a f98a 	bl	8017750 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d43c:	2300      	movs	r3, #0
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d444:	2200      	movs	r2, #0
 800d446:	490c      	ldr	r1, [pc, #48]	; (800d478 <tcpip_init+0x8c>)
 800d448:	480c      	ldr	r0, [pc, #48]	; (800d47c <tcpip_init+0x90>)
 800d44a:	f009 ffa1 	bl	8017390 <sys_thread_new>
}
 800d44e:	bf00      	nop
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	240040d8 	.word	0x240040d8
 800d45c:	240040dc 	.word	0x240040dc
 800d460:	240040e0 	.word	0x240040e0
 800d464:	08018748 	.word	0x08018748
 800d468:	080187d0 	.word	0x080187d0
 800d46c:	08018798 	.word	0x08018798
 800d470:	24004790 	.word	0x24004790
 800d474:	080187f4 	.word	0x080187f4
 800d478:	0800d1a9 	.word	0x0800d1a9
 800d47c:	08018818 	.word	0x08018818

0800d480 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	4603      	mov	r3, r0
 800d488:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d48a:	88fb      	ldrh	r3, [r7, #6]
 800d48c:	021b      	lsls	r3, r3, #8
 800d48e:	b21a      	sxth	r2, r3
 800d490:	88fb      	ldrh	r3, [r7, #6]
 800d492:	0a1b      	lsrs	r3, r3, #8
 800d494:	b29b      	uxth	r3, r3
 800d496:	b21b      	sxth	r3, r3
 800d498:	4313      	orrs	r3, r2
 800d49a:	b21b      	sxth	r3, r3
 800d49c:	b29b      	uxth	r3, r3
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr

0800d4aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d4aa:	b480      	push	{r7}
 800d4ac:	b083      	sub	sp, #12
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	061a      	lsls	r2, r3, #24
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	021b      	lsls	r3, r3, #8
 800d4ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d4be:	431a      	orrs	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	0a1b      	lsrs	r3, r3, #8
 800d4c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d4c8:	431a      	orrs	r2, r3
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	0e1b      	lsrs	r3, r3, #24
 800d4ce:	4313      	orrs	r3, r2
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b089      	sub	sp, #36	; 0x24
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	f003 0301 	and.w	r3, r3, #1
 800d4f8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00d      	beq.n	800d51c <lwip_standard_chksum+0x40>
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	dd0a      	ble.n	800d51c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d506:	69fa      	ldr	r2, [r7, #28]
 800d508:	1c53      	adds	r3, r2, #1
 800d50a:	61fb      	str	r3, [r7, #28]
 800d50c:	f107 030e 	add.w	r3, r7, #14
 800d510:	3301      	adds	r3, #1
 800d512:	7812      	ldrb	r2, [r2, #0]
 800d514:	701a      	strb	r2, [r3, #0]
    len--;
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	3b01      	subs	r3, #1
 800d51a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d520:	e00a      	b.n	800d538 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	1c9a      	adds	r2, r3, #2
 800d526:	61ba      	str	r2, [r7, #24]
 800d528:	881b      	ldrh	r3, [r3, #0]
 800d52a:	461a      	mov	r2, r3
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	4413      	add	r3, r2
 800d530:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	3b02      	subs	r3, #2
 800d536:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	dcf1      	bgt.n	800d522 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	dd04      	ble.n	800d54e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d544:	f107 030e 	add.w	r3, r7, #14
 800d548:	69ba      	ldr	r2, [r7, #24]
 800d54a:	7812      	ldrb	r2, [r2, #0]
 800d54c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d54e:	89fb      	ldrh	r3, [r7, #14]
 800d550:	461a      	mov	r2, r3
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	4413      	add	r3, r2
 800d556:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	0c1a      	lsrs	r2, r3, #16
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	b29b      	uxth	r3, r3
 800d560:	4413      	add	r3, r2
 800d562:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	0c1a      	lsrs	r2, r3, #16
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	4413      	add	r3, r2
 800d56e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d007      	beq.n	800d586 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	021b      	lsls	r3, r3, #8
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	0a1b      	lsrs	r3, r3, #8
 800d580:	b2db      	uxtb	r3, r3
 800d582:	4313      	orrs	r3, r2
 800d584:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	b29b      	uxth	r3, r3
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3724      	adds	r7, #36	; 0x24
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	460b      	mov	r3, r1
 800d5a0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d5a2:	887b      	ldrh	r3, [r7, #2]
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f7ff ff98 	bl	800d4dc <lwip_standard_chksum>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	43db      	mvns	r3, r3
 800d5b0:	b29b      	uxth	r3, r3
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3708      	adds	r7, #8
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b086      	sub	sp, #24
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	613b      	str	r3, [r7, #16]
 800d5ce:	e02b      	b.n	800d628 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	685a      	ldr	r2, [r3, #4]
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	895b      	ldrh	r3, [r3, #10]
 800d5d8:	4619      	mov	r1, r3
 800d5da:	4610      	mov	r0, r2
 800d5dc:	f7ff ff7e 	bl	800d4dc <lwip_standard_chksum>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	0c1a      	lsrs	r2, r3, #16
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	4413      	add	r3, r2
 800d5f4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	895b      	ldrh	r3, [r3, #10]
 800d5fa:	f003 0301 	and.w	r3, r3, #1
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00e      	beq.n	800d622 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2b00      	cmp	r3, #0
 800d608:	bf0c      	ite	eq
 800d60a:	2301      	moveq	r3, #1
 800d60c:	2300      	movne	r3, #0
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	021b      	lsls	r3, r3, #8
 800d616:	b29a      	uxth	r2, r3
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	0a1b      	lsrs	r3, r3, #8
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	4313      	orrs	r3, r2
 800d620:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	613b      	str	r3, [r7, #16]
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d1d0      	bne.n	800d5d0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d007      	beq.n	800d644 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	021b      	lsls	r3, r3, #8
 800d638:	b29a      	uxth	r2, r3
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	0a1b      	lsrs	r3, r3, #8
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	4313      	orrs	r3, r2
 800d642:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	b29b      	uxth	r3, r3
 800d648:	43db      	mvns	r3, r3
 800d64a:	b29b      	uxth	r3, r3
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3718      	adds	r7, #24
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d65a:	2300      	movs	r3, #0
 800d65c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d65e:	f009 fe51 	bl	8017304 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d662:	f000 f8d5 	bl	800d810 <mem_init>
  memp_init();
 800d666:	f000 fc2d 	bl	800dec4 <memp_init>
  pbuf_init();
  netif_init();
 800d66a:	f000 fd39 	bl	800e0e0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d66e:	f007 f91d 	bl	80148ac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d672:	f001 fe49 	bl	800f308 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d676:	f007 f85f 	bl	8014738 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d67a:	bf00      	nop
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
	...

0800d684 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	4603      	mov	r3, r0
 800d68c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d68e:	4b05      	ldr	r3, [pc, #20]	; (800d6a4 <ptr_to_mem+0x20>)
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	88fb      	ldrh	r3, [r7, #6]
 800d694:	4413      	add	r3, r2
}
 800d696:	4618      	mov	r0, r3
 800d698:	370c      	adds	r7, #12
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop
 800d6a4:	240040e4 	.word	0x240040e4

0800d6a8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d6b0:	4b05      	ldr	r3, [pc, #20]	; (800d6c8 <mem_to_ptr+0x20>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	1ad3      	subs	r3, r2, r3
 800d6b8:	b29b      	uxth	r3, r3
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	370c      	adds	r7, #12
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop
 800d6c8:	240040e4 	.word	0x240040e4

0800d6cc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d6cc:	b590      	push	{r4, r7, lr}
 800d6ce:	b085      	sub	sp, #20
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d6d4:	4b45      	ldr	r3, [pc, #276]	; (800d7ec <plug_holes+0x120>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d206      	bcs.n	800d6ec <plug_holes+0x20>
 800d6de:	4b44      	ldr	r3, [pc, #272]	; (800d7f0 <plug_holes+0x124>)
 800d6e0:	f240 12df 	movw	r2, #479	; 0x1df
 800d6e4:	4943      	ldr	r1, [pc, #268]	; (800d7f4 <plug_holes+0x128>)
 800d6e6:	4844      	ldr	r0, [pc, #272]	; (800d7f8 <plug_holes+0x12c>)
 800d6e8:	f00a f832 	bl	8017750 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d6ec:	4b43      	ldr	r3, [pc, #268]	; (800d7fc <plug_holes+0x130>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d306      	bcc.n	800d704 <plug_holes+0x38>
 800d6f6:	4b3e      	ldr	r3, [pc, #248]	; (800d7f0 <plug_holes+0x124>)
 800d6f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d6fc:	4940      	ldr	r1, [pc, #256]	; (800d800 <plug_holes+0x134>)
 800d6fe:	483e      	ldr	r0, [pc, #248]	; (800d7f8 <plug_holes+0x12c>)
 800d700:	f00a f826 	bl	8017750 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	791b      	ldrb	r3, [r3, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d006      	beq.n	800d71a <plug_holes+0x4e>
 800d70c:	4b38      	ldr	r3, [pc, #224]	; (800d7f0 <plug_holes+0x124>)
 800d70e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d712:	493c      	ldr	r1, [pc, #240]	; (800d804 <plug_holes+0x138>)
 800d714:	4838      	ldr	r0, [pc, #224]	; (800d7f8 <plug_holes+0x12c>)
 800d716:	f00a f81b 	bl	8017750 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	881b      	ldrh	r3, [r3, #0]
 800d71e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d722:	d906      	bls.n	800d732 <plug_holes+0x66>
 800d724:	4b32      	ldr	r3, [pc, #200]	; (800d7f0 <plug_holes+0x124>)
 800d726:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d72a:	4937      	ldr	r1, [pc, #220]	; (800d808 <plug_holes+0x13c>)
 800d72c:	4832      	ldr	r0, [pc, #200]	; (800d7f8 <plug_holes+0x12c>)
 800d72e:	f00a f80f 	bl	8017750 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	4618      	mov	r0, r3
 800d738:	f7ff ffa4 	bl	800d684 <ptr_to_mem>
 800d73c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	429a      	cmp	r2, r3
 800d744:	d024      	beq.n	800d790 <plug_holes+0xc4>
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	791b      	ldrb	r3, [r3, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d120      	bne.n	800d790 <plug_holes+0xc4>
 800d74e:	4b2b      	ldr	r3, [pc, #172]	; (800d7fc <plug_holes+0x130>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	68fa      	ldr	r2, [r7, #12]
 800d754:	429a      	cmp	r2, r3
 800d756:	d01b      	beq.n	800d790 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d758:	4b2c      	ldr	r3, [pc, #176]	; (800d80c <plug_holes+0x140>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d102      	bne.n	800d768 <plug_holes+0x9c>
      lfree = mem;
 800d762:	4a2a      	ldr	r2, [pc, #168]	; (800d80c <plug_holes+0x140>)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	881a      	ldrh	r2, [r3, #0]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	881b      	ldrh	r3, [r3, #0]
 800d774:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d778:	d00a      	beq.n	800d790 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	881b      	ldrh	r3, [r3, #0]
 800d77e:	4618      	mov	r0, r3
 800d780:	f7ff ff80 	bl	800d684 <ptr_to_mem>
 800d784:	4604      	mov	r4, r0
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7ff ff8e 	bl	800d6a8 <mem_to_ptr>
 800d78c:	4603      	mov	r3, r0
 800d78e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	885b      	ldrh	r3, [r3, #2]
 800d794:	4618      	mov	r0, r3
 800d796:	f7ff ff75 	bl	800d684 <ptr_to_mem>
 800d79a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d79c:	68ba      	ldr	r2, [r7, #8]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d01f      	beq.n	800d7e4 <plug_holes+0x118>
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	791b      	ldrb	r3, [r3, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d11b      	bne.n	800d7e4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d7ac:	4b17      	ldr	r3, [pc, #92]	; (800d80c <plug_holes+0x140>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d102      	bne.n	800d7bc <plug_holes+0xf0>
      lfree = pmem;
 800d7b6:	4a15      	ldr	r2, [pc, #84]	; (800d80c <plug_holes+0x140>)
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	881a      	ldrh	r2, [r3, #0]
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	881b      	ldrh	r3, [r3, #0]
 800d7c8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d7cc:	d00a      	beq.n	800d7e4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	881b      	ldrh	r3, [r3, #0]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7ff ff56 	bl	800d684 <ptr_to_mem>
 800d7d8:	4604      	mov	r4, r0
 800d7da:	68b8      	ldr	r0, [r7, #8]
 800d7dc:	f7ff ff64 	bl	800d6a8 <mem_to_ptr>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d7e4:	bf00      	nop
 800d7e6:	3714      	adds	r7, #20
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd90      	pop	{r4, r7, pc}
 800d7ec:	240040e4 	.word	0x240040e4
 800d7f0:	08018828 	.word	0x08018828
 800d7f4:	08018858 	.word	0x08018858
 800d7f8:	08018870 	.word	0x08018870
 800d7fc:	240040e8 	.word	0x240040e8
 800d800:	08018898 	.word	0x08018898
 800d804:	080188b4 	.word	0x080188b4
 800d808:	080188d0 	.word	0x080188d0
 800d80c:	240040f0 	.word	0x240040f0

0800d810 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d816:	4b1d      	ldr	r3, [pc, #116]	; (800d88c <mem_init+0x7c>)
 800d818:	4a1d      	ldr	r2, [pc, #116]	; (800d890 <mem_init+0x80>)
 800d81a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d81c:	4b1b      	ldr	r3, [pc, #108]	; (800d88c <mem_init+0x7c>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d828:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d836:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800d83a:	f7ff ff23 	bl	800d684 <ptr_to_mem>
 800d83e:	4603      	mov	r3, r0
 800d840:	4a14      	ldr	r2, [pc, #80]	; (800d894 <mem_init+0x84>)
 800d842:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d844:	4b13      	ldr	r3, [pc, #76]	; (800d894 <mem_init+0x84>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2201      	movs	r2, #1
 800d84a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d84c:	4b11      	ldr	r3, [pc, #68]	; (800d894 <mem_init+0x84>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d854:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d856:	4b0f      	ldr	r3, [pc, #60]	; (800d894 <mem_init+0x84>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d85e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d860:	4b0a      	ldr	r3, [pc, #40]	; (800d88c <mem_init+0x7c>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a0c      	ldr	r2, [pc, #48]	; (800d898 <mem_init+0x88>)
 800d866:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d868:	480c      	ldr	r0, [pc, #48]	; (800d89c <mem_init+0x8c>)
 800d86a:	f009 fd59 	bl	8017320 <sys_mutex_new>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	d006      	beq.n	800d882 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d874:	4b0a      	ldr	r3, [pc, #40]	; (800d8a0 <mem_init+0x90>)
 800d876:	f240 221f 	movw	r2, #543	; 0x21f
 800d87a:	490a      	ldr	r1, [pc, #40]	; (800d8a4 <mem_init+0x94>)
 800d87c:	480a      	ldr	r0, [pc, #40]	; (800d8a8 <mem_init+0x98>)
 800d87e:	f009 ff67 	bl	8017750 <iprintf>
  }
}
 800d882:	bf00      	nop
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	240040e4 	.word	0x240040e4
 800d890:	30002000 	.word	0x30002000
 800d894:	240040e8 	.word	0x240040e8
 800d898:	240040f0 	.word	0x240040f0
 800d89c:	240040ec 	.word	0x240040ec
 800d8a0:	08018828 	.word	0x08018828
 800d8a4:	080188fc 	.word	0x080188fc
 800d8a8:	08018870 	.word	0x08018870

0800d8ac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b086      	sub	sp, #24
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7ff fef7 	bl	800d6a8 <mem_to_ptr>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	881b      	ldrh	r3, [r3, #0]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7ff fede 	bl	800d684 <ptr_to_mem>
 800d8c8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	885b      	ldrh	r3, [r3, #2]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7ff fed8 	bl	800d684 <ptr_to_mem>
 800d8d4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	881b      	ldrh	r3, [r3, #0]
 800d8da:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d8de:	d818      	bhi.n	800d912 <mem_link_valid+0x66>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	885b      	ldrh	r3, [r3, #2]
 800d8e4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d8e8:	d813      	bhi.n	800d912 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d8ee:	8afa      	ldrh	r2, [r7, #22]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d004      	beq.n	800d8fe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	8afa      	ldrh	r2, [r7, #22]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d109      	bne.n	800d912 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d8fe:	4b08      	ldr	r3, [pc, #32]	; (800d920 <mem_link_valid+0x74>)
 800d900:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d902:	693a      	ldr	r2, [r7, #16]
 800d904:	429a      	cmp	r2, r3
 800d906:	d006      	beq.n	800d916 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	885b      	ldrh	r3, [r3, #2]
 800d90c:	8afa      	ldrh	r2, [r7, #22]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d001      	beq.n	800d916 <mem_link_valid+0x6a>
    return 0;
 800d912:	2300      	movs	r3, #0
 800d914:	e000      	b.n	800d918 <mem_link_valid+0x6c>
  }
  return 1;
 800d916:	2301      	movs	r3, #1
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3718      	adds	r7, #24
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	240040e8 	.word	0x240040e8

0800d924 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b088      	sub	sp, #32
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d070      	beq.n	800da14 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f003 0303 	and.w	r3, r3, #3
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00d      	beq.n	800d958 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d93c:	4b37      	ldr	r3, [pc, #220]	; (800da1c <mem_free+0xf8>)
 800d93e:	f240 2273 	movw	r2, #627	; 0x273
 800d942:	4937      	ldr	r1, [pc, #220]	; (800da20 <mem_free+0xfc>)
 800d944:	4837      	ldr	r0, [pc, #220]	; (800da24 <mem_free+0x100>)
 800d946:	f009 ff03 	bl	8017750 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d94a:	f009 fd47 	bl	80173dc <sys_arch_protect>
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f009 fd51 	bl	80173f8 <sys_arch_unprotect>
    return;
 800d956:	e05e      	b.n	800da16 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	3b08      	subs	r3, #8
 800d95c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d95e:	4b32      	ldr	r3, [pc, #200]	; (800da28 <mem_free+0x104>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	69fa      	ldr	r2, [r7, #28]
 800d964:	429a      	cmp	r2, r3
 800d966:	d306      	bcc.n	800d976 <mem_free+0x52>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f103 020c 	add.w	r2, r3, #12
 800d96e:	4b2f      	ldr	r3, [pc, #188]	; (800da2c <mem_free+0x108>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	429a      	cmp	r2, r3
 800d974:	d90d      	bls.n	800d992 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d976:	4b29      	ldr	r3, [pc, #164]	; (800da1c <mem_free+0xf8>)
 800d978:	f240 227f 	movw	r2, #639	; 0x27f
 800d97c:	492c      	ldr	r1, [pc, #176]	; (800da30 <mem_free+0x10c>)
 800d97e:	4829      	ldr	r0, [pc, #164]	; (800da24 <mem_free+0x100>)
 800d980:	f009 fee6 	bl	8017750 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d984:	f009 fd2a 	bl	80173dc <sys_arch_protect>
 800d988:	6138      	str	r0, [r7, #16]
 800d98a:	6938      	ldr	r0, [r7, #16]
 800d98c:	f009 fd34 	bl	80173f8 <sys_arch_unprotect>
    return;
 800d990:	e041      	b.n	800da16 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d992:	4828      	ldr	r0, [pc, #160]	; (800da34 <mem_free+0x110>)
 800d994:	f009 fce0 	bl	8017358 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	791b      	ldrb	r3, [r3, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d110      	bne.n	800d9c2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d9a0:	4b1e      	ldr	r3, [pc, #120]	; (800da1c <mem_free+0xf8>)
 800d9a2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d9a6:	4924      	ldr	r1, [pc, #144]	; (800da38 <mem_free+0x114>)
 800d9a8:	481e      	ldr	r0, [pc, #120]	; (800da24 <mem_free+0x100>)
 800d9aa:	f009 fed1 	bl	8017750 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d9ae:	4821      	ldr	r0, [pc, #132]	; (800da34 <mem_free+0x110>)
 800d9b0:	f009 fce1 	bl	8017376 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d9b4:	f009 fd12 	bl	80173dc <sys_arch_protect>
 800d9b8:	6178      	str	r0, [r7, #20]
 800d9ba:	6978      	ldr	r0, [r7, #20]
 800d9bc:	f009 fd1c 	bl	80173f8 <sys_arch_unprotect>
    return;
 800d9c0:	e029      	b.n	800da16 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d9c2:	69f8      	ldr	r0, [r7, #28]
 800d9c4:	f7ff ff72 	bl	800d8ac <mem_link_valid>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d110      	bne.n	800d9f0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d9ce:	4b13      	ldr	r3, [pc, #76]	; (800da1c <mem_free+0xf8>)
 800d9d0:	f240 2295 	movw	r2, #661	; 0x295
 800d9d4:	4919      	ldr	r1, [pc, #100]	; (800da3c <mem_free+0x118>)
 800d9d6:	4813      	ldr	r0, [pc, #76]	; (800da24 <mem_free+0x100>)
 800d9d8:	f009 feba 	bl	8017750 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d9dc:	4815      	ldr	r0, [pc, #84]	; (800da34 <mem_free+0x110>)
 800d9de:	f009 fcca 	bl	8017376 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d9e2:	f009 fcfb 	bl	80173dc <sys_arch_protect>
 800d9e6:	61b8      	str	r0, [r7, #24]
 800d9e8:	69b8      	ldr	r0, [r7, #24]
 800d9ea:	f009 fd05 	bl	80173f8 <sys_arch_unprotect>
    return;
 800d9ee:	e012      	b.n	800da16 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d9f6:	4b12      	ldr	r3, [pc, #72]	; (800da40 <mem_free+0x11c>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	69fa      	ldr	r2, [r7, #28]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d202      	bcs.n	800da06 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800da00:	4a0f      	ldr	r2, [pc, #60]	; (800da40 <mem_free+0x11c>)
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800da06:	69f8      	ldr	r0, [r7, #28]
 800da08:	f7ff fe60 	bl	800d6cc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800da0c:	4809      	ldr	r0, [pc, #36]	; (800da34 <mem_free+0x110>)
 800da0e:	f009 fcb2 	bl	8017376 <sys_mutex_unlock>
 800da12:	e000      	b.n	800da16 <mem_free+0xf2>
    return;
 800da14:	bf00      	nop
}
 800da16:	3720      	adds	r7, #32
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	08018828 	.word	0x08018828
 800da20:	08018918 	.word	0x08018918
 800da24:	08018870 	.word	0x08018870
 800da28:	240040e4 	.word	0x240040e4
 800da2c:	240040e8 	.word	0x240040e8
 800da30:	0801893c 	.word	0x0801893c
 800da34:	240040ec 	.word	0x240040ec
 800da38:	08018958 	.word	0x08018958
 800da3c:	08018980 	.word	0x08018980
 800da40:	240040f0 	.word	0x240040f0

0800da44 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b088      	sub	sp, #32
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	460b      	mov	r3, r1
 800da4e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800da50:	887b      	ldrh	r3, [r7, #2]
 800da52:	3303      	adds	r3, #3
 800da54:	b29b      	uxth	r3, r3
 800da56:	f023 0303 	bic.w	r3, r3, #3
 800da5a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800da5c:	8bfb      	ldrh	r3, [r7, #30]
 800da5e:	2b0b      	cmp	r3, #11
 800da60:	d801      	bhi.n	800da66 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800da62:	230c      	movs	r3, #12
 800da64:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800da66:	8bfb      	ldrh	r3, [r7, #30]
 800da68:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800da6c:	d803      	bhi.n	800da76 <mem_trim+0x32>
 800da6e:	8bfa      	ldrh	r2, [r7, #30]
 800da70:	887b      	ldrh	r3, [r7, #2]
 800da72:	429a      	cmp	r2, r3
 800da74:	d201      	bcs.n	800da7a <mem_trim+0x36>
    return NULL;
 800da76:	2300      	movs	r3, #0
 800da78:	e0d8      	b.n	800dc2c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800da7a:	4b6e      	ldr	r3, [pc, #440]	; (800dc34 <mem_trim+0x1f0>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	429a      	cmp	r2, r3
 800da82:	d304      	bcc.n	800da8e <mem_trim+0x4a>
 800da84:	4b6c      	ldr	r3, [pc, #432]	; (800dc38 <mem_trim+0x1f4>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d306      	bcc.n	800da9c <mem_trim+0x58>
 800da8e:	4b6b      	ldr	r3, [pc, #428]	; (800dc3c <mem_trim+0x1f8>)
 800da90:	f240 22d1 	movw	r2, #721	; 0x2d1
 800da94:	496a      	ldr	r1, [pc, #424]	; (800dc40 <mem_trim+0x1fc>)
 800da96:	486b      	ldr	r0, [pc, #428]	; (800dc44 <mem_trim+0x200>)
 800da98:	f009 fe5a 	bl	8017750 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800da9c:	4b65      	ldr	r3, [pc, #404]	; (800dc34 <mem_trim+0x1f0>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d304      	bcc.n	800dab0 <mem_trim+0x6c>
 800daa6:	4b64      	ldr	r3, [pc, #400]	; (800dc38 <mem_trim+0x1f4>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	429a      	cmp	r2, r3
 800daae:	d307      	bcc.n	800dac0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dab0:	f009 fc94 	bl	80173dc <sys_arch_protect>
 800dab4:	60b8      	str	r0, [r7, #8]
 800dab6:	68b8      	ldr	r0, [r7, #8]
 800dab8:	f009 fc9e 	bl	80173f8 <sys_arch_unprotect>
    return rmem;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	e0b5      	b.n	800dc2c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	3b08      	subs	r3, #8
 800dac4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800dac6:	69b8      	ldr	r0, [r7, #24]
 800dac8:	f7ff fdee 	bl	800d6a8 <mem_to_ptr>
 800dacc:	4603      	mov	r3, r0
 800dace:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	881a      	ldrh	r2, [r3, #0]
 800dad4:	8afb      	ldrh	r3, [r7, #22]
 800dad6:	1ad3      	subs	r3, r2, r3
 800dad8:	b29b      	uxth	r3, r3
 800dada:	3b08      	subs	r3, #8
 800dadc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800dade:	8bfa      	ldrh	r2, [r7, #30]
 800dae0:	8abb      	ldrh	r3, [r7, #20]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d906      	bls.n	800daf4 <mem_trim+0xb0>
 800dae6:	4b55      	ldr	r3, [pc, #340]	; (800dc3c <mem_trim+0x1f8>)
 800dae8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800daec:	4956      	ldr	r1, [pc, #344]	; (800dc48 <mem_trim+0x204>)
 800daee:	4855      	ldr	r0, [pc, #340]	; (800dc44 <mem_trim+0x200>)
 800daf0:	f009 fe2e 	bl	8017750 <iprintf>
  if (newsize > size) {
 800daf4:	8bfa      	ldrh	r2, [r7, #30]
 800daf6:	8abb      	ldrh	r3, [r7, #20]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d901      	bls.n	800db00 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800dafc:	2300      	movs	r3, #0
 800dafe:	e095      	b.n	800dc2c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800db00:	8bfa      	ldrh	r2, [r7, #30]
 800db02:	8abb      	ldrh	r3, [r7, #20]
 800db04:	429a      	cmp	r2, r3
 800db06:	d101      	bne.n	800db0c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	e08f      	b.n	800dc2c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800db0c:	484f      	ldr	r0, [pc, #316]	; (800dc4c <mem_trim+0x208>)
 800db0e:	f009 fc23 	bl	8017358 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	881b      	ldrh	r3, [r3, #0]
 800db16:	4618      	mov	r0, r3
 800db18:	f7ff fdb4 	bl	800d684 <ptr_to_mem>
 800db1c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	791b      	ldrb	r3, [r3, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d13f      	bne.n	800dba6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	881b      	ldrh	r3, [r3, #0]
 800db2a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800db2e:	d106      	bne.n	800db3e <mem_trim+0xfa>
 800db30:	4b42      	ldr	r3, [pc, #264]	; (800dc3c <mem_trim+0x1f8>)
 800db32:	f240 22f5 	movw	r2, #757	; 0x2f5
 800db36:	4946      	ldr	r1, [pc, #280]	; (800dc50 <mem_trim+0x20c>)
 800db38:	4842      	ldr	r0, [pc, #264]	; (800dc44 <mem_trim+0x200>)
 800db3a:	f009 fe09 	bl	8017750 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	881b      	ldrh	r3, [r3, #0]
 800db42:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800db44:	8afa      	ldrh	r2, [r7, #22]
 800db46:	8bfb      	ldrh	r3, [r7, #30]
 800db48:	4413      	add	r3, r2
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	3308      	adds	r3, #8
 800db4e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800db50:	4b40      	ldr	r3, [pc, #256]	; (800dc54 <mem_trim+0x210>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	693a      	ldr	r2, [r7, #16]
 800db56:	429a      	cmp	r2, r3
 800db58:	d106      	bne.n	800db68 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800db5a:	89fb      	ldrh	r3, [r7, #14]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7ff fd91 	bl	800d684 <ptr_to_mem>
 800db62:	4603      	mov	r3, r0
 800db64:	4a3b      	ldr	r2, [pc, #236]	; (800dc54 <mem_trim+0x210>)
 800db66:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800db68:	89fb      	ldrh	r3, [r7, #14]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7ff fd8a 	bl	800d684 <ptr_to_mem>
 800db70:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	2200      	movs	r2, #0
 800db76:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	89ba      	ldrh	r2, [r7, #12]
 800db7c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	8afa      	ldrh	r2, [r7, #22]
 800db82:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800db84:	69bb      	ldr	r3, [r7, #24]
 800db86:	89fa      	ldrh	r2, [r7, #14]
 800db88:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	881b      	ldrh	r3, [r3, #0]
 800db8e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800db92:	d047      	beq.n	800dc24 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	881b      	ldrh	r3, [r3, #0]
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff fd73 	bl	800d684 <ptr_to_mem>
 800db9e:	4602      	mov	r2, r0
 800dba0:	89fb      	ldrh	r3, [r7, #14]
 800dba2:	8053      	strh	r3, [r2, #2]
 800dba4:	e03e      	b.n	800dc24 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800dba6:	8bfb      	ldrh	r3, [r7, #30]
 800dba8:	f103 0214 	add.w	r2, r3, #20
 800dbac:	8abb      	ldrh	r3, [r7, #20]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d838      	bhi.n	800dc24 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800dbb2:	8afa      	ldrh	r2, [r7, #22]
 800dbb4:	8bfb      	ldrh	r3, [r7, #30]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	3308      	adds	r3, #8
 800dbbc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	881b      	ldrh	r3, [r3, #0]
 800dbc2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dbc6:	d106      	bne.n	800dbd6 <mem_trim+0x192>
 800dbc8:	4b1c      	ldr	r3, [pc, #112]	; (800dc3c <mem_trim+0x1f8>)
 800dbca:	f240 3216 	movw	r2, #790	; 0x316
 800dbce:	4920      	ldr	r1, [pc, #128]	; (800dc50 <mem_trim+0x20c>)
 800dbd0:	481c      	ldr	r0, [pc, #112]	; (800dc44 <mem_trim+0x200>)
 800dbd2:	f009 fdbd 	bl	8017750 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800dbd6:	89fb      	ldrh	r3, [r7, #14]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7ff fd53 	bl	800d684 <ptr_to_mem>
 800dbde:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800dbe0:	4b1c      	ldr	r3, [pc, #112]	; (800dc54 <mem_trim+0x210>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d202      	bcs.n	800dbf0 <mem_trim+0x1ac>
      lfree = mem2;
 800dbea:	4a1a      	ldr	r2, [pc, #104]	; (800dc54 <mem_trim+0x210>)
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	881a      	ldrh	r2, [r3, #0]
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	8afa      	ldrh	r2, [r7, #22]
 800dc02:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800dc04:	69bb      	ldr	r3, [r7, #24]
 800dc06:	89fa      	ldrh	r2, [r7, #14]
 800dc08:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	881b      	ldrh	r3, [r3, #0]
 800dc0e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dc12:	d007      	beq.n	800dc24 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	881b      	ldrh	r3, [r3, #0]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff fd33 	bl	800d684 <ptr_to_mem>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	89fb      	ldrh	r3, [r7, #14]
 800dc22:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dc24:	4809      	ldr	r0, [pc, #36]	; (800dc4c <mem_trim+0x208>)
 800dc26:	f009 fba6 	bl	8017376 <sys_mutex_unlock>
  return rmem;
 800dc2a:	687b      	ldr	r3, [r7, #4]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3720      	adds	r7, #32
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	240040e4 	.word	0x240040e4
 800dc38:	240040e8 	.word	0x240040e8
 800dc3c:	08018828 	.word	0x08018828
 800dc40:	080189b4 	.word	0x080189b4
 800dc44:	08018870 	.word	0x08018870
 800dc48:	080189cc 	.word	0x080189cc
 800dc4c:	240040ec 	.word	0x240040ec
 800dc50:	080189ec 	.word	0x080189ec
 800dc54:	240040f0 	.word	0x240040f0

0800dc58 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b088      	sub	sp, #32
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	4603      	mov	r3, r0
 800dc60:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800dc62:	88fb      	ldrh	r3, [r7, #6]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d101      	bne.n	800dc6c <mem_malloc+0x14>
    return NULL;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	e0e2      	b.n	800de32 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800dc6c:	88fb      	ldrh	r3, [r7, #6]
 800dc6e:	3303      	adds	r3, #3
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	f023 0303 	bic.w	r3, r3, #3
 800dc76:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800dc78:	8bbb      	ldrh	r3, [r7, #28]
 800dc7a:	2b0b      	cmp	r3, #11
 800dc7c:	d801      	bhi.n	800dc82 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800dc7e:	230c      	movs	r3, #12
 800dc80:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800dc82:	8bbb      	ldrh	r3, [r7, #28]
 800dc84:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dc88:	d803      	bhi.n	800dc92 <mem_malloc+0x3a>
 800dc8a:	8bba      	ldrh	r2, [r7, #28]
 800dc8c:	88fb      	ldrh	r3, [r7, #6]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d201      	bcs.n	800dc96 <mem_malloc+0x3e>
    return NULL;
 800dc92:	2300      	movs	r3, #0
 800dc94:	e0cd      	b.n	800de32 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800dc96:	4869      	ldr	r0, [pc, #420]	; (800de3c <mem_malloc+0x1e4>)
 800dc98:	f009 fb5e 	bl	8017358 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dc9c:	4b68      	ldr	r3, [pc, #416]	; (800de40 <mem_malloc+0x1e8>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7ff fd01 	bl	800d6a8 <mem_to_ptr>
 800dca6:	4603      	mov	r3, r0
 800dca8:	83fb      	strh	r3, [r7, #30]
 800dcaa:	e0b7      	b.n	800de1c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800dcac:	8bfb      	ldrh	r3, [r7, #30]
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7ff fce8 	bl	800d684 <ptr_to_mem>
 800dcb4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	791b      	ldrb	r3, [r3, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f040 80a7 	bne.w	800de0e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	881b      	ldrh	r3, [r3, #0]
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	8bfb      	ldrh	r3, [r7, #30]
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	f1a3 0208 	sub.w	r2, r3, #8
 800dcce:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	f0c0 809c 	bcc.w	800de0e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	881b      	ldrh	r3, [r3, #0]
 800dcda:	461a      	mov	r2, r3
 800dcdc:	8bfb      	ldrh	r3, [r7, #30]
 800dcde:	1ad3      	subs	r3, r2, r3
 800dce0:	f1a3 0208 	sub.w	r2, r3, #8
 800dce4:	8bbb      	ldrh	r3, [r7, #28]
 800dce6:	3314      	adds	r3, #20
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d333      	bcc.n	800dd54 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dcec:	8bfa      	ldrh	r2, [r7, #30]
 800dcee:	8bbb      	ldrh	r3, [r7, #28]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	3308      	adds	r3, #8
 800dcf6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800dcf8:	8a7b      	ldrh	r3, [r7, #18]
 800dcfa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dcfe:	d106      	bne.n	800dd0e <mem_malloc+0xb6>
 800dd00:	4b50      	ldr	r3, [pc, #320]	; (800de44 <mem_malloc+0x1ec>)
 800dd02:	f240 3287 	movw	r2, #903	; 0x387
 800dd06:	4950      	ldr	r1, [pc, #320]	; (800de48 <mem_malloc+0x1f0>)
 800dd08:	4850      	ldr	r0, [pc, #320]	; (800de4c <mem_malloc+0x1f4>)
 800dd0a:	f009 fd21 	bl	8017750 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800dd0e:	8a7b      	ldrh	r3, [r7, #18]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7ff fcb7 	bl	800d684 <ptr_to_mem>
 800dd16:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	881a      	ldrh	r2, [r3, #0]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	8bfa      	ldrh	r2, [r7, #30]
 800dd2a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	8a7a      	ldrh	r2, [r7, #18]
 800dd30:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	2201      	movs	r2, #1
 800dd36:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dd40:	d00b      	beq.n	800dd5a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	881b      	ldrh	r3, [r3, #0]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7ff fc9c 	bl	800d684 <ptr_to_mem>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	8a7b      	ldrh	r3, [r7, #18]
 800dd50:	8053      	strh	r3, [r2, #2]
 800dd52:	e002      	b.n	800dd5a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	2201      	movs	r2, #1
 800dd58:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800dd5a:	4b39      	ldr	r3, [pc, #228]	; (800de40 <mem_malloc+0x1e8>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	697a      	ldr	r2, [r7, #20]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d127      	bne.n	800ddb4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800dd64:	4b36      	ldr	r3, [pc, #216]	; (800de40 <mem_malloc+0x1e8>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800dd6a:	e005      	b.n	800dd78 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	881b      	ldrh	r3, [r3, #0]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7ff fc87 	bl	800d684 <ptr_to_mem>
 800dd76:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	791b      	ldrb	r3, [r3, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d004      	beq.n	800dd8a <mem_malloc+0x132>
 800dd80:	4b33      	ldr	r3, [pc, #204]	; (800de50 <mem_malloc+0x1f8>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	69ba      	ldr	r2, [r7, #24]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d1f0      	bne.n	800dd6c <mem_malloc+0x114>
          }
          lfree = cur;
 800dd8a:	4a2d      	ldr	r2, [pc, #180]	; (800de40 <mem_malloc+0x1e8>)
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800dd90:	4b2b      	ldr	r3, [pc, #172]	; (800de40 <mem_malloc+0x1e8>)
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	4b2e      	ldr	r3, [pc, #184]	; (800de50 <mem_malloc+0x1f8>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d00b      	beq.n	800ddb4 <mem_malloc+0x15c>
 800dd9c:	4b28      	ldr	r3, [pc, #160]	; (800de40 <mem_malloc+0x1e8>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	791b      	ldrb	r3, [r3, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d006      	beq.n	800ddb4 <mem_malloc+0x15c>
 800dda6:	4b27      	ldr	r3, [pc, #156]	; (800de44 <mem_malloc+0x1ec>)
 800dda8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ddac:	4929      	ldr	r1, [pc, #164]	; (800de54 <mem_malloc+0x1fc>)
 800ddae:	4827      	ldr	r0, [pc, #156]	; (800de4c <mem_malloc+0x1f4>)
 800ddb0:	f009 fcce 	bl	8017750 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ddb4:	4821      	ldr	r0, [pc, #132]	; (800de3c <mem_malloc+0x1e4>)
 800ddb6:	f009 fade 	bl	8017376 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ddba:	8bba      	ldrh	r2, [r7, #28]
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	3308      	adds	r3, #8
 800ddc2:	4a23      	ldr	r2, [pc, #140]	; (800de50 <mem_malloc+0x1f8>)
 800ddc4:	6812      	ldr	r2, [r2, #0]
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d906      	bls.n	800ddd8 <mem_malloc+0x180>
 800ddca:	4b1e      	ldr	r3, [pc, #120]	; (800de44 <mem_malloc+0x1ec>)
 800ddcc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ddd0:	4921      	ldr	r1, [pc, #132]	; (800de58 <mem_malloc+0x200>)
 800ddd2:	481e      	ldr	r0, [pc, #120]	; (800de4c <mem_malloc+0x1f4>)
 800ddd4:	f009 fcbc 	bl	8017750 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	f003 0303 	and.w	r3, r3, #3
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d006      	beq.n	800ddf0 <mem_malloc+0x198>
 800dde2:	4b18      	ldr	r3, [pc, #96]	; (800de44 <mem_malloc+0x1ec>)
 800dde4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800dde8:	491c      	ldr	r1, [pc, #112]	; (800de5c <mem_malloc+0x204>)
 800ddea:	4818      	ldr	r0, [pc, #96]	; (800de4c <mem_malloc+0x1f4>)
 800ddec:	f009 fcb0 	bl	8017750 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	f003 0303 	and.w	r3, r3, #3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d006      	beq.n	800de08 <mem_malloc+0x1b0>
 800ddfa:	4b12      	ldr	r3, [pc, #72]	; (800de44 <mem_malloc+0x1ec>)
 800ddfc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800de00:	4917      	ldr	r1, [pc, #92]	; (800de60 <mem_malloc+0x208>)
 800de02:	4812      	ldr	r0, [pc, #72]	; (800de4c <mem_malloc+0x1f4>)
 800de04:	f009 fca4 	bl	8017750 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	3308      	adds	r3, #8
 800de0c:	e011      	b.n	800de32 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800de0e:	8bfb      	ldrh	r3, [r7, #30]
 800de10:	4618      	mov	r0, r3
 800de12:	f7ff fc37 	bl	800d684 <ptr_to_mem>
 800de16:	4603      	mov	r3, r0
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800de1c:	8bfa      	ldrh	r2, [r7, #30]
 800de1e:	8bbb      	ldrh	r3, [r7, #28]
 800de20:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800de24:	429a      	cmp	r2, r3
 800de26:	f4ff af41 	bcc.w	800dcac <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800de2a:	4804      	ldr	r0, [pc, #16]	; (800de3c <mem_malloc+0x1e4>)
 800de2c:	f009 faa3 	bl	8017376 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3720      	adds	r7, #32
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	240040ec 	.word	0x240040ec
 800de40:	240040f0 	.word	0x240040f0
 800de44:	08018828 	.word	0x08018828
 800de48:	080189ec 	.word	0x080189ec
 800de4c:	08018870 	.word	0x08018870
 800de50:	240040e8 	.word	0x240040e8
 800de54:	08018a00 	.word	0x08018a00
 800de58:	08018a1c 	.word	0x08018a1c
 800de5c:	08018a4c 	.word	0x08018a4c
 800de60:	08018a7c 	.word	0x08018a7c

0800de64 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	2200      	movs	r2, #0
 800de72:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	3303      	adds	r3, #3
 800de7a:	f023 0303 	bic.w	r3, r3, #3
 800de7e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800de80:	2300      	movs	r3, #0
 800de82:	60fb      	str	r3, [r7, #12]
 800de84:	e011      	b.n	800deaa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	689b      	ldr	r3, [r3, #8]
 800de94:	68ba      	ldr	r2, [r7, #8]
 800de96:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	881b      	ldrh	r3, [r3, #0]
 800de9c:	461a      	mov	r2, r3
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	4413      	add	r3, r2
 800dea2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	3301      	adds	r3, #1
 800dea8:	60fb      	str	r3, [r7, #12]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	885b      	ldrh	r3, [r3, #2]
 800deae:	461a      	mov	r2, r3
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	4293      	cmp	r3, r2
 800deb4:	dbe7      	blt.n	800de86 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800deb6:	bf00      	nop
 800deb8:	bf00      	nop
 800deba:	3714      	adds	r7, #20
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800deca:	2300      	movs	r3, #0
 800decc:	80fb      	strh	r3, [r7, #6]
 800dece:	e009      	b.n	800dee4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ded0:	88fb      	ldrh	r3, [r7, #6]
 800ded2:	4a08      	ldr	r2, [pc, #32]	; (800def4 <memp_init+0x30>)
 800ded4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ded8:	4618      	mov	r0, r3
 800deda:	f7ff ffc3 	bl	800de64 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dede:	88fb      	ldrh	r3, [r7, #6]
 800dee0:	3301      	adds	r3, #1
 800dee2:	80fb      	strh	r3, [r7, #6]
 800dee4:	88fb      	ldrh	r3, [r7, #6]
 800dee6:	2b0c      	cmp	r3, #12
 800dee8:	d9f2      	bls.n	800ded0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800deea:	bf00      	nop
 800deec:	bf00      	nop
 800deee:	3708      	adds	r7, #8
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	0801c7fc 	.word	0x0801c7fc

0800def8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800df00:	f009 fa6c 	bl	80173dc <sys_arch_protect>
 800df04:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	689b      	ldr	r3, [r3, #8]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d015      	beq.n	800df40 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	6812      	ldr	r2, [r2, #0]
 800df1c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	f003 0303 	and.w	r3, r3, #3
 800df24:	2b00      	cmp	r3, #0
 800df26:	d006      	beq.n	800df36 <do_memp_malloc_pool+0x3e>
 800df28:	4b09      	ldr	r3, [pc, #36]	; (800df50 <do_memp_malloc_pool+0x58>)
 800df2a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800df2e:	4909      	ldr	r1, [pc, #36]	; (800df54 <do_memp_malloc_pool+0x5c>)
 800df30:	4809      	ldr	r0, [pc, #36]	; (800df58 <do_memp_malloc_pool+0x60>)
 800df32:	f009 fc0d 	bl	8017750 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800df36:	68f8      	ldr	r0, [r7, #12]
 800df38:	f009 fa5e 	bl	80173f8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	e003      	b.n	800df48 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800df40:	68f8      	ldr	r0, [r7, #12]
 800df42:	f009 fa59 	bl	80173f8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800df46:	2300      	movs	r3, #0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	08018aa0 	.word	0x08018aa0
 800df54:	08018ad0 	.word	0x08018ad0
 800df58:	08018af4 	.word	0x08018af4

0800df5c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d106      	bne.n	800df78 <memp_malloc_pool+0x1c>
 800df6a:	4b0a      	ldr	r3, [pc, #40]	; (800df94 <memp_malloc_pool+0x38>)
 800df6c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800df70:	4909      	ldr	r1, [pc, #36]	; (800df98 <memp_malloc_pool+0x3c>)
 800df72:	480a      	ldr	r0, [pc, #40]	; (800df9c <memp_malloc_pool+0x40>)
 800df74:	f009 fbec 	bl	8017750 <iprintf>
  if (desc == NULL) {
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d101      	bne.n	800df82 <memp_malloc_pool+0x26>
    return NULL;
 800df7e:	2300      	movs	r3, #0
 800df80:	e003      	b.n	800df8a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7ff ffb8 	bl	800def8 <do_memp_malloc_pool>
 800df88:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	bf00      	nop
 800df94:	08018aa0 	.word	0x08018aa0
 800df98:	08018b1c 	.word	0x08018b1c
 800df9c:	08018af4 	.word	0x08018af4

0800dfa0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800dfaa:	79fb      	ldrb	r3, [r7, #7]
 800dfac:	2b0c      	cmp	r3, #12
 800dfae:	d908      	bls.n	800dfc2 <memp_malloc+0x22>
 800dfb0:	4b0a      	ldr	r3, [pc, #40]	; (800dfdc <memp_malloc+0x3c>)
 800dfb2:	f240 1257 	movw	r2, #343	; 0x157
 800dfb6:	490a      	ldr	r1, [pc, #40]	; (800dfe0 <memp_malloc+0x40>)
 800dfb8:	480a      	ldr	r0, [pc, #40]	; (800dfe4 <memp_malloc+0x44>)
 800dfba:	f009 fbc9 	bl	8017750 <iprintf>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	e008      	b.n	800dfd4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800dfc2:	79fb      	ldrb	r3, [r7, #7]
 800dfc4:	4a08      	ldr	r2, [pc, #32]	; (800dfe8 <memp_malloc+0x48>)
 800dfc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7ff ff94 	bl	800def8 <do_memp_malloc_pool>
 800dfd0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	08018aa0 	.word	0x08018aa0
 800dfe0:	08018b30 	.word	0x08018b30
 800dfe4:	08018af4 	.word	0x08018af4
 800dfe8:	0801c7fc 	.word	0x0801c7fc

0800dfec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	f003 0303 	and.w	r3, r3, #3
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d006      	beq.n	800e00e <do_memp_free_pool+0x22>
 800e000:	4b0d      	ldr	r3, [pc, #52]	; (800e038 <do_memp_free_pool+0x4c>)
 800e002:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e006:	490d      	ldr	r1, [pc, #52]	; (800e03c <do_memp_free_pool+0x50>)
 800e008:	480d      	ldr	r0, [pc, #52]	; (800e040 <do_memp_free_pool+0x54>)
 800e00a:	f009 fba1 	bl	8017750 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e012:	f009 f9e3 	bl	80173dc <sys_arch_protect>
 800e016:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	689b      	ldr	r3, [r3, #8]
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e02a:	68b8      	ldr	r0, [r7, #8]
 800e02c:	f009 f9e4 	bl	80173f8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e030:	bf00      	nop
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	08018aa0 	.word	0x08018aa0
 800e03c:	08018b50 	.word	0x08018b50
 800e040:	08018af4 	.word	0x08018af4

0800e044 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d106      	bne.n	800e062 <memp_free_pool+0x1e>
 800e054:	4b0a      	ldr	r3, [pc, #40]	; (800e080 <memp_free_pool+0x3c>)
 800e056:	f240 1295 	movw	r2, #405	; 0x195
 800e05a:	490a      	ldr	r1, [pc, #40]	; (800e084 <memp_free_pool+0x40>)
 800e05c:	480a      	ldr	r0, [pc, #40]	; (800e088 <memp_free_pool+0x44>)
 800e05e:	f009 fb77 	bl	8017750 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d007      	beq.n	800e078 <memp_free_pool+0x34>
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d004      	beq.n	800e078 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e06e:	6839      	ldr	r1, [r7, #0]
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7ff ffbb 	bl	800dfec <do_memp_free_pool>
 800e076:	e000      	b.n	800e07a <memp_free_pool+0x36>
    return;
 800e078:	bf00      	nop
}
 800e07a:	3708      	adds	r7, #8
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	08018aa0 	.word	0x08018aa0
 800e084:	08018b1c 	.word	0x08018b1c
 800e088:	08018af4 	.word	0x08018af4

0800e08c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	4603      	mov	r3, r0
 800e094:	6039      	str	r1, [r7, #0]
 800e096:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e098:	79fb      	ldrb	r3, [r7, #7]
 800e09a:	2b0c      	cmp	r3, #12
 800e09c:	d907      	bls.n	800e0ae <memp_free+0x22>
 800e09e:	4b0c      	ldr	r3, [pc, #48]	; (800e0d0 <memp_free+0x44>)
 800e0a0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e0a4:	490b      	ldr	r1, [pc, #44]	; (800e0d4 <memp_free+0x48>)
 800e0a6:	480c      	ldr	r0, [pc, #48]	; (800e0d8 <memp_free+0x4c>)
 800e0a8:	f009 fb52 	bl	8017750 <iprintf>
 800e0ac:	e00c      	b.n	800e0c8 <memp_free+0x3c>

  if (mem == NULL) {
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d008      	beq.n	800e0c6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e0b4:	79fb      	ldrb	r3, [r7, #7]
 800e0b6:	4a09      	ldr	r2, [pc, #36]	; (800e0dc <memp_free+0x50>)
 800e0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0bc:	6839      	ldr	r1, [r7, #0]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7ff ff94 	bl	800dfec <do_memp_free_pool>
 800e0c4:	e000      	b.n	800e0c8 <memp_free+0x3c>
    return;
 800e0c6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e0c8:	3708      	adds	r7, #8
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	08018aa0 	.word	0x08018aa0
 800e0d4:	08018b70 	.word	0x08018b70
 800e0d8:	08018af4 	.word	0x08018af4
 800e0dc:	0801c7fc 	.word	0x0801c7fc

0800e0e0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e0e4:	bf00      	nop
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
	...

0800e0f0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
 800e0fc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d108      	bne.n	800e116 <netif_add+0x26>
 800e104:	4b57      	ldr	r3, [pc, #348]	; (800e264 <netif_add+0x174>)
 800e106:	f240 1227 	movw	r2, #295	; 0x127
 800e10a:	4957      	ldr	r1, [pc, #348]	; (800e268 <netif_add+0x178>)
 800e10c:	4857      	ldr	r0, [pc, #348]	; (800e26c <netif_add+0x17c>)
 800e10e:	f009 fb1f 	bl	8017750 <iprintf>
 800e112:	2300      	movs	r3, #0
 800e114:	e0a2      	b.n	800e25c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d108      	bne.n	800e12e <netif_add+0x3e>
 800e11c:	4b51      	ldr	r3, [pc, #324]	; (800e264 <netif_add+0x174>)
 800e11e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e122:	4953      	ldr	r1, [pc, #332]	; (800e270 <netif_add+0x180>)
 800e124:	4851      	ldr	r0, [pc, #324]	; (800e26c <netif_add+0x17c>)
 800e126:	f009 fb13 	bl	8017750 <iprintf>
 800e12a:	2300      	movs	r3, #0
 800e12c:	e096      	b.n	800e25c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d101      	bne.n	800e138 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e134:	4b4f      	ldr	r3, [pc, #316]	; (800e274 <netif_add+0x184>)
 800e136:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d101      	bne.n	800e142 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e13e:	4b4d      	ldr	r3, [pc, #308]	; (800e274 <netif_add+0x184>)
 800e140:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e148:	4b4a      	ldr	r3, [pc, #296]	; (800e274 <netif_add+0x184>)
 800e14a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2200      	movs	r2, #0
 800e150:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2200      	movs	r2, #0
 800e156:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2200      	movs	r2, #0
 800e15c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	4a45      	ldr	r2, [pc, #276]	; (800e278 <netif_add+0x188>)
 800e162:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2200      	movs	r2, #0
 800e16e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2200      	movs	r2, #0
 800e176:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6a3a      	ldr	r2, [r7, #32]
 800e17c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e17e:	4b3f      	ldr	r3, [pc, #252]	; (800e27c <netif_add+0x18c>)
 800e180:	781a      	ldrb	r2, [r3, #0]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e18c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	68b9      	ldr	r1, [r7, #8]
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f000 f913 	bl	800e3c0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	4798      	blx	r3
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d001      	beq.n	800e1aa <netif_add+0xba>
    return NULL;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	e058      	b.n	800e25c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1b0:	2bff      	cmp	r3, #255	; 0xff
 800e1b2:	d103      	bne.n	800e1bc <netif_add+0xcc>
        netif->num = 0;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e1c0:	4b2f      	ldr	r3, [pc, #188]	; (800e280 <netif_add+0x190>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	617b      	str	r3, [r7, #20]
 800e1c6:	e02b      	b.n	800e220 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d106      	bne.n	800e1de <netif_add+0xee>
 800e1d0:	4b24      	ldr	r3, [pc, #144]	; (800e264 <netif_add+0x174>)
 800e1d2:	f240 128b 	movw	r2, #395	; 0x18b
 800e1d6:	492b      	ldr	r1, [pc, #172]	; (800e284 <netif_add+0x194>)
 800e1d8:	4824      	ldr	r0, [pc, #144]	; (800e26c <netif_add+0x17c>)
 800e1da:	f009 fab9 	bl	8017750 <iprintf>
        num_netifs++;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	2bff      	cmp	r3, #255	; 0xff
 800e1e8:	dd06      	ble.n	800e1f8 <netif_add+0x108>
 800e1ea:	4b1e      	ldr	r3, [pc, #120]	; (800e264 <netif_add+0x174>)
 800e1ec:	f240 128d 	movw	r2, #397	; 0x18d
 800e1f0:	4925      	ldr	r1, [pc, #148]	; (800e288 <netif_add+0x198>)
 800e1f2:	481e      	ldr	r0, [pc, #120]	; (800e26c <netif_add+0x17c>)
 800e1f4:	f009 faac 	bl	8017750 <iprintf>
        if (netif2->num == netif->num) {
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e204:	429a      	cmp	r2, r3
 800e206:	d108      	bne.n	800e21a <netif_add+0x12a>
          netif->num++;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e20e:	3301      	adds	r3, #1
 800e210:	b2da      	uxtb	r2, r3
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800e218:	e005      	b.n	800e226 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	617b      	str	r3, [r7, #20]
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d1d0      	bne.n	800e1c8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d1be      	bne.n	800e1aa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e232:	2bfe      	cmp	r3, #254	; 0xfe
 800e234:	d103      	bne.n	800e23e <netif_add+0x14e>
    netif_num = 0;
 800e236:	4b11      	ldr	r3, [pc, #68]	; (800e27c <netif_add+0x18c>)
 800e238:	2200      	movs	r2, #0
 800e23a:	701a      	strb	r2, [r3, #0]
 800e23c:	e006      	b.n	800e24c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e244:	3301      	adds	r3, #1
 800e246:	b2da      	uxtb	r2, r3
 800e248:	4b0c      	ldr	r3, [pc, #48]	; (800e27c <netif_add+0x18c>)
 800e24a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e24c:	4b0c      	ldr	r3, [pc, #48]	; (800e280 <netif_add+0x190>)
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e254:	4a0a      	ldr	r2, [pc, #40]	; (800e280 <netif_add+0x190>)
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e25a:	68fb      	ldr	r3, [r7, #12]
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	08018b8c 	.word	0x08018b8c
 800e268:	08018c20 	.word	0x08018c20
 800e26c:	08018bdc 	.word	0x08018bdc
 800e270:	08018c3c 	.word	0x08018c3c
 800e274:	0801c870 	.word	0x0801c870
 800e278:	0800e69b 	.word	0x0800e69b
 800e27c:	24004128 	.word	0x24004128
 800e280:	24007844 	.word	0x24007844
 800e284:	08018c60 	.word	0x08018c60
 800e288:	08018c74 	.word	0x08018c74

0800e28c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e296:	6839      	ldr	r1, [r7, #0]
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f002 fb7d 	bl	8010998 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e29e:	6839      	ldr	r1, [r7, #0]
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f006 fc8d 	bl	8014bc0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e2a6:	bf00      	nop
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
	...

0800e2b0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d106      	bne.n	800e2d0 <netif_do_set_ipaddr+0x20>
 800e2c2:	4b1d      	ldr	r3, [pc, #116]	; (800e338 <netif_do_set_ipaddr+0x88>)
 800e2c4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e2c8:	491c      	ldr	r1, [pc, #112]	; (800e33c <netif_do_set_ipaddr+0x8c>)
 800e2ca:	481d      	ldr	r0, [pc, #116]	; (800e340 <netif_do_set_ipaddr+0x90>)
 800e2cc:	f009 fa40 	bl	8017750 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d106      	bne.n	800e2e4 <netif_do_set_ipaddr+0x34>
 800e2d6:	4b18      	ldr	r3, [pc, #96]	; (800e338 <netif_do_set_ipaddr+0x88>)
 800e2d8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e2dc:	4917      	ldr	r1, [pc, #92]	; (800e33c <netif_do_set_ipaddr+0x8c>)
 800e2de:	4818      	ldr	r0, [pc, #96]	; (800e340 <netif_do_set_ipaddr+0x90>)
 800e2e0:	f009 fa36 	bl	8017750 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	3304      	adds	r3, #4
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d01c      	beq.n	800e32c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	3304      	adds	r3, #4
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e302:	f107 0314 	add.w	r3, r7, #20
 800e306:	4619      	mov	r1, r3
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f7ff ffbf 	bl	800e28c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <netif_do_set_ipaddr+0x6a>
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	e000      	b.n	800e31c <netif_do_set_ipaddr+0x6c>
 800e31a:	2300      	movs	r3, #0
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e320:	2101      	movs	r1, #1
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f000 f8d2 	bl	800e4cc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e328:	2301      	movs	r3, #1
 800e32a:	e000      	b.n	800e32e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3718      	adds	r7, #24
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	08018b8c 	.word	0x08018b8c
 800e33c:	08018ca4 	.word	0x08018ca4
 800e340:	08018bdc 	.word	0x08018bdc

0800e344 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e344:	b480      	push	{r7}
 800e346:	b085      	sub	sp, #20
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	3308      	adds	r3, #8
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d00a      	beq.n	800e374 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d002      	beq.n	800e36a <netif_do_set_netmask+0x26>
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	e000      	b.n	800e36c <netif_do_set_netmask+0x28>
 800e36a:	2300      	movs	r3, #0
 800e36c:	68fa      	ldr	r2, [r7, #12]
 800e36e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e370:	2301      	movs	r3, #1
 800e372:	e000      	b.n	800e376 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e374:	2300      	movs	r3, #0
}
 800e376:	4618      	mov	r0, r3
 800e378:	3714      	adds	r7, #20
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr

0800e382 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e382:	b480      	push	{r7}
 800e384:	b085      	sub	sp, #20
 800e386:	af00      	add	r7, sp, #0
 800e388:	60f8      	str	r0, [r7, #12]
 800e38a:	60b9      	str	r1, [r7, #8]
 800e38c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	330c      	adds	r3, #12
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d00a      	beq.n	800e3b2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d002      	beq.n	800e3a8 <netif_do_set_gw+0x26>
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	e000      	b.n	800e3aa <netif_do_set_gw+0x28>
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	68fa      	ldr	r2, [r7, #12]
 800e3ac:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e000      	b.n	800e3b4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3714      	adds	r7, #20
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b088      	sub	sp, #32
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	607a      	str	r2, [r7, #4]
 800e3cc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d101      	bne.n	800e3e0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e3dc:	4b1c      	ldr	r3, [pc, #112]	; (800e450 <netif_set_addr+0x90>)
 800e3de:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d101      	bne.n	800e3ea <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e3e6:	4b1a      	ldr	r3, [pc, #104]	; (800e450 <netif_set_addr+0x90>)
 800e3e8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d101      	bne.n	800e3f4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e3f0:	4b17      	ldr	r3, [pc, #92]	; (800e450 <netif_set_addr+0x90>)
 800e3f2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d003      	beq.n	800e402 <netif_set_addr+0x42>
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d101      	bne.n	800e406 <netif_set_addr+0x46>
 800e402:	2301      	movs	r3, #1
 800e404:	e000      	b.n	800e408 <netif_set_addr+0x48>
 800e406:	2300      	movs	r3, #0
 800e408:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d006      	beq.n	800e41e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e410:	f107 0310 	add.w	r3, r7, #16
 800e414:	461a      	mov	r2, r3
 800e416:	68b9      	ldr	r1, [r7, #8]
 800e418:	68f8      	ldr	r0, [r7, #12]
 800e41a:	f7ff ff49 	bl	800e2b0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e41e:	69fa      	ldr	r2, [r7, #28]
 800e420:	6879      	ldr	r1, [r7, #4]
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f7ff ff8e 	bl	800e344 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e428:	69ba      	ldr	r2, [r7, #24]
 800e42a:	6839      	ldr	r1, [r7, #0]
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f7ff ffa8 	bl	800e382 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d106      	bne.n	800e446 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e438:	f107 0310 	add.w	r3, r7, #16
 800e43c:	461a      	mov	r2, r3
 800e43e:	68b9      	ldr	r1, [r7, #8]
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f7ff ff35 	bl	800e2b0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e446:	bf00      	nop
 800e448:	3720      	adds	r7, #32
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	0801c870 	.word	0x0801c870

0800e454 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e45c:	4a04      	ldr	r2, [pc, #16]	; (800e470 <netif_set_default+0x1c>)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e462:	bf00      	nop
 800e464:	370c      	adds	r7, #12
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop
 800e470:	24007848 	.word	0x24007848

0800e474 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d107      	bne.n	800e492 <netif_set_up+0x1e>
 800e482:	4b0f      	ldr	r3, [pc, #60]	; (800e4c0 <netif_set_up+0x4c>)
 800e484:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e488:	490e      	ldr	r1, [pc, #56]	; (800e4c4 <netif_set_up+0x50>)
 800e48a:	480f      	ldr	r0, [pc, #60]	; (800e4c8 <netif_set_up+0x54>)
 800e48c:	f009 f960 	bl	8017750 <iprintf>
 800e490:	e013      	b.n	800e4ba <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e498:	f003 0301 	and.w	r3, r3, #1
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d10c      	bne.n	800e4ba <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4a6:	f043 0301 	orr.w	r3, r3, #1
 800e4aa:	b2da      	uxtb	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e4b2:	2103      	movs	r1, #3
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 f809 	bl	800e4cc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	08018b8c 	.word	0x08018b8c
 800e4c4:	08018d14 	.word	0x08018d14
 800e4c8:	08018bdc 	.word	0x08018bdc

0800e4cc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d106      	bne.n	800e4ec <netif_issue_reports+0x20>
 800e4de:	4b18      	ldr	r3, [pc, #96]	; (800e540 <netif_issue_reports+0x74>)
 800e4e0:	f240 326d 	movw	r2, #877	; 0x36d
 800e4e4:	4917      	ldr	r1, [pc, #92]	; (800e544 <netif_issue_reports+0x78>)
 800e4e6:	4818      	ldr	r0, [pc, #96]	; (800e548 <netif_issue_reports+0x7c>)
 800e4e8:	f009 f932 	bl	8017750 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4f2:	f003 0304 	and.w	r3, r3, #4
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d01e      	beq.n	800e538 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e500:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e504:	2b00      	cmp	r3, #0
 800e506:	d017      	beq.n	800e538 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e508:	78fb      	ldrb	r3, [r7, #3]
 800e50a:	f003 0301 	and.w	r3, r3, #1
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d013      	beq.n	800e53a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	3304      	adds	r3, #4
 800e516:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00e      	beq.n	800e53a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e522:	f003 0308 	and.w	r3, r3, #8
 800e526:	2b00      	cmp	r3, #0
 800e528:	d007      	beq.n	800e53a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	3304      	adds	r3, #4
 800e52e:	4619      	mov	r1, r3
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f007 faaf 	bl	8015a94 <etharp_request>
 800e536:	e000      	b.n	800e53a <netif_issue_reports+0x6e>
    return;
 800e538:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e53a:	3708      	adds	r7, #8
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	08018b8c 	.word	0x08018b8c
 800e544:	08018d30 	.word	0x08018d30
 800e548:	08018bdc 	.word	0x08018bdc

0800e54c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d107      	bne.n	800e56a <netif_set_down+0x1e>
 800e55a:	4b12      	ldr	r3, [pc, #72]	; (800e5a4 <netif_set_down+0x58>)
 800e55c:	f240 329b 	movw	r2, #923	; 0x39b
 800e560:	4911      	ldr	r1, [pc, #68]	; (800e5a8 <netif_set_down+0x5c>)
 800e562:	4812      	ldr	r0, [pc, #72]	; (800e5ac <netif_set_down+0x60>)
 800e564:	f009 f8f4 	bl	8017750 <iprintf>
 800e568:	e019      	b.n	800e59e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e570:	f003 0301 	and.w	r3, r3, #1
 800e574:	2b00      	cmp	r3, #0
 800e576:	d012      	beq.n	800e59e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e57e:	f023 0301 	bic.w	r3, r3, #1
 800e582:	b2da      	uxtb	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e590:	f003 0308 	and.w	r3, r3, #8
 800e594:	2b00      	cmp	r3, #0
 800e596:	d002      	beq.n	800e59e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f006 fe39 	bl	8015210 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	08018b8c 	.word	0x08018b8c
 800e5a8:	08018d54 	.word	0x08018d54
 800e5ac:	08018bdc 	.word	0x08018bdc

0800e5b0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d107      	bne.n	800e5ce <netif_set_link_up+0x1e>
 800e5be:	4b13      	ldr	r3, [pc, #76]	; (800e60c <netif_set_link_up+0x5c>)
 800e5c0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e5c4:	4912      	ldr	r1, [pc, #72]	; (800e610 <netif_set_link_up+0x60>)
 800e5c6:	4813      	ldr	r0, [pc, #76]	; (800e614 <netif_set_link_up+0x64>)
 800e5c8:	f009 f8c2 	bl	8017750 <iprintf>
 800e5cc:	e01b      	b.n	800e606 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5d4:	f003 0304 	and.w	r3, r3, #4
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d114      	bne.n	800e606 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5e2:	f043 0304 	orr.w	r3, r3, #4
 800e5e6:	b2da      	uxtb	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e5ee:	2103      	movs	r1, #3
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7ff ff6b 	bl	800e4cc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	69db      	ldr	r3, [r3, #28]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d003      	beq.n	800e606 <netif_set_link_up+0x56>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	69db      	ldr	r3, [r3, #28]
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	08018b8c 	.word	0x08018b8c
 800e610:	08018d74 	.word	0x08018d74
 800e614:	08018bdc 	.word	0x08018bdc

0800e618 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d107      	bne.n	800e636 <netif_set_link_down+0x1e>
 800e626:	4b11      	ldr	r3, [pc, #68]	; (800e66c <netif_set_link_down+0x54>)
 800e628:	f240 4206 	movw	r2, #1030	; 0x406
 800e62c:	4910      	ldr	r1, [pc, #64]	; (800e670 <netif_set_link_down+0x58>)
 800e62e:	4811      	ldr	r0, [pc, #68]	; (800e674 <netif_set_link_down+0x5c>)
 800e630:	f009 f88e 	bl	8017750 <iprintf>
 800e634:	e017      	b.n	800e666 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e63c:	f003 0304 	and.w	r3, r3, #4
 800e640:	2b00      	cmp	r3, #0
 800e642:	d010      	beq.n	800e666 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e64a:	f023 0304 	bic.w	r3, r3, #4
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	69db      	ldr	r3, [r3, #28]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d003      	beq.n	800e666 <netif_set_link_down+0x4e>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	69db      	ldr	r3, [r3, #28]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e666:	3708      	adds	r7, #8
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	08018b8c 	.word	0x08018b8c
 800e670:	08018d98 	.word	0x08018d98
 800e674:	08018bdc 	.word	0x08018bdc

0800e678 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d002      	beq.n	800e68e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	61da      	str	r2, [r3, #28]
  }
}
 800e68e:	bf00      	nop
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr

0800e69a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e69a:	b480      	push	{r7}
 800e69c:	b085      	sub	sp, #20
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	60f8      	str	r0, [r7, #12]
 800e6a2:	60b9      	str	r1, [r7, #8]
 800e6a4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e6a6:	f06f 030b 	mvn.w	r3, #11
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3714      	adds	r7, #20
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr
	...

0800e6b8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	4603      	mov	r3, r0
 800e6c0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e6c2:	79fb      	ldrb	r3, [r7, #7]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d013      	beq.n	800e6f0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e6c8:	4b0d      	ldr	r3, [pc, #52]	; (800e700 <netif_get_by_index+0x48>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	60fb      	str	r3, [r7, #12]
 800e6ce:	e00c      	b.n	800e6ea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	b2db      	uxtb	r3, r3
 800e6da:	79fa      	ldrb	r2, [r7, #7]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d101      	bne.n	800e6e4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	e006      	b.n	800e6f2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	60fb      	str	r3, [r7, #12]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d1ef      	bne.n	800e6d0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3714      	adds	r7, #20
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
 800e6fe:	bf00      	nop
 800e700:	24007844 	.word	0x24007844

0800e704 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e70a:	f008 fe67 	bl	80173dc <sys_arch_protect>
 800e70e:	6038      	str	r0, [r7, #0]
 800e710:	4b0d      	ldr	r3, [pc, #52]	; (800e748 <pbuf_free_ooseq+0x44>)
 800e712:	2200      	movs	r2, #0
 800e714:	701a      	strb	r2, [r3, #0]
 800e716:	6838      	ldr	r0, [r7, #0]
 800e718:	f008 fe6e 	bl	80173f8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e71c:	4b0b      	ldr	r3, [pc, #44]	; (800e74c <pbuf_free_ooseq+0x48>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	607b      	str	r3, [r7, #4]
 800e722:	e00a      	b.n	800e73a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d003      	beq.n	800e734 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f002 f971 	bl	8010a14 <tcp_free_ooseq>
      return;
 800e732:	e005      	b.n	800e740 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	607b      	str	r3, [r7, #4]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1f1      	bne.n	800e724 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	2400784c 	.word	0x2400784c
 800e74c:	24007854 	.word	0x24007854

0800e750 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e758:	f7ff ffd4 	bl	800e704 <pbuf_free_ooseq>
}
 800e75c:	bf00      	nop
 800e75e:	3708      	adds	r7, #8
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e76a:	f008 fe37 	bl	80173dc <sys_arch_protect>
 800e76e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e770:	4b0f      	ldr	r3, [pc, #60]	; (800e7b0 <pbuf_pool_is_empty+0x4c>)
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e776:	4b0e      	ldr	r3, [pc, #56]	; (800e7b0 <pbuf_pool_is_empty+0x4c>)
 800e778:	2201      	movs	r2, #1
 800e77a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f008 fe3b 	bl	80173f8 <sys_arch_unprotect>

  if (!queued) {
 800e782:	78fb      	ldrb	r3, [r7, #3]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d10f      	bne.n	800e7a8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e788:	2100      	movs	r1, #0
 800e78a:	480a      	ldr	r0, [pc, #40]	; (800e7b4 <pbuf_pool_is_empty+0x50>)
 800e78c:	f7fe fdee 	bl	800d36c <tcpip_try_callback>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d008      	beq.n	800e7a8 <pbuf_pool_is_empty+0x44>
 800e796:	f008 fe21 	bl	80173dc <sys_arch_protect>
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	4b04      	ldr	r3, [pc, #16]	; (800e7b0 <pbuf_pool_is_empty+0x4c>)
 800e79e:	2200      	movs	r2, #0
 800e7a0:	701a      	strb	r2, [r3, #0]
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f008 fe28 	bl	80173f8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e7a8:	bf00      	nop
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	2400784c 	.word	0x2400784c
 800e7b4:	0800e751 	.word	0x0800e751

0800e7b8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	4611      	mov	r1, r2
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	80fb      	strh	r3, [r7, #6]
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	68ba      	ldr	r2, [r7, #8]
 800e7d8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	88fa      	ldrh	r2, [r7, #6]
 800e7de:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	88ba      	ldrh	r2, [r7, #4]
 800e7e4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e7e6:	8b3b      	ldrh	r3, [r7, #24]
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	7f3a      	ldrb	r2, [r7, #28]
 800e7f2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	73da      	strb	r2, [r3, #15]
}
 800e800:	bf00      	nop
 800e802:	3714      	adds	r7, #20
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b08c      	sub	sp, #48	; 0x30
 800e810:	af02      	add	r7, sp, #8
 800e812:	4603      	mov	r3, r0
 800e814:	71fb      	strb	r3, [r7, #7]
 800e816:	460b      	mov	r3, r1
 800e818:	80bb      	strh	r3, [r7, #4]
 800e81a:	4613      	mov	r3, r2
 800e81c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e81e:	79fb      	ldrb	r3, [r7, #7]
 800e820:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e822:	887b      	ldrh	r3, [r7, #2]
 800e824:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e828:	d07f      	beq.n	800e92a <pbuf_alloc+0x11e>
 800e82a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e82e:	f300 80c8 	bgt.w	800e9c2 <pbuf_alloc+0x1b6>
 800e832:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e836:	d010      	beq.n	800e85a <pbuf_alloc+0x4e>
 800e838:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e83c:	f300 80c1 	bgt.w	800e9c2 <pbuf_alloc+0x1b6>
 800e840:	2b01      	cmp	r3, #1
 800e842:	d002      	beq.n	800e84a <pbuf_alloc+0x3e>
 800e844:	2b41      	cmp	r3, #65	; 0x41
 800e846:	f040 80bc 	bne.w	800e9c2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e84a:	887a      	ldrh	r2, [r7, #2]
 800e84c:	88bb      	ldrh	r3, [r7, #4]
 800e84e:	4619      	mov	r1, r3
 800e850:	2000      	movs	r0, #0
 800e852:	f000 f8d1 	bl	800e9f8 <pbuf_alloc_reference>
 800e856:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e858:	e0bd      	b.n	800e9d6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e85a:	2300      	movs	r3, #0
 800e85c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e85e:	2300      	movs	r3, #0
 800e860:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e862:	88bb      	ldrh	r3, [r7, #4]
 800e864:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e866:	200c      	movs	r0, #12
 800e868:	f7ff fb9a 	bl	800dfa0 <memp_malloc>
 800e86c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d109      	bne.n	800e888 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e874:	f7ff ff76 	bl	800e764 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d002      	beq.n	800e884 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e87e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e880:	f000 faa8 	bl	800edd4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e884:	2300      	movs	r3, #0
 800e886:	e0a7      	b.n	800e9d8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e888:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e88a:	3303      	adds	r3, #3
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	f023 0303 	bic.w	r3, r3, #3
 800e892:	b29b      	uxth	r3, r3
 800e894:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e898:	b29b      	uxth	r3, r3
 800e89a:	8b7a      	ldrh	r2, [r7, #26]
 800e89c:	4293      	cmp	r3, r2
 800e89e:	bf28      	it	cs
 800e8a0:	4613      	movcs	r3, r2
 800e8a2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e8a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8a6:	3310      	adds	r3, #16
 800e8a8:	693a      	ldr	r2, [r7, #16]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	3303      	adds	r3, #3
 800e8ae:	f023 0303 	bic.w	r3, r3, #3
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	89f9      	ldrh	r1, [r7, #14]
 800e8b6:	8b7a      	ldrh	r2, [r7, #26]
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	9301      	str	r3, [sp, #4]
 800e8bc:	887b      	ldrh	r3, [r7, #2]
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	4601      	mov	r1, r0
 800e8c4:	6938      	ldr	r0, [r7, #16]
 800e8c6:	f7ff ff77 	bl	800e7b8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	f003 0303 	and.w	r3, r3, #3
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d006      	beq.n	800e8e4 <pbuf_alloc+0xd8>
 800e8d6:	4b42      	ldr	r3, [pc, #264]	; (800e9e0 <pbuf_alloc+0x1d4>)
 800e8d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8dc:	4941      	ldr	r1, [pc, #260]	; (800e9e4 <pbuf_alloc+0x1d8>)
 800e8de:	4842      	ldr	r0, [pc, #264]	; (800e9e8 <pbuf_alloc+0x1dc>)
 800e8e0:	f008 ff36 	bl	8017750 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e8e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8e6:	3303      	adds	r3, #3
 800e8e8:	f023 0303 	bic.w	r3, r3, #3
 800e8ec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e8f0:	d106      	bne.n	800e900 <pbuf_alloc+0xf4>
 800e8f2:	4b3b      	ldr	r3, [pc, #236]	; (800e9e0 <pbuf_alloc+0x1d4>)
 800e8f4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e8f8:	493c      	ldr	r1, [pc, #240]	; (800e9ec <pbuf_alloc+0x1e0>)
 800e8fa:	483b      	ldr	r0, [pc, #236]	; (800e9e8 <pbuf_alloc+0x1dc>)
 800e8fc:	f008 ff28 	bl	8017750 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e902:	2b00      	cmp	r3, #0
 800e904:	d102      	bne.n	800e90c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	627b      	str	r3, [r7, #36]	; 0x24
 800e90a:	e002      	b.n	800e912 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	693a      	ldr	r2, [r7, #16]
 800e910:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e916:	8b7a      	ldrh	r2, [r7, #26]
 800e918:	89fb      	ldrh	r3, [r7, #14]
 800e91a:	1ad3      	subs	r3, r2, r3
 800e91c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e91e:	2300      	movs	r3, #0
 800e920:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e922:	8b7b      	ldrh	r3, [r7, #26]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d19e      	bne.n	800e866 <pbuf_alloc+0x5a>
      break;
 800e928:	e055      	b.n	800e9d6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e92a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e92c:	3303      	adds	r3, #3
 800e92e:	b29b      	uxth	r3, r3
 800e930:	f023 0303 	bic.w	r3, r3, #3
 800e934:	b29a      	uxth	r2, r3
 800e936:	88bb      	ldrh	r3, [r7, #4]
 800e938:	3303      	adds	r3, #3
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	f023 0303 	bic.w	r3, r3, #3
 800e940:	b29b      	uxth	r3, r3
 800e942:	4413      	add	r3, r2
 800e944:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e946:	8b3b      	ldrh	r3, [r7, #24]
 800e948:	3310      	adds	r3, #16
 800e94a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e94c:	8b3a      	ldrh	r2, [r7, #24]
 800e94e:	88bb      	ldrh	r3, [r7, #4]
 800e950:	3303      	adds	r3, #3
 800e952:	f023 0303 	bic.w	r3, r3, #3
 800e956:	429a      	cmp	r2, r3
 800e958:	d306      	bcc.n	800e968 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e95a:	8afa      	ldrh	r2, [r7, #22]
 800e95c:	88bb      	ldrh	r3, [r7, #4]
 800e95e:	3303      	adds	r3, #3
 800e960:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e964:	429a      	cmp	r2, r3
 800e966:	d201      	bcs.n	800e96c <pbuf_alloc+0x160>
        return NULL;
 800e968:	2300      	movs	r3, #0
 800e96a:	e035      	b.n	800e9d8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e96c:	8afb      	ldrh	r3, [r7, #22]
 800e96e:	4618      	mov	r0, r3
 800e970:	f7ff f972 	bl	800dc58 <mem_malloc>
 800e974:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d101      	bne.n	800e980 <pbuf_alloc+0x174>
        return NULL;
 800e97c:	2300      	movs	r3, #0
 800e97e:	e02b      	b.n	800e9d8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e980:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e982:	3310      	adds	r3, #16
 800e984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e986:	4413      	add	r3, r2
 800e988:	3303      	adds	r3, #3
 800e98a:	f023 0303 	bic.w	r3, r3, #3
 800e98e:	4618      	mov	r0, r3
 800e990:	88b9      	ldrh	r1, [r7, #4]
 800e992:	88ba      	ldrh	r2, [r7, #4]
 800e994:	2300      	movs	r3, #0
 800e996:	9301      	str	r3, [sp, #4]
 800e998:	887b      	ldrh	r3, [r7, #2]
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	460b      	mov	r3, r1
 800e99e:	4601      	mov	r1, r0
 800e9a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9a2:	f7ff ff09 	bl	800e7b8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	f003 0303 	and.w	r3, r3, #3
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d010      	beq.n	800e9d4 <pbuf_alloc+0x1c8>
 800e9b2:	4b0b      	ldr	r3, [pc, #44]	; (800e9e0 <pbuf_alloc+0x1d4>)
 800e9b4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e9b8:	490d      	ldr	r1, [pc, #52]	; (800e9f0 <pbuf_alloc+0x1e4>)
 800e9ba:	480b      	ldr	r0, [pc, #44]	; (800e9e8 <pbuf_alloc+0x1dc>)
 800e9bc:	f008 fec8 	bl	8017750 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e9c0:	e008      	b.n	800e9d4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e9c2:	4b07      	ldr	r3, [pc, #28]	; (800e9e0 <pbuf_alloc+0x1d4>)
 800e9c4:	f240 1227 	movw	r2, #295	; 0x127
 800e9c8:	490a      	ldr	r1, [pc, #40]	; (800e9f4 <pbuf_alloc+0x1e8>)
 800e9ca:	4807      	ldr	r0, [pc, #28]	; (800e9e8 <pbuf_alloc+0x1dc>)
 800e9cc:	f008 fec0 	bl	8017750 <iprintf>
      return NULL;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	e001      	b.n	800e9d8 <pbuf_alloc+0x1cc>
      break;
 800e9d4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3728      	adds	r7, #40	; 0x28
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}
 800e9e0:	08018dbc 	.word	0x08018dbc
 800e9e4:	08018dec 	.word	0x08018dec
 800e9e8:	08018e1c 	.word	0x08018e1c
 800e9ec:	08018e44 	.word	0x08018e44
 800e9f0:	08018e78 	.word	0x08018e78
 800e9f4:	08018ea4 	.word	0x08018ea4

0800e9f8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af02      	add	r7, sp, #8
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	460b      	mov	r3, r1
 800ea02:	807b      	strh	r3, [r7, #2]
 800ea04:	4613      	mov	r3, r2
 800ea06:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ea08:	883b      	ldrh	r3, [r7, #0]
 800ea0a:	2b41      	cmp	r3, #65	; 0x41
 800ea0c:	d009      	beq.n	800ea22 <pbuf_alloc_reference+0x2a>
 800ea0e:	883b      	ldrh	r3, [r7, #0]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d006      	beq.n	800ea22 <pbuf_alloc_reference+0x2a>
 800ea14:	4b0f      	ldr	r3, [pc, #60]	; (800ea54 <pbuf_alloc_reference+0x5c>)
 800ea16:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ea1a:	490f      	ldr	r1, [pc, #60]	; (800ea58 <pbuf_alloc_reference+0x60>)
 800ea1c:	480f      	ldr	r0, [pc, #60]	; (800ea5c <pbuf_alloc_reference+0x64>)
 800ea1e:	f008 fe97 	bl	8017750 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ea22:	200b      	movs	r0, #11
 800ea24:	f7ff fabc 	bl	800dfa0 <memp_malloc>
 800ea28:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d101      	bne.n	800ea34 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ea30:	2300      	movs	r3, #0
 800ea32:	e00b      	b.n	800ea4c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ea34:	8879      	ldrh	r1, [r7, #2]
 800ea36:	887a      	ldrh	r2, [r7, #2]
 800ea38:	2300      	movs	r3, #0
 800ea3a:	9301      	str	r3, [sp, #4]
 800ea3c:	883b      	ldrh	r3, [r7, #0]
 800ea3e:	9300      	str	r3, [sp, #0]
 800ea40:	460b      	mov	r3, r1
 800ea42:	6879      	ldr	r1, [r7, #4]
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f7ff feb7 	bl	800e7b8 <pbuf_init_alloced_pbuf>
  return p;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3710      	adds	r7, #16
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	08018dbc 	.word	0x08018dbc
 800ea58:	08018ec0 	.word	0x08018ec0
 800ea5c:	08018e1c 	.word	0x08018e1c

0800ea60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b088      	sub	sp, #32
 800ea64:	af02      	add	r7, sp, #8
 800ea66:	607b      	str	r3, [r7, #4]
 800ea68:	4603      	mov	r3, r0
 800ea6a:	73fb      	strb	r3, [r7, #15]
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	81bb      	strh	r3, [r7, #12]
 800ea70:	4613      	mov	r3, r2
 800ea72:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ea74:	7bfb      	ldrb	r3, [r7, #15]
 800ea76:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ea78:	8a7b      	ldrh	r3, [r7, #18]
 800ea7a:	3303      	adds	r3, #3
 800ea7c:	f023 0203 	bic.w	r2, r3, #3
 800ea80:	89bb      	ldrh	r3, [r7, #12]
 800ea82:	441a      	add	r2, r3
 800ea84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d901      	bls.n	800ea8e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	e018      	b.n	800eac0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ea8e:	6a3b      	ldr	r3, [r7, #32]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d007      	beq.n	800eaa4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ea94:	8a7b      	ldrh	r3, [r7, #18]
 800ea96:	3303      	adds	r3, #3
 800ea98:	f023 0303 	bic.w	r3, r3, #3
 800ea9c:	6a3a      	ldr	r2, [r7, #32]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	617b      	str	r3, [r7, #20]
 800eaa2:	e001      	b.n	800eaa8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	89b9      	ldrh	r1, [r7, #12]
 800eaac:	89ba      	ldrh	r2, [r7, #12]
 800eaae:	2302      	movs	r3, #2
 800eab0:	9301      	str	r3, [sp, #4]
 800eab2:	897b      	ldrh	r3, [r7, #10]
 800eab4:	9300      	str	r3, [sp, #0]
 800eab6:	460b      	mov	r3, r1
 800eab8:	6979      	ldr	r1, [r7, #20]
 800eaba:	f7ff fe7d 	bl	800e7b8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800eabe:	687b      	ldr	r3, [r7, #4]
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3718      	adds	r7, #24
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	460b      	mov	r3, r1
 800ead2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d106      	bne.n	800eae8 <pbuf_realloc+0x20>
 800eada:	4b3a      	ldr	r3, [pc, #232]	; (800ebc4 <pbuf_realloc+0xfc>)
 800eadc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800eae0:	4939      	ldr	r1, [pc, #228]	; (800ebc8 <pbuf_realloc+0x100>)
 800eae2:	483a      	ldr	r0, [pc, #232]	; (800ebcc <pbuf_realloc+0x104>)
 800eae4:	f008 fe34 	bl	8017750 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	891b      	ldrh	r3, [r3, #8]
 800eaec:	887a      	ldrh	r2, [r7, #2]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d263      	bcs.n	800ebba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	891a      	ldrh	r2, [r3, #8]
 800eaf6:	887b      	ldrh	r3, [r7, #2]
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800eafc:	887b      	ldrh	r3, [r7, #2]
 800eafe:	817b      	strh	r3, [r7, #10]
  q = p;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800eb04:	e018      	b.n	800eb38 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	895b      	ldrh	r3, [r3, #10]
 800eb0a:	897a      	ldrh	r2, [r7, #10]
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	891a      	ldrh	r2, [r3, #8]
 800eb14:	893b      	ldrh	r3, [r7, #8]
 800eb16:	1ad3      	subs	r3, r2, r3
 800eb18:	b29a      	uxth	r2, r3
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d106      	bne.n	800eb38 <pbuf_realloc+0x70>
 800eb2a:	4b26      	ldr	r3, [pc, #152]	; (800ebc4 <pbuf_realloc+0xfc>)
 800eb2c:	f240 12af 	movw	r2, #431	; 0x1af
 800eb30:	4927      	ldr	r1, [pc, #156]	; (800ebd0 <pbuf_realloc+0x108>)
 800eb32:	4826      	ldr	r0, [pc, #152]	; (800ebcc <pbuf_realloc+0x104>)
 800eb34:	f008 fe0c 	bl	8017750 <iprintf>
  while (rem_len > q->len) {
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	895b      	ldrh	r3, [r3, #10]
 800eb3c:	897a      	ldrh	r2, [r7, #10]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d8e1      	bhi.n	800eb06 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	7b1b      	ldrb	r3, [r3, #12]
 800eb46:	f003 030f 	and.w	r3, r3, #15
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d121      	bne.n	800eb92 <pbuf_realloc+0xca>
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	895b      	ldrh	r3, [r3, #10]
 800eb52:	897a      	ldrh	r2, [r7, #10]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d01c      	beq.n	800eb92 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	7b5b      	ldrb	r3, [r3, #13]
 800eb5c:	f003 0302 	and.w	r3, r3, #2
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d116      	bne.n	800eb92 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	685a      	ldr	r2, [r3, #4]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	1ad3      	subs	r3, r2, r3
 800eb6c:	b29a      	uxth	r2, r3
 800eb6e:	897b      	ldrh	r3, [r7, #10]
 800eb70:	4413      	add	r3, r2
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	4619      	mov	r1, r3
 800eb76:	68f8      	ldr	r0, [r7, #12]
 800eb78:	f7fe ff64 	bl	800da44 <mem_trim>
 800eb7c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d106      	bne.n	800eb92 <pbuf_realloc+0xca>
 800eb84:	4b0f      	ldr	r3, [pc, #60]	; (800ebc4 <pbuf_realloc+0xfc>)
 800eb86:	f240 12bd 	movw	r2, #445	; 0x1bd
 800eb8a:	4912      	ldr	r1, [pc, #72]	; (800ebd4 <pbuf_realloc+0x10c>)
 800eb8c:	480f      	ldr	r0, [pc, #60]	; (800ebcc <pbuf_realloc+0x104>)
 800eb8e:	f008 fddf 	bl	8017750 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	897a      	ldrh	r2, [r7, #10]
 800eb96:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	895a      	ldrh	r2, [r3, #10]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d004      	beq.n	800ebb2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f000 f911 	bl	800edd4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	601a      	str	r2, [r3, #0]
 800ebb8:	e000      	b.n	800ebbc <pbuf_realloc+0xf4>
    return;
 800ebba:	bf00      	nop

}
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	08018dbc 	.word	0x08018dbc
 800ebc8:	08018ed4 	.word	0x08018ed4
 800ebcc:	08018e1c 	.word	0x08018e1c
 800ebd0:	08018eec 	.word	0x08018eec
 800ebd4:	08018f04 	.word	0x08018f04

0800ebd8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b086      	sub	sp, #24
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	4613      	mov	r3, r2
 800ebe4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d106      	bne.n	800ebfa <pbuf_add_header_impl+0x22>
 800ebec:	4b2b      	ldr	r3, [pc, #172]	; (800ec9c <pbuf_add_header_impl+0xc4>)
 800ebee:	f240 12df 	movw	r2, #479	; 0x1df
 800ebf2:	492b      	ldr	r1, [pc, #172]	; (800eca0 <pbuf_add_header_impl+0xc8>)
 800ebf4:	482b      	ldr	r0, [pc, #172]	; (800eca4 <pbuf_add_header_impl+0xcc>)
 800ebf6:	f008 fdab 	bl	8017750 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d003      	beq.n	800ec08 <pbuf_add_header_impl+0x30>
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec06:	d301      	bcc.n	800ec0c <pbuf_add_header_impl+0x34>
    return 1;
 800ec08:	2301      	movs	r3, #1
 800ec0a:	e043      	b.n	800ec94 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d101      	bne.n	800ec16 <pbuf_add_header_impl+0x3e>
    return 0;
 800ec12:	2300      	movs	r3, #0
 800ec14:	e03e      	b.n	800ec94 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	891a      	ldrh	r2, [r3, #8]
 800ec1e:	8a7b      	ldrh	r3, [r7, #18]
 800ec20:	4413      	add	r3, r2
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	8a7a      	ldrh	r2, [r7, #18]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d901      	bls.n	800ec2e <pbuf_add_header_impl+0x56>
    return 1;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	e032      	b.n	800ec94 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	7b1b      	ldrb	r3, [r3, #12]
 800ec32:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ec34:	8a3b      	ldrh	r3, [r7, #16]
 800ec36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00c      	beq.n	800ec58 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	685a      	ldr	r2, [r3, #4]
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	425b      	negs	r3, r3
 800ec46:	4413      	add	r3, r2
 800ec48:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	3310      	adds	r3, #16
 800ec4e:	697a      	ldr	r2, [r7, #20]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d20d      	bcs.n	800ec70 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ec54:	2301      	movs	r3, #1
 800ec56:	e01d      	b.n	800ec94 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ec58:	79fb      	ldrb	r3, [r7, #7]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d006      	beq.n	800ec6c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	685a      	ldr	r2, [r3, #4]
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	425b      	negs	r3, r3
 800ec66:	4413      	add	r3, r2
 800ec68:	617b      	str	r3, [r7, #20]
 800ec6a:	e001      	b.n	800ec70 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	e011      	b.n	800ec94 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	697a      	ldr	r2, [r7, #20]
 800ec74:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	895a      	ldrh	r2, [r3, #10]
 800ec7a:	8a7b      	ldrh	r3, [r7, #18]
 800ec7c:	4413      	add	r3, r2
 800ec7e:	b29a      	uxth	r2, r3
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	891a      	ldrh	r2, [r3, #8]
 800ec88:	8a7b      	ldrh	r3, [r7, #18]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	b29a      	uxth	r2, r3
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	811a      	strh	r2, [r3, #8]


  return 0;
 800ec92:	2300      	movs	r3, #0
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3718      	adds	r7, #24
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	08018dbc 	.word	0x08018dbc
 800eca0:	08018f20 	.word	0x08018f20
 800eca4:	08018e1c 	.word	0x08018e1c

0800eca8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	6839      	ldr	r1, [r7, #0]
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f7ff ff8e 	bl	800ebd8 <pbuf_add_header_impl>
 800ecbc:	4603      	mov	r3, r0
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
	...

0800ecc8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d106      	bne.n	800ece6 <pbuf_remove_header+0x1e>
 800ecd8:	4b20      	ldr	r3, [pc, #128]	; (800ed5c <pbuf_remove_header+0x94>)
 800ecda:	f240 224b 	movw	r2, #587	; 0x24b
 800ecde:	4920      	ldr	r1, [pc, #128]	; (800ed60 <pbuf_remove_header+0x98>)
 800ece0:	4820      	ldr	r0, [pc, #128]	; (800ed64 <pbuf_remove_header+0x9c>)
 800ece2:	f008 fd35 	bl	8017750 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d003      	beq.n	800ecf4 <pbuf_remove_header+0x2c>
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecf2:	d301      	bcc.n	800ecf8 <pbuf_remove_header+0x30>
    return 1;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	e02c      	b.n	800ed52 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d101      	bne.n	800ed02 <pbuf_remove_header+0x3a>
    return 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	e027      	b.n	800ed52 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	895b      	ldrh	r3, [r3, #10]
 800ed0a:	89fa      	ldrh	r2, [r7, #14]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d908      	bls.n	800ed22 <pbuf_remove_header+0x5a>
 800ed10:	4b12      	ldr	r3, [pc, #72]	; (800ed5c <pbuf_remove_header+0x94>)
 800ed12:	f240 2255 	movw	r2, #597	; 0x255
 800ed16:	4914      	ldr	r1, [pc, #80]	; (800ed68 <pbuf_remove_header+0xa0>)
 800ed18:	4812      	ldr	r0, [pc, #72]	; (800ed64 <pbuf_remove_header+0x9c>)
 800ed1a:	f008 fd19 	bl	8017750 <iprintf>
 800ed1e:	2301      	movs	r3, #1
 800ed20:	e017      	b.n	800ed52 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	685a      	ldr	r2, [r3, #4]
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	441a      	add	r2, r3
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	895a      	ldrh	r2, [r3, #10]
 800ed38:	89fb      	ldrh	r3, [r7, #14]
 800ed3a:	1ad3      	subs	r3, r2, r3
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	891a      	ldrh	r2, [r3, #8]
 800ed46:	89fb      	ldrh	r3, [r7, #14]
 800ed48:	1ad3      	subs	r3, r2, r3
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	08018dbc 	.word	0x08018dbc
 800ed60:	08018f20 	.word	0x08018f20
 800ed64:	08018e1c 	.word	0x08018e1c
 800ed68:	08018f2c 	.word	0x08018f2c

0800ed6c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	460b      	mov	r3, r1
 800ed76:	807b      	strh	r3, [r7, #2]
 800ed78:	4613      	mov	r3, r2
 800ed7a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ed7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	da08      	bge.n	800ed96 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ed84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ed88:	425b      	negs	r3, r3
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f7ff ff9b 	bl	800ecc8 <pbuf_remove_header>
 800ed92:	4603      	mov	r3, r0
 800ed94:	e007      	b.n	800eda6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ed96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ed9a:	787a      	ldrb	r2, [r7, #1]
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f7ff ff1a 	bl	800ebd8 <pbuf_add_header_impl>
 800eda4:	4603      	mov	r3, r0
  }
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3708      	adds	r7, #8
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b082      	sub	sp, #8
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	460b      	mov	r3, r1
 800edb8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800edba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800edbe:	2201      	movs	r2, #1
 800edc0:	4619      	mov	r1, r3
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f7ff ffd2 	bl	800ed6c <pbuf_header_impl>
 800edc8:	4603      	mov	r3, r0
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3708      	adds	r7, #8
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
	...

0800edd4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b088      	sub	sp, #32
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d10b      	bne.n	800edfa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d106      	bne.n	800edf6 <pbuf_free+0x22>
 800ede8:	4b3b      	ldr	r3, [pc, #236]	; (800eed8 <pbuf_free+0x104>)
 800edea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800edee:	493b      	ldr	r1, [pc, #236]	; (800eedc <pbuf_free+0x108>)
 800edf0:	483b      	ldr	r0, [pc, #236]	; (800eee0 <pbuf_free+0x10c>)
 800edf2:	f008 fcad 	bl	8017750 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800edf6:	2300      	movs	r3, #0
 800edf8:	e069      	b.n	800eece <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800edfa:	2300      	movs	r3, #0
 800edfc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800edfe:	e062      	b.n	800eec6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ee00:	f008 faec 	bl	80173dc <sys_arch_protect>
 800ee04:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	7b9b      	ldrb	r3, [r3, #14]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d106      	bne.n	800ee1c <pbuf_free+0x48>
 800ee0e:	4b32      	ldr	r3, [pc, #200]	; (800eed8 <pbuf_free+0x104>)
 800ee10:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ee14:	4933      	ldr	r1, [pc, #204]	; (800eee4 <pbuf_free+0x110>)
 800ee16:	4832      	ldr	r0, [pc, #200]	; (800eee0 <pbuf_free+0x10c>)
 800ee18:	f008 fc9a 	bl	8017750 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	7b9b      	ldrb	r3, [r3, #14]
 800ee20:	3b01      	subs	r3, #1
 800ee22:	b2da      	uxtb	r2, r3
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	739a      	strb	r2, [r3, #14]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	7b9b      	ldrb	r3, [r3, #14]
 800ee2c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ee2e:	69b8      	ldr	r0, [r7, #24]
 800ee30:	f008 fae2 	bl	80173f8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ee34:	7dfb      	ldrb	r3, [r7, #23]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d143      	bne.n	800eec2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	7b1b      	ldrb	r3, [r3, #12]
 800ee44:	f003 030f 	and.w	r3, r3, #15
 800ee48:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	7b5b      	ldrb	r3, [r3, #13]
 800ee4e:	f003 0302 	and.w	r3, r3, #2
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d011      	beq.n	800ee7a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d106      	bne.n	800ee70 <pbuf_free+0x9c>
 800ee62:	4b1d      	ldr	r3, [pc, #116]	; (800eed8 <pbuf_free+0x104>)
 800ee64:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ee68:	491f      	ldr	r1, [pc, #124]	; (800eee8 <pbuf_free+0x114>)
 800ee6a:	481d      	ldr	r0, [pc, #116]	; (800eee0 <pbuf_free+0x10c>)
 800ee6c:	f008 fc70 	bl	8017750 <iprintf>
        pc->custom_free_function(p);
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	691b      	ldr	r3, [r3, #16]
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	4798      	blx	r3
 800ee78:	e01d      	b.n	800eeb6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ee7a:	7bfb      	ldrb	r3, [r7, #15]
 800ee7c:	2b02      	cmp	r3, #2
 800ee7e:	d104      	bne.n	800ee8a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ee80:	6879      	ldr	r1, [r7, #4]
 800ee82:	200c      	movs	r0, #12
 800ee84:	f7ff f902 	bl	800e08c <memp_free>
 800ee88:	e015      	b.n	800eeb6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ee8a:	7bfb      	ldrb	r3, [r7, #15]
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d104      	bne.n	800ee9a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ee90:	6879      	ldr	r1, [r7, #4]
 800ee92:	200b      	movs	r0, #11
 800ee94:	f7ff f8fa 	bl	800e08c <memp_free>
 800ee98:	e00d      	b.n	800eeb6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ee9a:	7bfb      	ldrb	r3, [r7, #15]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d103      	bne.n	800eea8 <pbuf_free+0xd4>
          mem_free(p);
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f7fe fd3f 	bl	800d924 <mem_free>
 800eea6:	e006      	b.n	800eeb6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800eea8:	4b0b      	ldr	r3, [pc, #44]	; (800eed8 <pbuf_free+0x104>)
 800eeaa:	f240 320f 	movw	r2, #783	; 0x30f
 800eeae:	490f      	ldr	r1, [pc, #60]	; (800eeec <pbuf_free+0x118>)
 800eeb0:	480b      	ldr	r0, [pc, #44]	; (800eee0 <pbuf_free+0x10c>)
 800eeb2:	f008 fc4d 	bl	8017750 <iprintf>
        }
      }
      count++;
 800eeb6:	7ffb      	ldrb	r3, [r7, #31]
 800eeb8:	3301      	adds	r3, #1
 800eeba:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	607b      	str	r3, [r7, #4]
 800eec0:	e001      	b.n	800eec6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800eec2:	2300      	movs	r3, #0
 800eec4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d199      	bne.n	800ee00 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800eecc:	7ffb      	ldrb	r3, [r7, #31]
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3720      	adds	r7, #32
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	08018dbc 	.word	0x08018dbc
 800eedc:	08018f20 	.word	0x08018f20
 800eee0:	08018e1c 	.word	0x08018e1c
 800eee4:	08018f4c 	.word	0x08018f4c
 800eee8:	08018f64 	.word	0x08018f64
 800eeec:	08018f88 	.word	0x08018f88

0800eef0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b085      	sub	sp, #20
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800eef8:	2300      	movs	r3, #0
 800eefa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800eefc:	e005      	b.n	800ef0a <pbuf_clen+0x1a>
    ++len;
 800eefe:	89fb      	ldrh	r3, [r7, #14]
 800ef00:	3301      	adds	r3, #1
 800ef02:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d1f6      	bne.n	800eefe <pbuf_clen+0xe>
  }
  return len;
 800ef10:	89fb      	ldrh	r3, [r7, #14]
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3714      	adds	r7, #20
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr
	...

0800ef20 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d016      	beq.n	800ef5c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ef2e:	f008 fa55 	bl	80173dc <sys_arch_protect>
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	7b9b      	ldrb	r3, [r3, #14]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	b2da      	uxtb	r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	739a      	strb	r2, [r3, #14]
 800ef40:	68f8      	ldr	r0, [r7, #12]
 800ef42:	f008 fa59 	bl	80173f8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	7b9b      	ldrb	r3, [r3, #14]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d106      	bne.n	800ef5c <pbuf_ref+0x3c>
 800ef4e:	4b05      	ldr	r3, [pc, #20]	; (800ef64 <pbuf_ref+0x44>)
 800ef50:	f240 3242 	movw	r2, #834	; 0x342
 800ef54:	4904      	ldr	r1, [pc, #16]	; (800ef68 <pbuf_ref+0x48>)
 800ef56:	4805      	ldr	r0, [pc, #20]	; (800ef6c <pbuf_ref+0x4c>)
 800ef58:	f008 fbfa 	bl	8017750 <iprintf>
  }
}
 800ef5c:	bf00      	nop
 800ef5e:	3710      	adds	r7, #16
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	08018dbc 	.word	0x08018dbc
 800ef68:	08018f9c 	.word	0x08018f9c
 800ef6c:	08018e1c 	.word	0x08018e1c

0800ef70 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d002      	beq.n	800ef86 <pbuf_cat+0x16>
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d107      	bne.n	800ef96 <pbuf_cat+0x26>
 800ef86:	4b20      	ldr	r3, [pc, #128]	; (800f008 <pbuf_cat+0x98>)
 800ef88:	f240 3259 	movw	r2, #857	; 0x359
 800ef8c:	491f      	ldr	r1, [pc, #124]	; (800f00c <pbuf_cat+0x9c>)
 800ef8e:	4820      	ldr	r0, [pc, #128]	; (800f010 <pbuf_cat+0xa0>)
 800ef90:	f008 fbde 	bl	8017750 <iprintf>
 800ef94:	e034      	b.n	800f000 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	60fb      	str	r3, [r7, #12]
 800ef9a:	e00a      	b.n	800efb2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	891a      	ldrh	r2, [r3, #8]
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	891b      	ldrh	r3, [r3, #8]
 800efa4:	4413      	add	r3, r2
 800efa6:	b29a      	uxth	r2, r3
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	60fb      	str	r3, [r7, #12]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1f0      	bne.n	800ef9c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	891a      	ldrh	r2, [r3, #8]
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	895b      	ldrh	r3, [r3, #10]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d006      	beq.n	800efd4 <pbuf_cat+0x64>
 800efc6:	4b10      	ldr	r3, [pc, #64]	; (800f008 <pbuf_cat+0x98>)
 800efc8:	f240 3262 	movw	r2, #866	; 0x362
 800efcc:	4911      	ldr	r1, [pc, #68]	; (800f014 <pbuf_cat+0xa4>)
 800efce:	4810      	ldr	r0, [pc, #64]	; (800f010 <pbuf_cat+0xa0>)
 800efd0:	f008 fbbe 	bl	8017750 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d006      	beq.n	800efea <pbuf_cat+0x7a>
 800efdc:	4b0a      	ldr	r3, [pc, #40]	; (800f008 <pbuf_cat+0x98>)
 800efde:	f240 3263 	movw	r2, #867	; 0x363
 800efe2:	490d      	ldr	r1, [pc, #52]	; (800f018 <pbuf_cat+0xa8>)
 800efe4:	480a      	ldr	r0, [pc, #40]	; (800f010 <pbuf_cat+0xa0>)
 800efe6:	f008 fbb3 	bl	8017750 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	891a      	ldrh	r2, [r3, #8]
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	891b      	ldrh	r3, [r3, #8]
 800eff2:	4413      	add	r3, r2
 800eff4:	b29a      	uxth	r2, r3
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	683a      	ldr	r2, [r7, #0]
 800effe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	08018dbc 	.word	0x08018dbc
 800f00c:	08018fb0 	.word	0x08018fb0
 800f010:	08018e1c 	.word	0x08018e1c
 800f014:	08018fe8 	.word	0x08018fe8
 800f018:	08019018 	.word	0x08019018

0800f01c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b086      	sub	sp, #24
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f026:	2300      	movs	r3, #0
 800f028:	617b      	str	r3, [r7, #20]
 800f02a:	2300      	movs	r3, #0
 800f02c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d008      	beq.n	800f046 <pbuf_copy+0x2a>
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d005      	beq.n	800f046 <pbuf_copy+0x2a>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	891a      	ldrh	r2, [r3, #8]
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	891b      	ldrh	r3, [r3, #8]
 800f042:	429a      	cmp	r2, r3
 800f044:	d209      	bcs.n	800f05a <pbuf_copy+0x3e>
 800f046:	4b57      	ldr	r3, [pc, #348]	; (800f1a4 <pbuf_copy+0x188>)
 800f048:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f04c:	4956      	ldr	r1, [pc, #344]	; (800f1a8 <pbuf_copy+0x18c>)
 800f04e:	4857      	ldr	r0, [pc, #348]	; (800f1ac <pbuf_copy+0x190>)
 800f050:	f008 fb7e 	bl	8017750 <iprintf>
 800f054:	f06f 030f 	mvn.w	r3, #15
 800f058:	e09f      	b.n	800f19a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	895b      	ldrh	r3, [r3, #10]
 800f05e:	461a      	mov	r2, r3
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	1ad2      	subs	r2, r2, r3
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	895b      	ldrh	r3, [r3, #10]
 800f068:	4619      	mov	r1, r3
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	1acb      	subs	r3, r1, r3
 800f06e:	429a      	cmp	r2, r3
 800f070:	d306      	bcc.n	800f080 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	895b      	ldrh	r3, [r3, #10]
 800f076:	461a      	mov	r2, r3
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	1ad3      	subs	r3, r2, r3
 800f07c:	60fb      	str	r3, [r7, #12]
 800f07e:	e005      	b.n	800f08c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	895b      	ldrh	r3, [r3, #10]
 800f084:	461a      	mov	r2, r3
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	1ad3      	subs	r3, r2, r3
 800f08a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685a      	ldr	r2, [r3, #4]
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	18d0      	adds	r0, r2, r3
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	685a      	ldr	r2, [r3, #4]
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	4413      	add	r3, r2
 800f09c:	68fa      	ldr	r2, [r7, #12]
 800f09e:	4619      	mov	r1, r3
 800f0a0:	f008 fae5 	bl	801766e <memcpy>
    offset_to += len;
 800f0a4:	697a      	ldr	r2, [r7, #20]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f0ac:	693a      	ldr	r2, [r7, #16]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	895b      	ldrh	r3, [r3, #10]
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d906      	bls.n	800f0ce <pbuf_copy+0xb2>
 800f0c0:	4b38      	ldr	r3, [pc, #224]	; (800f1a4 <pbuf_copy+0x188>)
 800f0c2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f0c6:	493a      	ldr	r1, [pc, #232]	; (800f1b0 <pbuf_copy+0x194>)
 800f0c8:	4838      	ldr	r0, [pc, #224]	; (800f1ac <pbuf_copy+0x190>)
 800f0ca:	f008 fb41 	bl	8017750 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	895b      	ldrh	r3, [r3, #10]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d906      	bls.n	800f0e8 <pbuf_copy+0xcc>
 800f0da:	4b32      	ldr	r3, [pc, #200]	; (800f1a4 <pbuf_copy+0x188>)
 800f0dc:	f240 32da 	movw	r2, #986	; 0x3da
 800f0e0:	4934      	ldr	r1, [pc, #208]	; (800f1b4 <pbuf_copy+0x198>)
 800f0e2:	4832      	ldr	r0, [pc, #200]	; (800f1ac <pbuf_copy+0x190>)
 800f0e4:	f008 fb34 	bl	8017750 <iprintf>
    if (offset_from >= p_from->len) {
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	895b      	ldrh	r3, [r3, #10]
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d304      	bcc.n	800f0fe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	895b      	ldrh	r3, [r3, #10]
 800f102:	461a      	mov	r2, r3
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	4293      	cmp	r3, r2
 800f108:	d114      	bne.n	800f134 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f10a:	2300      	movs	r3, #0
 800f10c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d10c      	bne.n	800f134 <pbuf_copy+0x118>
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d009      	beq.n	800f134 <pbuf_copy+0x118>
 800f120:	4b20      	ldr	r3, [pc, #128]	; (800f1a4 <pbuf_copy+0x188>)
 800f122:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f126:	4924      	ldr	r1, [pc, #144]	; (800f1b8 <pbuf_copy+0x19c>)
 800f128:	4820      	ldr	r0, [pc, #128]	; (800f1ac <pbuf_copy+0x190>)
 800f12a:	f008 fb11 	bl	8017750 <iprintf>
 800f12e:	f06f 030f 	mvn.w	r3, #15
 800f132:	e032      	b.n	800f19a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d013      	beq.n	800f162 <pbuf_copy+0x146>
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	895a      	ldrh	r2, [r3, #10]
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	891b      	ldrh	r3, [r3, #8]
 800f142:	429a      	cmp	r2, r3
 800f144:	d10d      	bne.n	800f162 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d009      	beq.n	800f162 <pbuf_copy+0x146>
 800f14e:	4b15      	ldr	r3, [pc, #84]	; (800f1a4 <pbuf_copy+0x188>)
 800f150:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f154:	4919      	ldr	r1, [pc, #100]	; (800f1bc <pbuf_copy+0x1a0>)
 800f156:	4815      	ldr	r0, [pc, #84]	; (800f1ac <pbuf_copy+0x190>)
 800f158:	f008 fafa 	bl	8017750 <iprintf>
 800f15c:	f06f 0305 	mvn.w	r3, #5
 800f160:	e01b      	b.n	800f19a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d013      	beq.n	800f190 <pbuf_copy+0x174>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	895a      	ldrh	r2, [r3, #10]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	891b      	ldrh	r3, [r3, #8]
 800f170:	429a      	cmp	r2, r3
 800f172:	d10d      	bne.n	800f190 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d009      	beq.n	800f190 <pbuf_copy+0x174>
 800f17c:	4b09      	ldr	r3, [pc, #36]	; (800f1a4 <pbuf_copy+0x188>)
 800f17e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f182:	490e      	ldr	r1, [pc, #56]	; (800f1bc <pbuf_copy+0x1a0>)
 800f184:	4809      	ldr	r0, [pc, #36]	; (800f1ac <pbuf_copy+0x190>)
 800f186:	f008 fae3 	bl	8017750 <iprintf>
 800f18a:	f06f 0305 	mvn.w	r3, #5
 800f18e:	e004      	b.n	800f19a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	f47f af61 	bne.w	800f05a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3718      	adds	r7, #24
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	08018dbc 	.word	0x08018dbc
 800f1a8:	08019064 	.word	0x08019064
 800f1ac:	08018e1c 	.word	0x08018e1c
 800f1b0:	08019094 	.word	0x08019094
 800f1b4:	080190ac 	.word	0x080190ac
 800f1b8:	080190c8 	.word	0x080190c8
 800f1bc:	080190d8 	.word	0x080190d8

0800f1c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b088      	sub	sp, #32
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	60b9      	str	r1, [r7, #8]
 800f1ca:	4611      	mov	r1, r2
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	80fb      	strh	r3, [r7, #6]
 800f1d2:	4613      	mov	r3, r2
 800f1d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d108      	bne.n	800f1f6 <pbuf_copy_partial+0x36>
 800f1e4:	4b2b      	ldr	r3, [pc, #172]	; (800f294 <pbuf_copy_partial+0xd4>)
 800f1e6:	f240 420a 	movw	r2, #1034	; 0x40a
 800f1ea:	492b      	ldr	r1, [pc, #172]	; (800f298 <pbuf_copy_partial+0xd8>)
 800f1ec:	482b      	ldr	r0, [pc, #172]	; (800f29c <pbuf_copy_partial+0xdc>)
 800f1ee:	f008 faaf 	bl	8017750 <iprintf>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	e04a      	b.n	800f28c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d108      	bne.n	800f20e <pbuf_copy_partial+0x4e>
 800f1fc:	4b25      	ldr	r3, [pc, #148]	; (800f294 <pbuf_copy_partial+0xd4>)
 800f1fe:	f240 420b 	movw	r2, #1035	; 0x40b
 800f202:	4927      	ldr	r1, [pc, #156]	; (800f2a0 <pbuf_copy_partial+0xe0>)
 800f204:	4825      	ldr	r0, [pc, #148]	; (800f29c <pbuf_copy_partial+0xdc>)
 800f206:	f008 faa3 	bl	8017750 <iprintf>
 800f20a:	2300      	movs	r3, #0
 800f20c:	e03e      	b.n	800f28c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	61fb      	str	r3, [r7, #28]
 800f212:	e034      	b.n	800f27e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f214:	88bb      	ldrh	r3, [r7, #4]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00a      	beq.n	800f230 <pbuf_copy_partial+0x70>
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	895b      	ldrh	r3, [r3, #10]
 800f21e:	88ba      	ldrh	r2, [r7, #4]
 800f220:	429a      	cmp	r2, r3
 800f222:	d305      	bcc.n	800f230 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	895b      	ldrh	r3, [r3, #10]
 800f228:	88ba      	ldrh	r2, [r7, #4]
 800f22a:	1ad3      	subs	r3, r2, r3
 800f22c:	80bb      	strh	r3, [r7, #4]
 800f22e:	e023      	b.n	800f278 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	895a      	ldrh	r2, [r3, #10]
 800f234:	88bb      	ldrh	r3, [r7, #4]
 800f236:	1ad3      	subs	r3, r2, r3
 800f238:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f23a:	8b3a      	ldrh	r2, [r7, #24]
 800f23c:	88fb      	ldrh	r3, [r7, #6]
 800f23e:	429a      	cmp	r2, r3
 800f240:	d901      	bls.n	800f246 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f242:	88fb      	ldrh	r3, [r7, #6]
 800f244:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f246:	8b7b      	ldrh	r3, [r7, #26]
 800f248:	68ba      	ldr	r2, [r7, #8]
 800f24a:	18d0      	adds	r0, r2, r3
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	685a      	ldr	r2, [r3, #4]
 800f250:	88bb      	ldrh	r3, [r7, #4]
 800f252:	4413      	add	r3, r2
 800f254:	8b3a      	ldrh	r2, [r7, #24]
 800f256:	4619      	mov	r1, r3
 800f258:	f008 fa09 	bl	801766e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f25c:	8afa      	ldrh	r2, [r7, #22]
 800f25e:	8b3b      	ldrh	r3, [r7, #24]
 800f260:	4413      	add	r3, r2
 800f262:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f264:	8b7a      	ldrh	r2, [r7, #26]
 800f266:	8b3b      	ldrh	r3, [r7, #24]
 800f268:	4413      	add	r3, r2
 800f26a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f26c:	88fa      	ldrh	r2, [r7, #6]
 800f26e:	8b3b      	ldrh	r3, [r7, #24]
 800f270:	1ad3      	subs	r3, r2, r3
 800f272:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f274:	2300      	movs	r3, #0
 800f276:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	61fb      	str	r3, [r7, #28]
 800f27e:	88fb      	ldrh	r3, [r7, #6]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d002      	beq.n	800f28a <pbuf_copy_partial+0xca>
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d1c4      	bne.n	800f214 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f28a:	8afb      	ldrh	r3, [r7, #22]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3720      	adds	r7, #32
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	08018dbc 	.word	0x08018dbc
 800f298:	08019104 	.word	0x08019104
 800f29c:	08018e1c 	.word	0x08018e1c
 800f2a0:	08019124 	.word	0x08019124

0800f2a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	603a      	str	r2, [r7, #0]
 800f2ae:	71fb      	strb	r3, [r7, #7]
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	8919      	ldrh	r1, [r3, #8]
 800f2b8:	88ba      	ldrh	r2, [r7, #4]
 800f2ba:	79fb      	ldrb	r3, [r7, #7]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7ff faa5 	bl	800e80c <pbuf_alloc>
 800f2c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d101      	bne.n	800f2ce <pbuf_clone+0x2a>
    return NULL;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	e011      	b.n	800f2f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	68f8      	ldr	r0, [r7, #12]
 800f2d2:	f7ff fea3 	bl	800f01c <pbuf_copy>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f2da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d006      	beq.n	800f2f0 <pbuf_clone+0x4c>
 800f2e2:	4b06      	ldr	r3, [pc, #24]	; (800f2fc <pbuf_clone+0x58>)
 800f2e4:	f240 5224 	movw	r2, #1316	; 0x524
 800f2e8:	4905      	ldr	r1, [pc, #20]	; (800f300 <pbuf_clone+0x5c>)
 800f2ea:	4806      	ldr	r0, [pc, #24]	; (800f304 <pbuf_clone+0x60>)
 800f2ec:	f008 fa30 	bl	8017750 <iprintf>
  return q;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3710      	adds	r7, #16
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	08018dbc 	.word	0x08018dbc
 800f300:	08019230 	.word	0x08019230
 800f304:	08018e1c 	.word	0x08018e1c

0800f308 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f30c:	f008 fa38 	bl	8017780 <rand>
 800f310:	4603      	mov	r3, r0
 800f312:	b29b      	uxth	r3, r3
 800f314:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f318:	b29b      	uxth	r3, r3
 800f31a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f31e:	b29a      	uxth	r2, r3
 800f320:	4b01      	ldr	r3, [pc, #4]	; (800f328 <tcp_init+0x20>)
 800f322:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f324:	bf00      	nop
 800f326:	bd80      	pop	{r7, pc}
 800f328:	24000038 	.word	0x24000038

0800f32c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	7d1b      	ldrb	r3, [r3, #20]
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d105      	bne.n	800f348 <tcp_free+0x1c>
 800f33c:	4b06      	ldr	r3, [pc, #24]	; (800f358 <tcp_free+0x2c>)
 800f33e:	22d4      	movs	r2, #212	; 0xd4
 800f340:	4906      	ldr	r1, [pc, #24]	; (800f35c <tcp_free+0x30>)
 800f342:	4807      	ldr	r0, [pc, #28]	; (800f360 <tcp_free+0x34>)
 800f344:	f008 fa04 	bl	8017750 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f348:	6879      	ldr	r1, [r7, #4]
 800f34a:	2001      	movs	r0, #1
 800f34c:	f7fe fe9e 	bl	800e08c <memp_free>
}
 800f350:	bf00      	nop
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}
 800f358:	080192bc 	.word	0x080192bc
 800f35c:	080192ec 	.word	0x080192ec
 800f360:	08019300 	.word	0x08019300

0800f364 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	7d1b      	ldrb	r3, [r3, #20]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d105      	bne.n	800f380 <tcp_free_listen+0x1c>
 800f374:	4b06      	ldr	r3, [pc, #24]	; (800f390 <tcp_free_listen+0x2c>)
 800f376:	22df      	movs	r2, #223	; 0xdf
 800f378:	4906      	ldr	r1, [pc, #24]	; (800f394 <tcp_free_listen+0x30>)
 800f37a:	4807      	ldr	r0, [pc, #28]	; (800f398 <tcp_free_listen+0x34>)
 800f37c:	f008 f9e8 	bl	8017750 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f380:	6879      	ldr	r1, [r7, #4]
 800f382:	2002      	movs	r0, #2
 800f384:	f7fe fe82 	bl	800e08c <memp_free>
}
 800f388:	bf00      	nop
 800f38a:	3708      	adds	r7, #8
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	080192bc 	.word	0x080192bc
 800f394:	08019328 	.word	0x08019328
 800f398:	08019300 	.word	0x08019300

0800f39c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f3a0:	f000 fea2 	bl	80100e8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f3a4:	4b07      	ldr	r3, [pc, #28]	; (800f3c4 <tcp_tmr+0x28>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	b2da      	uxtb	r2, r3
 800f3ac:	4b05      	ldr	r3, [pc, #20]	; (800f3c4 <tcp_tmr+0x28>)
 800f3ae:	701a      	strb	r2, [r3, #0]
 800f3b0:	4b04      	ldr	r3, [pc, #16]	; (800f3c4 <tcp_tmr+0x28>)
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	f003 0301 	and.w	r3, r3, #1
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d001      	beq.n	800f3c0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f3bc:	f000 fb54 	bl	800fa68 <tcp_slowtmr>
  }
}
 800f3c0:	bf00      	nop
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	24004129 	.word	0x24004129

0800f3c8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d105      	bne.n	800f3e4 <tcp_remove_listener+0x1c>
 800f3d8:	4b0d      	ldr	r3, [pc, #52]	; (800f410 <tcp_remove_listener+0x48>)
 800f3da:	22ff      	movs	r2, #255	; 0xff
 800f3dc:	490d      	ldr	r1, [pc, #52]	; (800f414 <tcp_remove_listener+0x4c>)
 800f3de:	480e      	ldr	r0, [pc, #56]	; (800f418 <tcp_remove_listener+0x50>)
 800f3e0:	f008 f9b6 	bl	8017750 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	60fb      	str	r3, [r7, #12]
 800f3e8:	e00a      	b.n	800f400 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3ee:	683a      	ldr	r2, [r7, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d102      	bne.n	800f3fa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	68db      	ldr	r3, [r3, #12]
 800f3fe:	60fb      	str	r3, [r7, #12]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d1f1      	bne.n	800f3ea <tcp_remove_listener+0x22>
    }
  }
}
 800f406:	bf00      	nop
 800f408:	bf00      	nop
 800f40a:	3710      	adds	r7, #16
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	080192bc 	.word	0x080192bc
 800f414:	08019344 	.word	0x08019344
 800f418:	08019300 	.word	0x08019300

0800f41c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d106      	bne.n	800f438 <tcp_listen_closed+0x1c>
 800f42a:	4b14      	ldr	r3, [pc, #80]	; (800f47c <tcp_listen_closed+0x60>)
 800f42c:	f240 1211 	movw	r2, #273	; 0x111
 800f430:	4913      	ldr	r1, [pc, #76]	; (800f480 <tcp_listen_closed+0x64>)
 800f432:	4814      	ldr	r0, [pc, #80]	; (800f484 <tcp_listen_closed+0x68>)
 800f434:	f008 f98c 	bl	8017750 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	7d1b      	ldrb	r3, [r3, #20]
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d006      	beq.n	800f44e <tcp_listen_closed+0x32>
 800f440:	4b0e      	ldr	r3, [pc, #56]	; (800f47c <tcp_listen_closed+0x60>)
 800f442:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f446:	4910      	ldr	r1, [pc, #64]	; (800f488 <tcp_listen_closed+0x6c>)
 800f448:	480e      	ldr	r0, [pc, #56]	; (800f484 <tcp_listen_closed+0x68>)
 800f44a:	f008 f981 	bl	8017750 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f44e:	2301      	movs	r3, #1
 800f450:	60fb      	str	r3, [r7, #12]
 800f452:	e00b      	b.n	800f46c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f454:	4a0d      	ldr	r2, [pc, #52]	; (800f48c <tcp_listen_closed+0x70>)
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	6879      	ldr	r1, [r7, #4]
 800f460:	4618      	mov	r0, r3
 800f462:	f7ff ffb1 	bl	800f3c8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	3301      	adds	r3, #1
 800f46a:	60fb      	str	r3, [r7, #12]
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2b03      	cmp	r3, #3
 800f470:	d9f0      	bls.n	800f454 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f472:	bf00      	nop
 800f474:	bf00      	nop
 800f476:	3710      	adds	r7, #16
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	080192bc 	.word	0x080192bc
 800f480:	0801936c 	.word	0x0801936c
 800f484:	08019300 	.word	0x08019300
 800f488:	08019378 	.word	0x08019378
 800f48c:	0801c848 	.word	0x0801c848

0800f490 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f490:	b5b0      	push	{r4, r5, r7, lr}
 800f492:	b088      	sub	sp, #32
 800f494:	af04      	add	r7, sp, #16
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	460b      	mov	r3, r1
 800f49a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d106      	bne.n	800f4b0 <tcp_close_shutdown+0x20>
 800f4a2:	4b63      	ldr	r3, [pc, #396]	; (800f630 <tcp_close_shutdown+0x1a0>)
 800f4a4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f4a8:	4962      	ldr	r1, [pc, #392]	; (800f634 <tcp_close_shutdown+0x1a4>)
 800f4aa:	4863      	ldr	r0, [pc, #396]	; (800f638 <tcp_close_shutdown+0x1a8>)
 800f4ac:	f008 f950 	bl	8017750 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f4b0:	78fb      	ldrb	r3, [r7, #3]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d066      	beq.n	800f584 <tcp_close_shutdown+0xf4>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	7d1b      	ldrb	r3, [r3, #20]
 800f4ba:	2b04      	cmp	r3, #4
 800f4bc:	d003      	beq.n	800f4c6 <tcp_close_shutdown+0x36>
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	7d1b      	ldrb	r3, [r3, #20]
 800f4c2:	2b07      	cmp	r3, #7
 800f4c4:	d15e      	bne.n	800f584 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d104      	bne.n	800f4d8 <tcp_close_shutdown+0x48>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f4d6:	d055      	beq.n	800f584 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	8b5b      	ldrh	r3, [r3, #26]
 800f4dc:	f003 0310 	and.w	r3, r3, #16
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d106      	bne.n	800f4f2 <tcp_close_shutdown+0x62>
 800f4e4:	4b52      	ldr	r3, [pc, #328]	; (800f630 <tcp_close_shutdown+0x1a0>)
 800f4e6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f4ea:	4954      	ldr	r1, [pc, #336]	; (800f63c <tcp_close_shutdown+0x1ac>)
 800f4ec:	4852      	ldr	r0, [pc, #328]	; (800f638 <tcp_close_shutdown+0x1a8>)
 800f4ee:	f008 f92f 	bl	8017750 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f4fa:	687d      	ldr	r5, [r7, #4]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	3304      	adds	r3, #4
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	8ad2      	ldrh	r2, [r2, #22]
 800f504:	6879      	ldr	r1, [r7, #4]
 800f506:	8b09      	ldrh	r1, [r1, #24]
 800f508:	9102      	str	r1, [sp, #8]
 800f50a:	9201      	str	r2, [sp, #4]
 800f50c:	9300      	str	r3, [sp, #0]
 800f50e:	462b      	mov	r3, r5
 800f510:	4622      	mov	r2, r4
 800f512:	4601      	mov	r1, r0
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f004 fe8d 	bl	8014234 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f001 f8c6 	bl	80106ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f520:	4b47      	ldr	r3, [pc, #284]	; (800f640 <tcp_close_shutdown+0x1b0>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	429a      	cmp	r2, r3
 800f528:	d105      	bne.n	800f536 <tcp_close_shutdown+0xa6>
 800f52a:	4b45      	ldr	r3, [pc, #276]	; (800f640 <tcp_close_shutdown+0x1b0>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	4a43      	ldr	r2, [pc, #268]	; (800f640 <tcp_close_shutdown+0x1b0>)
 800f532:	6013      	str	r3, [r2, #0]
 800f534:	e013      	b.n	800f55e <tcp_close_shutdown+0xce>
 800f536:	4b42      	ldr	r3, [pc, #264]	; (800f640 <tcp_close_shutdown+0x1b0>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	60fb      	str	r3, [r7, #12]
 800f53c:	e00c      	b.n	800f558 <tcp_close_shutdown+0xc8>
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	429a      	cmp	r2, r3
 800f546:	d104      	bne.n	800f552 <tcp_close_shutdown+0xc2>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	68da      	ldr	r2, [r3, #12]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	60da      	str	r2, [r3, #12]
 800f550:	e005      	b.n	800f55e <tcp_close_shutdown+0xce>
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	60fb      	str	r3, [r7, #12]
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d1ef      	bne.n	800f53e <tcp_close_shutdown+0xae>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	60da      	str	r2, [r3, #12]
 800f564:	4b37      	ldr	r3, [pc, #220]	; (800f644 <tcp_close_shutdown+0x1b4>)
 800f566:	2201      	movs	r2, #1
 800f568:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f56a:	4b37      	ldr	r3, [pc, #220]	; (800f648 <tcp_close_shutdown+0x1b8>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	429a      	cmp	r2, r3
 800f572:	d102      	bne.n	800f57a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f574:	f003 fd5a 	bl	801302c <tcp_trigger_input_pcb_close>
 800f578:	e002      	b.n	800f580 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f7ff fed6 	bl	800f32c <tcp_free>
      }
      return ERR_OK;
 800f580:	2300      	movs	r3, #0
 800f582:	e050      	b.n	800f626 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	7d1b      	ldrb	r3, [r3, #20]
 800f588:	2b02      	cmp	r3, #2
 800f58a:	d03b      	beq.n	800f604 <tcp_close_shutdown+0x174>
 800f58c:	2b02      	cmp	r3, #2
 800f58e:	dc44      	bgt.n	800f61a <tcp_close_shutdown+0x18a>
 800f590:	2b00      	cmp	r3, #0
 800f592:	d002      	beq.n	800f59a <tcp_close_shutdown+0x10a>
 800f594:	2b01      	cmp	r3, #1
 800f596:	d02a      	beq.n	800f5ee <tcp_close_shutdown+0x15e>
 800f598:	e03f      	b.n	800f61a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	8adb      	ldrh	r3, [r3, #22]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d021      	beq.n	800f5e6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f5a2:	4b2a      	ldr	r3, [pc, #168]	; (800f64c <tcp_close_shutdown+0x1bc>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d105      	bne.n	800f5b8 <tcp_close_shutdown+0x128>
 800f5ac:	4b27      	ldr	r3, [pc, #156]	; (800f64c <tcp_close_shutdown+0x1bc>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	68db      	ldr	r3, [r3, #12]
 800f5b2:	4a26      	ldr	r2, [pc, #152]	; (800f64c <tcp_close_shutdown+0x1bc>)
 800f5b4:	6013      	str	r3, [r2, #0]
 800f5b6:	e013      	b.n	800f5e0 <tcp_close_shutdown+0x150>
 800f5b8:	4b24      	ldr	r3, [pc, #144]	; (800f64c <tcp_close_shutdown+0x1bc>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	60bb      	str	r3, [r7, #8]
 800f5be:	e00c      	b.n	800f5da <tcp_close_shutdown+0x14a>
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d104      	bne.n	800f5d4 <tcp_close_shutdown+0x144>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	68da      	ldr	r2, [r3, #12]
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	60da      	str	r2, [r3, #12]
 800f5d2:	e005      	b.n	800f5e0 <tcp_close_shutdown+0x150>
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	60bb      	str	r3, [r7, #8]
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d1ef      	bne.n	800f5c0 <tcp_close_shutdown+0x130>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f7ff fea0 	bl	800f32c <tcp_free>
      break;
 800f5ec:	e01a      	b.n	800f624 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7ff ff14 	bl	800f41c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f5f4:	6879      	ldr	r1, [r7, #4]
 800f5f6:	4816      	ldr	r0, [pc, #88]	; (800f650 <tcp_close_shutdown+0x1c0>)
 800f5f8:	f001 f8a8 	bl	801074c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7ff feb1 	bl	800f364 <tcp_free_listen>
      break;
 800f602:	e00f      	b.n	800f624 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f604:	6879      	ldr	r1, [r7, #4]
 800f606:	480e      	ldr	r0, [pc, #56]	; (800f640 <tcp_close_shutdown+0x1b0>)
 800f608:	f001 f8a0 	bl	801074c <tcp_pcb_remove>
 800f60c:	4b0d      	ldr	r3, [pc, #52]	; (800f644 <tcp_close_shutdown+0x1b4>)
 800f60e:	2201      	movs	r2, #1
 800f610:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f7ff fe8a 	bl	800f32c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f618:	e004      	b.n	800f624 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 f81a 	bl	800f654 <tcp_close_shutdown_fin>
 800f620:	4603      	mov	r3, r0
 800f622:	e000      	b.n	800f626 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f624:	2300      	movs	r3, #0
}
 800f626:	4618      	mov	r0, r3
 800f628:	3710      	adds	r7, #16
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bdb0      	pop	{r4, r5, r7, pc}
 800f62e:	bf00      	nop
 800f630:	080192bc 	.word	0x080192bc
 800f634:	08019390 	.word	0x08019390
 800f638:	08019300 	.word	0x08019300
 800f63c:	080193b0 	.word	0x080193b0
 800f640:	24007854 	.word	0x24007854
 800f644:	24007850 	.word	0x24007850
 800f648:	24007868 	.word	0x24007868
 800f64c:	24007860 	.word	0x24007860
 800f650:	2400785c 	.word	0x2400785c

0800f654 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d106      	bne.n	800f670 <tcp_close_shutdown_fin+0x1c>
 800f662:	4b2e      	ldr	r3, [pc, #184]	; (800f71c <tcp_close_shutdown_fin+0xc8>)
 800f664:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f668:	492d      	ldr	r1, [pc, #180]	; (800f720 <tcp_close_shutdown_fin+0xcc>)
 800f66a:	482e      	ldr	r0, [pc, #184]	; (800f724 <tcp_close_shutdown_fin+0xd0>)
 800f66c:	f008 f870 	bl	8017750 <iprintf>

  switch (pcb->state) {
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	7d1b      	ldrb	r3, [r3, #20]
 800f674:	2b07      	cmp	r3, #7
 800f676:	d020      	beq.n	800f6ba <tcp_close_shutdown_fin+0x66>
 800f678:	2b07      	cmp	r3, #7
 800f67a:	dc2b      	bgt.n	800f6d4 <tcp_close_shutdown_fin+0x80>
 800f67c:	2b03      	cmp	r3, #3
 800f67e:	d002      	beq.n	800f686 <tcp_close_shutdown_fin+0x32>
 800f680:	2b04      	cmp	r3, #4
 800f682:	d00d      	beq.n	800f6a0 <tcp_close_shutdown_fin+0x4c>
 800f684:	e026      	b.n	800f6d4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f003 fee2 	bl	8013450 <tcp_send_fin>
 800f68c:	4603      	mov	r3, r0
 800f68e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d11f      	bne.n	800f6d8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2205      	movs	r2, #5
 800f69c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f69e:	e01b      	b.n	800f6d8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f003 fed5 	bl	8013450 <tcp_send_fin>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f6aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d114      	bne.n	800f6dc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2205      	movs	r2, #5
 800f6b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f6b8:	e010      	b.n	800f6dc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f003 fec8 	bl	8013450 <tcp_send_fin>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f6c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d109      	bne.n	800f6e0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2209      	movs	r2, #9
 800f6d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f6d2:	e005      	b.n	800f6e0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	e01c      	b.n	800f712 <tcp_close_shutdown_fin+0xbe>
      break;
 800f6d8:	bf00      	nop
 800f6da:	e002      	b.n	800f6e2 <tcp_close_shutdown_fin+0x8e>
      break;
 800f6dc:	bf00      	nop
 800f6de:	e000      	b.n	800f6e2 <tcp_close_shutdown_fin+0x8e>
      break;
 800f6e0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f6e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d103      	bne.n	800f6f2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f003 ffee 	bl	80136cc <tcp_output>
 800f6f0:	e00d      	b.n	800f70e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f6f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6fa:	d108      	bne.n	800f70e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	8b5b      	ldrh	r3, [r3, #26]
 800f700:	f043 0308 	orr.w	r3, r3, #8
 800f704:	b29a      	uxth	r2, r3
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f70a:	2300      	movs	r3, #0
 800f70c:	e001      	b.n	800f712 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f712:	4618      	mov	r0, r3
 800f714:	3710      	adds	r7, #16
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	080192bc 	.word	0x080192bc
 800f720:	0801936c 	.word	0x0801936c
 800f724:	08019300 	.word	0x08019300

0800f728 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d109      	bne.n	800f74a <tcp_close+0x22>
 800f736:	4b0f      	ldr	r3, [pc, #60]	; (800f774 <tcp_close+0x4c>)
 800f738:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f73c:	490e      	ldr	r1, [pc, #56]	; (800f778 <tcp_close+0x50>)
 800f73e:	480f      	ldr	r0, [pc, #60]	; (800f77c <tcp_close+0x54>)
 800f740:	f008 f806 	bl	8017750 <iprintf>
 800f744:	f06f 030f 	mvn.w	r3, #15
 800f748:	e00f      	b.n	800f76a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	7d1b      	ldrb	r3, [r3, #20]
 800f74e:	2b01      	cmp	r3, #1
 800f750:	d006      	beq.n	800f760 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	8b5b      	ldrh	r3, [r3, #26]
 800f756:	f043 0310 	orr.w	r3, r3, #16
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f760:	2101      	movs	r1, #1
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f7ff fe94 	bl	800f490 <tcp_close_shutdown>
 800f768:	4603      	mov	r3, r0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3708      	adds	r7, #8
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	080192bc 	.word	0x080192bc
 800f778:	080193cc 	.word	0x080193cc
 800f77c:	08019300 	.word	0x08019300

0800f780 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b08e      	sub	sp, #56	; 0x38
 800f784:	af04      	add	r7, sp, #16
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d107      	bne.n	800f7a0 <tcp_abandon+0x20>
 800f790:	4b52      	ldr	r3, [pc, #328]	; (800f8dc <tcp_abandon+0x15c>)
 800f792:	f240 223d 	movw	r2, #573	; 0x23d
 800f796:	4952      	ldr	r1, [pc, #328]	; (800f8e0 <tcp_abandon+0x160>)
 800f798:	4852      	ldr	r0, [pc, #328]	; (800f8e4 <tcp_abandon+0x164>)
 800f79a:	f007 ffd9 	bl	8017750 <iprintf>
 800f79e:	e099      	b.n	800f8d4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	7d1b      	ldrb	r3, [r3, #20]
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d106      	bne.n	800f7b6 <tcp_abandon+0x36>
 800f7a8:	4b4c      	ldr	r3, [pc, #304]	; (800f8dc <tcp_abandon+0x15c>)
 800f7aa:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f7ae:	494e      	ldr	r1, [pc, #312]	; (800f8e8 <tcp_abandon+0x168>)
 800f7b0:	484c      	ldr	r0, [pc, #304]	; (800f8e4 <tcp_abandon+0x164>)
 800f7b2:	f007 ffcd 	bl	8017750 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	7d1b      	ldrb	r3, [r3, #20]
 800f7ba:	2b0a      	cmp	r3, #10
 800f7bc:	d107      	bne.n	800f7ce <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f7be:	6879      	ldr	r1, [r7, #4]
 800f7c0:	484a      	ldr	r0, [pc, #296]	; (800f8ec <tcp_abandon+0x16c>)
 800f7c2:	f000 ffc3 	bl	801074c <tcp_pcb_remove>
    tcp_free(pcb);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7ff fdb0 	bl	800f32c <tcp_free>
 800f7cc:	e082      	b.n	800f8d4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7da:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7e8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	691b      	ldr	r3, [r3, #16]
 800f7ee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	7d1b      	ldrb	r3, [r3, #20]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d126      	bne.n	800f846 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	8adb      	ldrh	r3, [r3, #22]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d02e      	beq.n	800f85e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f800:	4b3b      	ldr	r3, [pc, #236]	; (800f8f0 <tcp_abandon+0x170>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	687a      	ldr	r2, [r7, #4]
 800f806:	429a      	cmp	r2, r3
 800f808:	d105      	bne.n	800f816 <tcp_abandon+0x96>
 800f80a:	4b39      	ldr	r3, [pc, #228]	; (800f8f0 <tcp_abandon+0x170>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	4a37      	ldr	r2, [pc, #220]	; (800f8f0 <tcp_abandon+0x170>)
 800f812:	6013      	str	r3, [r2, #0]
 800f814:	e013      	b.n	800f83e <tcp_abandon+0xbe>
 800f816:	4b36      	ldr	r3, [pc, #216]	; (800f8f0 <tcp_abandon+0x170>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	61fb      	str	r3, [r7, #28]
 800f81c:	e00c      	b.n	800f838 <tcp_abandon+0xb8>
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	687a      	ldr	r2, [r7, #4]
 800f824:	429a      	cmp	r2, r3
 800f826:	d104      	bne.n	800f832 <tcp_abandon+0xb2>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	68da      	ldr	r2, [r3, #12]
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	60da      	str	r2, [r3, #12]
 800f830:	e005      	b.n	800f83e <tcp_abandon+0xbe>
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	68db      	ldr	r3, [r3, #12]
 800f836:	61fb      	str	r3, [r7, #28]
 800f838:	69fb      	ldr	r3, [r7, #28]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d1ef      	bne.n	800f81e <tcp_abandon+0x9e>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2200      	movs	r2, #0
 800f842:	60da      	str	r2, [r3, #12]
 800f844:	e00b      	b.n	800f85e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	8adb      	ldrh	r3, [r3, #22]
 800f84e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f850:	6879      	ldr	r1, [r7, #4]
 800f852:	4828      	ldr	r0, [pc, #160]	; (800f8f4 <tcp_abandon+0x174>)
 800f854:	f000 ff7a 	bl	801074c <tcp_pcb_remove>
 800f858:	4b27      	ldr	r3, [pc, #156]	; (800f8f8 <tcp_abandon+0x178>)
 800f85a:	2201      	movs	r2, #1
 800f85c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f862:	2b00      	cmp	r3, #0
 800f864:	d004      	beq.n	800f870 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f86a:	4618      	mov	r0, r3
 800f86c:	f000 fd1c 	bl	80102a8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f874:	2b00      	cmp	r3, #0
 800f876:	d004      	beq.n	800f882 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f87c:	4618      	mov	r0, r3
 800f87e:	f000 fd13 	bl	80102a8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f886:	2b00      	cmp	r3, #0
 800f888:	d004      	beq.n	800f894 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f88e:	4618      	mov	r0, r3
 800f890:	f000 fd0a 	bl	80102a8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00e      	beq.n	800f8b8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f89a:	6879      	ldr	r1, [r7, #4]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	3304      	adds	r3, #4
 800f8a0:	687a      	ldr	r2, [r7, #4]
 800f8a2:	8b12      	ldrh	r2, [r2, #24]
 800f8a4:	9202      	str	r2, [sp, #8]
 800f8a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f8a8:	9201      	str	r2, [sp, #4]
 800f8aa:	9300      	str	r3, [sp, #0]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	697a      	ldr	r2, [r7, #20]
 800f8b0:	69b9      	ldr	r1, [r7, #24]
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f004 fcbe 	bl	8014234 <tcp_rst>
    }
    last_state = pcb->state;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	7d1b      	ldrb	r3, [r3, #20]
 800f8bc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7ff fd34 	bl	800f32c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d004      	beq.n	800f8d4 <tcp_abandon+0x154>
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	f06f 010c 	mvn.w	r1, #12
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	4798      	blx	r3
  }
}
 800f8d4:	3728      	adds	r7, #40	; 0x28
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	080192bc 	.word	0x080192bc
 800f8e0:	08019400 	.word	0x08019400
 800f8e4:	08019300 	.word	0x08019300
 800f8e8:	0801941c 	.word	0x0801941c
 800f8ec:	24007864 	.word	0x24007864
 800f8f0:	24007860 	.word	0x24007860
 800f8f4:	24007854 	.word	0x24007854
 800f8f8:	24007850 	.word	0x24007850

0800f8fc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f904:	2101      	movs	r1, #1
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7ff ff3a 	bl	800f780 <tcp_abandon>
}
 800f90c:	bf00      	nop
 800f90e:	3708      	adds	r7, #8
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d106      	bne.n	800f930 <tcp_update_rcv_ann_wnd+0x1c>
 800f922:	4b25      	ldr	r3, [pc, #148]	; (800f9b8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f924:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f928:	4924      	ldr	r1, [pc, #144]	; (800f9bc <tcp_update_rcv_ann_wnd+0xa8>)
 800f92a:	4825      	ldr	r0, [pc, #148]	; (800f9c0 <tcp_update_rcv_ann_wnd+0xac>)
 800f92c:	f007 ff10 	bl	8017750 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f938:	4413      	add	r3, r2
 800f93a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f944:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f948:	bf28      	it	cs
 800f94a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f94e:	b292      	uxth	r2, r2
 800f950:	4413      	add	r3, r2
 800f952:	68fa      	ldr	r2, [r7, #12]
 800f954:	1ad3      	subs	r3, r2, r3
 800f956:	2b00      	cmp	r3, #0
 800f958:	db08      	blt.n	800f96c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	1ad3      	subs	r3, r2, r3
 800f96a:	e020      	b.n	800f9ae <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f974:	1ad3      	subs	r3, r2, r3
 800f976:	2b00      	cmp	r3, #0
 800f978:	dd03      	ble.n	800f982 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f980:	e014      	b.n	800f9ac <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f98a:	1ad3      	subs	r3, r2, r3
 800f98c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f994:	d306      	bcc.n	800f9a4 <tcp_update_rcv_ann_wnd+0x90>
 800f996:	4b08      	ldr	r3, [pc, #32]	; (800f9b8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f998:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f99c:	4909      	ldr	r1, [pc, #36]	; (800f9c4 <tcp_update_rcv_ann_wnd+0xb0>)
 800f99e:	4808      	ldr	r0, [pc, #32]	; (800f9c0 <tcp_update_rcv_ann_wnd+0xac>)
 800f9a0:	f007 fed6 	bl	8017750 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f9ac:	2300      	movs	r3, #0
  }
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3710      	adds	r7, #16
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	080192bc 	.word	0x080192bc
 800f9bc:	08019518 	.word	0x08019518
 800f9c0:	08019300 	.word	0x08019300
 800f9c4:	0801953c 	.word	0x0801953c

0800f9c8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d107      	bne.n	800f9ea <tcp_recved+0x22>
 800f9da:	4b1f      	ldr	r3, [pc, #124]	; (800fa58 <tcp_recved+0x90>)
 800f9dc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f9e0:	491e      	ldr	r1, [pc, #120]	; (800fa5c <tcp_recved+0x94>)
 800f9e2:	481f      	ldr	r0, [pc, #124]	; (800fa60 <tcp_recved+0x98>)
 800f9e4:	f007 feb4 	bl	8017750 <iprintf>
 800f9e8:	e032      	b.n	800fa50 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	7d1b      	ldrb	r3, [r3, #20]
 800f9ee:	2b01      	cmp	r3, #1
 800f9f0:	d106      	bne.n	800fa00 <tcp_recved+0x38>
 800f9f2:	4b19      	ldr	r3, [pc, #100]	; (800fa58 <tcp_recved+0x90>)
 800f9f4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f9f8:	491a      	ldr	r1, [pc, #104]	; (800fa64 <tcp_recved+0x9c>)
 800f9fa:	4819      	ldr	r0, [pc, #100]	; (800fa60 <tcp_recved+0x98>)
 800f9fc:	f007 fea8 	bl	8017750 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa04:	887b      	ldrh	r3, [r7, #2]
 800fa06:	4413      	add	r3, r2
 800fa08:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fa0a:	89fb      	ldrh	r3, [r7, #14]
 800fa0c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fa10:	d804      	bhi.n	800fa1c <tcp_recved+0x54>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa16:	89fa      	ldrh	r2, [r7, #14]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d204      	bcs.n	800fa26 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fa22:	851a      	strh	r2, [r3, #40]	; 0x28
 800fa24:	e002      	b.n	800fa2c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	89fa      	ldrh	r2, [r7, #14]
 800fa2a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f7ff ff71 	bl	800f914 <tcp_update_rcv_ann_wnd>
 800fa32:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fa3a:	d309      	bcc.n	800fa50 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	8b5b      	ldrh	r3, [r3, #26]
 800fa40:	f043 0302 	orr.w	r3, r3, #2
 800fa44:	b29a      	uxth	r2, r3
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f003 fe3e 	bl	80136cc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fa50:	3710      	adds	r7, #16
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	080192bc 	.word	0x080192bc
 800fa5c:	08019558 	.word	0x08019558
 800fa60:	08019300 	.word	0x08019300
 800fa64:	08019570 	.word	0x08019570

0800fa68 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fa68:	b5b0      	push	{r4, r5, r7, lr}
 800fa6a:	b090      	sub	sp, #64	; 0x40
 800fa6c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800fa74:	4b94      	ldr	r3, [pc, #592]	; (800fcc8 <tcp_slowtmr+0x260>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	3301      	adds	r3, #1
 800fa7a:	4a93      	ldr	r2, [pc, #588]	; (800fcc8 <tcp_slowtmr+0x260>)
 800fa7c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fa7e:	4b93      	ldr	r3, [pc, #588]	; (800fccc <tcp_slowtmr+0x264>)
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	3301      	adds	r3, #1
 800fa84:	b2da      	uxtb	r2, r3
 800fa86:	4b91      	ldr	r3, [pc, #580]	; (800fccc <tcp_slowtmr+0x264>)
 800fa88:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800fa8e:	4b90      	ldr	r3, [pc, #576]	; (800fcd0 <tcp_slowtmr+0x268>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800fa94:	e29d      	b.n	800ffd2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa98:	7d1b      	ldrb	r3, [r3, #20]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d106      	bne.n	800faac <tcp_slowtmr+0x44>
 800fa9e:	4b8d      	ldr	r3, [pc, #564]	; (800fcd4 <tcp_slowtmr+0x26c>)
 800faa0:	f240 42be 	movw	r2, #1214	; 0x4be
 800faa4:	498c      	ldr	r1, [pc, #560]	; (800fcd8 <tcp_slowtmr+0x270>)
 800faa6:	488d      	ldr	r0, [pc, #564]	; (800fcdc <tcp_slowtmr+0x274>)
 800faa8:	f007 fe52 	bl	8017750 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800faac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faae:	7d1b      	ldrb	r3, [r3, #20]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d106      	bne.n	800fac2 <tcp_slowtmr+0x5a>
 800fab4:	4b87      	ldr	r3, [pc, #540]	; (800fcd4 <tcp_slowtmr+0x26c>)
 800fab6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800faba:	4989      	ldr	r1, [pc, #548]	; (800fce0 <tcp_slowtmr+0x278>)
 800fabc:	4887      	ldr	r0, [pc, #540]	; (800fcdc <tcp_slowtmr+0x274>)
 800fabe:	f007 fe47 	bl	8017750 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac4:	7d1b      	ldrb	r3, [r3, #20]
 800fac6:	2b0a      	cmp	r3, #10
 800fac8:	d106      	bne.n	800fad8 <tcp_slowtmr+0x70>
 800faca:	4b82      	ldr	r3, [pc, #520]	; (800fcd4 <tcp_slowtmr+0x26c>)
 800facc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800fad0:	4984      	ldr	r1, [pc, #528]	; (800fce4 <tcp_slowtmr+0x27c>)
 800fad2:	4882      	ldr	r0, [pc, #520]	; (800fcdc <tcp_slowtmr+0x274>)
 800fad4:	f007 fe3c 	bl	8017750 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	7f9a      	ldrb	r2, [r3, #30]
 800fadc:	4b7b      	ldr	r3, [pc, #492]	; (800fccc <tcp_slowtmr+0x264>)
 800fade:	781b      	ldrb	r3, [r3, #0]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d105      	bne.n	800faf0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800fae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800faee:	e270      	b.n	800ffd2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800faf0:	4b76      	ldr	r3, [pc, #472]	; (800fccc <tcp_slowtmr+0x264>)
 800faf2:	781a      	ldrb	r2, [r3, #0]
 800faf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800faf8:	2300      	movs	r3, #0
 800fafa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800fafe:	2300      	movs	r3, #0
 800fb00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb06:	7d1b      	ldrb	r3, [r3, #20]
 800fb08:	2b02      	cmp	r3, #2
 800fb0a:	d10a      	bne.n	800fb22 <tcp_slowtmr+0xba>
 800fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb12:	2b05      	cmp	r3, #5
 800fb14:	d905      	bls.n	800fb22 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fb16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb20:	e11e      	b.n	800fd60 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb28:	2b0b      	cmp	r3, #11
 800fb2a:	d905      	bls.n	800fb38 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fb2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb30:	3301      	adds	r3, #1
 800fb32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb36:	e113      	b.n	800fd60 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d075      	beq.n	800fc2e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d006      	beq.n	800fb58 <tcp_slowtmr+0xf0>
 800fb4a:	4b62      	ldr	r3, [pc, #392]	; (800fcd4 <tcp_slowtmr+0x26c>)
 800fb4c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fb50:	4965      	ldr	r1, [pc, #404]	; (800fce8 <tcp_slowtmr+0x280>)
 800fb52:	4862      	ldr	r0, [pc, #392]	; (800fcdc <tcp_slowtmr+0x274>)
 800fb54:	f007 fdfc 	bl	8017750 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d106      	bne.n	800fb6e <tcp_slowtmr+0x106>
 800fb60:	4b5c      	ldr	r3, [pc, #368]	; (800fcd4 <tcp_slowtmr+0x26c>)
 800fb62:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fb66:	4961      	ldr	r1, [pc, #388]	; (800fcec <tcp_slowtmr+0x284>)
 800fb68:	485c      	ldr	r0, [pc, #368]	; (800fcdc <tcp_slowtmr+0x274>)
 800fb6a:	f007 fdf1 	bl	8017750 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb70:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fb74:	2b0b      	cmp	r3, #11
 800fb76:	d905      	bls.n	800fb84 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fb78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb82:	e0ed      	b.n	800fd60 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	4a58      	ldr	r2, [pc, #352]	; (800fcf0 <tcp_slowtmr+0x288>)
 800fb8e:	5cd3      	ldrb	r3, [r2, r3]
 800fb90:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fb98:	7c7a      	ldrb	r2, [r7, #17]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d907      	bls.n	800fbae <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fba4:	3301      	adds	r3, #1
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbaa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fbb4:	7c7a      	ldrb	r2, [r7, #17]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	f200 80d2 	bhi.w	800fd60 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d108      	bne.n	800fbdc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fbca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbcc:	f004 fc26 	bl	801441c <tcp_zero_window_probe>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d014      	beq.n	800fc00 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	623b      	str	r3, [r7, #32]
 800fbda:	e011      	b.n	800fc00 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbe6:	f003 faeb 	bl	80131c0 <tcp_split_unsent_seg>
 800fbea:	4603      	mov	r3, r0
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d107      	bne.n	800fc00 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fbf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbf2:	f003 fd6b 	bl	80136cc <tcp_output>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d101      	bne.n	800fc00 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fc00:	6a3b      	ldr	r3, [r7, #32]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	f000 80ac 	beq.w	800fd60 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fc16:	2b06      	cmp	r3, #6
 800fc18:	f200 80a2 	bhi.w	800fd60 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fc22:	3301      	adds	r3, #1
 800fc24:	b2da      	uxtb	r2, r3
 800fc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc28:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fc2c:	e098      	b.n	800fd60 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	db0f      	blt.n	800fc58 <tcp_slowtmr+0x1f0>
 800fc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fc3e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d008      	beq.n	800fc58 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	3301      	adds	r3, #1
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	b21a      	sxth	r2, r3
 800fc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc56:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc60:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fc64:	429a      	cmp	r2, r3
 800fc66:	db7b      	blt.n	800fd60 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fc68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc6a:	f004 f821 	bl	8013cb0 <tcp_rexmit_rto_prepare>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d007      	beq.n	800fc84 <tcp_slowtmr+0x21c>
 800fc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d171      	bne.n	800fd60 <tcp_slowtmr+0x2f8>
 800fc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d06d      	beq.n	800fd60 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc86:	7d1b      	ldrb	r3, [r3, #20]
 800fc88:	2b02      	cmp	r3, #2
 800fc8a:	d03a      	beq.n	800fd02 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc92:	2b0c      	cmp	r3, #12
 800fc94:	bf28      	it	cs
 800fc96:	230c      	movcs	r3, #12
 800fc98:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fca0:	10db      	asrs	r3, r3, #3
 800fca2:	b21b      	sxth	r3, r3
 800fca4:	461a      	mov	r2, r3
 800fca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fcac:	4413      	add	r3, r2
 800fcae:	7efa      	ldrb	r2, [r7, #27]
 800fcb0:	4910      	ldr	r1, [pc, #64]	; (800fcf4 <tcp_slowtmr+0x28c>)
 800fcb2:	5c8a      	ldrb	r2, [r1, r2]
 800fcb4:	4093      	lsls	r3, r2
 800fcb6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	dc1a      	bgt.n	800fcf8 <tcp_slowtmr+0x290>
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	b21a      	sxth	r2, r3
 800fcc6:	e019      	b.n	800fcfc <tcp_slowtmr+0x294>
 800fcc8:	24007858 	.word	0x24007858
 800fccc:	2400412a 	.word	0x2400412a
 800fcd0:	24007854 	.word	0x24007854
 800fcd4:	080192bc 	.word	0x080192bc
 800fcd8:	08019600 	.word	0x08019600
 800fcdc:	08019300 	.word	0x08019300
 800fce0:	0801962c 	.word	0x0801962c
 800fce4:	08019658 	.word	0x08019658
 800fce8:	08019688 	.word	0x08019688
 800fcec:	080196bc 	.word	0x080196bc
 800fcf0:	0801c840 	.word	0x0801c840
 800fcf4:	0801c830 	.word	0x0801c830
 800fcf8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd04:	2200      	movs	r2, #0
 800fd06:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fd14:	4293      	cmp	r3, r2
 800fd16:	bf28      	it	cs
 800fd18:	4613      	movcs	r3, r2
 800fd1a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fd1c:	8a7b      	ldrh	r3, [r7, #18]
 800fd1e:	085b      	lsrs	r3, r3, #1
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd32:	005b      	lsls	r3, r3, #1
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d206      	bcs.n	800fd48 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd3e:	005b      	lsls	r3, r3, #1
 800fd40:	b29a      	uxth	r2, r3
 800fd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd54:	2200      	movs	r2, #0
 800fd56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fd5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd5c:	f004 f818 	bl	8013d90 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd62:	7d1b      	ldrb	r3, [r3, #20]
 800fd64:	2b06      	cmp	r3, #6
 800fd66:	d111      	bne.n	800fd8c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6a:	8b5b      	ldrh	r3, [r3, #26]
 800fd6c:	f003 0310 	and.w	r3, r3, #16
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d00b      	beq.n	800fd8c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd74:	4b9c      	ldr	r3, [pc, #624]	; (800ffe8 <tcp_slowtmr+0x580>)
 800fd76:	681a      	ldr	r2, [r3, #0]
 800fd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7a:	6a1b      	ldr	r3, [r3, #32]
 800fd7c:	1ad3      	subs	r3, r2, r3
 800fd7e:	2b28      	cmp	r3, #40	; 0x28
 800fd80:	d904      	bls.n	800fd8c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fd82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd86:	3301      	adds	r3, #1
 800fd88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8e:	7a5b      	ldrb	r3, [r3, #9]
 800fd90:	f003 0308 	and.w	r3, r3, #8
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d04a      	beq.n	800fe2e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fd9c:	2b04      	cmp	r3, #4
 800fd9e:	d003      	beq.n	800fda8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fda4:	2b07      	cmp	r3, #7
 800fda6:	d142      	bne.n	800fe2e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fda8:	4b8f      	ldr	r3, [pc, #572]	; (800ffe8 <tcp_slowtmr+0x580>)
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdae:	6a1b      	ldr	r3, [r3, #32]
 800fdb0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fdb8:	4b8c      	ldr	r3, [pc, #560]	; (800ffec <tcp_slowtmr+0x584>)
 800fdba:	440b      	add	r3, r1
 800fdbc:	498c      	ldr	r1, [pc, #560]	; (800fff0 <tcp_slowtmr+0x588>)
 800fdbe:	fba1 1303 	umull	r1, r3, r1, r3
 800fdc2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d90a      	bls.n	800fdde <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fdc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdcc:	3301      	adds	r3, #1
 800fdce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fdd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fddc:	e027      	b.n	800fe2e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fdde:	4b82      	ldr	r3, [pc, #520]	; (800ffe8 <tcp_slowtmr+0x580>)
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde4:	6a1b      	ldr	r3, [r3, #32]
 800fde6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdea:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	4b7f      	ldr	r3, [pc, #508]	; (800fff4 <tcp_slowtmr+0x58c>)
 800fdf8:	fb03 f300 	mul.w	r3, r3, r0
 800fdfc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fdfe:	497c      	ldr	r1, [pc, #496]	; (800fff0 <tcp_slowtmr+0x588>)
 800fe00:	fba1 1303 	umull	r1, r3, r1, r3
 800fe04:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d911      	bls.n	800fe2e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fe0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe0c:	f004 fac6 	bl	801439c <tcp_keepalive>
 800fe10:	4603      	mov	r3, r0
 800fe12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fe16:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d107      	bne.n	800fe2e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fe1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe20:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fe24:	3301      	adds	r3, #1
 800fe26:	b2da      	uxtb	r2, r3
 800fe28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe2a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fe2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d011      	beq.n	800fe5a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fe36:	4b6c      	ldr	r3, [pc, #432]	; (800ffe8 <tcp_slowtmr+0x580>)
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3c:	6a1b      	ldr	r3, [r3, #32]
 800fe3e:	1ad2      	subs	r2, r2, r3
 800fe40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe42:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fe46:	4619      	mov	r1, r3
 800fe48:	460b      	mov	r3, r1
 800fe4a:	005b      	lsls	r3, r3, #1
 800fe4c:	440b      	add	r3, r1
 800fe4e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d302      	bcc.n	800fe5a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fe54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe56:	f000 fddd 	bl	8010a14 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fe5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe5c:	7d1b      	ldrb	r3, [r3, #20]
 800fe5e:	2b03      	cmp	r3, #3
 800fe60:	d10b      	bne.n	800fe7a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe62:	4b61      	ldr	r3, [pc, #388]	; (800ffe8 <tcp_slowtmr+0x580>)
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe68:	6a1b      	ldr	r3, [r3, #32]
 800fe6a:	1ad3      	subs	r3, r2, r3
 800fe6c:	2b28      	cmp	r3, #40	; 0x28
 800fe6e:	d904      	bls.n	800fe7a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fe70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe74:	3301      	adds	r3, #1
 800fe76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fe7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7c:	7d1b      	ldrb	r3, [r3, #20]
 800fe7e:	2b09      	cmp	r3, #9
 800fe80:	d10b      	bne.n	800fe9a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fe82:	4b59      	ldr	r3, [pc, #356]	; (800ffe8 <tcp_slowtmr+0x580>)
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe88:	6a1b      	ldr	r3, [r3, #32]
 800fe8a:	1ad3      	subs	r3, r2, r3
 800fe8c:	2bf0      	cmp	r3, #240	; 0xf0
 800fe8e:	d904      	bls.n	800fe9a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fe90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe94:	3301      	adds	r3, #1
 800fe96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fe9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d060      	beq.n	800ff64 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fea8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800feaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800feac:	f000 fbfe 	bl	80106ac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800feb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d010      	beq.n	800fed8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800feb6:	4b50      	ldr	r3, [pc, #320]	; (800fff8 <tcp_slowtmr+0x590>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800febc:	429a      	cmp	r2, r3
 800febe:	d106      	bne.n	800fece <tcp_slowtmr+0x466>
 800fec0:	4b4e      	ldr	r3, [pc, #312]	; (800fffc <tcp_slowtmr+0x594>)
 800fec2:	f240 526d 	movw	r2, #1389	; 0x56d
 800fec6:	494e      	ldr	r1, [pc, #312]	; (8010000 <tcp_slowtmr+0x598>)
 800fec8:	484e      	ldr	r0, [pc, #312]	; (8010004 <tcp_slowtmr+0x59c>)
 800feca:	f007 fc41 	bl	8017750 <iprintf>
        prev->next = pcb->next;
 800fece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed0:	68da      	ldr	r2, [r3, #12]
 800fed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed4:	60da      	str	r2, [r3, #12]
 800fed6:	e00f      	b.n	800fef8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fed8:	4b47      	ldr	r3, [pc, #284]	; (800fff8 <tcp_slowtmr+0x590>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fede:	429a      	cmp	r2, r3
 800fee0:	d006      	beq.n	800fef0 <tcp_slowtmr+0x488>
 800fee2:	4b46      	ldr	r3, [pc, #280]	; (800fffc <tcp_slowtmr+0x594>)
 800fee4:	f240 5271 	movw	r2, #1393	; 0x571
 800fee8:	4947      	ldr	r1, [pc, #284]	; (8010008 <tcp_slowtmr+0x5a0>)
 800feea:	4846      	ldr	r0, [pc, #280]	; (8010004 <tcp_slowtmr+0x59c>)
 800feec:	f007 fc30 	bl	8017750 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	4a40      	ldr	r2, [pc, #256]	; (800fff8 <tcp_slowtmr+0x590>)
 800fef6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fef8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d013      	beq.n	800ff28 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ff00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff02:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ff04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff06:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ff08:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ff0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff10:	8ad2      	ldrh	r2, [r2, #22]
 800ff12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff14:	8b09      	ldrh	r1, [r1, #24]
 800ff16:	9102      	str	r1, [sp, #8]
 800ff18:	9201      	str	r2, [sp, #4]
 800ff1a:	9300      	str	r3, [sp, #0]
 800ff1c:	462b      	mov	r3, r5
 800ff1e:	4622      	mov	r2, r4
 800ff20:	4601      	mov	r1, r0
 800ff22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff24:	f004 f986 	bl	8014234 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ff28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2a:	691b      	ldr	r3, [r3, #16]
 800ff2c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ff2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff30:	7d1b      	ldrb	r3, [r3, #20]
 800ff32:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ff34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff36:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ff38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3a:	68db      	ldr	r3, [r3, #12]
 800ff3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ff3e:	6838      	ldr	r0, [r7, #0]
 800ff40:	f7ff f9f4 	bl	800f32c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ff44:	4b31      	ldr	r3, [pc, #196]	; (801000c <tcp_slowtmr+0x5a4>)
 800ff46:	2200      	movs	r2, #0
 800ff48:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d004      	beq.n	800ff5a <tcp_slowtmr+0x4f2>
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f06f 010c 	mvn.w	r1, #12
 800ff56:	68b8      	ldr	r0, [r7, #8]
 800ff58:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ff5a:	4b2c      	ldr	r3, [pc, #176]	; (801000c <tcp_slowtmr+0x5a4>)
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d037      	beq.n	800ffd2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ff62:	e592      	b.n	800fa8a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ff64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff66:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ff68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ff6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff70:	7f1b      	ldrb	r3, [r3, #28]
 800ff72:	3301      	adds	r3, #1
 800ff74:	b2da      	uxtb	r2, r3
 800ff76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff78:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ff7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7c:	7f1a      	ldrb	r2, [r3, #28]
 800ff7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff80:	7f5b      	ldrb	r3, [r3, #29]
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d325      	bcc.n	800ffd2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ff86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff88:	2200      	movs	r2, #0
 800ff8a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ff8c:	4b1f      	ldr	r3, [pc, #124]	; (801000c <tcp_slowtmr+0x5a4>)
 800ff8e:	2200      	movs	r2, #0
 800ff90:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ff92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d00b      	beq.n	800ffb4 <tcp_slowtmr+0x54c>
 800ff9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffa4:	6912      	ldr	r2, [r2, #16]
 800ffa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ffa8:	4610      	mov	r0, r2
 800ffaa:	4798      	blx	r3
 800ffac:	4603      	mov	r3, r0
 800ffae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ffb2:	e002      	b.n	800ffba <tcp_slowtmr+0x552>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ffba:	4b14      	ldr	r3, [pc, #80]	; (801000c <tcp_slowtmr+0x5a4>)
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d000      	beq.n	800ffc4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ffc2:	e562      	b.n	800fa8a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ffc4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d102      	bne.n	800ffd2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ffcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffce:	f003 fb7d 	bl	80136cc <tcp_output>
  while (pcb != NULL) {
 800ffd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	f47f ad5e 	bne.w	800fa96 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ffde:	4b0c      	ldr	r3, [pc, #48]	; (8010010 <tcp_slowtmr+0x5a8>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ffe4:	e069      	b.n	80100ba <tcp_slowtmr+0x652>
 800ffe6:	bf00      	nop
 800ffe8:	24007858 	.word	0x24007858
 800ffec:	000a4cb8 	.word	0x000a4cb8
 800fff0:	10624dd3 	.word	0x10624dd3
 800fff4:	000124f8 	.word	0x000124f8
 800fff8:	24007854 	.word	0x24007854
 800fffc:	080192bc 	.word	0x080192bc
 8010000:	080196f4 	.word	0x080196f4
 8010004:	08019300 	.word	0x08019300
 8010008:	08019720 	.word	0x08019720
 801000c:	24007850 	.word	0x24007850
 8010010:	24007864 	.word	0x24007864
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010016:	7d1b      	ldrb	r3, [r3, #20]
 8010018:	2b0a      	cmp	r3, #10
 801001a:	d006      	beq.n	801002a <tcp_slowtmr+0x5c2>
 801001c:	4b2b      	ldr	r3, [pc, #172]	; (80100cc <tcp_slowtmr+0x664>)
 801001e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8010022:	492b      	ldr	r1, [pc, #172]	; (80100d0 <tcp_slowtmr+0x668>)
 8010024:	482b      	ldr	r0, [pc, #172]	; (80100d4 <tcp_slowtmr+0x66c>)
 8010026:	f007 fb93 	bl	8017750 <iprintf>
    pcb_remove = 0;
 801002a:	2300      	movs	r3, #0
 801002c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010030:	4b29      	ldr	r3, [pc, #164]	; (80100d8 <tcp_slowtmr+0x670>)
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010036:	6a1b      	ldr	r3, [r3, #32]
 8010038:	1ad3      	subs	r3, r2, r3
 801003a:	2bf0      	cmp	r3, #240	; 0xf0
 801003c:	d904      	bls.n	8010048 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801003e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010042:	3301      	adds	r3, #1
 8010044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801004c:	2b00      	cmp	r3, #0
 801004e:	d02f      	beq.n	80100b0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010050:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010052:	f000 fb2b 	bl	80106ac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010058:	2b00      	cmp	r3, #0
 801005a:	d010      	beq.n	801007e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801005c:	4b1f      	ldr	r3, [pc, #124]	; (80100dc <tcp_slowtmr+0x674>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010062:	429a      	cmp	r2, r3
 8010064:	d106      	bne.n	8010074 <tcp_slowtmr+0x60c>
 8010066:	4b19      	ldr	r3, [pc, #100]	; (80100cc <tcp_slowtmr+0x664>)
 8010068:	f240 52af 	movw	r2, #1455	; 0x5af
 801006c:	491c      	ldr	r1, [pc, #112]	; (80100e0 <tcp_slowtmr+0x678>)
 801006e:	4819      	ldr	r0, [pc, #100]	; (80100d4 <tcp_slowtmr+0x66c>)
 8010070:	f007 fb6e 	bl	8017750 <iprintf>
        prev->next = pcb->next;
 8010074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010076:	68da      	ldr	r2, [r3, #12]
 8010078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007a:	60da      	str	r2, [r3, #12]
 801007c:	e00f      	b.n	801009e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801007e:	4b17      	ldr	r3, [pc, #92]	; (80100dc <tcp_slowtmr+0x674>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010084:	429a      	cmp	r2, r3
 8010086:	d006      	beq.n	8010096 <tcp_slowtmr+0x62e>
 8010088:	4b10      	ldr	r3, [pc, #64]	; (80100cc <tcp_slowtmr+0x664>)
 801008a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801008e:	4915      	ldr	r1, [pc, #84]	; (80100e4 <tcp_slowtmr+0x67c>)
 8010090:	4810      	ldr	r0, [pc, #64]	; (80100d4 <tcp_slowtmr+0x66c>)
 8010092:	f007 fb5d 	bl	8017750 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	4a10      	ldr	r2, [pc, #64]	; (80100dc <tcp_slowtmr+0x674>)
 801009c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801009e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80100a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a4:	68db      	ldr	r3, [r3, #12]
 80100a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80100a8:	69f8      	ldr	r0, [r7, #28]
 80100aa:	f7ff f93f 	bl	800f32c <tcp_free>
 80100ae:	e004      	b.n	80100ba <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80100b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80100b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b6:	68db      	ldr	r3, [r3, #12]
 80100b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80100ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d1a9      	bne.n	8010014 <tcp_slowtmr+0x5ac>
    }
  }
}
 80100c0:	bf00      	nop
 80100c2:	bf00      	nop
 80100c4:	3730      	adds	r7, #48	; 0x30
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bdb0      	pop	{r4, r5, r7, pc}
 80100ca:	bf00      	nop
 80100cc:	080192bc 	.word	0x080192bc
 80100d0:	0801974c 	.word	0x0801974c
 80100d4:	08019300 	.word	0x08019300
 80100d8:	24007858 	.word	0x24007858
 80100dc:	24007864 	.word	0x24007864
 80100e0:	0801977c 	.word	0x0801977c
 80100e4:	080197a4 	.word	0x080197a4

080100e8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80100ee:	4b2d      	ldr	r3, [pc, #180]	; (80101a4 <tcp_fasttmr+0xbc>)
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	3301      	adds	r3, #1
 80100f4:	b2da      	uxtb	r2, r3
 80100f6:	4b2b      	ldr	r3, [pc, #172]	; (80101a4 <tcp_fasttmr+0xbc>)
 80100f8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80100fa:	4b2b      	ldr	r3, [pc, #172]	; (80101a8 <tcp_fasttmr+0xc0>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010100:	e048      	b.n	8010194 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	7f9a      	ldrb	r2, [r3, #30]
 8010106:	4b27      	ldr	r3, [pc, #156]	; (80101a4 <tcp_fasttmr+0xbc>)
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	429a      	cmp	r2, r3
 801010c:	d03f      	beq.n	801018e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801010e:	4b25      	ldr	r3, [pc, #148]	; (80101a4 <tcp_fasttmr+0xbc>)
 8010110:	781a      	ldrb	r2, [r3, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	8b5b      	ldrh	r3, [r3, #26]
 801011a:	f003 0301 	and.w	r3, r3, #1
 801011e:	2b00      	cmp	r3, #0
 8010120:	d010      	beq.n	8010144 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	8b5b      	ldrh	r3, [r3, #26]
 8010126:	f043 0302 	orr.w	r3, r3, #2
 801012a:	b29a      	uxth	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f003 facb 	bl	80136cc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	8b5b      	ldrh	r3, [r3, #26]
 801013a:	f023 0303 	bic.w	r3, r3, #3
 801013e:	b29a      	uxth	r2, r3
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	8b5b      	ldrh	r3, [r3, #26]
 8010148:	f003 0308 	and.w	r3, r3, #8
 801014c:	2b00      	cmp	r3, #0
 801014e:	d009      	beq.n	8010164 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	8b5b      	ldrh	r3, [r3, #26]
 8010154:	f023 0308 	bic.w	r3, r3, #8
 8010158:	b29a      	uxth	r2, r3
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f7ff fa78 	bl	800f654 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801016e:	2b00      	cmp	r3, #0
 8010170:	d00a      	beq.n	8010188 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010172:	4b0e      	ldr	r3, [pc, #56]	; (80101ac <tcp_fasttmr+0xc4>)
 8010174:	2200      	movs	r2, #0
 8010176:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 f819 	bl	80101b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801017e:	4b0b      	ldr	r3, [pc, #44]	; (80101ac <tcp_fasttmr+0xc4>)
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d000      	beq.n	8010188 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010186:	e7b8      	b.n	80100fa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	607b      	str	r3, [r7, #4]
 801018c:	e002      	b.n	8010194 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	68db      	ldr	r3, [r3, #12]
 8010192:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d1b3      	bne.n	8010102 <tcp_fasttmr+0x1a>
    }
  }
}
 801019a:	bf00      	nop
 801019c:	bf00      	nop
 801019e:	3708      	adds	r7, #8
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	2400412a 	.word	0x2400412a
 80101a8:	24007854 	.word	0x24007854
 80101ac:	24007850 	.word	0x24007850

080101b0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80101b0:	b590      	push	{r4, r7, lr}
 80101b2:	b085      	sub	sp, #20
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d109      	bne.n	80101d2 <tcp_process_refused_data+0x22>
 80101be:	4b37      	ldr	r3, [pc, #220]	; (801029c <tcp_process_refused_data+0xec>)
 80101c0:	f240 6209 	movw	r2, #1545	; 0x609
 80101c4:	4936      	ldr	r1, [pc, #216]	; (80102a0 <tcp_process_refused_data+0xf0>)
 80101c6:	4837      	ldr	r0, [pc, #220]	; (80102a4 <tcp_process_refused_data+0xf4>)
 80101c8:	f007 fac2 	bl	8017750 <iprintf>
 80101cc:	f06f 030f 	mvn.w	r3, #15
 80101d0:	e060      	b.n	8010294 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80101d6:	7b5b      	ldrb	r3, [r3, #13]
 80101d8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80101de:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2200      	movs	r2, #0
 80101e4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d00b      	beq.n	8010208 <tcp_process_refused_data+0x58>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6918      	ldr	r0, [r3, #16]
 80101fa:	2300      	movs	r3, #0
 80101fc:	68ba      	ldr	r2, [r7, #8]
 80101fe:	6879      	ldr	r1, [r7, #4]
 8010200:	47a0      	blx	r4
 8010202:	4603      	mov	r3, r0
 8010204:	73fb      	strb	r3, [r7, #15]
 8010206:	e007      	b.n	8010218 <tcp_process_refused_data+0x68>
 8010208:	2300      	movs	r3, #0
 801020a:	68ba      	ldr	r2, [r7, #8]
 801020c:	6879      	ldr	r1, [r7, #4]
 801020e:	2000      	movs	r0, #0
 8010210:	f000 f8a4 	bl	801035c <tcp_recv_null>
 8010214:	4603      	mov	r3, r0
 8010216:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d12a      	bne.n	8010276 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010220:	7bbb      	ldrb	r3, [r7, #14]
 8010222:	f003 0320 	and.w	r3, r3, #32
 8010226:	2b00      	cmp	r3, #0
 8010228:	d033      	beq.n	8010292 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801022e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010232:	d005      	beq.n	8010240 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010238:	3301      	adds	r3, #1
 801023a:	b29a      	uxth	r2, r3
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00b      	beq.n	8010262 <tcp_process_refused_data+0xb2>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6918      	ldr	r0, [r3, #16]
 8010254:	2300      	movs	r3, #0
 8010256:	2200      	movs	r2, #0
 8010258:	6879      	ldr	r1, [r7, #4]
 801025a:	47a0      	blx	r4
 801025c:	4603      	mov	r3, r0
 801025e:	73fb      	strb	r3, [r7, #15]
 8010260:	e001      	b.n	8010266 <tcp_process_refused_data+0xb6>
 8010262:	2300      	movs	r3, #0
 8010264:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801026a:	f113 0f0d 	cmn.w	r3, #13
 801026e:	d110      	bne.n	8010292 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010270:	f06f 030c 	mvn.w	r3, #12
 8010274:	e00e      	b.n	8010294 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801027a:	f113 0f0d 	cmn.w	r3, #13
 801027e:	d102      	bne.n	8010286 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010280:	f06f 030c 	mvn.w	r3, #12
 8010284:	e006      	b.n	8010294 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	68ba      	ldr	r2, [r7, #8]
 801028a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801028c:	f06f 0304 	mvn.w	r3, #4
 8010290:	e000      	b.n	8010294 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010292:	2300      	movs	r3, #0
}
 8010294:	4618      	mov	r0, r3
 8010296:	3714      	adds	r7, #20
 8010298:	46bd      	mov	sp, r7
 801029a:	bd90      	pop	{r4, r7, pc}
 801029c:	080192bc 	.word	0x080192bc
 80102a0:	080197cc 	.word	0x080197cc
 80102a4:	08019300 	.word	0x08019300

080102a8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80102b0:	e007      	b.n	80102c2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f000 f80a 	bl	80102d2 <tcp_seg_free>
    seg = next;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d1f4      	bne.n	80102b2 <tcp_segs_free+0xa>
  }
}
 80102c8:	bf00      	nop
 80102ca:	bf00      	nop
 80102cc:	3710      	adds	r7, #16
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b082      	sub	sp, #8
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d00c      	beq.n	80102fa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d004      	beq.n	80102f2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7fe fd71 	bl	800edd4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80102f2:	6879      	ldr	r1, [r7, #4]
 80102f4:	2003      	movs	r0, #3
 80102f6:	f7fd fec9 	bl	800e08c <memp_free>
  }
}
 80102fa:	bf00      	nop
 80102fc:	3708      	adds	r7, #8
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
	...

08010304 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d106      	bne.n	8010320 <tcp_seg_copy+0x1c>
 8010312:	4b0f      	ldr	r3, [pc, #60]	; (8010350 <tcp_seg_copy+0x4c>)
 8010314:	f240 6282 	movw	r2, #1666	; 0x682
 8010318:	490e      	ldr	r1, [pc, #56]	; (8010354 <tcp_seg_copy+0x50>)
 801031a:	480f      	ldr	r0, [pc, #60]	; (8010358 <tcp_seg_copy+0x54>)
 801031c:	f007 fa18 	bl	8017750 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010320:	2003      	movs	r0, #3
 8010322:	f7fd fe3d 	bl	800dfa0 <memp_malloc>
 8010326:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d101      	bne.n	8010332 <tcp_seg_copy+0x2e>
    return NULL;
 801032e:	2300      	movs	r3, #0
 8010330:	e00a      	b.n	8010348 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010332:	2210      	movs	r2, #16
 8010334:	6879      	ldr	r1, [r7, #4]
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f007 f999 	bl	801766e <memcpy>
  pbuf_ref(cseg->p);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	4618      	mov	r0, r3
 8010342:	f7fe fded 	bl	800ef20 <pbuf_ref>
  return cseg;
 8010346:	68fb      	ldr	r3, [r7, #12]
}
 8010348:	4618      	mov	r0, r3
 801034a:	3710      	adds	r7, #16
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}
 8010350:	080192bc 	.word	0x080192bc
 8010354:	08019810 	.word	0x08019810
 8010358:	08019300 	.word	0x08019300

0801035c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	607a      	str	r2, [r7, #4]
 8010368:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d109      	bne.n	8010384 <tcp_recv_null+0x28>
 8010370:	4b12      	ldr	r3, [pc, #72]	; (80103bc <tcp_recv_null+0x60>)
 8010372:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010376:	4912      	ldr	r1, [pc, #72]	; (80103c0 <tcp_recv_null+0x64>)
 8010378:	4812      	ldr	r0, [pc, #72]	; (80103c4 <tcp_recv_null+0x68>)
 801037a:	f007 f9e9 	bl	8017750 <iprintf>
 801037e:	f06f 030f 	mvn.w	r3, #15
 8010382:	e016      	b.n	80103b2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d009      	beq.n	801039e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	891b      	ldrh	r3, [r3, #8]
 801038e:	4619      	mov	r1, r3
 8010390:	68b8      	ldr	r0, [r7, #8]
 8010392:	f7ff fb19 	bl	800f9c8 <tcp_recved>
    pbuf_free(p);
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7fe fd1c 	bl	800edd4 <pbuf_free>
 801039c:	e008      	b.n	80103b0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801039e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d104      	bne.n	80103b0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80103a6:	68b8      	ldr	r0, [r7, #8]
 80103a8:	f7ff f9be 	bl	800f728 <tcp_close>
 80103ac:	4603      	mov	r3, r0
 80103ae:	e000      	b.n	80103b2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80103b0:	2300      	movs	r3, #0
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3710      	adds	r7, #16
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	080192bc 	.word	0x080192bc
 80103c0:	0801982c 	.word	0x0801982c
 80103c4:	08019300 	.word	0x08019300

080103c8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b086      	sub	sp, #24
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	4603      	mov	r3, r0
 80103d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80103d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	db01      	blt.n	80103de <tcp_kill_prio+0x16>
 80103da:	79fb      	ldrb	r3, [r7, #7]
 80103dc:	e000      	b.n	80103e0 <tcp_kill_prio+0x18>
 80103de:	237f      	movs	r3, #127	; 0x7f
 80103e0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80103e2:	7afb      	ldrb	r3, [r7, #11]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d034      	beq.n	8010452 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80103e8:	7afb      	ldrb	r3, [r7, #11]
 80103ea:	3b01      	subs	r3, #1
 80103ec:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80103ee:	2300      	movs	r3, #0
 80103f0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80103f2:	2300      	movs	r3, #0
 80103f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80103f6:	4b19      	ldr	r3, [pc, #100]	; (801045c <tcp_kill_prio+0x94>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	617b      	str	r3, [r7, #20]
 80103fc:	e01f      	b.n	801043e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	7d5b      	ldrb	r3, [r3, #21]
 8010402:	7afa      	ldrb	r2, [r7, #11]
 8010404:	429a      	cmp	r2, r3
 8010406:	d80c      	bhi.n	8010422 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801040c:	7afa      	ldrb	r2, [r7, #11]
 801040e:	429a      	cmp	r2, r3
 8010410:	d112      	bne.n	8010438 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010412:	4b13      	ldr	r3, [pc, #76]	; (8010460 <tcp_kill_prio+0x98>)
 8010414:	681a      	ldr	r2, [r3, #0]
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	6a1b      	ldr	r3, [r3, #32]
 801041a:	1ad3      	subs	r3, r2, r3
 801041c:	68fa      	ldr	r2, [r7, #12]
 801041e:	429a      	cmp	r2, r3
 8010420:	d80a      	bhi.n	8010438 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010422:	4b0f      	ldr	r3, [pc, #60]	; (8010460 <tcp_kill_prio+0x98>)
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	6a1b      	ldr	r3, [r3, #32]
 801042a:	1ad3      	subs	r3, r2, r3
 801042c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	7d5b      	ldrb	r3, [r3, #21]
 8010436:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	617b      	str	r3, [r7, #20]
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d1dc      	bne.n	80103fe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d004      	beq.n	8010454 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801044a:	6938      	ldr	r0, [r7, #16]
 801044c:	f7ff fa56 	bl	800f8fc <tcp_abort>
 8010450:	e000      	b.n	8010454 <tcp_kill_prio+0x8c>
    return;
 8010452:	bf00      	nop
  }
}
 8010454:	3718      	adds	r7, #24
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	24007854 	.word	0x24007854
 8010460:	24007858 	.word	0x24007858

08010464 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b086      	sub	sp, #24
 8010468:	af00      	add	r7, sp, #0
 801046a:	4603      	mov	r3, r0
 801046c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801046e:	79fb      	ldrb	r3, [r7, #7]
 8010470:	2b08      	cmp	r3, #8
 8010472:	d009      	beq.n	8010488 <tcp_kill_state+0x24>
 8010474:	79fb      	ldrb	r3, [r7, #7]
 8010476:	2b09      	cmp	r3, #9
 8010478:	d006      	beq.n	8010488 <tcp_kill_state+0x24>
 801047a:	4b1a      	ldr	r3, [pc, #104]	; (80104e4 <tcp_kill_state+0x80>)
 801047c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010480:	4919      	ldr	r1, [pc, #100]	; (80104e8 <tcp_kill_state+0x84>)
 8010482:	481a      	ldr	r0, [pc, #104]	; (80104ec <tcp_kill_state+0x88>)
 8010484:	f007 f964 	bl	8017750 <iprintf>

  inactivity = 0;
 8010488:	2300      	movs	r3, #0
 801048a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801048c:	2300      	movs	r3, #0
 801048e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010490:	4b17      	ldr	r3, [pc, #92]	; (80104f0 <tcp_kill_state+0x8c>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	617b      	str	r3, [r7, #20]
 8010496:	e017      	b.n	80104c8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	7d1b      	ldrb	r3, [r3, #20]
 801049c:	79fa      	ldrb	r2, [r7, #7]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d10f      	bne.n	80104c2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80104a2:	4b14      	ldr	r3, [pc, #80]	; (80104f4 <tcp_kill_state+0x90>)
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	6a1b      	ldr	r3, [r3, #32]
 80104aa:	1ad3      	subs	r3, r2, r3
 80104ac:	68fa      	ldr	r2, [r7, #12]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d807      	bhi.n	80104c2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80104b2:	4b10      	ldr	r3, [pc, #64]	; (80104f4 <tcp_kill_state+0x90>)
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	6a1b      	ldr	r3, [r3, #32]
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	617b      	str	r3, [r7, #20]
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d1e4      	bne.n	8010498 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d003      	beq.n	80104dc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80104d4:	2100      	movs	r1, #0
 80104d6:	6938      	ldr	r0, [r7, #16]
 80104d8:	f7ff f952 	bl	800f780 <tcp_abandon>
  }
}
 80104dc:	bf00      	nop
 80104de:	3718      	adds	r7, #24
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	080192bc 	.word	0x080192bc
 80104e8:	08019848 	.word	0x08019848
 80104ec:	08019300 	.word	0x08019300
 80104f0:	24007854 	.word	0x24007854
 80104f4:	24007858 	.word	0x24007858

080104f8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b084      	sub	sp, #16
 80104fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80104fe:	2300      	movs	r3, #0
 8010500:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010502:	2300      	movs	r3, #0
 8010504:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010506:	4b12      	ldr	r3, [pc, #72]	; (8010550 <tcp_kill_timewait+0x58>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	60fb      	str	r3, [r7, #12]
 801050c:	e012      	b.n	8010534 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801050e:	4b11      	ldr	r3, [pc, #68]	; (8010554 <tcp_kill_timewait+0x5c>)
 8010510:	681a      	ldr	r2, [r3, #0]
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	6a1b      	ldr	r3, [r3, #32]
 8010516:	1ad3      	subs	r3, r2, r3
 8010518:	687a      	ldr	r2, [r7, #4]
 801051a:	429a      	cmp	r2, r3
 801051c:	d807      	bhi.n	801052e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801051e:	4b0d      	ldr	r3, [pc, #52]	; (8010554 <tcp_kill_timewait+0x5c>)
 8010520:	681a      	ldr	r2, [r3, #0]
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	6a1b      	ldr	r3, [r3, #32]
 8010526:	1ad3      	subs	r3, r2, r3
 8010528:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	68db      	ldr	r3, [r3, #12]
 8010532:	60fb      	str	r3, [r7, #12]
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d1e9      	bne.n	801050e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d002      	beq.n	8010546 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010540:	68b8      	ldr	r0, [r7, #8]
 8010542:	f7ff f9db 	bl	800f8fc <tcp_abort>
  }
}
 8010546:	bf00      	nop
 8010548:	3710      	adds	r7, #16
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	bf00      	nop
 8010550:	24007864 	.word	0x24007864
 8010554:	24007858 	.word	0x24007858

08010558 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801055e:	4b10      	ldr	r3, [pc, #64]	; (80105a0 <tcp_handle_closepend+0x48>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010564:	e014      	b.n	8010590 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	68db      	ldr	r3, [r3, #12]
 801056a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	8b5b      	ldrh	r3, [r3, #26]
 8010570:	f003 0308 	and.w	r3, r3, #8
 8010574:	2b00      	cmp	r3, #0
 8010576:	d009      	beq.n	801058c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	8b5b      	ldrh	r3, [r3, #26]
 801057c:	f023 0308 	bic.w	r3, r3, #8
 8010580:	b29a      	uxth	r2, r3
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f7ff f864 	bl	800f654 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d1e7      	bne.n	8010566 <tcp_handle_closepend+0xe>
  }
}
 8010596:	bf00      	nop
 8010598:	bf00      	nop
 801059a:	3708      	adds	r7, #8
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	24007854 	.word	0x24007854

080105a4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	4603      	mov	r3, r0
 80105ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105ae:	2001      	movs	r0, #1
 80105b0:	f7fd fcf6 	bl	800dfa0 <memp_malloc>
 80105b4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d126      	bne.n	801060a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80105bc:	f7ff ffcc 	bl	8010558 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80105c0:	f7ff ff9a 	bl	80104f8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105c4:	2001      	movs	r0, #1
 80105c6:	f7fd fceb 	bl	800dfa0 <memp_malloc>
 80105ca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d11b      	bne.n	801060a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80105d2:	2009      	movs	r0, #9
 80105d4:	f7ff ff46 	bl	8010464 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105d8:	2001      	movs	r0, #1
 80105da:	f7fd fce1 	bl	800dfa0 <memp_malloc>
 80105de:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d111      	bne.n	801060a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80105e6:	2008      	movs	r0, #8
 80105e8:	f7ff ff3c 	bl	8010464 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105ec:	2001      	movs	r0, #1
 80105ee:	f7fd fcd7 	bl	800dfa0 <memp_malloc>
 80105f2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d107      	bne.n	801060a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80105fa:	79fb      	ldrb	r3, [r7, #7]
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7ff fee3 	bl	80103c8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010602:	2001      	movs	r0, #1
 8010604:	f7fd fccc 	bl	800dfa0 <memp_malloc>
 8010608:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d03f      	beq.n	8010690 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010610:	229c      	movs	r2, #156	; 0x9c
 8010612:	2100      	movs	r1, #0
 8010614:	68f8      	ldr	r0, [r7, #12]
 8010616:	f007 f838 	bl	801768a <memset>
    pcb->prio = prio;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	79fa      	ldrb	r2, [r7, #7]
 801061e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010626:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010630:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	22ff      	movs	r2, #255	; 0xff
 801063e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010646:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2206      	movs	r2, #6
 801064c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2206      	movs	r2, #6
 8010654:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801065c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2201      	movs	r2, #1
 8010662:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010666:	4b0d      	ldr	r3, [pc, #52]	; (801069c <tcp_alloc+0xf8>)
 8010668:	681a      	ldr	r2, [r3, #0]
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801066e:	4b0c      	ldr	r3, [pc, #48]	; (80106a0 <tcp_alloc+0xfc>)
 8010670:	781a      	ldrb	r2, [r3, #0]
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801067c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	4a08      	ldr	r2, [pc, #32]	; (80106a4 <tcp_alloc+0x100>)
 8010684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	4a07      	ldr	r2, [pc, #28]	; (80106a8 <tcp_alloc+0x104>)
 801068c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010690:	68fb      	ldr	r3, [r7, #12]
}
 8010692:	4618      	mov	r0, r3
 8010694:	3710      	adds	r7, #16
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
 801069a:	bf00      	nop
 801069c:	24007858 	.word	0x24007858
 80106a0:	2400412a 	.word	0x2400412a
 80106a4:	0801035d 	.word	0x0801035d
 80106a8:	006ddd00 	.word	0x006ddd00

080106ac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b082      	sub	sp, #8
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d107      	bne.n	80106ca <tcp_pcb_purge+0x1e>
 80106ba:	4b21      	ldr	r3, [pc, #132]	; (8010740 <tcp_pcb_purge+0x94>)
 80106bc:	f640 0251 	movw	r2, #2129	; 0x851
 80106c0:	4920      	ldr	r1, [pc, #128]	; (8010744 <tcp_pcb_purge+0x98>)
 80106c2:	4821      	ldr	r0, [pc, #132]	; (8010748 <tcp_pcb_purge+0x9c>)
 80106c4:	f007 f844 	bl	8017750 <iprintf>
 80106c8:	e037      	b.n	801073a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	7d1b      	ldrb	r3, [r3, #20]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d033      	beq.n	801073a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80106d6:	2b0a      	cmp	r3, #10
 80106d8:	d02f      	beq.n	801073a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80106de:	2b01      	cmp	r3, #1
 80106e0:	d02b      	beq.n	801073a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d007      	beq.n	80106fa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fe fb70 	bl	800edd4 <pbuf_free>
      pcb->refused_data = NULL;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2200      	movs	r2, #0
 80106f8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d002      	beq.n	8010708 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f986 	bl	8010a14 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801070e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010714:	4618      	mov	r0, r3
 8010716:	f7ff fdc7 	bl	80102a8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801071e:	4618      	mov	r0, r3
 8010720:	f7ff fdc2 	bl	80102a8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2200      	movs	r2, #0
 8010728:	66da      	str	r2, [r3, #108]	; 0x6c
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2200      	movs	r2, #0
 8010736:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801073a:	3708      	adds	r7, #8
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}
 8010740:	080192bc 	.word	0x080192bc
 8010744:	08019908 	.word	0x08019908
 8010748:	08019300 	.word	0x08019300

0801074c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d106      	bne.n	801076a <tcp_pcb_remove+0x1e>
 801075c:	4b3e      	ldr	r3, [pc, #248]	; (8010858 <tcp_pcb_remove+0x10c>)
 801075e:	f640 0283 	movw	r2, #2179	; 0x883
 8010762:	493e      	ldr	r1, [pc, #248]	; (801085c <tcp_pcb_remove+0x110>)
 8010764:	483e      	ldr	r0, [pc, #248]	; (8010860 <tcp_pcb_remove+0x114>)
 8010766:	f006 fff3 	bl	8017750 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d106      	bne.n	801077e <tcp_pcb_remove+0x32>
 8010770:	4b39      	ldr	r3, [pc, #228]	; (8010858 <tcp_pcb_remove+0x10c>)
 8010772:	f640 0284 	movw	r2, #2180	; 0x884
 8010776:	493b      	ldr	r1, [pc, #236]	; (8010864 <tcp_pcb_remove+0x118>)
 8010778:	4839      	ldr	r0, [pc, #228]	; (8010860 <tcp_pcb_remove+0x114>)
 801077a:	f006 ffe9 	bl	8017750 <iprintf>

  TCP_RMV(pcblist, pcb);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	683a      	ldr	r2, [r7, #0]
 8010784:	429a      	cmp	r2, r3
 8010786:	d105      	bne.n	8010794 <tcp_pcb_remove+0x48>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	68da      	ldr	r2, [r3, #12]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	601a      	str	r2, [r3, #0]
 8010792:	e013      	b.n	80107bc <tcp_pcb_remove+0x70>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	60fb      	str	r3, [r7, #12]
 801079a:	e00c      	b.n	80107b6 <tcp_pcb_remove+0x6a>
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	683a      	ldr	r2, [r7, #0]
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d104      	bne.n	80107b0 <tcp_pcb_remove+0x64>
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	68da      	ldr	r2, [r3, #12]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	60da      	str	r2, [r3, #12]
 80107ae:	e005      	b.n	80107bc <tcp_pcb_remove+0x70>
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	60fb      	str	r3, [r7, #12]
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d1ef      	bne.n	801079c <tcp_pcb_remove+0x50>
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	2200      	movs	r2, #0
 80107c0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80107c2:	6838      	ldr	r0, [r7, #0]
 80107c4:	f7ff ff72 	bl	80106ac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	7d1b      	ldrb	r3, [r3, #20]
 80107cc:	2b0a      	cmp	r3, #10
 80107ce:	d013      	beq.n	80107f8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d00f      	beq.n	80107f8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	8b5b      	ldrh	r3, [r3, #26]
 80107dc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d009      	beq.n	80107f8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	8b5b      	ldrh	r3, [r3, #26]
 80107e8:	f043 0302 	orr.w	r3, r3, #2
 80107ec:	b29a      	uxth	r2, r3
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80107f2:	6838      	ldr	r0, [r7, #0]
 80107f4:	f002 ff6a 	bl	80136cc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	7d1b      	ldrb	r3, [r3, #20]
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d020      	beq.n	8010842 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010804:	2b00      	cmp	r3, #0
 8010806:	d006      	beq.n	8010816 <tcp_pcb_remove+0xca>
 8010808:	4b13      	ldr	r3, [pc, #76]	; (8010858 <tcp_pcb_remove+0x10c>)
 801080a:	f640 0293 	movw	r2, #2195	; 0x893
 801080e:	4916      	ldr	r1, [pc, #88]	; (8010868 <tcp_pcb_remove+0x11c>)
 8010810:	4813      	ldr	r0, [pc, #76]	; (8010860 <tcp_pcb_remove+0x114>)
 8010812:	f006 ff9d 	bl	8017750 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801081a:	2b00      	cmp	r3, #0
 801081c:	d006      	beq.n	801082c <tcp_pcb_remove+0xe0>
 801081e:	4b0e      	ldr	r3, [pc, #56]	; (8010858 <tcp_pcb_remove+0x10c>)
 8010820:	f640 0294 	movw	r2, #2196	; 0x894
 8010824:	4911      	ldr	r1, [pc, #68]	; (801086c <tcp_pcb_remove+0x120>)
 8010826:	480e      	ldr	r0, [pc, #56]	; (8010860 <tcp_pcb_remove+0x114>)
 8010828:	f006 ff92 	bl	8017750 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010830:	2b00      	cmp	r3, #0
 8010832:	d006      	beq.n	8010842 <tcp_pcb_remove+0xf6>
 8010834:	4b08      	ldr	r3, [pc, #32]	; (8010858 <tcp_pcb_remove+0x10c>)
 8010836:	f640 0296 	movw	r2, #2198	; 0x896
 801083a:	490d      	ldr	r1, [pc, #52]	; (8010870 <tcp_pcb_remove+0x124>)
 801083c:	4808      	ldr	r0, [pc, #32]	; (8010860 <tcp_pcb_remove+0x114>)
 801083e:	f006 ff87 	bl	8017750 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	2200      	movs	r2, #0
 8010846:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	2200      	movs	r2, #0
 801084c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801084e:	bf00      	nop
 8010850:	3710      	adds	r7, #16
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	080192bc 	.word	0x080192bc
 801085c:	08019924 	.word	0x08019924
 8010860:	08019300 	.word	0x08019300
 8010864:	08019940 	.word	0x08019940
 8010868:	08019960 	.word	0x08019960
 801086c:	08019978 	.word	0x08019978
 8010870:	08019994 	.word	0x08019994

08010874 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b082      	sub	sp, #8
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d106      	bne.n	8010890 <tcp_next_iss+0x1c>
 8010882:	4b0a      	ldr	r3, [pc, #40]	; (80108ac <tcp_next_iss+0x38>)
 8010884:	f640 02af 	movw	r2, #2223	; 0x8af
 8010888:	4909      	ldr	r1, [pc, #36]	; (80108b0 <tcp_next_iss+0x3c>)
 801088a:	480a      	ldr	r0, [pc, #40]	; (80108b4 <tcp_next_iss+0x40>)
 801088c:	f006 ff60 	bl	8017750 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010890:	4b09      	ldr	r3, [pc, #36]	; (80108b8 <tcp_next_iss+0x44>)
 8010892:	681a      	ldr	r2, [r3, #0]
 8010894:	4b09      	ldr	r3, [pc, #36]	; (80108bc <tcp_next_iss+0x48>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	4413      	add	r3, r2
 801089a:	4a07      	ldr	r2, [pc, #28]	; (80108b8 <tcp_next_iss+0x44>)
 801089c:	6013      	str	r3, [r2, #0]
  return iss;
 801089e:	4b06      	ldr	r3, [pc, #24]	; (80108b8 <tcp_next_iss+0x44>)
 80108a0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3708      	adds	r7, #8
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	080192bc 	.word	0x080192bc
 80108b0:	080199ac 	.word	0x080199ac
 80108b4:	08019300 	.word	0x08019300
 80108b8:	2400003c 	.word	0x2400003c
 80108bc:	24007858 	.word	0x24007858

080108c0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b086      	sub	sp, #24
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	4603      	mov	r3, r0
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
 80108cc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d106      	bne.n	80108e2 <tcp_eff_send_mss_netif+0x22>
 80108d4:	4b14      	ldr	r3, [pc, #80]	; (8010928 <tcp_eff_send_mss_netif+0x68>)
 80108d6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80108da:	4914      	ldr	r1, [pc, #80]	; (801092c <tcp_eff_send_mss_netif+0x6c>)
 80108dc:	4814      	ldr	r0, [pc, #80]	; (8010930 <tcp_eff_send_mss_netif+0x70>)
 80108de:	f006 ff37 	bl	8017750 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d101      	bne.n	80108ec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80108e8:	89fb      	ldrh	r3, [r7, #14]
 80108ea:	e019      	b.n	8010920 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80108f0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80108f2:	8afb      	ldrh	r3, [r7, #22]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d012      	beq.n	801091e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80108f8:	2328      	movs	r3, #40	; 0x28
 80108fa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80108fc:	8afa      	ldrh	r2, [r7, #22]
 80108fe:	8abb      	ldrh	r3, [r7, #20]
 8010900:	429a      	cmp	r2, r3
 8010902:	d904      	bls.n	801090e <tcp_eff_send_mss_netif+0x4e>
 8010904:	8afa      	ldrh	r2, [r7, #22]
 8010906:	8abb      	ldrh	r3, [r7, #20]
 8010908:	1ad3      	subs	r3, r2, r3
 801090a:	b29b      	uxth	r3, r3
 801090c:	e000      	b.n	8010910 <tcp_eff_send_mss_netif+0x50>
 801090e:	2300      	movs	r3, #0
 8010910:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010912:	8a7a      	ldrh	r2, [r7, #18]
 8010914:	89fb      	ldrh	r3, [r7, #14]
 8010916:	4293      	cmp	r3, r2
 8010918:	bf28      	it	cs
 801091a:	4613      	movcs	r3, r2
 801091c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801091e:	89fb      	ldrh	r3, [r7, #14]
}
 8010920:	4618      	mov	r0, r3
 8010922:	3718      	adds	r7, #24
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}
 8010928:	080192bc 	.word	0x080192bc
 801092c:	080199c8 	.word	0x080199c8
 8010930:	08019300 	.word	0x08019300

08010934 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
 801093c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d119      	bne.n	801097c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010948:	4b10      	ldr	r3, [pc, #64]	; (801098c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801094a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801094e:	4910      	ldr	r1, [pc, #64]	; (8010990 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010950:	4810      	ldr	r0, [pc, #64]	; (8010994 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010952:	f006 fefd 	bl	8017750 <iprintf>

  while (pcb != NULL) {
 8010956:	e011      	b.n	801097c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	429a      	cmp	r2, r3
 8010962:	d108      	bne.n	8010976 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	68db      	ldr	r3, [r3, #12]
 8010968:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801096a:	68f8      	ldr	r0, [r7, #12]
 801096c:	f7fe ffc6 	bl	800f8fc <tcp_abort>
      pcb = next;
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	60fb      	str	r3, [r7, #12]
 8010974:	e002      	b.n	801097c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	68db      	ldr	r3, [r3, #12]
 801097a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d1ea      	bne.n	8010958 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010982:	bf00      	nop
 8010984:	bf00      	nop
 8010986:	3710      	adds	r7, #16
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}
 801098c:	080192bc 	.word	0x080192bc
 8010990:	080199f0 	.word	0x080199f0
 8010994:	08019300 	.word	0x08019300

08010998 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d02a      	beq.n	80109fe <tcp_netif_ip_addr_changed+0x66>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d026      	beq.n	80109fe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80109b0:	4b15      	ldr	r3, [pc, #84]	; (8010a08 <tcp_netif_ip_addr_changed+0x70>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4619      	mov	r1, r3
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f7ff ffbc 	bl	8010934 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80109bc:	4b13      	ldr	r3, [pc, #76]	; (8010a0c <tcp_netif_ip_addr_changed+0x74>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4619      	mov	r1, r3
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f7ff ffb6 	bl	8010934 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d017      	beq.n	80109fe <tcp_netif_ip_addr_changed+0x66>
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d013      	beq.n	80109fe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80109d6:	4b0e      	ldr	r3, [pc, #56]	; (8010a10 <tcp_netif_ip_addr_changed+0x78>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	60fb      	str	r3, [r7, #12]
 80109dc:	e00c      	b.n	80109f8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d103      	bne.n	80109f2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	68db      	ldr	r3, [r3, #12]
 80109f6:	60fb      	str	r3, [r7, #12]
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1ef      	bne.n	80109de <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80109fe:	bf00      	nop
 8010a00:	3710      	adds	r7, #16
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	24007854 	.word	0x24007854
 8010a0c:	24007860 	.word	0x24007860
 8010a10:	2400785c 	.word	0x2400785c

08010a14 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d007      	beq.n	8010a34 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7ff fc3d 	bl	80102a8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2200      	movs	r2, #0
 8010a32:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010a34:	bf00      	nop
 8010a36:	3708      	adds	r7, #8
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010a3c:	b590      	push	{r4, r7, lr}
 8010a3e:	b08d      	sub	sp, #52	; 0x34
 8010a40:	af04      	add	r7, sp, #16
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d105      	bne.n	8010a58 <tcp_input+0x1c>
 8010a4c:	4b9b      	ldr	r3, [pc, #620]	; (8010cbc <tcp_input+0x280>)
 8010a4e:	2283      	movs	r2, #131	; 0x83
 8010a50:	499b      	ldr	r1, [pc, #620]	; (8010cc0 <tcp_input+0x284>)
 8010a52:	489c      	ldr	r0, [pc, #624]	; (8010cc4 <tcp_input+0x288>)
 8010a54:	f006 fe7c 	bl	8017750 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	4a9a      	ldr	r2, [pc, #616]	; (8010cc8 <tcp_input+0x28c>)
 8010a5e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	895b      	ldrh	r3, [r3, #10]
 8010a64:	2b13      	cmp	r3, #19
 8010a66:	f240 83c4 	bls.w	80111f2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010a6a:	4b98      	ldr	r3, [pc, #608]	; (8010ccc <tcp_input+0x290>)
 8010a6c:	695b      	ldr	r3, [r3, #20]
 8010a6e:	4a97      	ldr	r2, [pc, #604]	; (8010ccc <tcp_input+0x290>)
 8010a70:	6812      	ldr	r2, [r2, #0]
 8010a72:	4611      	mov	r1, r2
 8010a74:	4618      	mov	r0, r3
 8010a76:	f005 fc69 	bl	801634c <ip4_addr_isbroadcast_u32>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	f040 83ba 	bne.w	80111f6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010a82:	4b92      	ldr	r3, [pc, #584]	; (8010ccc <tcp_input+0x290>)
 8010a84:	695b      	ldr	r3, [r3, #20]
 8010a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010a8a:	2be0      	cmp	r3, #224	; 0xe0
 8010a8c:	f000 83b3 	beq.w	80111f6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010a90:	4b8d      	ldr	r3, [pc, #564]	; (8010cc8 <tcp_input+0x28c>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	899b      	ldrh	r3, [r3, #12]
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7fc fcf1 	bl	800d480 <lwip_htons>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	0b1b      	lsrs	r3, r3, #12
 8010aa2:	b29b      	uxth	r3, r3
 8010aa4:	b2db      	uxtb	r3, r3
 8010aa6:	009b      	lsls	r3, r3, #2
 8010aa8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010aaa:	7cbb      	ldrb	r3, [r7, #18]
 8010aac:	2b13      	cmp	r3, #19
 8010aae:	f240 83a4 	bls.w	80111fa <tcp_input+0x7be>
 8010ab2:	7cbb      	ldrb	r3, [r7, #18]
 8010ab4:	b29a      	uxth	r2, r3
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	891b      	ldrh	r3, [r3, #8]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	f200 839d 	bhi.w	80111fa <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010ac0:	7cbb      	ldrb	r3, [r7, #18]
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	3b14      	subs	r3, #20
 8010ac6:	b29a      	uxth	r2, r3
 8010ac8:	4b81      	ldr	r3, [pc, #516]	; (8010cd0 <tcp_input+0x294>)
 8010aca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010acc:	4b81      	ldr	r3, [pc, #516]	; (8010cd4 <tcp_input+0x298>)
 8010ace:	2200      	movs	r2, #0
 8010ad0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	895a      	ldrh	r2, [r3, #10]
 8010ad6:	7cbb      	ldrb	r3, [r7, #18]
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d309      	bcc.n	8010af2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010ade:	4b7c      	ldr	r3, [pc, #496]	; (8010cd0 <tcp_input+0x294>)
 8010ae0:	881a      	ldrh	r2, [r3, #0]
 8010ae2:	4b7d      	ldr	r3, [pc, #500]	; (8010cd8 <tcp_input+0x29c>)
 8010ae4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010ae6:	7cbb      	ldrb	r3, [r7, #18]
 8010ae8:	4619      	mov	r1, r3
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f7fe f8ec 	bl	800ecc8 <pbuf_remove_header>
 8010af0:	e04e      	b.n	8010b90 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d105      	bne.n	8010b06 <tcp_input+0xca>
 8010afa:	4b70      	ldr	r3, [pc, #448]	; (8010cbc <tcp_input+0x280>)
 8010afc:	22c2      	movs	r2, #194	; 0xc2
 8010afe:	4977      	ldr	r1, [pc, #476]	; (8010cdc <tcp_input+0x2a0>)
 8010b00:	4870      	ldr	r0, [pc, #448]	; (8010cc4 <tcp_input+0x288>)
 8010b02:	f006 fe25 	bl	8017750 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010b06:	2114      	movs	r1, #20
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f7fe f8dd 	bl	800ecc8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	895a      	ldrh	r2, [r3, #10]
 8010b12:	4b71      	ldr	r3, [pc, #452]	; (8010cd8 <tcp_input+0x29c>)
 8010b14:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010b16:	4b6e      	ldr	r3, [pc, #440]	; (8010cd0 <tcp_input+0x294>)
 8010b18:	881a      	ldrh	r2, [r3, #0]
 8010b1a:	4b6f      	ldr	r3, [pc, #444]	; (8010cd8 <tcp_input+0x29c>)
 8010b1c:	881b      	ldrh	r3, [r3, #0]
 8010b1e:	1ad3      	subs	r3, r2, r3
 8010b20:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010b22:	4b6d      	ldr	r3, [pc, #436]	; (8010cd8 <tcp_input+0x29c>)
 8010b24:	881b      	ldrh	r3, [r3, #0]
 8010b26:	4619      	mov	r1, r3
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f7fe f8cd 	bl	800ecc8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	895b      	ldrh	r3, [r3, #10]
 8010b34:	8a3a      	ldrh	r2, [r7, #16]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	f200 8361 	bhi.w	80111fe <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	4a64      	ldr	r2, [pc, #400]	; (8010cd4 <tcp_input+0x298>)
 8010b44:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	8a3a      	ldrh	r2, [r7, #16]
 8010b4c:	4611      	mov	r1, r2
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7fe f8ba 	bl	800ecc8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	891a      	ldrh	r2, [r3, #8]
 8010b58:	8a3b      	ldrh	r3, [r7, #16]
 8010b5a:	1ad3      	subs	r3, r2, r3
 8010b5c:	b29a      	uxth	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	895b      	ldrh	r3, [r3, #10]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d005      	beq.n	8010b76 <tcp_input+0x13a>
 8010b6a:	4b54      	ldr	r3, [pc, #336]	; (8010cbc <tcp_input+0x280>)
 8010b6c:	22df      	movs	r2, #223	; 0xdf
 8010b6e:	495c      	ldr	r1, [pc, #368]	; (8010ce0 <tcp_input+0x2a4>)
 8010b70:	4854      	ldr	r0, [pc, #336]	; (8010cc4 <tcp_input+0x288>)
 8010b72:	f006 fded 	bl	8017750 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	891a      	ldrh	r2, [r3, #8]
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	891b      	ldrh	r3, [r3, #8]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d005      	beq.n	8010b90 <tcp_input+0x154>
 8010b84:	4b4d      	ldr	r3, [pc, #308]	; (8010cbc <tcp_input+0x280>)
 8010b86:	22e0      	movs	r2, #224	; 0xe0
 8010b88:	4956      	ldr	r1, [pc, #344]	; (8010ce4 <tcp_input+0x2a8>)
 8010b8a:	484e      	ldr	r0, [pc, #312]	; (8010cc4 <tcp_input+0x288>)
 8010b8c:	f006 fde0 	bl	8017750 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010b90:	4b4d      	ldr	r3, [pc, #308]	; (8010cc8 <tcp_input+0x28c>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	881b      	ldrh	r3, [r3, #0]
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	4a4b      	ldr	r2, [pc, #300]	; (8010cc8 <tcp_input+0x28c>)
 8010b9a:	6814      	ldr	r4, [r2, #0]
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7fc fc6f 	bl	800d480 <lwip_htons>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010ba6:	4b48      	ldr	r3, [pc, #288]	; (8010cc8 <tcp_input+0x28c>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	885b      	ldrh	r3, [r3, #2]
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	4a46      	ldr	r2, [pc, #280]	; (8010cc8 <tcp_input+0x28c>)
 8010bb0:	6814      	ldr	r4, [r2, #0]
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7fc fc64 	bl	800d480 <lwip_htons>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010bbc:	4b42      	ldr	r3, [pc, #264]	; (8010cc8 <tcp_input+0x28c>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	4a41      	ldr	r2, [pc, #260]	; (8010cc8 <tcp_input+0x28c>)
 8010bc4:	6814      	ldr	r4, [r2, #0]
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7fc fc6f 	bl	800d4aa <lwip_htonl>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	6063      	str	r3, [r4, #4]
 8010bd0:	6863      	ldr	r3, [r4, #4]
 8010bd2:	4a45      	ldr	r2, [pc, #276]	; (8010ce8 <tcp_input+0x2ac>)
 8010bd4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010bd6:	4b3c      	ldr	r3, [pc, #240]	; (8010cc8 <tcp_input+0x28c>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	689b      	ldr	r3, [r3, #8]
 8010bdc:	4a3a      	ldr	r2, [pc, #232]	; (8010cc8 <tcp_input+0x28c>)
 8010bde:	6814      	ldr	r4, [r2, #0]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7fc fc62 	bl	800d4aa <lwip_htonl>
 8010be6:	4603      	mov	r3, r0
 8010be8:	60a3      	str	r3, [r4, #8]
 8010bea:	68a3      	ldr	r3, [r4, #8]
 8010bec:	4a3f      	ldr	r2, [pc, #252]	; (8010cec <tcp_input+0x2b0>)
 8010bee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010bf0:	4b35      	ldr	r3, [pc, #212]	; (8010cc8 <tcp_input+0x28c>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	89db      	ldrh	r3, [r3, #14]
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	4a33      	ldr	r2, [pc, #204]	; (8010cc8 <tcp_input+0x28c>)
 8010bfa:	6814      	ldr	r4, [r2, #0]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fc fc3f 	bl	800d480 <lwip_htons>
 8010c02:	4603      	mov	r3, r0
 8010c04:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010c06:	4b30      	ldr	r3, [pc, #192]	; (8010cc8 <tcp_input+0x28c>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	899b      	ldrh	r3, [r3, #12]
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fc fc36 	bl	800d480 <lwip_htons>
 8010c14:	4603      	mov	r3, r0
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c1c:	b2da      	uxtb	r2, r3
 8010c1e:	4b34      	ldr	r3, [pc, #208]	; (8010cf0 <tcp_input+0x2b4>)
 8010c20:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	891a      	ldrh	r2, [r3, #8]
 8010c26:	4b33      	ldr	r3, [pc, #204]	; (8010cf4 <tcp_input+0x2b8>)
 8010c28:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010c2a:	4b31      	ldr	r3, [pc, #196]	; (8010cf0 <tcp_input+0x2b4>)
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	f003 0303 	and.w	r3, r3, #3
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d00c      	beq.n	8010c50 <tcp_input+0x214>
    tcplen++;
 8010c36:	4b2f      	ldr	r3, [pc, #188]	; (8010cf4 <tcp_input+0x2b8>)
 8010c38:	881b      	ldrh	r3, [r3, #0]
 8010c3a:	3301      	adds	r3, #1
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	4b2d      	ldr	r3, [pc, #180]	; (8010cf4 <tcp_input+0x2b8>)
 8010c40:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	891a      	ldrh	r2, [r3, #8]
 8010c46:	4b2b      	ldr	r3, [pc, #172]	; (8010cf4 <tcp_input+0x2b8>)
 8010c48:	881b      	ldrh	r3, [r3, #0]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	f200 82d9 	bhi.w	8011202 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010c50:	2300      	movs	r3, #0
 8010c52:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c54:	4b28      	ldr	r3, [pc, #160]	; (8010cf8 <tcp_input+0x2bc>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	61fb      	str	r3, [r7, #28]
 8010c5a:	e09d      	b.n	8010d98 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010c5c:	69fb      	ldr	r3, [r7, #28]
 8010c5e:	7d1b      	ldrb	r3, [r3, #20]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d105      	bne.n	8010c70 <tcp_input+0x234>
 8010c64:	4b15      	ldr	r3, [pc, #84]	; (8010cbc <tcp_input+0x280>)
 8010c66:	22fb      	movs	r2, #251	; 0xfb
 8010c68:	4924      	ldr	r1, [pc, #144]	; (8010cfc <tcp_input+0x2c0>)
 8010c6a:	4816      	ldr	r0, [pc, #88]	; (8010cc4 <tcp_input+0x288>)
 8010c6c:	f006 fd70 	bl	8017750 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010c70:	69fb      	ldr	r3, [r7, #28]
 8010c72:	7d1b      	ldrb	r3, [r3, #20]
 8010c74:	2b0a      	cmp	r3, #10
 8010c76:	d105      	bne.n	8010c84 <tcp_input+0x248>
 8010c78:	4b10      	ldr	r3, [pc, #64]	; (8010cbc <tcp_input+0x280>)
 8010c7a:	22fc      	movs	r2, #252	; 0xfc
 8010c7c:	4920      	ldr	r1, [pc, #128]	; (8010d00 <tcp_input+0x2c4>)
 8010c7e:	4811      	ldr	r0, [pc, #68]	; (8010cc4 <tcp_input+0x288>)
 8010c80:	f006 fd66 	bl	8017750 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010c84:	69fb      	ldr	r3, [r7, #28]
 8010c86:	7d1b      	ldrb	r3, [r3, #20]
 8010c88:	2b01      	cmp	r3, #1
 8010c8a:	d105      	bne.n	8010c98 <tcp_input+0x25c>
 8010c8c:	4b0b      	ldr	r3, [pc, #44]	; (8010cbc <tcp_input+0x280>)
 8010c8e:	22fd      	movs	r2, #253	; 0xfd
 8010c90:	491c      	ldr	r1, [pc, #112]	; (8010d04 <tcp_input+0x2c8>)
 8010c92:	480c      	ldr	r0, [pc, #48]	; (8010cc4 <tcp_input+0x288>)
 8010c94:	f006 fd5c 	bl	8017750 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c98:	69fb      	ldr	r3, [r7, #28]
 8010c9a:	7a1b      	ldrb	r3, [r3, #8]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d033      	beq.n	8010d08 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010ca0:	69fb      	ldr	r3, [r7, #28]
 8010ca2:	7a1a      	ldrb	r2, [r3, #8]
 8010ca4:	4b09      	ldr	r3, [pc, #36]	; (8010ccc <tcp_input+0x290>)
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010cac:	3301      	adds	r3, #1
 8010cae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d029      	beq.n	8010d08 <tcp_input+0x2cc>
      prev = pcb;
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	61bb      	str	r3, [r7, #24]
      continue;
 8010cb8:	e06b      	b.n	8010d92 <tcp_input+0x356>
 8010cba:	bf00      	nop
 8010cbc:	08019a24 	.word	0x08019a24
 8010cc0:	08019a58 	.word	0x08019a58
 8010cc4:	08019a70 	.word	0x08019a70
 8010cc8:	2400413c 	.word	0x2400413c
 8010ccc:	24004794 	.word	0x24004794
 8010cd0:	24004140 	.word	0x24004140
 8010cd4:	24004144 	.word	0x24004144
 8010cd8:	24004142 	.word	0x24004142
 8010cdc:	08019a98 	.word	0x08019a98
 8010ce0:	08019aa8 	.word	0x08019aa8
 8010ce4:	08019ab4 	.word	0x08019ab4
 8010ce8:	2400414c 	.word	0x2400414c
 8010cec:	24004150 	.word	0x24004150
 8010cf0:	24004158 	.word	0x24004158
 8010cf4:	24004156 	.word	0x24004156
 8010cf8:	24007854 	.word	0x24007854
 8010cfc:	08019ad4 	.word	0x08019ad4
 8010d00:	08019afc 	.word	0x08019afc
 8010d04:	08019b28 	.word	0x08019b28
    }

    if (pcb->remote_port == tcphdr->src &&
 8010d08:	69fb      	ldr	r3, [r7, #28]
 8010d0a:	8b1a      	ldrh	r2, [r3, #24]
 8010d0c:	4b94      	ldr	r3, [pc, #592]	; (8010f60 <tcp_input+0x524>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	881b      	ldrh	r3, [r3, #0]
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d13a      	bne.n	8010d8e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	8ada      	ldrh	r2, [r3, #22]
 8010d1c:	4b90      	ldr	r3, [pc, #576]	; (8010f60 <tcp_input+0x524>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	885b      	ldrh	r3, [r3, #2]
 8010d22:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d132      	bne.n	8010d8e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010d28:	69fb      	ldr	r3, [r7, #28]
 8010d2a:	685a      	ldr	r2, [r3, #4]
 8010d2c:	4b8d      	ldr	r3, [pc, #564]	; (8010f64 <tcp_input+0x528>)
 8010d2e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d12c      	bne.n	8010d8e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010d34:	69fb      	ldr	r3, [r7, #28]
 8010d36:	681a      	ldr	r2, [r3, #0]
 8010d38:	4b8a      	ldr	r3, [pc, #552]	; (8010f64 <tcp_input+0x528>)
 8010d3a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d126      	bne.n	8010d8e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	69fa      	ldr	r2, [r7, #28]
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d106      	bne.n	8010d58 <tcp_input+0x31c>
 8010d4a:	4b87      	ldr	r3, [pc, #540]	; (8010f68 <tcp_input+0x52c>)
 8010d4c:	f240 120d 	movw	r2, #269	; 0x10d
 8010d50:	4986      	ldr	r1, [pc, #536]	; (8010f6c <tcp_input+0x530>)
 8010d52:	4887      	ldr	r0, [pc, #540]	; (8010f70 <tcp_input+0x534>)
 8010d54:	f006 fcfc 	bl	8017750 <iprintf>
      if (prev != NULL) {
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d00a      	beq.n	8010d74 <tcp_input+0x338>
        prev->next = pcb->next;
 8010d5e:	69fb      	ldr	r3, [r7, #28]
 8010d60:	68da      	ldr	r2, [r3, #12]
 8010d62:	69bb      	ldr	r3, [r7, #24]
 8010d64:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010d66:	4b83      	ldr	r3, [pc, #524]	; (8010f74 <tcp_input+0x538>)
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	69fb      	ldr	r3, [r7, #28]
 8010d6c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010d6e:	4a81      	ldr	r2, [pc, #516]	; (8010f74 <tcp_input+0x538>)
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	68db      	ldr	r3, [r3, #12]
 8010d78:	69fa      	ldr	r2, [r7, #28]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d111      	bne.n	8010da2 <tcp_input+0x366>
 8010d7e:	4b7a      	ldr	r3, [pc, #488]	; (8010f68 <tcp_input+0x52c>)
 8010d80:	f240 1215 	movw	r2, #277	; 0x115
 8010d84:	497c      	ldr	r1, [pc, #496]	; (8010f78 <tcp_input+0x53c>)
 8010d86:	487a      	ldr	r0, [pc, #488]	; (8010f70 <tcp_input+0x534>)
 8010d88:	f006 fce2 	bl	8017750 <iprintf>
      break;
 8010d8c:	e009      	b.n	8010da2 <tcp_input+0x366>
    }
    prev = pcb;
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d92:	69fb      	ldr	r3, [r7, #28]
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	61fb      	str	r3, [r7, #28]
 8010d98:	69fb      	ldr	r3, [r7, #28]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	f47f af5e 	bne.w	8010c5c <tcp_input+0x220>
 8010da0:	e000      	b.n	8010da4 <tcp_input+0x368>
      break;
 8010da2:	bf00      	nop
  }

  if (pcb == NULL) {
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	f040 8095 	bne.w	8010ed6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dac:	4b73      	ldr	r3, [pc, #460]	; (8010f7c <tcp_input+0x540>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	61fb      	str	r3, [r7, #28]
 8010db2:	e03f      	b.n	8010e34 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	7d1b      	ldrb	r3, [r3, #20]
 8010db8:	2b0a      	cmp	r3, #10
 8010dba:	d006      	beq.n	8010dca <tcp_input+0x38e>
 8010dbc:	4b6a      	ldr	r3, [pc, #424]	; (8010f68 <tcp_input+0x52c>)
 8010dbe:	f240 121f 	movw	r2, #287	; 0x11f
 8010dc2:	496f      	ldr	r1, [pc, #444]	; (8010f80 <tcp_input+0x544>)
 8010dc4:	486a      	ldr	r0, [pc, #424]	; (8010f70 <tcp_input+0x534>)
 8010dc6:	f006 fcc3 	bl	8017750 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010dca:	69fb      	ldr	r3, [r7, #28]
 8010dcc:	7a1b      	ldrb	r3, [r3, #8]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d009      	beq.n	8010de6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	7a1a      	ldrb	r2, [r3, #8]
 8010dd6:	4b63      	ldr	r3, [pc, #396]	; (8010f64 <tcp_input+0x528>)
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dde:	3301      	adds	r3, #1
 8010de0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d122      	bne.n	8010e2c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010de6:	69fb      	ldr	r3, [r7, #28]
 8010de8:	8b1a      	ldrh	r2, [r3, #24]
 8010dea:	4b5d      	ldr	r3, [pc, #372]	; (8010f60 <tcp_input+0x524>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	881b      	ldrh	r3, [r3, #0]
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d11b      	bne.n	8010e2e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010df6:	69fb      	ldr	r3, [r7, #28]
 8010df8:	8ada      	ldrh	r2, [r3, #22]
 8010dfa:	4b59      	ldr	r3, [pc, #356]	; (8010f60 <tcp_input+0x524>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	885b      	ldrh	r3, [r3, #2]
 8010e00:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d113      	bne.n	8010e2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e06:	69fb      	ldr	r3, [r7, #28]
 8010e08:	685a      	ldr	r2, [r3, #4]
 8010e0a:	4b56      	ldr	r3, [pc, #344]	; (8010f64 <tcp_input+0x528>)
 8010e0c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d10d      	bne.n	8010e2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010e12:	69fb      	ldr	r3, [r7, #28]
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	4b53      	ldr	r3, [pc, #332]	; (8010f64 <tcp_input+0x528>)
 8010e18:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d107      	bne.n	8010e2e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010e1e:	69f8      	ldr	r0, [r7, #28]
 8010e20:	f000 fb54 	bl	80114cc <tcp_timewait_input>
        }
        pbuf_free(p);
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f7fd ffd5 	bl	800edd4 <pbuf_free>
        return;
 8010e2a:	e1f0      	b.n	801120e <tcp_input+0x7d2>
        continue;
 8010e2c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e2e:	69fb      	ldr	r3, [r7, #28]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	61fb      	str	r3, [r7, #28]
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d1bc      	bne.n	8010db4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010e3e:	4b51      	ldr	r3, [pc, #324]	; (8010f84 <tcp_input+0x548>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	617b      	str	r3, [r7, #20]
 8010e44:	e02a      	b.n	8010e9c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	7a1b      	ldrb	r3, [r3, #8]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00c      	beq.n	8010e68 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	7a1a      	ldrb	r2, [r3, #8]
 8010e52:	4b44      	ldr	r3, [pc, #272]	; (8010f64 <tcp_input+0x528>)
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d002      	beq.n	8010e68 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	61bb      	str	r3, [r7, #24]
        continue;
 8010e66:	e016      	b.n	8010e96 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	8ada      	ldrh	r2, [r3, #22]
 8010e6c:	4b3c      	ldr	r3, [pc, #240]	; (8010f60 <tcp_input+0x524>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	885b      	ldrh	r3, [r3, #2]
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d10c      	bne.n	8010e92 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	681a      	ldr	r2, [r3, #0]
 8010e7c:	4b39      	ldr	r3, [pc, #228]	; (8010f64 <tcp_input+0x528>)
 8010e7e:	695b      	ldr	r3, [r3, #20]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d00f      	beq.n	8010ea4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00d      	beq.n	8010ea6 <tcp_input+0x46a>
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d009      	beq.n	8010ea6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	68db      	ldr	r3, [r3, #12]
 8010e9a:	617b      	str	r3, [r7, #20]
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d1d1      	bne.n	8010e46 <tcp_input+0x40a>
 8010ea2:	e000      	b.n	8010ea6 <tcp_input+0x46a>
            break;
 8010ea4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d014      	beq.n	8010ed6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d00a      	beq.n	8010ec8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	68da      	ldr	r2, [r3, #12]
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010eba:	4b32      	ldr	r3, [pc, #200]	; (8010f84 <tcp_input+0x548>)
 8010ebc:	681a      	ldr	r2, [r3, #0]
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010ec2:	4a30      	ldr	r2, [pc, #192]	; (8010f84 <tcp_input+0x548>)
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010ec8:	6978      	ldr	r0, [r7, #20]
 8010eca:	f000 fa01 	bl	80112d0 <tcp_listen_input>
      }
      pbuf_free(p);
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f7fd ff80 	bl	800edd4 <pbuf_free>
      return;
 8010ed4:	e19b      	b.n	801120e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010ed6:	69fb      	ldr	r3, [r7, #28]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	f000 8160 	beq.w	801119e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010ede:	4b2a      	ldr	r3, [pc, #168]	; (8010f88 <tcp_input+0x54c>)
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	891a      	ldrh	r2, [r3, #8]
 8010ee8:	4b27      	ldr	r3, [pc, #156]	; (8010f88 <tcp_input+0x54c>)
 8010eea:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010eec:	4a26      	ldr	r2, [pc, #152]	; (8010f88 <tcp_input+0x54c>)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010ef2:	4b1b      	ldr	r3, [pc, #108]	; (8010f60 <tcp_input+0x524>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	4a24      	ldr	r2, [pc, #144]	; (8010f88 <tcp_input+0x54c>)
 8010ef8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010efa:	4b24      	ldr	r3, [pc, #144]	; (8010f8c <tcp_input+0x550>)
 8010efc:	2200      	movs	r2, #0
 8010efe:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010f00:	4b23      	ldr	r3, [pc, #140]	; (8010f90 <tcp_input+0x554>)
 8010f02:	2200      	movs	r2, #0
 8010f04:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010f06:	4b23      	ldr	r3, [pc, #140]	; (8010f94 <tcp_input+0x558>)
 8010f08:	2200      	movs	r2, #0
 8010f0a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010f0c:	4b22      	ldr	r3, [pc, #136]	; (8010f98 <tcp_input+0x55c>)
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	f003 0308 	and.w	r3, r3, #8
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d006      	beq.n	8010f26 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	7b5b      	ldrb	r3, [r3, #13]
 8010f1c:	f043 0301 	orr.w	r3, r3, #1
 8010f20:	b2da      	uxtb	r2, r3
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d038      	beq.n	8010fa0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010f2e:	69f8      	ldr	r0, [r7, #28]
 8010f30:	f7ff f93e 	bl	80101b0 <tcp_process_refused_data>
 8010f34:	4603      	mov	r3, r0
 8010f36:	f113 0f0d 	cmn.w	r3, #13
 8010f3a:	d007      	beq.n	8010f4c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d02d      	beq.n	8010fa0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010f44:	4b15      	ldr	r3, [pc, #84]	; (8010f9c <tcp_input+0x560>)
 8010f46:	881b      	ldrh	r3, [r3, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d029      	beq.n	8010fa0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f040 8104 	bne.w	801115e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010f56:	69f8      	ldr	r0, [r7, #28]
 8010f58:	f003 f9be 	bl	80142d8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010f5c:	e0ff      	b.n	801115e <tcp_input+0x722>
 8010f5e:	bf00      	nop
 8010f60:	2400413c 	.word	0x2400413c
 8010f64:	24004794 	.word	0x24004794
 8010f68:	08019a24 	.word	0x08019a24
 8010f6c:	08019b50 	.word	0x08019b50
 8010f70:	08019a70 	.word	0x08019a70
 8010f74:	24007854 	.word	0x24007854
 8010f78:	08019b7c 	.word	0x08019b7c
 8010f7c:	24007864 	.word	0x24007864
 8010f80:	08019ba8 	.word	0x08019ba8
 8010f84:	2400785c 	.word	0x2400785c
 8010f88:	2400412c 	.word	0x2400412c
 8010f8c:	2400415c 	.word	0x2400415c
 8010f90:	24004159 	.word	0x24004159
 8010f94:	24004154 	.word	0x24004154
 8010f98:	24004158 	.word	0x24004158
 8010f9c:	24004156 	.word	0x24004156
      }
    }
    tcp_input_pcb = pcb;
 8010fa0:	4a9c      	ldr	r2, [pc, #624]	; (8011214 <tcp_input+0x7d8>)
 8010fa2:	69fb      	ldr	r3, [r7, #28]
 8010fa4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010fa6:	69f8      	ldr	r0, [r7, #28]
 8010fa8:	f000 fb0a 	bl	80115c0 <tcp_process>
 8010fac:	4603      	mov	r3, r0
 8010fae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010fb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010fb4:	f113 0f0d 	cmn.w	r3, #13
 8010fb8:	f000 80d3 	beq.w	8011162 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010fbc:	4b96      	ldr	r3, [pc, #600]	; (8011218 <tcp_input+0x7dc>)
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	f003 0308 	and.w	r3, r3, #8
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d015      	beq.n	8010ff4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d008      	beq.n	8010fe4 <tcp_input+0x5a8>
 8010fd2:	69fb      	ldr	r3, [r7, #28]
 8010fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010fd8:	69fa      	ldr	r2, [r7, #28]
 8010fda:	6912      	ldr	r2, [r2, #16]
 8010fdc:	f06f 010d 	mvn.w	r1, #13
 8010fe0:	4610      	mov	r0, r2
 8010fe2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010fe4:	69f9      	ldr	r1, [r7, #28]
 8010fe6:	488d      	ldr	r0, [pc, #564]	; (801121c <tcp_input+0x7e0>)
 8010fe8:	f7ff fbb0 	bl	801074c <tcp_pcb_remove>
        tcp_free(pcb);
 8010fec:	69f8      	ldr	r0, [r7, #28]
 8010fee:	f7fe f99d 	bl	800f32c <tcp_free>
 8010ff2:	e0c1      	b.n	8011178 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010ff8:	4b89      	ldr	r3, [pc, #548]	; (8011220 <tcp_input+0x7e4>)
 8010ffa:	881b      	ldrh	r3, [r3, #0]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d01d      	beq.n	801103c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011000:	4b87      	ldr	r3, [pc, #540]	; (8011220 <tcp_input+0x7e4>)
 8011002:	881b      	ldrh	r3, [r3, #0]
 8011004:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011006:	69fb      	ldr	r3, [r7, #28]
 8011008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801100c:	2b00      	cmp	r3, #0
 801100e:	d00a      	beq.n	8011026 <tcp_input+0x5ea>
 8011010:	69fb      	ldr	r3, [r7, #28]
 8011012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011016:	69fa      	ldr	r2, [r7, #28]
 8011018:	6910      	ldr	r0, [r2, #16]
 801101a:	89fa      	ldrh	r2, [r7, #14]
 801101c:	69f9      	ldr	r1, [r7, #28]
 801101e:	4798      	blx	r3
 8011020:	4603      	mov	r3, r0
 8011022:	74fb      	strb	r3, [r7, #19]
 8011024:	e001      	b.n	801102a <tcp_input+0x5ee>
 8011026:	2300      	movs	r3, #0
 8011028:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801102a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801102e:	f113 0f0d 	cmn.w	r3, #13
 8011032:	f000 8098 	beq.w	8011166 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011036:	4b7a      	ldr	r3, [pc, #488]	; (8011220 <tcp_input+0x7e4>)
 8011038:	2200      	movs	r2, #0
 801103a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801103c:	69f8      	ldr	r0, [r7, #28]
 801103e:	f000 f907 	bl	8011250 <tcp_input_delayed_close>
 8011042:	4603      	mov	r3, r0
 8011044:	2b00      	cmp	r3, #0
 8011046:	f040 8090 	bne.w	801116a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801104a:	4b76      	ldr	r3, [pc, #472]	; (8011224 <tcp_input+0x7e8>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d041      	beq.n	80110d6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011052:	69fb      	ldr	r3, [r7, #28]
 8011054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011056:	2b00      	cmp	r3, #0
 8011058:	d006      	beq.n	8011068 <tcp_input+0x62c>
 801105a:	4b73      	ldr	r3, [pc, #460]	; (8011228 <tcp_input+0x7ec>)
 801105c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011060:	4972      	ldr	r1, [pc, #456]	; (801122c <tcp_input+0x7f0>)
 8011062:	4873      	ldr	r0, [pc, #460]	; (8011230 <tcp_input+0x7f4>)
 8011064:	f006 fb74 	bl	8017750 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011068:	69fb      	ldr	r3, [r7, #28]
 801106a:	8b5b      	ldrh	r3, [r3, #26]
 801106c:	f003 0310 	and.w	r3, r3, #16
 8011070:	2b00      	cmp	r3, #0
 8011072:	d008      	beq.n	8011086 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011074:	4b6b      	ldr	r3, [pc, #428]	; (8011224 <tcp_input+0x7e8>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4618      	mov	r0, r3
 801107a:	f7fd feab 	bl	800edd4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801107e:	69f8      	ldr	r0, [r7, #28]
 8011080:	f7fe fc3c 	bl	800f8fc <tcp_abort>
            goto aborted;
 8011084:	e078      	b.n	8011178 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801108c:	2b00      	cmp	r3, #0
 801108e:	d00c      	beq.n	80110aa <tcp_input+0x66e>
 8011090:	69fb      	ldr	r3, [r7, #28]
 8011092:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011096:	69fb      	ldr	r3, [r7, #28]
 8011098:	6918      	ldr	r0, [r3, #16]
 801109a:	4b62      	ldr	r3, [pc, #392]	; (8011224 <tcp_input+0x7e8>)
 801109c:	681a      	ldr	r2, [r3, #0]
 801109e:	2300      	movs	r3, #0
 80110a0:	69f9      	ldr	r1, [r7, #28]
 80110a2:	47a0      	blx	r4
 80110a4:	4603      	mov	r3, r0
 80110a6:	74fb      	strb	r3, [r7, #19]
 80110a8:	e008      	b.n	80110bc <tcp_input+0x680>
 80110aa:	4b5e      	ldr	r3, [pc, #376]	; (8011224 <tcp_input+0x7e8>)
 80110ac:	681a      	ldr	r2, [r3, #0]
 80110ae:	2300      	movs	r3, #0
 80110b0:	69f9      	ldr	r1, [r7, #28]
 80110b2:	2000      	movs	r0, #0
 80110b4:	f7ff f952 	bl	801035c <tcp_recv_null>
 80110b8:	4603      	mov	r3, r0
 80110ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80110bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110c0:	f113 0f0d 	cmn.w	r3, #13
 80110c4:	d053      	beq.n	801116e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80110c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d003      	beq.n	80110d6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80110ce:	4b55      	ldr	r3, [pc, #340]	; (8011224 <tcp_input+0x7e8>)
 80110d0:	681a      	ldr	r2, [r3, #0]
 80110d2:	69fb      	ldr	r3, [r7, #28]
 80110d4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80110d6:	4b50      	ldr	r3, [pc, #320]	; (8011218 <tcp_input+0x7dc>)
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	f003 0320 	and.w	r3, r3, #32
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d030      	beq.n	8011144 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80110e2:	69fb      	ldr	r3, [r7, #28]
 80110e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d009      	beq.n	80110fe <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80110ea:	69fb      	ldr	r3, [r7, #28]
 80110ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110ee:	7b5a      	ldrb	r2, [r3, #13]
 80110f0:	69fb      	ldr	r3, [r7, #28]
 80110f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110f4:	f042 0220 	orr.w	r2, r2, #32
 80110f8:	b2d2      	uxtb	r2, r2
 80110fa:	735a      	strb	r2, [r3, #13]
 80110fc:	e022      	b.n	8011144 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80110fe:	69fb      	ldr	r3, [r7, #28]
 8011100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011102:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011106:	d005      	beq.n	8011114 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011108:	69fb      	ldr	r3, [r7, #28]
 801110a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801110c:	3301      	adds	r3, #1
 801110e:	b29a      	uxth	r2, r3
 8011110:	69fb      	ldr	r3, [r7, #28]
 8011112:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801111a:	2b00      	cmp	r3, #0
 801111c:	d00b      	beq.n	8011136 <tcp_input+0x6fa>
 801111e:	69fb      	ldr	r3, [r7, #28]
 8011120:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	6918      	ldr	r0, [r3, #16]
 8011128:	2300      	movs	r3, #0
 801112a:	2200      	movs	r2, #0
 801112c:	69f9      	ldr	r1, [r7, #28]
 801112e:	47a0      	blx	r4
 8011130:	4603      	mov	r3, r0
 8011132:	74fb      	strb	r3, [r7, #19]
 8011134:	e001      	b.n	801113a <tcp_input+0x6fe>
 8011136:	2300      	movs	r3, #0
 8011138:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801113a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801113e:	f113 0f0d 	cmn.w	r3, #13
 8011142:	d016      	beq.n	8011172 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011144:	4b33      	ldr	r3, [pc, #204]	; (8011214 <tcp_input+0x7d8>)
 8011146:	2200      	movs	r2, #0
 8011148:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801114a:	69f8      	ldr	r0, [r7, #28]
 801114c:	f000 f880 	bl	8011250 <tcp_input_delayed_close>
 8011150:	4603      	mov	r3, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d10f      	bne.n	8011176 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011156:	69f8      	ldr	r0, [r7, #28]
 8011158:	f002 fab8 	bl	80136cc <tcp_output>
 801115c:	e00c      	b.n	8011178 <tcp_input+0x73c>
        goto aborted;
 801115e:	bf00      	nop
 8011160:	e00a      	b.n	8011178 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011162:	bf00      	nop
 8011164:	e008      	b.n	8011178 <tcp_input+0x73c>
              goto aborted;
 8011166:	bf00      	nop
 8011168:	e006      	b.n	8011178 <tcp_input+0x73c>
          goto aborted;
 801116a:	bf00      	nop
 801116c:	e004      	b.n	8011178 <tcp_input+0x73c>
            goto aborted;
 801116e:	bf00      	nop
 8011170:	e002      	b.n	8011178 <tcp_input+0x73c>
              goto aborted;
 8011172:	bf00      	nop
 8011174:	e000      	b.n	8011178 <tcp_input+0x73c>
          goto aborted;
 8011176:	bf00      	nop
    tcp_input_pcb = NULL;
 8011178:	4b26      	ldr	r3, [pc, #152]	; (8011214 <tcp_input+0x7d8>)
 801117a:	2200      	movs	r2, #0
 801117c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801117e:	4b29      	ldr	r3, [pc, #164]	; (8011224 <tcp_input+0x7e8>)
 8011180:	2200      	movs	r2, #0
 8011182:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011184:	4b2b      	ldr	r3, [pc, #172]	; (8011234 <tcp_input+0x7f8>)
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d03f      	beq.n	801120c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801118c:	4b29      	ldr	r3, [pc, #164]	; (8011234 <tcp_input+0x7f8>)
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	4618      	mov	r0, r3
 8011192:	f7fd fe1f 	bl	800edd4 <pbuf_free>
      inseg.p = NULL;
 8011196:	4b27      	ldr	r3, [pc, #156]	; (8011234 <tcp_input+0x7f8>)
 8011198:	2200      	movs	r2, #0
 801119a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801119c:	e036      	b.n	801120c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801119e:	4b26      	ldr	r3, [pc, #152]	; (8011238 <tcp_input+0x7fc>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	899b      	ldrh	r3, [r3, #12]
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7fc f96a 	bl	800d480 <lwip_htons>
 80111ac:	4603      	mov	r3, r0
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	f003 0304 	and.w	r3, r3, #4
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d118      	bne.n	80111ea <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111b8:	4b20      	ldr	r3, [pc, #128]	; (801123c <tcp_input+0x800>)
 80111ba:	6819      	ldr	r1, [r3, #0]
 80111bc:	4b20      	ldr	r3, [pc, #128]	; (8011240 <tcp_input+0x804>)
 80111be:	881b      	ldrh	r3, [r3, #0]
 80111c0:	461a      	mov	r2, r3
 80111c2:	4b20      	ldr	r3, [pc, #128]	; (8011244 <tcp_input+0x808>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111c8:	4b1b      	ldr	r3, [pc, #108]	; (8011238 <tcp_input+0x7fc>)
 80111ca:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111cc:	885b      	ldrh	r3, [r3, #2]
 80111ce:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111d0:	4a19      	ldr	r2, [pc, #100]	; (8011238 <tcp_input+0x7fc>)
 80111d2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111d4:	8812      	ldrh	r2, [r2, #0]
 80111d6:	b292      	uxth	r2, r2
 80111d8:	9202      	str	r2, [sp, #8]
 80111da:	9301      	str	r3, [sp, #4]
 80111dc:	4b1a      	ldr	r3, [pc, #104]	; (8011248 <tcp_input+0x80c>)
 80111de:	9300      	str	r3, [sp, #0]
 80111e0:	4b1a      	ldr	r3, [pc, #104]	; (801124c <tcp_input+0x810>)
 80111e2:	4602      	mov	r2, r0
 80111e4:	2000      	movs	r0, #0
 80111e6:	f003 f825 	bl	8014234 <tcp_rst>
    pbuf_free(p);
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f7fd fdf2 	bl	800edd4 <pbuf_free>
  return;
 80111f0:	e00c      	b.n	801120c <tcp_input+0x7d0>
    goto dropped;
 80111f2:	bf00      	nop
 80111f4:	e006      	b.n	8011204 <tcp_input+0x7c8>
    goto dropped;
 80111f6:	bf00      	nop
 80111f8:	e004      	b.n	8011204 <tcp_input+0x7c8>
    goto dropped;
 80111fa:	bf00      	nop
 80111fc:	e002      	b.n	8011204 <tcp_input+0x7c8>
      goto dropped;
 80111fe:	bf00      	nop
 8011200:	e000      	b.n	8011204 <tcp_input+0x7c8>
      goto dropped;
 8011202:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f7fd fde5 	bl	800edd4 <pbuf_free>
 801120a:	e000      	b.n	801120e <tcp_input+0x7d2>
  return;
 801120c:	bf00      	nop
}
 801120e:	3724      	adds	r7, #36	; 0x24
 8011210:	46bd      	mov	sp, r7
 8011212:	bd90      	pop	{r4, r7, pc}
 8011214:	24007868 	.word	0x24007868
 8011218:	24004159 	.word	0x24004159
 801121c:	24007854 	.word	0x24007854
 8011220:	24004154 	.word	0x24004154
 8011224:	2400415c 	.word	0x2400415c
 8011228:	08019a24 	.word	0x08019a24
 801122c:	08019bd8 	.word	0x08019bd8
 8011230:	08019a70 	.word	0x08019a70
 8011234:	2400412c 	.word	0x2400412c
 8011238:	2400413c 	.word	0x2400413c
 801123c:	24004150 	.word	0x24004150
 8011240:	24004156 	.word	0x24004156
 8011244:	2400414c 	.word	0x2400414c
 8011248:	240047a4 	.word	0x240047a4
 801124c:	240047a8 	.word	0x240047a8

08011250 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d106      	bne.n	801126c <tcp_input_delayed_close+0x1c>
 801125e:	4b17      	ldr	r3, [pc, #92]	; (80112bc <tcp_input_delayed_close+0x6c>)
 8011260:	f240 225a 	movw	r2, #602	; 0x25a
 8011264:	4916      	ldr	r1, [pc, #88]	; (80112c0 <tcp_input_delayed_close+0x70>)
 8011266:	4817      	ldr	r0, [pc, #92]	; (80112c4 <tcp_input_delayed_close+0x74>)
 8011268:	f006 fa72 	bl	8017750 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801126c:	4b16      	ldr	r3, [pc, #88]	; (80112c8 <tcp_input_delayed_close+0x78>)
 801126e:	781b      	ldrb	r3, [r3, #0]
 8011270:	f003 0310 	and.w	r3, r3, #16
 8011274:	2b00      	cmp	r3, #0
 8011276:	d01c      	beq.n	80112b2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	8b5b      	ldrh	r3, [r3, #26]
 801127c:	f003 0310 	and.w	r3, r3, #16
 8011280:	2b00      	cmp	r3, #0
 8011282:	d10d      	bne.n	80112a0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801128a:	2b00      	cmp	r3, #0
 801128c:	d008      	beq.n	80112a0 <tcp_input_delayed_close+0x50>
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011294:	687a      	ldr	r2, [r7, #4]
 8011296:	6912      	ldr	r2, [r2, #16]
 8011298:	f06f 010e 	mvn.w	r1, #14
 801129c:	4610      	mov	r0, r2
 801129e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80112a0:	6879      	ldr	r1, [r7, #4]
 80112a2:	480a      	ldr	r0, [pc, #40]	; (80112cc <tcp_input_delayed_close+0x7c>)
 80112a4:	f7ff fa52 	bl	801074c <tcp_pcb_remove>
    tcp_free(pcb);
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f7fe f83f 	bl	800f32c <tcp_free>
    return 1;
 80112ae:	2301      	movs	r3, #1
 80112b0:	e000      	b.n	80112b4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80112b2:	2300      	movs	r3, #0
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	08019a24 	.word	0x08019a24
 80112c0:	08019bf4 	.word	0x08019bf4
 80112c4:	08019a70 	.word	0x08019a70
 80112c8:	24004159 	.word	0x24004159
 80112cc:	24007854 	.word	0x24007854

080112d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80112d0:	b590      	push	{r4, r7, lr}
 80112d2:	b08b      	sub	sp, #44	; 0x2c
 80112d4:	af04      	add	r7, sp, #16
 80112d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80112d8:	4b6f      	ldr	r3, [pc, #444]	; (8011498 <tcp_listen_input+0x1c8>)
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	f003 0304 	and.w	r3, r3, #4
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	f040 80d2 	bne.w	801148a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d106      	bne.n	80112fa <tcp_listen_input+0x2a>
 80112ec:	4b6b      	ldr	r3, [pc, #428]	; (801149c <tcp_listen_input+0x1cc>)
 80112ee:	f240 2281 	movw	r2, #641	; 0x281
 80112f2:	496b      	ldr	r1, [pc, #428]	; (80114a0 <tcp_listen_input+0x1d0>)
 80112f4:	486b      	ldr	r0, [pc, #428]	; (80114a4 <tcp_listen_input+0x1d4>)
 80112f6:	f006 fa2b 	bl	8017750 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80112fa:	4b67      	ldr	r3, [pc, #412]	; (8011498 <tcp_listen_input+0x1c8>)
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	f003 0310 	and.w	r3, r3, #16
 8011302:	2b00      	cmp	r3, #0
 8011304:	d019      	beq.n	801133a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011306:	4b68      	ldr	r3, [pc, #416]	; (80114a8 <tcp_listen_input+0x1d8>)
 8011308:	6819      	ldr	r1, [r3, #0]
 801130a:	4b68      	ldr	r3, [pc, #416]	; (80114ac <tcp_listen_input+0x1dc>)
 801130c:	881b      	ldrh	r3, [r3, #0]
 801130e:	461a      	mov	r2, r3
 8011310:	4b67      	ldr	r3, [pc, #412]	; (80114b0 <tcp_listen_input+0x1e0>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011316:	4b67      	ldr	r3, [pc, #412]	; (80114b4 <tcp_listen_input+0x1e4>)
 8011318:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801131a:	885b      	ldrh	r3, [r3, #2]
 801131c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801131e:	4a65      	ldr	r2, [pc, #404]	; (80114b4 <tcp_listen_input+0x1e4>)
 8011320:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011322:	8812      	ldrh	r2, [r2, #0]
 8011324:	b292      	uxth	r2, r2
 8011326:	9202      	str	r2, [sp, #8]
 8011328:	9301      	str	r3, [sp, #4]
 801132a:	4b63      	ldr	r3, [pc, #396]	; (80114b8 <tcp_listen_input+0x1e8>)
 801132c:	9300      	str	r3, [sp, #0]
 801132e:	4b63      	ldr	r3, [pc, #396]	; (80114bc <tcp_listen_input+0x1ec>)
 8011330:	4602      	mov	r2, r0
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f002 ff7e 	bl	8014234 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011338:	e0a9      	b.n	801148e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801133a:	4b57      	ldr	r3, [pc, #348]	; (8011498 <tcp_listen_input+0x1c8>)
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	f003 0302 	and.w	r3, r3, #2
 8011342:	2b00      	cmp	r3, #0
 8011344:	f000 80a3 	beq.w	801148e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	7d5b      	ldrb	r3, [r3, #21]
 801134c:	4618      	mov	r0, r3
 801134e:	f7ff f929 	bl	80105a4 <tcp_alloc>
 8011352:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d111      	bne.n	801137e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	699b      	ldr	r3, [r3, #24]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00a      	beq.n	8011378 <tcp_listen_input+0xa8>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	699b      	ldr	r3, [r3, #24]
 8011366:	687a      	ldr	r2, [r7, #4]
 8011368:	6910      	ldr	r0, [r2, #16]
 801136a:	f04f 32ff 	mov.w	r2, #4294967295
 801136e:	2100      	movs	r1, #0
 8011370:	4798      	blx	r3
 8011372:	4603      	mov	r3, r0
 8011374:	73bb      	strb	r3, [r7, #14]
      return;
 8011376:	e08b      	b.n	8011490 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011378:	23f0      	movs	r3, #240	; 0xf0
 801137a:	73bb      	strb	r3, [r7, #14]
      return;
 801137c:	e088      	b.n	8011490 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801137e:	4b50      	ldr	r3, [pc, #320]	; (80114c0 <tcp_listen_input+0x1f0>)
 8011380:	695a      	ldr	r2, [r3, #20]
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011386:	4b4e      	ldr	r3, [pc, #312]	; (80114c0 <tcp_listen_input+0x1f0>)
 8011388:	691a      	ldr	r2, [r3, #16]
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	8ada      	ldrh	r2, [r3, #22]
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011396:	4b47      	ldr	r3, [pc, #284]	; (80114b4 <tcp_listen_input+0x1e4>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	881b      	ldrh	r3, [r3, #0]
 801139c:	b29a      	uxth	r2, r3
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	2203      	movs	r2, #3
 80113a6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80113a8:	4b41      	ldr	r3, [pc, #260]	; (80114b0 <tcp_listen_input+0x1e0>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	1c5a      	adds	r2, r3, #1
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80113ba:	6978      	ldr	r0, [r7, #20]
 80113bc:	f7ff fa5a 	bl	8010874 <tcp_next_iss>
 80113c0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	693a      	ldr	r2, [r7, #16]
 80113c6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	693a      	ldr	r2, [r7, #16]
 80113cc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	693a      	ldr	r2, [r7, #16]
 80113d2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	693a      	ldr	r2, [r7, #16]
 80113d8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80113da:	4b35      	ldr	r3, [pc, #212]	; (80114b0 <tcp_listen_input+0x1e0>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	1e5a      	subs	r2, r3, #1
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	691a      	ldr	r2, [r3, #16]
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	7a5b      	ldrb	r3, [r3, #9]
 80113f6:	f003 030c 	and.w	r3, r3, #12
 80113fa:	b2da      	uxtb	r2, r3
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	7a1a      	ldrb	r2, [r3, #8]
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011408:	4b2e      	ldr	r3, [pc, #184]	; (80114c4 <tcp_listen_input+0x1f4>)
 801140a:	681a      	ldr	r2, [r3, #0]
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	60da      	str	r2, [r3, #12]
 8011410:	4a2c      	ldr	r2, [pc, #176]	; (80114c4 <tcp_listen_input+0x1f4>)
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	6013      	str	r3, [r2, #0]
 8011416:	f003 f8cf 	bl	80145b8 <tcp_timer_needed>
 801141a:	4b2b      	ldr	r3, [pc, #172]	; (80114c8 <tcp_listen_input+0x1f8>)
 801141c:	2201      	movs	r2, #1
 801141e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011420:	6978      	ldr	r0, [r7, #20]
 8011422:	f001 fd8d 	bl	8012f40 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011426:	4b23      	ldr	r3, [pc, #140]	; (80114b4 <tcp_listen_input+0x1e4>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	89db      	ldrh	r3, [r3, #14]
 801142c:	b29a      	uxth	r2, r3
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	3304      	adds	r3, #4
 8011448:	4618      	mov	r0, r3
 801144a:	f004 fce9 	bl	8015e20 <ip4_route>
 801144e:	4601      	mov	r1, r0
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	3304      	adds	r3, #4
 8011454:	461a      	mov	r2, r3
 8011456:	4620      	mov	r0, r4
 8011458:	f7ff fa32 	bl	80108c0 <tcp_eff_send_mss_netif>
 801145c:	4603      	mov	r3, r0
 801145e:	461a      	mov	r2, r3
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011464:	2112      	movs	r1, #18
 8011466:	6978      	ldr	r0, [r7, #20]
 8011468:	f002 f842 	bl	80134f0 <tcp_enqueue_flags>
 801146c:	4603      	mov	r3, r0
 801146e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d004      	beq.n	8011482 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011478:	2100      	movs	r1, #0
 801147a:	6978      	ldr	r0, [r7, #20]
 801147c:	f7fe f980 	bl	800f780 <tcp_abandon>
      return;
 8011480:	e006      	b.n	8011490 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011482:	6978      	ldr	r0, [r7, #20]
 8011484:	f002 f922 	bl	80136cc <tcp_output>
  return;
 8011488:	e001      	b.n	801148e <tcp_listen_input+0x1be>
    return;
 801148a:	bf00      	nop
 801148c:	e000      	b.n	8011490 <tcp_listen_input+0x1c0>
  return;
 801148e:	bf00      	nop
}
 8011490:	371c      	adds	r7, #28
 8011492:	46bd      	mov	sp, r7
 8011494:	bd90      	pop	{r4, r7, pc}
 8011496:	bf00      	nop
 8011498:	24004158 	.word	0x24004158
 801149c:	08019a24 	.word	0x08019a24
 80114a0:	08019c1c 	.word	0x08019c1c
 80114a4:	08019a70 	.word	0x08019a70
 80114a8:	24004150 	.word	0x24004150
 80114ac:	24004156 	.word	0x24004156
 80114b0:	2400414c 	.word	0x2400414c
 80114b4:	2400413c 	.word	0x2400413c
 80114b8:	240047a4 	.word	0x240047a4
 80114bc:	240047a8 	.word	0x240047a8
 80114c0:	24004794 	.word	0x24004794
 80114c4:	24007854 	.word	0x24007854
 80114c8:	24007850 	.word	0x24007850

080114cc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b086      	sub	sp, #24
 80114d0:	af04      	add	r7, sp, #16
 80114d2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80114d4:	4b2f      	ldr	r3, [pc, #188]	; (8011594 <tcp_timewait_input+0xc8>)
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	f003 0304 	and.w	r3, r3, #4
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d153      	bne.n	8011588 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d106      	bne.n	80114f4 <tcp_timewait_input+0x28>
 80114e6:	4b2c      	ldr	r3, [pc, #176]	; (8011598 <tcp_timewait_input+0xcc>)
 80114e8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80114ec:	492b      	ldr	r1, [pc, #172]	; (801159c <tcp_timewait_input+0xd0>)
 80114ee:	482c      	ldr	r0, [pc, #176]	; (80115a0 <tcp_timewait_input+0xd4>)
 80114f0:	f006 f92e 	bl	8017750 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80114f4:	4b27      	ldr	r3, [pc, #156]	; (8011594 <tcp_timewait_input+0xc8>)
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	f003 0302 	and.w	r3, r3, #2
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d02a      	beq.n	8011556 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011500:	4b28      	ldr	r3, [pc, #160]	; (80115a4 <tcp_timewait_input+0xd8>)
 8011502:	681a      	ldr	r2, [r3, #0]
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011508:	1ad3      	subs	r3, r2, r3
 801150a:	2b00      	cmp	r3, #0
 801150c:	db2d      	blt.n	801156a <tcp_timewait_input+0x9e>
 801150e:	4b25      	ldr	r3, [pc, #148]	; (80115a4 <tcp_timewait_input+0xd8>)
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011516:	6879      	ldr	r1, [r7, #4]
 8011518:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801151a:	440b      	add	r3, r1
 801151c:	1ad3      	subs	r3, r2, r3
 801151e:	2b00      	cmp	r3, #0
 8011520:	dc23      	bgt.n	801156a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011522:	4b21      	ldr	r3, [pc, #132]	; (80115a8 <tcp_timewait_input+0xdc>)
 8011524:	6819      	ldr	r1, [r3, #0]
 8011526:	4b21      	ldr	r3, [pc, #132]	; (80115ac <tcp_timewait_input+0xe0>)
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	461a      	mov	r2, r3
 801152c:	4b1d      	ldr	r3, [pc, #116]	; (80115a4 <tcp_timewait_input+0xd8>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011532:	4b1f      	ldr	r3, [pc, #124]	; (80115b0 <tcp_timewait_input+0xe4>)
 8011534:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011536:	885b      	ldrh	r3, [r3, #2]
 8011538:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801153a:	4a1d      	ldr	r2, [pc, #116]	; (80115b0 <tcp_timewait_input+0xe4>)
 801153c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801153e:	8812      	ldrh	r2, [r2, #0]
 8011540:	b292      	uxth	r2, r2
 8011542:	9202      	str	r2, [sp, #8]
 8011544:	9301      	str	r3, [sp, #4]
 8011546:	4b1b      	ldr	r3, [pc, #108]	; (80115b4 <tcp_timewait_input+0xe8>)
 8011548:	9300      	str	r3, [sp, #0]
 801154a:	4b1b      	ldr	r3, [pc, #108]	; (80115b8 <tcp_timewait_input+0xec>)
 801154c:	4602      	mov	r2, r0
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f002 fe70 	bl	8014234 <tcp_rst>
      return;
 8011554:	e01b      	b.n	801158e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011556:	4b0f      	ldr	r3, [pc, #60]	; (8011594 <tcp_timewait_input+0xc8>)
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	f003 0301 	and.w	r3, r3, #1
 801155e:	2b00      	cmp	r3, #0
 8011560:	d003      	beq.n	801156a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011562:	4b16      	ldr	r3, [pc, #88]	; (80115bc <tcp_timewait_input+0xf0>)
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801156a:	4b10      	ldr	r3, [pc, #64]	; (80115ac <tcp_timewait_input+0xe0>)
 801156c:	881b      	ldrh	r3, [r3, #0]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d00c      	beq.n	801158c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	8b5b      	ldrh	r3, [r3, #26]
 8011576:	f043 0302 	orr.w	r3, r3, #2
 801157a:	b29a      	uxth	r2, r3
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f002 f8a3 	bl	80136cc <tcp_output>
  }
  return;
 8011586:	e001      	b.n	801158c <tcp_timewait_input+0xc0>
    return;
 8011588:	bf00      	nop
 801158a:	e000      	b.n	801158e <tcp_timewait_input+0xc2>
  return;
 801158c:	bf00      	nop
}
 801158e:	3708      	adds	r7, #8
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	24004158 	.word	0x24004158
 8011598:	08019a24 	.word	0x08019a24
 801159c:	08019c3c 	.word	0x08019c3c
 80115a0:	08019a70 	.word	0x08019a70
 80115a4:	2400414c 	.word	0x2400414c
 80115a8:	24004150 	.word	0x24004150
 80115ac:	24004156 	.word	0x24004156
 80115b0:	2400413c 	.word	0x2400413c
 80115b4:	240047a4 	.word	0x240047a4
 80115b8:	240047a8 	.word	0x240047a8
 80115bc:	24007858 	.word	0x24007858

080115c0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80115c0:	b590      	push	{r4, r7, lr}
 80115c2:	b08d      	sub	sp, #52	; 0x34
 80115c4:	af04      	add	r7, sp, #16
 80115c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80115c8:	2300      	movs	r3, #0
 80115ca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80115cc:	2300      	movs	r3, #0
 80115ce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d106      	bne.n	80115e4 <tcp_process+0x24>
 80115d6:	4ba5      	ldr	r3, [pc, #660]	; (801186c <tcp_process+0x2ac>)
 80115d8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80115dc:	49a4      	ldr	r1, [pc, #656]	; (8011870 <tcp_process+0x2b0>)
 80115de:	48a5      	ldr	r0, [pc, #660]	; (8011874 <tcp_process+0x2b4>)
 80115e0:	f006 f8b6 	bl	8017750 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80115e4:	4ba4      	ldr	r3, [pc, #656]	; (8011878 <tcp_process+0x2b8>)
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	f003 0304 	and.w	r3, r3, #4
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d04e      	beq.n	801168e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	7d1b      	ldrb	r3, [r3, #20]
 80115f4:	2b02      	cmp	r3, #2
 80115f6:	d108      	bne.n	801160a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80115fc:	4b9f      	ldr	r3, [pc, #636]	; (801187c <tcp_process+0x2bc>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	429a      	cmp	r2, r3
 8011602:	d123      	bne.n	801164c <tcp_process+0x8c>
        acceptable = 1;
 8011604:	2301      	movs	r3, #1
 8011606:	76fb      	strb	r3, [r7, #27]
 8011608:	e020      	b.n	801164c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801160e:	4b9c      	ldr	r3, [pc, #624]	; (8011880 <tcp_process+0x2c0>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	429a      	cmp	r2, r3
 8011614:	d102      	bne.n	801161c <tcp_process+0x5c>
        acceptable = 1;
 8011616:	2301      	movs	r3, #1
 8011618:	76fb      	strb	r3, [r7, #27]
 801161a:	e017      	b.n	801164c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801161c:	4b98      	ldr	r3, [pc, #608]	; (8011880 <tcp_process+0x2c0>)
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011624:	1ad3      	subs	r3, r2, r3
 8011626:	2b00      	cmp	r3, #0
 8011628:	db10      	blt.n	801164c <tcp_process+0x8c>
 801162a:	4b95      	ldr	r3, [pc, #596]	; (8011880 <tcp_process+0x2c0>)
 801162c:	681a      	ldr	r2, [r3, #0]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011632:	6879      	ldr	r1, [r7, #4]
 8011634:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011636:	440b      	add	r3, r1
 8011638:	1ad3      	subs	r3, r2, r3
 801163a:	2b00      	cmp	r3, #0
 801163c:	dc06      	bgt.n	801164c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	8b5b      	ldrh	r3, [r3, #26]
 8011642:	f043 0302 	orr.w	r3, r3, #2
 8011646:	b29a      	uxth	r2, r3
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801164c:	7efb      	ldrb	r3, [r7, #27]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d01b      	beq.n	801168a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	7d1b      	ldrb	r3, [r3, #20]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d106      	bne.n	8011668 <tcp_process+0xa8>
 801165a:	4b84      	ldr	r3, [pc, #528]	; (801186c <tcp_process+0x2ac>)
 801165c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011660:	4988      	ldr	r1, [pc, #544]	; (8011884 <tcp_process+0x2c4>)
 8011662:	4884      	ldr	r0, [pc, #528]	; (8011874 <tcp_process+0x2b4>)
 8011664:	f006 f874 	bl	8017750 <iprintf>
      recv_flags |= TF_RESET;
 8011668:	4b87      	ldr	r3, [pc, #540]	; (8011888 <tcp_process+0x2c8>)
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	f043 0308 	orr.w	r3, r3, #8
 8011670:	b2da      	uxtb	r2, r3
 8011672:	4b85      	ldr	r3, [pc, #532]	; (8011888 <tcp_process+0x2c8>)
 8011674:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	8b5b      	ldrh	r3, [r3, #26]
 801167a:	f023 0301 	bic.w	r3, r3, #1
 801167e:	b29a      	uxth	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011684:	f06f 030d 	mvn.w	r3, #13
 8011688:	e37a      	b.n	8011d80 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801168a:	2300      	movs	r3, #0
 801168c:	e378      	b.n	8011d80 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801168e:	4b7a      	ldr	r3, [pc, #488]	; (8011878 <tcp_process+0x2b8>)
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	f003 0302 	and.w	r3, r3, #2
 8011696:	2b00      	cmp	r3, #0
 8011698:	d010      	beq.n	80116bc <tcp_process+0xfc>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	7d1b      	ldrb	r3, [r3, #20]
 801169e:	2b02      	cmp	r3, #2
 80116a0:	d00c      	beq.n	80116bc <tcp_process+0xfc>
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	7d1b      	ldrb	r3, [r3, #20]
 80116a6:	2b03      	cmp	r3, #3
 80116a8:	d008      	beq.n	80116bc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	8b5b      	ldrh	r3, [r3, #26]
 80116ae:	f043 0302 	orr.w	r3, r3, #2
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80116b8:	2300      	movs	r3, #0
 80116ba:	e361      	b.n	8011d80 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	8b5b      	ldrh	r3, [r3, #26]
 80116c0:	f003 0310 	and.w	r3, r3, #16
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d103      	bne.n	80116d0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80116c8:	4b70      	ldr	r3, [pc, #448]	; (801188c <tcp_process+0x2cc>)
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2200      	movs	r2, #0
 80116d4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2200      	movs	r2, #0
 80116dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f001 fc2d 	bl	8012f40 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	7d1b      	ldrb	r3, [r3, #20]
 80116ea:	3b02      	subs	r3, #2
 80116ec:	2b07      	cmp	r3, #7
 80116ee:	f200 8337 	bhi.w	8011d60 <tcp_process+0x7a0>
 80116f2:	a201      	add	r2, pc, #4	; (adr r2, 80116f8 <tcp_process+0x138>)
 80116f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116f8:	08011719 	.word	0x08011719
 80116fc:	08011949 	.word	0x08011949
 8011700:	08011ac1 	.word	0x08011ac1
 8011704:	08011aeb 	.word	0x08011aeb
 8011708:	08011c0f 	.word	0x08011c0f
 801170c:	08011ac1 	.word	0x08011ac1
 8011710:	08011c9b 	.word	0x08011c9b
 8011714:	08011d2b 	.word	0x08011d2b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011718:	4b57      	ldr	r3, [pc, #348]	; (8011878 <tcp_process+0x2b8>)
 801171a:	781b      	ldrb	r3, [r3, #0]
 801171c:	f003 0310 	and.w	r3, r3, #16
 8011720:	2b00      	cmp	r3, #0
 8011722:	f000 80e4 	beq.w	80118ee <tcp_process+0x32e>
 8011726:	4b54      	ldr	r3, [pc, #336]	; (8011878 <tcp_process+0x2b8>)
 8011728:	781b      	ldrb	r3, [r3, #0]
 801172a:	f003 0302 	and.w	r3, r3, #2
 801172e:	2b00      	cmp	r3, #0
 8011730:	f000 80dd 	beq.w	80118ee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011738:	1c5a      	adds	r2, r3, #1
 801173a:	4b50      	ldr	r3, [pc, #320]	; (801187c <tcp_process+0x2bc>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	429a      	cmp	r2, r3
 8011740:	f040 80d5 	bne.w	80118ee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011744:	4b4e      	ldr	r3, [pc, #312]	; (8011880 <tcp_process+0x2c0>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	1c5a      	adds	r2, r3, #1
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011756:	4b49      	ldr	r3, [pc, #292]	; (801187c <tcp_process+0x2bc>)
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801175e:	4b4c      	ldr	r3, [pc, #304]	; (8011890 <tcp_process+0x2d0>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	89db      	ldrh	r3, [r3, #14]
 8011764:	b29a      	uxth	r2, r3
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011778:	4b41      	ldr	r3, [pc, #260]	; (8011880 <tcp_process+0x2c0>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	1e5a      	subs	r2, r3, #1
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2204      	movs	r2, #4
 8011786:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	3304      	adds	r3, #4
 8011790:	4618      	mov	r0, r3
 8011792:	f004 fb45 	bl	8015e20 <ip4_route>
 8011796:	4601      	mov	r1, r0
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	3304      	adds	r3, #4
 801179c:	461a      	mov	r2, r3
 801179e:	4620      	mov	r0, r4
 80117a0:	f7ff f88e 	bl	80108c0 <tcp_eff_send_mss_netif>
 80117a4:	4603      	mov	r3, r0
 80117a6:	461a      	mov	r2, r3
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117b0:	009a      	lsls	r2, r3, #2
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117b6:	005b      	lsls	r3, r3, #1
 80117b8:	f241 111c 	movw	r1, #4380	; 0x111c
 80117bc:	428b      	cmp	r3, r1
 80117be:	bf38      	it	cc
 80117c0:	460b      	movcc	r3, r1
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d204      	bcs.n	80117d0 <tcp_process+0x210>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117ca:	009b      	lsls	r3, r3, #2
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	e00d      	b.n	80117ec <tcp_process+0x22c>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117d4:	005b      	lsls	r3, r3, #1
 80117d6:	f241 121c 	movw	r2, #4380	; 0x111c
 80117da:	4293      	cmp	r3, r2
 80117dc:	d904      	bls.n	80117e8 <tcp_process+0x228>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117e2:	005b      	lsls	r3, r3, #1
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	e001      	b.n	80117ec <tcp_process+0x22c>
 80117e8:	f241 131c 	movw	r3, #4380	; 0x111c
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d106      	bne.n	801180a <tcp_process+0x24a>
 80117fc:	4b1b      	ldr	r3, [pc, #108]	; (801186c <tcp_process+0x2ac>)
 80117fe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011802:	4924      	ldr	r1, [pc, #144]	; (8011894 <tcp_process+0x2d4>)
 8011804:	481b      	ldr	r0, [pc, #108]	; (8011874 <tcp_process+0x2b4>)
 8011806:	f005 ffa3 	bl	8017750 <iprintf>
        --pcb->snd_queuelen;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011810:	3b01      	subs	r3, #1
 8011812:	b29a      	uxth	r2, r3
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801181e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d111      	bne.n	801184a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801182a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d106      	bne.n	8011840 <tcp_process+0x280>
 8011832:	4b0e      	ldr	r3, [pc, #56]	; (801186c <tcp_process+0x2ac>)
 8011834:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011838:	4917      	ldr	r1, [pc, #92]	; (8011898 <tcp_process+0x2d8>)
 801183a:	480e      	ldr	r0, [pc, #56]	; (8011874 <tcp_process+0x2b4>)
 801183c:	f005 ff88 	bl	8017750 <iprintf>
          pcb->unsent = rseg->next;
 8011840:	69fb      	ldr	r3, [r7, #28]
 8011842:	681a      	ldr	r2, [r3, #0]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	66da      	str	r2, [r3, #108]	; 0x6c
 8011848:	e003      	b.n	8011852 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	681a      	ldr	r2, [r3, #0]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011852:	69f8      	ldr	r0, [r7, #28]
 8011854:	f7fe fd3d 	bl	80102d2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801185c:	2b00      	cmp	r3, #0
 801185e:	d11d      	bne.n	801189c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011866:	861a      	strh	r2, [r3, #48]	; 0x30
 8011868:	e01f      	b.n	80118aa <tcp_process+0x2ea>
 801186a:	bf00      	nop
 801186c:	08019a24 	.word	0x08019a24
 8011870:	08019c5c 	.word	0x08019c5c
 8011874:	08019a70 	.word	0x08019a70
 8011878:	24004158 	.word	0x24004158
 801187c:	24004150 	.word	0x24004150
 8011880:	2400414c 	.word	0x2400414c
 8011884:	08019c78 	.word	0x08019c78
 8011888:	24004159 	.word	0x24004159
 801188c:	24007858 	.word	0x24007858
 8011890:	2400413c 	.word	0x2400413c
 8011894:	08019c98 	.word	0x08019c98
 8011898:	08019cb0 	.word	0x08019cb0
        } else {
          pcb->rtime = 0;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2200      	movs	r2, #0
 80118a0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2200      	movs	r2, #0
 80118a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d00a      	beq.n	80118ca <tcp_process+0x30a>
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118ba:	687a      	ldr	r2, [r7, #4]
 80118bc:	6910      	ldr	r0, [r2, #16]
 80118be:	2200      	movs	r2, #0
 80118c0:	6879      	ldr	r1, [r7, #4]
 80118c2:	4798      	blx	r3
 80118c4:	4603      	mov	r3, r0
 80118c6:	76bb      	strb	r3, [r7, #26]
 80118c8:	e001      	b.n	80118ce <tcp_process+0x30e>
 80118ca:	2300      	movs	r3, #0
 80118cc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80118ce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80118d2:	f113 0f0d 	cmn.w	r3, #13
 80118d6:	d102      	bne.n	80118de <tcp_process+0x31e>
          return ERR_ABRT;
 80118d8:	f06f 030c 	mvn.w	r3, #12
 80118dc:	e250      	b.n	8011d80 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	8b5b      	ldrh	r3, [r3, #26]
 80118e2:	f043 0302 	orr.w	r3, r3, #2
 80118e6:	b29a      	uxth	r2, r3
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80118ec:	e23a      	b.n	8011d64 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80118ee:	4b9d      	ldr	r3, [pc, #628]	; (8011b64 <tcp_process+0x5a4>)
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	f003 0310 	and.w	r3, r3, #16
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	f000 8234 	beq.w	8011d64 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118fc:	4b9a      	ldr	r3, [pc, #616]	; (8011b68 <tcp_process+0x5a8>)
 80118fe:	6819      	ldr	r1, [r3, #0]
 8011900:	4b9a      	ldr	r3, [pc, #616]	; (8011b6c <tcp_process+0x5ac>)
 8011902:	881b      	ldrh	r3, [r3, #0]
 8011904:	461a      	mov	r2, r3
 8011906:	4b9a      	ldr	r3, [pc, #616]	; (8011b70 <tcp_process+0x5b0>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801190c:	4b99      	ldr	r3, [pc, #612]	; (8011b74 <tcp_process+0x5b4>)
 801190e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011910:	885b      	ldrh	r3, [r3, #2]
 8011912:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011914:	4a97      	ldr	r2, [pc, #604]	; (8011b74 <tcp_process+0x5b4>)
 8011916:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011918:	8812      	ldrh	r2, [r2, #0]
 801191a:	b292      	uxth	r2, r2
 801191c:	9202      	str	r2, [sp, #8]
 801191e:	9301      	str	r3, [sp, #4]
 8011920:	4b95      	ldr	r3, [pc, #596]	; (8011b78 <tcp_process+0x5b8>)
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	4b95      	ldr	r3, [pc, #596]	; (8011b7c <tcp_process+0x5bc>)
 8011926:	4602      	mov	r2, r0
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f002 fc83 	bl	8014234 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011934:	2b05      	cmp	r3, #5
 8011936:	f200 8215 	bhi.w	8011d64 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2200      	movs	r2, #0
 801193e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f002 fa4d 	bl	8013de0 <tcp_rexmit_rto>
      break;
 8011946:	e20d      	b.n	8011d64 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011948:	4b86      	ldr	r3, [pc, #536]	; (8011b64 <tcp_process+0x5a4>)
 801194a:	781b      	ldrb	r3, [r3, #0]
 801194c:	f003 0310 	and.w	r3, r3, #16
 8011950:	2b00      	cmp	r3, #0
 8011952:	f000 80a1 	beq.w	8011a98 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011956:	4b84      	ldr	r3, [pc, #528]	; (8011b68 <tcp_process+0x5a8>)
 8011958:	681a      	ldr	r2, [r3, #0]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801195e:	1ad3      	subs	r3, r2, r3
 8011960:	3b01      	subs	r3, #1
 8011962:	2b00      	cmp	r3, #0
 8011964:	db7e      	blt.n	8011a64 <tcp_process+0x4a4>
 8011966:	4b80      	ldr	r3, [pc, #512]	; (8011b68 <tcp_process+0x5a8>)
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801196e:	1ad3      	subs	r3, r2, r3
 8011970:	2b00      	cmp	r3, #0
 8011972:	dc77      	bgt.n	8011a64 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2204      	movs	r2, #4
 8011978:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801197e:	2b00      	cmp	r3, #0
 8011980:	d102      	bne.n	8011988 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011982:	23fa      	movs	r3, #250	; 0xfa
 8011984:	76bb      	strb	r3, [r7, #26]
 8011986:	e01d      	b.n	80119c4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801198c:	699b      	ldr	r3, [r3, #24]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d106      	bne.n	80119a0 <tcp_process+0x3e0>
 8011992:	4b7b      	ldr	r3, [pc, #492]	; (8011b80 <tcp_process+0x5c0>)
 8011994:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011998:	497a      	ldr	r1, [pc, #488]	; (8011b84 <tcp_process+0x5c4>)
 801199a:	487b      	ldr	r0, [pc, #492]	; (8011b88 <tcp_process+0x5c8>)
 801199c:	f005 fed8 	bl	8017750 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80119a4:	699b      	ldr	r3, [r3, #24]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d00a      	beq.n	80119c0 <tcp_process+0x400>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80119ae:	699b      	ldr	r3, [r3, #24]
 80119b0:	687a      	ldr	r2, [r7, #4]
 80119b2:	6910      	ldr	r0, [r2, #16]
 80119b4:	2200      	movs	r2, #0
 80119b6:	6879      	ldr	r1, [r7, #4]
 80119b8:	4798      	blx	r3
 80119ba:	4603      	mov	r3, r0
 80119bc:	76bb      	strb	r3, [r7, #26]
 80119be:	e001      	b.n	80119c4 <tcp_process+0x404>
 80119c0:	23f0      	movs	r3, #240	; 0xf0
 80119c2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80119c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d00a      	beq.n	80119e2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80119cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80119d0:	f113 0f0d 	cmn.w	r3, #13
 80119d4:	d002      	beq.n	80119dc <tcp_process+0x41c>
              tcp_abort(pcb);
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f7fd ff90 	bl	800f8fc <tcp_abort>
            }
            return ERR_ABRT;
 80119dc:	f06f 030c 	mvn.w	r3, #12
 80119e0:	e1ce      	b.n	8011d80 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f000 fae0 	bl	8011fa8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80119e8:	4b68      	ldr	r3, [pc, #416]	; (8011b8c <tcp_process+0x5cc>)
 80119ea:	881b      	ldrh	r3, [r3, #0]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d005      	beq.n	80119fc <tcp_process+0x43c>
            recv_acked--;
 80119f0:	4b66      	ldr	r3, [pc, #408]	; (8011b8c <tcp_process+0x5cc>)
 80119f2:	881b      	ldrh	r3, [r3, #0]
 80119f4:	3b01      	subs	r3, #1
 80119f6:	b29a      	uxth	r2, r3
 80119f8:	4b64      	ldr	r3, [pc, #400]	; (8011b8c <tcp_process+0x5cc>)
 80119fa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a00:	009a      	lsls	r2, r3, #2
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a06:	005b      	lsls	r3, r3, #1
 8011a08:	f241 111c 	movw	r1, #4380	; 0x111c
 8011a0c:	428b      	cmp	r3, r1
 8011a0e:	bf38      	it	cc
 8011a10:	460b      	movcc	r3, r1
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d204      	bcs.n	8011a20 <tcp_process+0x460>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a1a:	009b      	lsls	r3, r3, #2
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	e00d      	b.n	8011a3c <tcp_process+0x47c>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a24:	005b      	lsls	r3, r3, #1
 8011a26:	f241 121c 	movw	r2, #4380	; 0x111c
 8011a2a:	4293      	cmp	r3, r2
 8011a2c:	d904      	bls.n	8011a38 <tcp_process+0x478>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a32:	005b      	lsls	r3, r3, #1
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	e001      	b.n	8011a3c <tcp_process+0x47c>
 8011a38:	f241 131c 	movw	r3, #4380	; 0x111c
 8011a3c:	687a      	ldr	r2, [r7, #4]
 8011a3e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011a42:	4b53      	ldr	r3, [pc, #332]	; (8011b90 <tcp_process+0x5d0>)
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	f003 0320 	and.w	r3, r3, #32
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d037      	beq.n	8011abe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	8b5b      	ldrh	r3, [r3, #26]
 8011a52:	f043 0302 	orr.w	r3, r3, #2
 8011a56:	b29a      	uxth	r2, r3
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2207      	movs	r2, #7
 8011a60:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011a62:	e02c      	b.n	8011abe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a64:	4b40      	ldr	r3, [pc, #256]	; (8011b68 <tcp_process+0x5a8>)
 8011a66:	6819      	ldr	r1, [r3, #0]
 8011a68:	4b40      	ldr	r3, [pc, #256]	; (8011b6c <tcp_process+0x5ac>)
 8011a6a:	881b      	ldrh	r3, [r3, #0]
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	4b40      	ldr	r3, [pc, #256]	; (8011b70 <tcp_process+0x5b0>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a74:	4b3f      	ldr	r3, [pc, #252]	; (8011b74 <tcp_process+0x5b4>)
 8011a76:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a78:	885b      	ldrh	r3, [r3, #2]
 8011a7a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a7c:	4a3d      	ldr	r2, [pc, #244]	; (8011b74 <tcp_process+0x5b4>)
 8011a7e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a80:	8812      	ldrh	r2, [r2, #0]
 8011a82:	b292      	uxth	r2, r2
 8011a84:	9202      	str	r2, [sp, #8]
 8011a86:	9301      	str	r3, [sp, #4]
 8011a88:	4b3b      	ldr	r3, [pc, #236]	; (8011b78 <tcp_process+0x5b8>)
 8011a8a:	9300      	str	r3, [sp, #0]
 8011a8c:	4b3b      	ldr	r3, [pc, #236]	; (8011b7c <tcp_process+0x5bc>)
 8011a8e:	4602      	mov	r2, r0
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f002 fbcf 	bl	8014234 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011a96:	e167      	b.n	8011d68 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011a98:	4b32      	ldr	r3, [pc, #200]	; (8011b64 <tcp_process+0x5a4>)
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	f003 0302 	and.w	r3, r3, #2
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f000 8161 	beq.w	8011d68 <tcp_process+0x7a8>
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aaa:	1e5a      	subs	r2, r3, #1
 8011aac:	4b30      	ldr	r3, [pc, #192]	; (8011b70 <tcp_process+0x5b0>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	f040 8159 	bne.w	8011d68 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f002 f9b4 	bl	8013e24 <tcp_rexmit>
      break;
 8011abc:	e154      	b.n	8011d68 <tcp_process+0x7a8>
 8011abe:	e153      	b.n	8011d68 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f000 fa71 	bl	8011fa8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011ac6:	4b32      	ldr	r3, [pc, #200]	; (8011b90 <tcp_process+0x5d0>)
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	f003 0320 	and.w	r3, r3, #32
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	f000 814c 	beq.w	8011d6c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	8b5b      	ldrh	r3, [r3, #26]
 8011ad8:	f043 0302 	orr.w	r3, r3, #2
 8011adc:	b29a      	uxth	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2207      	movs	r2, #7
 8011ae6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011ae8:	e140      	b.n	8011d6c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f000 fa5c 	bl	8011fa8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011af0:	4b27      	ldr	r3, [pc, #156]	; (8011b90 <tcp_process+0x5d0>)
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	f003 0320 	and.w	r3, r3, #32
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d071      	beq.n	8011be0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011afc:	4b19      	ldr	r3, [pc, #100]	; (8011b64 <tcp_process+0x5a4>)
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	f003 0310 	and.w	r3, r3, #16
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d060      	beq.n	8011bca <tcp_process+0x60a>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b0c:	4b16      	ldr	r3, [pc, #88]	; (8011b68 <tcp_process+0x5a8>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d15a      	bne.n	8011bca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d156      	bne.n	8011bca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	8b5b      	ldrh	r3, [r3, #26]
 8011b20:	f043 0302 	orr.w	r3, r3, #2
 8011b24:	b29a      	uxth	r2, r3
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f7fe fdbe 	bl	80106ac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011b30:	4b18      	ldr	r3, [pc, #96]	; (8011b94 <tcp_process+0x5d4>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	687a      	ldr	r2, [r7, #4]
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d105      	bne.n	8011b46 <tcp_process+0x586>
 8011b3a:	4b16      	ldr	r3, [pc, #88]	; (8011b94 <tcp_process+0x5d4>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	68db      	ldr	r3, [r3, #12]
 8011b40:	4a14      	ldr	r2, [pc, #80]	; (8011b94 <tcp_process+0x5d4>)
 8011b42:	6013      	str	r3, [r2, #0]
 8011b44:	e02e      	b.n	8011ba4 <tcp_process+0x5e4>
 8011b46:	4b13      	ldr	r3, [pc, #76]	; (8011b94 <tcp_process+0x5d4>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	617b      	str	r3, [r7, #20]
 8011b4c:	e027      	b.n	8011b9e <tcp_process+0x5de>
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	68db      	ldr	r3, [r3, #12]
 8011b52:	687a      	ldr	r2, [r7, #4]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d11f      	bne.n	8011b98 <tcp_process+0x5d8>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	68da      	ldr	r2, [r3, #12]
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	60da      	str	r2, [r3, #12]
 8011b60:	e020      	b.n	8011ba4 <tcp_process+0x5e4>
 8011b62:	bf00      	nop
 8011b64:	24004158 	.word	0x24004158
 8011b68:	24004150 	.word	0x24004150
 8011b6c:	24004156 	.word	0x24004156
 8011b70:	2400414c 	.word	0x2400414c
 8011b74:	2400413c 	.word	0x2400413c
 8011b78:	240047a4 	.word	0x240047a4
 8011b7c:	240047a8 	.word	0x240047a8
 8011b80:	08019a24 	.word	0x08019a24
 8011b84:	08019cc4 	.word	0x08019cc4
 8011b88:	08019a70 	.word	0x08019a70
 8011b8c:	24004154 	.word	0x24004154
 8011b90:	24004159 	.word	0x24004159
 8011b94:	24007854 	.word	0x24007854
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	68db      	ldr	r3, [r3, #12]
 8011b9c:	617b      	str	r3, [r7, #20]
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d1d4      	bne.n	8011b4e <tcp_process+0x58e>
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	60da      	str	r2, [r3, #12]
 8011baa:	4b77      	ldr	r3, [pc, #476]	; (8011d88 <tcp_process+0x7c8>)
 8011bac:	2201      	movs	r2, #1
 8011bae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	220a      	movs	r2, #10
 8011bb4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011bb6:	4b75      	ldr	r3, [pc, #468]	; (8011d8c <tcp_process+0x7cc>)
 8011bb8:	681a      	ldr	r2, [r3, #0]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	60da      	str	r2, [r3, #12]
 8011bbe:	4a73      	ldr	r2, [pc, #460]	; (8011d8c <tcp_process+0x7cc>)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6013      	str	r3, [r2, #0]
 8011bc4:	f002 fcf8 	bl	80145b8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011bc8:	e0d2      	b.n	8011d70 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	8b5b      	ldrh	r3, [r3, #26]
 8011bce:	f043 0302 	orr.w	r3, r3, #2
 8011bd2:	b29a      	uxth	r2, r3
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2208      	movs	r2, #8
 8011bdc:	751a      	strb	r2, [r3, #20]
      break;
 8011bde:	e0c7      	b.n	8011d70 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011be0:	4b6b      	ldr	r3, [pc, #428]	; (8011d90 <tcp_process+0x7d0>)
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	f003 0310 	and.w	r3, r3, #16
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	f000 80c1 	beq.w	8011d70 <tcp_process+0x7b0>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bf2:	4b68      	ldr	r3, [pc, #416]	; (8011d94 <tcp_process+0x7d4>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	f040 80ba 	bne.w	8011d70 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	f040 80b5 	bne.w	8011d70 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2206      	movs	r2, #6
 8011c0a:	751a      	strb	r2, [r3, #20]
      break;
 8011c0c:	e0b0      	b.n	8011d70 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f000 f9ca 	bl	8011fa8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011c14:	4b60      	ldr	r3, [pc, #384]	; (8011d98 <tcp_process+0x7d8>)
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	f003 0320 	and.w	r3, r3, #32
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	f000 80a9 	beq.w	8011d74 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	8b5b      	ldrh	r3, [r3, #26]
 8011c26:	f043 0302 	orr.w	r3, r3, #2
 8011c2a:	b29a      	uxth	r2, r3
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f7fe fd3b 	bl	80106ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011c36:	4b59      	ldr	r3, [pc, #356]	; (8011d9c <tcp_process+0x7dc>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	687a      	ldr	r2, [r7, #4]
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	d105      	bne.n	8011c4c <tcp_process+0x68c>
 8011c40:	4b56      	ldr	r3, [pc, #344]	; (8011d9c <tcp_process+0x7dc>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	68db      	ldr	r3, [r3, #12]
 8011c46:	4a55      	ldr	r2, [pc, #340]	; (8011d9c <tcp_process+0x7dc>)
 8011c48:	6013      	str	r3, [r2, #0]
 8011c4a:	e013      	b.n	8011c74 <tcp_process+0x6b4>
 8011c4c:	4b53      	ldr	r3, [pc, #332]	; (8011d9c <tcp_process+0x7dc>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	613b      	str	r3, [r7, #16]
 8011c52:	e00c      	b.n	8011c6e <tcp_process+0x6ae>
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	68db      	ldr	r3, [r3, #12]
 8011c58:	687a      	ldr	r2, [r7, #4]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d104      	bne.n	8011c68 <tcp_process+0x6a8>
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	68da      	ldr	r2, [r3, #12]
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	60da      	str	r2, [r3, #12]
 8011c66:	e005      	b.n	8011c74 <tcp_process+0x6b4>
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	613b      	str	r3, [r7, #16]
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d1ef      	bne.n	8011c54 <tcp_process+0x694>
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2200      	movs	r2, #0
 8011c78:	60da      	str	r2, [r3, #12]
 8011c7a:	4b43      	ldr	r3, [pc, #268]	; (8011d88 <tcp_process+0x7c8>)
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	220a      	movs	r2, #10
 8011c84:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011c86:	4b41      	ldr	r3, [pc, #260]	; (8011d8c <tcp_process+0x7cc>)
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	60da      	str	r2, [r3, #12]
 8011c8e:	4a3f      	ldr	r2, [pc, #252]	; (8011d8c <tcp_process+0x7cc>)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6013      	str	r3, [r2, #0]
 8011c94:	f002 fc90 	bl	80145b8 <tcp_timer_needed>
      }
      break;
 8011c98:	e06c      	b.n	8011d74 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f000 f984 	bl	8011fa8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011ca0:	4b3b      	ldr	r3, [pc, #236]	; (8011d90 <tcp_process+0x7d0>)
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	f003 0310 	and.w	r3, r3, #16
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d065      	beq.n	8011d78 <tcp_process+0x7b8>
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011cb0:	4b38      	ldr	r3, [pc, #224]	; (8011d94 <tcp_process+0x7d4>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d15f      	bne.n	8011d78 <tcp_process+0x7b8>
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d15b      	bne.n	8011d78 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f7fe fcf3 	bl	80106ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011cc6:	4b35      	ldr	r3, [pc, #212]	; (8011d9c <tcp_process+0x7dc>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	687a      	ldr	r2, [r7, #4]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d105      	bne.n	8011cdc <tcp_process+0x71c>
 8011cd0:	4b32      	ldr	r3, [pc, #200]	; (8011d9c <tcp_process+0x7dc>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	68db      	ldr	r3, [r3, #12]
 8011cd6:	4a31      	ldr	r2, [pc, #196]	; (8011d9c <tcp_process+0x7dc>)
 8011cd8:	6013      	str	r3, [r2, #0]
 8011cda:	e013      	b.n	8011d04 <tcp_process+0x744>
 8011cdc:	4b2f      	ldr	r3, [pc, #188]	; (8011d9c <tcp_process+0x7dc>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	60fb      	str	r3, [r7, #12]
 8011ce2:	e00c      	b.n	8011cfe <tcp_process+0x73e>
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	687a      	ldr	r2, [r7, #4]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d104      	bne.n	8011cf8 <tcp_process+0x738>
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	68da      	ldr	r2, [r3, #12]
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	60da      	str	r2, [r3, #12]
 8011cf6:	e005      	b.n	8011d04 <tcp_process+0x744>
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	68db      	ldr	r3, [r3, #12]
 8011cfc:	60fb      	str	r3, [r7, #12]
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d1ef      	bne.n	8011ce4 <tcp_process+0x724>
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2200      	movs	r2, #0
 8011d08:	60da      	str	r2, [r3, #12]
 8011d0a:	4b1f      	ldr	r3, [pc, #124]	; (8011d88 <tcp_process+0x7c8>)
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	220a      	movs	r2, #10
 8011d14:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011d16:	4b1d      	ldr	r3, [pc, #116]	; (8011d8c <tcp_process+0x7cc>)
 8011d18:	681a      	ldr	r2, [r3, #0]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	60da      	str	r2, [r3, #12]
 8011d1e:	4a1b      	ldr	r2, [pc, #108]	; (8011d8c <tcp_process+0x7cc>)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6013      	str	r3, [r2, #0]
 8011d24:	f002 fc48 	bl	80145b8 <tcp_timer_needed>
      }
      break;
 8011d28:	e026      	b.n	8011d78 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f000 f93c 	bl	8011fa8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011d30:	4b17      	ldr	r3, [pc, #92]	; (8011d90 <tcp_process+0x7d0>)
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	f003 0310 	and.w	r3, r3, #16
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d01f      	beq.n	8011d7c <tcp_process+0x7bc>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d40:	4b14      	ldr	r3, [pc, #80]	; (8011d94 <tcp_process+0x7d4>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d119      	bne.n	8011d7c <tcp_process+0x7bc>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d115      	bne.n	8011d7c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011d50:	4b11      	ldr	r3, [pc, #68]	; (8011d98 <tcp_process+0x7d8>)
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	f043 0310 	orr.w	r3, r3, #16
 8011d58:	b2da      	uxtb	r2, r3
 8011d5a:	4b0f      	ldr	r3, [pc, #60]	; (8011d98 <tcp_process+0x7d8>)
 8011d5c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011d5e:	e00d      	b.n	8011d7c <tcp_process+0x7bc>
    default:
      break;
 8011d60:	bf00      	nop
 8011d62:	e00c      	b.n	8011d7e <tcp_process+0x7be>
      break;
 8011d64:	bf00      	nop
 8011d66:	e00a      	b.n	8011d7e <tcp_process+0x7be>
      break;
 8011d68:	bf00      	nop
 8011d6a:	e008      	b.n	8011d7e <tcp_process+0x7be>
      break;
 8011d6c:	bf00      	nop
 8011d6e:	e006      	b.n	8011d7e <tcp_process+0x7be>
      break;
 8011d70:	bf00      	nop
 8011d72:	e004      	b.n	8011d7e <tcp_process+0x7be>
      break;
 8011d74:	bf00      	nop
 8011d76:	e002      	b.n	8011d7e <tcp_process+0x7be>
      break;
 8011d78:	bf00      	nop
 8011d7a:	e000      	b.n	8011d7e <tcp_process+0x7be>
      break;
 8011d7c:	bf00      	nop
  }
  return ERR_OK;
 8011d7e:	2300      	movs	r3, #0
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3724      	adds	r7, #36	; 0x24
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd90      	pop	{r4, r7, pc}
 8011d88:	24007850 	.word	0x24007850
 8011d8c:	24007864 	.word	0x24007864
 8011d90:	24004158 	.word	0x24004158
 8011d94:	24004150 	.word	0x24004150
 8011d98:	24004159 	.word	0x24004159
 8011d9c:	24007854 	.word	0x24007854

08011da0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011da0:	b590      	push	{r4, r7, lr}
 8011da2:	b085      	sub	sp, #20
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d106      	bne.n	8011dbe <tcp_oos_insert_segment+0x1e>
 8011db0:	4b3b      	ldr	r3, [pc, #236]	; (8011ea0 <tcp_oos_insert_segment+0x100>)
 8011db2:	f240 421f 	movw	r2, #1055	; 0x41f
 8011db6:	493b      	ldr	r1, [pc, #236]	; (8011ea4 <tcp_oos_insert_segment+0x104>)
 8011db8:	483b      	ldr	r0, [pc, #236]	; (8011ea8 <tcp_oos_insert_segment+0x108>)
 8011dba:	f005 fcc9 	bl	8017750 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	899b      	ldrh	r3, [r3, #12]
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7fb fb5a 	bl	800d480 <lwip_htons>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	f003 0301 	and.w	r3, r3, #1
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d028      	beq.n	8011e2a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011dd8:	6838      	ldr	r0, [r7, #0]
 8011dda:	f7fe fa65 	bl	80102a8 <tcp_segs_free>
    next = NULL;
 8011dde:	2300      	movs	r3, #0
 8011de0:	603b      	str	r3, [r7, #0]
 8011de2:	e056      	b.n	8011e92 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	68db      	ldr	r3, [r3, #12]
 8011de8:	899b      	ldrh	r3, [r3, #12]
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7fb fb47 	bl	800d480 <lwip_htons>
 8011df2:	4603      	mov	r3, r0
 8011df4:	b2db      	uxtb	r3, r3
 8011df6:	f003 0301 	and.w	r3, r3, #1
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d00d      	beq.n	8011e1a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	899b      	ldrh	r3, [r3, #12]
 8011e04:	b29c      	uxth	r4, r3
 8011e06:	2001      	movs	r0, #1
 8011e08:	f7fb fb3a 	bl	800d480 <lwip_htons>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	461a      	mov	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	4322      	orrs	r2, r4
 8011e16:	b292      	uxth	r2, r2
 8011e18:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011e24:	68f8      	ldr	r0, [r7, #12]
 8011e26:	f7fe fa54 	bl	80102d2 <tcp_seg_free>
    while (next &&
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00e      	beq.n	8011e4e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	891b      	ldrh	r3, [r3, #8]
 8011e34:	461a      	mov	r2, r3
 8011e36:	4b1d      	ldr	r3, [pc, #116]	; (8011eac <tcp_oos_insert_segment+0x10c>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	441a      	add	r2, r3
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	685b      	ldr	r3, [r3, #4]
 8011e42:	6839      	ldr	r1, [r7, #0]
 8011e44:	8909      	ldrh	r1, [r1, #8]
 8011e46:	440b      	add	r3, r1
 8011e48:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	daca      	bge.n	8011de4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d01e      	beq.n	8011e92 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	891b      	ldrh	r3, [r3, #8]
 8011e58:	461a      	mov	r2, r3
 8011e5a:	4b14      	ldr	r3, [pc, #80]	; (8011eac <tcp_oos_insert_segment+0x10c>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	441a      	add	r2, r3
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	dd12      	ble.n	8011e92 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	68db      	ldr	r3, [r3, #12]
 8011e70:	685b      	ldr	r3, [r3, #4]
 8011e72:	b29a      	uxth	r2, r3
 8011e74:	4b0d      	ldr	r3, [pc, #52]	; (8011eac <tcp_oos_insert_segment+0x10c>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	b29b      	uxth	r3, r3
 8011e7a:	1ad3      	subs	r3, r2, r3
 8011e7c:	b29a      	uxth	r2, r3
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	685a      	ldr	r2, [r3, #4]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	891b      	ldrh	r3, [r3, #8]
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	4610      	mov	r0, r2
 8011e8e:	f7fc fe1b 	bl	800eac8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	683a      	ldr	r2, [r7, #0]
 8011e96:	601a      	str	r2, [r3, #0]
}
 8011e98:	bf00      	nop
 8011e9a:	3714      	adds	r7, #20
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd90      	pop	{r4, r7, pc}
 8011ea0:	08019a24 	.word	0x08019a24
 8011ea4:	08019ce4 	.word	0x08019ce4
 8011ea8:	08019a70 	.word	0x08019a70
 8011eac:	2400414c 	.word	0x2400414c

08011eb0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011eb0:	b5b0      	push	{r4, r5, r7, lr}
 8011eb2:	b086      	sub	sp, #24
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	607a      	str	r2, [r7, #4]
 8011ebc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011ebe:	e03e      	b.n	8011f3e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7fd f80e 	bl	800eef0 <pbuf_clen>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ede:	8a7a      	ldrh	r2, [r7, #18]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d906      	bls.n	8011ef2 <tcp_free_acked_segments+0x42>
 8011ee4:	4b2a      	ldr	r3, [pc, #168]	; (8011f90 <tcp_free_acked_segments+0xe0>)
 8011ee6:	f240 4257 	movw	r2, #1111	; 0x457
 8011eea:	492a      	ldr	r1, [pc, #168]	; (8011f94 <tcp_free_acked_segments+0xe4>)
 8011eec:	482a      	ldr	r0, [pc, #168]	; (8011f98 <tcp_free_acked_segments+0xe8>)
 8011eee:	f005 fc2f 	bl	8017750 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011ef8:	8a7b      	ldrh	r3, [r7, #18]
 8011efa:	1ad3      	subs	r3, r2, r3
 8011efc:	b29a      	uxth	r2, r3
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	891a      	ldrh	r2, [r3, #8]
 8011f08:	4b24      	ldr	r3, [pc, #144]	; (8011f9c <tcp_free_acked_segments+0xec>)
 8011f0a:	881b      	ldrh	r3, [r3, #0]
 8011f0c:	4413      	add	r3, r2
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	4b22      	ldr	r3, [pc, #136]	; (8011f9c <tcp_free_acked_segments+0xec>)
 8011f12:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011f14:	6978      	ldr	r0, [r7, #20]
 8011f16:	f7fe f9dc 	bl	80102d2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d00c      	beq.n	8011f3e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d109      	bne.n	8011f3e <tcp_free_acked_segments+0x8e>
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d106      	bne.n	8011f3e <tcp_free_acked_segments+0x8e>
 8011f30:	4b17      	ldr	r3, [pc, #92]	; (8011f90 <tcp_free_acked_segments+0xe0>)
 8011f32:	f240 4261 	movw	r2, #1121	; 0x461
 8011f36:	491a      	ldr	r1, [pc, #104]	; (8011fa0 <tcp_free_acked_segments+0xf0>)
 8011f38:	4817      	ldr	r0, [pc, #92]	; (8011f98 <tcp_free_acked_segments+0xe8>)
 8011f3a:	f005 fc09 	bl	8017750 <iprintf>
  while (seg_list != NULL &&
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d020      	beq.n	8011f86 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7fb faad 	bl	800d4aa <lwip_htonl>
 8011f50:	4604      	mov	r4, r0
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	891b      	ldrh	r3, [r3, #8]
 8011f56:	461d      	mov	r5, r3
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	68db      	ldr	r3, [r3, #12]
 8011f5c:	899b      	ldrh	r3, [r3, #12]
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7fb fa8d 	bl	800d480 <lwip_htons>
 8011f66:	4603      	mov	r3, r0
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	f003 0303 	and.w	r3, r3, #3
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d001      	beq.n	8011f76 <tcp_free_acked_segments+0xc6>
 8011f72:	2301      	movs	r3, #1
 8011f74:	e000      	b.n	8011f78 <tcp_free_acked_segments+0xc8>
 8011f76:	2300      	movs	r3, #0
 8011f78:	442b      	add	r3, r5
 8011f7a:	18e2      	adds	r2, r4, r3
 8011f7c:	4b09      	ldr	r3, [pc, #36]	; (8011fa4 <tcp_free_acked_segments+0xf4>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	dd9c      	ble.n	8011ec0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011f86:	68bb      	ldr	r3, [r7, #8]
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3718      	adds	r7, #24
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8011f90:	08019a24 	.word	0x08019a24
 8011f94:	08019d0c 	.word	0x08019d0c
 8011f98:	08019a70 	.word	0x08019a70
 8011f9c:	24004154 	.word	0x24004154
 8011fa0:	08019d34 	.word	0x08019d34
 8011fa4:	24004150 	.word	0x24004150

08011fa8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011fa8:	b5b0      	push	{r4, r5, r7, lr}
 8011faa:	b094      	sub	sp, #80	; 0x50
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d106      	bne.n	8011fc8 <tcp_receive+0x20>
 8011fba:	4ba6      	ldr	r3, [pc, #664]	; (8012254 <tcp_receive+0x2ac>)
 8011fbc:	f240 427b 	movw	r2, #1147	; 0x47b
 8011fc0:	49a5      	ldr	r1, [pc, #660]	; (8012258 <tcp_receive+0x2b0>)
 8011fc2:	48a6      	ldr	r0, [pc, #664]	; (801225c <tcp_receive+0x2b4>)
 8011fc4:	f005 fbc4 	bl	8017750 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	7d1b      	ldrb	r3, [r3, #20]
 8011fcc:	2b03      	cmp	r3, #3
 8011fce:	d806      	bhi.n	8011fde <tcp_receive+0x36>
 8011fd0:	4ba0      	ldr	r3, [pc, #640]	; (8012254 <tcp_receive+0x2ac>)
 8011fd2:	f240 427c 	movw	r2, #1148	; 0x47c
 8011fd6:	49a2      	ldr	r1, [pc, #648]	; (8012260 <tcp_receive+0x2b8>)
 8011fd8:	48a0      	ldr	r0, [pc, #640]	; (801225c <tcp_receive+0x2b4>)
 8011fda:	f005 fbb9 	bl	8017750 <iprintf>

  if (flags & TCP_ACK) {
 8011fde:	4ba1      	ldr	r3, [pc, #644]	; (8012264 <tcp_receive+0x2bc>)
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	f003 0310 	and.w	r3, r3, #16
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	f000 8263 	beq.w	80124b2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ff8:	4413      	add	r3, r2
 8011ffa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012000:	4b99      	ldr	r3, [pc, #612]	; (8012268 <tcp_receive+0x2c0>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	1ad3      	subs	r3, r2, r3
 8012006:	2b00      	cmp	r3, #0
 8012008:	db1b      	blt.n	8012042 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801200e:	4b96      	ldr	r3, [pc, #600]	; (8012268 <tcp_receive+0x2c0>)
 8012010:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012012:	429a      	cmp	r2, r3
 8012014:	d106      	bne.n	8012024 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801201a:	4b94      	ldr	r3, [pc, #592]	; (801226c <tcp_receive+0x2c4>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	1ad3      	subs	r3, r2, r3
 8012020:	2b00      	cmp	r3, #0
 8012022:	db0e      	blt.n	8012042 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012028:	4b90      	ldr	r3, [pc, #576]	; (801226c <tcp_receive+0x2c4>)
 801202a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801202c:	429a      	cmp	r2, r3
 801202e:	d125      	bne.n	801207c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012030:	4b8f      	ldr	r3, [pc, #572]	; (8012270 <tcp_receive+0x2c8>)
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	89db      	ldrh	r3, [r3, #14]
 8012036:	b29a      	uxth	r2, r3
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801203e:	429a      	cmp	r2, r3
 8012040:	d91c      	bls.n	801207c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012042:	4b8b      	ldr	r3, [pc, #556]	; (8012270 <tcp_receive+0x2c8>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	89db      	ldrh	r3, [r3, #14]
 8012048:	b29a      	uxth	r2, r3
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801205c:	429a      	cmp	r2, r3
 801205e:	d205      	bcs.n	801206c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801206c:	4b7e      	ldr	r3, [pc, #504]	; (8012268 <tcp_receive+0x2c0>)
 801206e:	681a      	ldr	r2, [r3, #0]
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012074:	4b7d      	ldr	r3, [pc, #500]	; (801226c <tcp_receive+0x2c4>)
 8012076:	681a      	ldr	r2, [r3, #0]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801207c:	4b7b      	ldr	r3, [pc, #492]	; (801226c <tcp_receive+0x2c4>)
 801207e:	681a      	ldr	r2, [r3, #0]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	2b00      	cmp	r3, #0
 8012088:	dc58      	bgt.n	801213c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801208a:	4b7a      	ldr	r3, [pc, #488]	; (8012274 <tcp_receive+0x2cc>)
 801208c:	881b      	ldrh	r3, [r3, #0]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d14b      	bne.n	801212a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801209c:	4413      	add	r3, r2
 801209e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d142      	bne.n	801212a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	db3d      	blt.n	801212a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120b2:	4b6e      	ldr	r3, [pc, #440]	; (801226c <tcp_receive+0x2c4>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d137      	bne.n	801212a <tcp_receive+0x182>
              found_dupack = 1;
 80120ba:	2301      	movs	r3, #1
 80120bc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80120c4:	2bff      	cmp	r3, #255	; 0xff
 80120c6:	d007      	beq.n	80120d8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80120ce:	3301      	adds	r3, #1
 80120d0:	b2da      	uxtb	r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80120de:	2b03      	cmp	r3, #3
 80120e0:	d91b      	bls.n	801211a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120ec:	4413      	add	r3, r2
 80120ee:	b29a      	uxth	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d30a      	bcc.n	8012110 <tcp_receive+0x168>
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012104:	4413      	add	r3, r2
 8012106:	b29a      	uxth	r2, r3
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801210e:	e004      	b.n	801211a <tcp_receive+0x172>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012116:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012120:	2b02      	cmp	r3, #2
 8012122:	d902      	bls.n	801212a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f001 fee9 	bl	8013efc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801212a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801212c:	2b00      	cmp	r3, #0
 801212e:	f040 8160 	bne.w	80123f2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2200      	movs	r2, #0
 8012136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801213a:	e15a      	b.n	80123f2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801213c:	4b4b      	ldr	r3, [pc, #300]	; (801226c <tcp_receive+0x2c4>)
 801213e:	681a      	ldr	r2, [r3, #0]
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012144:	1ad3      	subs	r3, r2, r3
 8012146:	3b01      	subs	r3, #1
 8012148:	2b00      	cmp	r3, #0
 801214a:	f2c0 814d 	blt.w	80123e8 <tcp_receive+0x440>
 801214e:	4b47      	ldr	r3, [pc, #284]	; (801226c <tcp_receive+0x2c4>)
 8012150:	681a      	ldr	r2, [r3, #0]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012156:	1ad3      	subs	r3, r2, r3
 8012158:	2b00      	cmp	r3, #0
 801215a:	f300 8145 	bgt.w	80123e8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	8b5b      	ldrh	r3, [r3, #26]
 8012162:	f003 0304 	and.w	r3, r3, #4
 8012166:	2b00      	cmp	r3, #0
 8012168:	d010      	beq.n	801218c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	8b5b      	ldrh	r3, [r3, #26]
 801216e:	f023 0304 	bic.w	r3, r3, #4
 8012172:	b29a      	uxth	r2, r3
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2200      	movs	r2, #0
 8012190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801219a:	10db      	asrs	r3, r3, #3
 801219c:	b21b      	sxth	r3, r3
 801219e:	b29a      	uxth	r2, r3
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	4413      	add	r3, r2
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	b21a      	sxth	r2, r3
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80121b4:	4b2d      	ldr	r3, [pc, #180]	; (801226c <tcp_receive+0x2c4>)
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	b29a      	uxth	r2, r3
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121be:	b29b      	uxth	r3, r3
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80121cc:	4b27      	ldr	r3, [pc, #156]	; (801226c <tcp_receive+0x2c4>)
 80121ce:	681a      	ldr	r2, [r3, #0]
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	7d1b      	ldrb	r3, [r3, #20]
 80121d8:	2b03      	cmp	r3, #3
 80121da:	f240 8096 	bls.w	801230a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d244      	bcs.n	8012278 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	8b5b      	ldrh	r3, [r3, #26]
 80121f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d001      	beq.n	80121fe <tcp_receive+0x256>
 80121fa:	2301      	movs	r3, #1
 80121fc:	e000      	b.n	8012200 <tcp_receive+0x258>
 80121fe:	2302      	movs	r3, #2
 8012200:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012204:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012208:	b29a      	uxth	r2, r3
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801220e:	fb12 f303 	smulbb	r3, r2, r3
 8012212:	b29b      	uxth	r3, r3
 8012214:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012216:	4293      	cmp	r3, r2
 8012218:	bf28      	it	cs
 801221a:	4613      	movcs	r3, r2
 801221c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012224:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012226:	4413      	add	r3, r2
 8012228:	b29a      	uxth	r2, r3
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012230:	429a      	cmp	r2, r3
 8012232:	d309      	bcc.n	8012248 <tcp_receive+0x2a0>
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801223a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801223c:	4413      	add	r3, r2
 801223e:	b29a      	uxth	r2, r3
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012246:	e060      	b.n	801230a <tcp_receive+0x362>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801224e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012252:	e05a      	b.n	801230a <tcp_receive+0x362>
 8012254:	08019a24 	.word	0x08019a24
 8012258:	08019d54 	.word	0x08019d54
 801225c:	08019a70 	.word	0x08019a70
 8012260:	08019d70 	.word	0x08019d70
 8012264:	24004158 	.word	0x24004158
 8012268:	2400414c 	.word	0x2400414c
 801226c:	24004150 	.word	0x24004150
 8012270:	2400413c 	.word	0x2400413c
 8012274:	24004156 	.word	0x24004156
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801227e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012280:	4413      	add	r3, r2
 8012282:	b29a      	uxth	r2, r3
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801228a:	429a      	cmp	r2, r3
 801228c:	d309      	bcc.n	80122a2 <tcp_receive+0x2fa>
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012294:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012296:	4413      	add	r3, r2
 8012298:	b29a      	uxth	r2, r3
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80122a0:	e004      	b.n	80122ac <tcp_receive+0x304>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d326      	bcc.n	801230a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122c8:	1ad3      	subs	r3, r2, r3
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122dc:	4413      	add	r3, r2
 80122de:	b29a      	uxth	r2, r3
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d30a      	bcc.n	8012300 <tcp_receive+0x358>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122f4:	4413      	add	r3, r2
 80122f6:	b29a      	uxth	r2, r3
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80122fe:	e004      	b.n	801230a <tcp_receive+0x362>
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012306:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012312:	4a98      	ldr	r2, [pc, #608]	; (8012574 <tcp_receive+0x5cc>)
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f7ff fdcb 	bl	8011eb0 <tcp_free_acked_segments>
 801231a:	4602      	mov	r2, r0
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012328:	4a93      	ldr	r2, [pc, #588]	; (8012578 <tcp_receive+0x5d0>)
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f7ff fdc0 	bl	8011eb0 <tcp_free_acked_segments>
 8012330:	4602      	mov	r2, r0
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801233a:	2b00      	cmp	r3, #0
 801233c:	d104      	bne.n	8012348 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012344:	861a      	strh	r2, [r3, #48]	; 0x30
 8012346:	e002      	b.n	801234e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2200      	movs	r2, #0
 801234c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2200      	movs	r2, #0
 8012352:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012358:	2b00      	cmp	r3, #0
 801235a:	d103      	bne.n	8012364 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2200      	movs	r2, #0
 8012360:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801236a:	4b84      	ldr	r3, [pc, #528]	; (801257c <tcp_receive+0x5d4>)
 801236c:	881b      	ldrh	r3, [r3, #0]
 801236e:	4413      	add	r3, r2
 8012370:	b29a      	uxth	r2, r3
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	8b5b      	ldrh	r3, [r3, #26]
 801237c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012380:	2b00      	cmp	r3, #0
 8012382:	d035      	beq.n	80123f0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012388:	2b00      	cmp	r3, #0
 801238a:	d118      	bne.n	80123be <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012390:	2b00      	cmp	r3, #0
 8012392:	d00c      	beq.n	80123ae <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7fb f882 	bl	800d4aa <lwip_htonl>
 80123a6:	4603      	mov	r3, r0
 80123a8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	dc20      	bgt.n	80123f0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	8b5b      	ldrh	r3, [r3, #26]
 80123b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80123bc:	e018      	b.n	80123f0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123c6:	68db      	ldr	r3, [r3, #12]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7fb f86d 	bl	800d4aa <lwip_htonl>
 80123d0:	4603      	mov	r3, r0
 80123d2:	1ae3      	subs	r3, r4, r3
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	dc0b      	bgt.n	80123f0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	8b5b      	ldrh	r3, [r3, #26]
 80123dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80123e0:	b29a      	uxth	r2, r3
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80123e6:	e003      	b.n	80123f0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f001 ff75 	bl	80142d8 <tcp_send_empty_ack>
 80123ee:	e000      	b.n	80123f2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80123f0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d05b      	beq.n	80124b2 <tcp_receive+0x50a>
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123fe:	4b60      	ldr	r3, [pc, #384]	; (8012580 <tcp_receive+0x5d8>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	1ad3      	subs	r3, r2, r3
 8012404:	2b00      	cmp	r3, #0
 8012406:	da54      	bge.n	80124b2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012408:	4b5e      	ldr	r3, [pc, #376]	; (8012584 <tcp_receive+0x5dc>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	b29a      	uxth	r2, r3
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012412:	b29b      	uxth	r3, r3
 8012414:	1ad3      	subs	r3, r2, r3
 8012416:	b29b      	uxth	r3, r3
 8012418:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801241c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012426:	10db      	asrs	r3, r3, #3
 8012428:	b21b      	sxth	r3, r3
 801242a:	b29b      	uxth	r3, r3
 801242c:	1ad3      	subs	r3, r2, r3
 801242e:	b29b      	uxth	r3, r3
 8012430:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801243a:	b29a      	uxth	r2, r3
 801243c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012440:	4413      	add	r3, r2
 8012442:	b29b      	uxth	r3, r3
 8012444:	b21a      	sxth	r2, r3
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801244a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801244e:	2b00      	cmp	r3, #0
 8012450:	da05      	bge.n	801245e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8012452:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012456:	425b      	negs	r3, r3
 8012458:	b29b      	uxth	r3, r3
 801245a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801245e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012468:	109b      	asrs	r3, r3, #2
 801246a:	b21b      	sxth	r3, r3
 801246c:	b29b      	uxth	r3, r3
 801246e:	1ad3      	subs	r3, r2, r3
 8012470:	b29b      	uxth	r3, r3
 8012472:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801247c:	b29a      	uxth	r2, r3
 801247e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012482:	4413      	add	r3, r2
 8012484:	b29b      	uxth	r3, r3
 8012486:	b21a      	sxth	r2, r3
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012492:	10db      	asrs	r3, r3, #3
 8012494:	b21b      	sxth	r3, r3
 8012496:	b29a      	uxth	r2, r3
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801249e:	b29b      	uxth	r3, r3
 80124a0:	4413      	add	r3, r2
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	b21a      	sxth	r2, r3
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2200      	movs	r2, #0
 80124b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80124b2:	4b35      	ldr	r3, [pc, #212]	; (8012588 <tcp_receive+0x5e0>)
 80124b4:	881b      	ldrh	r3, [r3, #0]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	f000 84e1 	beq.w	8012e7e <tcp_receive+0xed6>
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	7d1b      	ldrb	r3, [r3, #20]
 80124c0:	2b06      	cmp	r3, #6
 80124c2:	f200 84dc 	bhi.w	8012e7e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124ca:	4b30      	ldr	r3, [pc, #192]	; (801258c <tcp_receive+0x5e4>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	1ad3      	subs	r3, r2, r3
 80124d0:	3b01      	subs	r3, #1
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	f2c0 808e 	blt.w	80125f4 <tcp_receive+0x64c>
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124dc:	4b2a      	ldr	r3, [pc, #168]	; (8012588 <tcp_receive+0x5e0>)
 80124de:	881b      	ldrh	r3, [r3, #0]
 80124e0:	4619      	mov	r1, r3
 80124e2:	4b2a      	ldr	r3, [pc, #168]	; (801258c <tcp_receive+0x5e4>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	440b      	add	r3, r1
 80124e8:	1ad3      	subs	r3, r2, r3
 80124ea:	3301      	adds	r3, #1
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	f300 8081 	bgt.w	80125f4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80124f2:	4b27      	ldr	r3, [pc, #156]	; (8012590 <tcp_receive+0x5e8>)
 80124f4:	685b      	ldr	r3, [r3, #4]
 80124f6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124fc:	4b23      	ldr	r3, [pc, #140]	; (801258c <tcp_receive+0x5e4>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	1ad3      	subs	r3, r2, r3
 8012502:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012504:	4b22      	ldr	r3, [pc, #136]	; (8012590 <tcp_receive+0x5e8>)
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d106      	bne.n	801251a <tcp_receive+0x572>
 801250c:	4b21      	ldr	r3, [pc, #132]	; (8012594 <tcp_receive+0x5ec>)
 801250e:	f240 5294 	movw	r2, #1428	; 0x594
 8012512:	4921      	ldr	r1, [pc, #132]	; (8012598 <tcp_receive+0x5f0>)
 8012514:	4821      	ldr	r0, [pc, #132]	; (801259c <tcp_receive+0x5f4>)
 8012516:	f005 f91b 	bl	8017750 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012520:	4293      	cmp	r3, r2
 8012522:	d906      	bls.n	8012532 <tcp_receive+0x58a>
 8012524:	4b1b      	ldr	r3, [pc, #108]	; (8012594 <tcp_receive+0x5ec>)
 8012526:	f240 5295 	movw	r2, #1429	; 0x595
 801252a:	491d      	ldr	r1, [pc, #116]	; (80125a0 <tcp_receive+0x5f8>)
 801252c:	481b      	ldr	r0, [pc, #108]	; (801259c <tcp_receive+0x5f4>)
 801252e:	f005 f90f 	bl	8017750 <iprintf>
      off = (u16_t)off32;
 8012532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012534:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012538:	4b15      	ldr	r3, [pc, #84]	; (8012590 <tcp_receive+0x5e8>)
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	891b      	ldrh	r3, [r3, #8]
 801253e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012542:	429a      	cmp	r2, r3
 8012544:	d906      	bls.n	8012554 <tcp_receive+0x5ac>
 8012546:	4b13      	ldr	r3, [pc, #76]	; (8012594 <tcp_receive+0x5ec>)
 8012548:	f240 5297 	movw	r2, #1431	; 0x597
 801254c:	4915      	ldr	r1, [pc, #84]	; (80125a4 <tcp_receive+0x5fc>)
 801254e:	4813      	ldr	r0, [pc, #76]	; (801259c <tcp_receive+0x5f4>)
 8012550:	f005 f8fe 	bl	8017750 <iprintf>
      inseg.len -= off;
 8012554:	4b0e      	ldr	r3, [pc, #56]	; (8012590 <tcp_receive+0x5e8>)
 8012556:	891a      	ldrh	r2, [r3, #8]
 8012558:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801255c:	1ad3      	subs	r3, r2, r3
 801255e:	b29a      	uxth	r2, r3
 8012560:	4b0b      	ldr	r3, [pc, #44]	; (8012590 <tcp_receive+0x5e8>)
 8012562:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012564:	4b0a      	ldr	r3, [pc, #40]	; (8012590 <tcp_receive+0x5e8>)
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	891a      	ldrh	r2, [r3, #8]
 801256a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801256e:	1ad3      	subs	r3, r2, r3
 8012570:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012572:	e029      	b.n	80125c8 <tcp_receive+0x620>
 8012574:	08019d8c 	.word	0x08019d8c
 8012578:	08019d94 	.word	0x08019d94
 801257c:	24004154 	.word	0x24004154
 8012580:	24004150 	.word	0x24004150
 8012584:	24007858 	.word	0x24007858
 8012588:	24004156 	.word	0x24004156
 801258c:	2400414c 	.word	0x2400414c
 8012590:	2400412c 	.word	0x2400412c
 8012594:	08019a24 	.word	0x08019a24
 8012598:	08019d9c 	.word	0x08019d9c
 801259c:	08019a70 	.word	0x08019a70
 80125a0:	08019dac 	.word	0x08019dac
 80125a4:	08019dbc 	.word	0x08019dbc
        off -= p->len;
 80125a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125aa:	895b      	ldrh	r3, [r3, #10]
 80125ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125b0:	1ad3      	subs	r3, r2, r3
 80125b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80125b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80125ba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80125bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125be:	2200      	movs	r2, #0
 80125c0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80125c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80125c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125ca:	895b      	ldrh	r3, [r3, #10]
 80125cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d8e9      	bhi.n	80125a8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80125d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125d8:	4619      	mov	r1, r3
 80125da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80125dc:	f7fc fb74 	bl	800ecc8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e4:	4a91      	ldr	r2, [pc, #580]	; (801282c <tcp_receive+0x884>)
 80125e6:	6013      	str	r3, [r2, #0]
 80125e8:	4b91      	ldr	r3, [pc, #580]	; (8012830 <tcp_receive+0x888>)
 80125ea:	68db      	ldr	r3, [r3, #12]
 80125ec:	4a8f      	ldr	r2, [pc, #572]	; (801282c <tcp_receive+0x884>)
 80125ee:	6812      	ldr	r2, [r2, #0]
 80125f0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80125f2:	e00d      	b.n	8012610 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80125f4:	4b8d      	ldr	r3, [pc, #564]	; (801282c <tcp_receive+0x884>)
 80125f6:	681a      	ldr	r2, [r3, #0]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125fc:	1ad3      	subs	r3, r2, r3
 80125fe:	2b00      	cmp	r3, #0
 8012600:	da06      	bge.n	8012610 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	8b5b      	ldrh	r3, [r3, #26]
 8012606:	f043 0302 	orr.w	r3, r3, #2
 801260a:	b29a      	uxth	r2, r3
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012610:	4b86      	ldr	r3, [pc, #536]	; (801282c <tcp_receive+0x884>)
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012618:	1ad3      	subs	r3, r2, r3
 801261a:	2b00      	cmp	r3, #0
 801261c:	f2c0 842a 	blt.w	8012e74 <tcp_receive+0xecc>
 8012620:	4b82      	ldr	r3, [pc, #520]	; (801282c <tcp_receive+0x884>)
 8012622:	681a      	ldr	r2, [r3, #0]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012628:	6879      	ldr	r1, [r7, #4]
 801262a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801262c:	440b      	add	r3, r1
 801262e:	1ad3      	subs	r3, r2, r3
 8012630:	3301      	adds	r3, #1
 8012632:	2b00      	cmp	r3, #0
 8012634:	f300 841e 	bgt.w	8012e74 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801263c:	4b7b      	ldr	r3, [pc, #492]	; (801282c <tcp_receive+0x884>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	429a      	cmp	r2, r3
 8012642:	f040 829a 	bne.w	8012b7a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012646:	4b7a      	ldr	r3, [pc, #488]	; (8012830 <tcp_receive+0x888>)
 8012648:	891c      	ldrh	r4, [r3, #8]
 801264a:	4b79      	ldr	r3, [pc, #484]	; (8012830 <tcp_receive+0x888>)
 801264c:	68db      	ldr	r3, [r3, #12]
 801264e:	899b      	ldrh	r3, [r3, #12]
 8012650:	b29b      	uxth	r3, r3
 8012652:	4618      	mov	r0, r3
 8012654:	f7fa ff14 	bl	800d480 <lwip_htons>
 8012658:	4603      	mov	r3, r0
 801265a:	b2db      	uxtb	r3, r3
 801265c:	f003 0303 	and.w	r3, r3, #3
 8012660:	2b00      	cmp	r3, #0
 8012662:	d001      	beq.n	8012668 <tcp_receive+0x6c0>
 8012664:	2301      	movs	r3, #1
 8012666:	e000      	b.n	801266a <tcp_receive+0x6c2>
 8012668:	2300      	movs	r3, #0
 801266a:	4423      	add	r3, r4
 801266c:	b29a      	uxth	r2, r3
 801266e:	4b71      	ldr	r3, [pc, #452]	; (8012834 <tcp_receive+0x88c>)
 8012670:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012676:	4b6f      	ldr	r3, [pc, #444]	; (8012834 <tcp_receive+0x88c>)
 8012678:	881b      	ldrh	r3, [r3, #0]
 801267a:	429a      	cmp	r2, r3
 801267c:	d275      	bcs.n	801276a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801267e:	4b6c      	ldr	r3, [pc, #432]	; (8012830 <tcp_receive+0x888>)
 8012680:	68db      	ldr	r3, [r3, #12]
 8012682:	899b      	ldrh	r3, [r3, #12]
 8012684:	b29b      	uxth	r3, r3
 8012686:	4618      	mov	r0, r3
 8012688:	f7fa fefa 	bl	800d480 <lwip_htons>
 801268c:	4603      	mov	r3, r0
 801268e:	b2db      	uxtb	r3, r3
 8012690:	f003 0301 	and.w	r3, r3, #1
 8012694:	2b00      	cmp	r3, #0
 8012696:	d01f      	beq.n	80126d8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012698:	4b65      	ldr	r3, [pc, #404]	; (8012830 <tcp_receive+0x888>)
 801269a:	68db      	ldr	r3, [r3, #12]
 801269c:	899b      	ldrh	r3, [r3, #12]
 801269e:	b29b      	uxth	r3, r3
 80126a0:	b21b      	sxth	r3, r3
 80126a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80126a6:	b21c      	sxth	r4, r3
 80126a8:	4b61      	ldr	r3, [pc, #388]	; (8012830 <tcp_receive+0x888>)
 80126aa:	68db      	ldr	r3, [r3, #12]
 80126ac:	899b      	ldrh	r3, [r3, #12]
 80126ae:	b29b      	uxth	r3, r3
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7fa fee5 	bl	800d480 <lwip_htons>
 80126b6:	4603      	mov	r3, r0
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7fa fedc 	bl	800d480 <lwip_htons>
 80126c8:	4603      	mov	r3, r0
 80126ca:	b21b      	sxth	r3, r3
 80126cc:	4323      	orrs	r3, r4
 80126ce:	b21a      	sxth	r2, r3
 80126d0:	4b57      	ldr	r3, [pc, #348]	; (8012830 <tcp_receive+0x888>)
 80126d2:	68db      	ldr	r3, [r3, #12]
 80126d4:	b292      	uxth	r2, r2
 80126d6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80126dc:	4b54      	ldr	r3, [pc, #336]	; (8012830 <tcp_receive+0x888>)
 80126de:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80126e0:	4b53      	ldr	r3, [pc, #332]	; (8012830 <tcp_receive+0x888>)
 80126e2:	68db      	ldr	r3, [r3, #12]
 80126e4:	899b      	ldrh	r3, [r3, #12]
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7fa fec9 	bl	800d480 <lwip_htons>
 80126ee:	4603      	mov	r3, r0
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	f003 0302 	and.w	r3, r3, #2
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d005      	beq.n	8012706 <tcp_receive+0x75e>
            inseg.len -= 1;
 80126fa:	4b4d      	ldr	r3, [pc, #308]	; (8012830 <tcp_receive+0x888>)
 80126fc:	891b      	ldrh	r3, [r3, #8]
 80126fe:	3b01      	subs	r3, #1
 8012700:	b29a      	uxth	r2, r3
 8012702:	4b4b      	ldr	r3, [pc, #300]	; (8012830 <tcp_receive+0x888>)
 8012704:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012706:	4b4a      	ldr	r3, [pc, #296]	; (8012830 <tcp_receive+0x888>)
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	4a49      	ldr	r2, [pc, #292]	; (8012830 <tcp_receive+0x888>)
 801270c:	8912      	ldrh	r2, [r2, #8]
 801270e:	4611      	mov	r1, r2
 8012710:	4618      	mov	r0, r3
 8012712:	f7fc f9d9 	bl	800eac8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012716:	4b46      	ldr	r3, [pc, #280]	; (8012830 <tcp_receive+0x888>)
 8012718:	891c      	ldrh	r4, [r3, #8]
 801271a:	4b45      	ldr	r3, [pc, #276]	; (8012830 <tcp_receive+0x888>)
 801271c:	68db      	ldr	r3, [r3, #12]
 801271e:	899b      	ldrh	r3, [r3, #12]
 8012720:	b29b      	uxth	r3, r3
 8012722:	4618      	mov	r0, r3
 8012724:	f7fa feac 	bl	800d480 <lwip_htons>
 8012728:	4603      	mov	r3, r0
 801272a:	b2db      	uxtb	r3, r3
 801272c:	f003 0303 	and.w	r3, r3, #3
 8012730:	2b00      	cmp	r3, #0
 8012732:	d001      	beq.n	8012738 <tcp_receive+0x790>
 8012734:	2301      	movs	r3, #1
 8012736:	e000      	b.n	801273a <tcp_receive+0x792>
 8012738:	2300      	movs	r3, #0
 801273a:	4423      	add	r3, r4
 801273c:	b29a      	uxth	r2, r3
 801273e:	4b3d      	ldr	r3, [pc, #244]	; (8012834 <tcp_receive+0x88c>)
 8012740:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012742:	4b3c      	ldr	r3, [pc, #240]	; (8012834 <tcp_receive+0x88c>)
 8012744:	881b      	ldrh	r3, [r3, #0]
 8012746:	461a      	mov	r2, r3
 8012748:	4b38      	ldr	r3, [pc, #224]	; (801282c <tcp_receive+0x884>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	441a      	add	r2, r3
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012752:	6879      	ldr	r1, [r7, #4]
 8012754:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012756:	440b      	add	r3, r1
 8012758:	429a      	cmp	r2, r3
 801275a:	d006      	beq.n	801276a <tcp_receive+0x7c2>
 801275c:	4b36      	ldr	r3, [pc, #216]	; (8012838 <tcp_receive+0x890>)
 801275e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012762:	4936      	ldr	r1, [pc, #216]	; (801283c <tcp_receive+0x894>)
 8012764:	4836      	ldr	r0, [pc, #216]	; (8012840 <tcp_receive+0x898>)
 8012766:	f004 fff3 	bl	8017750 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801276e:	2b00      	cmp	r3, #0
 8012770:	f000 80e7 	beq.w	8012942 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012774:	4b2e      	ldr	r3, [pc, #184]	; (8012830 <tcp_receive+0x888>)
 8012776:	68db      	ldr	r3, [r3, #12]
 8012778:	899b      	ldrh	r3, [r3, #12]
 801277a:	b29b      	uxth	r3, r3
 801277c:	4618      	mov	r0, r3
 801277e:	f7fa fe7f 	bl	800d480 <lwip_htons>
 8012782:	4603      	mov	r3, r0
 8012784:	b2db      	uxtb	r3, r3
 8012786:	f003 0301 	and.w	r3, r3, #1
 801278a:	2b00      	cmp	r3, #0
 801278c:	d010      	beq.n	80127b0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801278e:	e00a      	b.n	80127a6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012794:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801279a:	681a      	ldr	r2, [r3, #0]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80127a0:	68f8      	ldr	r0, [r7, #12]
 80127a2:	f7fd fd96 	bl	80102d2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d1f0      	bne.n	8012790 <tcp_receive+0x7e8>
 80127ae:	e0c8      	b.n	8012942 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127b4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80127b6:	e052      	b.n	801285e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80127b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	899b      	ldrh	r3, [r3, #12]
 80127be:	b29b      	uxth	r3, r3
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7fa fe5d 	bl	800d480 <lwip_htons>
 80127c6:	4603      	mov	r3, r0
 80127c8:	b2db      	uxtb	r3, r3
 80127ca:	f003 0301 	and.w	r3, r3, #1
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d03d      	beq.n	801284e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80127d2:	4b17      	ldr	r3, [pc, #92]	; (8012830 <tcp_receive+0x888>)
 80127d4:	68db      	ldr	r3, [r3, #12]
 80127d6:	899b      	ldrh	r3, [r3, #12]
 80127d8:	b29b      	uxth	r3, r3
 80127da:	4618      	mov	r0, r3
 80127dc:	f7fa fe50 	bl	800d480 <lwip_htons>
 80127e0:	4603      	mov	r3, r0
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d130      	bne.n	801284e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80127ec:	4b10      	ldr	r3, [pc, #64]	; (8012830 <tcp_receive+0x888>)
 80127ee:	68db      	ldr	r3, [r3, #12]
 80127f0:	899b      	ldrh	r3, [r3, #12]
 80127f2:	b29c      	uxth	r4, r3
 80127f4:	2001      	movs	r0, #1
 80127f6:	f7fa fe43 	bl	800d480 <lwip_htons>
 80127fa:	4603      	mov	r3, r0
 80127fc:	461a      	mov	r2, r3
 80127fe:	4b0c      	ldr	r3, [pc, #48]	; (8012830 <tcp_receive+0x888>)
 8012800:	68db      	ldr	r3, [r3, #12]
 8012802:	4322      	orrs	r2, r4
 8012804:	b292      	uxth	r2, r2
 8012806:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012808:	4b09      	ldr	r3, [pc, #36]	; (8012830 <tcp_receive+0x888>)
 801280a:	891c      	ldrh	r4, [r3, #8]
 801280c:	4b08      	ldr	r3, [pc, #32]	; (8012830 <tcp_receive+0x888>)
 801280e:	68db      	ldr	r3, [r3, #12]
 8012810:	899b      	ldrh	r3, [r3, #12]
 8012812:	b29b      	uxth	r3, r3
 8012814:	4618      	mov	r0, r3
 8012816:	f7fa fe33 	bl	800d480 <lwip_htons>
 801281a:	4603      	mov	r3, r0
 801281c:	b2db      	uxtb	r3, r3
 801281e:	f003 0303 	and.w	r3, r3, #3
 8012822:	2b00      	cmp	r3, #0
 8012824:	d00e      	beq.n	8012844 <tcp_receive+0x89c>
 8012826:	2301      	movs	r3, #1
 8012828:	e00d      	b.n	8012846 <tcp_receive+0x89e>
 801282a:	bf00      	nop
 801282c:	2400414c 	.word	0x2400414c
 8012830:	2400412c 	.word	0x2400412c
 8012834:	24004156 	.word	0x24004156
 8012838:	08019a24 	.word	0x08019a24
 801283c:	08019dcc 	.word	0x08019dcc
 8012840:	08019a70 	.word	0x08019a70
 8012844:	2300      	movs	r3, #0
 8012846:	4423      	add	r3, r4
 8012848:	b29a      	uxth	r2, r3
 801284a:	4b98      	ldr	r3, [pc, #608]	; (8012aac <tcp_receive+0xb04>)
 801284c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801284e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012850:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012858:	6938      	ldr	r0, [r7, #16]
 801285a:	f7fd fd3a 	bl	80102d2 <tcp_seg_free>
            while (next &&
 801285e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012860:	2b00      	cmp	r3, #0
 8012862:	d00e      	beq.n	8012882 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012864:	4b91      	ldr	r3, [pc, #580]	; (8012aac <tcp_receive+0xb04>)
 8012866:	881b      	ldrh	r3, [r3, #0]
 8012868:	461a      	mov	r2, r3
 801286a:	4b91      	ldr	r3, [pc, #580]	; (8012ab0 <tcp_receive+0xb08>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	441a      	add	r2, r3
 8012870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012872:	68db      	ldr	r3, [r3, #12]
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012878:	8909      	ldrh	r1, [r1, #8]
 801287a:	440b      	add	r3, r1
 801287c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801287e:	2b00      	cmp	r3, #0
 8012880:	da9a      	bge.n	80127b8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012884:	2b00      	cmp	r3, #0
 8012886:	d059      	beq.n	801293c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012888:	4b88      	ldr	r3, [pc, #544]	; (8012aac <tcp_receive+0xb04>)
 801288a:	881b      	ldrh	r3, [r3, #0]
 801288c:	461a      	mov	r2, r3
 801288e:	4b88      	ldr	r3, [pc, #544]	; (8012ab0 <tcp_receive+0xb08>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	441a      	add	r2, r3
 8012894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012896:	68db      	ldr	r3, [r3, #12]
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801289c:	2b00      	cmp	r3, #0
 801289e:	dd4d      	ble.n	801293c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80128a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	685b      	ldr	r3, [r3, #4]
 80128a6:	b29a      	uxth	r2, r3
 80128a8:	4b81      	ldr	r3, [pc, #516]	; (8012ab0 <tcp_receive+0xb08>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	1ad3      	subs	r3, r2, r3
 80128b0:	b29a      	uxth	r2, r3
 80128b2:	4b80      	ldr	r3, [pc, #512]	; (8012ab4 <tcp_receive+0xb0c>)
 80128b4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80128b6:	4b7f      	ldr	r3, [pc, #508]	; (8012ab4 <tcp_receive+0xb0c>)
 80128b8:	68db      	ldr	r3, [r3, #12]
 80128ba:	899b      	ldrh	r3, [r3, #12]
 80128bc:	b29b      	uxth	r3, r3
 80128be:	4618      	mov	r0, r3
 80128c0:	f7fa fdde 	bl	800d480 <lwip_htons>
 80128c4:	4603      	mov	r3, r0
 80128c6:	b2db      	uxtb	r3, r3
 80128c8:	f003 0302 	and.w	r3, r3, #2
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d005      	beq.n	80128dc <tcp_receive+0x934>
                inseg.len -= 1;
 80128d0:	4b78      	ldr	r3, [pc, #480]	; (8012ab4 <tcp_receive+0xb0c>)
 80128d2:	891b      	ldrh	r3, [r3, #8]
 80128d4:	3b01      	subs	r3, #1
 80128d6:	b29a      	uxth	r2, r3
 80128d8:	4b76      	ldr	r3, [pc, #472]	; (8012ab4 <tcp_receive+0xb0c>)
 80128da:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80128dc:	4b75      	ldr	r3, [pc, #468]	; (8012ab4 <tcp_receive+0xb0c>)
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	4a74      	ldr	r2, [pc, #464]	; (8012ab4 <tcp_receive+0xb0c>)
 80128e2:	8912      	ldrh	r2, [r2, #8]
 80128e4:	4611      	mov	r1, r2
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7fc f8ee 	bl	800eac8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80128ec:	4b71      	ldr	r3, [pc, #452]	; (8012ab4 <tcp_receive+0xb0c>)
 80128ee:	891c      	ldrh	r4, [r3, #8]
 80128f0:	4b70      	ldr	r3, [pc, #448]	; (8012ab4 <tcp_receive+0xb0c>)
 80128f2:	68db      	ldr	r3, [r3, #12]
 80128f4:	899b      	ldrh	r3, [r3, #12]
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7fa fdc1 	bl	800d480 <lwip_htons>
 80128fe:	4603      	mov	r3, r0
 8012900:	b2db      	uxtb	r3, r3
 8012902:	f003 0303 	and.w	r3, r3, #3
 8012906:	2b00      	cmp	r3, #0
 8012908:	d001      	beq.n	801290e <tcp_receive+0x966>
 801290a:	2301      	movs	r3, #1
 801290c:	e000      	b.n	8012910 <tcp_receive+0x968>
 801290e:	2300      	movs	r3, #0
 8012910:	4423      	add	r3, r4
 8012912:	b29a      	uxth	r2, r3
 8012914:	4b65      	ldr	r3, [pc, #404]	; (8012aac <tcp_receive+0xb04>)
 8012916:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012918:	4b64      	ldr	r3, [pc, #400]	; (8012aac <tcp_receive+0xb04>)
 801291a:	881b      	ldrh	r3, [r3, #0]
 801291c:	461a      	mov	r2, r3
 801291e:	4b64      	ldr	r3, [pc, #400]	; (8012ab0 <tcp_receive+0xb08>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	441a      	add	r2, r3
 8012924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012926:	68db      	ldr	r3, [r3, #12]
 8012928:	685b      	ldr	r3, [r3, #4]
 801292a:	429a      	cmp	r2, r3
 801292c:	d006      	beq.n	801293c <tcp_receive+0x994>
 801292e:	4b62      	ldr	r3, [pc, #392]	; (8012ab8 <tcp_receive+0xb10>)
 8012930:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012934:	4961      	ldr	r1, [pc, #388]	; (8012abc <tcp_receive+0xb14>)
 8012936:	4862      	ldr	r0, [pc, #392]	; (8012ac0 <tcp_receive+0xb18>)
 8012938:	f004 ff0a 	bl	8017750 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012940:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012942:	4b5a      	ldr	r3, [pc, #360]	; (8012aac <tcp_receive+0xb04>)
 8012944:	881b      	ldrh	r3, [r3, #0]
 8012946:	461a      	mov	r2, r3
 8012948:	4b59      	ldr	r3, [pc, #356]	; (8012ab0 <tcp_receive+0xb08>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	441a      	add	r2, r3
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012956:	4b55      	ldr	r3, [pc, #340]	; (8012aac <tcp_receive+0xb04>)
 8012958:	881b      	ldrh	r3, [r3, #0]
 801295a:	429a      	cmp	r2, r3
 801295c:	d206      	bcs.n	801296c <tcp_receive+0x9c4>
 801295e:	4b56      	ldr	r3, [pc, #344]	; (8012ab8 <tcp_receive+0xb10>)
 8012960:	f240 6207 	movw	r2, #1543	; 0x607
 8012964:	4957      	ldr	r1, [pc, #348]	; (8012ac4 <tcp_receive+0xb1c>)
 8012966:	4856      	ldr	r0, [pc, #344]	; (8012ac0 <tcp_receive+0xb18>)
 8012968:	f004 fef2 	bl	8017750 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012970:	4b4e      	ldr	r3, [pc, #312]	; (8012aac <tcp_receive+0xb04>)
 8012972:	881b      	ldrh	r3, [r3, #0]
 8012974:	1ad3      	subs	r3, r2, r3
 8012976:	b29a      	uxth	r2, r3
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7fc ffc9 	bl	800f914 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012982:	4b4c      	ldr	r3, [pc, #304]	; (8012ab4 <tcp_receive+0xb0c>)
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	891b      	ldrh	r3, [r3, #8]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d006      	beq.n	801299a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801298c:	4b49      	ldr	r3, [pc, #292]	; (8012ab4 <tcp_receive+0xb0c>)
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	4a4d      	ldr	r2, [pc, #308]	; (8012ac8 <tcp_receive+0xb20>)
 8012992:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012994:	4b47      	ldr	r3, [pc, #284]	; (8012ab4 <tcp_receive+0xb0c>)
 8012996:	2200      	movs	r2, #0
 8012998:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801299a:	4b46      	ldr	r3, [pc, #280]	; (8012ab4 <tcp_receive+0xb0c>)
 801299c:	68db      	ldr	r3, [r3, #12]
 801299e:	899b      	ldrh	r3, [r3, #12]
 80129a0:	b29b      	uxth	r3, r3
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7fa fd6c 	bl	800d480 <lwip_htons>
 80129a8:	4603      	mov	r3, r0
 80129aa:	b2db      	uxtb	r3, r3
 80129ac:	f003 0301 	and.w	r3, r3, #1
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	f000 80b8 	beq.w	8012b26 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80129b6:	4b45      	ldr	r3, [pc, #276]	; (8012acc <tcp_receive+0xb24>)
 80129b8:	781b      	ldrb	r3, [r3, #0]
 80129ba:	f043 0320 	orr.w	r3, r3, #32
 80129be:	b2da      	uxtb	r2, r3
 80129c0:	4b42      	ldr	r3, [pc, #264]	; (8012acc <tcp_receive+0xb24>)
 80129c2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80129c4:	e0af      	b.n	8012b26 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129ca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129d0:	68db      	ldr	r3, [r3, #12]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	4a36      	ldr	r2, [pc, #216]	; (8012ab0 <tcp_receive+0xb08>)
 80129d6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	891b      	ldrh	r3, [r3, #8]
 80129dc:	461c      	mov	r4, r3
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	68db      	ldr	r3, [r3, #12]
 80129e2:	899b      	ldrh	r3, [r3, #12]
 80129e4:	b29b      	uxth	r3, r3
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7fa fd4a 	bl	800d480 <lwip_htons>
 80129ec:	4603      	mov	r3, r0
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	f003 0303 	and.w	r3, r3, #3
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d001      	beq.n	80129fc <tcp_receive+0xa54>
 80129f8:	2301      	movs	r3, #1
 80129fa:	e000      	b.n	80129fe <tcp_receive+0xa56>
 80129fc:	2300      	movs	r3, #0
 80129fe:	191a      	adds	r2, r3, r4
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a04:	441a      	add	r2, r3
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a0e:	461c      	mov	r4, r3
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	891b      	ldrh	r3, [r3, #8]
 8012a14:	461d      	mov	r5, r3
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	68db      	ldr	r3, [r3, #12]
 8012a1a:	899b      	ldrh	r3, [r3, #12]
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7fa fd2e 	bl	800d480 <lwip_htons>
 8012a24:	4603      	mov	r3, r0
 8012a26:	b2db      	uxtb	r3, r3
 8012a28:	f003 0303 	and.w	r3, r3, #3
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d001      	beq.n	8012a34 <tcp_receive+0xa8c>
 8012a30:	2301      	movs	r3, #1
 8012a32:	e000      	b.n	8012a36 <tcp_receive+0xa8e>
 8012a34:	2300      	movs	r3, #0
 8012a36:	442b      	add	r3, r5
 8012a38:	429c      	cmp	r4, r3
 8012a3a:	d206      	bcs.n	8012a4a <tcp_receive+0xaa2>
 8012a3c:	4b1e      	ldr	r3, [pc, #120]	; (8012ab8 <tcp_receive+0xb10>)
 8012a3e:	f240 622b 	movw	r2, #1579	; 0x62b
 8012a42:	4923      	ldr	r1, [pc, #140]	; (8012ad0 <tcp_receive+0xb28>)
 8012a44:	481e      	ldr	r0, [pc, #120]	; (8012ac0 <tcp_receive+0xb18>)
 8012a46:	f004 fe83 	bl	8017750 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	891b      	ldrh	r3, [r3, #8]
 8012a4e:	461c      	mov	r4, r3
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	68db      	ldr	r3, [r3, #12]
 8012a54:	899b      	ldrh	r3, [r3, #12]
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7fa fd11 	bl	800d480 <lwip_htons>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	f003 0303 	and.w	r3, r3, #3
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d001      	beq.n	8012a6e <tcp_receive+0xac6>
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	e000      	b.n	8012a70 <tcp_receive+0xac8>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	1919      	adds	r1, r3, r4
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012a76:	b28b      	uxth	r3, r1
 8012a78:	1ad3      	subs	r3, r2, r3
 8012a7a:	b29a      	uxth	r2, r3
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f7fc ff47 	bl	800f914 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	685b      	ldr	r3, [r3, #4]
 8012a8a:	891b      	ldrh	r3, [r3, #8]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d028      	beq.n	8012ae2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012a90:	4b0d      	ldr	r3, [pc, #52]	; (8012ac8 <tcp_receive+0xb20>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d01d      	beq.n	8012ad4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012a98:	4b0b      	ldr	r3, [pc, #44]	; (8012ac8 <tcp_receive+0xb20>)
 8012a9a:	681a      	ldr	r2, [r3, #0]
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	4610      	mov	r0, r2
 8012aa4:	f7fc fa64 	bl	800ef70 <pbuf_cat>
 8012aa8:	e018      	b.n	8012adc <tcp_receive+0xb34>
 8012aaa:	bf00      	nop
 8012aac:	24004156 	.word	0x24004156
 8012ab0:	2400414c 	.word	0x2400414c
 8012ab4:	2400412c 	.word	0x2400412c
 8012ab8:	08019a24 	.word	0x08019a24
 8012abc:	08019e04 	.word	0x08019e04
 8012ac0:	08019a70 	.word	0x08019a70
 8012ac4:	08019e40 	.word	0x08019e40
 8012ac8:	2400415c 	.word	0x2400415c
 8012acc:	24004159 	.word	0x24004159
 8012ad0:	08019e60 	.word	0x08019e60
            } else {
              recv_data = cseg->p;
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	685b      	ldr	r3, [r3, #4]
 8012ad8:	4a70      	ldr	r2, [pc, #448]	; (8012c9c <tcp_receive+0xcf4>)
 8012ada:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	68db      	ldr	r3, [r3, #12]
 8012ae6:	899b      	ldrh	r3, [r3, #12]
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7fa fcc8 	bl	800d480 <lwip_htons>
 8012af0:	4603      	mov	r3, r0
 8012af2:	b2db      	uxtb	r3, r3
 8012af4:	f003 0301 	and.w	r3, r3, #1
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d00d      	beq.n	8012b18 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012afc:	4b68      	ldr	r3, [pc, #416]	; (8012ca0 <tcp_receive+0xcf8>)
 8012afe:	781b      	ldrb	r3, [r3, #0]
 8012b00:	f043 0320 	orr.w	r3, r3, #32
 8012b04:	b2da      	uxtb	r2, r3
 8012b06:	4b66      	ldr	r3, [pc, #408]	; (8012ca0 <tcp_receive+0xcf8>)
 8012b08:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	7d1b      	ldrb	r3, [r3, #20]
 8012b0e:	2b04      	cmp	r3, #4
 8012b10:	d102      	bne.n	8012b18 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2207      	movs	r2, #7
 8012b16:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	681a      	ldr	r2, [r3, #0]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012b20:	68b8      	ldr	r0, [r7, #8]
 8012b22:	f7fd fbd6 	bl	80102d2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d008      	beq.n	8012b40 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b32:	68db      	ldr	r3, [r3, #12]
 8012b34:	685a      	ldr	r2, [r3, #4]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	f43f af43 	beq.w	80129c6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	8b5b      	ldrh	r3, [r3, #26]
 8012b44:	f003 0301 	and.w	r3, r3, #1
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d00e      	beq.n	8012b6a <tcp_receive+0xbc2>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	8b5b      	ldrh	r3, [r3, #26]
 8012b50:	f023 0301 	bic.w	r3, r3, #1
 8012b54:	b29a      	uxth	r2, r3
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	835a      	strh	r2, [r3, #26]
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	8b5b      	ldrh	r3, [r3, #26]
 8012b5e:	f043 0302 	orr.w	r3, r3, #2
 8012b62:	b29a      	uxth	r2, r3
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012b68:	e188      	b.n	8012e7c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	8b5b      	ldrh	r3, [r3, #26]
 8012b6e:	f043 0301 	orr.w	r3, r3, #1
 8012b72:	b29a      	uxth	r2, r3
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012b78:	e180      	b.n	8012e7c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d106      	bne.n	8012b90 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012b82:	4848      	ldr	r0, [pc, #288]	; (8012ca4 <tcp_receive+0xcfc>)
 8012b84:	f7fd fbbe 	bl	8010304 <tcp_seg_copy>
 8012b88:	4602      	mov	r2, r0
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	675a      	str	r2, [r3, #116]	; 0x74
 8012b8e:	e16d      	b.n	8012e6c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012b90:	2300      	movs	r3, #0
 8012b92:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b98:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b9a:	e157      	b.n	8012e4c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b9e:	68db      	ldr	r3, [r3, #12]
 8012ba0:	685a      	ldr	r2, [r3, #4]
 8012ba2:	4b41      	ldr	r3, [pc, #260]	; (8012ca8 <tcp_receive+0xd00>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d11d      	bne.n	8012be6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012baa:	4b3e      	ldr	r3, [pc, #248]	; (8012ca4 <tcp_receive+0xcfc>)
 8012bac:	891a      	ldrh	r2, [r3, #8]
 8012bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb0:	891b      	ldrh	r3, [r3, #8]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	f240 814f 	bls.w	8012e56 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012bb8:	483a      	ldr	r0, [pc, #232]	; (8012ca4 <tcp_receive+0xcfc>)
 8012bba:	f7fd fba3 	bl	8010304 <tcp_seg_copy>
 8012bbe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	f000 8149 	beq.w	8012e5a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d003      	beq.n	8012bd6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bd0:	697a      	ldr	r2, [r7, #20]
 8012bd2:	601a      	str	r2, [r3, #0]
 8012bd4:	e002      	b.n	8012bdc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	697a      	ldr	r2, [r7, #20]
 8012bda:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012bdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012bde:	6978      	ldr	r0, [r7, #20]
 8012be0:	f7ff f8de 	bl	8011da0 <tcp_oos_insert_segment>
                }
                break;
 8012be4:	e139      	b.n	8012e5a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d117      	bne.n	8012c1c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012bec:	4b2e      	ldr	r3, [pc, #184]	; (8012ca8 <tcp_receive+0xd00>)
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf2:	68db      	ldr	r3, [r3, #12]
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	1ad3      	subs	r3, r2, r3
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	da57      	bge.n	8012cac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012bfc:	4829      	ldr	r0, [pc, #164]	; (8012ca4 <tcp_receive+0xcfc>)
 8012bfe:	f7fd fb81 	bl	8010304 <tcp_seg_copy>
 8012c02:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012c04:	69bb      	ldr	r3, [r7, #24]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	f000 8129 	beq.w	8012e5e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	69ba      	ldr	r2, [r7, #24]
 8012c10:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c14:	69b8      	ldr	r0, [r7, #24]
 8012c16:	f7ff f8c3 	bl	8011da0 <tcp_oos_insert_segment>
                  }
                  break;
 8012c1a:	e120      	b.n	8012e5e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012c1c:	4b22      	ldr	r3, [pc, #136]	; (8012ca8 <tcp_receive+0xd00>)
 8012c1e:	681a      	ldr	r2, [r3, #0]
 8012c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c22:	68db      	ldr	r3, [r3, #12]
 8012c24:	685b      	ldr	r3, [r3, #4]
 8012c26:	1ad3      	subs	r3, r2, r3
 8012c28:	3b01      	subs	r3, #1
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	db3e      	blt.n	8012cac <tcp_receive+0xd04>
 8012c2e:	4b1e      	ldr	r3, [pc, #120]	; (8012ca8 <tcp_receive+0xd00>)
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c34:	68db      	ldr	r3, [r3, #12]
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	1ad3      	subs	r3, r2, r3
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	dc35      	bgt.n	8012cac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c40:	4818      	ldr	r0, [pc, #96]	; (8012ca4 <tcp_receive+0xcfc>)
 8012c42:	f7fd fb5f 	bl	8010304 <tcp_seg_copy>
 8012c46:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012c48:	69fb      	ldr	r3, [r7, #28]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	f000 8109 	beq.w	8012e62 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	685b      	ldr	r3, [r3, #4]
 8012c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c58:	8912      	ldrh	r2, [r2, #8]
 8012c5a:	441a      	add	r2, r3
 8012c5c:	4b12      	ldr	r3, [pc, #72]	; (8012ca8 <tcp_receive+0xd00>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	1ad3      	subs	r3, r2, r3
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	dd12      	ble.n	8012c8c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012c66:	4b10      	ldr	r3, [pc, #64]	; (8012ca8 <tcp_receive+0xd00>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	b29a      	uxth	r2, r3
 8012c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c6e:	68db      	ldr	r3, [r3, #12]
 8012c70:	685b      	ldr	r3, [r3, #4]
 8012c72:	b29b      	uxth	r3, r3
 8012c74:	1ad3      	subs	r3, r2, r3
 8012c76:	b29a      	uxth	r2, r3
 8012c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c7a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c7e:	685a      	ldr	r2, [r3, #4]
 8012c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c82:	891b      	ldrh	r3, [r3, #8]
 8012c84:	4619      	mov	r1, r3
 8012c86:	4610      	mov	r0, r2
 8012c88:	f7fb ff1e 	bl	800eac8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c8e:	69fa      	ldr	r2, [r7, #28]
 8012c90:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012c92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c94:	69f8      	ldr	r0, [r7, #28]
 8012c96:	f7ff f883 	bl	8011da0 <tcp_oos_insert_segment>
                  }
                  break;
 8012c9a:	e0e2      	b.n	8012e62 <tcp_receive+0xeba>
 8012c9c:	2400415c 	.word	0x2400415c
 8012ca0:	24004159 	.word	0x24004159
 8012ca4:	2400412c 	.word	0x2400412c
 8012ca8:	2400414c 	.word	0x2400414c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cae:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	f040 80c6 	bne.w	8012e46 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012cba:	4b80      	ldr	r3, [pc, #512]	; (8012ebc <tcp_receive+0xf14>)
 8012cbc:	681a      	ldr	r2, [r3, #0]
 8012cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc0:	68db      	ldr	r3, [r3, #12]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	f340 80bd 	ble.w	8012e46 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cce:	68db      	ldr	r3, [r3, #12]
 8012cd0:	899b      	ldrh	r3, [r3, #12]
 8012cd2:	b29b      	uxth	r3, r3
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7fa fbd3 	bl	800d480 <lwip_htons>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	b2db      	uxtb	r3, r3
 8012cde:	f003 0301 	and.w	r3, r3, #1
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f040 80bf 	bne.w	8012e66 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012ce8:	4875      	ldr	r0, [pc, #468]	; (8012ec0 <tcp_receive+0xf18>)
 8012cea:	f7fd fb0b 	bl	8010304 <tcp_seg_copy>
 8012cee:	4602      	mov	r2, r0
 8012cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	f000 80b6 	beq.w	8012e6a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d00:	68db      	ldr	r3, [r3, #12]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d06:	8912      	ldrh	r2, [r2, #8]
 8012d08:	441a      	add	r2, r3
 8012d0a:	4b6c      	ldr	r3, [pc, #432]	; (8012ebc <tcp_receive+0xf14>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	1ad3      	subs	r3, r2, r3
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	dd12      	ble.n	8012d3a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012d14:	4b69      	ldr	r3, [pc, #420]	; (8012ebc <tcp_receive+0xf14>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	b29a      	uxth	r2, r3
 8012d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1c:	68db      	ldr	r3, [r3, #12]
 8012d1e:	685b      	ldr	r3, [r3, #4]
 8012d20:	b29b      	uxth	r3, r3
 8012d22:	1ad3      	subs	r3, r2, r3
 8012d24:	b29a      	uxth	r2, r3
 8012d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d28:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2c:	685a      	ldr	r2, [r3, #4]
 8012d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d30:	891b      	ldrh	r3, [r3, #8]
 8012d32:	4619      	mov	r1, r3
 8012d34:	4610      	mov	r0, r2
 8012d36:	f7fb fec7 	bl	800eac8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012d3a:	4b62      	ldr	r3, [pc, #392]	; (8012ec4 <tcp_receive+0xf1c>)
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	461a      	mov	r2, r3
 8012d40:	4b5e      	ldr	r3, [pc, #376]	; (8012ebc <tcp_receive+0xf14>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	441a      	add	r2, r3
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d4a:	6879      	ldr	r1, [r7, #4]
 8012d4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012d4e:	440b      	add	r3, r1
 8012d50:	1ad3      	subs	r3, r2, r3
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f340 8089 	ble.w	8012e6a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	899b      	ldrh	r3, [r3, #12]
 8012d60:	b29b      	uxth	r3, r3
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7fa fb8c 	bl	800d480 <lwip_htons>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	f003 0301 	and.w	r3, r3, #1
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d022      	beq.n	8012dba <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	68db      	ldr	r3, [r3, #12]
 8012d7a:	899b      	ldrh	r3, [r3, #12]
 8012d7c:	b29b      	uxth	r3, r3
 8012d7e:	b21b      	sxth	r3, r3
 8012d80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012d84:	b21c      	sxth	r4, r3
 8012d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	68db      	ldr	r3, [r3, #12]
 8012d8c:	899b      	ldrh	r3, [r3, #12]
 8012d8e:	b29b      	uxth	r3, r3
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7fa fb75 	bl	800d480 <lwip_htons>
 8012d96:	4603      	mov	r3, r0
 8012d98:	b2db      	uxtb	r3, r3
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7fa fb6c 	bl	800d480 <lwip_htons>
 8012da8:	4603      	mov	r3, r0
 8012daa:	b21b      	sxth	r3, r3
 8012dac:	4323      	orrs	r3, r4
 8012dae:	b21a      	sxth	r2, r3
 8012db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	68db      	ldr	r3, [r3, #12]
 8012db6:	b292      	uxth	r2, r2
 8012db8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dbe:	b29a      	uxth	r2, r3
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012dc4:	4413      	add	r3, r2
 8012dc6:	b299      	uxth	r1, r3
 8012dc8:	4b3c      	ldr	r3, [pc, #240]	; (8012ebc <tcp_receive+0xf14>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	b29a      	uxth	r2, r3
 8012dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	1a8a      	subs	r2, r1, r2
 8012dd4:	b292      	uxth	r2, r2
 8012dd6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	685a      	ldr	r2, [r3, #4]
 8012dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	891b      	ldrh	r3, [r3, #8]
 8012de4:	4619      	mov	r1, r3
 8012de6:	4610      	mov	r0, r2
 8012de8:	f7fb fe6e 	bl	800eac8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	891c      	ldrh	r4, [r3, #8]
 8012df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	68db      	ldr	r3, [r3, #12]
 8012df8:	899b      	ldrh	r3, [r3, #12]
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7fa fb3f 	bl	800d480 <lwip_htons>
 8012e02:	4603      	mov	r3, r0
 8012e04:	b2db      	uxtb	r3, r3
 8012e06:	f003 0303 	and.w	r3, r3, #3
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d001      	beq.n	8012e12 <tcp_receive+0xe6a>
 8012e0e:	2301      	movs	r3, #1
 8012e10:	e000      	b.n	8012e14 <tcp_receive+0xe6c>
 8012e12:	2300      	movs	r3, #0
 8012e14:	4423      	add	r3, r4
 8012e16:	b29a      	uxth	r2, r3
 8012e18:	4b2a      	ldr	r3, [pc, #168]	; (8012ec4 <tcp_receive+0xf1c>)
 8012e1a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012e1c:	4b29      	ldr	r3, [pc, #164]	; (8012ec4 <tcp_receive+0xf1c>)
 8012e1e:	881b      	ldrh	r3, [r3, #0]
 8012e20:	461a      	mov	r2, r3
 8012e22:	4b26      	ldr	r3, [pc, #152]	; (8012ebc <tcp_receive+0xf14>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	441a      	add	r2, r3
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e2c:	6879      	ldr	r1, [r7, #4]
 8012e2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e30:	440b      	add	r3, r1
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d019      	beq.n	8012e6a <tcp_receive+0xec2>
 8012e36:	4b24      	ldr	r3, [pc, #144]	; (8012ec8 <tcp_receive+0xf20>)
 8012e38:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012e3c:	4923      	ldr	r1, [pc, #140]	; (8012ecc <tcp_receive+0xf24>)
 8012e3e:	4824      	ldr	r0, [pc, #144]	; (8012ed0 <tcp_receive+0xf28>)
 8012e40:	f004 fc86 	bl	8017750 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012e44:	e011      	b.n	8012e6a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	f47f aea4 	bne.w	8012b9c <tcp_receive+0xbf4>
 8012e54:	e00a      	b.n	8012e6c <tcp_receive+0xec4>
                break;
 8012e56:	bf00      	nop
 8012e58:	e008      	b.n	8012e6c <tcp_receive+0xec4>
                break;
 8012e5a:	bf00      	nop
 8012e5c:	e006      	b.n	8012e6c <tcp_receive+0xec4>
                  break;
 8012e5e:	bf00      	nop
 8012e60:	e004      	b.n	8012e6c <tcp_receive+0xec4>
                  break;
 8012e62:	bf00      	nop
 8012e64:	e002      	b.n	8012e6c <tcp_receive+0xec4>
                  break;
 8012e66:	bf00      	nop
 8012e68:	e000      	b.n	8012e6c <tcp_receive+0xec4>
                break;
 8012e6a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f001 fa33 	bl	80142d8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012e72:	e003      	b.n	8012e7c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f001 fa2f 	bl	80142d8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012e7a:	e01a      	b.n	8012eb2 <tcp_receive+0xf0a>
 8012e7c:	e019      	b.n	8012eb2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012e7e:	4b0f      	ldr	r3, [pc, #60]	; (8012ebc <tcp_receive+0xf14>)
 8012e80:	681a      	ldr	r2, [r3, #0]
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e86:	1ad3      	subs	r3, r2, r3
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	db0a      	blt.n	8012ea2 <tcp_receive+0xefa>
 8012e8c:	4b0b      	ldr	r3, [pc, #44]	; (8012ebc <tcp_receive+0xf14>)
 8012e8e:	681a      	ldr	r2, [r3, #0]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e94:	6879      	ldr	r1, [r7, #4]
 8012e96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e98:	440b      	add	r3, r1
 8012e9a:	1ad3      	subs	r3, r2, r3
 8012e9c:	3301      	adds	r3, #1
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	dd07      	ble.n	8012eb2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	8b5b      	ldrh	r3, [r3, #26]
 8012ea6:	f043 0302 	orr.w	r3, r3, #2
 8012eaa:	b29a      	uxth	r2, r3
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012eb0:	e7ff      	b.n	8012eb2 <tcp_receive+0xf0a>
 8012eb2:	bf00      	nop
 8012eb4:	3750      	adds	r7, #80	; 0x50
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	2400414c 	.word	0x2400414c
 8012ec0:	2400412c 	.word	0x2400412c
 8012ec4:	24004156 	.word	0x24004156
 8012ec8:	08019a24 	.word	0x08019a24
 8012ecc:	08019dcc 	.word	0x08019dcc
 8012ed0:	08019a70 	.word	0x08019a70

08012ed4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	b083      	sub	sp, #12
 8012ed8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012eda:	4b15      	ldr	r3, [pc, #84]	; (8012f30 <tcp_get_next_optbyte+0x5c>)
 8012edc:	881b      	ldrh	r3, [r3, #0]
 8012ede:	1c5a      	adds	r2, r3, #1
 8012ee0:	b291      	uxth	r1, r2
 8012ee2:	4a13      	ldr	r2, [pc, #76]	; (8012f30 <tcp_get_next_optbyte+0x5c>)
 8012ee4:	8011      	strh	r1, [r2, #0]
 8012ee6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012ee8:	4b12      	ldr	r3, [pc, #72]	; (8012f34 <tcp_get_next_optbyte+0x60>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d004      	beq.n	8012efa <tcp_get_next_optbyte+0x26>
 8012ef0:	4b11      	ldr	r3, [pc, #68]	; (8012f38 <tcp_get_next_optbyte+0x64>)
 8012ef2:	881b      	ldrh	r3, [r3, #0]
 8012ef4:	88fa      	ldrh	r2, [r7, #6]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d208      	bcs.n	8012f0c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012efa:	4b10      	ldr	r3, [pc, #64]	; (8012f3c <tcp_get_next_optbyte+0x68>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	3314      	adds	r3, #20
 8012f00:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012f02:	88fb      	ldrh	r3, [r7, #6]
 8012f04:	683a      	ldr	r2, [r7, #0]
 8012f06:	4413      	add	r3, r2
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	e00b      	b.n	8012f24 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012f0c:	88fb      	ldrh	r3, [r7, #6]
 8012f0e:	b2da      	uxtb	r2, r3
 8012f10:	4b09      	ldr	r3, [pc, #36]	; (8012f38 <tcp_get_next_optbyte+0x64>)
 8012f12:	881b      	ldrh	r3, [r3, #0]
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	1ad3      	subs	r3, r2, r3
 8012f18:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012f1a:	4b06      	ldr	r3, [pc, #24]	; (8012f34 <tcp_get_next_optbyte+0x60>)
 8012f1c:	681a      	ldr	r2, [r3, #0]
 8012f1e:	797b      	ldrb	r3, [r7, #5]
 8012f20:	4413      	add	r3, r2
 8012f22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	370c      	adds	r7, #12
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2e:	4770      	bx	lr
 8012f30:	24004148 	.word	0x24004148
 8012f34:	24004144 	.word	0x24004144
 8012f38:	24004142 	.word	0x24004142
 8012f3c:	2400413c 	.word	0x2400413c

08012f40 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b084      	sub	sp, #16
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d106      	bne.n	8012f5c <tcp_parseopt+0x1c>
 8012f4e:	4b32      	ldr	r3, [pc, #200]	; (8013018 <tcp_parseopt+0xd8>)
 8012f50:	f240 727d 	movw	r2, #1917	; 0x77d
 8012f54:	4931      	ldr	r1, [pc, #196]	; (801301c <tcp_parseopt+0xdc>)
 8012f56:	4832      	ldr	r0, [pc, #200]	; (8013020 <tcp_parseopt+0xe0>)
 8012f58:	f004 fbfa 	bl	8017750 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012f5c:	4b31      	ldr	r3, [pc, #196]	; (8013024 <tcp_parseopt+0xe4>)
 8012f5e:	881b      	ldrh	r3, [r3, #0]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d055      	beq.n	8013010 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012f64:	4b30      	ldr	r3, [pc, #192]	; (8013028 <tcp_parseopt+0xe8>)
 8012f66:	2200      	movs	r2, #0
 8012f68:	801a      	strh	r2, [r3, #0]
 8012f6a:	e045      	b.n	8012ff8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012f6c:	f7ff ffb2 	bl	8012ed4 <tcp_get_next_optbyte>
 8012f70:	4603      	mov	r3, r0
 8012f72:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012f74:	7bfb      	ldrb	r3, [r7, #15]
 8012f76:	2b02      	cmp	r3, #2
 8012f78:	d006      	beq.n	8012f88 <tcp_parseopt+0x48>
 8012f7a:	2b02      	cmp	r3, #2
 8012f7c:	dc2b      	bgt.n	8012fd6 <tcp_parseopt+0x96>
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d041      	beq.n	8013006 <tcp_parseopt+0xc6>
 8012f82:	2b01      	cmp	r3, #1
 8012f84:	d127      	bne.n	8012fd6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012f86:	e037      	b.n	8012ff8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012f88:	f7ff ffa4 	bl	8012ed4 <tcp_get_next_optbyte>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	2b04      	cmp	r3, #4
 8012f90:	d13b      	bne.n	801300a <tcp_parseopt+0xca>
 8012f92:	4b25      	ldr	r3, [pc, #148]	; (8013028 <tcp_parseopt+0xe8>)
 8012f94:	881b      	ldrh	r3, [r3, #0]
 8012f96:	3301      	adds	r3, #1
 8012f98:	4a22      	ldr	r2, [pc, #136]	; (8013024 <tcp_parseopt+0xe4>)
 8012f9a:	8812      	ldrh	r2, [r2, #0]
 8012f9c:	4293      	cmp	r3, r2
 8012f9e:	da34      	bge.n	801300a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012fa0:	f7ff ff98 	bl	8012ed4 <tcp_get_next_optbyte>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	b29b      	uxth	r3, r3
 8012fa8:	021b      	lsls	r3, r3, #8
 8012faa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012fac:	f7ff ff92 	bl	8012ed4 <tcp_get_next_optbyte>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	b29a      	uxth	r2, r3
 8012fb4:	89bb      	ldrh	r3, [r7, #12]
 8012fb6:	4313      	orrs	r3, r2
 8012fb8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012fba:	89bb      	ldrh	r3, [r7, #12]
 8012fbc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012fc0:	d804      	bhi.n	8012fcc <tcp_parseopt+0x8c>
 8012fc2:	89bb      	ldrh	r3, [r7, #12]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d001      	beq.n	8012fcc <tcp_parseopt+0x8c>
 8012fc8:	89ba      	ldrh	r2, [r7, #12]
 8012fca:	e001      	b.n	8012fd0 <tcp_parseopt+0x90>
 8012fcc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012fd4:	e010      	b.n	8012ff8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012fd6:	f7ff ff7d 	bl	8012ed4 <tcp_get_next_optbyte>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012fde:	7afb      	ldrb	r3, [r7, #11]
 8012fe0:	2b01      	cmp	r3, #1
 8012fe2:	d914      	bls.n	801300e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012fe4:	7afb      	ldrb	r3, [r7, #11]
 8012fe6:	b29a      	uxth	r2, r3
 8012fe8:	4b0f      	ldr	r3, [pc, #60]	; (8013028 <tcp_parseopt+0xe8>)
 8012fea:	881b      	ldrh	r3, [r3, #0]
 8012fec:	4413      	add	r3, r2
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	3b02      	subs	r3, #2
 8012ff2:	b29a      	uxth	r2, r3
 8012ff4:	4b0c      	ldr	r3, [pc, #48]	; (8013028 <tcp_parseopt+0xe8>)
 8012ff6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012ff8:	4b0b      	ldr	r3, [pc, #44]	; (8013028 <tcp_parseopt+0xe8>)
 8012ffa:	881a      	ldrh	r2, [r3, #0]
 8012ffc:	4b09      	ldr	r3, [pc, #36]	; (8013024 <tcp_parseopt+0xe4>)
 8012ffe:	881b      	ldrh	r3, [r3, #0]
 8013000:	429a      	cmp	r2, r3
 8013002:	d3b3      	bcc.n	8012f6c <tcp_parseopt+0x2c>
 8013004:	e004      	b.n	8013010 <tcp_parseopt+0xd0>
          return;
 8013006:	bf00      	nop
 8013008:	e002      	b.n	8013010 <tcp_parseopt+0xd0>
            return;
 801300a:	bf00      	nop
 801300c:	e000      	b.n	8013010 <tcp_parseopt+0xd0>
            return;
 801300e:	bf00      	nop
      }
    }
  }
}
 8013010:	3710      	adds	r7, #16
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	08019a24 	.word	0x08019a24
 801301c:	08019e88 	.word	0x08019e88
 8013020:	08019a70 	.word	0x08019a70
 8013024:	24004140 	.word	0x24004140
 8013028:	24004148 	.word	0x24004148

0801302c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801302c:	b480      	push	{r7}
 801302e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013030:	4b05      	ldr	r3, [pc, #20]	; (8013048 <tcp_trigger_input_pcb_close+0x1c>)
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	f043 0310 	orr.w	r3, r3, #16
 8013038:	b2da      	uxtb	r2, r3
 801303a:	4b03      	ldr	r3, [pc, #12]	; (8013048 <tcp_trigger_input_pcb_close+0x1c>)
 801303c:	701a      	strb	r2, [r3, #0]
}
 801303e:	bf00      	nop
 8013040:	46bd      	mov	sp, r7
 8013042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013046:	4770      	bx	lr
 8013048:	24004159 	.word	0x24004159

0801304c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d00a      	beq.n	8013074 <tcp_route+0x28>
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	7a1b      	ldrb	r3, [r3, #8]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d006      	beq.n	8013074 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	7a1b      	ldrb	r3, [r3, #8]
 801306a:	4618      	mov	r0, r3
 801306c:	f7fb fb24 	bl	800e6b8 <netif_get_by_index>
 8013070:	4603      	mov	r3, r0
 8013072:	e003      	b.n	801307c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f002 fed3 	bl	8015e20 <ip4_route>
 801307a:	4603      	mov	r3, r0
  }
}
 801307c:	4618      	mov	r0, r3
 801307e:	3710      	adds	r7, #16
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013084:	b590      	push	{r4, r7, lr}
 8013086:	b087      	sub	sp, #28
 8013088:	af00      	add	r7, sp, #0
 801308a:	60f8      	str	r0, [r7, #12]
 801308c:	60b9      	str	r1, [r7, #8]
 801308e:	603b      	str	r3, [r7, #0]
 8013090:	4613      	mov	r3, r2
 8013092:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d105      	bne.n	80130a6 <tcp_create_segment+0x22>
 801309a:	4b44      	ldr	r3, [pc, #272]	; (80131ac <tcp_create_segment+0x128>)
 801309c:	22a3      	movs	r2, #163	; 0xa3
 801309e:	4944      	ldr	r1, [pc, #272]	; (80131b0 <tcp_create_segment+0x12c>)
 80130a0:	4844      	ldr	r0, [pc, #272]	; (80131b4 <tcp_create_segment+0x130>)
 80130a2:	f004 fb55 	bl	8017750 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d105      	bne.n	80130b8 <tcp_create_segment+0x34>
 80130ac:	4b3f      	ldr	r3, [pc, #252]	; (80131ac <tcp_create_segment+0x128>)
 80130ae:	22a4      	movs	r2, #164	; 0xa4
 80130b0:	4941      	ldr	r1, [pc, #260]	; (80131b8 <tcp_create_segment+0x134>)
 80130b2:	4840      	ldr	r0, [pc, #256]	; (80131b4 <tcp_create_segment+0x130>)
 80130b4:	f004 fb4c 	bl	8017750 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80130b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80130bc:	009b      	lsls	r3, r3, #2
 80130be:	b2db      	uxtb	r3, r3
 80130c0:	f003 0304 	and.w	r3, r3, #4
 80130c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80130c6:	2003      	movs	r0, #3
 80130c8:	f7fa ff6a 	bl	800dfa0 <memp_malloc>
 80130cc:	6138      	str	r0, [r7, #16]
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d104      	bne.n	80130de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80130d4:	68b8      	ldr	r0, [r7, #8]
 80130d6:	f7fb fe7d 	bl	800edd4 <pbuf_free>
    return NULL;
 80130da:	2300      	movs	r3, #0
 80130dc:	e061      	b.n	80131a2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80130e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	2200      	movs	r2, #0
 80130ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	68ba      	ldr	r2, [r7, #8]
 80130f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	891a      	ldrh	r2, [r3, #8]
 80130f6:	7dfb      	ldrb	r3, [r7, #23]
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d205      	bcs.n	801310a <tcp_create_segment+0x86>
 80130fe:	4b2b      	ldr	r3, [pc, #172]	; (80131ac <tcp_create_segment+0x128>)
 8013100:	22b0      	movs	r2, #176	; 0xb0
 8013102:	492e      	ldr	r1, [pc, #184]	; (80131bc <tcp_create_segment+0x138>)
 8013104:	482b      	ldr	r0, [pc, #172]	; (80131b4 <tcp_create_segment+0x130>)
 8013106:	f004 fb23 	bl	8017750 <iprintf>
  seg->len = p->tot_len - optlen;
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	891a      	ldrh	r2, [r3, #8]
 801310e:	7dfb      	ldrb	r3, [r7, #23]
 8013110:	b29b      	uxth	r3, r3
 8013112:	1ad3      	subs	r3, r2, r3
 8013114:	b29a      	uxth	r2, r3
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801311a:	2114      	movs	r1, #20
 801311c:	68b8      	ldr	r0, [r7, #8]
 801311e:	f7fb fdc3 	bl	800eca8 <pbuf_add_header>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d004      	beq.n	8013132 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013128:	6938      	ldr	r0, [r7, #16]
 801312a:	f7fd f8d2 	bl	80102d2 <tcp_seg_free>
    return NULL;
 801312e:	2300      	movs	r3, #0
 8013130:	e037      	b.n	80131a2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013132:	693b      	ldr	r3, [r7, #16]
 8013134:	685b      	ldr	r3, [r3, #4]
 8013136:	685a      	ldr	r2, [r3, #4]
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	8ada      	ldrh	r2, [r3, #22]
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	68dc      	ldr	r4, [r3, #12]
 8013144:	4610      	mov	r0, r2
 8013146:	f7fa f99b 	bl	800d480 <lwip_htons>
 801314a:	4603      	mov	r3, r0
 801314c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	8b1a      	ldrh	r2, [r3, #24]
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	68dc      	ldr	r4, [r3, #12]
 8013156:	4610      	mov	r0, r2
 8013158:	f7fa f992 	bl	800d480 <lwip_htons>
 801315c:	4603      	mov	r3, r0
 801315e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013160:	693b      	ldr	r3, [r7, #16]
 8013162:	68dc      	ldr	r4, [r3, #12]
 8013164:	6838      	ldr	r0, [r7, #0]
 8013166:	f7fa f9a0 	bl	800d4aa <lwip_htonl>
 801316a:	4603      	mov	r3, r0
 801316c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801316e:	7dfb      	ldrb	r3, [r7, #23]
 8013170:	089b      	lsrs	r3, r3, #2
 8013172:	b2db      	uxtb	r3, r3
 8013174:	b29b      	uxth	r3, r3
 8013176:	3305      	adds	r3, #5
 8013178:	b29b      	uxth	r3, r3
 801317a:	031b      	lsls	r3, r3, #12
 801317c:	b29a      	uxth	r2, r3
 801317e:	79fb      	ldrb	r3, [r7, #7]
 8013180:	b29b      	uxth	r3, r3
 8013182:	4313      	orrs	r3, r2
 8013184:	b29a      	uxth	r2, r3
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	68dc      	ldr	r4, [r3, #12]
 801318a:	4610      	mov	r0, r2
 801318c:	f7fa f978 	bl	800d480 <lwip_htons>
 8013190:	4603      	mov	r3, r0
 8013192:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013194:	693b      	ldr	r3, [r7, #16]
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	2200      	movs	r2, #0
 801319a:	749a      	strb	r2, [r3, #18]
 801319c:	2200      	movs	r2, #0
 801319e:	74da      	strb	r2, [r3, #19]
  return seg;
 80131a0:	693b      	ldr	r3, [r7, #16]
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	371c      	adds	r7, #28
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd90      	pop	{r4, r7, pc}
 80131aa:	bf00      	nop
 80131ac:	08019ea4 	.word	0x08019ea4
 80131b0:	08019ed8 	.word	0x08019ed8
 80131b4:	08019ef8 	.word	0x08019ef8
 80131b8:	08019f20 	.word	0x08019f20
 80131bc:	08019f44 	.word	0x08019f44

080131c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80131c0:	b590      	push	{r4, r7, lr}
 80131c2:	b08b      	sub	sp, #44	; 0x2c
 80131c4:	af02      	add	r7, sp, #8
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	460b      	mov	r3, r1
 80131ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80131cc:	2300      	movs	r3, #0
 80131ce:	61fb      	str	r3, [r7, #28]
 80131d0:	2300      	movs	r3, #0
 80131d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80131d4:	2300      	movs	r3, #0
 80131d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d106      	bne.n	80131ec <tcp_split_unsent_seg+0x2c>
 80131de:	4b95      	ldr	r3, [pc, #596]	; (8013434 <tcp_split_unsent_seg+0x274>)
 80131e0:	f240 324b 	movw	r2, #843	; 0x34b
 80131e4:	4994      	ldr	r1, [pc, #592]	; (8013438 <tcp_split_unsent_seg+0x278>)
 80131e6:	4895      	ldr	r0, [pc, #596]	; (801343c <tcp_split_unsent_seg+0x27c>)
 80131e8:	f004 fab2 	bl	8017750 <iprintf>

  useg = pcb->unsent;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d102      	bne.n	80131fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80131f8:	f04f 33ff 	mov.w	r3, #4294967295
 80131fc:	e116      	b.n	801342c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80131fe:	887b      	ldrh	r3, [r7, #2]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d109      	bne.n	8013218 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013204:	4b8b      	ldr	r3, [pc, #556]	; (8013434 <tcp_split_unsent_seg+0x274>)
 8013206:	f240 3253 	movw	r2, #851	; 0x353
 801320a:	498d      	ldr	r1, [pc, #564]	; (8013440 <tcp_split_unsent_seg+0x280>)
 801320c:	488b      	ldr	r0, [pc, #556]	; (801343c <tcp_split_unsent_seg+0x27c>)
 801320e:	f004 fa9f 	bl	8017750 <iprintf>
    return ERR_VAL;
 8013212:	f06f 0305 	mvn.w	r3, #5
 8013216:	e109      	b.n	801342c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	891b      	ldrh	r3, [r3, #8]
 801321c:	887a      	ldrh	r2, [r7, #2]
 801321e:	429a      	cmp	r2, r3
 8013220:	d301      	bcc.n	8013226 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013222:	2300      	movs	r3, #0
 8013224:	e102      	b.n	801342c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801322a:	887a      	ldrh	r2, [r7, #2]
 801322c:	429a      	cmp	r2, r3
 801322e:	d906      	bls.n	801323e <tcp_split_unsent_seg+0x7e>
 8013230:	4b80      	ldr	r3, [pc, #512]	; (8013434 <tcp_split_unsent_seg+0x274>)
 8013232:	f240 325b 	movw	r2, #859	; 0x35b
 8013236:	4983      	ldr	r1, [pc, #524]	; (8013444 <tcp_split_unsent_seg+0x284>)
 8013238:	4880      	ldr	r0, [pc, #512]	; (801343c <tcp_split_unsent_seg+0x27c>)
 801323a:	f004 fa89 	bl	8017750 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	891b      	ldrh	r3, [r3, #8]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d106      	bne.n	8013254 <tcp_split_unsent_seg+0x94>
 8013246:	4b7b      	ldr	r3, [pc, #492]	; (8013434 <tcp_split_unsent_seg+0x274>)
 8013248:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801324c:	497e      	ldr	r1, [pc, #504]	; (8013448 <tcp_split_unsent_seg+0x288>)
 801324e:	487b      	ldr	r0, [pc, #492]	; (801343c <tcp_split_unsent_seg+0x27c>)
 8013250:	f004 fa7e 	bl	8017750 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	7a9b      	ldrb	r3, [r3, #10]
 8013258:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801325a:	7bfb      	ldrb	r3, [r7, #15]
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	b2db      	uxtb	r3, r3
 8013260:	f003 0304 	and.w	r3, r3, #4
 8013264:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	891a      	ldrh	r2, [r3, #8]
 801326a:	887b      	ldrh	r3, [r7, #2]
 801326c:	1ad3      	subs	r3, r2, r3
 801326e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013270:	7bbb      	ldrb	r3, [r7, #14]
 8013272:	b29a      	uxth	r2, r3
 8013274:	89bb      	ldrh	r3, [r7, #12]
 8013276:	4413      	add	r3, r2
 8013278:	b29b      	uxth	r3, r3
 801327a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801327e:	4619      	mov	r1, r3
 8013280:	2036      	movs	r0, #54	; 0x36
 8013282:	f7fb fac3 	bl	800e80c <pbuf_alloc>
 8013286:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	2b00      	cmp	r3, #0
 801328c:	f000 80b7 	beq.w	80133fe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	685b      	ldr	r3, [r3, #4]
 8013294:	891a      	ldrh	r2, [r3, #8]
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	891b      	ldrh	r3, [r3, #8]
 801329a:	1ad3      	subs	r3, r2, r3
 801329c:	b29a      	uxth	r2, r3
 801329e:	887b      	ldrh	r3, [r7, #2]
 80132a0:	4413      	add	r3, r2
 80132a2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	6858      	ldr	r0, [r3, #4]
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	685a      	ldr	r2, [r3, #4]
 80132ac:	7bbb      	ldrb	r3, [r7, #14]
 80132ae:	18d1      	adds	r1, r2, r3
 80132b0:	897b      	ldrh	r3, [r7, #10]
 80132b2:	89ba      	ldrh	r2, [r7, #12]
 80132b4:	f7fb ff84 	bl	800f1c0 <pbuf_copy_partial>
 80132b8:	4603      	mov	r3, r0
 80132ba:	461a      	mov	r2, r3
 80132bc:	89bb      	ldrh	r3, [r7, #12]
 80132be:	4293      	cmp	r3, r2
 80132c0:	f040 809f 	bne.w	8013402 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80132c4:	697b      	ldr	r3, [r7, #20]
 80132c6:	68db      	ldr	r3, [r3, #12]
 80132c8:	899b      	ldrh	r3, [r3, #12]
 80132ca:	b29b      	uxth	r3, r3
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7fa f8d7 	bl	800d480 <lwip_htons>
 80132d2:	4603      	mov	r3, r0
 80132d4:	b2db      	uxtb	r3, r3
 80132d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80132da:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80132dc:	2300      	movs	r3, #0
 80132de:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80132e0:	7efb      	ldrb	r3, [r7, #27]
 80132e2:	f003 0308 	and.w	r3, r3, #8
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d007      	beq.n	80132fa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80132ea:	7efb      	ldrb	r3, [r7, #27]
 80132ec:	f023 0308 	bic.w	r3, r3, #8
 80132f0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80132f2:	7ebb      	ldrb	r3, [r7, #26]
 80132f4:	f043 0308 	orr.w	r3, r3, #8
 80132f8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80132fa:	7efb      	ldrb	r3, [r7, #27]
 80132fc:	f003 0301 	and.w	r3, r3, #1
 8013300:	2b00      	cmp	r3, #0
 8013302:	d007      	beq.n	8013314 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013304:	7efb      	ldrb	r3, [r7, #27]
 8013306:	f023 0301 	bic.w	r3, r3, #1
 801330a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801330c:	7ebb      	ldrb	r3, [r7, #26]
 801330e:	f043 0301 	orr.w	r3, r3, #1
 8013312:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	4618      	mov	r0, r3
 801331c:	f7fa f8c5 	bl	800d4aa <lwip_htonl>
 8013320:	4602      	mov	r2, r0
 8013322:	887b      	ldrh	r3, [r7, #2]
 8013324:	18d1      	adds	r1, r2, r3
 8013326:	7eba      	ldrb	r2, [r7, #26]
 8013328:	7bfb      	ldrb	r3, [r7, #15]
 801332a:	9300      	str	r3, [sp, #0]
 801332c:	460b      	mov	r3, r1
 801332e:	6939      	ldr	r1, [r7, #16]
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f7ff fea7 	bl	8013084 <tcp_create_segment>
 8013336:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013338:	69fb      	ldr	r3, [r7, #28]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d063      	beq.n	8013406 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	685b      	ldr	r3, [r3, #4]
 8013342:	4618      	mov	r0, r3
 8013344:	f7fb fdd4 	bl	800eef0 <pbuf_clen>
 8013348:	4603      	mov	r3, r0
 801334a:	461a      	mov	r2, r3
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013352:	1a9b      	subs	r3, r3, r2
 8013354:	b29a      	uxth	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	6858      	ldr	r0, [r3, #4]
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	891a      	ldrh	r2, [r3, #8]
 8013366:	89bb      	ldrh	r3, [r7, #12]
 8013368:	1ad3      	subs	r3, r2, r3
 801336a:	b29b      	uxth	r3, r3
 801336c:	4619      	mov	r1, r3
 801336e:	f7fb fbab 	bl	800eac8 <pbuf_realloc>
  useg->len -= remainder;
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	891a      	ldrh	r2, [r3, #8]
 8013376:	89bb      	ldrh	r3, [r7, #12]
 8013378:	1ad3      	subs	r3, r2, r3
 801337a:	b29a      	uxth	r2, r3
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	68db      	ldr	r3, [r3, #12]
 8013384:	899b      	ldrh	r3, [r3, #12]
 8013386:	b29c      	uxth	r4, r3
 8013388:	7efb      	ldrb	r3, [r7, #27]
 801338a:	b29b      	uxth	r3, r3
 801338c:	4618      	mov	r0, r3
 801338e:	f7fa f877 	bl	800d480 <lwip_htons>
 8013392:	4603      	mov	r3, r0
 8013394:	461a      	mov	r2, r3
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	68db      	ldr	r3, [r3, #12]
 801339a:	4322      	orrs	r2, r4
 801339c:	b292      	uxth	r2, r2
 801339e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7fb fda3 	bl	800eef0 <pbuf_clen>
 80133aa:	4603      	mov	r3, r0
 80133ac:	461a      	mov	r2, r3
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133b4:	4413      	add	r3, r2
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80133be:	69fb      	ldr	r3, [r7, #28]
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7fb fd94 	bl	800eef0 <pbuf_clen>
 80133c8:	4603      	mov	r3, r0
 80133ca:	461a      	mov	r2, r3
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133d2:	4413      	add	r3, r2
 80133d4:	b29a      	uxth	r2, r3
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	681a      	ldr	r2, [r3, #0]
 80133e0:	69fb      	ldr	r3, [r7, #28]
 80133e2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	69fa      	ldr	r2, [r7, #28]
 80133e8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80133ea:	69fb      	ldr	r3, [r7, #28]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d103      	bne.n	80133fa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2200      	movs	r2, #0
 80133f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80133fa:	2300      	movs	r3, #0
 80133fc:	e016      	b.n	801342c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80133fe:	bf00      	nop
 8013400:	e002      	b.n	8013408 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013402:	bf00      	nop
 8013404:	e000      	b.n	8013408 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013406:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013408:	69fb      	ldr	r3, [r7, #28]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d006      	beq.n	801341c <tcp_split_unsent_seg+0x25c>
 801340e:	4b09      	ldr	r3, [pc, #36]	; (8013434 <tcp_split_unsent_seg+0x274>)
 8013410:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013414:	490d      	ldr	r1, [pc, #52]	; (801344c <tcp_split_unsent_seg+0x28c>)
 8013416:	4809      	ldr	r0, [pc, #36]	; (801343c <tcp_split_unsent_seg+0x27c>)
 8013418:	f004 f99a 	bl	8017750 <iprintf>
  if (p != NULL) {
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d002      	beq.n	8013428 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013422:	6938      	ldr	r0, [r7, #16]
 8013424:	f7fb fcd6 	bl	800edd4 <pbuf_free>
  }

  return ERR_MEM;
 8013428:	f04f 33ff 	mov.w	r3, #4294967295
}
 801342c:	4618      	mov	r0, r3
 801342e:	3724      	adds	r7, #36	; 0x24
 8013430:	46bd      	mov	sp, r7
 8013432:	bd90      	pop	{r4, r7, pc}
 8013434:	08019ea4 	.word	0x08019ea4
 8013438:	0801a238 	.word	0x0801a238
 801343c:	08019ef8 	.word	0x08019ef8
 8013440:	0801a25c 	.word	0x0801a25c
 8013444:	0801a280 	.word	0x0801a280
 8013448:	0801a290 	.word	0x0801a290
 801344c:	0801a2a0 	.word	0x0801a2a0

08013450 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013450:	b590      	push	{r4, r7, lr}
 8013452:	b085      	sub	sp, #20
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d106      	bne.n	801346c <tcp_send_fin+0x1c>
 801345e:	4b21      	ldr	r3, [pc, #132]	; (80134e4 <tcp_send_fin+0x94>)
 8013460:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013464:	4920      	ldr	r1, [pc, #128]	; (80134e8 <tcp_send_fin+0x98>)
 8013466:	4821      	ldr	r0, [pc, #132]	; (80134ec <tcp_send_fin+0x9c>)
 8013468:	f004 f972 	bl	8017750 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013470:	2b00      	cmp	r3, #0
 8013472:	d02e      	beq.n	80134d2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013478:	60fb      	str	r3, [r7, #12]
 801347a:	e002      	b.n	8013482 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d1f8      	bne.n	801347c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	68db      	ldr	r3, [r3, #12]
 801348e:	899b      	ldrh	r3, [r3, #12]
 8013490:	b29b      	uxth	r3, r3
 8013492:	4618      	mov	r0, r3
 8013494:	f7f9 fff4 	bl	800d480 <lwip_htons>
 8013498:	4603      	mov	r3, r0
 801349a:	b2db      	uxtb	r3, r3
 801349c:	f003 0307 	and.w	r3, r3, #7
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d116      	bne.n	80134d2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	68db      	ldr	r3, [r3, #12]
 80134a8:	899b      	ldrh	r3, [r3, #12]
 80134aa:	b29c      	uxth	r4, r3
 80134ac:	2001      	movs	r0, #1
 80134ae:	f7f9 ffe7 	bl	800d480 <lwip_htons>
 80134b2:	4603      	mov	r3, r0
 80134b4:	461a      	mov	r2, r3
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	68db      	ldr	r3, [r3, #12]
 80134ba:	4322      	orrs	r2, r4
 80134bc:	b292      	uxth	r2, r2
 80134be:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	8b5b      	ldrh	r3, [r3, #26]
 80134c4:	f043 0320 	orr.w	r3, r3, #32
 80134c8:	b29a      	uxth	r2, r3
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80134ce:	2300      	movs	r3, #0
 80134d0:	e004      	b.n	80134dc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80134d2:	2101      	movs	r1, #1
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f000 f80b 	bl	80134f0 <tcp_enqueue_flags>
 80134da:	4603      	mov	r3, r0
}
 80134dc:	4618      	mov	r0, r3
 80134de:	3714      	adds	r7, #20
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd90      	pop	{r4, r7, pc}
 80134e4:	08019ea4 	.word	0x08019ea4
 80134e8:	0801a2ac 	.word	0x0801a2ac
 80134ec:	08019ef8 	.word	0x08019ef8

080134f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b08a      	sub	sp, #40	; 0x28
 80134f4:	af02      	add	r7, sp, #8
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	460b      	mov	r3, r1
 80134fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80134fc:	2300      	movs	r3, #0
 80134fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013500:	2300      	movs	r3, #0
 8013502:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013504:	78fb      	ldrb	r3, [r7, #3]
 8013506:	f003 0303 	and.w	r3, r3, #3
 801350a:	2b00      	cmp	r3, #0
 801350c:	d106      	bne.n	801351c <tcp_enqueue_flags+0x2c>
 801350e:	4b67      	ldr	r3, [pc, #412]	; (80136ac <tcp_enqueue_flags+0x1bc>)
 8013510:	f240 4211 	movw	r2, #1041	; 0x411
 8013514:	4966      	ldr	r1, [pc, #408]	; (80136b0 <tcp_enqueue_flags+0x1c0>)
 8013516:	4867      	ldr	r0, [pc, #412]	; (80136b4 <tcp_enqueue_flags+0x1c4>)
 8013518:	f004 f91a 	bl	8017750 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d106      	bne.n	8013530 <tcp_enqueue_flags+0x40>
 8013522:	4b62      	ldr	r3, [pc, #392]	; (80136ac <tcp_enqueue_flags+0x1bc>)
 8013524:	f240 4213 	movw	r2, #1043	; 0x413
 8013528:	4963      	ldr	r1, [pc, #396]	; (80136b8 <tcp_enqueue_flags+0x1c8>)
 801352a:	4862      	ldr	r0, [pc, #392]	; (80136b4 <tcp_enqueue_flags+0x1c4>)
 801352c:	f004 f910 	bl	8017750 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013530:	78fb      	ldrb	r3, [r7, #3]
 8013532:	f003 0302 	and.w	r3, r3, #2
 8013536:	2b00      	cmp	r3, #0
 8013538:	d001      	beq.n	801353e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801353a:	2301      	movs	r3, #1
 801353c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801353e:	7ffb      	ldrb	r3, [r7, #31]
 8013540:	009b      	lsls	r3, r3, #2
 8013542:	b2db      	uxtb	r3, r3
 8013544:	f003 0304 	and.w	r3, r3, #4
 8013548:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801354a:	7dfb      	ldrb	r3, [r7, #23]
 801354c:	b29b      	uxth	r3, r3
 801354e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013552:	4619      	mov	r1, r3
 8013554:	2036      	movs	r0, #54	; 0x36
 8013556:	f7fb f959 	bl	800e80c <pbuf_alloc>
 801355a:	6138      	str	r0, [r7, #16]
 801355c:	693b      	ldr	r3, [r7, #16]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d109      	bne.n	8013576 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	8b5b      	ldrh	r3, [r3, #26]
 8013566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801356a:	b29a      	uxth	r2, r3
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013570:	f04f 33ff 	mov.w	r3, #4294967295
 8013574:	e095      	b.n	80136a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013576:	693b      	ldr	r3, [r7, #16]
 8013578:	895a      	ldrh	r2, [r3, #10]
 801357a:	7dfb      	ldrb	r3, [r7, #23]
 801357c:	b29b      	uxth	r3, r3
 801357e:	429a      	cmp	r2, r3
 8013580:	d206      	bcs.n	8013590 <tcp_enqueue_flags+0xa0>
 8013582:	4b4a      	ldr	r3, [pc, #296]	; (80136ac <tcp_enqueue_flags+0x1bc>)
 8013584:	f240 4239 	movw	r2, #1081	; 0x439
 8013588:	494c      	ldr	r1, [pc, #304]	; (80136bc <tcp_enqueue_flags+0x1cc>)
 801358a:	484a      	ldr	r0, [pc, #296]	; (80136b4 <tcp_enqueue_flags+0x1c4>)
 801358c:	f004 f8e0 	bl	8017750 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013594:	78fa      	ldrb	r2, [r7, #3]
 8013596:	7ffb      	ldrb	r3, [r7, #31]
 8013598:	9300      	str	r3, [sp, #0]
 801359a:	460b      	mov	r3, r1
 801359c:	6939      	ldr	r1, [r7, #16]
 801359e:	6878      	ldr	r0, [r7, #4]
 80135a0:	f7ff fd70 	bl	8013084 <tcp_create_segment>
 80135a4:	60f8      	str	r0, [r7, #12]
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d109      	bne.n	80135c0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	8b5b      	ldrh	r3, [r3, #26]
 80135b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135b4:	b29a      	uxth	r2, r3
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80135ba:	f04f 33ff 	mov.w	r3, #4294967295
 80135be:	e070      	b.n	80136a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	68db      	ldr	r3, [r3, #12]
 80135c4:	f003 0303 	and.w	r3, r3, #3
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d006      	beq.n	80135da <tcp_enqueue_flags+0xea>
 80135cc:	4b37      	ldr	r3, [pc, #220]	; (80136ac <tcp_enqueue_flags+0x1bc>)
 80135ce:	f240 4242 	movw	r2, #1090	; 0x442
 80135d2:	493b      	ldr	r1, [pc, #236]	; (80136c0 <tcp_enqueue_flags+0x1d0>)
 80135d4:	4837      	ldr	r0, [pc, #220]	; (80136b4 <tcp_enqueue_flags+0x1c4>)
 80135d6:	f004 f8bb 	bl	8017750 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	891b      	ldrh	r3, [r3, #8]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d006      	beq.n	80135f0 <tcp_enqueue_flags+0x100>
 80135e2:	4b32      	ldr	r3, [pc, #200]	; (80136ac <tcp_enqueue_flags+0x1bc>)
 80135e4:	f240 4243 	movw	r2, #1091	; 0x443
 80135e8:	4936      	ldr	r1, [pc, #216]	; (80136c4 <tcp_enqueue_flags+0x1d4>)
 80135ea:	4832      	ldr	r0, [pc, #200]	; (80136b4 <tcp_enqueue_flags+0x1c4>)
 80135ec:	f004 f8b0 	bl	8017750 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d103      	bne.n	8013600 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	68fa      	ldr	r2, [r7, #12]
 80135fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80135fe:	e00d      	b.n	801361c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013604:	61bb      	str	r3, [r7, #24]
 8013606:	e002      	b.n	801360e <tcp_enqueue_flags+0x11e>
 8013608:	69bb      	ldr	r3, [r7, #24]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	61bb      	str	r3, [r7, #24]
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d1f8      	bne.n	8013608 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013616:	69bb      	ldr	r3, [r7, #24]
 8013618:	68fa      	ldr	r2, [r7, #12]
 801361a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	2200      	movs	r2, #0
 8013620:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013624:	78fb      	ldrb	r3, [r7, #3]
 8013626:	f003 0302 	and.w	r3, r3, #2
 801362a:	2b00      	cmp	r3, #0
 801362c:	d104      	bne.n	8013638 <tcp_enqueue_flags+0x148>
 801362e:	78fb      	ldrb	r3, [r7, #3]
 8013630:	f003 0301 	and.w	r3, r3, #1
 8013634:	2b00      	cmp	r3, #0
 8013636:	d004      	beq.n	8013642 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801363c:	1c5a      	adds	r2, r3, #1
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013642:	78fb      	ldrb	r3, [r7, #3]
 8013644:	f003 0301 	and.w	r3, r3, #1
 8013648:	2b00      	cmp	r3, #0
 801364a:	d006      	beq.n	801365a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	8b5b      	ldrh	r3, [r3, #26]
 8013650:	f043 0320 	orr.w	r3, r3, #32
 8013654:	b29a      	uxth	r2, r3
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	4618      	mov	r0, r3
 8013660:	f7fb fc46 	bl	800eef0 <pbuf_clen>
 8013664:	4603      	mov	r3, r0
 8013666:	461a      	mov	r2, r3
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801366e:	4413      	add	r3, r2
 8013670:	b29a      	uxth	r2, r3
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801367e:	2b00      	cmp	r3, #0
 8013680:	d00e      	beq.n	80136a0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013686:	2b00      	cmp	r3, #0
 8013688:	d10a      	bne.n	80136a0 <tcp_enqueue_flags+0x1b0>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801368e:	2b00      	cmp	r3, #0
 8013690:	d106      	bne.n	80136a0 <tcp_enqueue_flags+0x1b0>
 8013692:	4b06      	ldr	r3, [pc, #24]	; (80136ac <tcp_enqueue_flags+0x1bc>)
 8013694:	f240 4265 	movw	r2, #1125	; 0x465
 8013698:	490b      	ldr	r1, [pc, #44]	; (80136c8 <tcp_enqueue_flags+0x1d8>)
 801369a:	4806      	ldr	r0, [pc, #24]	; (80136b4 <tcp_enqueue_flags+0x1c4>)
 801369c:	f004 f858 	bl	8017750 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80136a0:	2300      	movs	r3, #0
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3720      	adds	r7, #32
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
 80136aa:	bf00      	nop
 80136ac:	08019ea4 	.word	0x08019ea4
 80136b0:	0801a2c8 	.word	0x0801a2c8
 80136b4:	08019ef8 	.word	0x08019ef8
 80136b8:	0801a320 	.word	0x0801a320
 80136bc:	0801a340 	.word	0x0801a340
 80136c0:	0801a37c 	.word	0x0801a37c
 80136c4:	0801a394 	.word	0x0801a394
 80136c8:	0801a3c0 	.word	0x0801a3c0

080136cc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80136cc:	b5b0      	push	{r4, r5, r7, lr}
 80136ce:	b08a      	sub	sp, #40	; 0x28
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d106      	bne.n	80136e8 <tcp_output+0x1c>
 80136da:	4b9e      	ldr	r3, [pc, #632]	; (8013954 <tcp_output+0x288>)
 80136dc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80136e0:	499d      	ldr	r1, [pc, #628]	; (8013958 <tcp_output+0x28c>)
 80136e2:	489e      	ldr	r0, [pc, #632]	; (801395c <tcp_output+0x290>)
 80136e4:	f004 f834 	bl	8017750 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	7d1b      	ldrb	r3, [r3, #20]
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d106      	bne.n	80136fe <tcp_output+0x32>
 80136f0:	4b98      	ldr	r3, [pc, #608]	; (8013954 <tcp_output+0x288>)
 80136f2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80136f6:	499a      	ldr	r1, [pc, #616]	; (8013960 <tcp_output+0x294>)
 80136f8:	4898      	ldr	r0, [pc, #608]	; (801395c <tcp_output+0x290>)
 80136fa:	f004 f829 	bl	8017750 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80136fe:	4b99      	ldr	r3, [pc, #612]	; (8013964 <tcp_output+0x298>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	687a      	ldr	r2, [r7, #4]
 8013704:	429a      	cmp	r2, r3
 8013706:	d101      	bne.n	801370c <tcp_output+0x40>
    return ERR_OK;
 8013708:	2300      	movs	r3, #0
 801370a:	e1ce      	b.n	8013aaa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013718:	4293      	cmp	r3, r2
 801371a:	bf28      	it	cs
 801371c:	4613      	movcs	r3, r2
 801371e:	b29b      	uxth	r3, r3
 8013720:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013726:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801372a:	2b00      	cmp	r3, #0
 801372c:	d10b      	bne.n	8013746 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	8b5b      	ldrh	r3, [r3, #26]
 8013732:	f003 0302 	and.w	r3, r3, #2
 8013736:	2b00      	cmp	r3, #0
 8013738:	f000 81aa 	beq.w	8013a90 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f000 fdcb 	bl	80142d8 <tcp_send_empty_ack>
 8013742:	4603      	mov	r3, r0
 8013744:	e1b1      	b.n	8013aaa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013746:	6879      	ldr	r1, [r7, #4]
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	3304      	adds	r3, #4
 801374c:	461a      	mov	r2, r3
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f7ff fc7c 	bl	801304c <tcp_route>
 8013754:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d102      	bne.n	8013762 <tcp_output+0x96>
    return ERR_RTE;
 801375c:	f06f 0303 	mvn.w	r3, #3
 8013760:	e1a3      	b.n	8013aaa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d003      	beq.n	8013770 <tcp_output+0xa4>
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d111      	bne.n	8013794 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d002      	beq.n	801377c <tcp_output+0xb0>
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	3304      	adds	r3, #4
 801377a:	e000      	b.n	801377e <tcp_output+0xb2>
 801377c:	2300      	movs	r3, #0
 801377e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d102      	bne.n	801378c <tcp_output+0xc0>
      return ERR_RTE;
 8013786:	f06f 0303 	mvn.w	r3, #3
 801378a:	e18e      	b.n	8013aaa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	4618      	mov	r0, r3
 801379c:	f7f9 fe85 	bl	800d4aa <lwip_htonl>
 80137a0:	4602      	mov	r2, r0
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137a6:	1ad3      	subs	r3, r2, r3
 80137a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137aa:	8912      	ldrh	r2, [r2, #8]
 80137ac:	4413      	add	r3, r2
 80137ae:	69ba      	ldr	r2, [r7, #24]
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d227      	bcs.n	8013804 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80137ba:	461a      	mov	r2, r3
 80137bc:	69bb      	ldr	r3, [r7, #24]
 80137be:	4293      	cmp	r3, r2
 80137c0:	d114      	bne.n	80137ec <tcp_output+0x120>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d110      	bne.n	80137ec <tcp_output+0x120>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d10b      	bne.n	80137ec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2200      	movs	r2, #0
 80137d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2201      	movs	r2, #1
 80137e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2200      	movs	r2, #0
 80137e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	8b5b      	ldrh	r3, [r3, #26]
 80137f0:	f003 0302 	and.w	r3, r3, #2
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	f000 814d 	beq.w	8013a94 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f000 fd6c 	bl	80142d8 <tcp_send_empty_ack>
 8013800:	4603      	mov	r3, r0
 8013802:	e152      	b.n	8013aaa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	2200      	movs	r2, #0
 8013808:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013810:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013812:	6a3b      	ldr	r3, [r7, #32]
 8013814:	2b00      	cmp	r3, #0
 8013816:	f000 811c 	beq.w	8013a52 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801381a:	e002      	b.n	8013822 <tcp_output+0x156>
 801381c:	6a3b      	ldr	r3, [r7, #32]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	623b      	str	r3, [r7, #32]
 8013822:	6a3b      	ldr	r3, [r7, #32]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d1f8      	bne.n	801381c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801382a:	e112      	b.n	8013a52 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382e:	68db      	ldr	r3, [r3, #12]
 8013830:	899b      	ldrh	r3, [r3, #12]
 8013832:	b29b      	uxth	r3, r3
 8013834:	4618      	mov	r0, r3
 8013836:	f7f9 fe23 	bl	800d480 <lwip_htons>
 801383a:	4603      	mov	r3, r0
 801383c:	b2db      	uxtb	r3, r3
 801383e:	f003 0304 	and.w	r3, r3, #4
 8013842:	2b00      	cmp	r3, #0
 8013844:	d006      	beq.n	8013854 <tcp_output+0x188>
 8013846:	4b43      	ldr	r3, [pc, #268]	; (8013954 <tcp_output+0x288>)
 8013848:	f240 5236 	movw	r2, #1334	; 0x536
 801384c:	4946      	ldr	r1, [pc, #280]	; (8013968 <tcp_output+0x29c>)
 801384e:	4843      	ldr	r0, [pc, #268]	; (801395c <tcp_output+0x290>)
 8013850:	f003 ff7e 	bl	8017750 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013858:	2b00      	cmp	r3, #0
 801385a:	d01f      	beq.n	801389c <tcp_output+0x1d0>
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	8b5b      	ldrh	r3, [r3, #26]
 8013860:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013864:	2b00      	cmp	r3, #0
 8013866:	d119      	bne.n	801389c <tcp_output+0x1d0>
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801386c:	2b00      	cmp	r3, #0
 801386e:	d00b      	beq.n	8013888 <tcp_output+0x1bc>
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d110      	bne.n	801389c <tcp_output+0x1d0>
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801387e:	891a      	ldrh	r2, [r3, #8]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013884:	429a      	cmp	r2, r3
 8013886:	d209      	bcs.n	801389c <tcp_output+0x1d0>
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801388e:	2b00      	cmp	r3, #0
 8013890:	d004      	beq.n	801389c <tcp_output+0x1d0>
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013898:	2b08      	cmp	r3, #8
 801389a:	d901      	bls.n	80138a0 <tcp_output+0x1d4>
 801389c:	2301      	movs	r3, #1
 801389e:	e000      	b.n	80138a2 <tcp_output+0x1d6>
 80138a0:	2300      	movs	r3, #0
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d106      	bne.n	80138b4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	8b5b      	ldrh	r3, [r3, #26]
 80138aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	f000 80e4 	beq.w	8013a7c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	7d1b      	ldrb	r3, [r3, #20]
 80138b8:	2b02      	cmp	r3, #2
 80138ba:	d00d      	beq.n	80138d8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80138bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138be:	68db      	ldr	r3, [r3, #12]
 80138c0:	899b      	ldrh	r3, [r3, #12]
 80138c2:	b29c      	uxth	r4, r3
 80138c4:	2010      	movs	r0, #16
 80138c6:	f7f9 fddb 	bl	800d480 <lwip_htons>
 80138ca:	4603      	mov	r3, r0
 80138cc:	461a      	mov	r2, r3
 80138ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d0:	68db      	ldr	r3, [r3, #12]
 80138d2:	4322      	orrs	r2, r4
 80138d4:	b292      	uxth	r2, r2
 80138d6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80138d8:	697a      	ldr	r2, [r7, #20]
 80138da:	6879      	ldr	r1, [r7, #4]
 80138dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138de:	f000 f909 	bl	8013af4 <tcp_output_segment>
 80138e2:	4603      	mov	r3, r0
 80138e4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80138e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d009      	beq.n	8013902 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	8b5b      	ldrh	r3, [r3, #26]
 80138f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138f6:	b29a      	uxth	r2, r3
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	835a      	strh	r2, [r3, #26]
      return err;
 80138fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013900:	e0d3      	b.n	8013aaa <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013904:	681a      	ldr	r2, [r3, #0]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	7d1b      	ldrb	r3, [r3, #20]
 801390e:	2b02      	cmp	r3, #2
 8013910:	d006      	beq.n	8013920 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	8b5b      	ldrh	r3, [r3, #26]
 8013916:	f023 0303 	bic.w	r3, r3, #3
 801391a:	b29a      	uxth	r2, r3
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013922:	68db      	ldr	r3, [r3, #12]
 8013924:	685b      	ldr	r3, [r3, #4]
 8013926:	4618      	mov	r0, r3
 8013928:	f7f9 fdbf 	bl	800d4aa <lwip_htonl>
 801392c:	4604      	mov	r4, r0
 801392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013930:	891b      	ldrh	r3, [r3, #8]
 8013932:	461d      	mov	r5, r3
 8013934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013936:	68db      	ldr	r3, [r3, #12]
 8013938:	899b      	ldrh	r3, [r3, #12]
 801393a:	b29b      	uxth	r3, r3
 801393c:	4618      	mov	r0, r3
 801393e:	f7f9 fd9f 	bl	800d480 <lwip_htons>
 8013942:	4603      	mov	r3, r0
 8013944:	b2db      	uxtb	r3, r3
 8013946:	f003 0303 	and.w	r3, r3, #3
 801394a:	2b00      	cmp	r3, #0
 801394c:	d00e      	beq.n	801396c <tcp_output+0x2a0>
 801394e:	2301      	movs	r3, #1
 8013950:	e00d      	b.n	801396e <tcp_output+0x2a2>
 8013952:	bf00      	nop
 8013954:	08019ea4 	.word	0x08019ea4
 8013958:	0801a3e8 	.word	0x0801a3e8
 801395c:	08019ef8 	.word	0x08019ef8
 8013960:	0801a400 	.word	0x0801a400
 8013964:	24007868 	.word	0x24007868
 8013968:	0801a428 	.word	0x0801a428
 801396c:	2300      	movs	r3, #0
 801396e:	442b      	add	r3, r5
 8013970:	4423      	add	r3, r4
 8013972:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	1ad3      	subs	r3, r2, r3
 801397c:	2b00      	cmp	r3, #0
 801397e:	da02      	bge.n	8013986 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	68ba      	ldr	r2, [r7, #8]
 8013984:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013988:	891b      	ldrh	r3, [r3, #8]
 801398a:	461c      	mov	r4, r3
 801398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801398e:	68db      	ldr	r3, [r3, #12]
 8013990:	899b      	ldrh	r3, [r3, #12]
 8013992:	b29b      	uxth	r3, r3
 8013994:	4618      	mov	r0, r3
 8013996:	f7f9 fd73 	bl	800d480 <lwip_htons>
 801399a:	4603      	mov	r3, r0
 801399c:	b2db      	uxtb	r3, r3
 801399e:	f003 0303 	and.w	r3, r3, #3
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d001      	beq.n	80139aa <tcp_output+0x2de>
 80139a6:	2301      	movs	r3, #1
 80139a8:	e000      	b.n	80139ac <tcp_output+0x2e0>
 80139aa:	2300      	movs	r3, #0
 80139ac:	4423      	add	r3, r4
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d049      	beq.n	8013a46 <tcp_output+0x37a>
      seg->next = NULL;
 80139b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b4:	2200      	movs	r2, #0
 80139b6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d105      	bne.n	80139cc <tcp_output+0x300>
        pcb->unacked = seg;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139c4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80139c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c8:	623b      	str	r3, [r7, #32]
 80139ca:	e03f      	b.n	8013a4c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80139cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ce:	68db      	ldr	r3, [r3, #12]
 80139d0:	685b      	ldr	r3, [r3, #4]
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7f9 fd69 	bl	800d4aa <lwip_htonl>
 80139d8:	4604      	mov	r4, r0
 80139da:	6a3b      	ldr	r3, [r7, #32]
 80139dc:	68db      	ldr	r3, [r3, #12]
 80139de:	685b      	ldr	r3, [r3, #4]
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7f9 fd62 	bl	800d4aa <lwip_htonl>
 80139e6:	4603      	mov	r3, r0
 80139e8:	1ae3      	subs	r3, r4, r3
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	da24      	bge.n	8013a38 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	3370      	adds	r3, #112	; 0x70
 80139f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80139f4:	e002      	b.n	80139fc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80139f6:	69fb      	ldr	r3, [r7, #28]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d011      	beq.n	8013a28 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013a04:	69fb      	ldr	r3, [r7, #28]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	68db      	ldr	r3, [r3, #12]
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7f9 fd4c 	bl	800d4aa <lwip_htonl>
 8013a12:	4604      	mov	r4, r0
 8013a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a16:	68db      	ldr	r3, [r3, #12]
 8013a18:	685b      	ldr	r3, [r3, #4]
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7f9 fd45 	bl	800d4aa <lwip_htonl>
 8013a20:	4603      	mov	r3, r0
 8013a22:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	dbe6      	blt.n	80139f6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013a28:	69fb      	ldr	r3, [r7, #28]
 8013a2a:	681a      	ldr	r2, [r3, #0]
 8013a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a2e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013a30:	69fb      	ldr	r3, [r7, #28]
 8013a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a34:	601a      	str	r2, [r3, #0]
 8013a36:	e009      	b.n	8013a4c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013a38:	6a3b      	ldr	r3, [r7, #32]
 8013a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a3c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013a3e:	6a3b      	ldr	r3, [r7, #32]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	623b      	str	r3, [r7, #32]
 8013a44:	e002      	b.n	8013a4c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a48:	f7fc fc43 	bl	80102d2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a50:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d012      	beq.n	8013a7e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	685b      	ldr	r3, [r3, #4]
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7f9 fd23 	bl	800d4aa <lwip_htonl>
 8013a64:	4602      	mov	r2, r0
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a6a:	1ad3      	subs	r3, r2, r3
 8013a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a6e:	8912      	ldrh	r2, [r2, #8]
 8013a70:	4413      	add	r3, r2
  while (seg != NULL &&
 8013a72:	69ba      	ldr	r2, [r7, #24]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	f4bf aed9 	bcs.w	801382c <tcp_output+0x160>
 8013a7a:	e000      	b.n	8013a7e <tcp_output+0x3b2>
      break;
 8013a7c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d108      	bne.n	8013a98 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2200      	movs	r2, #0
 8013a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013a8e:	e004      	b.n	8013a9a <tcp_output+0x3ce>
    goto output_done;
 8013a90:	bf00      	nop
 8013a92:	e002      	b.n	8013a9a <tcp_output+0x3ce>
    goto output_done;
 8013a94:	bf00      	nop
 8013a96:	e000      	b.n	8013a9a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013a98:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	8b5b      	ldrh	r3, [r3, #26]
 8013a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013aa2:	b29a      	uxth	r2, r3
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013aa8:	2300      	movs	r3, #0
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3728      	adds	r7, #40	; 0x28
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8013ab2:	bf00      	nop

08013ab4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d106      	bne.n	8013ad0 <tcp_output_segment_busy+0x1c>
 8013ac2:	4b09      	ldr	r3, [pc, #36]	; (8013ae8 <tcp_output_segment_busy+0x34>)
 8013ac4:	f240 529a 	movw	r2, #1434	; 0x59a
 8013ac8:	4908      	ldr	r1, [pc, #32]	; (8013aec <tcp_output_segment_busy+0x38>)
 8013aca:	4809      	ldr	r0, [pc, #36]	; (8013af0 <tcp_output_segment_busy+0x3c>)
 8013acc:	f003 fe40 	bl	8017750 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	7b9b      	ldrb	r3, [r3, #14]
 8013ad6:	2b01      	cmp	r3, #1
 8013ad8:	d001      	beq.n	8013ade <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013ada:	2301      	movs	r3, #1
 8013adc:	e000      	b.n	8013ae0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013ade:	2300      	movs	r3, #0
}
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	3708      	adds	r7, #8
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd80      	pop	{r7, pc}
 8013ae8:	08019ea4 	.word	0x08019ea4
 8013aec:	0801a440 	.word	0x0801a440
 8013af0:	08019ef8 	.word	0x08019ef8

08013af4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013af4:	b5b0      	push	{r4, r5, r7, lr}
 8013af6:	b08c      	sub	sp, #48	; 0x30
 8013af8:	af04      	add	r7, sp, #16
 8013afa:	60f8      	str	r0, [r7, #12]
 8013afc:	60b9      	str	r1, [r7, #8]
 8013afe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d106      	bne.n	8013b14 <tcp_output_segment+0x20>
 8013b06:	4b63      	ldr	r3, [pc, #396]	; (8013c94 <tcp_output_segment+0x1a0>)
 8013b08:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013b0c:	4962      	ldr	r1, [pc, #392]	; (8013c98 <tcp_output_segment+0x1a4>)
 8013b0e:	4863      	ldr	r0, [pc, #396]	; (8013c9c <tcp_output_segment+0x1a8>)
 8013b10:	f003 fe1e 	bl	8017750 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d106      	bne.n	8013b28 <tcp_output_segment+0x34>
 8013b1a:	4b5e      	ldr	r3, [pc, #376]	; (8013c94 <tcp_output_segment+0x1a0>)
 8013b1c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013b20:	495f      	ldr	r1, [pc, #380]	; (8013ca0 <tcp_output_segment+0x1ac>)
 8013b22:	485e      	ldr	r0, [pc, #376]	; (8013c9c <tcp_output_segment+0x1a8>)
 8013b24:	f003 fe14 	bl	8017750 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d106      	bne.n	8013b3c <tcp_output_segment+0x48>
 8013b2e:	4b59      	ldr	r3, [pc, #356]	; (8013c94 <tcp_output_segment+0x1a0>)
 8013b30:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013b34:	495b      	ldr	r1, [pc, #364]	; (8013ca4 <tcp_output_segment+0x1b0>)
 8013b36:	4859      	ldr	r0, [pc, #356]	; (8013c9c <tcp_output_segment+0x1a8>)
 8013b38:	f003 fe0a 	bl	8017750 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013b3c:	68f8      	ldr	r0, [r7, #12]
 8013b3e:	f7ff ffb9 	bl	8013ab4 <tcp_output_segment_busy>
 8013b42:	4603      	mov	r3, r0
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d001      	beq.n	8013b4c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	e09f      	b.n	8013c8c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	68dc      	ldr	r4, [r3, #12]
 8013b54:	4610      	mov	r0, r2
 8013b56:	f7f9 fca8 	bl	800d4aa <lwip_htonl>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013b5e:	68bb      	ldr	r3, [r7, #8]
 8013b60:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	68dc      	ldr	r4, [r3, #12]
 8013b66:	4610      	mov	r0, r2
 8013b68:	f7f9 fc8a 	bl	800d480 <lwip_htons>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b74:	68ba      	ldr	r2, [r7, #8]
 8013b76:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013b78:	441a      	add	r2, r3
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	68db      	ldr	r3, [r3, #12]
 8013b82:	3314      	adds	r3, #20
 8013b84:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	7a9b      	ldrb	r3, [r3, #10]
 8013b8a:	f003 0301 	and.w	r3, r3, #1
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d015      	beq.n	8013bbe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	3304      	adds	r3, #4
 8013b96:	461a      	mov	r2, r3
 8013b98:	6879      	ldr	r1, [r7, #4]
 8013b9a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013b9e:	f7fc fe8f 	bl	80108c0 <tcp_eff_send_mss_netif>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013ba6:	8b7b      	ldrh	r3, [r7, #26]
 8013ba8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7f9 fc7c 	bl	800d4aa <lwip_htonl>
 8013bb2:	4602      	mov	r2, r0
 8013bb4:	69fb      	ldr	r3, [r7, #28]
 8013bb6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013bb8:	69fb      	ldr	r3, [r7, #28]
 8013bba:	3304      	adds	r3, #4
 8013bbc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	da02      	bge.n	8013bce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	2200      	movs	r2, #0
 8013bcc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013bce:	68bb      	ldr	r3, [r7, #8]
 8013bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d10c      	bne.n	8013bf0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013bd6:	4b34      	ldr	r3, [pc, #208]	; (8013ca8 <tcp_output_segment+0x1b4>)
 8013bd8:	681a      	ldr	r2, [r3, #0]
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	685b      	ldr	r3, [r3, #4]
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7f9 fc60 	bl	800d4aa <lwip_htonl>
 8013bea:	4602      	mov	r2, r0
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	68da      	ldr	r2, [r3, #12]
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	1ad3      	subs	r3, r2, r3
 8013bfc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	8959      	ldrh	r1, [r3, #10]
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	685b      	ldr	r3, [r3, #4]
 8013c08:	8b3a      	ldrh	r2, [r7, #24]
 8013c0a:	1a8a      	subs	r2, r1, r2
 8013c0c:	b292      	uxth	r2, r2
 8013c0e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	8919      	ldrh	r1, [r3, #8]
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	685b      	ldr	r3, [r3, #4]
 8013c1a:	8b3a      	ldrh	r2, [r7, #24]
 8013c1c:	1a8a      	subs	r2, r1, r2
 8013c1e:	b292      	uxth	r2, r2
 8013c20:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	685b      	ldr	r3, [r3, #4]
 8013c26:	68fa      	ldr	r2, [r7, #12]
 8013c28:	68d2      	ldr	r2, [r2, #12]
 8013c2a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	68db      	ldr	r3, [r3, #12]
 8013c30:	2200      	movs	r2, #0
 8013c32:	741a      	strb	r2, [r3, #16]
 8013c34:	2200      	movs	r2, #0
 8013c36:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	68db      	ldr	r3, [r3, #12]
 8013c3c:	f103 0214 	add.w	r2, r3, #20
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	7a9b      	ldrb	r3, [r3, #10]
 8013c44:	009b      	lsls	r3, r3, #2
 8013c46:	f003 0304 	and.w	r3, r3, #4
 8013c4a:	4413      	add	r3, r2
 8013c4c:	69fa      	ldr	r2, [r7, #28]
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d006      	beq.n	8013c60 <tcp_output_segment+0x16c>
 8013c52:	4b10      	ldr	r3, [pc, #64]	; (8013c94 <tcp_output_segment+0x1a0>)
 8013c54:	f240 621c 	movw	r2, #1564	; 0x61c
 8013c58:	4914      	ldr	r1, [pc, #80]	; (8013cac <tcp_output_segment+0x1b8>)
 8013c5a:	4810      	ldr	r0, [pc, #64]	; (8013c9c <tcp_output_segment+0x1a8>)
 8013c5c:	f003 fd78 	bl	8017750 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	6858      	ldr	r0, [r3, #4]
 8013c64:	68b9      	ldr	r1, [r7, #8]
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	1d1c      	adds	r4, r3, #4
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	7add      	ldrb	r5, [r3, #11]
 8013c6e:	68bb      	ldr	r3, [r7, #8]
 8013c70:	7a9b      	ldrb	r3, [r3, #10]
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	9202      	str	r2, [sp, #8]
 8013c76:	2206      	movs	r2, #6
 8013c78:	9201      	str	r2, [sp, #4]
 8013c7a:	9300      	str	r3, [sp, #0]
 8013c7c:	462b      	mov	r3, r5
 8013c7e:	4622      	mov	r2, r4
 8013c80:	f002 fa8c 	bl	801619c <ip4_output_if>
 8013c84:	4603      	mov	r3, r0
 8013c86:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	3720      	adds	r7, #32
 8013c90:	46bd      	mov	sp, r7
 8013c92:	bdb0      	pop	{r4, r5, r7, pc}
 8013c94:	08019ea4 	.word	0x08019ea4
 8013c98:	0801a468 	.word	0x0801a468
 8013c9c:	08019ef8 	.word	0x08019ef8
 8013ca0:	0801a488 	.word	0x0801a488
 8013ca4:	0801a4a8 	.word	0x0801a4a8
 8013ca8:	24007858 	.word	0x24007858
 8013cac:	0801a4cc 	.word	0x0801a4cc

08013cb0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013cb0:	b5b0      	push	{r4, r5, r7, lr}
 8013cb2:	b084      	sub	sp, #16
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d106      	bne.n	8013ccc <tcp_rexmit_rto_prepare+0x1c>
 8013cbe:	4b31      	ldr	r3, [pc, #196]	; (8013d84 <tcp_rexmit_rto_prepare+0xd4>)
 8013cc0:	f240 6263 	movw	r2, #1635	; 0x663
 8013cc4:	4930      	ldr	r1, [pc, #192]	; (8013d88 <tcp_rexmit_rto_prepare+0xd8>)
 8013cc6:	4831      	ldr	r0, [pc, #196]	; (8013d8c <tcp_rexmit_rto_prepare+0xdc>)
 8013cc8:	f003 fd42 	bl	8017750 <iprintf>

  if (pcb->unacked == NULL) {
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d102      	bne.n	8013cda <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013cd4:	f06f 0305 	mvn.w	r3, #5
 8013cd8:	e050      	b.n	8013d7c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cde:	60fb      	str	r3, [r7, #12]
 8013ce0:	e00b      	b.n	8013cfa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013ce2:	68f8      	ldr	r0, [r7, #12]
 8013ce4:	f7ff fee6 	bl	8013ab4 <tcp_output_segment_busy>
 8013ce8:	4603      	mov	r3, r0
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d002      	beq.n	8013cf4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013cee:	f06f 0305 	mvn.w	r3, #5
 8013cf2:	e043      	b.n	8013d7c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	60fb      	str	r3, [r7, #12]
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d1ef      	bne.n	8013ce2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013d02:	68f8      	ldr	r0, [r7, #12]
 8013d04:	f7ff fed6 	bl	8013ab4 <tcp_output_segment_busy>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d002      	beq.n	8013d14 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013d0e:	f06f 0305 	mvn.w	r3, #5
 8013d12:	e033      	b.n	8013d7c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2200      	movs	r2, #0
 8013d28:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	8b5b      	ldrh	r3, [r3, #26]
 8013d2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013d32:	b29a      	uxth	r2, r3
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	68db      	ldr	r3, [r3, #12]
 8013d3c:	685b      	ldr	r3, [r3, #4]
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f7f9 fbb3 	bl	800d4aa <lwip_htonl>
 8013d44:	4604      	mov	r4, r0
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	891b      	ldrh	r3, [r3, #8]
 8013d4a:	461d      	mov	r5, r3
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	68db      	ldr	r3, [r3, #12]
 8013d50:	899b      	ldrh	r3, [r3, #12]
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7f9 fb93 	bl	800d480 <lwip_htons>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	b2db      	uxtb	r3, r3
 8013d5e:	f003 0303 	and.w	r3, r3, #3
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d001      	beq.n	8013d6a <tcp_rexmit_rto_prepare+0xba>
 8013d66:	2301      	movs	r3, #1
 8013d68:	e000      	b.n	8013d6c <tcp_rexmit_rto_prepare+0xbc>
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	442b      	add	r3, r5
 8013d6e:	18e2      	adds	r2, r4, r3
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2200      	movs	r2, #0
 8013d78:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013d7a:	2300      	movs	r3, #0
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3710      	adds	r7, #16
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bdb0      	pop	{r4, r5, r7, pc}
 8013d84:	08019ea4 	.word	0x08019ea4
 8013d88:	0801a4e0 	.word	0x0801a4e0
 8013d8c:	08019ef8 	.word	0x08019ef8

08013d90 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b082      	sub	sp, #8
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d106      	bne.n	8013dac <tcp_rexmit_rto_commit+0x1c>
 8013d9e:	4b0d      	ldr	r3, [pc, #52]	; (8013dd4 <tcp_rexmit_rto_commit+0x44>)
 8013da0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013da4:	490c      	ldr	r1, [pc, #48]	; (8013dd8 <tcp_rexmit_rto_commit+0x48>)
 8013da6:	480d      	ldr	r0, [pc, #52]	; (8013ddc <tcp_rexmit_rto_commit+0x4c>)
 8013da8:	f003 fcd2 	bl	8017750 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013db2:	2bff      	cmp	r3, #255	; 0xff
 8013db4:	d007      	beq.n	8013dc6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	b2da      	uxtb	r2, r3
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f7ff fc80 	bl	80136cc <tcp_output>
}
 8013dcc:	bf00      	nop
 8013dce:	3708      	adds	r7, #8
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd80      	pop	{r7, pc}
 8013dd4:	08019ea4 	.word	0x08019ea4
 8013dd8:	0801a504 	.word	0x0801a504
 8013ddc:	08019ef8 	.word	0x08019ef8

08013de0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d106      	bne.n	8013dfc <tcp_rexmit_rto+0x1c>
 8013dee:	4b0a      	ldr	r3, [pc, #40]	; (8013e18 <tcp_rexmit_rto+0x38>)
 8013df0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013df4:	4909      	ldr	r1, [pc, #36]	; (8013e1c <tcp_rexmit_rto+0x3c>)
 8013df6:	480a      	ldr	r0, [pc, #40]	; (8013e20 <tcp_rexmit_rto+0x40>)
 8013df8:	f003 fcaa 	bl	8017750 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f7ff ff57 	bl	8013cb0 <tcp_rexmit_rto_prepare>
 8013e02:	4603      	mov	r3, r0
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d102      	bne.n	8013e0e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f7ff ffc1 	bl	8013d90 <tcp_rexmit_rto_commit>
  }
}
 8013e0e:	bf00      	nop
 8013e10:	3708      	adds	r7, #8
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}
 8013e16:	bf00      	nop
 8013e18:	08019ea4 	.word	0x08019ea4
 8013e1c:	0801a528 	.word	0x0801a528
 8013e20:	08019ef8 	.word	0x08019ef8

08013e24 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013e24:	b590      	push	{r4, r7, lr}
 8013e26:	b085      	sub	sp, #20
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d106      	bne.n	8013e40 <tcp_rexmit+0x1c>
 8013e32:	4b2f      	ldr	r3, [pc, #188]	; (8013ef0 <tcp_rexmit+0xcc>)
 8013e34:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013e38:	492e      	ldr	r1, [pc, #184]	; (8013ef4 <tcp_rexmit+0xd0>)
 8013e3a:	482f      	ldr	r0, [pc, #188]	; (8013ef8 <tcp_rexmit+0xd4>)
 8013e3c:	f003 fc88 	bl	8017750 <iprintf>

  if (pcb->unacked == NULL) {
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d102      	bne.n	8013e4e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013e48:	f06f 0305 	mvn.w	r3, #5
 8013e4c:	e04c      	b.n	8013ee8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e52:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013e54:	68b8      	ldr	r0, [r7, #8]
 8013e56:	f7ff fe2d 	bl	8013ab4 <tcp_output_segment_busy>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d002      	beq.n	8013e66 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013e60:	f06f 0305 	mvn.w	r3, #5
 8013e64:	e040      	b.n	8013ee8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	336c      	adds	r3, #108	; 0x6c
 8013e72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013e74:	e002      	b.n	8013e7c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d011      	beq.n	8013ea8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	68db      	ldr	r3, [r3, #12]
 8013e8a:	685b      	ldr	r3, [r3, #4]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7f9 fb0c 	bl	800d4aa <lwip_htonl>
 8013e92:	4604      	mov	r4, r0
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	68db      	ldr	r3, [r3, #12]
 8013e98:	685b      	ldr	r3, [r3, #4]
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7f9 fb05 	bl	800d4aa <lwip_htonl>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	dbe6      	blt.n	8013e76 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	681a      	ldr	r2, [r3, #0]
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	68ba      	ldr	r2, [r7, #8]
 8013eb4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d103      	bne.n	8013ec6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013ecc:	2bff      	cmp	r3, #255	; 0xff
 8013ece:	d007      	beq.n	8013ee0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	b2da      	uxtb	r2, r3
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013ee6:	2300      	movs	r3, #0
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3714      	adds	r7, #20
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd90      	pop	{r4, r7, pc}
 8013ef0:	08019ea4 	.word	0x08019ea4
 8013ef4:	0801a544 	.word	0x0801a544
 8013ef8:	08019ef8 	.word	0x08019ef8

08013efc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b082      	sub	sp, #8
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d106      	bne.n	8013f18 <tcp_rexmit_fast+0x1c>
 8013f0a:	4b2a      	ldr	r3, [pc, #168]	; (8013fb4 <tcp_rexmit_fast+0xb8>)
 8013f0c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013f10:	4929      	ldr	r1, [pc, #164]	; (8013fb8 <tcp_rexmit_fast+0xbc>)
 8013f12:	482a      	ldr	r0, [pc, #168]	; (8013fbc <tcp_rexmit_fast+0xc0>)
 8013f14:	f003 fc1c 	bl	8017750 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d045      	beq.n	8013fac <tcp_rexmit_fast+0xb0>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	8b5b      	ldrh	r3, [r3, #26]
 8013f24:	f003 0304 	and.w	r3, r3, #4
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d13f      	bne.n	8013fac <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f7ff ff79 	bl	8013e24 <tcp_rexmit>
 8013f32:	4603      	mov	r3, r0
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d139      	bne.n	8013fac <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f44:	4293      	cmp	r3, r2
 8013f46:	bf28      	it	cs
 8013f48:	4613      	movcs	r3, r2
 8013f4a:	b29b      	uxth	r3, r3
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	da00      	bge.n	8013f52 <tcp_rexmit_fast+0x56>
 8013f50:	3301      	adds	r3, #1
 8013f52:	105b      	asrs	r3, r3, #1
 8013f54:	b29a      	uxth	r2, r3
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013f62:	461a      	mov	r2, r3
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f68:	005b      	lsls	r3, r3, #1
 8013f6a:	429a      	cmp	r2, r3
 8013f6c:	d206      	bcs.n	8013f7c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f72:	005b      	lsls	r3, r3, #1
 8013f74:	b29a      	uxth	r2, r3
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f86:	4619      	mov	r1, r3
 8013f88:	0049      	lsls	r1, r1, #1
 8013f8a:	440b      	add	r3, r1
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	4413      	add	r3, r2
 8013f90:	b29a      	uxth	r2, r3
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	8b5b      	ldrh	r3, [r3, #26]
 8013f9c:	f043 0304 	orr.w	r3, r3, #4
 8013fa0:	b29a      	uxth	r2, r3
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	2200      	movs	r2, #0
 8013faa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013fac:	bf00      	nop
 8013fae:	3708      	adds	r7, #8
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}
 8013fb4:	08019ea4 	.word	0x08019ea4
 8013fb8:	0801a55c 	.word	0x0801a55c
 8013fbc:	08019ef8 	.word	0x08019ef8

08013fc0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b086      	sub	sp, #24
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	60f8      	str	r0, [r7, #12]
 8013fc8:	607b      	str	r3, [r7, #4]
 8013fca:	460b      	mov	r3, r1
 8013fcc:	817b      	strh	r3, [r7, #10]
 8013fce:	4613      	mov	r3, r2
 8013fd0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013fd2:	897a      	ldrh	r2, [r7, #10]
 8013fd4:	893b      	ldrh	r3, [r7, #8]
 8013fd6:	4413      	add	r3, r2
 8013fd8:	b29b      	uxth	r3, r3
 8013fda:	3314      	adds	r3, #20
 8013fdc:	b29b      	uxth	r3, r3
 8013fde:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013fe2:	4619      	mov	r1, r3
 8013fe4:	2022      	movs	r0, #34	; 0x22
 8013fe6:	f7fa fc11 	bl	800e80c <pbuf_alloc>
 8013fea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d04d      	beq.n	801408e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013ff2:	897b      	ldrh	r3, [r7, #10]
 8013ff4:	3313      	adds	r3, #19
 8013ff6:	697a      	ldr	r2, [r7, #20]
 8013ff8:	8952      	ldrh	r2, [r2, #10]
 8013ffa:	4293      	cmp	r3, r2
 8013ffc:	db06      	blt.n	801400c <tcp_output_alloc_header_common+0x4c>
 8013ffe:	4b26      	ldr	r3, [pc, #152]	; (8014098 <tcp_output_alloc_header_common+0xd8>)
 8014000:	f240 7223 	movw	r2, #1827	; 0x723
 8014004:	4925      	ldr	r1, [pc, #148]	; (801409c <tcp_output_alloc_header_common+0xdc>)
 8014006:	4826      	ldr	r0, [pc, #152]	; (80140a0 <tcp_output_alloc_header_common+0xe0>)
 8014008:	f003 fba2 	bl	8017750 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	685b      	ldr	r3, [r3, #4]
 8014010:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014012:	8c3b      	ldrh	r3, [r7, #32]
 8014014:	4618      	mov	r0, r3
 8014016:	f7f9 fa33 	bl	800d480 <lwip_htons>
 801401a:	4603      	mov	r3, r0
 801401c:	461a      	mov	r2, r3
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014024:	4618      	mov	r0, r3
 8014026:	f7f9 fa2b 	bl	800d480 <lwip_htons>
 801402a:	4603      	mov	r3, r0
 801402c:	461a      	mov	r2, r3
 801402e:	693b      	ldr	r3, [r7, #16]
 8014030:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014032:	693b      	ldr	r3, [r7, #16]
 8014034:	687a      	ldr	r2, [r7, #4]
 8014036:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014038:	68f8      	ldr	r0, [r7, #12]
 801403a:	f7f9 fa36 	bl	800d4aa <lwip_htonl>
 801403e:	4602      	mov	r2, r0
 8014040:	693b      	ldr	r3, [r7, #16]
 8014042:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014044:	897b      	ldrh	r3, [r7, #10]
 8014046:	089b      	lsrs	r3, r3, #2
 8014048:	b29b      	uxth	r3, r3
 801404a:	3305      	adds	r3, #5
 801404c:	b29b      	uxth	r3, r3
 801404e:	031b      	lsls	r3, r3, #12
 8014050:	b29a      	uxth	r2, r3
 8014052:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014056:	b29b      	uxth	r3, r3
 8014058:	4313      	orrs	r3, r2
 801405a:	b29b      	uxth	r3, r3
 801405c:	4618      	mov	r0, r3
 801405e:	f7f9 fa0f 	bl	800d480 <lwip_htons>
 8014062:	4603      	mov	r3, r0
 8014064:	461a      	mov	r2, r3
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801406a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801406c:	4618      	mov	r0, r3
 801406e:	f7f9 fa07 	bl	800d480 <lwip_htons>
 8014072:	4603      	mov	r3, r0
 8014074:	461a      	mov	r2, r3
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	2200      	movs	r2, #0
 801407e:	741a      	strb	r2, [r3, #16]
 8014080:	2200      	movs	r2, #0
 8014082:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014084:	693b      	ldr	r3, [r7, #16]
 8014086:	2200      	movs	r2, #0
 8014088:	749a      	strb	r2, [r3, #18]
 801408a:	2200      	movs	r2, #0
 801408c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801408e:	697b      	ldr	r3, [r7, #20]
}
 8014090:	4618      	mov	r0, r3
 8014092:	3718      	adds	r7, #24
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}
 8014098:	08019ea4 	.word	0x08019ea4
 801409c:	0801a57c 	.word	0x0801a57c
 80140a0:	08019ef8 	.word	0x08019ef8

080140a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80140a4:	b5b0      	push	{r4, r5, r7, lr}
 80140a6:	b08a      	sub	sp, #40	; 0x28
 80140a8:	af04      	add	r7, sp, #16
 80140aa:	60f8      	str	r0, [r7, #12]
 80140ac:	607b      	str	r3, [r7, #4]
 80140ae:	460b      	mov	r3, r1
 80140b0:	817b      	strh	r3, [r7, #10]
 80140b2:	4613      	mov	r3, r2
 80140b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d106      	bne.n	80140ca <tcp_output_alloc_header+0x26>
 80140bc:	4b15      	ldr	r3, [pc, #84]	; (8014114 <tcp_output_alloc_header+0x70>)
 80140be:	f240 7242 	movw	r2, #1858	; 0x742
 80140c2:	4915      	ldr	r1, [pc, #84]	; (8014118 <tcp_output_alloc_header+0x74>)
 80140c4:	4815      	ldr	r0, [pc, #84]	; (801411c <tcp_output_alloc_header+0x78>)
 80140c6:	f003 fb43 	bl	8017750 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	8adb      	ldrh	r3, [r3, #22]
 80140d2:	68fa      	ldr	r2, [r7, #12]
 80140d4:	8b12      	ldrh	r2, [r2, #24]
 80140d6:	68f9      	ldr	r1, [r7, #12]
 80140d8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80140da:	893d      	ldrh	r5, [r7, #8]
 80140dc:	897c      	ldrh	r4, [r7, #10]
 80140de:	9103      	str	r1, [sp, #12]
 80140e0:	2110      	movs	r1, #16
 80140e2:	9102      	str	r1, [sp, #8]
 80140e4:	9201      	str	r2, [sp, #4]
 80140e6:	9300      	str	r3, [sp, #0]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	462a      	mov	r2, r5
 80140ec:	4621      	mov	r1, r4
 80140ee:	f7ff ff67 	bl	8013fc0 <tcp_output_alloc_header_common>
 80140f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d006      	beq.n	8014108 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140fe:	68fa      	ldr	r2, [r7, #12]
 8014100:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014102:	441a      	add	r2, r3
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014108:	697b      	ldr	r3, [r7, #20]
}
 801410a:	4618      	mov	r0, r3
 801410c:	3718      	adds	r7, #24
 801410e:	46bd      	mov	sp, r7
 8014110:	bdb0      	pop	{r4, r5, r7, pc}
 8014112:	bf00      	nop
 8014114:	08019ea4 	.word	0x08019ea4
 8014118:	0801a5ac 	.word	0x0801a5ac
 801411c:	08019ef8 	.word	0x08019ef8

08014120 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b088      	sub	sp, #32
 8014124:	af00      	add	r7, sp, #0
 8014126:	60f8      	str	r0, [r7, #12]
 8014128:	60b9      	str	r1, [r7, #8]
 801412a:	4611      	mov	r1, r2
 801412c:	461a      	mov	r2, r3
 801412e:	460b      	mov	r3, r1
 8014130:	71fb      	strb	r3, [r7, #7]
 8014132:	4613      	mov	r3, r2
 8014134:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014136:	2300      	movs	r3, #0
 8014138:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d106      	bne.n	801414e <tcp_output_fill_options+0x2e>
 8014140:	4b13      	ldr	r3, [pc, #76]	; (8014190 <tcp_output_fill_options+0x70>)
 8014142:	f240 7256 	movw	r2, #1878	; 0x756
 8014146:	4913      	ldr	r1, [pc, #76]	; (8014194 <tcp_output_fill_options+0x74>)
 8014148:	4813      	ldr	r0, [pc, #76]	; (8014198 <tcp_output_fill_options+0x78>)
 801414a:	f003 fb01 	bl	8017750 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	685b      	ldr	r3, [r3, #4]
 8014152:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014154:	69bb      	ldr	r3, [r7, #24]
 8014156:	3314      	adds	r3, #20
 8014158:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801415a:	69bb      	ldr	r3, [r7, #24]
 801415c:	f103 0214 	add.w	r2, r3, #20
 8014160:	8bfb      	ldrh	r3, [r7, #30]
 8014162:	009b      	lsls	r3, r3, #2
 8014164:	4619      	mov	r1, r3
 8014166:	79fb      	ldrb	r3, [r7, #7]
 8014168:	009b      	lsls	r3, r3, #2
 801416a:	f003 0304 	and.w	r3, r3, #4
 801416e:	440b      	add	r3, r1
 8014170:	4413      	add	r3, r2
 8014172:	697a      	ldr	r2, [r7, #20]
 8014174:	429a      	cmp	r2, r3
 8014176:	d006      	beq.n	8014186 <tcp_output_fill_options+0x66>
 8014178:	4b05      	ldr	r3, [pc, #20]	; (8014190 <tcp_output_fill_options+0x70>)
 801417a:	f240 7275 	movw	r2, #1909	; 0x775
 801417e:	4907      	ldr	r1, [pc, #28]	; (801419c <tcp_output_fill_options+0x7c>)
 8014180:	4805      	ldr	r0, [pc, #20]	; (8014198 <tcp_output_fill_options+0x78>)
 8014182:	f003 fae5 	bl	8017750 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014186:	bf00      	nop
 8014188:	3720      	adds	r7, #32
 801418a:	46bd      	mov	sp, r7
 801418c:	bd80      	pop	{r7, pc}
 801418e:	bf00      	nop
 8014190:	08019ea4 	.word	0x08019ea4
 8014194:	0801a5d4 	.word	0x0801a5d4
 8014198:	08019ef8 	.word	0x08019ef8
 801419c:	0801a4cc 	.word	0x0801a4cc

080141a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b08a      	sub	sp, #40	; 0x28
 80141a4:	af04      	add	r7, sp, #16
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	60b9      	str	r1, [r7, #8]
 80141aa:	607a      	str	r2, [r7, #4]
 80141ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d106      	bne.n	80141c2 <tcp_output_control_segment+0x22>
 80141b4:	4b1c      	ldr	r3, [pc, #112]	; (8014228 <tcp_output_control_segment+0x88>)
 80141b6:	f240 7287 	movw	r2, #1927	; 0x787
 80141ba:	491c      	ldr	r1, [pc, #112]	; (801422c <tcp_output_control_segment+0x8c>)
 80141bc:	481c      	ldr	r0, [pc, #112]	; (8014230 <tcp_output_control_segment+0x90>)
 80141be:	f003 fac7 	bl	8017750 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80141c2:	683a      	ldr	r2, [r7, #0]
 80141c4:	6879      	ldr	r1, [r7, #4]
 80141c6:	68f8      	ldr	r0, [r7, #12]
 80141c8:	f7fe ff40 	bl	801304c <tcp_route>
 80141cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80141ce:	693b      	ldr	r3, [r7, #16]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d102      	bne.n	80141da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80141d4:	23fc      	movs	r3, #252	; 0xfc
 80141d6:	75fb      	strb	r3, [r7, #23]
 80141d8:	e01c      	b.n	8014214 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d006      	beq.n	80141ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	7adb      	ldrb	r3, [r3, #11]
 80141e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	7a9b      	ldrb	r3, [r3, #10]
 80141ea:	757b      	strb	r3, [r7, #21]
 80141ec:	e003      	b.n	80141f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80141ee:	23ff      	movs	r3, #255	; 0xff
 80141f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80141f2:	2300      	movs	r3, #0
 80141f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80141f6:	7dba      	ldrb	r2, [r7, #22]
 80141f8:	693b      	ldr	r3, [r7, #16]
 80141fa:	9302      	str	r3, [sp, #8]
 80141fc:	2306      	movs	r3, #6
 80141fe:	9301      	str	r3, [sp, #4]
 8014200:	7d7b      	ldrb	r3, [r7, #21]
 8014202:	9300      	str	r3, [sp, #0]
 8014204:	4613      	mov	r3, r2
 8014206:	683a      	ldr	r2, [r7, #0]
 8014208:	6879      	ldr	r1, [r7, #4]
 801420a:	68b8      	ldr	r0, [r7, #8]
 801420c:	f001 ffc6 	bl	801619c <ip4_output_if>
 8014210:	4603      	mov	r3, r0
 8014212:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014214:	68b8      	ldr	r0, [r7, #8]
 8014216:	f7fa fddd 	bl	800edd4 <pbuf_free>
  return err;
 801421a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801421e:	4618      	mov	r0, r3
 8014220:	3718      	adds	r7, #24
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}
 8014226:	bf00      	nop
 8014228:	08019ea4 	.word	0x08019ea4
 801422c:	0801a5fc 	.word	0x0801a5fc
 8014230:	08019ef8 	.word	0x08019ef8

08014234 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014234:	b590      	push	{r4, r7, lr}
 8014236:	b08b      	sub	sp, #44	; 0x2c
 8014238:	af04      	add	r7, sp, #16
 801423a:	60f8      	str	r0, [r7, #12]
 801423c:	60b9      	str	r1, [r7, #8]
 801423e:	607a      	str	r2, [r7, #4]
 8014240:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d106      	bne.n	8014256 <tcp_rst+0x22>
 8014248:	4b1f      	ldr	r3, [pc, #124]	; (80142c8 <tcp_rst+0x94>)
 801424a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801424e:	491f      	ldr	r1, [pc, #124]	; (80142cc <tcp_rst+0x98>)
 8014250:	481f      	ldr	r0, [pc, #124]	; (80142d0 <tcp_rst+0x9c>)
 8014252:	f003 fa7d 	bl	8017750 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014258:	2b00      	cmp	r3, #0
 801425a:	d106      	bne.n	801426a <tcp_rst+0x36>
 801425c:	4b1a      	ldr	r3, [pc, #104]	; (80142c8 <tcp_rst+0x94>)
 801425e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014262:	491c      	ldr	r1, [pc, #112]	; (80142d4 <tcp_rst+0xa0>)
 8014264:	481a      	ldr	r0, [pc, #104]	; (80142d0 <tcp_rst+0x9c>)
 8014266:	f003 fa73 	bl	8017750 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801426a:	2300      	movs	r3, #0
 801426c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801426e:	f246 0308 	movw	r3, #24584	; 0x6008
 8014272:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014274:	7dfb      	ldrb	r3, [r7, #23]
 8014276:	b29c      	uxth	r4, r3
 8014278:	68b8      	ldr	r0, [r7, #8]
 801427a:	f7f9 f916 	bl	800d4aa <lwip_htonl>
 801427e:	4602      	mov	r2, r0
 8014280:	8abb      	ldrh	r3, [r7, #20]
 8014282:	9303      	str	r3, [sp, #12]
 8014284:	2314      	movs	r3, #20
 8014286:	9302      	str	r3, [sp, #8]
 8014288:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801428a:	9301      	str	r3, [sp, #4]
 801428c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801428e:	9300      	str	r3, [sp, #0]
 8014290:	4613      	mov	r3, r2
 8014292:	2200      	movs	r2, #0
 8014294:	4621      	mov	r1, r4
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f7ff fe92 	bl	8013fc0 <tcp_output_alloc_header_common>
 801429c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801429e:	693b      	ldr	r3, [r7, #16]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d00c      	beq.n	80142be <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80142a4:	7dfb      	ldrb	r3, [r7, #23]
 80142a6:	2200      	movs	r2, #0
 80142a8:	6939      	ldr	r1, [r7, #16]
 80142aa:	68f8      	ldr	r0, [r7, #12]
 80142ac:	f7ff ff38 	bl	8014120 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80142b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142b2:	683a      	ldr	r2, [r7, #0]
 80142b4:	6939      	ldr	r1, [r7, #16]
 80142b6:	68f8      	ldr	r0, [r7, #12]
 80142b8:	f7ff ff72 	bl	80141a0 <tcp_output_control_segment>
 80142bc:	e000      	b.n	80142c0 <tcp_rst+0x8c>
    return;
 80142be:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80142c0:	371c      	adds	r7, #28
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd90      	pop	{r4, r7, pc}
 80142c6:	bf00      	nop
 80142c8:	08019ea4 	.word	0x08019ea4
 80142cc:	0801a628 	.word	0x0801a628
 80142d0:	08019ef8 	.word	0x08019ef8
 80142d4:	0801a644 	.word	0x0801a644

080142d8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80142d8:	b590      	push	{r4, r7, lr}
 80142da:	b087      	sub	sp, #28
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80142e0:	2300      	movs	r3, #0
 80142e2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80142e4:	2300      	movs	r3, #0
 80142e6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d106      	bne.n	80142fc <tcp_send_empty_ack+0x24>
 80142ee:	4b28      	ldr	r3, [pc, #160]	; (8014390 <tcp_send_empty_ack+0xb8>)
 80142f0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80142f4:	4927      	ldr	r1, [pc, #156]	; (8014394 <tcp_send_empty_ack+0xbc>)
 80142f6:	4828      	ldr	r0, [pc, #160]	; (8014398 <tcp_send_empty_ack+0xc0>)
 80142f8:	f003 fa2a 	bl	8017750 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80142fc:	7dfb      	ldrb	r3, [r7, #23]
 80142fe:	009b      	lsls	r3, r3, #2
 8014300:	b2db      	uxtb	r3, r3
 8014302:	f003 0304 	and.w	r3, r3, #4
 8014306:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014308:	7d7b      	ldrb	r3, [r7, #21]
 801430a:	b29c      	uxth	r4, r3
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014310:	4618      	mov	r0, r3
 8014312:	f7f9 f8ca 	bl	800d4aa <lwip_htonl>
 8014316:	4603      	mov	r3, r0
 8014318:	2200      	movs	r2, #0
 801431a:	4621      	mov	r1, r4
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f7ff fec1 	bl	80140a4 <tcp_output_alloc_header>
 8014322:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014324:	693b      	ldr	r3, [r7, #16]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d109      	bne.n	801433e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	8b5b      	ldrh	r3, [r3, #26]
 801432e:	f043 0303 	orr.w	r3, r3, #3
 8014332:	b29a      	uxth	r2, r3
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014338:	f06f 0301 	mvn.w	r3, #1
 801433c:	e023      	b.n	8014386 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801433e:	7dbb      	ldrb	r3, [r7, #22]
 8014340:	7dfa      	ldrb	r2, [r7, #23]
 8014342:	6939      	ldr	r1, [r7, #16]
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f7ff feeb 	bl	8014120 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801434a:	687a      	ldr	r2, [r7, #4]
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	3304      	adds	r3, #4
 8014350:	6939      	ldr	r1, [r7, #16]
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f7ff ff24 	bl	80141a0 <tcp_output_control_segment>
 8014358:	4603      	mov	r3, r0
 801435a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801435c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d007      	beq.n	8014374 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	8b5b      	ldrh	r3, [r3, #26]
 8014368:	f043 0303 	orr.w	r3, r3, #3
 801436c:	b29a      	uxth	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	835a      	strh	r2, [r3, #26]
 8014372:	e006      	b.n	8014382 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	8b5b      	ldrh	r3, [r3, #26]
 8014378:	f023 0303 	bic.w	r3, r3, #3
 801437c:	b29a      	uxth	r2, r3
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014382:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014386:	4618      	mov	r0, r3
 8014388:	371c      	adds	r7, #28
 801438a:	46bd      	mov	sp, r7
 801438c:	bd90      	pop	{r4, r7, pc}
 801438e:	bf00      	nop
 8014390:	08019ea4 	.word	0x08019ea4
 8014394:	0801a660 	.word	0x0801a660
 8014398:	08019ef8 	.word	0x08019ef8

0801439c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801439c:	b590      	push	{r4, r7, lr}
 801439e:	b087      	sub	sp, #28
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80143a4:	2300      	movs	r3, #0
 80143a6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d106      	bne.n	80143bc <tcp_keepalive+0x20>
 80143ae:	4b18      	ldr	r3, [pc, #96]	; (8014410 <tcp_keepalive+0x74>)
 80143b0:	f640 0224 	movw	r2, #2084	; 0x824
 80143b4:	4917      	ldr	r1, [pc, #92]	; (8014414 <tcp_keepalive+0x78>)
 80143b6:	4818      	ldr	r0, [pc, #96]	; (8014418 <tcp_keepalive+0x7c>)
 80143b8:	f003 f9ca 	bl	8017750 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80143bc:	7dfb      	ldrb	r3, [r7, #23]
 80143be:	b29c      	uxth	r4, r3
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80143c4:	3b01      	subs	r3, #1
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7f9 f86f 	bl	800d4aa <lwip_htonl>
 80143cc:	4603      	mov	r3, r0
 80143ce:	2200      	movs	r2, #0
 80143d0:	4621      	mov	r1, r4
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f7ff fe66 	bl	80140a4 <tcp_output_alloc_header>
 80143d8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d102      	bne.n	80143e6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80143e0:	f04f 33ff 	mov.w	r3, #4294967295
 80143e4:	e010      	b.n	8014408 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80143e6:	7dfb      	ldrb	r3, [r7, #23]
 80143e8:	2200      	movs	r2, #0
 80143ea:	6939      	ldr	r1, [r7, #16]
 80143ec:	6878      	ldr	r0, [r7, #4]
 80143ee:	f7ff fe97 	bl	8014120 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80143f2:	687a      	ldr	r2, [r7, #4]
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	3304      	adds	r3, #4
 80143f8:	6939      	ldr	r1, [r7, #16]
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	f7ff fed0 	bl	80141a0 <tcp_output_control_segment>
 8014400:	4603      	mov	r3, r0
 8014402:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014404:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014408:	4618      	mov	r0, r3
 801440a:	371c      	adds	r7, #28
 801440c:	46bd      	mov	sp, r7
 801440e:	bd90      	pop	{r4, r7, pc}
 8014410:	08019ea4 	.word	0x08019ea4
 8014414:	0801a680 	.word	0x0801a680
 8014418:	08019ef8 	.word	0x08019ef8

0801441c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801441c:	b590      	push	{r4, r7, lr}
 801441e:	b08b      	sub	sp, #44	; 0x2c
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014424:	2300      	movs	r3, #0
 8014426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d106      	bne.n	801443e <tcp_zero_window_probe+0x22>
 8014430:	4b4c      	ldr	r3, [pc, #304]	; (8014564 <tcp_zero_window_probe+0x148>)
 8014432:	f640 024f 	movw	r2, #2127	; 0x84f
 8014436:	494c      	ldr	r1, [pc, #304]	; (8014568 <tcp_zero_window_probe+0x14c>)
 8014438:	484c      	ldr	r0, [pc, #304]	; (801456c <tcp_zero_window_probe+0x150>)
 801443a:	f003 f989 	bl	8017750 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014442:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014444:	6a3b      	ldr	r3, [r7, #32]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d101      	bne.n	801444e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801444a:	2300      	movs	r3, #0
 801444c:	e086      	b.n	801455c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014454:	2bff      	cmp	r3, #255	; 0xff
 8014456:	d007      	beq.n	8014468 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801445e:	3301      	adds	r3, #1
 8014460:	b2da      	uxtb	r2, r3
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014468:	6a3b      	ldr	r3, [r7, #32]
 801446a:	68db      	ldr	r3, [r3, #12]
 801446c:	899b      	ldrh	r3, [r3, #12]
 801446e:	b29b      	uxth	r3, r3
 8014470:	4618      	mov	r0, r3
 8014472:	f7f9 f805 	bl	800d480 <lwip_htons>
 8014476:	4603      	mov	r3, r0
 8014478:	b2db      	uxtb	r3, r3
 801447a:	f003 0301 	and.w	r3, r3, #1
 801447e:	2b00      	cmp	r3, #0
 8014480:	d005      	beq.n	801448e <tcp_zero_window_probe+0x72>
 8014482:	6a3b      	ldr	r3, [r7, #32]
 8014484:	891b      	ldrh	r3, [r3, #8]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d101      	bne.n	801448e <tcp_zero_window_probe+0x72>
 801448a:	2301      	movs	r3, #1
 801448c:	e000      	b.n	8014490 <tcp_zero_window_probe+0x74>
 801448e:	2300      	movs	r3, #0
 8014490:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014492:	7ffb      	ldrb	r3, [r7, #31]
 8014494:	2b00      	cmp	r3, #0
 8014496:	bf0c      	ite	eq
 8014498:	2301      	moveq	r3, #1
 801449a:	2300      	movne	r3, #0
 801449c:	b2db      	uxtb	r3, r3
 801449e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80144a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144a4:	b299      	uxth	r1, r3
 80144a6:	6a3b      	ldr	r3, [r7, #32]
 80144a8:	68db      	ldr	r3, [r3, #12]
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	8bba      	ldrh	r2, [r7, #28]
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f7ff fdf8 	bl	80140a4 <tcp_output_alloc_header>
 80144b4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80144b6:	69bb      	ldr	r3, [r7, #24]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d102      	bne.n	80144c2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80144bc:	f04f 33ff 	mov.w	r3, #4294967295
 80144c0:	e04c      	b.n	801455c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80144c2:	69bb      	ldr	r3, [r7, #24]
 80144c4:	685b      	ldr	r3, [r3, #4]
 80144c6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80144c8:	7ffb      	ldrb	r3, [r7, #31]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d011      	beq.n	80144f2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	899b      	ldrh	r3, [r3, #12]
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	b21b      	sxth	r3, r3
 80144d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80144da:	b21c      	sxth	r4, r3
 80144dc:	2011      	movs	r0, #17
 80144de:	f7f8 ffcf 	bl	800d480 <lwip_htons>
 80144e2:	4603      	mov	r3, r0
 80144e4:	b21b      	sxth	r3, r3
 80144e6:	4323      	orrs	r3, r4
 80144e8:	b21b      	sxth	r3, r3
 80144ea:	b29a      	uxth	r2, r3
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	819a      	strh	r2, [r3, #12]
 80144f0:	e010      	b.n	8014514 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80144f2:	69bb      	ldr	r3, [r7, #24]
 80144f4:	685b      	ldr	r3, [r3, #4]
 80144f6:	3314      	adds	r3, #20
 80144f8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80144fa:	6a3b      	ldr	r3, [r7, #32]
 80144fc:	6858      	ldr	r0, [r3, #4]
 80144fe:	6a3b      	ldr	r3, [r7, #32]
 8014500:	685b      	ldr	r3, [r3, #4]
 8014502:	891a      	ldrh	r2, [r3, #8]
 8014504:	6a3b      	ldr	r3, [r7, #32]
 8014506:	891b      	ldrh	r3, [r3, #8]
 8014508:	1ad3      	subs	r3, r2, r3
 801450a:	b29b      	uxth	r3, r3
 801450c:	2201      	movs	r2, #1
 801450e:	6939      	ldr	r1, [r7, #16]
 8014510:	f7fa fe56 	bl	800f1c0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014514:	6a3b      	ldr	r3, [r7, #32]
 8014516:	68db      	ldr	r3, [r3, #12]
 8014518:	685b      	ldr	r3, [r3, #4]
 801451a:	4618      	mov	r0, r3
 801451c:	f7f8 ffc5 	bl	800d4aa <lwip_htonl>
 8014520:	4603      	mov	r3, r0
 8014522:	3301      	adds	r3, #1
 8014524:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	1ad3      	subs	r3, r2, r3
 801452e:	2b00      	cmp	r3, #0
 8014530:	da02      	bge.n	8014538 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	68fa      	ldr	r2, [r7, #12]
 8014536:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801453c:	2200      	movs	r2, #0
 801453e:	69b9      	ldr	r1, [r7, #24]
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f7ff fded 	bl	8014120 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014546:	687a      	ldr	r2, [r7, #4]
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	3304      	adds	r3, #4
 801454c:	69b9      	ldr	r1, [r7, #24]
 801454e:	6878      	ldr	r0, [r7, #4]
 8014550:	f7ff fe26 	bl	80141a0 <tcp_output_control_segment>
 8014554:	4603      	mov	r3, r0
 8014556:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014558:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801455c:	4618      	mov	r0, r3
 801455e:	372c      	adds	r7, #44	; 0x2c
 8014560:	46bd      	mov	sp, r7
 8014562:	bd90      	pop	{r4, r7, pc}
 8014564:	08019ea4 	.word	0x08019ea4
 8014568:	0801a69c 	.word	0x0801a69c
 801456c:	08019ef8 	.word	0x08019ef8

08014570 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b082      	sub	sp, #8
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014578:	f7fa ff10 	bl	800f39c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801457c:	4b0a      	ldr	r3, [pc, #40]	; (80145a8 <tcpip_tcp_timer+0x38>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d103      	bne.n	801458c <tcpip_tcp_timer+0x1c>
 8014584:	4b09      	ldr	r3, [pc, #36]	; (80145ac <tcpip_tcp_timer+0x3c>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d005      	beq.n	8014598 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801458c:	2200      	movs	r2, #0
 801458e:	4908      	ldr	r1, [pc, #32]	; (80145b0 <tcpip_tcp_timer+0x40>)
 8014590:	20fa      	movs	r0, #250	; 0xfa
 8014592:	f000 f8f3 	bl	801477c <sys_timeout>
 8014596:	e003      	b.n	80145a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014598:	4b06      	ldr	r3, [pc, #24]	; (80145b4 <tcpip_tcp_timer+0x44>)
 801459a:	2200      	movs	r2, #0
 801459c:	601a      	str	r2, [r3, #0]
  }
}
 801459e:	bf00      	nop
 80145a0:	bf00      	nop
 80145a2:	3708      	adds	r7, #8
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	24007854 	.word	0x24007854
 80145ac:	24007864 	.word	0x24007864
 80145b0:	08014571 	.word	0x08014571
 80145b4:	24004168 	.word	0x24004168

080145b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80145bc:	4b0a      	ldr	r3, [pc, #40]	; (80145e8 <tcp_timer_needed+0x30>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d10f      	bne.n	80145e4 <tcp_timer_needed+0x2c>
 80145c4:	4b09      	ldr	r3, [pc, #36]	; (80145ec <tcp_timer_needed+0x34>)
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d103      	bne.n	80145d4 <tcp_timer_needed+0x1c>
 80145cc:	4b08      	ldr	r3, [pc, #32]	; (80145f0 <tcp_timer_needed+0x38>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d007      	beq.n	80145e4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80145d4:	4b04      	ldr	r3, [pc, #16]	; (80145e8 <tcp_timer_needed+0x30>)
 80145d6:	2201      	movs	r2, #1
 80145d8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80145da:	2200      	movs	r2, #0
 80145dc:	4905      	ldr	r1, [pc, #20]	; (80145f4 <tcp_timer_needed+0x3c>)
 80145de:	20fa      	movs	r0, #250	; 0xfa
 80145e0:	f000 f8cc 	bl	801477c <sys_timeout>
  }
}
 80145e4:	bf00      	nop
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	24004168 	.word	0x24004168
 80145ec:	24007854 	.word	0x24007854
 80145f0:	24007864 	.word	0x24007864
 80145f4:	08014571 	.word	0x08014571

080145f8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b086      	sub	sp, #24
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	60f8      	str	r0, [r7, #12]
 8014600:	60b9      	str	r1, [r7, #8]
 8014602:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014604:	200a      	movs	r0, #10
 8014606:	f7f9 fccb 	bl	800dfa0 <memp_malloc>
 801460a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801460c:	693b      	ldr	r3, [r7, #16]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d109      	bne.n	8014626 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d151      	bne.n	80146bc <sys_timeout_abs+0xc4>
 8014618:	4b2a      	ldr	r3, [pc, #168]	; (80146c4 <sys_timeout_abs+0xcc>)
 801461a:	22be      	movs	r2, #190	; 0xbe
 801461c:	492a      	ldr	r1, [pc, #168]	; (80146c8 <sys_timeout_abs+0xd0>)
 801461e:	482b      	ldr	r0, [pc, #172]	; (80146cc <sys_timeout_abs+0xd4>)
 8014620:	f003 f896 	bl	8017750 <iprintf>
    return;
 8014624:	e04a      	b.n	80146bc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014626:	693b      	ldr	r3, [r7, #16]
 8014628:	2200      	movs	r2, #0
 801462a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	68ba      	ldr	r2, [r7, #8]
 8014630:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014632:	693b      	ldr	r3, [r7, #16]
 8014634:	687a      	ldr	r2, [r7, #4]
 8014636:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014638:	693b      	ldr	r3, [r7, #16]
 801463a:	68fa      	ldr	r2, [r7, #12]
 801463c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801463e:	4b24      	ldr	r3, [pc, #144]	; (80146d0 <sys_timeout_abs+0xd8>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d103      	bne.n	801464e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014646:	4a22      	ldr	r2, [pc, #136]	; (80146d0 <sys_timeout_abs+0xd8>)
 8014648:	693b      	ldr	r3, [r7, #16]
 801464a:	6013      	str	r3, [r2, #0]
    return;
 801464c:	e037      	b.n	80146be <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801464e:	693b      	ldr	r3, [r7, #16]
 8014650:	685a      	ldr	r2, [r3, #4]
 8014652:	4b1f      	ldr	r3, [pc, #124]	; (80146d0 <sys_timeout_abs+0xd8>)
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	1ad3      	subs	r3, r2, r3
 801465a:	0fdb      	lsrs	r3, r3, #31
 801465c:	f003 0301 	and.w	r3, r3, #1
 8014660:	b2db      	uxtb	r3, r3
 8014662:	2b00      	cmp	r3, #0
 8014664:	d007      	beq.n	8014676 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014666:	4b1a      	ldr	r3, [pc, #104]	; (80146d0 <sys_timeout_abs+0xd8>)
 8014668:	681a      	ldr	r2, [r3, #0]
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801466e:	4a18      	ldr	r2, [pc, #96]	; (80146d0 <sys_timeout_abs+0xd8>)
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	6013      	str	r3, [r2, #0]
 8014674:	e023      	b.n	80146be <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014676:	4b16      	ldr	r3, [pc, #88]	; (80146d0 <sys_timeout_abs+0xd8>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	617b      	str	r3, [r7, #20]
 801467c:	e01a      	b.n	80146b4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801467e:	697b      	ldr	r3, [r7, #20]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d00b      	beq.n	801469e <sys_timeout_abs+0xa6>
 8014686:	693b      	ldr	r3, [r7, #16]
 8014688:	685a      	ldr	r2, [r3, #4]
 801468a:	697b      	ldr	r3, [r7, #20]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	685b      	ldr	r3, [r3, #4]
 8014690:	1ad3      	subs	r3, r2, r3
 8014692:	0fdb      	lsrs	r3, r3, #31
 8014694:	f003 0301 	and.w	r3, r3, #1
 8014698:	b2db      	uxtb	r3, r3
 801469a:	2b00      	cmp	r3, #0
 801469c:	d007      	beq.n	80146ae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801469e:	697b      	ldr	r3, [r7, #20]
 80146a0:	681a      	ldr	r2, [r3, #0]
 80146a2:	693b      	ldr	r3, [r7, #16]
 80146a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	693a      	ldr	r2, [r7, #16]
 80146aa:	601a      	str	r2, [r3, #0]
        break;
 80146ac:	e007      	b.n	80146be <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80146ae:	697b      	ldr	r3, [r7, #20]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	617b      	str	r3, [r7, #20]
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d1e1      	bne.n	801467e <sys_timeout_abs+0x86>
 80146ba:	e000      	b.n	80146be <sys_timeout_abs+0xc6>
    return;
 80146bc:	bf00      	nop
      }
    }
  }
}
 80146be:	3718      	adds	r7, #24
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}
 80146c4:	0801a6c0 	.word	0x0801a6c0
 80146c8:	0801a6f4 	.word	0x0801a6f4
 80146cc:	0801a734 	.word	0x0801a734
 80146d0:	24004160 	.word	0x24004160

080146d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b086      	sub	sp, #24
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80146e0:	697b      	ldr	r3, [r7, #20]
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	4798      	blx	r3

  now = sys_now();
 80146e6:	f7f5 fd51 	bl	800a18c <sys_now>
 80146ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	681a      	ldr	r2, [r3, #0]
 80146f0:	4b0f      	ldr	r3, [pc, #60]	; (8014730 <lwip_cyclic_timer+0x5c>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	4413      	add	r3, r2
 80146f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80146f8:	68fa      	ldr	r2, [r7, #12]
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	1ad3      	subs	r3, r2, r3
 80146fe:	0fdb      	lsrs	r3, r3, #31
 8014700:	f003 0301 	and.w	r3, r3, #1
 8014704:	b2db      	uxtb	r3, r3
 8014706:	2b00      	cmp	r3, #0
 8014708:	d009      	beq.n	801471e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	681a      	ldr	r2, [r3, #0]
 801470e:	693b      	ldr	r3, [r7, #16]
 8014710:	4413      	add	r3, r2
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	4907      	ldr	r1, [pc, #28]	; (8014734 <lwip_cyclic_timer+0x60>)
 8014716:	4618      	mov	r0, r3
 8014718:	f7ff ff6e 	bl	80145f8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801471c:	e004      	b.n	8014728 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801471e:	687a      	ldr	r2, [r7, #4]
 8014720:	4904      	ldr	r1, [pc, #16]	; (8014734 <lwip_cyclic_timer+0x60>)
 8014722:	68f8      	ldr	r0, [r7, #12]
 8014724:	f7ff ff68 	bl	80145f8 <sys_timeout_abs>
}
 8014728:	bf00      	nop
 801472a:	3718      	adds	r7, #24
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	24004164 	.word	0x24004164
 8014734:	080146d5 	.word	0x080146d5

08014738 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b082      	sub	sp, #8
 801473c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801473e:	2301      	movs	r3, #1
 8014740:	607b      	str	r3, [r7, #4]
 8014742:	e00e      	b.n	8014762 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014744:	4a0b      	ldr	r2, [pc, #44]	; (8014774 <sys_timeouts_init+0x3c>)
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	00db      	lsls	r3, r3, #3
 8014750:	4a08      	ldr	r2, [pc, #32]	; (8014774 <sys_timeouts_init+0x3c>)
 8014752:	4413      	add	r3, r2
 8014754:	461a      	mov	r2, r3
 8014756:	4908      	ldr	r1, [pc, #32]	; (8014778 <sys_timeouts_init+0x40>)
 8014758:	f000 f810 	bl	801477c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	3301      	adds	r3, #1
 8014760:	607b      	str	r3, [r7, #4]
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	2b02      	cmp	r3, #2
 8014766:	d9ed      	bls.n	8014744 <sys_timeouts_init+0xc>
  }
}
 8014768:	bf00      	nop
 801476a:	bf00      	nop
 801476c:	3708      	adds	r7, #8
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	0801c858 	.word	0x0801c858
 8014778:	080146d5 	.word	0x080146d5

0801477c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b086      	sub	sp, #24
 8014780:	af00      	add	r7, sp, #0
 8014782:	60f8      	str	r0, [r7, #12]
 8014784:	60b9      	str	r1, [r7, #8]
 8014786:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801478e:	d306      	bcc.n	801479e <sys_timeout+0x22>
 8014790:	4b0a      	ldr	r3, [pc, #40]	; (80147bc <sys_timeout+0x40>)
 8014792:	f240 1229 	movw	r2, #297	; 0x129
 8014796:	490a      	ldr	r1, [pc, #40]	; (80147c0 <sys_timeout+0x44>)
 8014798:	480a      	ldr	r0, [pc, #40]	; (80147c4 <sys_timeout+0x48>)
 801479a:	f002 ffd9 	bl	8017750 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801479e:	f7f5 fcf5 	bl	800a18c <sys_now>
 80147a2:	4602      	mov	r2, r0
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	4413      	add	r3, r2
 80147a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80147aa:	687a      	ldr	r2, [r7, #4]
 80147ac:	68b9      	ldr	r1, [r7, #8]
 80147ae:	6978      	ldr	r0, [r7, #20]
 80147b0:	f7ff ff22 	bl	80145f8 <sys_timeout_abs>
#endif
}
 80147b4:	bf00      	nop
 80147b6:	3718      	adds	r7, #24
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}
 80147bc:	0801a6c0 	.word	0x0801a6c0
 80147c0:	0801a75c 	.word	0x0801a75c
 80147c4:	0801a734 	.word	0x0801a734

080147c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b084      	sub	sp, #16
 80147cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80147ce:	f7f5 fcdd 	bl	800a18c <sys_now>
 80147d2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80147d4:	4b17      	ldr	r3, [pc, #92]	; (8014834 <sys_check_timeouts+0x6c>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80147da:	68bb      	ldr	r3, [r7, #8]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d022      	beq.n	8014826 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	685b      	ldr	r3, [r3, #4]
 80147e4:	68fa      	ldr	r2, [r7, #12]
 80147e6:	1ad3      	subs	r3, r2, r3
 80147e8:	0fdb      	lsrs	r3, r3, #31
 80147ea:	f003 0301 	and.w	r3, r3, #1
 80147ee:	b2db      	uxtb	r3, r3
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d11a      	bne.n	801482a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80147f4:	68bb      	ldr	r3, [r7, #8]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	4a0e      	ldr	r2, [pc, #56]	; (8014834 <sys_check_timeouts+0x6c>)
 80147fa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80147fc:	68bb      	ldr	r3, [r7, #8]
 80147fe:	689b      	ldr	r3, [r3, #8]
 8014800:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014802:	68bb      	ldr	r3, [r7, #8]
 8014804:	68db      	ldr	r3, [r3, #12]
 8014806:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	4a0a      	ldr	r2, [pc, #40]	; (8014838 <sys_check_timeouts+0x70>)
 801480e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014810:	68b9      	ldr	r1, [r7, #8]
 8014812:	200a      	movs	r0, #10
 8014814:	f7f9 fc3a 	bl	800e08c <memp_free>
    if (handler != NULL) {
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d0da      	beq.n	80147d4 <sys_check_timeouts+0xc>
      handler(arg);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	6838      	ldr	r0, [r7, #0]
 8014822:	4798      	blx	r3
  do {
 8014824:	e7d6      	b.n	80147d4 <sys_check_timeouts+0xc>
      return;
 8014826:	bf00      	nop
 8014828:	e000      	b.n	801482c <sys_check_timeouts+0x64>
      return;
 801482a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801482c:	3710      	adds	r7, #16
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}
 8014832:	bf00      	nop
 8014834:	24004160 	.word	0x24004160
 8014838:	24004164 	.word	0x24004164

0801483c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b082      	sub	sp, #8
 8014840:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014842:	4b16      	ldr	r3, [pc, #88]	; (801489c <sys_timeouts_sleeptime+0x60>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d102      	bne.n	8014850 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801484a:	f04f 33ff 	mov.w	r3, #4294967295
 801484e:	e020      	b.n	8014892 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014850:	f7f5 fc9c 	bl	800a18c <sys_now>
 8014854:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014856:	4b11      	ldr	r3, [pc, #68]	; (801489c <sys_timeouts_sleeptime+0x60>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	685a      	ldr	r2, [r3, #4]
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	1ad3      	subs	r3, r2, r3
 8014860:	0fdb      	lsrs	r3, r3, #31
 8014862:	f003 0301 	and.w	r3, r3, #1
 8014866:	b2db      	uxtb	r3, r3
 8014868:	2b00      	cmp	r3, #0
 801486a:	d001      	beq.n	8014870 <sys_timeouts_sleeptime+0x34>
    return 0;
 801486c:	2300      	movs	r3, #0
 801486e:	e010      	b.n	8014892 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014870:	4b0a      	ldr	r3, [pc, #40]	; (801489c <sys_timeouts_sleeptime+0x60>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	685a      	ldr	r2, [r3, #4]
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	1ad3      	subs	r3, r2, r3
 801487a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	2b00      	cmp	r3, #0
 8014880:	da06      	bge.n	8014890 <sys_timeouts_sleeptime+0x54>
 8014882:	4b07      	ldr	r3, [pc, #28]	; (80148a0 <sys_timeouts_sleeptime+0x64>)
 8014884:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014888:	4906      	ldr	r1, [pc, #24]	; (80148a4 <sys_timeouts_sleeptime+0x68>)
 801488a:	4807      	ldr	r0, [pc, #28]	; (80148a8 <sys_timeouts_sleeptime+0x6c>)
 801488c:	f002 ff60 	bl	8017750 <iprintf>
    return ret;
 8014890:	683b      	ldr	r3, [r7, #0]
  }
}
 8014892:	4618      	mov	r0, r3
 8014894:	3708      	adds	r7, #8
 8014896:	46bd      	mov	sp, r7
 8014898:	bd80      	pop	{r7, pc}
 801489a:	bf00      	nop
 801489c:	24004160 	.word	0x24004160
 80148a0:	0801a6c0 	.word	0x0801a6c0
 80148a4:	0801a794 	.word	0x0801a794
 80148a8:	0801a734 	.word	0x0801a734

080148ac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80148b0:	f002 ff66 	bl	8017780 <rand>
 80148b4:	4603      	mov	r3, r0
 80148b6:	b29b      	uxth	r3, r3
 80148b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80148bc:	b29b      	uxth	r3, r3
 80148be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80148c2:	b29a      	uxth	r2, r3
 80148c4:	4b01      	ldr	r3, [pc, #4]	; (80148cc <udp_init+0x20>)
 80148c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80148c8:	bf00      	nop
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	24000040 	.word	0x24000040

080148d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	60f8      	str	r0, [r7, #12]
 80148d8:	60b9      	str	r1, [r7, #8]
 80148da:	4613      	mov	r3, r2
 80148dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d105      	bne.n	80148f0 <udp_input_local_match+0x20>
 80148e4:	4b27      	ldr	r3, [pc, #156]	; (8014984 <udp_input_local_match+0xb4>)
 80148e6:	2287      	movs	r2, #135	; 0x87
 80148e8:	4927      	ldr	r1, [pc, #156]	; (8014988 <udp_input_local_match+0xb8>)
 80148ea:	4828      	ldr	r0, [pc, #160]	; (801498c <udp_input_local_match+0xbc>)
 80148ec:	f002 ff30 	bl	8017750 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d105      	bne.n	8014902 <udp_input_local_match+0x32>
 80148f6:	4b23      	ldr	r3, [pc, #140]	; (8014984 <udp_input_local_match+0xb4>)
 80148f8:	2288      	movs	r2, #136	; 0x88
 80148fa:	4925      	ldr	r1, [pc, #148]	; (8014990 <udp_input_local_match+0xc0>)
 80148fc:	4823      	ldr	r0, [pc, #140]	; (801498c <udp_input_local_match+0xbc>)
 80148fe:	f002 ff27 	bl	8017750 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	7a1b      	ldrb	r3, [r3, #8]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d00b      	beq.n	8014922 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	7a1a      	ldrb	r2, [r3, #8]
 801490e:	4b21      	ldr	r3, [pc, #132]	; (8014994 <udp_input_local_match+0xc4>)
 8014910:	685b      	ldr	r3, [r3, #4]
 8014912:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014916:	3301      	adds	r3, #1
 8014918:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801491a:	429a      	cmp	r2, r3
 801491c:	d001      	beq.n	8014922 <udp_input_local_match+0x52>
    return 0;
 801491e:	2300      	movs	r3, #0
 8014920:	e02b      	b.n	801497a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014922:	79fb      	ldrb	r3, [r7, #7]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d018      	beq.n	801495a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d013      	beq.n	8014956 <udp_input_local_match+0x86>
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d00f      	beq.n	8014956 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014936:	4b17      	ldr	r3, [pc, #92]	; (8014994 <udp_input_local_match+0xc4>)
 8014938:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801493e:	d00a      	beq.n	8014956 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	4b13      	ldr	r3, [pc, #76]	; (8014994 <udp_input_local_match+0xc4>)
 8014946:	695b      	ldr	r3, [r3, #20]
 8014948:	405a      	eors	r2, r3
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	3308      	adds	r3, #8
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014952:	2b00      	cmp	r3, #0
 8014954:	d110      	bne.n	8014978 <udp_input_local_match+0xa8>
          return 1;
 8014956:	2301      	movs	r3, #1
 8014958:	e00f      	b.n	801497a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d009      	beq.n	8014974 <udp_input_local_match+0xa4>
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d005      	beq.n	8014974 <udp_input_local_match+0xa4>
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	681a      	ldr	r2, [r3, #0]
 801496c:	4b09      	ldr	r3, [pc, #36]	; (8014994 <udp_input_local_match+0xc4>)
 801496e:	695b      	ldr	r3, [r3, #20]
 8014970:	429a      	cmp	r2, r3
 8014972:	d101      	bne.n	8014978 <udp_input_local_match+0xa8>
        return 1;
 8014974:	2301      	movs	r3, #1
 8014976:	e000      	b.n	801497a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014978:	2300      	movs	r3, #0
}
 801497a:	4618      	mov	r0, r3
 801497c:	3710      	adds	r7, #16
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}
 8014982:	bf00      	nop
 8014984:	0801a7a8 	.word	0x0801a7a8
 8014988:	0801a7d8 	.word	0x0801a7d8
 801498c:	0801a7fc 	.word	0x0801a7fc
 8014990:	0801a824 	.word	0x0801a824
 8014994:	24004794 	.word	0x24004794

08014998 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014998:	b590      	push	{r4, r7, lr}
 801499a:	b08d      	sub	sp, #52	; 0x34
 801499c:	af02      	add	r7, sp, #8
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80149a2:	2300      	movs	r3, #0
 80149a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d105      	bne.n	80149b8 <udp_input+0x20>
 80149ac:	4b7c      	ldr	r3, [pc, #496]	; (8014ba0 <udp_input+0x208>)
 80149ae:	22cf      	movs	r2, #207	; 0xcf
 80149b0:	497c      	ldr	r1, [pc, #496]	; (8014ba4 <udp_input+0x20c>)
 80149b2:	487d      	ldr	r0, [pc, #500]	; (8014ba8 <udp_input+0x210>)
 80149b4:	f002 fecc 	bl	8017750 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80149b8:	683b      	ldr	r3, [r7, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d105      	bne.n	80149ca <udp_input+0x32>
 80149be:	4b78      	ldr	r3, [pc, #480]	; (8014ba0 <udp_input+0x208>)
 80149c0:	22d0      	movs	r2, #208	; 0xd0
 80149c2:	497a      	ldr	r1, [pc, #488]	; (8014bac <udp_input+0x214>)
 80149c4:	4878      	ldr	r0, [pc, #480]	; (8014ba8 <udp_input+0x210>)
 80149c6:	f002 fec3 	bl	8017750 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	895b      	ldrh	r3, [r3, #10]
 80149ce:	2b07      	cmp	r3, #7
 80149d0:	d803      	bhi.n	80149da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f7fa f9fe 	bl	800edd4 <pbuf_free>
    goto end;
 80149d8:	e0de      	b.n	8014b98 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	685b      	ldr	r3, [r3, #4]
 80149de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80149e0:	4b73      	ldr	r3, [pc, #460]	; (8014bb0 <udp_input+0x218>)
 80149e2:	695b      	ldr	r3, [r3, #20]
 80149e4:	4a72      	ldr	r2, [pc, #456]	; (8014bb0 <udp_input+0x218>)
 80149e6:	6812      	ldr	r2, [r2, #0]
 80149e8:	4611      	mov	r1, r2
 80149ea:	4618      	mov	r0, r3
 80149ec:	f001 fcae 	bl	801634c <ip4_addr_isbroadcast_u32>
 80149f0:	4603      	mov	r3, r0
 80149f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	881b      	ldrh	r3, [r3, #0]
 80149f8:	b29b      	uxth	r3, r3
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7f8 fd40 	bl	800d480 <lwip_htons>
 8014a00:	4603      	mov	r3, r0
 8014a02:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	885b      	ldrh	r3, [r3, #2]
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f7f8 fd38 	bl	800d480 <lwip_htons>
 8014a10:	4603      	mov	r3, r0
 8014a12:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014a14:	2300      	movs	r3, #0
 8014a16:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a20:	4b64      	ldr	r3, [pc, #400]	; (8014bb4 <udp_input+0x21c>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	627b      	str	r3, [r7, #36]	; 0x24
 8014a26:	e054      	b.n	8014ad2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2a:	8a5b      	ldrh	r3, [r3, #18]
 8014a2c:	89fa      	ldrh	r2, [r7, #14]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d14a      	bne.n	8014ac8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014a32:	7cfb      	ldrb	r3, [r7, #19]
 8014a34:	461a      	mov	r2, r3
 8014a36:	6839      	ldr	r1, [r7, #0]
 8014a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a3a:	f7ff ff49 	bl	80148d0 <udp_input_local_match>
 8014a3e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d041      	beq.n	8014ac8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a46:	7c1b      	ldrb	r3, [r3, #16]
 8014a48:	f003 0304 	and.w	r3, r3, #4
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d11d      	bne.n	8014a8c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014a50:	69fb      	ldr	r3, [r7, #28]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d102      	bne.n	8014a5c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a58:	61fb      	str	r3, [r7, #28]
 8014a5a:	e017      	b.n	8014a8c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014a5c:	7cfb      	ldrb	r3, [r7, #19]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d014      	beq.n	8014a8c <udp_input+0xf4>
 8014a62:	4b53      	ldr	r3, [pc, #332]	; (8014bb0 <udp_input+0x218>)
 8014a64:	695b      	ldr	r3, [r3, #20]
 8014a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a6a:	d10f      	bne.n	8014a8c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	681a      	ldr	r2, [r3, #0]
 8014a70:	683b      	ldr	r3, [r7, #0]
 8014a72:	3304      	adds	r3, #4
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d008      	beq.n	8014a8c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a7c:	681a      	ldr	r2, [r3, #0]
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	3304      	adds	r3, #4
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d101      	bne.n	8014a8c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a8a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a8e:	8a9b      	ldrh	r3, [r3, #20]
 8014a90:	8a3a      	ldrh	r2, [r7, #16]
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d118      	bne.n	8014ac8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a98:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d005      	beq.n	8014aaa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aa0:	685a      	ldr	r2, [r3, #4]
 8014aa2:	4b43      	ldr	r3, [pc, #268]	; (8014bb0 <udp_input+0x218>)
 8014aa4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	d10e      	bne.n	8014ac8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014aaa:	6a3b      	ldr	r3, [r7, #32]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d014      	beq.n	8014ada <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ab2:	68da      	ldr	r2, [r3, #12]
 8014ab4:	6a3b      	ldr	r3, [r7, #32]
 8014ab6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014ab8:	4b3e      	ldr	r3, [pc, #248]	; (8014bb4 <udp_input+0x21c>)
 8014aba:	681a      	ldr	r2, [r3, #0]
 8014abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014abe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014ac0:	4a3c      	ldr	r2, [pc, #240]	; (8014bb4 <udp_input+0x21c>)
 8014ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014ac6:	e008      	b.n	8014ada <udp_input+0x142>
      }
    }

    prev = pcb;
 8014ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ace:	68db      	ldr	r3, [r3, #12]
 8014ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8014ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d1a7      	bne.n	8014a28 <udp_input+0x90>
 8014ad8:	e000      	b.n	8014adc <udp_input+0x144>
        break;
 8014ada:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d101      	bne.n	8014ae6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014ae2:	69fb      	ldr	r3, [r7, #28]
 8014ae4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d002      	beq.n	8014af2 <udp_input+0x15a>
    for_us = 1;
 8014aec:	2301      	movs	r3, #1
 8014aee:	76fb      	strb	r3, [r7, #27]
 8014af0:	e00a      	b.n	8014b08 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	3304      	adds	r3, #4
 8014af6:	681a      	ldr	r2, [r3, #0]
 8014af8:	4b2d      	ldr	r3, [pc, #180]	; (8014bb0 <udp_input+0x218>)
 8014afa:	695b      	ldr	r3, [r3, #20]
 8014afc:	429a      	cmp	r2, r3
 8014afe:	bf0c      	ite	eq
 8014b00:	2301      	moveq	r3, #1
 8014b02:	2300      	movne	r3, #0
 8014b04:	b2db      	uxtb	r3, r3
 8014b06:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014b08:	7efb      	ldrb	r3, [r7, #27]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d041      	beq.n	8014b92 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014b0e:	2108      	movs	r1, #8
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f7fa f8d9 	bl	800ecc8 <pbuf_remove_header>
 8014b16:	4603      	mov	r3, r0
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d00a      	beq.n	8014b32 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014b1c:	4b20      	ldr	r3, [pc, #128]	; (8014ba0 <udp_input+0x208>)
 8014b1e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014b22:	4925      	ldr	r1, [pc, #148]	; (8014bb8 <udp_input+0x220>)
 8014b24:	4820      	ldr	r0, [pc, #128]	; (8014ba8 <udp_input+0x210>)
 8014b26:	f002 fe13 	bl	8017750 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014b2a:	6878      	ldr	r0, [r7, #4]
 8014b2c:	f7fa f952 	bl	800edd4 <pbuf_free>
      goto end;
 8014b30:	e032      	b.n	8014b98 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d012      	beq.n	8014b5e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b3a:	699b      	ldr	r3, [r3, #24]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d00a      	beq.n	8014b56 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b42:	699c      	ldr	r4, [r3, #24]
 8014b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b46:	69d8      	ldr	r0, [r3, #28]
 8014b48:	8a3b      	ldrh	r3, [r7, #16]
 8014b4a:	9300      	str	r3, [sp, #0]
 8014b4c:	4b1b      	ldr	r3, [pc, #108]	; (8014bbc <udp_input+0x224>)
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b52:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014b54:	e021      	b.n	8014b9a <udp_input+0x202>
        pbuf_free(p);
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f7fa f93c 	bl	800edd4 <pbuf_free>
        goto end;
 8014b5c:	e01c      	b.n	8014b98 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014b5e:	7cfb      	ldrb	r3, [r7, #19]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d112      	bne.n	8014b8a <udp_input+0x1f2>
 8014b64:	4b12      	ldr	r3, [pc, #72]	; (8014bb0 <udp_input+0x218>)
 8014b66:	695b      	ldr	r3, [r3, #20]
 8014b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b6c:	2be0      	cmp	r3, #224	; 0xe0
 8014b6e:	d00c      	beq.n	8014b8a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014b70:	4b0f      	ldr	r3, [pc, #60]	; (8014bb0 <udp_input+0x218>)
 8014b72:	899b      	ldrh	r3, [r3, #12]
 8014b74:	3308      	adds	r3, #8
 8014b76:	b29b      	uxth	r3, r3
 8014b78:	b21b      	sxth	r3, r3
 8014b7a:	4619      	mov	r1, r3
 8014b7c:	6878      	ldr	r0, [r7, #4]
 8014b7e:	f7fa f916 	bl	800edae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014b82:	2103      	movs	r1, #3
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	f001 f8b7 	bl	8015cf8 <icmp_dest_unreach>
      pbuf_free(p);
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f7fa f922 	bl	800edd4 <pbuf_free>
  return;
 8014b90:	e003      	b.n	8014b9a <udp_input+0x202>
    pbuf_free(p);
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f7fa f91e 	bl	800edd4 <pbuf_free>
  return;
 8014b98:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014b9a:	372c      	adds	r7, #44	; 0x2c
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd90      	pop	{r4, r7, pc}
 8014ba0:	0801a7a8 	.word	0x0801a7a8
 8014ba4:	0801a84c 	.word	0x0801a84c
 8014ba8:	0801a7fc 	.word	0x0801a7fc
 8014bac:	0801a864 	.word	0x0801a864
 8014bb0:	24004794 	.word	0x24004794
 8014bb4:	2400786c 	.word	0x2400786c
 8014bb8:	0801a880 	.word	0x0801a880
 8014bbc:	240047a4 	.word	0x240047a4

08014bc0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b085      	sub	sp, #20
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d01e      	beq.n	8014c0e <udp_netif_ip_addr_changed+0x4e>
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d01a      	beq.n	8014c0e <udp_netif_ip_addr_changed+0x4e>
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d017      	beq.n	8014c0e <udp_netif_ip_addr_changed+0x4e>
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d013      	beq.n	8014c0e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014be6:	4b0d      	ldr	r3, [pc, #52]	; (8014c1c <udp_netif_ip_addr_changed+0x5c>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	60fb      	str	r3, [r7, #12]
 8014bec:	e00c      	b.n	8014c08 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	681a      	ldr	r2, [r3, #0]
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d103      	bne.n	8014c02 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	681a      	ldr	r2, [r3, #0]
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	68db      	ldr	r3, [r3, #12]
 8014c06:	60fb      	str	r3, [r7, #12]
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d1ef      	bne.n	8014bee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014c0e:	bf00      	nop
 8014c10:	3714      	adds	r7, #20
 8014c12:	46bd      	mov	sp, r7
 8014c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c18:	4770      	bx	lr
 8014c1a:	bf00      	nop
 8014c1c:	2400786c 	.word	0x2400786c

08014c20 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b082      	sub	sp, #8
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014c28:	4915      	ldr	r1, [pc, #84]	; (8014c80 <etharp_free_entry+0x60>)
 8014c2a:	687a      	ldr	r2, [r7, #4]
 8014c2c:	4613      	mov	r3, r2
 8014c2e:	005b      	lsls	r3, r3, #1
 8014c30:	4413      	add	r3, r2
 8014c32:	00db      	lsls	r3, r3, #3
 8014c34:	440b      	add	r3, r1
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d013      	beq.n	8014c64 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014c3c:	4910      	ldr	r1, [pc, #64]	; (8014c80 <etharp_free_entry+0x60>)
 8014c3e:	687a      	ldr	r2, [r7, #4]
 8014c40:	4613      	mov	r3, r2
 8014c42:	005b      	lsls	r3, r3, #1
 8014c44:	4413      	add	r3, r2
 8014c46:	00db      	lsls	r3, r3, #3
 8014c48:	440b      	add	r3, r1
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7fa f8c1 	bl	800edd4 <pbuf_free>
    arp_table[i].q = NULL;
 8014c52:	490b      	ldr	r1, [pc, #44]	; (8014c80 <etharp_free_entry+0x60>)
 8014c54:	687a      	ldr	r2, [r7, #4]
 8014c56:	4613      	mov	r3, r2
 8014c58:	005b      	lsls	r3, r3, #1
 8014c5a:	4413      	add	r3, r2
 8014c5c:	00db      	lsls	r3, r3, #3
 8014c5e:	440b      	add	r3, r1
 8014c60:	2200      	movs	r2, #0
 8014c62:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014c64:	4906      	ldr	r1, [pc, #24]	; (8014c80 <etharp_free_entry+0x60>)
 8014c66:	687a      	ldr	r2, [r7, #4]
 8014c68:	4613      	mov	r3, r2
 8014c6a:	005b      	lsls	r3, r3, #1
 8014c6c:	4413      	add	r3, r2
 8014c6e:	00db      	lsls	r3, r3, #3
 8014c70:	440b      	add	r3, r1
 8014c72:	3314      	adds	r3, #20
 8014c74:	2200      	movs	r2, #0
 8014c76:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014c78:	bf00      	nop
 8014c7a:	3708      	adds	r7, #8
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}
 8014c80:	2400416c 	.word	0x2400416c

08014c84 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	607b      	str	r3, [r7, #4]
 8014c8e:	e096      	b.n	8014dbe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014c90:	494f      	ldr	r1, [pc, #316]	; (8014dd0 <etharp_tmr+0x14c>)
 8014c92:	687a      	ldr	r2, [r7, #4]
 8014c94:	4613      	mov	r3, r2
 8014c96:	005b      	lsls	r3, r3, #1
 8014c98:	4413      	add	r3, r2
 8014c9a:	00db      	lsls	r3, r3, #3
 8014c9c:	440b      	add	r3, r1
 8014c9e:	3314      	adds	r3, #20
 8014ca0:	781b      	ldrb	r3, [r3, #0]
 8014ca2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014ca4:	78fb      	ldrb	r3, [r7, #3]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	f000 8086 	beq.w	8014db8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014cac:	4948      	ldr	r1, [pc, #288]	; (8014dd0 <etharp_tmr+0x14c>)
 8014cae:	687a      	ldr	r2, [r7, #4]
 8014cb0:	4613      	mov	r3, r2
 8014cb2:	005b      	lsls	r3, r3, #1
 8014cb4:	4413      	add	r3, r2
 8014cb6:	00db      	lsls	r3, r3, #3
 8014cb8:	440b      	add	r3, r1
 8014cba:	3312      	adds	r3, #18
 8014cbc:	881b      	ldrh	r3, [r3, #0]
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	b298      	uxth	r0, r3
 8014cc2:	4943      	ldr	r1, [pc, #268]	; (8014dd0 <etharp_tmr+0x14c>)
 8014cc4:	687a      	ldr	r2, [r7, #4]
 8014cc6:	4613      	mov	r3, r2
 8014cc8:	005b      	lsls	r3, r3, #1
 8014cca:	4413      	add	r3, r2
 8014ccc:	00db      	lsls	r3, r3, #3
 8014cce:	440b      	add	r3, r1
 8014cd0:	3312      	adds	r3, #18
 8014cd2:	4602      	mov	r2, r0
 8014cd4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014cd6:	493e      	ldr	r1, [pc, #248]	; (8014dd0 <etharp_tmr+0x14c>)
 8014cd8:	687a      	ldr	r2, [r7, #4]
 8014cda:	4613      	mov	r3, r2
 8014cdc:	005b      	lsls	r3, r3, #1
 8014cde:	4413      	add	r3, r2
 8014ce0:	00db      	lsls	r3, r3, #3
 8014ce2:	440b      	add	r3, r1
 8014ce4:	3312      	adds	r3, #18
 8014ce6:	881b      	ldrh	r3, [r3, #0]
 8014ce8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014cec:	d215      	bcs.n	8014d1a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014cee:	4938      	ldr	r1, [pc, #224]	; (8014dd0 <etharp_tmr+0x14c>)
 8014cf0:	687a      	ldr	r2, [r7, #4]
 8014cf2:	4613      	mov	r3, r2
 8014cf4:	005b      	lsls	r3, r3, #1
 8014cf6:	4413      	add	r3, r2
 8014cf8:	00db      	lsls	r3, r3, #3
 8014cfa:	440b      	add	r3, r1
 8014cfc:	3314      	adds	r3, #20
 8014cfe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014d00:	2b01      	cmp	r3, #1
 8014d02:	d10e      	bne.n	8014d22 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014d04:	4932      	ldr	r1, [pc, #200]	; (8014dd0 <etharp_tmr+0x14c>)
 8014d06:	687a      	ldr	r2, [r7, #4]
 8014d08:	4613      	mov	r3, r2
 8014d0a:	005b      	lsls	r3, r3, #1
 8014d0c:	4413      	add	r3, r2
 8014d0e:	00db      	lsls	r3, r3, #3
 8014d10:	440b      	add	r3, r1
 8014d12:	3312      	adds	r3, #18
 8014d14:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014d16:	2b04      	cmp	r3, #4
 8014d18:	d903      	bls.n	8014d22 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014d1a:	6878      	ldr	r0, [r7, #4]
 8014d1c:	f7ff ff80 	bl	8014c20 <etharp_free_entry>
 8014d20:	e04a      	b.n	8014db8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014d22:	492b      	ldr	r1, [pc, #172]	; (8014dd0 <etharp_tmr+0x14c>)
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	4613      	mov	r3, r2
 8014d28:	005b      	lsls	r3, r3, #1
 8014d2a:	4413      	add	r3, r2
 8014d2c:	00db      	lsls	r3, r3, #3
 8014d2e:	440b      	add	r3, r1
 8014d30:	3314      	adds	r3, #20
 8014d32:	781b      	ldrb	r3, [r3, #0]
 8014d34:	2b03      	cmp	r3, #3
 8014d36:	d10a      	bne.n	8014d4e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014d38:	4925      	ldr	r1, [pc, #148]	; (8014dd0 <etharp_tmr+0x14c>)
 8014d3a:	687a      	ldr	r2, [r7, #4]
 8014d3c:	4613      	mov	r3, r2
 8014d3e:	005b      	lsls	r3, r3, #1
 8014d40:	4413      	add	r3, r2
 8014d42:	00db      	lsls	r3, r3, #3
 8014d44:	440b      	add	r3, r1
 8014d46:	3314      	adds	r3, #20
 8014d48:	2204      	movs	r2, #4
 8014d4a:	701a      	strb	r2, [r3, #0]
 8014d4c:	e034      	b.n	8014db8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014d4e:	4920      	ldr	r1, [pc, #128]	; (8014dd0 <etharp_tmr+0x14c>)
 8014d50:	687a      	ldr	r2, [r7, #4]
 8014d52:	4613      	mov	r3, r2
 8014d54:	005b      	lsls	r3, r3, #1
 8014d56:	4413      	add	r3, r2
 8014d58:	00db      	lsls	r3, r3, #3
 8014d5a:	440b      	add	r3, r1
 8014d5c:	3314      	adds	r3, #20
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	2b04      	cmp	r3, #4
 8014d62:	d10a      	bne.n	8014d7a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014d64:	491a      	ldr	r1, [pc, #104]	; (8014dd0 <etharp_tmr+0x14c>)
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	4613      	mov	r3, r2
 8014d6a:	005b      	lsls	r3, r3, #1
 8014d6c:	4413      	add	r3, r2
 8014d6e:	00db      	lsls	r3, r3, #3
 8014d70:	440b      	add	r3, r1
 8014d72:	3314      	adds	r3, #20
 8014d74:	2202      	movs	r2, #2
 8014d76:	701a      	strb	r2, [r3, #0]
 8014d78:	e01e      	b.n	8014db8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014d7a:	4915      	ldr	r1, [pc, #84]	; (8014dd0 <etharp_tmr+0x14c>)
 8014d7c:	687a      	ldr	r2, [r7, #4]
 8014d7e:	4613      	mov	r3, r2
 8014d80:	005b      	lsls	r3, r3, #1
 8014d82:	4413      	add	r3, r2
 8014d84:	00db      	lsls	r3, r3, #3
 8014d86:	440b      	add	r3, r1
 8014d88:	3314      	adds	r3, #20
 8014d8a:	781b      	ldrb	r3, [r3, #0]
 8014d8c:	2b01      	cmp	r3, #1
 8014d8e:	d113      	bne.n	8014db8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014d90:	490f      	ldr	r1, [pc, #60]	; (8014dd0 <etharp_tmr+0x14c>)
 8014d92:	687a      	ldr	r2, [r7, #4]
 8014d94:	4613      	mov	r3, r2
 8014d96:	005b      	lsls	r3, r3, #1
 8014d98:	4413      	add	r3, r2
 8014d9a:	00db      	lsls	r3, r3, #3
 8014d9c:	440b      	add	r3, r1
 8014d9e:	3308      	adds	r3, #8
 8014da0:	6818      	ldr	r0, [r3, #0]
 8014da2:	687a      	ldr	r2, [r7, #4]
 8014da4:	4613      	mov	r3, r2
 8014da6:	005b      	lsls	r3, r3, #1
 8014da8:	4413      	add	r3, r2
 8014daa:	00db      	lsls	r3, r3, #3
 8014dac:	4a08      	ldr	r2, [pc, #32]	; (8014dd0 <etharp_tmr+0x14c>)
 8014dae:	4413      	add	r3, r2
 8014db0:	3304      	adds	r3, #4
 8014db2:	4619      	mov	r1, r3
 8014db4:	f000 fe6e 	bl	8015a94 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	3301      	adds	r3, #1
 8014dbc:	607b      	str	r3, [r7, #4]
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2b09      	cmp	r3, #9
 8014dc2:	f77f af65 	ble.w	8014c90 <etharp_tmr+0xc>
      }
    }
  }
}
 8014dc6:	bf00      	nop
 8014dc8:	bf00      	nop
 8014dca:	3708      	adds	r7, #8
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}
 8014dd0:	2400416c 	.word	0x2400416c

08014dd4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b08a      	sub	sp, #40	; 0x28
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	60f8      	str	r0, [r7, #12]
 8014ddc:	460b      	mov	r3, r1
 8014dde:	607a      	str	r2, [r7, #4]
 8014de0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014de2:	230a      	movs	r3, #10
 8014de4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014de6:	230a      	movs	r3, #10
 8014de8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014dea:	230a      	movs	r3, #10
 8014dec:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014dee:	2300      	movs	r3, #0
 8014df0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014df2:	230a      	movs	r3, #10
 8014df4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014df6:	2300      	movs	r3, #0
 8014df8:	83bb      	strh	r3, [r7, #28]
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	837b      	strh	r3, [r7, #26]
 8014dfe:	2300      	movs	r3, #0
 8014e00:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e02:	2300      	movs	r3, #0
 8014e04:	843b      	strh	r3, [r7, #32]
 8014e06:	e0ae      	b.n	8014f66 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014e08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e0c:	49a6      	ldr	r1, [pc, #664]	; (80150a8 <etharp_find_entry+0x2d4>)
 8014e0e:	4613      	mov	r3, r2
 8014e10:	005b      	lsls	r3, r3, #1
 8014e12:	4413      	add	r3, r2
 8014e14:	00db      	lsls	r3, r3, #3
 8014e16:	440b      	add	r3, r1
 8014e18:	3314      	adds	r3, #20
 8014e1a:	781b      	ldrb	r3, [r3, #0]
 8014e1c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014e1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014e22:	2b0a      	cmp	r3, #10
 8014e24:	d105      	bne.n	8014e32 <etharp_find_entry+0x5e>
 8014e26:	7dfb      	ldrb	r3, [r7, #23]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d102      	bne.n	8014e32 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014e2c:	8c3b      	ldrh	r3, [r7, #32]
 8014e2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014e30:	e095      	b.n	8014f5e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014e32:	7dfb      	ldrb	r3, [r7, #23]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	f000 8092 	beq.w	8014f5e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014e3a:	7dfb      	ldrb	r3, [r7, #23]
 8014e3c:	2b01      	cmp	r3, #1
 8014e3e:	d009      	beq.n	8014e54 <etharp_find_entry+0x80>
 8014e40:	7dfb      	ldrb	r3, [r7, #23]
 8014e42:	2b01      	cmp	r3, #1
 8014e44:	d806      	bhi.n	8014e54 <etharp_find_entry+0x80>
 8014e46:	4b99      	ldr	r3, [pc, #612]	; (80150ac <etharp_find_entry+0x2d8>)
 8014e48:	f240 1223 	movw	r2, #291	; 0x123
 8014e4c:	4998      	ldr	r1, [pc, #608]	; (80150b0 <etharp_find_entry+0x2dc>)
 8014e4e:	4899      	ldr	r0, [pc, #612]	; (80150b4 <etharp_find_entry+0x2e0>)
 8014e50:	f002 fc7e 	bl	8017750 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d020      	beq.n	8014e9c <etharp_find_entry+0xc8>
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	6819      	ldr	r1, [r3, #0]
 8014e5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e62:	4891      	ldr	r0, [pc, #580]	; (80150a8 <etharp_find_entry+0x2d4>)
 8014e64:	4613      	mov	r3, r2
 8014e66:	005b      	lsls	r3, r3, #1
 8014e68:	4413      	add	r3, r2
 8014e6a:	00db      	lsls	r3, r3, #3
 8014e6c:	4403      	add	r3, r0
 8014e6e:	3304      	adds	r3, #4
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	4299      	cmp	r1, r3
 8014e74:	d112      	bne.n	8014e9c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d00c      	beq.n	8014e96 <etharp_find_entry+0xc2>
 8014e7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e80:	4989      	ldr	r1, [pc, #548]	; (80150a8 <etharp_find_entry+0x2d4>)
 8014e82:	4613      	mov	r3, r2
 8014e84:	005b      	lsls	r3, r3, #1
 8014e86:	4413      	add	r3, r2
 8014e88:	00db      	lsls	r3, r3, #3
 8014e8a:	440b      	add	r3, r1
 8014e8c:	3308      	adds	r3, #8
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	687a      	ldr	r2, [r7, #4]
 8014e92:	429a      	cmp	r2, r3
 8014e94:	d102      	bne.n	8014e9c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014e96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e9a:	e100      	b.n	801509e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014e9c:	7dfb      	ldrb	r3, [r7, #23]
 8014e9e:	2b01      	cmp	r3, #1
 8014ea0:	d140      	bne.n	8014f24 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014ea2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ea6:	4980      	ldr	r1, [pc, #512]	; (80150a8 <etharp_find_entry+0x2d4>)
 8014ea8:	4613      	mov	r3, r2
 8014eaa:	005b      	lsls	r3, r3, #1
 8014eac:	4413      	add	r3, r2
 8014eae:	00db      	lsls	r3, r3, #3
 8014eb0:	440b      	add	r3, r1
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d01a      	beq.n	8014eee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014eb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ebc:	497a      	ldr	r1, [pc, #488]	; (80150a8 <etharp_find_entry+0x2d4>)
 8014ebe:	4613      	mov	r3, r2
 8014ec0:	005b      	lsls	r3, r3, #1
 8014ec2:	4413      	add	r3, r2
 8014ec4:	00db      	lsls	r3, r3, #3
 8014ec6:	440b      	add	r3, r1
 8014ec8:	3312      	adds	r3, #18
 8014eca:	881b      	ldrh	r3, [r3, #0]
 8014ecc:	8bba      	ldrh	r2, [r7, #28]
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d845      	bhi.n	8014f5e <etharp_find_entry+0x18a>
            old_queue = i;
 8014ed2:	8c3b      	ldrh	r3, [r7, #32]
 8014ed4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014ed6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014eda:	4973      	ldr	r1, [pc, #460]	; (80150a8 <etharp_find_entry+0x2d4>)
 8014edc:	4613      	mov	r3, r2
 8014ede:	005b      	lsls	r3, r3, #1
 8014ee0:	4413      	add	r3, r2
 8014ee2:	00db      	lsls	r3, r3, #3
 8014ee4:	440b      	add	r3, r1
 8014ee6:	3312      	adds	r3, #18
 8014ee8:	881b      	ldrh	r3, [r3, #0]
 8014eea:	83bb      	strh	r3, [r7, #28]
 8014eec:	e037      	b.n	8014f5e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014eee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ef2:	496d      	ldr	r1, [pc, #436]	; (80150a8 <etharp_find_entry+0x2d4>)
 8014ef4:	4613      	mov	r3, r2
 8014ef6:	005b      	lsls	r3, r3, #1
 8014ef8:	4413      	add	r3, r2
 8014efa:	00db      	lsls	r3, r3, #3
 8014efc:	440b      	add	r3, r1
 8014efe:	3312      	adds	r3, #18
 8014f00:	881b      	ldrh	r3, [r3, #0]
 8014f02:	8b7a      	ldrh	r2, [r7, #26]
 8014f04:	429a      	cmp	r2, r3
 8014f06:	d82a      	bhi.n	8014f5e <etharp_find_entry+0x18a>
            old_pending = i;
 8014f08:	8c3b      	ldrh	r3, [r7, #32]
 8014f0a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014f0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f10:	4965      	ldr	r1, [pc, #404]	; (80150a8 <etharp_find_entry+0x2d4>)
 8014f12:	4613      	mov	r3, r2
 8014f14:	005b      	lsls	r3, r3, #1
 8014f16:	4413      	add	r3, r2
 8014f18:	00db      	lsls	r3, r3, #3
 8014f1a:	440b      	add	r3, r1
 8014f1c:	3312      	adds	r3, #18
 8014f1e:	881b      	ldrh	r3, [r3, #0]
 8014f20:	837b      	strh	r3, [r7, #26]
 8014f22:	e01c      	b.n	8014f5e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014f24:	7dfb      	ldrb	r3, [r7, #23]
 8014f26:	2b01      	cmp	r3, #1
 8014f28:	d919      	bls.n	8014f5e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014f2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f2e:	495e      	ldr	r1, [pc, #376]	; (80150a8 <etharp_find_entry+0x2d4>)
 8014f30:	4613      	mov	r3, r2
 8014f32:	005b      	lsls	r3, r3, #1
 8014f34:	4413      	add	r3, r2
 8014f36:	00db      	lsls	r3, r3, #3
 8014f38:	440b      	add	r3, r1
 8014f3a:	3312      	adds	r3, #18
 8014f3c:	881b      	ldrh	r3, [r3, #0]
 8014f3e:	8b3a      	ldrh	r2, [r7, #24]
 8014f40:	429a      	cmp	r2, r3
 8014f42:	d80c      	bhi.n	8014f5e <etharp_find_entry+0x18a>
            old_stable = i;
 8014f44:	8c3b      	ldrh	r3, [r7, #32]
 8014f46:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014f48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f4c:	4956      	ldr	r1, [pc, #344]	; (80150a8 <etharp_find_entry+0x2d4>)
 8014f4e:	4613      	mov	r3, r2
 8014f50:	005b      	lsls	r3, r3, #1
 8014f52:	4413      	add	r3, r2
 8014f54:	00db      	lsls	r3, r3, #3
 8014f56:	440b      	add	r3, r1
 8014f58:	3312      	adds	r3, #18
 8014f5a:	881b      	ldrh	r3, [r3, #0]
 8014f5c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f5e:	8c3b      	ldrh	r3, [r7, #32]
 8014f60:	3301      	adds	r3, #1
 8014f62:	b29b      	uxth	r3, r3
 8014f64:	843b      	strh	r3, [r7, #32]
 8014f66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014f6a:	2b09      	cmp	r3, #9
 8014f6c:	f77f af4c 	ble.w	8014e08 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014f70:	7afb      	ldrb	r3, [r7, #11]
 8014f72:	f003 0302 	and.w	r3, r3, #2
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d108      	bne.n	8014f8c <etharp_find_entry+0x1b8>
 8014f7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014f7e:	2b0a      	cmp	r3, #10
 8014f80:	d107      	bne.n	8014f92 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014f82:	7afb      	ldrb	r3, [r7, #11]
 8014f84:	f003 0301 	and.w	r3, r3, #1
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d102      	bne.n	8014f92 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f90:	e085      	b.n	801509e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014f92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014f96:	2b09      	cmp	r3, #9
 8014f98:	dc02      	bgt.n	8014fa0 <etharp_find_entry+0x1cc>
    i = empty;
 8014f9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f9c:	843b      	strh	r3, [r7, #32]
 8014f9e:	e039      	b.n	8015014 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014fa0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014fa4:	2b09      	cmp	r3, #9
 8014fa6:	dc14      	bgt.n	8014fd2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014faa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014fac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fb0:	493d      	ldr	r1, [pc, #244]	; (80150a8 <etharp_find_entry+0x2d4>)
 8014fb2:	4613      	mov	r3, r2
 8014fb4:	005b      	lsls	r3, r3, #1
 8014fb6:	4413      	add	r3, r2
 8014fb8:	00db      	lsls	r3, r3, #3
 8014fba:	440b      	add	r3, r1
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d018      	beq.n	8014ff4 <etharp_find_entry+0x220>
 8014fc2:	4b3a      	ldr	r3, [pc, #232]	; (80150ac <etharp_find_entry+0x2d8>)
 8014fc4:	f240 126d 	movw	r2, #365	; 0x16d
 8014fc8:	493b      	ldr	r1, [pc, #236]	; (80150b8 <etharp_find_entry+0x2e4>)
 8014fca:	483a      	ldr	r0, [pc, #232]	; (80150b4 <etharp_find_entry+0x2e0>)
 8014fcc:	f002 fbc0 	bl	8017750 <iprintf>
 8014fd0:	e010      	b.n	8014ff4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014fd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014fd6:	2b09      	cmp	r3, #9
 8014fd8:	dc02      	bgt.n	8014fe0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014fda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014fdc:	843b      	strh	r3, [r7, #32]
 8014fde:	e009      	b.n	8014ff4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014fe0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014fe4:	2b09      	cmp	r3, #9
 8014fe6:	dc02      	bgt.n	8014fee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014fe8:	8bfb      	ldrh	r3, [r7, #30]
 8014fea:	843b      	strh	r3, [r7, #32]
 8014fec:	e002      	b.n	8014ff4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014fee:	f04f 33ff 	mov.w	r3, #4294967295
 8014ff2:	e054      	b.n	801509e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014ff4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014ff8:	2b09      	cmp	r3, #9
 8014ffa:	dd06      	ble.n	801500a <etharp_find_entry+0x236>
 8014ffc:	4b2b      	ldr	r3, [pc, #172]	; (80150ac <etharp_find_entry+0x2d8>)
 8014ffe:	f240 127f 	movw	r2, #383	; 0x17f
 8015002:	492e      	ldr	r1, [pc, #184]	; (80150bc <etharp_find_entry+0x2e8>)
 8015004:	482b      	ldr	r0, [pc, #172]	; (80150b4 <etharp_find_entry+0x2e0>)
 8015006:	f002 fba3 	bl	8017750 <iprintf>
    etharp_free_entry(i);
 801500a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801500e:	4618      	mov	r0, r3
 8015010:	f7ff fe06 	bl	8014c20 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015014:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015018:	2b09      	cmp	r3, #9
 801501a:	dd06      	ble.n	801502a <etharp_find_entry+0x256>
 801501c:	4b23      	ldr	r3, [pc, #140]	; (80150ac <etharp_find_entry+0x2d8>)
 801501e:	f240 1283 	movw	r2, #387	; 0x183
 8015022:	4926      	ldr	r1, [pc, #152]	; (80150bc <etharp_find_entry+0x2e8>)
 8015024:	4823      	ldr	r0, [pc, #140]	; (80150b4 <etharp_find_entry+0x2e0>)
 8015026:	f002 fb93 	bl	8017750 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801502a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801502e:	491e      	ldr	r1, [pc, #120]	; (80150a8 <etharp_find_entry+0x2d4>)
 8015030:	4613      	mov	r3, r2
 8015032:	005b      	lsls	r3, r3, #1
 8015034:	4413      	add	r3, r2
 8015036:	00db      	lsls	r3, r3, #3
 8015038:	440b      	add	r3, r1
 801503a:	3314      	adds	r3, #20
 801503c:	781b      	ldrb	r3, [r3, #0]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d006      	beq.n	8015050 <etharp_find_entry+0x27c>
 8015042:	4b1a      	ldr	r3, [pc, #104]	; (80150ac <etharp_find_entry+0x2d8>)
 8015044:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015048:	491d      	ldr	r1, [pc, #116]	; (80150c0 <etharp_find_entry+0x2ec>)
 801504a:	481a      	ldr	r0, [pc, #104]	; (80150b4 <etharp_find_entry+0x2e0>)
 801504c:	f002 fb80 	bl	8017750 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d00b      	beq.n	801506e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015056:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	6819      	ldr	r1, [r3, #0]
 801505e:	4812      	ldr	r0, [pc, #72]	; (80150a8 <etharp_find_entry+0x2d4>)
 8015060:	4613      	mov	r3, r2
 8015062:	005b      	lsls	r3, r3, #1
 8015064:	4413      	add	r3, r2
 8015066:	00db      	lsls	r3, r3, #3
 8015068:	4403      	add	r3, r0
 801506a:	3304      	adds	r3, #4
 801506c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801506e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015072:	490d      	ldr	r1, [pc, #52]	; (80150a8 <etharp_find_entry+0x2d4>)
 8015074:	4613      	mov	r3, r2
 8015076:	005b      	lsls	r3, r3, #1
 8015078:	4413      	add	r3, r2
 801507a:	00db      	lsls	r3, r3, #3
 801507c:	440b      	add	r3, r1
 801507e:	3312      	adds	r3, #18
 8015080:	2200      	movs	r2, #0
 8015082:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015084:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015088:	4907      	ldr	r1, [pc, #28]	; (80150a8 <etharp_find_entry+0x2d4>)
 801508a:	4613      	mov	r3, r2
 801508c:	005b      	lsls	r3, r3, #1
 801508e:	4413      	add	r3, r2
 8015090:	00db      	lsls	r3, r3, #3
 8015092:	440b      	add	r3, r1
 8015094:	3308      	adds	r3, #8
 8015096:	687a      	ldr	r2, [r7, #4]
 8015098:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801509a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3728      	adds	r7, #40	; 0x28
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
 80150a6:	bf00      	nop
 80150a8:	2400416c 	.word	0x2400416c
 80150ac:	0801ab0c 	.word	0x0801ab0c
 80150b0:	0801ab44 	.word	0x0801ab44
 80150b4:	0801ab84 	.word	0x0801ab84
 80150b8:	0801abac 	.word	0x0801abac
 80150bc:	0801abc4 	.word	0x0801abc4
 80150c0:	0801abd8 	.word	0x0801abd8

080150c4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b088      	sub	sp, #32
 80150c8:	af02      	add	r7, sp, #8
 80150ca:	60f8      	str	r0, [r7, #12]
 80150cc:	60b9      	str	r1, [r7, #8]
 80150ce:	607a      	str	r2, [r7, #4]
 80150d0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80150d8:	2b06      	cmp	r3, #6
 80150da:	d006      	beq.n	80150ea <etharp_update_arp_entry+0x26>
 80150dc:	4b48      	ldr	r3, [pc, #288]	; (8015200 <etharp_update_arp_entry+0x13c>)
 80150de:	f240 12a9 	movw	r2, #425	; 0x1a9
 80150e2:	4948      	ldr	r1, [pc, #288]	; (8015204 <etharp_update_arp_entry+0x140>)
 80150e4:	4848      	ldr	r0, [pc, #288]	; (8015208 <etharp_update_arp_entry+0x144>)
 80150e6:	f002 fb33 	bl	8017750 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d012      	beq.n	8015116 <etharp_update_arp_entry+0x52>
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d00e      	beq.n	8015116 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	68f9      	ldr	r1, [r7, #12]
 80150fe:	4618      	mov	r0, r3
 8015100:	f001 f924 	bl	801634c <ip4_addr_isbroadcast_u32>
 8015104:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015106:	2b00      	cmp	r3, #0
 8015108:	d105      	bne.n	8015116 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801510a:	68bb      	ldr	r3, [r7, #8]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015112:	2be0      	cmp	r3, #224	; 0xe0
 8015114:	d102      	bne.n	801511c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015116:	f06f 030f 	mvn.w	r3, #15
 801511a:	e06c      	b.n	80151f6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801511c:	78fb      	ldrb	r3, [r7, #3]
 801511e:	68fa      	ldr	r2, [r7, #12]
 8015120:	4619      	mov	r1, r3
 8015122:	68b8      	ldr	r0, [r7, #8]
 8015124:	f7ff fe56 	bl	8014dd4 <etharp_find_entry>
 8015128:	4603      	mov	r3, r0
 801512a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801512c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015130:	2b00      	cmp	r3, #0
 8015132:	da02      	bge.n	801513a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015134:	8afb      	ldrh	r3, [r7, #22]
 8015136:	b25b      	sxtb	r3, r3
 8015138:	e05d      	b.n	80151f6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801513a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801513e:	4933      	ldr	r1, [pc, #204]	; (801520c <etharp_update_arp_entry+0x148>)
 8015140:	4613      	mov	r3, r2
 8015142:	005b      	lsls	r3, r3, #1
 8015144:	4413      	add	r3, r2
 8015146:	00db      	lsls	r3, r3, #3
 8015148:	440b      	add	r3, r1
 801514a:	3314      	adds	r3, #20
 801514c:	2202      	movs	r2, #2
 801514e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015150:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015154:	492d      	ldr	r1, [pc, #180]	; (801520c <etharp_update_arp_entry+0x148>)
 8015156:	4613      	mov	r3, r2
 8015158:	005b      	lsls	r3, r3, #1
 801515a:	4413      	add	r3, r2
 801515c:	00db      	lsls	r3, r3, #3
 801515e:	440b      	add	r3, r1
 8015160:	3308      	adds	r3, #8
 8015162:	68fa      	ldr	r2, [r7, #12]
 8015164:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015166:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801516a:	4613      	mov	r3, r2
 801516c:	005b      	lsls	r3, r3, #1
 801516e:	4413      	add	r3, r2
 8015170:	00db      	lsls	r3, r3, #3
 8015172:	3308      	adds	r3, #8
 8015174:	4a25      	ldr	r2, [pc, #148]	; (801520c <etharp_update_arp_entry+0x148>)
 8015176:	4413      	add	r3, r2
 8015178:	3304      	adds	r3, #4
 801517a:	2206      	movs	r2, #6
 801517c:	6879      	ldr	r1, [r7, #4]
 801517e:	4618      	mov	r0, r3
 8015180:	f002 fa75 	bl	801766e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015184:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015188:	4920      	ldr	r1, [pc, #128]	; (801520c <etharp_update_arp_entry+0x148>)
 801518a:	4613      	mov	r3, r2
 801518c:	005b      	lsls	r3, r3, #1
 801518e:	4413      	add	r3, r2
 8015190:	00db      	lsls	r3, r3, #3
 8015192:	440b      	add	r3, r1
 8015194:	3312      	adds	r3, #18
 8015196:	2200      	movs	r2, #0
 8015198:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801519a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801519e:	491b      	ldr	r1, [pc, #108]	; (801520c <etharp_update_arp_entry+0x148>)
 80151a0:	4613      	mov	r3, r2
 80151a2:	005b      	lsls	r3, r3, #1
 80151a4:	4413      	add	r3, r2
 80151a6:	00db      	lsls	r3, r3, #3
 80151a8:	440b      	add	r3, r1
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d021      	beq.n	80151f4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80151b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80151b4:	4915      	ldr	r1, [pc, #84]	; (801520c <etharp_update_arp_entry+0x148>)
 80151b6:	4613      	mov	r3, r2
 80151b8:	005b      	lsls	r3, r3, #1
 80151ba:	4413      	add	r3, r2
 80151bc:	00db      	lsls	r3, r3, #3
 80151be:	440b      	add	r3, r1
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80151c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80151c8:	4910      	ldr	r1, [pc, #64]	; (801520c <etharp_update_arp_entry+0x148>)
 80151ca:	4613      	mov	r3, r2
 80151cc:	005b      	lsls	r3, r3, #1
 80151ce:	4413      	add	r3, r2
 80151d0:	00db      	lsls	r3, r3, #3
 80151d2:	440b      	add	r3, r1
 80151d4:	2200      	movs	r2, #0
 80151d6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80151de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80151e2:	9300      	str	r3, [sp, #0]
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	6939      	ldr	r1, [r7, #16]
 80151e8:	68f8      	ldr	r0, [r7, #12]
 80151ea:	f001 ffb7 	bl	801715c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80151ee:	6938      	ldr	r0, [r7, #16]
 80151f0:	f7f9 fdf0 	bl	800edd4 <pbuf_free>
  }
  return ERR_OK;
 80151f4:	2300      	movs	r3, #0
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3718      	adds	r7, #24
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}
 80151fe:	bf00      	nop
 8015200:	0801ab0c 	.word	0x0801ab0c
 8015204:	0801ac04 	.word	0x0801ac04
 8015208:	0801ab84 	.word	0x0801ab84
 801520c:	2400416c 	.word	0x2400416c

08015210 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b084      	sub	sp, #16
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015218:	2300      	movs	r3, #0
 801521a:	60fb      	str	r3, [r7, #12]
 801521c:	e01e      	b.n	801525c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801521e:	4913      	ldr	r1, [pc, #76]	; (801526c <etharp_cleanup_netif+0x5c>)
 8015220:	68fa      	ldr	r2, [r7, #12]
 8015222:	4613      	mov	r3, r2
 8015224:	005b      	lsls	r3, r3, #1
 8015226:	4413      	add	r3, r2
 8015228:	00db      	lsls	r3, r3, #3
 801522a:	440b      	add	r3, r1
 801522c:	3314      	adds	r3, #20
 801522e:	781b      	ldrb	r3, [r3, #0]
 8015230:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015232:	7afb      	ldrb	r3, [r7, #11]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d00e      	beq.n	8015256 <etharp_cleanup_netif+0x46>
 8015238:	490c      	ldr	r1, [pc, #48]	; (801526c <etharp_cleanup_netif+0x5c>)
 801523a:	68fa      	ldr	r2, [r7, #12]
 801523c:	4613      	mov	r3, r2
 801523e:	005b      	lsls	r3, r3, #1
 8015240:	4413      	add	r3, r2
 8015242:	00db      	lsls	r3, r3, #3
 8015244:	440b      	add	r3, r1
 8015246:	3308      	adds	r3, #8
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	429a      	cmp	r2, r3
 801524e:	d102      	bne.n	8015256 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015250:	68f8      	ldr	r0, [r7, #12]
 8015252:	f7ff fce5 	bl	8014c20 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	3301      	adds	r3, #1
 801525a:	60fb      	str	r3, [r7, #12]
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	2b09      	cmp	r3, #9
 8015260:	dddd      	ble.n	801521e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015262:	bf00      	nop
 8015264:	bf00      	nop
 8015266:	3710      	adds	r7, #16
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}
 801526c:	2400416c 	.word	0x2400416c

08015270 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015270:	b5b0      	push	{r4, r5, r7, lr}
 8015272:	b08a      	sub	sp, #40	; 0x28
 8015274:	af04      	add	r7, sp, #16
 8015276:	6078      	str	r0, [r7, #4]
 8015278:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d107      	bne.n	8015290 <etharp_input+0x20>
 8015280:	4b3d      	ldr	r3, [pc, #244]	; (8015378 <etharp_input+0x108>)
 8015282:	f240 228a 	movw	r2, #650	; 0x28a
 8015286:	493d      	ldr	r1, [pc, #244]	; (801537c <etharp_input+0x10c>)
 8015288:	483d      	ldr	r0, [pc, #244]	; (8015380 <etharp_input+0x110>)
 801528a:	f002 fa61 	bl	8017750 <iprintf>
 801528e:	e06f      	b.n	8015370 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015296:	693b      	ldr	r3, [r7, #16]
 8015298:	881b      	ldrh	r3, [r3, #0]
 801529a:	b29b      	uxth	r3, r3
 801529c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80152a0:	d10c      	bne.n	80152bc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80152a2:	693b      	ldr	r3, [r7, #16]
 80152a4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80152a6:	2b06      	cmp	r3, #6
 80152a8:	d108      	bne.n	80152bc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80152ae:	2b04      	cmp	r3, #4
 80152b0:	d104      	bne.n	80152bc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80152b2:	693b      	ldr	r3, [r7, #16]
 80152b4:	885b      	ldrh	r3, [r3, #2]
 80152b6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80152b8:	2b08      	cmp	r3, #8
 80152ba:	d003      	beq.n	80152c4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f7f9 fd89 	bl	800edd4 <pbuf_free>
    return;
 80152c2:	e055      	b.n	8015370 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80152c4:	693b      	ldr	r3, [r7, #16]
 80152c6:	330e      	adds	r3, #14
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80152cc:	693b      	ldr	r3, [r7, #16]
 80152ce:	3318      	adds	r3, #24
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	3304      	adds	r3, #4
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d102      	bne.n	80152e4 <etharp_input+0x74>
    for_us = 0;
 80152de:	2300      	movs	r3, #0
 80152e0:	75fb      	strb	r3, [r7, #23]
 80152e2:	e009      	b.n	80152f8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80152e4:	68ba      	ldr	r2, [r7, #8]
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	3304      	adds	r3, #4
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	429a      	cmp	r2, r3
 80152ee:	bf0c      	ite	eq
 80152f0:	2301      	moveq	r3, #1
 80152f2:	2300      	movne	r3, #0
 80152f4:	b2db      	uxtb	r3, r3
 80152f6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	f103 0208 	add.w	r2, r3, #8
 80152fe:	7dfb      	ldrb	r3, [r7, #23]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d001      	beq.n	8015308 <etharp_input+0x98>
 8015304:	2301      	movs	r3, #1
 8015306:	e000      	b.n	801530a <etharp_input+0x9a>
 8015308:	2302      	movs	r3, #2
 801530a:	f107 010c 	add.w	r1, r7, #12
 801530e:	6838      	ldr	r0, [r7, #0]
 8015310:	f7ff fed8 	bl	80150c4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	88db      	ldrh	r3, [r3, #6]
 8015318:	b29b      	uxth	r3, r3
 801531a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801531e:	d003      	beq.n	8015328 <etharp_input+0xb8>
 8015320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015324:	d01e      	beq.n	8015364 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015326:	e020      	b.n	801536a <etharp_input+0xfa>
      if (for_us) {
 8015328:	7dfb      	ldrb	r3, [r7, #23]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d01c      	beq.n	8015368 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015334:	693b      	ldr	r3, [r7, #16]
 8015336:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015340:	683b      	ldr	r3, [r7, #0]
 8015342:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015344:	693a      	ldr	r2, [r7, #16]
 8015346:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015348:	2102      	movs	r1, #2
 801534a:	9103      	str	r1, [sp, #12]
 801534c:	f107 010c 	add.w	r1, r7, #12
 8015350:	9102      	str	r1, [sp, #8]
 8015352:	9201      	str	r2, [sp, #4]
 8015354:	9300      	str	r3, [sp, #0]
 8015356:	462b      	mov	r3, r5
 8015358:	4622      	mov	r2, r4
 801535a:	4601      	mov	r1, r0
 801535c:	6838      	ldr	r0, [r7, #0]
 801535e:	f000 faeb 	bl	8015938 <etharp_raw>
      break;
 8015362:	e001      	b.n	8015368 <etharp_input+0xf8>
      break;
 8015364:	bf00      	nop
 8015366:	e000      	b.n	801536a <etharp_input+0xfa>
      break;
 8015368:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f7f9 fd32 	bl	800edd4 <pbuf_free>
}
 8015370:	3718      	adds	r7, #24
 8015372:	46bd      	mov	sp, r7
 8015374:	bdb0      	pop	{r4, r5, r7, pc}
 8015376:	bf00      	nop
 8015378:	0801ab0c 	.word	0x0801ab0c
 801537c:	0801ac5c 	.word	0x0801ac5c
 8015380:	0801ab84 	.word	0x0801ab84

08015384 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b086      	sub	sp, #24
 8015388:	af02      	add	r7, sp, #8
 801538a:	60f8      	str	r0, [r7, #12]
 801538c:	60b9      	str	r1, [r7, #8]
 801538e:	4613      	mov	r3, r2
 8015390:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015392:	79fa      	ldrb	r2, [r7, #7]
 8015394:	4944      	ldr	r1, [pc, #272]	; (80154a8 <etharp_output_to_arp_index+0x124>)
 8015396:	4613      	mov	r3, r2
 8015398:	005b      	lsls	r3, r3, #1
 801539a:	4413      	add	r3, r2
 801539c:	00db      	lsls	r3, r3, #3
 801539e:	440b      	add	r3, r1
 80153a0:	3314      	adds	r3, #20
 80153a2:	781b      	ldrb	r3, [r3, #0]
 80153a4:	2b01      	cmp	r3, #1
 80153a6:	d806      	bhi.n	80153b6 <etharp_output_to_arp_index+0x32>
 80153a8:	4b40      	ldr	r3, [pc, #256]	; (80154ac <etharp_output_to_arp_index+0x128>)
 80153aa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80153ae:	4940      	ldr	r1, [pc, #256]	; (80154b0 <etharp_output_to_arp_index+0x12c>)
 80153b0:	4840      	ldr	r0, [pc, #256]	; (80154b4 <etharp_output_to_arp_index+0x130>)
 80153b2:	f002 f9cd 	bl	8017750 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80153b6:	79fa      	ldrb	r2, [r7, #7]
 80153b8:	493b      	ldr	r1, [pc, #236]	; (80154a8 <etharp_output_to_arp_index+0x124>)
 80153ba:	4613      	mov	r3, r2
 80153bc:	005b      	lsls	r3, r3, #1
 80153be:	4413      	add	r3, r2
 80153c0:	00db      	lsls	r3, r3, #3
 80153c2:	440b      	add	r3, r1
 80153c4:	3314      	adds	r3, #20
 80153c6:	781b      	ldrb	r3, [r3, #0]
 80153c8:	2b02      	cmp	r3, #2
 80153ca:	d153      	bne.n	8015474 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80153cc:	79fa      	ldrb	r2, [r7, #7]
 80153ce:	4936      	ldr	r1, [pc, #216]	; (80154a8 <etharp_output_to_arp_index+0x124>)
 80153d0:	4613      	mov	r3, r2
 80153d2:	005b      	lsls	r3, r3, #1
 80153d4:	4413      	add	r3, r2
 80153d6:	00db      	lsls	r3, r3, #3
 80153d8:	440b      	add	r3, r1
 80153da:	3312      	adds	r3, #18
 80153dc:	881b      	ldrh	r3, [r3, #0]
 80153de:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80153e2:	d919      	bls.n	8015418 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80153e4:	79fa      	ldrb	r2, [r7, #7]
 80153e6:	4613      	mov	r3, r2
 80153e8:	005b      	lsls	r3, r3, #1
 80153ea:	4413      	add	r3, r2
 80153ec:	00db      	lsls	r3, r3, #3
 80153ee:	4a2e      	ldr	r2, [pc, #184]	; (80154a8 <etharp_output_to_arp_index+0x124>)
 80153f0:	4413      	add	r3, r2
 80153f2:	3304      	adds	r3, #4
 80153f4:	4619      	mov	r1, r3
 80153f6:	68f8      	ldr	r0, [r7, #12]
 80153f8:	f000 fb4c 	bl	8015a94 <etharp_request>
 80153fc:	4603      	mov	r3, r0
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d138      	bne.n	8015474 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015402:	79fa      	ldrb	r2, [r7, #7]
 8015404:	4928      	ldr	r1, [pc, #160]	; (80154a8 <etharp_output_to_arp_index+0x124>)
 8015406:	4613      	mov	r3, r2
 8015408:	005b      	lsls	r3, r3, #1
 801540a:	4413      	add	r3, r2
 801540c:	00db      	lsls	r3, r3, #3
 801540e:	440b      	add	r3, r1
 8015410:	3314      	adds	r3, #20
 8015412:	2203      	movs	r2, #3
 8015414:	701a      	strb	r2, [r3, #0]
 8015416:	e02d      	b.n	8015474 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015418:	79fa      	ldrb	r2, [r7, #7]
 801541a:	4923      	ldr	r1, [pc, #140]	; (80154a8 <etharp_output_to_arp_index+0x124>)
 801541c:	4613      	mov	r3, r2
 801541e:	005b      	lsls	r3, r3, #1
 8015420:	4413      	add	r3, r2
 8015422:	00db      	lsls	r3, r3, #3
 8015424:	440b      	add	r3, r1
 8015426:	3312      	adds	r3, #18
 8015428:	881b      	ldrh	r3, [r3, #0]
 801542a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801542e:	d321      	bcc.n	8015474 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015430:	79fa      	ldrb	r2, [r7, #7]
 8015432:	4613      	mov	r3, r2
 8015434:	005b      	lsls	r3, r3, #1
 8015436:	4413      	add	r3, r2
 8015438:	00db      	lsls	r3, r3, #3
 801543a:	4a1b      	ldr	r2, [pc, #108]	; (80154a8 <etharp_output_to_arp_index+0x124>)
 801543c:	4413      	add	r3, r2
 801543e:	1d19      	adds	r1, r3, #4
 8015440:	79fa      	ldrb	r2, [r7, #7]
 8015442:	4613      	mov	r3, r2
 8015444:	005b      	lsls	r3, r3, #1
 8015446:	4413      	add	r3, r2
 8015448:	00db      	lsls	r3, r3, #3
 801544a:	3308      	adds	r3, #8
 801544c:	4a16      	ldr	r2, [pc, #88]	; (80154a8 <etharp_output_to_arp_index+0x124>)
 801544e:	4413      	add	r3, r2
 8015450:	3304      	adds	r3, #4
 8015452:	461a      	mov	r2, r3
 8015454:	68f8      	ldr	r0, [r7, #12]
 8015456:	f000 fafb 	bl	8015a50 <etharp_request_dst>
 801545a:	4603      	mov	r3, r0
 801545c:	2b00      	cmp	r3, #0
 801545e:	d109      	bne.n	8015474 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015460:	79fa      	ldrb	r2, [r7, #7]
 8015462:	4911      	ldr	r1, [pc, #68]	; (80154a8 <etharp_output_to_arp_index+0x124>)
 8015464:	4613      	mov	r3, r2
 8015466:	005b      	lsls	r3, r3, #1
 8015468:	4413      	add	r3, r2
 801546a:	00db      	lsls	r3, r3, #3
 801546c:	440b      	add	r3, r1
 801546e:	3314      	adds	r3, #20
 8015470:	2203      	movs	r2, #3
 8015472:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801547a:	79fa      	ldrb	r2, [r7, #7]
 801547c:	4613      	mov	r3, r2
 801547e:	005b      	lsls	r3, r3, #1
 8015480:	4413      	add	r3, r2
 8015482:	00db      	lsls	r3, r3, #3
 8015484:	3308      	adds	r3, #8
 8015486:	4a08      	ldr	r2, [pc, #32]	; (80154a8 <etharp_output_to_arp_index+0x124>)
 8015488:	4413      	add	r3, r2
 801548a:	3304      	adds	r3, #4
 801548c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015490:	9200      	str	r2, [sp, #0]
 8015492:	460a      	mov	r2, r1
 8015494:	68b9      	ldr	r1, [r7, #8]
 8015496:	68f8      	ldr	r0, [r7, #12]
 8015498:	f001 fe60 	bl	801715c <ethernet_output>
 801549c:	4603      	mov	r3, r0
}
 801549e:	4618      	mov	r0, r3
 80154a0:	3710      	adds	r7, #16
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd80      	pop	{r7, pc}
 80154a6:	bf00      	nop
 80154a8:	2400416c 	.word	0x2400416c
 80154ac:	0801ab0c 	.word	0x0801ab0c
 80154b0:	0801ac7c 	.word	0x0801ac7c
 80154b4:	0801ab84 	.word	0x0801ab84

080154b8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b08a      	sub	sp, #40	; 0x28
 80154bc:	af02      	add	r7, sp, #8
 80154be:	60f8      	str	r0, [r7, #12]
 80154c0:	60b9      	str	r1, [r7, #8]
 80154c2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d106      	bne.n	80154dc <etharp_output+0x24>
 80154ce:	4b73      	ldr	r3, [pc, #460]	; (801569c <etharp_output+0x1e4>)
 80154d0:	f240 321e 	movw	r2, #798	; 0x31e
 80154d4:	4972      	ldr	r1, [pc, #456]	; (80156a0 <etharp_output+0x1e8>)
 80154d6:	4873      	ldr	r0, [pc, #460]	; (80156a4 <etharp_output+0x1ec>)
 80154d8:	f002 f93a 	bl	8017750 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80154dc:	68bb      	ldr	r3, [r7, #8]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d106      	bne.n	80154f0 <etharp_output+0x38>
 80154e2:	4b6e      	ldr	r3, [pc, #440]	; (801569c <etharp_output+0x1e4>)
 80154e4:	f240 321f 	movw	r2, #799	; 0x31f
 80154e8:	496f      	ldr	r1, [pc, #444]	; (80156a8 <etharp_output+0x1f0>)
 80154ea:	486e      	ldr	r0, [pc, #440]	; (80156a4 <etharp_output+0x1ec>)
 80154ec:	f002 f930 	bl	8017750 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d106      	bne.n	8015504 <etharp_output+0x4c>
 80154f6:	4b69      	ldr	r3, [pc, #420]	; (801569c <etharp_output+0x1e4>)
 80154f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80154fc:	496b      	ldr	r1, [pc, #428]	; (80156ac <etharp_output+0x1f4>)
 80154fe:	4869      	ldr	r0, [pc, #420]	; (80156a4 <etharp_output+0x1ec>)
 8015500:	f002 f926 	bl	8017750 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	68f9      	ldr	r1, [r7, #12]
 801550a:	4618      	mov	r0, r3
 801550c:	f000 ff1e 	bl	801634c <ip4_addr_isbroadcast_u32>
 8015510:	4603      	mov	r3, r0
 8015512:	2b00      	cmp	r3, #0
 8015514:	d002      	beq.n	801551c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015516:	4b66      	ldr	r3, [pc, #408]	; (80156b0 <etharp_output+0x1f8>)
 8015518:	61fb      	str	r3, [r7, #28]
 801551a:	e0af      	b.n	801567c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015524:	2be0      	cmp	r3, #224	; 0xe0
 8015526:	d118      	bne.n	801555a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015528:	2301      	movs	r3, #1
 801552a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801552c:	2300      	movs	r3, #0
 801552e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015530:	235e      	movs	r3, #94	; 0x5e
 8015532:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	3301      	adds	r3, #1
 8015538:	781b      	ldrb	r3, [r3, #0]
 801553a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801553e:	b2db      	uxtb	r3, r3
 8015540:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	3302      	adds	r3, #2
 8015546:	781b      	ldrb	r3, [r3, #0]
 8015548:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	3303      	adds	r3, #3
 801554e:	781b      	ldrb	r3, [r3, #0]
 8015550:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015552:	f107 0310 	add.w	r3, r7, #16
 8015556:	61fb      	str	r3, [r7, #28]
 8015558:	e090      	b.n	801567c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	681a      	ldr	r2, [r3, #0]
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	3304      	adds	r3, #4
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	405a      	eors	r2, r3
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	3308      	adds	r3, #8
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	4013      	ands	r3, r2
 801556e:	2b00      	cmp	r3, #0
 8015570:	d012      	beq.n	8015598 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015578:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801557c:	4293      	cmp	r3, r2
 801557e:	d00b      	beq.n	8015598 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	330c      	adds	r3, #12
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d003      	beq.n	8015592 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	330c      	adds	r3, #12
 801558e:	61bb      	str	r3, [r7, #24]
 8015590:	e002      	b.n	8015598 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015592:	f06f 0303 	mvn.w	r3, #3
 8015596:	e07d      	b.n	8015694 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015598:	4b46      	ldr	r3, [pc, #280]	; (80156b4 <etharp_output+0x1fc>)
 801559a:	781b      	ldrb	r3, [r3, #0]
 801559c:	4619      	mov	r1, r3
 801559e:	4a46      	ldr	r2, [pc, #280]	; (80156b8 <etharp_output+0x200>)
 80155a0:	460b      	mov	r3, r1
 80155a2:	005b      	lsls	r3, r3, #1
 80155a4:	440b      	add	r3, r1
 80155a6:	00db      	lsls	r3, r3, #3
 80155a8:	4413      	add	r3, r2
 80155aa:	3314      	adds	r3, #20
 80155ac:	781b      	ldrb	r3, [r3, #0]
 80155ae:	2b01      	cmp	r3, #1
 80155b0:	d925      	bls.n	80155fe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80155b2:	4b40      	ldr	r3, [pc, #256]	; (80156b4 <etharp_output+0x1fc>)
 80155b4:	781b      	ldrb	r3, [r3, #0]
 80155b6:	4619      	mov	r1, r3
 80155b8:	4a3f      	ldr	r2, [pc, #252]	; (80156b8 <etharp_output+0x200>)
 80155ba:	460b      	mov	r3, r1
 80155bc:	005b      	lsls	r3, r3, #1
 80155be:	440b      	add	r3, r1
 80155c0:	00db      	lsls	r3, r3, #3
 80155c2:	4413      	add	r3, r2
 80155c4:	3308      	adds	r3, #8
 80155c6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80155c8:	68fa      	ldr	r2, [r7, #12]
 80155ca:	429a      	cmp	r2, r3
 80155cc:	d117      	bne.n	80155fe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80155ce:	69bb      	ldr	r3, [r7, #24]
 80155d0:	681a      	ldr	r2, [r3, #0]
 80155d2:	4b38      	ldr	r3, [pc, #224]	; (80156b4 <etharp_output+0x1fc>)
 80155d4:	781b      	ldrb	r3, [r3, #0]
 80155d6:	4618      	mov	r0, r3
 80155d8:	4937      	ldr	r1, [pc, #220]	; (80156b8 <etharp_output+0x200>)
 80155da:	4603      	mov	r3, r0
 80155dc:	005b      	lsls	r3, r3, #1
 80155de:	4403      	add	r3, r0
 80155e0:	00db      	lsls	r3, r3, #3
 80155e2:	440b      	add	r3, r1
 80155e4:	3304      	adds	r3, #4
 80155e6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d108      	bne.n	80155fe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80155ec:	4b31      	ldr	r3, [pc, #196]	; (80156b4 <etharp_output+0x1fc>)
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	461a      	mov	r2, r3
 80155f2:	68b9      	ldr	r1, [r7, #8]
 80155f4:	68f8      	ldr	r0, [r7, #12]
 80155f6:	f7ff fec5 	bl	8015384 <etharp_output_to_arp_index>
 80155fa:	4603      	mov	r3, r0
 80155fc:	e04a      	b.n	8015694 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80155fe:	2300      	movs	r3, #0
 8015600:	75fb      	strb	r3, [r7, #23]
 8015602:	e031      	b.n	8015668 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015604:	7dfa      	ldrb	r2, [r7, #23]
 8015606:	492c      	ldr	r1, [pc, #176]	; (80156b8 <etharp_output+0x200>)
 8015608:	4613      	mov	r3, r2
 801560a:	005b      	lsls	r3, r3, #1
 801560c:	4413      	add	r3, r2
 801560e:	00db      	lsls	r3, r3, #3
 8015610:	440b      	add	r3, r1
 8015612:	3314      	adds	r3, #20
 8015614:	781b      	ldrb	r3, [r3, #0]
 8015616:	2b01      	cmp	r3, #1
 8015618:	d923      	bls.n	8015662 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801561a:	7dfa      	ldrb	r2, [r7, #23]
 801561c:	4926      	ldr	r1, [pc, #152]	; (80156b8 <etharp_output+0x200>)
 801561e:	4613      	mov	r3, r2
 8015620:	005b      	lsls	r3, r3, #1
 8015622:	4413      	add	r3, r2
 8015624:	00db      	lsls	r3, r3, #3
 8015626:	440b      	add	r3, r1
 8015628:	3308      	adds	r3, #8
 801562a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801562c:	68fa      	ldr	r2, [r7, #12]
 801562e:	429a      	cmp	r2, r3
 8015630:	d117      	bne.n	8015662 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015632:	69bb      	ldr	r3, [r7, #24]
 8015634:	6819      	ldr	r1, [r3, #0]
 8015636:	7dfa      	ldrb	r2, [r7, #23]
 8015638:	481f      	ldr	r0, [pc, #124]	; (80156b8 <etharp_output+0x200>)
 801563a:	4613      	mov	r3, r2
 801563c:	005b      	lsls	r3, r3, #1
 801563e:	4413      	add	r3, r2
 8015640:	00db      	lsls	r3, r3, #3
 8015642:	4403      	add	r3, r0
 8015644:	3304      	adds	r3, #4
 8015646:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015648:	4299      	cmp	r1, r3
 801564a:	d10a      	bne.n	8015662 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801564c:	4a19      	ldr	r2, [pc, #100]	; (80156b4 <etharp_output+0x1fc>)
 801564e:	7dfb      	ldrb	r3, [r7, #23]
 8015650:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015652:	7dfb      	ldrb	r3, [r7, #23]
 8015654:	461a      	mov	r2, r3
 8015656:	68b9      	ldr	r1, [r7, #8]
 8015658:	68f8      	ldr	r0, [r7, #12]
 801565a:	f7ff fe93 	bl	8015384 <etharp_output_to_arp_index>
 801565e:	4603      	mov	r3, r0
 8015660:	e018      	b.n	8015694 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015662:	7dfb      	ldrb	r3, [r7, #23]
 8015664:	3301      	adds	r3, #1
 8015666:	75fb      	strb	r3, [r7, #23]
 8015668:	7dfb      	ldrb	r3, [r7, #23]
 801566a:	2b09      	cmp	r3, #9
 801566c:	d9ca      	bls.n	8015604 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801566e:	68ba      	ldr	r2, [r7, #8]
 8015670:	69b9      	ldr	r1, [r7, #24]
 8015672:	68f8      	ldr	r0, [r7, #12]
 8015674:	f000 f822 	bl	80156bc <etharp_query>
 8015678:	4603      	mov	r3, r0
 801567a:	e00b      	b.n	8015694 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015682:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015686:	9300      	str	r3, [sp, #0]
 8015688:	69fb      	ldr	r3, [r7, #28]
 801568a:	68b9      	ldr	r1, [r7, #8]
 801568c:	68f8      	ldr	r0, [r7, #12]
 801568e:	f001 fd65 	bl	801715c <ethernet_output>
 8015692:	4603      	mov	r3, r0
}
 8015694:	4618      	mov	r0, r3
 8015696:	3720      	adds	r7, #32
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}
 801569c:	0801ab0c 	.word	0x0801ab0c
 80156a0:	0801ac5c 	.word	0x0801ac5c
 80156a4:	0801ab84 	.word	0x0801ab84
 80156a8:	0801acac 	.word	0x0801acac
 80156ac:	0801ac4c 	.word	0x0801ac4c
 80156b0:	0801c874 	.word	0x0801c874
 80156b4:	2400425c 	.word	0x2400425c
 80156b8:	2400416c 	.word	0x2400416c

080156bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b08c      	sub	sp, #48	; 0x30
 80156c0:	af02      	add	r7, sp, #8
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	3326      	adds	r3, #38	; 0x26
 80156cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80156ce:	23ff      	movs	r3, #255	; 0xff
 80156d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80156d4:	2300      	movs	r3, #0
 80156d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	68f9      	ldr	r1, [r7, #12]
 80156de:	4618      	mov	r0, r3
 80156e0:	f000 fe34 	bl	801634c <ip4_addr_isbroadcast_u32>
 80156e4:	4603      	mov	r3, r0
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d10c      	bne.n	8015704 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80156ea:	68bb      	ldr	r3, [r7, #8]
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80156f2:	2be0      	cmp	r3, #224	; 0xe0
 80156f4:	d006      	beq.n	8015704 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d003      	beq.n	8015704 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d102      	bne.n	801570a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015704:	f06f 030f 	mvn.w	r3, #15
 8015708:	e101      	b.n	801590e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801570a:	68fa      	ldr	r2, [r7, #12]
 801570c:	2101      	movs	r1, #1
 801570e:	68b8      	ldr	r0, [r7, #8]
 8015710:	f7ff fb60 	bl	8014dd4 <etharp_find_entry>
 8015714:	4603      	mov	r3, r0
 8015716:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801571c:	2b00      	cmp	r3, #0
 801571e:	da02      	bge.n	8015726 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015720:	8a7b      	ldrh	r3, [r7, #18]
 8015722:	b25b      	sxtb	r3, r3
 8015724:	e0f3      	b.n	801590e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015726:	8a7b      	ldrh	r3, [r7, #18]
 8015728:	2b7e      	cmp	r3, #126	; 0x7e
 801572a:	d906      	bls.n	801573a <etharp_query+0x7e>
 801572c:	4b7a      	ldr	r3, [pc, #488]	; (8015918 <etharp_query+0x25c>)
 801572e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015732:	497a      	ldr	r1, [pc, #488]	; (801591c <etharp_query+0x260>)
 8015734:	487a      	ldr	r0, [pc, #488]	; (8015920 <etharp_query+0x264>)
 8015736:	f002 f80b 	bl	8017750 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801573a:	8a7b      	ldrh	r3, [r7, #18]
 801573c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801573e:	7c7a      	ldrb	r2, [r7, #17]
 8015740:	4978      	ldr	r1, [pc, #480]	; (8015924 <etharp_query+0x268>)
 8015742:	4613      	mov	r3, r2
 8015744:	005b      	lsls	r3, r3, #1
 8015746:	4413      	add	r3, r2
 8015748:	00db      	lsls	r3, r3, #3
 801574a:	440b      	add	r3, r1
 801574c:	3314      	adds	r3, #20
 801574e:	781b      	ldrb	r3, [r3, #0]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d115      	bne.n	8015780 <etharp_query+0xc4>
    is_new_entry = 1;
 8015754:	2301      	movs	r3, #1
 8015756:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015758:	7c7a      	ldrb	r2, [r7, #17]
 801575a:	4972      	ldr	r1, [pc, #456]	; (8015924 <etharp_query+0x268>)
 801575c:	4613      	mov	r3, r2
 801575e:	005b      	lsls	r3, r3, #1
 8015760:	4413      	add	r3, r2
 8015762:	00db      	lsls	r3, r3, #3
 8015764:	440b      	add	r3, r1
 8015766:	3314      	adds	r3, #20
 8015768:	2201      	movs	r2, #1
 801576a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801576c:	7c7a      	ldrb	r2, [r7, #17]
 801576e:	496d      	ldr	r1, [pc, #436]	; (8015924 <etharp_query+0x268>)
 8015770:	4613      	mov	r3, r2
 8015772:	005b      	lsls	r3, r3, #1
 8015774:	4413      	add	r3, r2
 8015776:	00db      	lsls	r3, r3, #3
 8015778:	440b      	add	r3, r1
 801577a:	3308      	adds	r3, #8
 801577c:	68fa      	ldr	r2, [r7, #12]
 801577e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015780:	7c7a      	ldrb	r2, [r7, #17]
 8015782:	4968      	ldr	r1, [pc, #416]	; (8015924 <etharp_query+0x268>)
 8015784:	4613      	mov	r3, r2
 8015786:	005b      	lsls	r3, r3, #1
 8015788:	4413      	add	r3, r2
 801578a:	00db      	lsls	r3, r3, #3
 801578c:	440b      	add	r3, r1
 801578e:	3314      	adds	r3, #20
 8015790:	781b      	ldrb	r3, [r3, #0]
 8015792:	2b01      	cmp	r3, #1
 8015794:	d011      	beq.n	80157ba <etharp_query+0xfe>
 8015796:	7c7a      	ldrb	r2, [r7, #17]
 8015798:	4962      	ldr	r1, [pc, #392]	; (8015924 <etharp_query+0x268>)
 801579a:	4613      	mov	r3, r2
 801579c:	005b      	lsls	r3, r3, #1
 801579e:	4413      	add	r3, r2
 80157a0:	00db      	lsls	r3, r3, #3
 80157a2:	440b      	add	r3, r1
 80157a4:	3314      	adds	r3, #20
 80157a6:	781b      	ldrb	r3, [r3, #0]
 80157a8:	2b01      	cmp	r3, #1
 80157aa:	d806      	bhi.n	80157ba <etharp_query+0xfe>
 80157ac:	4b5a      	ldr	r3, [pc, #360]	; (8015918 <etharp_query+0x25c>)
 80157ae:	f240 32cd 	movw	r2, #973	; 0x3cd
 80157b2:	495d      	ldr	r1, [pc, #372]	; (8015928 <etharp_query+0x26c>)
 80157b4:	485a      	ldr	r0, [pc, #360]	; (8015920 <etharp_query+0x264>)
 80157b6:	f001 ffcb 	bl	8017750 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80157ba:	6a3b      	ldr	r3, [r7, #32]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d102      	bne.n	80157c6 <etharp_query+0x10a>
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d10c      	bne.n	80157e0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80157c6:	68b9      	ldr	r1, [r7, #8]
 80157c8:	68f8      	ldr	r0, [r7, #12]
 80157ca:	f000 f963 	bl	8015a94 <etharp_request>
 80157ce:	4603      	mov	r3, r0
 80157d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d102      	bne.n	80157e0 <etharp_query+0x124>
      return result;
 80157da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80157de:	e096      	b.n	801590e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d106      	bne.n	80157f4 <etharp_query+0x138>
 80157e6:	4b4c      	ldr	r3, [pc, #304]	; (8015918 <etharp_query+0x25c>)
 80157e8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80157ec:	494f      	ldr	r1, [pc, #316]	; (801592c <etharp_query+0x270>)
 80157ee:	484c      	ldr	r0, [pc, #304]	; (8015920 <etharp_query+0x264>)
 80157f0:	f001 ffae 	bl	8017750 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80157f4:	7c7a      	ldrb	r2, [r7, #17]
 80157f6:	494b      	ldr	r1, [pc, #300]	; (8015924 <etharp_query+0x268>)
 80157f8:	4613      	mov	r3, r2
 80157fa:	005b      	lsls	r3, r3, #1
 80157fc:	4413      	add	r3, r2
 80157fe:	00db      	lsls	r3, r3, #3
 8015800:	440b      	add	r3, r1
 8015802:	3314      	adds	r3, #20
 8015804:	781b      	ldrb	r3, [r3, #0]
 8015806:	2b01      	cmp	r3, #1
 8015808:	d917      	bls.n	801583a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801580a:	4a49      	ldr	r2, [pc, #292]	; (8015930 <etharp_query+0x274>)
 801580c:	7c7b      	ldrb	r3, [r7, #17]
 801580e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015810:	7c7a      	ldrb	r2, [r7, #17]
 8015812:	4613      	mov	r3, r2
 8015814:	005b      	lsls	r3, r3, #1
 8015816:	4413      	add	r3, r2
 8015818:	00db      	lsls	r3, r3, #3
 801581a:	3308      	adds	r3, #8
 801581c:	4a41      	ldr	r2, [pc, #260]	; (8015924 <etharp_query+0x268>)
 801581e:	4413      	add	r3, r2
 8015820:	3304      	adds	r3, #4
 8015822:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015826:	9200      	str	r2, [sp, #0]
 8015828:	697a      	ldr	r2, [r7, #20]
 801582a:	6879      	ldr	r1, [r7, #4]
 801582c:	68f8      	ldr	r0, [r7, #12]
 801582e:	f001 fc95 	bl	801715c <ethernet_output>
 8015832:	4603      	mov	r3, r0
 8015834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015838:	e067      	b.n	801590a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801583a:	7c7a      	ldrb	r2, [r7, #17]
 801583c:	4939      	ldr	r1, [pc, #228]	; (8015924 <etharp_query+0x268>)
 801583e:	4613      	mov	r3, r2
 8015840:	005b      	lsls	r3, r3, #1
 8015842:	4413      	add	r3, r2
 8015844:	00db      	lsls	r3, r3, #3
 8015846:	440b      	add	r3, r1
 8015848:	3314      	adds	r3, #20
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	2b01      	cmp	r3, #1
 801584e:	d15c      	bne.n	801590a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015850:	2300      	movs	r3, #0
 8015852:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015858:	e01c      	b.n	8015894 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801585a:	69fb      	ldr	r3, [r7, #28]
 801585c:	895a      	ldrh	r2, [r3, #10]
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	891b      	ldrh	r3, [r3, #8]
 8015862:	429a      	cmp	r2, r3
 8015864:	d10a      	bne.n	801587c <etharp_query+0x1c0>
 8015866:	69fb      	ldr	r3, [r7, #28]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d006      	beq.n	801587c <etharp_query+0x1c0>
 801586e:	4b2a      	ldr	r3, [pc, #168]	; (8015918 <etharp_query+0x25c>)
 8015870:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015874:	492f      	ldr	r1, [pc, #188]	; (8015934 <etharp_query+0x278>)
 8015876:	482a      	ldr	r0, [pc, #168]	; (8015920 <etharp_query+0x264>)
 8015878:	f001 ff6a 	bl	8017750 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801587c:	69fb      	ldr	r3, [r7, #28]
 801587e:	7b1b      	ldrb	r3, [r3, #12]
 8015880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015884:	2b00      	cmp	r3, #0
 8015886:	d002      	beq.n	801588e <etharp_query+0x1d2>
        copy_needed = 1;
 8015888:	2301      	movs	r3, #1
 801588a:	61bb      	str	r3, [r7, #24]
        break;
 801588c:	e005      	b.n	801589a <etharp_query+0x1de>
      }
      p = p->next;
 801588e:	69fb      	ldr	r3, [r7, #28]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015894:	69fb      	ldr	r3, [r7, #28]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d1df      	bne.n	801585a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801589a:	69bb      	ldr	r3, [r7, #24]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d007      	beq.n	80158b0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80158a0:	687a      	ldr	r2, [r7, #4]
 80158a2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80158a6:	200e      	movs	r0, #14
 80158a8:	f7f9 fcfc 	bl	800f2a4 <pbuf_clone>
 80158ac:	61f8      	str	r0, [r7, #28]
 80158ae:	e004      	b.n	80158ba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80158b4:	69f8      	ldr	r0, [r7, #28]
 80158b6:	f7f9 fb33 	bl	800ef20 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80158ba:	69fb      	ldr	r3, [r7, #28]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d021      	beq.n	8015904 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80158c0:	7c7a      	ldrb	r2, [r7, #17]
 80158c2:	4918      	ldr	r1, [pc, #96]	; (8015924 <etharp_query+0x268>)
 80158c4:	4613      	mov	r3, r2
 80158c6:	005b      	lsls	r3, r3, #1
 80158c8:	4413      	add	r3, r2
 80158ca:	00db      	lsls	r3, r3, #3
 80158cc:	440b      	add	r3, r1
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d00a      	beq.n	80158ea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80158d4:	7c7a      	ldrb	r2, [r7, #17]
 80158d6:	4913      	ldr	r1, [pc, #76]	; (8015924 <etharp_query+0x268>)
 80158d8:	4613      	mov	r3, r2
 80158da:	005b      	lsls	r3, r3, #1
 80158dc:	4413      	add	r3, r2
 80158de:	00db      	lsls	r3, r3, #3
 80158e0:	440b      	add	r3, r1
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	4618      	mov	r0, r3
 80158e6:	f7f9 fa75 	bl	800edd4 <pbuf_free>
      }
      arp_table[i].q = p;
 80158ea:	7c7a      	ldrb	r2, [r7, #17]
 80158ec:	490d      	ldr	r1, [pc, #52]	; (8015924 <etharp_query+0x268>)
 80158ee:	4613      	mov	r3, r2
 80158f0:	005b      	lsls	r3, r3, #1
 80158f2:	4413      	add	r3, r2
 80158f4:	00db      	lsls	r3, r3, #3
 80158f6:	440b      	add	r3, r1
 80158f8:	69fa      	ldr	r2, [r7, #28]
 80158fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80158fc:	2300      	movs	r3, #0
 80158fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015902:	e002      	b.n	801590a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015904:	23ff      	movs	r3, #255	; 0xff
 8015906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801590a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801590e:	4618      	mov	r0, r3
 8015910:	3728      	adds	r7, #40	; 0x28
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}
 8015916:	bf00      	nop
 8015918:	0801ab0c 	.word	0x0801ab0c
 801591c:	0801acb8 	.word	0x0801acb8
 8015920:	0801ab84 	.word	0x0801ab84
 8015924:	2400416c 	.word	0x2400416c
 8015928:	0801acc8 	.word	0x0801acc8
 801592c:	0801acac 	.word	0x0801acac
 8015930:	2400425c 	.word	0x2400425c
 8015934:	0801acf0 	.word	0x0801acf0

08015938 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b08a      	sub	sp, #40	; 0x28
 801593c:	af02      	add	r7, sp, #8
 801593e:	60f8      	str	r0, [r7, #12]
 8015940:	60b9      	str	r1, [r7, #8]
 8015942:	607a      	str	r2, [r7, #4]
 8015944:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015946:	2300      	movs	r3, #0
 8015948:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d106      	bne.n	801595e <etharp_raw+0x26>
 8015950:	4b3a      	ldr	r3, [pc, #232]	; (8015a3c <etharp_raw+0x104>)
 8015952:	f240 4257 	movw	r2, #1111	; 0x457
 8015956:	493a      	ldr	r1, [pc, #232]	; (8015a40 <etharp_raw+0x108>)
 8015958:	483a      	ldr	r0, [pc, #232]	; (8015a44 <etharp_raw+0x10c>)
 801595a:	f001 fef9 	bl	8017750 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801595e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015962:	211c      	movs	r1, #28
 8015964:	200e      	movs	r0, #14
 8015966:	f7f8 ff51 	bl	800e80c <pbuf_alloc>
 801596a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801596c:	69bb      	ldr	r3, [r7, #24]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d102      	bne.n	8015978 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015972:	f04f 33ff 	mov.w	r3, #4294967295
 8015976:	e05d      	b.n	8015a34 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015978:	69bb      	ldr	r3, [r7, #24]
 801597a:	895b      	ldrh	r3, [r3, #10]
 801597c:	2b1b      	cmp	r3, #27
 801597e:	d806      	bhi.n	801598e <etharp_raw+0x56>
 8015980:	4b2e      	ldr	r3, [pc, #184]	; (8015a3c <etharp_raw+0x104>)
 8015982:	f240 4262 	movw	r2, #1122	; 0x462
 8015986:	4930      	ldr	r1, [pc, #192]	; (8015a48 <etharp_raw+0x110>)
 8015988:	482e      	ldr	r0, [pc, #184]	; (8015a44 <etharp_raw+0x10c>)
 801598a:	f001 fee1 	bl	8017750 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801598e:	69bb      	ldr	r3, [r7, #24]
 8015990:	685b      	ldr	r3, [r3, #4]
 8015992:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015994:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015996:	4618      	mov	r0, r3
 8015998:	f7f7 fd72 	bl	800d480 <lwip_htons>
 801599c:	4603      	mov	r3, r0
 801599e:	461a      	mov	r2, r3
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80159aa:	2b06      	cmp	r3, #6
 80159ac:	d006      	beq.n	80159bc <etharp_raw+0x84>
 80159ae:	4b23      	ldr	r3, [pc, #140]	; (8015a3c <etharp_raw+0x104>)
 80159b0:	f240 4269 	movw	r2, #1129	; 0x469
 80159b4:	4925      	ldr	r1, [pc, #148]	; (8015a4c <etharp_raw+0x114>)
 80159b6:	4823      	ldr	r0, [pc, #140]	; (8015a44 <etharp_raw+0x10c>)
 80159b8:	f001 feca 	bl	8017750 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80159bc:	697b      	ldr	r3, [r7, #20]
 80159be:	3308      	adds	r3, #8
 80159c0:	2206      	movs	r2, #6
 80159c2:	6839      	ldr	r1, [r7, #0]
 80159c4:	4618      	mov	r0, r3
 80159c6:	f001 fe52 	bl	801766e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	3312      	adds	r3, #18
 80159ce:	2206      	movs	r2, #6
 80159d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80159d2:	4618      	mov	r0, r3
 80159d4:	f001 fe4b 	bl	801766e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	330e      	adds	r3, #14
 80159dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159de:	6812      	ldr	r2, [r2, #0]
 80159e0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80159e2:	697b      	ldr	r3, [r7, #20]
 80159e4:	3318      	adds	r3, #24
 80159e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159e8:	6812      	ldr	r2, [r2, #0]
 80159ea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80159ec:	697b      	ldr	r3, [r7, #20]
 80159ee:	2200      	movs	r2, #0
 80159f0:	701a      	strb	r2, [r3, #0]
 80159f2:	2200      	movs	r2, #0
 80159f4:	f042 0201 	orr.w	r2, r2, #1
 80159f8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	2200      	movs	r2, #0
 80159fe:	f042 0208 	orr.w	r2, r2, #8
 8015a02:	709a      	strb	r2, [r3, #2]
 8015a04:	2200      	movs	r2, #0
 8015a06:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015a08:	697b      	ldr	r3, [r7, #20]
 8015a0a:	2206      	movs	r2, #6
 8015a0c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015a0e:	697b      	ldr	r3, [r7, #20]
 8015a10:	2204      	movs	r2, #4
 8015a12:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015a14:	f640 0306 	movw	r3, #2054	; 0x806
 8015a18:	9300      	str	r3, [sp, #0]
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	68ba      	ldr	r2, [r7, #8]
 8015a1e:	69b9      	ldr	r1, [r7, #24]
 8015a20:	68f8      	ldr	r0, [r7, #12]
 8015a22:	f001 fb9b 	bl	801715c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015a26:	69b8      	ldr	r0, [r7, #24]
 8015a28:	f7f9 f9d4 	bl	800edd4 <pbuf_free>
  p = NULL;
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015a30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015a34:	4618      	mov	r0, r3
 8015a36:	3720      	adds	r7, #32
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd80      	pop	{r7, pc}
 8015a3c:	0801ab0c 	.word	0x0801ab0c
 8015a40:	0801ac5c 	.word	0x0801ac5c
 8015a44:	0801ab84 	.word	0x0801ab84
 8015a48:	0801ad0c 	.word	0x0801ad0c
 8015a4c:	0801ad40 	.word	0x0801ad40

08015a50 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b088      	sub	sp, #32
 8015a54:	af04      	add	r7, sp, #16
 8015a56:	60f8      	str	r0, [r7, #12]
 8015a58:	60b9      	str	r1, [r7, #8]
 8015a5a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015a6c:	2201      	movs	r2, #1
 8015a6e:	9203      	str	r2, [sp, #12]
 8015a70:	68ba      	ldr	r2, [r7, #8]
 8015a72:	9202      	str	r2, [sp, #8]
 8015a74:	4a06      	ldr	r2, [pc, #24]	; (8015a90 <etharp_request_dst+0x40>)
 8015a76:	9201      	str	r2, [sp, #4]
 8015a78:	9300      	str	r3, [sp, #0]
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	687a      	ldr	r2, [r7, #4]
 8015a7e:	68f8      	ldr	r0, [r7, #12]
 8015a80:	f7ff ff5a 	bl	8015938 <etharp_raw>
 8015a84:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3710      	adds	r7, #16
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}
 8015a8e:	bf00      	nop
 8015a90:	0801c87c 	.word	0x0801c87c

08015a94 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b082      	sub	sp, #8
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
 8015a9c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015a9e:	4a05      	ldr	r2, [pc, #20]	; (8015ab4 <etharp_request+0x20>)
 8015aa0:	6839      	ldr	r1, [r7, #0]
 8015aa2:	6878      	ldr	r0, [r7, #4]
 8015aa4:	f7ff ffd4 	bl	8015a50 <etharp_request_dst>
 8015aa8:	4603      	mov	r3, r0
}
 8015aaa:	4618      	mov	r0, r3
 8015aac:	3708      	adds	r7, #8
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}
 8015ab2:	bf00      	nop
 8015ab4:	0801c874 	.word	0x0801c874

08015ab8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b08e      	sub	sp, #56	; 0x38
 8015abc:	af04      	add	r7, sp, #16
 8015abe:	6078      	str	r0, [r7, #4]
 8015ac0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015ac2:	4b87      	ldr	r3, [pc, #540]	; (8015ce0 <icmp_input+0x228>)
 8015ac4:	689b      	ldr	r3, [r3, #8]
 8015ac6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aca:	781b      	ldrb	r3, [r3, #0]
 8015acc:	f003 030f 	and.w	r3, r3, #15
 8015ad0:	b2db      	uxtb	r3, r3
 8015ad2:	009b      	lsls	r3, r3, #2
 8015ad4:	b2db      	uxtb	r3, r3
 8015ad6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015ad8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ada:	2b13      	cmp	r3, #19
 8015adc:	f240 80e8 	bls.w	8015cb0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	895b      	ldrh	r3, [r3, #10]
 8015ae4:	2b03      	cmp	r3, #3
 8015ae6:	f240 80e5 	bls.w	8015cb4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	685b      	ldr	r3, [r3, #4]
 8015aee:	781b      	ldrb	r3, [r3, #0]
 8015af0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015af4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	f000 80d2 	beq.w	8015ca2 <icmp_input+0x1ea>
 8015afe:	2b08      	cmp	r3, #8
 8015b00:	f040 80d2 	bne.w	8015ca8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015b04:	4b77      	ldr	r3, [pc, #476]	; (8015ce4 <icmp_input+0x22c>)
 8015b06:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015b08:	4b75      	ldr	r3, [pc, #468]	; (8015ce0 <icmp_input+0x228>)
 8015b0a:	695b      	ldr	r3, [r3, #20]
 8015b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b10:	2be0      	cmp	r3, #224	; 0xe0
 8015b12:	f000 80d6 	beq.w	8015cc2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015b16:	4b72      	ldr	r3, [pc, #456]	; (8015ce0 <icmp_input+0x228>)
 8015b18:	695b      	ldr	r3, [r3, #20]
 8015b1a:	4a71      	ldr	r2, [pc, #452]	; (8015ce0 <icmp_input+0x228>)
 8015b1c:	6812      	ldr	r2, [r2, #0]
 8015b1e:	4611      	mov	r1, r2
 8015b20:	4618      	mov	r0, r3
 8015b22:	f000 fc13 	bl	801634c <ip4_addr_isbroadcast_u32>
 8015b26:	4603      	mov	r3, r0
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	f040 80cc 	bne.w	8015cc6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	891b      	ldrh	r3, [r3, #8]
 8015b32:	2b07      	cmp	r3, #7
 8015b34:	f240 80c0 	bls.w	8015cb8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8015b38:	6878      	ldr	r0, [r7, #4]
 8015b3a:	f7f7 fd3e 	bl	800d5ba <inet_chksum_pbuf>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d003      	beq.n	8015b4c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f7f9 f945 	bl	800edd4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8015b4a:	e0c5      	b.n	8015cd8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015b4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b4e:	330e      	adds	r3, #14
 8015b50:	4619      	mov	r1, r3
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	f7f9 f8a8 	bl	800eca8 <pbuf_add_header>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d04b      	beq.n	8015bf6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	891a      	ldrh	r2, [r3, #8]
 8015b62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b64:	4413      	add	r3, r2
 8015b66:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	891b      	ldrh	r3, [r3, #8]
 8015b6c:	8b7a      	ldrh	r2, [r7, #26]
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	f0c0 80ab 	bcc.w	8015cca <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015b74:	8b7b      	ldrh	r3, [r7, #26]
 8015b76:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015b7a:	4619      	mov	r1, r3
 8015b7c:	200e      	movs	r0, #14
 8015b7e:	f7f8 fe45 	bl	800e80c <pbuf_alloc>
 8015b82:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015b84:	697b      	ldr	r3, [r7, #20]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	f000 80a1 	beq.w	8015cce <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	895b      	ldrh	r3, [r3, #10]
 8015b90:	461a      	mov	r2, r3
 8015b92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b94:	3308      	adds	r3, #8
 8015b96:	429a      	cmp	r2, r3
 8015b98:	d203      	bcs.n	8015ba2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015b9a:	6978      	ldr	r0, [r7, #20]
 8015b9c:	f7f9 f91a 	bl	800edd4 <pbuf_free>
          goto icmperr;
 8015ba0:	e096      	b.n	8015cd0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	685b      	ldr	r3, [r3, #4]
 8015ba6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015baa:	4618      	mov	r0, r3
 8015bac:	f001 fd5f 	bl	801766e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015bb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	6978      	ldr	r0, [r7, #20]
 8015bb6:	f7f9 f887 	bl	800ecc8 <pbuf_remove_header>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d009      	beq.n	8015bd4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015bc0:	4b49      	ldr	r3, [pc, #292]	; (8015ce8 <icmp_input+0x230>)
 8015bc2:	22b6      	movs	r2, #182	; 0xb6
 8015bc4:	4949      	ldr	r1, [pc, #292]	; (8015cec <icmp_input+0x234>)
 8015bc6:	484a      	ldr	r0, [pc, #296]	; (8015cf0 <icmp_input+0x238>)
 8015bc8:	f001 fdc2 	bl	8017750 <iprintf>
          pbuf_free(r);
 8015bcc:	6978      	ldr	r0, [r7, #20]
 8015bce:	f7f9 f901 	bl	800edd4 <pbuf_free>
          goto icmperr;
 8015bd2:	e07d      	b.n	8015cd0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015bd4:	6879      	ldr	r1, [r7, #4]
 8015bd6:	6978      	ldr	r0, [r7, #20]
 8015bd8:	f7f9 fa20 	bl	800f01c <pbuf_copy>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d003      	beq.n	8015bea <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015be2:	6978      	ldr	r0, [r7, #20]
 8015be4:	f7f9 f8f6 	bl	800edd4 <pbuf_free>
          goto icmperr;
 8015be8:	e072      	b.n	8015cd0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f7f9 f8f2 	bl	800edd4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015bf0:	697b      	ldr	r3, [r7, #20]
 8015bf2:	607b      	str	r3, [r7, #4]
 8015bf4:	e00f      	b.n	8015c16 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015bf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015bf8:	330e      	adds	r3, #14
 8015bfa:	4619      	mov	r1, r3
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	f7f9 f863 	bl	800ecc8 <pbuf_remove_header>
 8015c02:	4603      	mov	r3, r0
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d006      	beq.n	8015c16 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015c08:	4b37      	ldr	r3, [pc, #220]	; (8015ce8 <icmp_input+0x230>)
 8015c0a:	22c7      	movs	r2, #199	; 0xc7
 8015c0c:	4939      	ldr	r1, [pc, #228]	; (8015cf4 <icmp_input+0x23c>)
 8015c0e:	4838      	ldr	r0, [pc, #224]	; (8015cf0 <icmp_input+0x238>)
 8015c10:	f001 fd9e 	bl	8017750 <iprintf>
          goto icmperr;
 8015c14:	e05c      	b.n	8015cd0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015c1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c1e:	4619      	mov	r1, r3
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f7f9 f841 	bl	800eca8 <pbuf_add_header>
 8015c26:	4603      	mov	r3, r0
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d13c      	bne.n	8015ca6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	685b      	ldr	r3, [r3, #4]
 8015c30:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015c32:	69fb      	ldr	r3, [r7, #28]
 8015c34:	681a      	ldr	r2, [r3, #0]
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015c3a:	4b29      	ldr	r3, [pc, #164]	; (8015ce0 <icmp_input+0x228>)
 8015c3c:	691a      	ldr	r2, [r3, #16]
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	2200      	movs	r2, #0
 8015c46:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8015c48:	693b      	ldr	r3, [r7, #16]
 8015c4a:	885b      	ldrh	r3, [r3, #2]
 8015c4c:	b29b      	uxth	r3, r3
 8015c4e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015c52:	4293      	cmp	r3, r2
 8015c54:	d907      	bls.n	8015c66 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8015c56:	693b      	ldr	r3, [r7, #16]
 8015c58:	885b      	ldrh	r3, [r3, #2]
 8015c5a:	b29b      	uxth	r3, r3
 8015c5c:	3309      	adds	r3, #9
 8015c5e:	b29a      	uxth	r2, r3
 8015c60:	693b      	ldr	r3, [r7, #16]
 8015c62:	805a      	strh	r2, [r3, #2]
 8015c64:	e006      	b.n	8015c74 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8015c66:	693b      	ldr	r3, [r7, #16]
 8015c68:	885b      	ldrh	r3, [r3, #2]
 8015c6a:	b29b      	uxth	r3, r3
 8015c6c:	3308      	adds	r3, #8
 8015c6e:	b29a      	uxth	r2, r3
 8015c70:	693b      	ldr	r3, [r7, #16]
 8015c72:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	22ff      	movs	r2, #255	; 0xff
 8015c78:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	729a      	strb	r2, [r3, #10]
 8015c80:	2200      	movs	r2, #0
 8015c82:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015c84:	683b      	ldr	r3, [r7, #0]
 8015c86:	9302      	str	r3, [sp, #8]
 8015c88:	2301      	movs	r3, #1
 8015c8a:	9301      	str	r3, [sp, #4]
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	9300      	str	r3, [sp, #0]
 8015c90:	23ff      	movs	r3, #255	; 0xff
 8015c92:	2200      	movs	r2, #0
 8015c94:	69f9      	ldr	r1, [r7, #28]
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f000 fa80 	bl	801619c <ip4_output_if>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015ca0:	e001      	b.n	8015ca6 <icmp_input+0x1ee>
      break;
 8015ca2:	bf00      	nop
 8015ca4:	e000      	b.n	8015ca8 <icmp_input+0x1f0>
      break;
 8015ca6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015ca8:	6878      	ldr	r0, [r7, #4]
 8015caa:	f7f9 f893 	bl	800edd4 <pbuf_free>
  return;
 8015cae:	e013      	b.n	8015cd8 <icmp_input+0x220>
    goto lenerr;
 8015cb0:	bf00      	nop
 8015cb2:	e002      	b.n	8015cba <icmp_input+0x202>
    goto lenerr;
 8015cb4:	bf00      	nop
 8015cb6:	e000      	b.n	8015cba <icmp_input+0x202>
        goto lenerr;
 8015cb8:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f7f9 f88a 	bl	800edd4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015cc0:	e00a      	b.n	8015cd8 <icmp_input+0x220>
        goto icmperr;
 8015cc2:	bf00      	nop
 8015cc4:	e004      	b.n	8015cd0 <icmp_input+0x218>
        goto icmperr;
 8015cc6:	bf00      	nop
 8015cc8:	e002      	b.n	8015cd0 <icmp_input+0x218>
          goto icmperr;
 8015cca:	bf00      	nop
 8015ccc:	e000      	b.n	8015cd0 <icmp_input+0x218>
          goto icmperr;
 8015cce:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015cd0:	6878      	ldr	r0, [r7, #4]
 8015cd2:	f7f9 f87f 	bl	800edd4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015cd6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015cd8:	3728      	adds	r7, #40	; 0x28
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bd80      	pop	{r7, pc}
 8015cde:	bf00      	nop
 8015ce0:	24004794 	.word	0x24004794
 8015ce4:	240047a8 	.word	0x240047a8
 8015ce8:	0801ad84 	.word	0x0801ad84
 8015cec:	0801adbc 	.word	0x0801adbc
 8015cf0:	0801adf4 	.word	0x0801adf4
 8015cf4:	0801ae1c 	.word	0x0801ae1c

08015cf8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b082      	sub	sp, #8
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
 8015d00:	460b      	mov	r3, r1
 8015d02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015d04:	78fb      	ldrb	r3, [r7, #3]
 8015d06:	461a      	mov	r2, r3
 8015d08:	2103      	movs	r1, #3
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f000 f814 	bl	8015d38 <icmp_send_response>
}
 8015d10:	bf00      	nop
 8015d12:	3708      	adds	r7, #8
 8015d14:	46bd      	mov	sp, r7
 8015d16:	bd80      	pop	{r7, pc}

08015d18 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b082      	sub	sp, #8
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	460b      	mov	r3, r1
 8015d22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015d24:	78fb      	ldrb	r3, [r7, #3]
 8015d26:	461a      	mov	r2, r3
 8015d28:	210b      	movs	r1, #11
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f000 f804 	bl	8015d38 <icmp_send_response>
}
 8015d30:	bf00      	nop
 8015d32:	3708      	adds	r7, #8
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}

08015d38 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b08c      	sub	sp, #48	; 0x30
 8015d3c:	af04      	add	r7, sp, #16
 8015d3e:	6078      	str	r0, [r7, #4]
 8015d40:	460b      	mov	r3, r1
 8015d42:	70fb      	strb	r3, [r7, #3]
 8015d44:	4613      	mov	r3, r2
 8015d46:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015d48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015d4c:	2124      	movs	r1, #36	; 0x24
 8015d4e:	2022      	movs	r0, #34	; 0x22
 8015d50:	f7f8 fd5c 	bl	800e80c <pbuf_alloc>
 8015d54:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015d56:	69fb      	ldr	r3, [r7, #28]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d056      	beq.n	8015e0a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015d5c:	69fb      	ldr	r3, [r7, #28]
 8015d5e:	895b      	ldrh	r3, [r3, #10]
 8015d60:	2b23      	cmp	r3, #35	; 0x23
 8015d62:	d806      	bhi.n	8015d72 <icmp_send_response+0x3a>
 8015d64:	4b2b      	ldr	r3, [pc, #172]	; (8015e14 <icmp_send_response+0xdc>)
 8015d66:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015d6a:	492b      	ldr	r1, [pc, #172]	; (8015e18 <icmp_send_response+0xe0>)
 8015d6c:	482b      	ldr	r0, [pc, #172]	; (8015e1c <icmp_send_response+0xe4>)
 8015d6e:	f001 fcef 	bl	8017750 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	685b      	ldr	r3, [r3, #4]
 8015d76:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015d78:	69fb      	ldr	r3, [r7, #28]
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015d7e:	697b      	ldr	r3, [r7, #20]
 8015d80:	78fa      	ldrb	r2, [r7, #3]
 8015d82:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015d84:	697b      	ldr	r3, [r7, #20]
 8015d86:	78ba      	ldrb	r2, [r7, #2]
 8015d88:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015d8a:	697b      	ldr	r3, [r7, #20]
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	711a      	strb	r2, [r3, #4]
 8015d90:	2200      	movs	r2, #0
 8015d92:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015d94:	697b      	ldr	r3, [r7, #20]
 8015d96:	2200      	movs	r2, #0
 8015d98:	719a      	strb	r2, [r3, #6]
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015d9e:	69fb      	ldr	r3, [r7, #28]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	f103 0008 	add.w	r0, r3, #8
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	685b      	ldr	r3, [r3, #4]
 8015daa:	221c      	movs	r2, #28
 8015dac:	4619      	mov	r1, r3
 8015dae:	f001 fc5e 	bl	801766e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015db2:	69bb      	ldr	r3, [r7, #24]
 8015db4:	68db      	ldr	r3, [r3, #12]
 8015db6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015db8:	f107 030c 	add.w	r3, r7, #12
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	f000 f82f 	bl	8015e20 <ip4_route>
 8015dc2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d01b      	beq.n	8015e02 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015dca:	697b      	ldr	r3, [r7, #20]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	709a      	strb	r2, [r3, #2]
 8015dd0:	2200      	movs	r2, #0
 8015dd2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8015dd4:	69fb      	ldr	r3, [r7, #28]
 8015dd6:	895b      	ldrh	r3, [r3, #10]
 8015dd8:	4619      	mov	r1, r3
 8015dda:	6978      	ldr	r0, [r7, #20]
 8015ddc:	f7f7 fbdb 	bl	800d596 <inet_chksum>
 8015de0:	4603      	mov	r3, r0
 8015de2:	461a      	mov	r2, r3
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015de8:	f107 020c 	add.w	r2, r7, #12
 8015dec:	693b      	ldr	r3, [r7, #16]
 8015dee:	9302      	str	r3, [sp, #8]
 8015df0:	2301      	movs	r3, #1
 8015df2:	9301      	str	r3, [sp, #4]
 8015df4:	2300      	movs	r3, #0
 8015df6:	9300      	str	r3, [sp, #0]
 8015df8:	23ff      	movs	r3, #255	; 0xff
 8015dfa:	2100      	movs	r1, #0
 8015dfc:	69f8      	ldr	r0, [r7, #28]
 8015dfe:	f000 f9cd 	bl	801619c <ip4_output_if>
  }
  pbuf_free(q);
 8015e02:	69f8      	ldr	r0, [r7, #28]
 8015e04:	f7f8 ffe6 	bl	800edd4 <pbuf_free>
 8015e08:	e000      	b.n	8015e0c <icmp_send_response+0xd4>
    return;
 8015e0a:	bf00      	nop
}
 8015e0c:	3720      	adds	r7, #32
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}
 8015e12:	bf00      	nop
 8015e14:	0801ad84 	.word	0x0801ad84
 8015e18:	0801ae50 	.word	0x0801ae50
 8015e1c:	0801adf4 	.word	0x0801adf4

08015e20 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015e20:	b480      	push	{r7}
 8015e22:	b085      	sub	sp, #20
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015e28:	4b33      	ldr	r3, [pc, #204]	; (8015ef8 <ip4_route+0xd8>)
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	60fb      	str	r3, [r7, #12]
 8015e2e:	e036      	b.n	8015e9e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e36:	f003 0301 	and.w	r3, r3, #1
 8015e3a:	b2db      	uxtb	r3, r3
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d02b      	beq.n	8015e98 <ip4_route+0x78>
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e46:	089b      	lsrs	r3, r3, #2
 8015e48:	f003 0301 	and.w	r3, r3, #1
 8015e4c:	b2db      	uxtb	r3, r3
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d022      	beq.n	8015e98 <ip4_route+0x78>
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	3304      	adds	r3, #4
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d01d      	beq.n	8015e98 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	681a      	ldr	r2, [r3, #0]
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	3304      	adds	r3, #4
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	405a      	eors	r2, r3
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	3308      	adds	r3, #8
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	4013      	ands	r3, r2
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d101      	bne.n	8015e78 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	e038      	b.n	8015eea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e7e:	f003 0302 	and.w	r3, r3, #2
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d108      	bne.n	8015e98 <ip4_route+0x78>
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681a      	ldr	r2, [r3, #0]
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	330c      	adds	r3, #12
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	429a      	cmp	r2, r3
 8015e92:	d101      	bne.n	8015e98 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	e028      	b.n	8015eea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	60fb      	str	r3, [r7, #12]
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d1c5      	bne.n	8015e30 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015ea4:	4b15      	ldr	r3, [pc, #84]	; (8015efc <ip4_route+0xdc>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d01a      	beq.n	8015ee2 <ip4_route+0xc2>
 8015eac:	4b13      	ldr	r3, [pc, #76]	; (8015efc <ip4_route+0xdc>)
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015eb4:	f003 0301 	and.w	r3, r3, #1
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d012      	beq.n	8015ee2 <ip4_route+0xc2>
 8015ebc:	4b0f      	ldr	r3, [pc, #60]	; (8015efc <ip4_route+0xdc>)
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ec4:	f003 0304 	and.w	r3, r3, #4
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d00a      	beq.n	8015ee2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015ecc:	4b0b      	ldr	r3, [pc, #44]	; (8015efc <ip4_route+0xdc>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	3304      	adds	r3, #4
 8015ed2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d004      	beq.n	8015ee2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	b2db      	uxtb	r3, r3
 8015ede:	2b7f      	cmp	r3, #127	; 0x7f
 8015ee0:	d101      	bne.n	8015ee6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	e001      	b.n	8015eea <ip4_route+0xca>
  }

  return netif_default;
 8015ee6:	4b05      	ldr	r3, [pc, #20]	; (8015efc <ip4_route+0xdc>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3714      	adds	r7, #20
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef4:	4770      	bx	lr
 8015ef6:	bf00      	nop
 8015ef8:	24007844 	.word	0x24007844
 8015efc:	24007848 	.word	0x24007848

08015f00 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b082      	sub	sp, #8
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f0e:	f003 0301 	and.w	r3, r3, #1
 8015f12:	b2db      	uxtb	r3, r3
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d016      	beq.n	8015f46 <ip4_input_accept+0x46>
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	3304      	adds	r3, #4
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d011      	beq.n	8015f46 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015f22:	4b0b      	ldr	r3, [pc, #44]	; (8015f50 <ip4_input_accept+0x50>)
 8015f24:	695a      	ldr	r2, [r3, #20]
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	3304      	adds	r3, #4
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	429a      	cmp	r2, r3
 8015f2e:	d008      	beq.n	8015f42 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015f30:	4b07      	ldr	r3, [pc, #28]	; (8015f50 <ip4_input_accept+0x50>)
 8015f32:	695b      	ldr	r3, [r3, #20]
 8015f34:	6879      	ldr	r1, [r7, #4]
 8015f36:	4618      	mov	r0, r3
 8015f38:	f000 fa08 	bl	801634c <ip4_addr_isbroadcast_u32>
 8015f3c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d001      	beq.n	8015f46 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015f42:	2301      	movs	r3, #1
 8015f44:	e000      	b.n	8015f48 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015f46:	2300      	movs	r3, #0
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3708      	adds	r7, #8
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}
 8015f50:	24004794 	.word	0x24004794

08015f54 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b086      	sub	sp, #24
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	685b      	ldr	r3, [r3, #4]
 8015f62:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015f64:	697b      	ldr	r3, [r7, #20]
 8015f66:	781b      	ldrb	r3, [r3, #0]
 8015f68:	091b      	lsrs	r3, r3, #4
 8015f6a:	b2db      	uxtb	r3, r3
 8015f6c:	2b04      	cmp	r3, #4
 8015f6e:	d004      	beq.n	8015f7a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f7f8 ff2f 	bl	800edd4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015f76:	2300      	movs	r3, #0
 8015f78:	e107      	b.n	801618a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015f7a:	697b      	ldr	r3, [r7, #20]
 8015f7c:	781b      	ldrb	r3, [r3, #0]
 8015f7e:	f003 030f 	and.w	r3, r3, #15
 8015f82:	b2db      	uxtb	r3, r3
 8015f84:	009b      	lsls	r3, r3, #2
 8015f86:	b2db      	uxtb	r3, r3
 8015f88:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015f8a:	697b      	ldr	r3, [r7, #20]
 8015f8c:	885b      	ldrh	r3, [r3, #2]
 8015f8e:	b29b      	uxth	r3, r3
 8015f90:	4618      	mov	r0, r3
 8015f92:	f7f7 fa75 	bl	800d480 <lwip_htons>
 8015f96:	4603      	mov	r3, r0
 8015f98:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	891b      	ldrh	r3, [r3, #8]
 8015f9e:	89ba      	ldrh	r2, [r7, #12]
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	d204      	bcs.n	8015fae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015fa4:	89bb      	ldrh	r3, [r7, #12]
 8015fa6:	4619      	mov	r1, r3
 8015fa8:	6878      	ldr	r0, [r7, #4]
 8015faa:	f7f8 fd8d 	bl	800eac8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	895b      	ldrh	r3, [r3, #10]
 8015fb2:	89fa      	ldrh	r2, [r7, #14]
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	d807      	bhi.n	8015fc8 <ip4_input+0x74>
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	891b      	ldrh	r3, [r3, #8]
 8015fbc:	89ba      	ldrh	r2, [r7, #12]
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	d802      	bhi.n	8015fc8 <ip4_input+0x74>
 8015fc2:	89fb      	ldrh	r3, [r7, #14]
 8015fc4:	2b13      	cmp	r3, #19
 8015fc6:	d804      	bhi.n	8015fd2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f7f8 ff03 	bl	800edd4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	e0db      	b.n	801618a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015fd2:	697b      	ldr	r3, [r7, #20]
 8015fd4:	691b      	ldr	r3, [r3, #16]
 8015fd6:	4a6f      	ldr	r2, [pc, #444]	; (8016194 <ip4_input+0x240>)
 8015fd8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	68db      	ldr	r3, [r3, #12]
 8015fde:	4a6d      	ldr	r2, [pc, #436]	; (8016194 <ip4_input+0x240>)
 8015fe0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015fe2:	4b6c      	ldr	r3, [pc, #432]	; (8016194 <ip4_input+0x240>)
 8015fe4:	695b      	ldr	r3, [r3, #20]
 8015fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015fea:	2be0      	cmp	r3, #224	; 0xe0
 8015fec:	d112      	bne.n	8016014 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ff4:	f003 0301 	and.w	r3, r3, #1
 8015ff8:	b2db      	uxtb	r3, r3
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d007      	beq.n	801600e <ip4_input+0xba>
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	3304      	adds	r3, #4
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d002      	beq.n	801600e <ip4_input+0xba>
      netif = inp;
 8016008:	683b      	ldr	r3, [r7, #0]
 801600a:	613b      	str	r3, [r7, #16]
 801600c:	e02a      	b.n	8016064 <ip4_input+0x110>
    } else {
      netif = NULL;
 801600e:	2300      	movs	r3, #0
 8016010:	613b      	str	r3, [r7, #16]
 8016012:	e027      	b.n	8016064 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016014:	6838      	ldr	r0, [r7, #0]
 8016016:	f7ff ff73 	bl	8015f00 <ip4_input_accept>
 801601a:	4603      	mov	r3, r0
 801601c:	2b00      	cmp	r3, #0
 801601e:	d002      	beq.n	8016026 <ip4_input+0xd2>
      netif = inp;
 8016020:	683b      	ldr	r3, [r7, #0]
 8016022:	613b      	str	r3, [r7, #16]
 8016024:	e01e      	b.n	8016064 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016026:	2300      	movs	r3, #0
 8016028:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801602a:	4b5a      	ldr	r3, [pc, #360]	; (8016194 <ip4_input+0x240>)
 801602c:	695b      	ldr	r3, [r3, #20]
 801602e:	b2db      	uxtb	r3, r3
 8016030:	2b7f      	cmp	r3, #127	; 0x7f
 8016032:	d017      	beq.n	8016064 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016034:	4b58      	ldr	r3, [pc, #352]	; (8016198 <ip4_input+0x244>)
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	613b      	str	r3, [r7, #16]
 801603a:	e00e      	b.n	801605a <ip4_input+0x106>
          if (netif == inp) {
 801603c:	693a      	ldr	r2, [r7, #16]
 801603e:	683b      	ldr	r3, [r7, #0]
 8016040:	429a      	cmp	r2, r3
 8016042:	d006      	beq.n	8016052 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016044:	6938      	ldr	r0, [r7, #16]
 8016046:	f7ff ff5b 	bl	8015f00 <ip4_input_accept>
 801604a:	4603      	mov	r3, r0
 801604c:	2b00      	cmp	r3, #0
 801604e:	d108      	bne.n	8016062 <ip4_input+0x10e>
 8016050:	e000      	b.n	8016054 <ip4_input+0x100>
            continue;
 8016052:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	613b      	str	r3, [r7, #16]
 801605a:	693b      	ldr	r3, [r7, #16]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d1ed      	bne.n	801603c <ip4_input+0xe8>
 8016060:	e000      	b.n	8016064 <ip4_input+0x110>
            break;
 8016062:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016064:	4b4b      	ldr	r3, [pc, #300]	; (8016194 <ip4_input+0x240>)
 8016066:	691b      	ldr	r3, [r3, #16]
 8016068:	6839      	ldr	r1, [r7, #0]
 801606a:	4618      	mov	r0, r3
 801606c:	f000 f96e 	bl	801634c <ip4_addr_isbroadcast_u32>
 8016070:	4603      	mov	r3, r0
 8016072:	2b00      	cmp	r3, #0
 8016074:	d105      	bne.n	8016082 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016076:	4b47      	ldr	r3, [pc, #284]	; (8016194 <ip4_input+0x240>)
 8016078:	691b      	ldr	r3, [r3, #16]
 801607a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801607e:	2be0      	cmp	r3, #224	; 0xe0
 8016080:	d104      	bne.n	801608c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	f7f8 fea6 	bl	800edd4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016088:	2300      	movs	r3, #0
 801608a:	e07e      	b.n	801618a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801608c:	693b      	ldr	r3, [r7, #16]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d104      	bne.n	801609c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f7f8 fe9e 	bl	800edd4 <pbuf_free>
    return ERR_OK;
 8016098:	2300      	movs	r3, #0
 801609a:	e076      	b.n	801618a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801609c:	697b      	ldr	r3, [r7, #20]
 801609e:	88db      	ldrh	r3, [r3, #6]
 80160a0:	b29b      	uxth	r3, r3
 80160a2:	461a      	mov	r2, r3
 80160a4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80160a8:	4013      	ands	r3, r2
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d00b      	beq.n	80160c6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80160ae:	6878      	ldr	r0, [r7, #4]
 80160b0:	f000 fc92 	bl	80169d8 <ip4_reass>
 80160b4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d101      	bne.n	80160c0 <ip4_input+0x16c>
      return ERR_OK;
 80160bc:	2300      	movs	r3, #0
 80160be:	e064      	b.n	801618a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	685b      	ldr	r3, [r3, #4]
 80160c4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80160c6:	4a33      	ldr	r2, [pc, #204]	; (8016194 <ip4_input+0x240>)
 80160c8:	693b      	ldr	r3, [r7, #16]
 80160ca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80160cc:	4a31      	ldr	r2, [pc, #196]	; (8016194 <ip4_input+0x240>)
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80160d2:	4a30      	ldr	r2, [pc, #192]	; (8016194 <ip4_input+0x240>)
 80160d4:	697b      	ldr	r3, [r7, #20]
 80160d6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80160d8:	697b      	ldr	r3, [r7, #20]
 80160da:	781b      	ldrb	r3, [r3, #0]
 80160dc:	f003 030f 	and.w	r3, r3, #15
 80160e0:	b2db      	uxtb	r3, r3
 80160e2:	009b      	lsls	r3, r3, #2
 80160e4:	b2db      	uxtb	r3, r3
 80160e6:	b29a      	uxth	r2, r3
 80160e8:	4b2a      	ldr	r3, [pc, #168]	; (8016194 <ip4_input+0x240>)
 80160ea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80160ec:	89fb      	ldrh	r3, [r7, #14]
 80160ee:	4619      	mov	r1, r3
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f7f8 fde9 	bl	800ecc8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80160f6:	697b      	ldr	r3, [r7, #20]
 80160f8:	7a5b      	ldrb	r3, [r3, #9]
 80160fa:	2b11      	cmp	r3, #17
 80160fc:	d006      	beq.n	801610c <ip4_input+0x1b8>
 80160fe:	2b11      	cmp	r3, #17
 8016100:	dc13      	bgt.n	801612a <ip4_input+0x1d6>
 8016102:	2b01      	cmp	r3, #1
 8016104:	d00c      	beq.n	8016120 <ip4_input+0x1cc>
 8016106:	2b06      	cmp	r3, #6
 8016108:	d005      	beq.n	8016116 <ip4_input+0x1c2>
 801610a:	e00e      	b.n	801612a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801610c:	6839      	ldr	r1, [r7, #0]
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	f7fe fc42 	bl	8014998 <udp_input>
        break;
 8016114:	e026      	b.n	8016164 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016116:	6839      	ldr	r1, [r7, #0]
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	f7fa fc8f 	bl	8010a3c <tcp_input>
        break;
 801611e:	e021      	b.n	8016164 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016120:	6839      	ldr	r1, [r7, #0]
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f7ff fcc8 	bl	8015ab8 <icmp_input>
        break;
 8016128:	e01c      	b.n	8016164 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801612a:	4b1a      	ldr	r3, [pc, #104]	; (8016194 <ip4_input+0x240>)
 801612c:	695b      	ldr	r3, [r3, #20]
 801612e:	6939      	ldr	r1, [r7, #16]
 8016130:	4618      	mov	r0, r3
 8016132:	f000 f90b 	bl	801634c <ip4_addr_isbroadcast_u32>
 8016136:	4603      	mov	r3, r0
 8016138:	2b00      	cmp	r3, #0
 801613a:	d10f      	bne.n	801615c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801613c:	4b15      	ldr	r3, [pc, #84]	; (8016194 <ip4_input+0x240>)
 801613e:	695b      	ldr	r3, [r3, #20]
 8016140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016144:	2be0      	cmp	r3, #224	; 0xe0
 8016146:	d009      	beq.n	801615c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016148:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801614c:	4619      	mov	r1, r3
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f7f8 fe2d 	bl	800edae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016154:	2102      	movs	r1, #2
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	f7ff fdce 	bl	8015cf8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f7f8 fe39 	bl	800edd4 <pbuf_free>
        break;
 8016162:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016164:	4b0b      	ldr	r3, [pc, #44]	; (8016194 <ip4_input+0x240>)
 8016166:	2200      	movs	r2, #0
 8016168:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801616a:	4b0a      	ldr	r3, [pc, #40]	; (8016194 <ip4_input+0x240>)
 801616c:	2200      	movs	r2, #0
 801616e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016170:	4b08      	ldr	r3, [pc, #32]	; (8016194 <ip4_input+0x240>)
 8016172:	2200      	movs	r2, #0
 8016174:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016176:	4b07      	ldr	r3, [pc, #28]	; (8016194 <ip4_input+0x240>)
 8016178:	2200      	movs	r2, #0
 801617a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801617c:	4b05      	ldr	r3, [pc, #20]	; (8016194 <ip4_input+0x240>)
 801617e:	2200      	movs	r2, #0
 8016180:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016182:	4b04      	ldr	r3, [pc, #16]	; (8016194 <ip4_input+0x240>)
 8016184:	2200      	movs	r2, #0
 8016186:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016188:	2300      	movs	r3, #0
}
 801618a:	4618      	mov	r0, r3
 801618c:	3718      	adds	r7, #24
 801618e:	46bd      	mov	sp, r7
 8016190:	bd80      	pop	{r7, pc}
 8016192:	bf00      	nop
 8016194:	24004794 	.word	0x24004794
 8016198:	24007844 	.word	0x24007844

0801619c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b08a      	sub	sp, #40	; 0x28
 80161a0:	af04      	add	r7, sp, #16
 80161a2:	60f8      	str	r0, [r7, #12]
 80161a4:	60b9      	str	r1, [r7, #8]
 80161a6:	607a      	str	r2, [r7, #4]
 80161a8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80161aa:	68bb      	ldr	r3, [r7, #8]
 80161ac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d009      	beq.n	80161c8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80161b4:	68bb      	ldr	r3, [r7, #8]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d003      	beq.n	80161c2 <ip4_output_if+0x26>
 80161ba:	68bb      	ldr	r3, [r7, #8]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d102      	bne.n	80161c8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80161c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c4:	3304      	adds	r3, #4
 80161c6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80161c8:	78fa      	ldrb	r2, [r7, #3]
 80161ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161cc:	9302      	str	r3, [sp, #8]
 80161ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80161d2:	9301      	str	r3, [sp, #4]
 80161d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80161d8:	9300      	str	r3, [sp, #0]
 80161da:	4613      	mov	r3, r2
 80161dc:	687a      	ldr	r2, [r7, #4]
 80161de:	6979      	ldr	r1, [r7, #20]
 80161e0:	68f8      	ldr	r0, [r7, #12]
 80161e2:	f000 f805 	bl	80161f0 <ip4_output_if_src>
 80161e6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80161e8:	4618      	mov	r0, r3
 80161ea:	3718      	adds	r7, #24
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bd80      	pop	{r7, pc}

080161f0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b088      	sub	sp, #32
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	60f8      	str	r0, [r7, #12]
 80161f8:	60b9      	str	r1, [r7, #8]
 80161fa:	607a      	str	r2, [r7, #4]
 80161fc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	7b9b      	ldrb	r3, [r3, #14]
 8016202:	2b01      	cmp	r3, #1
 8016204:	d006      	beq.n	8016214 <ip4_output_if_src+0x24>
 8016206:	4b4b      	ldr	r3, [pc, #300]	; (8016334 <ip4_output_if_src+0x144>)
 8016208:	f44f 7255 	mov.w	r2, #852	; 0x354
 801620c:	494a      	ldr	r1, [pc, #296]	; (8016338 <ip4_output_if_src+0x148>)
 801620e:	484b      	ldr	r0, [pc, #300]	; (801633c <ip4_output_if_src+0x14c>)
 8016210:	f001 fa9e 	bl	8017750 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d060      	beq.n	80162dc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801621a:	2314      	movs	r3, #20
 801621c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801621e:	2114      	movs	r1, #20
 8016220:	68f8      	ldr	r0, [r7, #12]
 8016222:	f7f8 fd41 	bl	800eca8 <pbuf_add_header>
 8016226:	4603      	mov	r3, r0
 8016228:	2b00      	cmp	r3, #0
 801622a:	d002      	beq.n	8016232 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801622c:	f06f 0301 	mvn.w	r3, #1
 8016230:	e07c      	b.n	801632c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	685b      	ldr	r3, [r3, #4]
 8016236:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	895b      	ldrh	r3, [r3, #10]
 801623c:	2b13      	cmp	r3, #19
 801623e:	d806      	bhi.n	801624e <ip4_output_if_src+0x5e>
 8016240:	4b3c      	ldr	r3, [pc, #240]	; (8016334 <ip4_output_if_src+0x144>)
 8016242:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016246:	493e      	ldr	r1, [pc, #248]	; (8016340 <ip4_output_if_src+0x150>)
 8016248:	483c      	ldr	r0, [pc, #240]	; (801633c <ip4_output_if_src+0x14c>)
 801624a:	f001 fa81 	bl	8017750 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801624e:	69fb      	ldr	r3, [r7, #28]
 8016250:	78fa      	ldrb	r2, [r7, #3]
 8016252:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016254:	69fb      	ldr	r3, [r7, #28]
 8016256:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801625a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	681a      	ldr	r2, [r3, #0]
 8016260:	69fb      	ldr	r3, [r7, #28]
 8016262:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016264:	8b7b      	ldrh	r3, [r7, #26]
 8016266:	089b      	lsrs	r3, r3, #2
 8016268:	b29b      	uxth	r3, r3
 801626a:	b2db      	uxtb	r3, r3
 801626c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016270:	b2da      	uxtb	r2, r3
 8016272:	69fb      	ldr	r3, [r7, #28]
 8016274:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016276:	69fb      	ldr	r3, [r7, #28]
 8016278:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801627c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	891b      	ldrh	r3, [r3, #8]
 8016282:	4618      	mov	r0, r3
 8016284:	f7f7 f8fc 	bl	800d480 <lwip_htons>
 8016288:	4603      	mov	r3, r0
 801628a:	461a      	mov	r2, r3
 801628c:	69fb      	ldr	r3, [r7, #28]
 801628e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016290:	69fb      	ldr	r3, [r7, #28]
 8016292:	2200      	movs	r2, #0
 8016294:	719a      	strb	r2, [r3, #6]
 8016296:	2200      	movs	r2, #0
 8016298:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801629a:	4b2a      	ldr	r3, [pc, #168]	; (8016344 <ip4_output_if_src+0x154>)
 801629c:	881b      	ldrh	r3, [r3, #0]
 801629e:	4618      	mov	r0, r3
 80162a0:	f7f7 f8ee 	bl	800d480 <lwip_htons>
 80162a4:	4603      	mov	r3, r0
 80162a6:	461a      	mov	r2, r3
 80162a8:	69fb      	ldr	r3, [r7, #28]
 80162aa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80162ac:	4b25      	ldr	r3, [pc, #148]	; (8016344 <ip4_output_if_src+0x154>)
 80162ae:	881b      	ldrh	r3, [r3, #0]
 80162b0:	3301      	adds	r3, #1
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	4b23      	ldr	r3, [pc, #140]	; (8016344 <ip4_output_if_src+0x154>)
 80162b6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d104      	bne.n	80162c8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80162be:	4b22      	ldr	r3, [pc, #136]	; (8016348 <ip4_output_if_src+0x158>)
 80162c0:	681a      	ldr	r2, [r3, #0]
 80162c2:	69fb      	ldr	r3, [r7, #28]
 80162c4:	60da      	str	r2, [r3, #12]
 80162c6:	e003      	b.n	80162d0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	681a      	ldr	r2, [r3, #0]
 80162cc:	69fb      	ldr	r3, [r7, #28]
 80162ce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80162d0:	69fb      	ldr	r3, [r7, #28]
 80162d2:	2200      	movs	r2, #0
 80162d4:	729a      	strb	r2, [r3, #10]
 80162d6:	2200      	movs	r2, #0
 80162d8:	72da      	strb	r2, [r3, #11]
 80162da:	e00f      	b.n	80162fc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	895b      	ldrh	r3, [r3, #10]
 80162e0:	2b13      	cmp	r3, #19
 80162e2:	d802      	bhi.n	80162ea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80162e4:	f06f 0301 	mvn.w	r3, #1
 80162e8:	e020      	b.n	801632c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	685b      	ldr	r3, [r3, #4]
 80162ee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80162f0:	69fb      	ldr	r3, [r7, #28]
 80162f2:	691b      	ldr	r3, [r3, #16]
 80162f4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80162f6:	f107 0314 	add.w	r3, r7, #20
 80162fa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80162fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016300:	2b00      	cmp	r3, #0
 8016302:	d00c      	beq.n	801631e <ip4_output_if_src+0x12e>
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	891a      	ldrh	r2, [r3, #8]
 8016308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801630a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801630c:	429a      	cmp	r2, r3
 801630e:	d906      	bls.n	801631e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016310:	687a      	ldr	r2, [r7, #4]
 8016312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016314:	68f8      	ldr	r0, [r7, #12]
 8016316:	f000 fd4d 	bl	8016db4 <ip4_frag>
 801631a:	4603      	mov	r3, r0
 801631c:	e006      	b.n	801632c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016320:	695b      	ldr	r3, [r3, #20]
 8016322:	687a      	ldr	r2, [r7, #4]
 8016324:	68f9      	ldr	r1, [r7, #12]
 8016326:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016328:	4798      	blx	r3
 801632a:	4603      	mov	r3, r0
}
 801632c:	4618      	mov	r0, r3
 801632e:	3720      	adds	r7, #32
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}
 8016334:	0801ae7c 	.word	0x0801ae7c
 8016338:	0801aeb0 	.word	0x0801aeb0
 801633c:	0801aebc 	.word	0x0801aebc
 8016340:	0801aee4 	.word	0x0801aee4
 8016344:	2400425e 	.word	0x2400425e
 8016348:	0801c870 	.word	0x0801c870

0801634c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801634c:	b480      	push	{r7}
 801634e:	b085      	sub	sp, #20
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
 8016354:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016360:	d002      	beq.n	8016368 <ip4_addr_isbroadcast_u32+0x1c>
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d101      	bne.n	801636c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016368:	2301      	movs	r3, #1
 801636a:	e02a      	b.n	80163c2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801636c:	683b      	ldr	r3, [r7, #0]
 801636e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016372:	f003 0302 	and.w	r3, r3, #2
 8016376:	2b00      	cmp	r3, #0
 8016378:	d101      	bne.n	801637e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801637a:	2300      	movs	r3, #0
 801637c:	e021      	b.n	80163c2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801637e:	683b      	ldr	r3, [r7, #0]
 8016380:	3304      	adds	r3, #4
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	687a      	ldr	r2, [r7, #4]
 8016386:	429a      	cmp	r2, r3
 8016388:	d101      	bne.n	801638e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801638a:	2300      	movs	r3, #0
 801638c:	e019      	b.n	80163c2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801638e:	68fa      	ldr	r2, [r7, #12]
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	3304      	adds	r3, #4
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	405a      	eors	r2, r3
 8016398:	683b      	ldr	r3, [r7, #0]
 801639a:	3308      	adds	r3, #8
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	4013      	ands	r3, r2
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d10d      	bne.n	80163c0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	3308      	adds	r3, #8
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	43da      	mvns	r2, r3
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	3308      	adds	r3, #8
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80163b8:	429a      	cmp	r2, r3
 80163ba:	d101      	bne.n	80163c0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80163bc:	2301      	movs	r3, #1
 80163be:	e000      	b.n	80163c2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80163c0:	2300      	movs	r3, #0
  }
}
 80163c2:	4618      	mov	r0, r3
 80163c4:	3714      	adds	r7, #20
 80163c6:	46bd      	mov	sp, r7
 80163c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163cc:	4770      	bx	lr
	...

080163d0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b084      	sub	sp, #16
 80163d4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80163d6:	2300      	movs	r3, #0
 80163d8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80163da:	4b12      	ldr	r3, [pc, #72]	; (8016424 <ip_reass_tmr+0x54>)
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80163e0:	e018      	b.n	8016414 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	7fdb      	ldrb	r3, [r3, #31]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d00b      	beq.n	8016402 <ip_reass_tmr+0x32>
      r->timer--;
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	7fdb      	ldrb	r3, [r3, #31]
 80163ee:	3b01      	subs	r3, #1
 80163f0:	b2da      	uxtb	r2, r3
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	60fb      	str	r3, [r7, #12]
 8016400:	e008      	b.n	8016414 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801640c:	68b9      	ldr	r1, [r7, #8]
 801640e:	6878      	ldr	r0, [r7, #4]
 8016410:	f000 f80a 	bl	8016428 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d1e3      	bne.n	80163e2 <ip_reass_tmr+0x12>
    }
  }
}
 801641a:	bf00      	nop
 801641c:	bf00      	nop
 801641e:	3710      	adds	r7, #16
 8016420:	46bd      	mov	sp, r7
 8016422:	bd80      	pop	{r7, pc}
 8016424:	24004260 	.word	0x24004260

08016428 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016428:	b580      	push	{r7, lr}
 801642a:	b088      	sub	sp, #32
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
 8016430:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016432:	2300      	movs	r3, #0
 8016434:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016436:	683a      	ldr	r2, [r7, #0]
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	429a      	cmp	r2, r3
 801643c:	d105      	bne.n	801644a <ip_reass_free_complete_datagram+0x22>
 801643e:	4b45      	ldr	r3, [pc, #276]	; (8016554 <ip_reass_free_complete_datagram+0x12c>)
 8016440:	22ab      	movs	r2, #171	; 0xab
 8016442:	4945      	ldr	r1, [pc, #276]	; (8016558 <ip_reass_free_complete_datagram+0x130>)
 8016444:	4845      	ldr	r0, [pc, #276]	; (801655c <ip_reass_free_complete_datagram+0x134>)
 8016446:	f001 f983 	bl	8017750 <iprintf>
  if (prev != NULL) {
 801644a:	683b      	ldr	r3, [r7, #0]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d00a      	beq.n	8016466 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	687a      	ldr	r2, [r7, #4]
 8016456:	429a      	cmp	r2, r3
 8016458:	d005      	beq.n	8016466 <ip_reass_free_complete_datagram+0x3e>
 801645a:	4b3e      	ldr	r3, [pc, #248]	; (8016554 <ip_reass_free_complete_datagram+0x12c>)
 801645c:	22ad      	movs	r2, #173	; 0xad
 801645e:	4940      	ldr	r1, [pc, #256]	; (8016560 <ip_reass_free_complete_datagram+0x138>)
 8016460:	483e      	ldr	r0, [pc, #248]	; (801655c <ip_reass_free_complete_datagram+0x134>)
 8016462:	f001 f975 	bl	8017750 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	685b      	ldr	r3, [r3, #4]
 801646a:	685b      	ldr	r3, [r3, #4]
 801646c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801646e:	697b      	ldr	r3, [r7, #20]
 8016470:	889b      	ldrh	r3, [r3, #4]
 8016472:	b29b      	uxth	r3, r3
 8016474:	2b00      	cmp	r3, #0
 8016476:	d12a      	bne.n	80164ce <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801647e:	697b      	ldr	r3, [r7, #20]
 8016480:	681a      	ldr	r2, [r3, #0]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016486:	69bb      	ldr	r3, [r7, #24]
 8016488:	6858      	ldr	r0, [r3, #4]
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	3308      	adds	r3, #8
 801648e:	2214      	movs	r2, #20
 8016490:	4619      	mov	r1, r3
 8016492:	f001 f8ec 	bl	801766e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016496:	2101      	movs	r1, #1
 8016498:	69b8      	ldr	r0, [r7, #24]
 801649a:	f7ff fc3d 	bl	8015d18 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801649e:	69b8      	ldr	r0, [r7, #24]
 80164a0:	f7f8 fd26 	bl	800eef0 <pbuf_clen>
 80164a4:	4603      	mov	r3, r0
 80164a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80164a8:	8bfa      	ldrh	r2, [r7, #30]
 80164aa:	8a7b      	ldrh	r3, [r7, #18]
 80164ac:	4413      	add	r3, r2
 80164ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80164b2:	db05      	blt.n	80164c0 <ip_reass_free_complete_datagram+0x98>
 80164b4:	4b27      	ldr	r3, [pc, #156]	; (8016554 <ip_reass_free_complete_datagram+0x12c>)
 80164b6:	22bc      	movs	r2, #188	; 0xbc
 80164b8:	492a      	ldr	r1, [pc, #168]	; (8016564 <ip_reass_free_complete_datagram+0x13c>)
 80164ba:	4828      	ldr	r0, [pc, #160]	; (801655c <ip_reass_free_complete_datagram+0x134>)
 80164bc:	f001 f948 	bl	8017750 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80164c0:	8bfa      	ldrh	r2, [r7, #30]
 80164c2:	8a7b      	ldrh	r3, [r7, #18]
 80164c4:	4413      	add	r3, r2
 80164c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80164c8:	69b8      	ldr	r0, [r7, #24]
 80164ca:	f7f8 fc83 	bl	800edd4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80164d4:	e01f      	b.n	8016516 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80164d6:	69bb      	ldr	r3, [r7, #24]
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	617b      	str	r3, [r7, #20]
    pcur = p;
 80164dc:	69bb      	ldr	r3, [r7, #24]
 80164de:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80164e0:	697b      	ldr	r3, [r7, #20]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80164e6:	68f8      	ldr	r0, [r7, #12]
 80164e8:	f7f8 fd02 	bl	800eef0 <pbuf_clen>
 80164ec:	4603      	mov	r3, r0
 80164ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80164f0:	8bfa      	ldrh	r2, [r7, #30]
 80164f2:	8a7b      	ldrh	r3, [r7, #18]
 80164f4:	4413      	add	r3, r2
 80164f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80164fa:	db05      	blt.n	8016508 <ip_reass_free_complete_datagram+0xe0>
 80164fc:	4b15      	ldr	r3, [pc, #84]	; (8016554 <ip_reass_free_complete_datagram+0x12c>)
 80164fe:	22cc      	movs	r2, #204	; 0xcc
 8016500:	4918      	ldr	r1, [pc, #96]	; (8016564 <ip_reass_free_complete_datagram+0x13c>)
 8016502:	4816      	ldr	r0, [pc, #88]	; (801655c <ip_reass_free_complete_datagram+0x134>)
 8016504:	f001 f924 	bl	8017750 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016508:	8bfa      	ldrh	r2, [r7, #30]
 801650a:	8a7b      	ldrh	r3, [r7, #18]
 801650c:	4413      	add	r3, r2
 801650e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016510:	68f8      	ldr	r0, [r7, #12]
 8016512:	f7f8 fc5f 	bl	800edd4 <pbuf_free>
  while (p != NULL) {
 8016516:	69bb      	ldr	r3, [r7, #24]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d1dc      	bne.n	80164d6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801651c:	6839      	ldr	r1, [r7, #0]
 801651e:	6878      	ldr	r0, [r7, #4]
 8016520:	f000 f8c2 	bl	80166a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016524:	4b10      	ldr	r3, [pc, #64]	; (8016568 <ip_reass_free_complete_datagram+0x140>)
 8016526:	881b      	ldrh	r3, [r3, #0]
 8016528:	8bfa      	ldrh	r2, [r7, #30]
 801652a:	429a      	cmp	r2, r3
 801652c:	d905      	bls.n	801653a <ip_reass_free_complete_datagram+0x112>
 801652e:	4b09      	ldr	r3, [pc, #36]	; (8016554 <ip_reass_free_complete_datagram+0x12c>)
 8016530:	22d2      	movs	r2, #210	; 0xd2
 8016532:	490e      	ldr	r1, [pc, #56]	; (801656c <ip_reass_free_complete_datagram+0x144>)
 8016534:	4809      	ldr	r0, [pc, #36]	; (801655c <ip_reass_free_complete_datagram+0x134>)
 8016536:	f001 f90b 	bl	8017750 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801653a:	4b0b      	ldr	r3, [pc, #44]	; (8016568 <ip_reass_free_complete_datagram+0x140>)
 801653c:	881a      	ldrh	r2, [r3, #0]
 801653e:	8bfb      	ldrh	r3, [r7, #30]
 8016540:	1ad3      	subs	r3, r2, r3
 8016542:	b29a      	uxth	r2, r3
 8016544:	4b08      	ldr	r3, [pc, #32]	; (8016568 <ip_reass_free_complete_datagram+0x140>)
 8016546:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016548:	8bfb      	ldrh	r3, [r7, #30]
}
 801654a:	4618      	mov	r0, r3
 801654c:	3720      	adds	r7, #32
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}
 8016552:	bf00      	nop
 8016554:	0801af14 	.word	0x0801af14
 8016558:	0801af50 	.word	0x0801af50
 801655c:	0801af5c 	.word	0x0801af5c
 8016560:	0801af84 	.word	0x0801af84
 8016564:	0801af98 	.word	0x0801af98
 8016568:	24004264 	.word	0x24004264
 801656c:	0801afb8 	.word	0x0801afb8

08016570 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b08a      	sub	sp, #40	; 0x28
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801657a:	2300      	movs	r3, #0
 801657c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801657e:	2300      	movs	r3, #0
 8016580:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016582:	2300      	movs	r3, #0
 8016584:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016586:	2300      	movs	r3, #0
 8016588:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801658a:	2300      	movs	r3, #0
 801658c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801658e:	4b28      	ldr	r3, [pc, #160]	; (8016630 <ip_reass_remove_oldest_datagram+0xc0>)
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016594:	e030      	b.n	80165f8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016598:	695a      	ldr	r2, [r3, #20]
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	68db      	ldr	r3, [r3, #12]
 801659e:	429a      	cmp	r2, r3
 80165a0:	d10c      	bne.n	80165bc <ip_reass_remove_oldest_datagram+0x4c>
 80165a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a4:	699a      	ldr	r2, [r3, #24]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	691b      	ldr	r3, [r3, #16]
 80165aa:	429a      	cmp	r2, r3
 80165ac:	d106      	bne.n	80165bc <ip_reass_remove_oldest_datagram+0x4c>
 80165ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b0:	899a      	ldrh	r2, [r3, #12]
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	889b      	ldrh	r3, [r3, #4]
 80165b6:	b29b      	uxth	r3, r3
 80165b8:	429a      	cmp	r2, r3
 80165ba:	d014      	beq.n	80165e6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80165bc:	693b      	ldr	r3, [r7, #16]
 80165be:	3301      	adds	r3, #1
 80165c0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80165c2:	6a3b      	ldr	r3, [r7, #32]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d104      	bne.n	80165d2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80165c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80165cc:	69fb      	ldr	r3, [r7, #28]
 80165ce:	61bb      	str	r3, [r7, #24]
 80165d0:	e009      	b.n	80165e6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80165d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d4:	7fda      	ldrb	r2, [r3, #31]
 80165d6:	6a3b      	ldr	r3, [r7, #32]
 80165d8:	7fdb      	ldrb	r3, [r3, #31]
 80165da:	429a      	cmp	r2, r3
 80165dc:	d803      	bhi.n	80165e6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80165de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80165e2:	69fb      	ldr	r3, [r7, #28]
 80165e4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80165e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d001      	beq.n	80165f2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80165ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165f0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80165f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80165f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d1cb      	bne.n	8016596 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80165fe:	6a3b      	ldr	r3, [r7, #32]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d008      	beq.n	8016616 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016604:	69b9      	ldr	r1, [r7, #24]
 8016606:	6a38      	ldr	r0, [r7, #32]
 8016608:	f7ff ff0e 	bl	8016428 <ip_reass_free_complete_datagram>
 801660c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801660e:	697a      	ldr	r2, [r7, #20]
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	4413      	add	r3, r2
 8016614:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016616:	697a      	ldr	r2, [r7, #20]
 8016618:	683b      	ldr	r3, [r7, #0]
 801661a:	429a      	cmp	r2, r3
 801661c:	da02      	bge.n	8016624 <ip_reass_remove_oldest_datagram+0xb4>
 801661e:	693b      	ldr	r3, [r7, #16]
 8016620:	2b01      	cmp	r3, #1
 8016622:	dcac      	bgt.n	801657e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016624:	697b      	ldr	r3, [r7, #20]
}
 8016626:	4618      	mov	r0, r3
 8016628:	3728      	adds	r7, #40	; 0x28
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}
 801662e:	bf00      	nop
 8016630:	24004260 	.word	0x24004260

08016634 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b084      	sub	sp, #16
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
 801663c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801663e:	2004      	movs	r0, #4
 8016640:	f7f7 fcae 	bl	800dfa0 <memp_malloc>
 8016644:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d110      	bne.n	801666e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801664c:	6839      	ldr	r1, [r7, #0]
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f7ff ff8e 	bl	8016570 <ip_reass_remove_oldest_datagram>
 8016654:	4602      	mov	r2, r0
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	4293      	cmp	r3, r2
 801665a:	dc03      	bgt.n	8016664 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801665c:	2004      	movs	r0, #4
 801665e:	f7f7 fc9f 	bl	800dfa0 <memp_malloc>
 8016662:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d101      	bne.n	801666e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801666a:	2300      	movs	r3, #0
 801666c:	e016      	b.n	801669c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801666e:	2220      	movs	r2, #32
 8016670:	2100      	movs	r1, #0
 8016672:	68f8      	ldr	r0, [r7, #12]
 8016674:	f001 f809 	bl	801768a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	220f      	movs	r2, #15
 801667c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801667e:	4b09      	ldr	r3, [pc, #36]	; (80166a4 <ip_reass_enqueue_new_datagram+0x70>)
 8016680:	681a      	ldr	r2, [r3, #0]
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016686:	4a07      	ldr	r2, [pc, #28]	; (80166a4 <ip_reass_enqueue_new_datagram+0x70>)
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	3308      	adds	r3, #8
 8016690:	2214      	movs	r2, #20
 8016692:	6879      	ldr	r1, [r7, #4]
 8016694:	4618      	mov	r0, r3
 8016696:	f000 ffea 	bl	801766e <memcpy>
  return ipr;
 801669a:	68fb      	ldr	r3, [r7, #12]
}
 801669c:	4618      	mov	r0, r3
 801669e:	3710      	adds	r7, #16
 80166a0:	46bd      	mov	sp, r7
 80166a2:	bd80      	pop	{r7, pc}
 80166a4:	24004260 	.word	0x24004260

080166a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b082      	sub	sp, #8
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
 80166b0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80166b2:	4b10      	ldr	r3, [pc, #64]	; (80166f4 <ip_reass_dequeue_datagram+0x4c>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	687a      	ldr	r2, [r7, #4]
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d104      	bne.n	80166c6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	4a0c      	ldr	r2, [pc, #48]	; (80166f4 <ip_reass_dequeue_datagram+0x4c>)
 80166c2:	6013      	str	r3, [r2, #0]
 80166c4:	e00d      	b.n	80166e2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d106      	bne.n	80166da <ip_reass_dequeue_datagram+0x32>
 80166cc:	4b0a      	ldr	r3, [pc, #40]	; (80166f8 <ip_reass_dequeue_datagram+0x50>)
 80166ce:	f240 1245 	movw	r2, #325	; 0x145
 80166d2:	490a      	ldr	r1, [pc, #40]	; (80166fc <ip_reass_dequeue_datagram+0x54>)
 80166d4:	480a      	ldr	r0, [pc, #40]	; (8016700 <ip_reass_dequeue_datagram+0x58>)
 80166d6:	f001 f83b 	bl	8017750 <iprintf>
    prev->next = ipr->next;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	681a      	ldr	r2, [r3, #0]
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80166e2:	6879      	ldr	r1, [r7, #4]
 80166e4:	2004      	movs	r0, #4
 80166e6:	f7f7 fcd1 	bl	800e08c <memp_free>
}
 80166ea:	bf00      	nop
 80166ec:	3708      	adds	r7, #8
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
 80166f2:	bf00      	nop
 80166f4:	24004260 	.word	0x24004260
 80166f8:	0801af14 	.word	0x0801af14
 80166fc:	0801afdc 	.word	0x0801afdc
 8016700:	0801af5c 	.word	0x0801af5c

08016704 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b08c      	sub	sp, #48	; 0x30
 8016708:	af00      	add	r7, sp, #0
 801670a:	60f8      	str	r0, [r7, #12]
 801670c:	60b9      	str	r1, [r7, #8]
 801670e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016710:	2300      	movs	r3, #0
 8016712:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016714:	2301      	movs	r3, #1
 8016716:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016718:	68bb      	ldr	r3, [r7, #8]
 801671a:	685b      	ldr	r3, [r3, #4]
 801671c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801671e:	69fb      	ldr	r3, [r7, #28]
 8016720:	885b      	ldrh	r3, [r3, #2]
 8016722:	b29b      	uxth	r3, r3
 8016724:	4618      	mov	r0, r3
 8016726:	f7f6 feab 	bl	800d480 <lwip_htons>
 801672a:	4603      	mov	r3, r0
 801672c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801672e:	69fb      	ldr	r3, [r7, #28]
 8016730:	781b      	ldrb	r3, [r3, #0]
 8016732:	f003 030f 	and.w	r3, r3, #15
 8016736:	b2db      	uxtb	r3, r3
 8016738:	009b      	lsls	r3, r3, #2
 801673a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801673c:	7e7b      	ldrb	r3, [r7, #25]
 801673e:	b29b      	uxth	r3, r3
 8016740:	8b7a      	ldrh	r2, [r7, #26]
 8016742:	429a      	cmp	r2, r3
 8016744:	d202      	bcs.n	801674c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016746:	f04f 33ff 	mov.w	r3, #4294967295
 801674a:	e135      	b.n	80169b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801674c:	7e7b      	ldrb	r3, [r7, #25]
 801674e:	b29b      	uxth	r3, r3
 8016750:	8b7a      	ldrh	r2, [r7, #26]
 8016752:	1ad3      	subs	r3, r2, r3
 8016754:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016756:	69fb      	ldr	r3, [r7, #28]
 8016758:	88db      	ldrh	r3, [r3, #6]
 801675a:	b29b      	uxth	r3, r3
 801675c:	4618      	mov	r0, r3
 801675e:	f7f6 fe8f 	bl	800d480 <lwip_htons>
 8016762:	4603      	mov	r3, r0
 8016764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016768:	b29b      	uxth	r3, r3
 801676a:	00db      	lsls	r3, r3, #3
 801676c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801676e:	68bb      	ldr	r3, [r7, #8]
 8016770:	685b      	ldr	r3, [r3, #4]
 8016772:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016776:	2200      	movs	r2, #0
 8016778:	701a      	strb	r2, [r3, #0]
 801677a:	2200      	movs	r2, #0
 801677c:	705a      	strb	r2, [r3, #1]
 801677e:	2200      	movs	r2, #0
 8016780:	709a      	strb	r2, [r3, #2]
 8016782:	2200      	movs	r2, #0
 8016784:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016788:	8afa      	ldrh	r2, [r7, #22]
 801678a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801678c:	8afa      	ldrh	r2, [r7, #22]
 801678e:	8b7b      	ldrh	r3, [r7, #26]
 8016790:	4413      	add	r3, r2
 8016792:	b29a      	uxth	r2, r3
 8016794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016796:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801679a:	88db      	ldrh	r3, [r3, #6]
 801679c:	b29b      	uxth	r3, r3
 801679e:	8afa      	ldrh	r2, [r7, #22]
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d902      	bls.n	80167aa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80167a4:	f04f 33ff 	mov.w	r3, #4294967295
 80167a8:	e106      	b.n	80169b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	685b      	ldr	r3, [r3, #4]
 80167ae:	627b      	str	r3, [r7, #36]	; 0x24
 80167b0:	e068      	b.n	8016884 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80167b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b4:	685b      	ldr	r3, [r3, #4]
 80167b6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80167b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ba:	889b      	ldrh	r3, [r3, #4]
 80167bc:	b29a      	uxth	r2, r3
 80167be:	693b      	ldr	r3, [r7, #16]
 80167c0:	889b      	ldrh	r3, [r3, #4]
 80167c2:	b29b      	uxth	r3, r3
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d235      	bcs.n	8016834 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80167c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80167ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d020      	beq.n	8016816 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80167d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d6:	889b      	ldrh	r3, [r3, #4]
 80167d8:	b29a      	uxth	r2, r3
 80167da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167dc:	88db      	ldrh	r3, [r3, #6]
 80167de:	b29b      	uxth	r3, r3
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d307      	bcc.n	80167f4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80167e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e6:	88db      	ldrh	r3, [r3, #6]
 80167e8:	b29a      	uxth	r2, r3
 80167ea:	693b      	ldr	r3, [r7, #16]
 80167ec:	889b      	ldrh	r3, [r3, #4]
 80167ee:	b29b      	uxth	r3, r3
 80167f0:	429a      	cmp	r2, r3
 80167f2:	d902      	bls.n	80167fa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80167f4:	f04f 33ff 	mov.w	r3, #4294967295
 80167f8:	e0de      	b.n	80169b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80167fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167fc:	68ba      	ldr	r2, [r7, #8]
 80167fe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016802:	88db      	ldrh	r3, [r3, #6]
 8016804:	b29a      	uxth	r2, r3
 8016806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016808:	889b      	ldrh	r3, [r3, #4]
 801680a:	b29b      	uxth	r3, r3
 801680c:	429a      	cmp	r2, r3
 801680e:	d03d      	beq.n	801688c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016810:	2300      	movs	r3, #0
 8016812:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016814:	e03a      	b.n	801688c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016818:	88db      	ldrh	r3, [r3, #6]
 801681a:	b29a      	uxth	r2, r3
 801681c:	693b      	ldr	r3, [r7, #16]
 801681e:	889b      	ldrh	r3, [r3, #4]
 8016820:	b29b      	uxth	r3, r3
 8016822:	429a      	cmp	r2, r3
 8016824:	d902      	bls.n	801682c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016826:	f04f 33ff 	mov.w	r3, #4294967295
 801682a:	e0c5      	b.n	80169b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	68ba      	ldr	r2, [r7, #8]
 8016830:	605a      	str	r2, [r3, #4]
      break;
 8016832:	e02b      	b.n	801688c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016836:	889b      	ldrh	r3, [r3, #4]
 8016838:	b29a      	uxth	r2, r3
 801683a:	693b      	ldr	r3, [r7, #16]
 801683c:	889b      	ldrh	r3, [r3, #4]
 801683e:	b29b      	uxth	r3, r3
 8016840:	429a      	cmp	r2, r3
 8016842:	d102      	bne.n	801684a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016844:	f04f 33ff 	mov.w	r3, #4294967295
 8016848:	e0b6      	b.n	80169b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801684c:	889b      	ldrh	r3, [r3, #4]
 801684e:	b29a      	uxth	r2, r3
 8016850:	693b      	ldr	r3, [r7, #16]
 8016852:	88db      	ldrh	r3, [r3, #6]
 8016854:	b29b      	uxth	r3, r3
 8016856:	429a      	cmp	r2, r3
 8016858:	d202      	bcs.n	8016860 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801685a:	f04f 33ff 	mov.w	r3, #4294967295
 801685e:	e0ab      	b.n	80169b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016862:	2b00      	cmp	r3, #0
 8016864:	d009      	beq.n	801687a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016868:	88db      	ldrh	r3, [r3, #6]
 801686a:	b29a      	uxth	r2, r3
 801686c:	693b      	ldr	r3, [r7, #16]
 801686e:	889b      	ldrh	r3, [r3, #4]
 8016870:	b29b      	uxth	r3, r3
 8016872:	429a      	cmp	r2, r3
 8016874:	d001      	beq.n	801687a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016876:	2300      	movs	r3, #0
 8016878:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801687a:	693b      	ldr	r3, [r7, #16]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016880:	693b      	ldr	r3, [r7, #16]
 8016882:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016886:	2b00      	cmp	r3, #0
 8016888:	d193      	bne.n	80167b2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801688a:	e000      	b.n	801688e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801688c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016890:	2b00      	cmp	r3, #0
 8016892:	d12d      	bne.n	80168f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016896:	2b00      	cmp	r3, #0
 8016898:	d01c      	beq.n	80168d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801689c:	88db      	ldrh	r3, [r3, #6]
 801689e:	b29a      	uxth	r2, r3
 80168a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168a2:	889b      	ldrh	r3, [r3, #4]
 80168a4:	b29b      	uxth	r3, r3
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d906      	bls.n	80168b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80168aa:	4b45      	ldr	r3, [pc, #276]	; (80169c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80168ac:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80168b0:	4944      	ldr	r1, [pc, #272]	; (80169c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80168b2:	4845      	ldr	r0, [pc, #276]	; (80169c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80168b4:	f000 ff4c 	bl	8017750 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80168b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168ba:	68ba      	ldr	r2, [r7, #8]
 80168bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80168be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168c0:	88db      	ldrh	r3, [r3, #6]
 80168c2:	b29a      	uxth	r2, r3
 80168c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168c6:	889b      	ldrh	r3, [r3, #4]
 80168c8:	b29b      	uxth	r3, r3
 80168ca:	429a      	cmp	r2, r3
 80168cc:	d010      	beq.n	80168f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80168ce:	2300      	movs	r3, #0
 80168d0:	623b      	str	r3, [r7, #32]
 80168d2:	e00d      	b.n	80168f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	685b      	ldr	r3, [r3, #4]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d006      	beq.n	80168ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80168dc:	4b38      	ldr	r3, [pc, #224]	; (80169c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80168de:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80168e2:	493a      	ldr	r1, [pc, #232]	; (80169cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80168e4:	4838      	ldr	r0, [pc, #224]	; (80169c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80168e6:	f000 ff33 	bl	8017750 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	68ba      	ldr	r2, [r7, #8]
 80168ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d105      	bne.n	8016902 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	7f9b      	ldrb	r3, [r3, #30]
 80168fa:	f003 0301 	and.w	r3, r3, #1
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d059      	beq.n	80169b6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016902:	6a3b      	ldr	r3, [r7, #32]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d04f      	beq.n	80169a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	685b      	ldr	r3, [r3, #4]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d006      	beq.n	801691e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	685b      	ldr	r3, [r3, #4]
 8016914:	685b      	ldr	r3, [r3, #4]
 8016916:	889b      	ldrh	r3, [r3, #4]
 8016918:	b29b      	uxth	r3, r3
 801691a:	2b00      	cmp	r3, #0
 801691c:	d002      	beq.n	8016924 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801691e:	2300      	movs	r3, #0
 8016920:	623b      	str	r3, [r7, #32]
 8016922:	e041      	b.n	80169a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016926:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801692e:	e012      	b.n	8016956 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016932:	685b      	ldr	r3, [r3, #4]
 8016934:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016938:	88db      	ldrh	r3, [r3, #6]
 801693a:	b29a      	uxth	r2, r3
 801693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801693e:	889b      	ldrh	r3, [r3, #4]
 8016940:	b29b      	uxth	r3, r3
 8016942:	429a      	cmp	r2, r3
 8016944:	d002      	beq.n	801694c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016946:	2300      	movs	r3, #0
 8016948:	623b      	str	r3, [r7, #32]
            break;
 801694a:	e007      	b.n	801695c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801694e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016958:	2b00      	cmp	r3, #0
 801695a:	d1e9      	bne.n	8016930 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801695c:	6a3b      	ldr	r3, [r7, #32]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d022      	beq.n	80169a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	685b      	ldr	r3, [r3, #4]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d106      	bne.n	8016978 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801696a:	4b15      	ldr	r3, [pc, #84]	; (80169c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801696c:	f240 12df 	movw	r2, #479	; 0x1df
 8016970:	4917      	ldr	r1, [pc, #92]	; (80169d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016972:	4815      	ldr	r0, [pc, #84]	; (80169c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016974:	f000 feec 	bl	8017750 <iprintf>
          LWIP_ASSERT("sanity check",
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	685b      	ldr	r3, [r3, #4]
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016980:	429a      	cmp	r2, r3
 8016982:	d106      	bne.n	8016992 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016984:	4b0e      	ldr	r3, [pc, #56]	; (80169c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016986:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801698a:	4911      	ldr	r1, [pc, #68]	; (80169d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801698c:	480e      	ldr	r0, [pc, #56]	; (80169c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801698e:	f000 fedf 	bl	8017750 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d006      	beq.n	80169a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801699a:	4b09      	ldr	r3, [pc, #36]	; (80169c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801699c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80169a0:	490c      	ldr	r1, [pc, #48]	; (80169d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80169a2:	4809      	ldr	r0, [pc, #36]	; (80169c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80169a4:	f000 fed4 	bl	8017750 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80169a8:	6a3b      	ldr	r3, [r7, #32]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	bf14      	ite	ne
 80169ae:	2301      	movne	r3, #1
 80169b0:	2300      	moveq	r3, #0
 80169b2:	b2db      	uxtb	r3, r3
 80169b4:	e000      	b.n	80169b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80169b6:	2300      	movs	r3, #0
}
 80169b8:	4618      	mov	r0, r3
 80169ba:	3730      	adds	r7, #48	; 0x30
 80169bc:	46bd      	mov	sp, r7
 80169be:	bd80      	pop	{r7, pc}
 80169c0:	0801af14 	.word	0x0801af14
 80169c4:	0801aff8 	.word	0x0801aff8
 80169c8:	0801af5c 	.word	0x0801af5c
 80169cc:	0801b018 	.word	0x0801b018
 80169d0:	0801b050 	.word	0x0801b050
 80169d4:	0801b060 	.word	0x0801b060

080169d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b08e      	sub	sp, #56	; 0x38
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	685b      	ldr	r3, [r3, #4]
 80169e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80169e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e8:	781b      	ldrb	r3, [r3, #0]
 80169ea:	f003 030f 	and.w	r3, r3, #15
 80169ee:	b2db      	uxtb	r3, r3
 80169f0:	009b      	lsls	r3, r3, #2
 80169f2:	b2db      	uxtb	r3, r3
 80169f4:	2b14      	cmp	r3, #20
 80169f6:	f040 8167 	bne.w	8016cc8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80169fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169fc:	88db      	ldrh	r3, [r3, #6]
 80169fe:	b29b      	uxth	r3, r3
 8016a00:	4618      	mov	r0, r3
 8016a02:	f7f6 fd3d 	bl	800d480 <lwip_htons>
 8016a06:	4603      	mov	r3, r0
 8016a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a0c:	b29b      	uxth	r3, r3
 8016a0e:	00db      	lsls	r3, r3, #3
 8016a10:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a14:	885b      	ldrh	r3, [r3, #2]
 8016a16:	b29b      	uxth	r3, r3
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f7f6 fd31 	bl	800d480 <lwip_htons>
 8016a1e:	4603      	mov	r3, r0
 8016a20:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a24:	781b      	ldrb	r3, [r3, #0]
 8016a26:	f003 030f 	and.w	r3, r3, #15
 8016a2a:	b2db      	uxtb	r3, r3
 8016a2c:	009b      	lsls	r3, r3, #2
 8016a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016a36:	b29b      	uxth	r3, r3
 8016a38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016a3a:	429a      	cmp	r2, r3
 8016a3c:	f0c0 8146 	bcc.w	8016ccc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016a40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016a44:	b29b      	uxth	r3, r3
 8016a46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016a48:	1ad3      	subs	r3, r2, r3
 8016a4a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016a4c:	6878      	ldr	r0, [r7, #4]
 8016a4e:	f7f8 fa4f 	bl	800eef0 <pbuf_clen>
 8016a52:	4603      	mov	r3, r0
 8016a54:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016a56:	4b9f      	ldr	r3, [pc, #636]	; (8016cd4 <ip4_reass+0x2fc>)
 8016a58:	881b      	ldrh	r3, [r3, #0]
 8016a5a:	461a      	mov	r2, r3
 8016a5c:	8c3b      	ldrh	r3, [r7, #32]
 8016a5e:	4413      	add	r3, r2
 8016a60:	2b0a      	cmp	r3, #10
 8016a62:	dd10      	ble.n	8016a86 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016a64:	8c3b      	ldrh	r3, [r7, #32]
 8016a66:	4619      	mov	r1, r3
 8016a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a6a:	f7ff fd81 	bl	8016570 <ip_reass_remove_oldest_datagram>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	f000 812d 	beq.w	8016cd0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016a76:	4b97      	ldr	r3, [pc, #604]	; (8016cd4 <ip4_reass+0x2fc>)
 8016a78:	881b      	ldrh	r3, [r3, #0]
 8016a7a:	461a      	mov	r2, r3
 8016a7c:	8c3b      	ldrh	r3, [r7, #32]
 8016a7e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016a80:	2b0a      	cmp	r3, #10
 8016a82:	f300 8125 	bgt.w	8016cd0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016a86:	4b94      	ldr	r3, [pc, #592]	; (8016cd8 <ip4_reass+0x300>)
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8016a8c:	e015      	b.n	8016aba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a90:	695a      	ldr	r2, [r3, #20]
 8016a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a94:	68db      	ldr	r3, [r3, #12]
 8016a96:	429a      	cmp	r2, r3
 8016a98:	d10c      	bne.n	8016ab4 <ip4_reass+0xdc>
 8016a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a9c:	699a      	ldr	r2, [r3, #24]
 8016a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aa0:	691b      	ldr	r3, [r3, #16]
 8016aa2:	429a      	cmp	r2, r3
 8016aa4:	d106      	bne.n	8016ab4 <ip4_reass+0xdc>
 8016aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aa8:	899a      	ldrh	r2, [r3, #12]
 8016aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aac:	889b      	ldrh	r3, [r3, #4]
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	d006      	beq.n	8016ac2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8016aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d1e6      	bne.n	8016a8e <ip4_reass+0xb6>
 8016ac0:	e000      	b.n	8016ac4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016ac2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d109      	bne.n	8016ade <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016aca:	8c3b      	ldrh	r3, [r7, #32]
 8016acc:	4619      	mov	r1, r3
 8016ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ad0:	f7ff fdb0 	bl	8016634 <ip_reass_enqueue_new_datagram>
 8016ad4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d11c      	bne.n	8016b16 <ip4_reass+0x13e>
      goto nullreturn;
 8016adc:	e109      	b.n	8016cf2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae0:	88db      	ldrh	r3, [r3, #6]
 8016ae2:	b29b      	uxth	r3, r3
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f7f6 fccb 	bl	800d480 <lwip_htons>
 8016aea:	4603      	mov	r3, r0
 8016aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d110      	bne.n	8016b16 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016af6:	89db      	ldrh	r3, [r3, #14]
 8016af8:	4618      	mov	r0, r3
 8016afa:	f7f6 fcc1 	bl	800d480 <lwip_htons>
 8016afe:	4603      	mov	r3, r0
 8016b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d006      	beq.n	8016b16 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b0a:	3308      	adds	r3, #8
 8016b0c:	2214      	movs	r2, #20
 8016b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016b10:	4618      	mov	r0, r3
 8016b12:	f000 fdac 	bl	801766e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b18:	88db      	ldrh	r3, [r3, #6]
 8016b1a:	b29b      	uxth	r3, r3
 8016b1c:	f003 0320 	and.w	r3, r3, #32
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	bf0c      	ite	eq
 8016b24:	2301      	moveq	r3, #1
 8016b26:	2300      	movne	r3, #0
 8016b28:	b2db      	uxtb	r3, r3
 8016b2a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016b2c:	69fb      	ldr	r3, [r7, #28]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d00e      	beq.n	8016b50 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016b32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016b34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b36:	4413      	add	r3, r2
 8016b38:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016b3a:	8b7a      	ldrh	r2, [r7, #26]
 8016b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016b3e:	429a      	cmp	r2, r3
 8016b40:	f0c0 80a0 	bcc.w	8016c84 <ip4_reass+0x2ac>
 8016b44:	8b7b      	ldrh	r3, [r7, #26]
 8016b46:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016b4a:	4293      	cmp	r3, r2
 8016b4c:	f200 809a 	bhi.w	8016c84 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016b50:	69fa      	ldr	r2, [r7, #28]
 8016b52:	6879      	ldr	r1, [r7, #4]
 8016b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b56:	f7ff fdd5 	bl	8016704 <ip_reass_chain_frag_into_datagram_and_validate>
 8016b5a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b62:	f000 8091 	beq.w	8016c88 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016b66:	4b5b      	ldr	r3, [pc, #364]	; (8016cd4 <ip4_reass+0x2fc>)
 8016b68:	881a      	ldrh	r2, [r3, #0]
 8016b6a:	8c3b      	ldrh	r3, [r7, #32]
 8016b6c:	4413      	add	r3, r2
 8016b6e:	b29a      	uxth	r2, r3
 8016b70:	4b58      	ldr	r3, [pc, #352]	; (8016cd4 <ip4_reass+0x2fc>)
 8016b72:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016b74:	69fb      	ldr	r3, [r7, #28]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d00d      	beq.n	8016b96 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016b7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b7e:	4413      	add	r3, r2
 8016b80:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b84:	8a7a      	ldrh	r2, [r7, #18]
 8016b86:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b8a:	7f9b      	ldrb	r3, [r3, #30]
 8016b8c:	f043 0301 	orr.w	r3, r3, #1
 8016b90:	b2da      	uxtb	r2, r3
 8016b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b94:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016b96:	697b      	ldr	r3, [r7, #20]
 8016b98:	2b01      	cmp	r3, #1
 8016b9a:	d171      	bne.n	8016c80 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b9e:	8b9b      	ldrh	r3, [r3, #28]
 8016ba0:	3314      	adds	r3, #20
 8016ba2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ba6:	685b      	ldr	r3, [r3, #4]
 8016ba8:	685b      	ldr	r3, [r3, #4]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb0:	685b      	ldr	r3, [r3, #4]
 8016bb2:	685b      	ldr	r3, [r3, #4]
 8016bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb8:	3308      	adds	r3, #8
 8016bba:	2214      	movs	r2, #20
 8016bbc:	4619      	mov	r1, r3
 8016bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016bc0:	f000 fd55 	bl	801766e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016bc4:	8a3b      	ldrh	r3, [r7, #16]
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	f7f6 fc5a 	bl	800d480 <lwip_htons>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	461a      	mov	r2, r3
 8016bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	719a      	strb	r2, [r3, #6]
 8016bda:	2200      	movs	r2, #0
 8016bdc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016be0:	2200      	movs	r2, #0
 8016be2:	729a      	strb	r2, [r3, #10]
 8016be4:	2200      	movs	r2, #0
 8016be6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bea:	685b      	ldr	r3, [r3, #4]
 8016bec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016bee:	e00d      	b.n	8016c0c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bf2:	685b      	ldr	r3, [r3, #4]
 8016bf4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016bf6:	2114      	movs	r1, #20
 8016bf8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016bfa:	f7f8 f865 	bl	800ecc8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016bfe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016c00:	6878      	ldr	r0, [r7, #4]
 8016c02:	f7f8 f9b5 	bl	800ef70 <pbuf_cat>
      r = iprh->next_pbuf;
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d1ee      	bne.n	8016bf0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016c12:	4b31      	ldr	r3, [pc, #196]	; (8016cd8 <ip4_reass+0x300>)
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d102      	bne.n	8016c22 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016c20:	e010      	b.n	8016c44 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016c22:	4b2d      	ldr	r3, [pc, #180]	; (8016cd8 <ip4_reass+0x300>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016c28:	e007      	b.n	8016c3a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d006      	beq.n	8016c42 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d1f4      	bne.n	8016c2a <ip4_reass+0x252>
 8016c40:	e000      	b.n	8016c44 <ip4_reass+0x26c>
          break;
 8016c42:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016c44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016c46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c48:	f7ff fd2e 	bl	80166a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016c4c:	6878      	ldr	r0, [r7, #4]
 8016c4e:	f7f8 f94f 	bl	800eef0 <pbuf_clen>
 8016c52:	4603      	mov	r3, r0
 8016c54:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016c56:	4b1f      	ldr	r3, [pc, #124]	; (8016cd4 <ip4_reass+0x2fc>)
 8016c58:	881b      	ldrh	r3, [r3, #0]
 8016c5a:	8c3a      	ldrh	r2, [r7, #32]
 8016c5c:	429a      	cmp	r2, r3
 8016c5e:	d906      	bls.n	8016c6e <ip4_reass+0x296>
 8016c60:	4b1e      	ldr	r3, [pc, #120]	; (8016cdc <ip4_reass+0x304>)
 8016c62:	f240 229b 	movw	r2, #667	; 0x29b
 8016c66:	491e      	ldr	r1, [pc, #120]	; (8016ce0 <ip4_reass+0x308>)
 8016c68:	481e      	ldr	r0, [pc, #120]	; (8016ce4 <ip4_reass+0x30c>)
 8016c6a:	f000 fd71 	bl	8017750 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016c6e:	4b19      	ldr	r3, [pc, #100]	; (8016cd4 <ip4_reass+0x2fc>)
 8016c70:	881a      	ldrh	r2, [r3, #0]
 8016c72:	8c3b      	ldrh	r3, [r7, #32]
 8016c74:	1ad3      	subs	r3, r2, r3
 8016c76:	b29a      	uxth	r2, r3
 8016c78:	4b16      	ldr	r3, [pc, #88]	; (8016cd4 <ip4_reass+0x2fc>)
 8016c7a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	e03c      	b.n	8016cfa <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016c80:	2300      	movs	r3, #0
 8016c82:	e03a      	b.n	8016cfa <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016c84:	bf00      	nop
 8016c86:	e000      	b.n	8016c8a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016c88:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d106      	bne.n	8016c9e <ip4_reass+0x2c6>
 8016c90:	4b12      	ldr	r3, [pc, #72]	; (8016cdc <ip4_reass+0x304>)
 8016c92:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016c96:	4914      	ldr	r1, [pc, #80]	; (8016ce8 <ip4_reass+0x310>)
 8016c98:	4812      	ldr	r0, [pc, #72]	; (8016ce4 <ip4_reass+0x30c>)
 8016c9a:	f000 fd59 	bl	8017750 <iprintf>
  if (ipr->p == NULL) {
 8016c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca0:	685b      	ldr	r3, [r3, #4]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d124      	bne.n	8016cf0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016ca6:	4b0c      	ldr	r3, [pc, #48]	; (8016cd8 <ip4_reass+0x300>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016cac:	429a      	cmp	r2, r3
 8016cae:	d006      	beq.n	8016cbe <ip4_reass+0x2e6>
 8016cb0:	4b0a      	ldr	r3, [pc, #40]	; (8016cdc <ip4_reass+0x304>)
 8016cb2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016cb6:	490d      	ldr	r1, [pc, #52]	; (8016cec <ip4_reass+0x314>)
 8016cb8:	480a      	ldr	r0, [pc, #40]	; (8016ce4 <ip4_reass+0x30c>)
 8016cba:	f000 fd49 	bl	8017750 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016cbe:	2100      	movs	r1, #0
 8016cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016cc2:	f7ff fcf1 	bl	80166a8 <ip_reass_dequeue_datagram>
 8016cc6:	e014      	b.n	8016cf2 <ip4_reass+0x31a>
    goto nullreturn;
 8016cc8:	bf00      	nop
 8016cca:	e012      	b.n	8016cf2 <ip4_reass+0x31a>
    goto nullreturn;
 8016ccc:	bf00      	nop
 8016cce:	e010      	b.n	8016cf2 <ip4_reass+0x31a>
      goto nullreturn;
 8016cd0:	bf00      	nop
 8016cd2:	e00e      	b.n	8016cf2 <ip4_reass+0x31a>
 8016cd4:	24004264 	.word	0x24004264
 8016cd8:	24004260 	.word	0x24004260
 8016cdc:	0801af14 	.word	0x0801af14
 8016ce0:	0801b084 	.word	0x0801b084
 8016ce4:	0801af5c 	.word	0x0801af5c
 8016ce8:	0801b0a0 	.word	0x0801b0a0
 8016cec:	0801b0ac 	.word	0x0801b0ac
  }

nullreturn:
 8016cf0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f7f8 f86e 	bl	800edd4 <pbuf_free>
  return NULL;
 8016cf8:	2300      	movs	r3, #0
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3738      	adds	r7, #56	; 0x38
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
 8016d02:	bf00      	nop

08016d04 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016d08:	2005      	movs	r0, #5
 8016d0a:	f7f7 f949 	bl	800dfa0 <memp_malloc>
 8016d0e:	4603      	mov	r3, r0
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	bd80      	pop	{r7, pc}

08016d14 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b082      	sub	sp, #8
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d106      	bne.n	8016d30 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016d22:	4b07      	ldr	r3, [pc, #28]	; (8016d40 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016d24:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016d28:	4906      	ldr	r1, [pc, #24]	; (8016d44 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016d2a:	4807      	ldr	r0, [pc, #28]	; (8016d48 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016d2c:	f000 fd10 	bl	8017750 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016d30:	6879      	ldr	r1, [r7, #4]
 8016d32:	2005      	movs	r0, #5
 8016d34:	f7f7 f9aa 	bl	800e08c <memp_free>
}
 8016d38:	bf00      	nop
 8016d3a:	3708      	adds	r7, #8
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bd80      	pop	{r7, pc}
 8016d40:	0801af14 	.word	0x0801af14
 8016d44:	0801b0cc 	.word	0x0801b0cc
 8016d48:	0801af5c 	.word	0x0801af5c

08016d4c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b084      	sub	sp, #16
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d106      	bne.n	8016d6c <ipfrag_free_pbuf_custom+0x20>
 8016d5e:	4b11      	ldr	r3, [pc, #68]	; (8016da4 <ipfrag_free_pbuf_custom+0x58>)
 8016d60:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016d64:	4910      	ldr	r1, [pc, #64]	; (8016da8 <ipfrag_free_pbuf_custom+0x5c>)
 8016d66:	4811      	ldr	r0, [pc, #68]	; (8016dac <ipfrag_free_pbuf_custom+0x60>)
 8016d68:	f000 fcf2 	bl	8017750 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016d6c:	68fa      	ldr	r2, [r7, #12]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	429a      	cmp	r2, r3
 8016d72:	d006      	beq.n	8016d82 <ipfrag_free_pbuf_custom+0x36>
 8016d74:	4b0b      	ldr	r3, [pc, #44]	; (8016da4 <ipfrag_free_pbuf_custom+0x58>)
 8016d76:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016d7a:	490d      	ldr	r1, [pc, #52]	; (8016db0 <ipfrag_free_pbuf_custom+0x64>)
 8016d7c:	480b      	ldr	r0, [pc, #44]	; (8016dac <ipfrag_free_pbuf_custom+0x60>)
 8016d7e:	f000 fce7 	bl	8017750 <iprintf>
  if (pcr->original != NULL) {
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	695b      	ldr	r3, [r3, #20]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d004      	beq.n	8016d94 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	695b      	ldr	r3, [r3, #20]
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7f8 f820 	bl	800edd4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016d94:	68f8      	ldr	r0, [r7, #12]
 8016d96:	f7ff ffbd 	bl	8016d14 <ip_frag_free_pbuf_custom_ref>
}
 8016d9a:	bf00      	nop
 8016d9c:	3710      	adds	r7, #16
 8016d9e:	46bd      	mov	sp, r7
 8016da0:	bd80      	pop	{r7, pc}
 8016da2:	bf00      	nop
 8016da4:	0801af14 	.word	0x0801af14
 8016da8:	0801b0d8 	.word	0x0801b0d8
 8016dac:	0801af5c 	.word	0x0801af5c
 8016db0:	0801b0e4 	.word	0x0801b0e4

08016db4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b094      	sub	sp, #80	; 0x50
 8016db8:	af02      	add	r7, sp, #8
 8016dba:	60f8      	str	r0, [r7, #12]
 8016dbc:	60b9      	str	r1, [r7, #8]
 8016dbe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016dc6:	68bb      	ldr	r3, [r7, #8]
 8016dc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016dca:	3b14      	subs	r3, #20
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	da00      	bge.n	8016dd2 <ip4_frag+0x1e>
 8016dd0:	3307      	adds	r3, #7
 8016dd2:	10db      	asrs	r3, r3, #3
 8016dd4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016dd6:	2314      	movs	r3, #20
 8016dd8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	685b      	ldr	r3, [r3, #4]
 8016dde:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016de2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016de6:	781b      	ldrb	r3, [r3, #0]
 8016de8:	f003 030f 	and.w	r3, r3, #15
 8016dec:	b2db      	uxtb	r3, r3
 8016dee:	009b      	lsls	r3, r3, #2
 8016df0:	b2db      	uxtb	r3, r3
 8016df2:	2b14      	cmp	r3, #20
 8016df4:	d002      	beq.n	8016dfc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016df6:	f06f 0305 	mvn.w	r3, #5
 8016dfa:	e110      	b.n	801701e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	895b      	ldrh	r3, [r3, #10]
 8016e00:	2b13      	cmp	r3, #19
 8016e02:	d809      	bhi.n	8016e18 <ip4_frag+0x64>
 8016e04:	4b88      	ldr	r3, [pc, #544]	; (8017028 <ip4_frag+0x274>)
 8016e06:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016e0a:	4988      	ldr	r1, [pc, #544]	; (801702c <ip4_frag+0x278>)
 8016e0c:	4888      	ldr	r0, [pc, #544]	; (8017030 <ip4_frag+0x27c>)
 8016e0e:	f000 fc9f 	bl	8017750 <iprintf>
 8016e12:	f06f 0305 	mvn.w	r3, #5
 8016e16:	e102      	b.n	801701e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e1a:	88db      	ldrh	r3, [r3, #6]
 8016e1c:	b29b      	uxth	r3, r3
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7f6 fb2e 	bl	800d480 <lwip_htons>
 8016e24:	4603      	mov	r3, r0
 8016e26:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016e28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016e2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016e2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016e32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016e38:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	891b      	ldrh	r3, [r3, #8]
 8016e3e:	3b14      	subs	r3, #20
 8016e40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016e44:	e0e1      	b.n	801700a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016e46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016e48:	00db      	lsls	r3, r3, #3
 8016e4a:	b29b      	uxth	r3, r3
 8016e4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016e50:	4293      	cmp	r3, r2
 8016e52:	bf28      	it	cs
 8016e54:	4613      	movcs	r3, r2
 8016e56:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016e58:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e5c:	2114      	movs	r1, #20
 8016e5e:	200e      	movs	r0, #14
 8016e60:	f7f7 fcd4 	bl	800e80c <pbuf_alloc>
 8016e64:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	f000 80d5 	beq.w	8017018 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e70:	895b      	ldrh	r3, [r3, #10]
 8016e72:	2b13      	cmp	r3, #19
 8016e74:	d806      	bhi.n	8016e84 <ip4_frag+0xd0>
 8016e76:	4b6c      	ldr	r3, [pc, #432]	; (8017028 <ip4_frag+0x274>)
 8016e78:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016e7c:	496d      	ldr	r1, [pc, #436]	; (8017034 <ip4_frag+0x280>)
 8016e7e:	486c      	ldr	r0, [pc, #432]	; (8017030 <ip4_frag+0x27c>)
 8016e80:	f000 fc66 	bl	8017750 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	2214      	movs	r2, #20
 8016e8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	f000 fbee 	bl	801766e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e94:	685b      	ldr	r3, [r3, #4]
 8016e96:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016e98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016e9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016e9e:	e064      	b.n	8016f6a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	895a      	ldrh	r2, [r3, #10]
 8016ea4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016ea6:	1ad3      	subs	r3, r2, r3
 8016ea8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	895b      	ldrh	r3, [r3, #10]
 8016eae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	d906      	bls.n	8016ec2 <ip4_frag+0x10e>
 8016eb4:	4b5c      	ldr	r3, [pc, #368]	; (8017028 <ip4_frag+0x274>)
 8016eb6:	f240 322d 	movw	r2, #813	; 0x32d
 8016eba:	495f      	ldr	r1, [pc, #380]	; (8017038 <ip4_frag+0x284>)
 8016ebc:	485c      	ldr	r0, [pc, #368]	; (8017030 <ip4_frag+0x27c>)
 8016ebe:	f000 fc47 	bl	8017750 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016ec2:	8bfa      	ldrh	r2, [r7, #30]
 8016ec4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ec8:	4293      	cmp	r3, r2
 8016eca:	bf28      	it	cs
 8016ecc:	4613      	movcs	r3, r2
 8016ece:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016ed2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d105      	bne.n	8016ee6 <ip4_frag+0x132>
        poff = 0;
 8016eda:	2300      	movs	r3, #0
 8016edc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	60fb      	str	r3, [r7, #12]
        continue;
 8016ee4:	e041      	b.n	8016f6a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016ee6:	f7ff ff0d 	bl	8016d04 <ip_frag_alloc_pbuf_custom_ref>
 8016eea:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016eec:	69bb      	ldr	r3, [r7, #24]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d103      	bne.n	8016efa <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016ef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ef4:	f7f7 ff6e 	bl	800edd4 <pbuf_free>
        goto memerr;
 8016ef8:	e08f      	b.n	801701a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016efa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016f00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016f02:	4413      	add	r3, r2
 8016f04:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016f08:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016f0c:	9201      	str	r2, [sp, #4]
 8016f0e:	9300      	str	r3, [sp, #0]
 8016f10:	4603      	mov	r3, r0
 8016f12:	2241      	movs	r2, #65	; 0x41
 8016f14:	2000      	movs	r0, #0
 8016f16:	f7f7 fda3 	bl	800ea60 <pbuf_alloced_custom>
 8016f1a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016f1c:	697b      	ldr	r3, [r7, #20]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d106      	bne.n	8016f30 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016f22:	69b8      	ldr	r0, [r7, #24]
 8016f24:	f7ff fef6 	bl	8016d14 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f2a:	f7f7 ff53 	bl	800edd4 <pbuf_free>
        goto memerr;
 8016f2e:	e074      	b.n	801701a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016f30:	68f8      	ldr	r0, [r7, #12]
 8016f32:	f7f7 fff5 	bl	800ef20 <pbuf_ref>
      pcr->original = p;
 8016f36:	69bb      	ldr	r3, [r7, #24]
 8016f38:	68fa      	ldr	r2, [r7, #12]
 8016f3a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016f3c:	69bb      	ldr	r3, [r7, #24]
 8016f3e:	4a3f      	ldr	r2, [pc, #252]	; (801703c <ip4_frag+0x288>)
 8016f40:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016f42:	6979      	ldr	r1, [r7, #20]
 8016f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f46:	f7f8 f813 	bl	800ef70 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016f4a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016f4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016f52:	1ad3      	subs	r3, r2, r3
 8016f54:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016f58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d004      	beq.n	8016f6a <ip4_frag+0x1b6>
        poff = 0;
 8016f60:	2300      	movs	r3, #0
 8016f62:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016f6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d196      	bne.n	8016ea0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016f72:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016f74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016f78:	4413      	add	r3, r2
 8016f7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016f7c:	68bb      	ldr	r3, [r7, #8]
 8016f7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016f80:	f1a3 0213 	sub.w	r2, r3, #19
 8016f84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016f88:	429a      	cmp	r2, r3
 8016f8a:	bfcc      	ite	gt
 8016f8c:	2301      	movgt	r3, #1
 8016f8e:	2300      	movle	r3, #0
 8016f90:	b2db      	uxtb	r3, r3
 8016f92:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016f94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016f9e:	6a3b      	ldr	r3, [r7, #32]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d002      	beq.n	8016faa <ip4_frag+0x1f6>
 8016fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d003      	beq.n	8016fb2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016faa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016fac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016fb0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016fb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f7f6 fa63 	bl	800d480 <lwip_htons>
 8016fba:	4603      	mov	r3, r0
 8016fbc:	461a      	mov	r2, r3
 8016fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fc0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016fc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016fc4:	3314      	adds	r3, #20
 8016fc6:	b29b      	uxth	r3, r3
 8016fc8:	4618      	mov	r0, r3
 8016fca:	f7f6 fa59 	bl	800d480 <lwip_htons>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	461a      	mov	r2, r3
 8016fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd8:	2200      	movs	r2, #0
 8016fda:	729a      	strb	r2, [r3, #10]
 8016fdc:	2200      	movs	r2, #0
 8016fde:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016fe0:	68bb      	ldr	r3, [r7, #8]
 8016fe2:	695b      	ldr	r3, [r3, #20]
 8016fe4:	687a      	ldr	r2, [r7, #4]
 8016fe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016fe8:	68b8      	ldr	r0, [r7, #8]
 8016fea:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016fee:	f7f7 fef1 	bl	800edd4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016ff2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ff6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016ff8:	1ad3      	subs	r3, r2, r3
 8016ffa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016ffe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017002:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017004:	4413      	add	r3, r2
 8017006:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801700a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801700e:	2b00      	cmp	r3, #0
 8017010:	f47f af19 	bne.w	8016e46 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017014:	2300      	movs	r3, #0
 8017016:	e002      	b.n	801701e <ip4_frag+0x26a>
      goto memerr;
 8017018:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801701a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801701e:	4618      	mov	r0, r3
 8017020:	3748      	adds	r7, #72	; 0x48
 8017022:	46bd      	mov	sp, r7
 8017024:	bd80      	pop	{r7, pc}
 8017026:	bf00      	nop
 8017028:	0801af14 	.word	0x0801af14
 801702c:	0801b0f0 	.word	0x0801b0f0
 8017030:	0801af5c 	.word	0x0801af5c
 8017034:	0801b10c 	.word	0x0801b10c
 8017038:	0801b12c 	.word	0x0801b12c
 801703c:	08016d4d 	.word	0x08016d4d

08017040 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b086      	sub	sp, #24
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
 8017048:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801704a:	230e      	movs	r3, #14
 801704c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	895b      	ldrh	r3, [r3, #10]
 8017052:	2b0e      	cmp	r3, #14
 8017054:	d96e      	bls.n	8017134 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	7bdb      	ldrb	r3, [r3, #15]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d106      	bne.n	801706c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017064:	3301      	adds	r3, #1
 8017066:	b2da      	uxtb	r2, r3
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	685b      	ldr	r3, [r3, #4]
 8017070:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017072:	693b      	ldr	r3, [r7, #16]
 8017074:	7b1a      	ldrb	r2, [r3, #12]
 8017076:	7b5b      	ldrb	r3, [r3, #13]
 8017078:	021b      	lsls	r3, r3, #8
 801707a:	4313      	orrs	r3, r2
 801707c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801707e:	693b      	ldr	r3, [r7, #16]
 8017080:	781b      	ldrb	r3, [r3, #0]
 8017082:	f003 0301 	and.w	r3, r3, #1
 8017086:	2b00      	cmp	r3, #0
 8017088:	d023      	beq.n	80170d2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801708a:	693b      	ldr	r3, [r7, #16]
 801708c:	781b      	ldrb	r3, [r3, #0]
 801708e:	2b01      	cmp	r3, #1
 8017090:	d10f      	bne.n	80170b2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017092:	693b      	ldr	r3, [r7, #16]
 8017094:	785b      	ldrb	r3, [r3, #1]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d11b      	bne.n	80170d2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801709a:	693b      	ldr	r3, [r7, #16]
 801709c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801709e:	2b5e      	cmp	r3, #94	; 0x5e
 80170a0:	d117      	bne.n	80170d2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	7b5b      	ldrb	r3, [r3, #13]
 80170a6:	f043 0310 	orr.w	r3, r3, #16
 80170aa:	b2da      	uxtb	r2, r3
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	735a      	strb	r2, [r3, #13]
 80170b0:	e00f      	b.n	80170d2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80170b2:	693b      	ldr	r3, [r7, #16]
 80170b4:	2206      	movs	r2, #6
 80170b6:	4928      	ldr	r1, [pc, #160]	; (8017158 <ethernet_input+0x118>)
 80170b8:	4618      	mov	r0, r3
 80170ba:	f000 faca 	bl	8017652 <memcmp>
 80170be:	4603      	mov	r3, r0
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d106      	bne.n	80170d2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	7b5b      	ldrb	r3, [r3, #13]
 80170c8:	f043 0308 	orr.w	r3, r3, #8
 80170cc:	b2da      	uxtb	r2, r3
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80170d2:	89fb      	ldrh	r3, [r7, #14]
 80170d4:	2b08      	cmp	r3, #8
 80170d6:	d003      	beq.n	80170e0 <ethernet_input+0xa0>
 80170d8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80170dc:	d014      	beq.n	8017108 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80170de:	e032      	b.n	8017146 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80170e6:	f003 0308 	and.w	r3, r3, #8
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d024      	beq.n	8017138 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80170ee:	8afb      	ldrh	r3, [r7, #22]
 80170f0:	4619      	mov	r1, r3
 80170f2:	6878      	ldr	r0, [r7, #4]
 80170f4:	f7f7 fde8 	bl	800ecc8 <pbuf_remove_header>
 80170f8:	4603      	mov	r3, r0
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d11e      	bne.n	801713c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80170fe:	6839      	ldr	r1, [r7, #0]
 8017100:	6878      	ldr	r0, [r7, #4]
 8017102:	f7fe ff27 	bl	8015f54 <ip4_input>
      break;
 8017106:	e013      	b.n	8017130 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801710e:	f003 0308 	and.w	r3, r3, #8
 8017112:	2b00      	cmp	r3, #0
 8017114:	d014      	beq.n	8017140 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017116:	8afb      	ldrh	r3, [r7, #22]
 8017118:	4619      	mov	r1, r3
 801711a:	6878      	ldr	r0, [r7, #4]
 801711c:	f7f7 fdd4 	bl	800ecc8 <pbuf_remove_header>
 8017120:	4603      	mov	r3, r0
 8017122:	2b00      	cmp	r3, #0
 8017124:	d10e      	bne.n	8017144 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017126:	6839      	ldr	r1, [r7, #0]
 8017128:	6878      	ldr	r0, [r7, #4]
 801712a:	f7fe f8a1 	bl	8015270 <etharp_input>
      break;
 801712e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017130:	2300      	movs	r3, #0
 8017132:	e00c      	b.n	801714e <ethernet_input+0x10e>
    goto free_and_return;
 8017134:	bf00      	nop
 8017136:	e006      	b.n	8017146 <ethernet_input+0x106>
        goto free_and_return;
 8017138:	bf00      	nop
 801713a:	e004      	b.n	8017146 <ethernet_input+0x106>
        goto free_and_return;
 801713c:	bf00      	nop
 801713e:	e002      	b.n	8017146 <ethernet_input+0x106>
        goto free_and_return;
 8017140:	bf00      	nop
 8017142:	e000      	b.n	8017146 <ethernet_input+0x106>
        goto free_and_return;
 8017144:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f7f7 fe44 	bl	800edd4 <pbuf_free>
  return ERR_OK;
 801714c:	2300      	movs	r3, #0
}
 801714e:	4618      	mov	r0, r3
 8017150:	3718      	adds	r7, #24
 8017152:	46bd      	mov	sp, r7
 8017154:	bd80      	pop	{r7, pc}
 8017156:	bf00      	nop
 8017158:	0801c874 	.word	0x0801c874

0801715c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801715c:	b580      	push	{r7, lr}
 801715e:	b086      	sub	sp, #24
 8017160:	af00      	add	r7, sp, #0
 8017162:	60f8      	str	r0, [r7, #12]
 8017164:	60b9      	str	r1, [r7, #8]
 8017166:	607a      	str	r2, [r7, #4]
 8017168:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801716a:	8c3b      	ldrh	r3, [r7, #32]
 801716c:	4618      	mov	r0, r3
 801716e:	f7f6 f987 	bl	800d480 <lwip_htons>
 8017172:	4603      	mov	r3, r0
 8017174:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017176:	210e      	movs	r1, #14
 8017178:	68b8      	ldr	r0, [r7, #8]
 801717a:	f7f7 fd95 	bl	800eca8 <pbuf_add_header>
 801717e:	4603      	mov	r3, r0
 8017180:	2b00      	cmp	r3, #0
 8017182:	d125      	bne.n	80171d0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017184:	68bb      	ldr	r3, [r7, #8]
 8017186:	685b      	ldr	r3, [r3, #4]
 8017188:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	8afa      	ldrh	r2, [r7, #22]
 801718e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017190:	693b      	ldr	r3, [r7, #16]
 8017192:	2206      	movs	r2, #6
 8017194:	6839      	ldr	r1, [r7, #0]
 8017196:	4618      	mov	r0, r3
 8017198:	f000 fa69 	bl	801766e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801719c:	693b      	ldr	r3, [r7, #16]
 801719e:	3306      	adds	r3, #6
 80171a0:	2206      	movs	r2, #6
 80171a2:	6879      	ldr	r1, [r7, #4]
 80171a4:	4618      	mov	r0, r3
 80171a6:	f000 fa62 	bl	801766e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80171b0:	2b06      	cmp	r3, #6
 80171b2:	d006      	beq.n	80171c2 <ethernet_output+0x66>
 80171b4:	4b0a      	ldr	r3, [pc, #40]	; (80171e0 <ethernet_output+0x84>)
 80171b6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80171ba:	490a      	ldr	r1, [pc, #40]	; (80171e4 <ethernet_output+0x88>)
 80171bc:	480a      	ldr	r0, [pc, #40]	; (80171e8 <ethernet_output+0x8c>)
 80171be:	f000 fac7 	bl	8017750 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	699b      	ldr	r3, [r3, #24]
 80171c6:	68b9      	ldr	r1, [r7, #8]
 80171c8:	68f8      	ldr	r0, [r7, #12]
 80171ca:	4798      	blx	r3
 80171cc:	4603      	mov	r3, r0
 80171ce:	e002      	b.n	80171d6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80171d0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80171d2:	f06f 0301 	mvn.w	r3, #1
}
 80171d6:	4618      	mov	r0, r3
 80171d8:	3718      	adds	r7, #24
 80171da:	46bd      	mov	sp, r7
 80171dc:	bd80      	pop	{r7, pc}
 80171de:	bf00      	nop
 80171e0:	0801b13c 	.word	0x0801b13c
 80171e4:	0801b174 	.word	0x0801b174
 80171e8:	0801b1a8 	.word	0x0801b1a8

080171ec <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b086      	sub	sp, #24
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80171f6:	683b      	ldr	r3, [r7, #0]
 80171f8:	60bb      	str	r3, [r7, #8]
 80171fa:	2304      	movs	r3, #4
 80171fc:	60fb      	str	r3, [r7, #12]
 80171fe:	2300      	movs	r3, #0
 8017200:	613b      	str	r3, [r7, #16]
 8017202:	2300      	movs	r3, #0
 8017204:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017206:	f107 0308 	add.w	r3, r7, #8
 801720a:	2100      	movs	r1, #0
 801720c:	4618      	mov	r0, r3
 801720e:	f7f3 fa57 	bl	800a6c0 <osMessageCreate>
 8017212:	4602      	mov	r2, r0
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d102      	bne.n	8017226 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017220:	f04f 33ff 	mov.w	r3, #4294967295
 8017224:	e000      	b.n	8017228 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017226:	2300      	movs	r3, #0
}
 8017228:	4618      	mov	r0, r3
 801722a:	3718      	adds	r7, #24
 801722c:	46bd      	mov	sp, r7
 801722e:	bd80      	pop	{r7, pc}

08017230 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b084      	sub	sp, #16
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
 8017238:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	6839      	ldr	r1, [r7, #0]
 8017240:	2200      	movs	r2, #0
 8017242:	4618      	mov	r0, r3
 8017244:	f7f3 fa64 	bl	800a710 <osMessagePut>
 8017248:	4603      	mov	r3, r0
 801724a:	2b00      	cmp	r3, #0
 801724c:	d102      	bne.n	8017254 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801724e:	2300      	movs	r3, #0
 8017250:	73fb      	strb	r3, [r7, #15]
 8017252:	e001      	b.n	8017258 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017254:	23ff      	movs	r3, #255	; 0xff
 8017256:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017258:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801725c:	4618      	mov	r0, r3
 801725e:	3710      	adds	r7, #16
 8017260:	46bd      	mov	sp, r7
 8017262:	bd80      	pop	{r7, pc}

08017264 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b08c      	sub	sp, #48	; 0x30
 8017268:	af00      	add	r7, sp, #0
 801726a:	61f8      	str	r0, [r7, #28]
 801726c:	61b9      	str	r1, [r7, #24]
 801726e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017270:	f7f3 f899 	bl	800a3a6 <osKernelSysTick>
 8017274:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017276:	697b      	ldr	r3, [r7, #20]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d017      	beq.n	80172ac <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801727c:	69fb      	ldr	r3, [r7, #28]
 801727e:	6819      	ldr	r1, [r3, #0]
 8017280:	f107 0320 	add.w	r3, r7, #32
 8017284:	697a      	ldr	r2, [r7, #20]
 8017286:	4618      	mov	r0, r3
 8017288:	f7f3 fa82 	bl	800a790 <osMessageGet>

    if(event.status == osEventMessage)
 801728c:	6a3b      	ldr	r3, [r7, #32]
 801728e:	2b10      	cmp	r3, #16
 8017290:	d109      	bne.n	80172a6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017294:	461a      	mov	r2, r3
 8017296:	69bb      	ldr	r3, [r7, #24]
 8017298:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801729a:	f7f3 f884 	bl	800a3a6 <osKernelSysTick>
 801729e:	4602      	mov	r2, r0
 80172a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a2:	1ad3      	subs	r3, r2, r3
 80172a4:	e019      	b.n	80172da <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80172a6:	f04f 33ff 	mov.w	r3, #4294967295
 80172aa:	e016      	b.n	80172da <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80172ac:	69fb      	ldr	r3, [r7, #28]
 80172ae:	6819      	ldr	r1, [r3, #0]
 80172b0:	463b      	mov	r3, r7
 80172b2:	f04f 32ff 	mov.w	r2, #4294967295
 80172b6:	4618      	mov	r0, r3
 80172b8:	f7f3 fa6a 	bl	800a790 <osMessageGet>
 80172bc:	f107 0320 	add.w	r3, r7, #32
 80172c0:	463a      	mov	r2, r7
 80172c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80172c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80172c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ca:	461a      	mov	r2, r3
 80172cc:	69bb      	ldr	r3, [r7, #24]
 80172ce:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80172d0:	f7f3 f869 	bl	800a3a6 <osKernelSysTick>
 80172d4:	4602      	mov	r2, r0
 80172d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172d8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80172da:	4618      	mov	r0, r3
 80172dc:	3730      	adds	r7, #48	; 0x30
 80172de:	46bd      	mov	sp, r7
 80172e0:	bd80      	pop	{r7, pc}

080172e2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80172e2:	b480      	push	{r7}
 80172e4:	b083      	sub	sp, #12
 80172e6:	af00      	add	r7, sp, #0
 80172e8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d101      	bne.n	80172f6 <sys_mbox_valid+0x14>
    return 0;
 80172f2:	2300      	movs	r3, #0
 80172f4:	e000      	b.n	80172f8 <sys_mbox_valid+0x16>
  else
    return 1;
 80172f6:	2301      	movs	r3, #1
}
 80172f8:	4618      	mov	r0, r3
 80172fa:	370c      	adds	r7, #12
 80172fc:	46bd      	mov	sp, r7
 80172fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017302:	4770      	bx	lr

08017304 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017308:	4803      	ldr	r0, [pc, #12]	; (8017318 <sys_init+0x14>)
 801730a:	f7f3 f8bc 	bl	800a486 <osMutexCreate>
 801730e:	4603      	mov	r3, r0
 8017310:	4a02      	ldr	r2, [pc, #8]	; (801731c <sys_init+0x18>)
 8017312:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017314:	bf00      	nop
 8017316:	bd80      	pop	{r7, pc}
 8017318:	0801c884 	.word	0x0801c884
 801731c:	24007874 	.word	0x24007874

08017320 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017320:	b580      	push	{r7, lr}
 8017322:	b084      	sub	sp, #16
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017328:	2300      	movs	r3, #0
 801732a:	60bb      	str	r3, [r7, #8]
 801732c:	2300      	movs	r3, #0
 801732e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017330:	f107 0308 	add.w	r3, r7, #8
 8017334:	4618      	mov	r0, r3
 8017336:	f7f3 f8a6 	bl	800a486 <osMutexCreate>
 801733a:	4602      	mov	r2, r0
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d102      	bne.n	801734e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017348:	f04f 33ff 	mov.w	r3, #4294967295
 801734c:	e000      	b.n	8017350 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801734e:	2300      	movs	r3, #0
}
 8017350:	4618      	mov	r0, r3
 8017352:	3710      	adds	r7, #16
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}

08017358 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b082      	sub	sp, #8
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	f04f 31ff 	mov.w	r1, #4294967295
 8017368:	4618      	mov	r0, r3
 801736a:	f7f3 f8a5 	bl	800a4b8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801736e:	bf00      	nop
 8017370:	3708      	adds	r7, #8
 8017372:	46bd      	mov	sp, r7
 8017374:	bd80      	pop	{r7, pc}

08017376 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017376:	b580      	push	{r7, lr}
 8017378:	b082      	sub	sp, #8
 801737a:	af00      	add	r7, sp, #0
 801737c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	4618      	mov	r0, r3
 8017384:	f7f3 f8e6 	bl	800a554 <osMutexRelease>
}
 8017388:	bf00      	nop
 801738a:	3708      	adds	r7, #8
 801738c:	46bd      	mov	sp, r7
 801738e:	bd80      	pop	{r7, pc}

08017390 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017390:	b580      	push	{r7, lr}
 8017392:	b08c      	sub	sp, #48	; 0x30
 8017394:	af00      	add	r7, sp, #0
 8017396:	60f8      	str	r0, [r7, #12]
 8017398:	60b9      	str	r1, [r7, #8]
 801739a:	607a      	str	r2, [r7, #4]
 801739c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801739e:	f107 0314 	add.w	r3, r7, #20
 80173a2:	2200      	movs	r2, #0
 80173a4:	601a      	str	r2, [r3, #0]
 80173a6:	605a      	str	r2, [r3, #4]
 80173a8:	609a      	str	r2, [r3, #8]
 80173aa:	60da      	str	r2, [r3, #12]
 80173ac:	611a      	str	r2, [r3, #16]
 80173ae:	615a      	str	r2, [r3, #20]
 80173b0:	619a      	str	r2, [r3, #24]
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	617b      	str	r3, [r7, #20]
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	61bb      	str	r3, [r7, #24]
 80173ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173bc:	b21b      	sxth	r3, r3
 80173be:	83bb      	strh	r3, [r7, #28]
 80173c0:	683b      	ldr	r3, [r7, #0]
 80173c2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80173c4:	f107 0314 	add.w	r3, r7, #20
 80173c8:	6879      	ldr	r1, [r7, #4]
 80173ca:	4618      	mov	r0, r3
 80173cc:	f7f2 fffb 	bl	800a3c6 <osThreadCreate>
 80173d0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	3730      	adds	r7, #48	; 0x30
 80173d6:	46bd      	mov	sp, r7
 80173d8:	bd80      	pop	{r7, pc}
	...

080173dc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80173e0:	4b04      	ldr	r3, [pc, #16]	; (80173f4 <sys_arch_protect+0x18>)
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	f04f 31ff 	mov.w	r1, #4294967295
 80173e8:	4618      	mov	r0, r3
 80173ea:	f7f3 f865 	bl	800a4b8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80173ee:	2301      	movs	r3, #1
}
 80173f0:	4618      	mov	r0, r3
 80173f2:	bd80      	pop	{r7, pc}
 80173f4:	24007874 	.word	0x24007874

080173f8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b082      	sub	sp, #8
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017400:	4b04      	ldr	r3, [pc, #16]	; (8017414 <sys_arch_unprotect+0x1c>)
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	4618      	mov	r0, r3
 8017406:	f7f3 f8a5 	bl	800a554 <osMutexRelease>
}
 801740a:	bf00      	nop
 801740c:	3708      	adds	r7, #8
 801740e:	46bd      	mov	sp, r7
 8017410:	bd80      	pop	{r7, pc}
 8017412:	bf00      	nop
 8017414:	24007874 	.word	0x24007874

08017418 <std>:
 8017418:	2300      	movs	r3, #0
 801741a:	b510      	push	{r4, lr}
 801741c:	4604      	mov	r4, r0
 801741e:	e9c0 3300 	strd	r3, r3, [r0]
 8017422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017426:	6083      	str	r3, [r0, #8]
 8017428:	8181      	strh	r1, [r0, #12]
 801742a:	6643      	str	r3, [r0, #100]	; 0x64
 801742c:	81c2      	strh	r2, [r0, #14]
 801742e:	6183      	str	r3, [r0, #24]
 8017430:	4619      	mov	r1, r3
 8017432:	2208      	movs	r2, #8
 8017434:	305c      	adds	r0, #92	; 0x5c
 8017436:	f000 f928 	bl	801768a <memset>
 801743a:	4b05      	ldr	r3, [pc, #20]	; (8017450 <std+0x38>)
 801743c:	6263      	str	r3, [r4, #36]	; 0x24
 801743e:	4b05      	ldr	r3, [pc, #20]	; (8017454 <std+0x3c>)
 8017440:	62a3      	str	r3, [r4, #40]	; 0x28
 8017442:	4b05      	ldr	r3, [pc, #20]	; (8017458 <std+0x40>)
 8017444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017446:	4b05      	ldr	r3, [pc, #20]	; (801745c <std+0x44>)
 8017448:	6224      	str	r4, [r4, #32]
 801744a:	6323      	str	r3, [r4, #48]	; 0x30
 801744c:	bd10      	pop	{r4, pc}
 801744e:	bf00      	nop
 8017450:	080178f5 	.word	0x080178f5
 8017454:	08017917 	.word	0x08017917
 8017458:	0801794f 	.word	0x0801794f
 801745c:	08017973 	.word	0x08017973

08017460 <_cleanup_r>:
 8017460:	4901      	ldr	r1, [pc, #4]	; (8017468 <_cleanup_r+0x8>)
 8017462:	f000 b8af 	b.w	80175c4 <_fwalk_reent>
 8017466:	bf00      	nop
 8017468:	08017b09 	.word	0x08017b09

0801746c <__sfmoreglue>:
 801746c:	b570      	push	{r4, r5, r6, lr}
 801746e:	1e4a      	subs	r2, r1, #1
 8017470:	2568      	movs	r5, #104	; 0x68
 8017472:	4355      	muls	r5, r2
 8017474:	460e      	mov	r6, r1
 8017476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801747a:	f000 f90f 	bl	801769c <_malloc_r>
 801747e:	4604      	mov	r4, r0
 8017480:	b140      	cbz	r0, 8017494 <__sfmoreglue+0x28>
 8017482:	2100      	movs	r1, #0
 8017484:	e9c0 1600 	strd	r1, r6, [r0]
 8017488:	300c      	adds	r0, #12
 801748a:	60a0      	str	r0, [r4, #8]
 801748c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017490:	f000 f8fb 	bl	801768a <memset>
 8017494:	4620      	mov	r0, r4
 8017496:	bd70      	pop	{r4, r5, r6, pc}

08017498 <__sfp_lock_acquire>:
 8017498:	4801      	ldr	r0, [pc, #4]	; (80174a0 <__sfp_lock_acquire+0x8>)
 801749a:	f000 b8d8 	b.w	801764e <__retarget_lock_acquire_recursive>
 801749e:	bf00      	nop
 80174a0:	24007880 	.word	0x24007880

080174a4 <__sfp_lock_release>:
 80174a4:	4801      	ldr	r0, [pc, #4]	; (80174ac <__sfp_lock_release+0x8>)
 80174a6:	f000 b8d3 	b.w	8017650 <__retarget_lock_release_recursive>
 80174aa:	bf00      	nop
 80174ac:	24007880 	.word	0x24007880

080174b0 <__sinit_lock_acquire>:
 80174b0:	4801      	ldr	r0, [pc, #4]	; (80174b8 <__sinit_lock_acquire+0x8>)
 80174b2:	f000 b8cc 	b.w	801764e <__retarget_lock_acquire_recursive>
 80174b6:	bf00      	nop
 80174b8:	2400787b 	.word	0x2400787b

080174bc <__sinit_lock_release>:
 80174bc:	4801      	ldr	r0, [pc, #4]	; (80174c4 <__sinit_lock_release+0x8>)
 80174be:	f000 b8c7 	b.w	8017650 <__retarget_lock_release_recursive>
 80174c2:	bf00      	nop
 80174c4:	2400787b 	.word	0x2400787b

080174c8 <__sinit>:
 80174c8:	b510      	push	{r4, lr}
 80174ca:	4604      	mov	r4, r0
 80174cc:	f7ff fff0 	bl	80174b0 <__sinit_lock_acquire>
 80174d0:	69a3      	ldr	r3, [r4, #24]
 80174d2:	b11b      	cbz	r3, 80174dc <__sinit+0x14>
 80174d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174d8:	f7ff bff0 	b.w	80174bc <__sinit_lock_release>
 80174dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80174e0:	6523      	str	r3, [r4, #80]	; 0x50
 80174e2:	4b13      	ldr	r3, [pc, #76]	; (8017530 <__sinit+0x68>)
 80174e4:	4a13      	ldr	r2, [pc, #76]	; (8017534 <__sinit+0x6c>)
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80174ea:	42a3      	cmp	r3, r4
 80174ec:	bf04      	itt	eq
 80174ee:	2301      	moveq	r3, #1
 80174f0:	61a3      	streq	r3, [r4, #24]
 80174f2:	4620      	mov	r0, r4
 80174f4:	f000 f820 	bl	8017538 <__sfp>
 80174f8:	6060      	str	r0, [r4, #4]
 80174fa:	4620      	mov	r0, r4
 80174fc:	f000 f81c 	bl	8017538 <__sfp>
 8017500:	60a0      	str	r0, [r4, #8]
 8017502:	4620      	mov	r0, r4
 8017504:	f000 f818 	bl	8017538 <__sfp>
 8017508:	2200      	movs	r2, #0
 801750a:	60e0      	str	r0, [r4, #12]
 801750c:	2104      	movs	r1, #4
 801750e:	6860      	ldr	r0, [r4, #4]
 8017510:	f7ff ff82 	bl	8017418 <std>
 8017514:	68a0      	ldr	r0, [r4, #8]
 8017516:	2201      	movs	r2, #1
 8017518:	2109      	movs	r1, #9
 801751a:	f7ff ff7d 	bl	8017418 <std>
 801751e:	68e0      	ldr	r0, [r4, #12]
 8017520:	2202      	movs	r2, #2
 8017522:	2112      	movs	r1, #18
 8017524:	f7ff ff78 	bl	8017418 <std>
 8017528:	2301      	movs	r3, #1
 801752a:	61a3      	str	r3, [r4, #24]
 801752c:	e7d2      	b.n	80174d4 <__sinit+0xc>
 801752e:	bf00      	nop
 8017530:	0801c8ec 	.word	0x0801c8ec
 8017534:	08017461 	.word	0x08017461

08017538 <__sfp>:
 8017538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801753a:	4607      	mov	r7, r0
 801753c:	f7ff ffac 	bl	8017498 <__sfp_lock_acquire>
 8017540:	4b1e      	ldr	r3, [pc, #120]	; (80175bc <__sfp+0x84>)
 8017542:	681e      	ldr	r6, [r3, #0]
 8017544:	69b3      	ldr	r3, [r6, #24]
 8017546:	b913      	cbnz	r3, 801754e <__sfp+0x16>
 8017548:	4630      	mov	r0, r6
 801754a:	f7ff ffbd 	bl	80174c8 <__sinit>
 801754e:	3648      	adds	r6, #72	; 0x48
 8017550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017554:	3b01      	subs	r3, #1
 8017556:	d503      	bpl.n	8017560 <__sfp+0x28>
 8017558:	6833      	ldr	r3, [r6, #0]
 801755a:	b30b      	cbz	r3, 80175a0 <__sfp+0x68>
 801755c:	6836      	ldr	r6, [r6, #0]
 801755e:	e7f7      	b.n	8017550 <__sfp+0x18>
 8017560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017564:	b9d5      	cbnz	r5, 801759c <__sfp+0x64>
 8017566:	4b16      	ldr	r3, [pc, #88]	; (80175c0 <__sfp+0x88>)
 8017568:	60e3      	str	r3, [r4, #12]
 801756a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801756e:	6665      	str	r5, [r4, #100]	; 0x64
 8017570:	f000 f86c 	bl	801764c <__retarget_lock_init_recursive>
 8017574:	f7ff ff96 	bl	80174a4 <__sfp_lock_release>
 8017578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801757c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017580:	6025      	str	r5, [r4, #0]
 8017582:	61a5      	str	r5, [r4, #24]
 8017584:	2208      	movs	r2, #8
 8017586:	4629      	mov	r1, r5
 8017588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801758c:	f000 f87d 	bl	801768a <memset>
 8017590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017598:	4620      	mov	r0, r4
 801759a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801759c:	3468      	adds	r4, #104	; 0x68
 801759e:	e7d9      	b.n	8017554 <__sfp+0x1c>
 80175a0:	2104      	movs	r1, #4
 80175a2:	4638      	mov	r0, r7
 80175a4:	f7ff ff62 	bl	801746c <__sfmoreglue>
 80175a8:	4604      	mov	r4, r0
 80175aa:	6030      	str	r0, [r6, #0]
 80175ac:	2800      	cmp	r0, #0
 80175ae:	d1d5      	bne.n	801755c <__sfp+0x24>
 80175b0:	f7ff ff78 	bl	80174a4 <__sfp_lock_release>
 80175b4:	230c      	movs	r3, #12
 80175b6:	603b      	str	r3, [r7, #0]
 80175b8:	e7ee      	b.n	8017598 <__sfp+0x60>
 80175ba:	bf00      	nop
 80175bc:	0801c8ec 	.word	0x0801c8ec
 80175c0:	ffff0001 	.word	0xffff0001

080175c4 <_fwalk_reent>:
 80175c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175c8:	4606      	mov	r6, r0
 80175ca:	4688      	mov	r8, r1
 80175cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80175d0:	2700      	movs	r7, #0
 80175d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80175d6:	f1b9 0901 	subs.w	r9, r9, #1
 80175da:	d505      	bpl.n	80175e8 <_fwalk_reent+0x24>
 80175dc:	6824      	ldr	r4, [r4, #0]
 80175de:	2c00      	cmp	r4, #0
 80175e0:	d1f7      	bne.n	80175d2 <_fwalk_reent+0xe>
 80175e2:	4638      	mov	r0, r7
 80175e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175e8:	89ab      	ldrh	r3, [r5, #12]
 80175ea:	2b01      	cmp	r3, #1
 80175ec:	d907      	bls.n	80175fe <_fwalk_reent+0x3a>
 80175ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80175f2:	3301      	adds	r3, #1
 80175f4:	d003      	beq.n	80175fe <_fwalk_reent+0x3a>
 80175f6:	4629      	mov	r1, r5
 80175f8:	4630      	mov	r0, r6
 80175fa:	47c0      	blx	r8
 80175fc:	4307      	orrs	r7, r0
 80175fe:	3568      	adds	r5, #104	; 0x68
 8017600:	e7e9      	b.n	80175d6 <_fwalk_reent+0x12>
	...

08017604 <__libc_init_array>:
 8017604:	b570      	push	{r4, r5, r6, lr}
 8017606:	4d0d      	ldr	r5, [pc, #52]	; (801763c <__libc_init_array+0x38>)
 8017608:	4c0d      	ldr	r4, [pc, #52]	; (8017640 <__libc_init_array+0x3c>)
 801760a:	1b64      	subs	r4, r4, r5
 801760c:	10a4      	asrs	r4, r4, #2
 801760e:	2600      	movs	r6, #0
 8017610:	42a6      	cmp	r6, r4
 8017612:	d109      	bne.n	8017628 <__libc_init_array+0x24>
 8017614:	4d0b      	ldr	r5, [pc, #44]	; (8017644 <__libc_init_array+0x40>)
 8017616:	4c0c      	ldr	r4, [pc, #48]	; (8017648 <__libc_init_array+0x44>)
 8017618:	f000 ffcc 	bl	80185b4 <_init>
 801761c:	1b64      	subs	r4, r4, r5
 801761e:	10a4      	asrs	r4, r4, #2
 8017620:	2600      	movs	r6, #0
 8017622:	42a6      	cmp	r6, r4
 8017624:	d105      	bne.n	8017632 <__libc_init_array+0x2e>
 8017626:	bd70      	pop	{r4, r5, r6, pc}
 8017628:	f855 3b04 	ldr.w	r3, [r5], #4
 801762c:	4798      	blx	r3
 801762e:	3601      	adds	r6, #1
 8017630:	e7ee      	b.n	8017610 <__libc_init_array+0xc>
 8017632:	f855 3b04 	ldr.w	r3, [r5], #4
 8017636:	4798      	blx	r3
 8017638:	3601      	adds	r6, #1
 801763a:	e7f2      	b.n	8017622 <__libc_init_array+0x1e>
 801763c:	0801c9e0 	.word	0x0801c9e0
 8017640:	0801c9e0 	.word	0x0801c9e0
 8017644:	0801c9e0 	.word	0x0801c9e0
 8017648:	0801c9e4 	.word	0x0801c9e4

0801764c <__retarget_lock_init_recursive>:
 801764c:	4770      	bx	lr

0801764e <__retarget_lock_acquire_recursive>:
 801764e:	4770      	bx	lr

08017650 <__retarget_lock_release_recursive>:
 8017650:	4770      	bx	lr

08017652 <memcmp>:
 8017652:	b530      	push	{r4, r5, lr}
 8017654:	3901      	subs	r1, #1
 8017656:	2400      	movs	r4, #0
 8017658:	42a2      	cmp	r2, r4
 801765a:	d101      	bne.n	8017660 <memcmp+0xe>
 801765c:	2000      	movs	r0, #0
 801765e:	e005      	b.n	801766c <memcmp+0x1a>
 8017660:	5d03      	ldrb	r3, [r0, r4]
 8017662:	3401      	adds	r4, #1
 8017664:	5d0d      	ldrb	r5, [r1, r4]
 8017666:	42ab      	cmp	r3, r5
 8017668:	d0f6      	beq.n	8017658 <memcmp+0x6>
 801766a:	1b58      	subs	r0, r3, r5
 801766c:	bd30      	pop	{r4, r5, pc}

0801766e <memcpy>:
 801766e:	440a      	add	r2, r1
 8017670:	4291      	cmp	r1, r2
 8017672:	f100 33ff 	add.w	r3, r0, #4294967295
 8017676:	d100      	bne.n	801767a <memcpy+0xc>
 8017678:	4770      	bx	lr
 801767a:	b510      	push	{r4, lr}
 801767c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017680:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017684:	4291      	cmp	r1, r2
 8017686:	d1f9      	bne.n	801767c <memcpy+0xe>
 8017688:	bd10      	pop	{r4, pc}

0801768a <memset>:
 801768a:	4402      	add	r2, r0
 801768c:	4603      	mov	r3, r0
 801768e:	4293      	cmp	r3, r2
 8017690:	d100      	bne.n	8017694 <memset+0xa>
 8017692:	4770      	bx	lr
 8017694:	f803 1b01 	strb.w	r1, [r3], #1
 8017698:	e7f9      	b.n	801768e <memset+0x4>
	...

0801769c <_malloc_r>:
 801769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801769e:	1ccd      	adds	r5, r1, #3
 80176a0:	f025 0503 	bic.w	r5, r5, #3
 80176a4:	3508      	adds	r5, #8
 80176a6:	2d0c      	cmp	r5, #12
 80176a8:	bf38      	it	cc
 80176aa:	250c      	movcc	r5, #12
 80176ac:	2d00      	cmp	r5, #0
 80176ae:	4606      	mov	r6, r0
 80176b0:	db01      	blt.n	80176b6 <_malloc_r+0x1a>
 80176b2:	42a9      	cmp	r1, r5
 80176b4:	d903      	bls.n	80176be <_malloc_r+0x22>
 80176b6:	230c      	movs	r3, #12
 80176b8:	6033      	str	r3, [r6, #0]
 80176ba:	2000      	movs	r0, #0
 80176bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176be:	f000 fa8b 	bl	8017bd8 <__malloc_lock>
 80176c2:	4921      	ldr	r1, [pc, #132]	; (8017748 <_malloc_r+0xac>)
 80176c4:	680a      	ldr	r2, [r1, #0]
 80176c6:	4614      	mov	r4, r2
 80176c8:	b99c      	cbnz	r4, 80176f2 <_malloc_r+0x56>
 80176ca:	4f20      	ldr	r7, [pc, #128]	; (801774c <_malloc_r+0xb0>)
 80176cc:	683b      	ldr	r3, [r7, #0]
 80176ce:	b923      	cbnz	r3, 80176da <_malloc_r+0x3e>
 80176d0:	4621      	mov	r1, r4
 80176d2:	4630      	mov	r0, r6
 80176d4:	f000 f8fe 	bl	80178d4 <_sbrk_r>
 80176d8:	6038      	str	r0, [r7, #0]
 80176da:	4629      	mov	r1, r5
 80176dc:	4630      	mov	r0, r6
 80176de:	f000 f8f9 	bl	80178d4 <_sbrk_r>
 80176e2:	1c43      	adds	r3, r0, #1
 80176e4:	d123      	bne.n	801772e <_malloc_r+0x92>
 80176e6:	230c      	movs	r3, #12
 80176e8:	6033      	str	r3, [r6, #0]
 80176ea:	4630      	mov	r0, r6
 80176ec:	f000 fa7a 	bl	8017be4 <__malloc_unlock>
 80176f0:	e7e3      	b.n	80176ba <_malloc_r+0x1e>
 80176f2:	6823      	ldr	r3, [r4, #0]
 80176f4:	1b5b      	subs	r3, r3, r5
 80176f6:	d417      	bmi.n	8017728 <_malloc_r+0x8c>
 80176f8:	2b0b      	cmp	r3, #11
 80176fa:	d903      	bls.n	8017704 <_malloc_r+0x68>
 80176fc:	6023      	str	r3, [r4, #0]
 80176fe:	441c      	add	r4, r3
 8017700:	6025      	str	r5, [r4, #0]
 8017702:	e004      	b.n	801770e <_malloc_r+0x72>
 8017704:	6863      	ldr	r3, [r4, #4]
 8017706:	42a2      	cmp	r2, r4
 8017708:	bf0c      	ite	eq
 801770a:	600b      	streq	r3, [r1, #0]
 801770c:	6053      	strne	r3, [r2, #4]
 801770e:	4630      	mov	r0, r6
 8017710:	f000 fa68 	bl	8017be4 <__malloc_unlock>
 8017714:	f104 000b 	add.w	r0, r4, #11
 8017718:	1d23      	adds	r3, r4, #4
 801771a:	f020 0007 	bic.w	r0, r0, #7
 801771e:	1ac2      	subs	r2, r0, r3
 8017720:	d0cc      	beq.n	80176bc <_malloc_r+0x20>
 8017722:	1a1b      	subs	r3, r3, r0
 8017724:	50a3      	str	r3, [r4, r2]
 8017726:	e7c9      	b.n	80176bc <_malloc_r+0x20>
 8017728:	4622      	mov	r2, r4
 801772a:	6864      	ldr	r4, [r4, #4]
 801772c:	e7cc      	b.n	80176c8 <_malloc_r+0x2c>
 801772e:	1cc4      	adds	r4, r0, #3
 8017730:	f024 0403 	bic.w	r4, r4, #3
 8017734:	42a0      	cmp	r0, r4
 8017736:	d0e3      	beq.n	8017700 <_malloc_r+0x64>
 8017738:	1a21      	subs	r1, r4, r0
 801773a:	4630      	mov	r0, r6
 801773c:	f000 f8ca 	bl	80178d4 <_sbrk_r>
 8017740:	3001      	adds	r0, #1
 8017742:	d1dd      	bne.n	8017700 <_malloc_r+0x64>
 8017744:	e7cf      	b.n	80176e6 <_malloc_r+0x4a>
 8017746:	bf00      	nop
 8017748:	24004268 	.word	0x24004268
 801774c:	2400426c 	.word	0x2400426c

08017750 <iprintf>:
 8017750:	b40f      	push	{r0, r1, r2, r3}
 8017752:	4b0a      	ldr	r3, [pc, #40]	; (801777c <iprintf+0x2c>)
 8017754:	b513      	push	{r0, r1, r4, lr}
 8017756:	681c      	ldr	r4, [r3, #0]
 8017758:	b124      	cbz	r4, 8017764 <iprintf+0x14>
 801775a:	69a3      	ldr	r3, [r4, #24]
 801775c:	b913      	cbnz	r3, 8017764 <iprintf+0x14>
 801775e:	4620      	mov	r0, r4
 8017760:	f7ff feb2 	bl	80174c8 <__sinit>
 8017764:	ab05      	add	r3, sp, #20
 8017766:	9a04      	ldr	r2, [sp, #16]
 8017768:	68a1      	ldr	r1, [r4, #8]
 801776a:	9301      	str	r3, [sp, #4]
 801776c:	4620      	mov	r0, r4
 801776e:	f000 fab9 	bl	8017ce4 <_vfiprintf_r>
 8017772:	b002      	add	sp, #8
 8017774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017778:	b004      	add	sp, #16
 801777a:	4770      	bx	lr
 801777c:	24000044 	.word	0x24000044

08017780 <rand>:
 8017780:	4b17      	ldr	r3, [pc, #92]	; (80177e0 <rand+0x60>)
 8017782:	b510      	push	{r4, lr}
 8017784:	681c      	ldr	r4, [r3, #0]
 8017786:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017788:	b9b3      	cbnz	r3, 80177b8 <rand+0x38>
 801778a:	2018      	movs	r0, #24
 801778c:	f000 fa1c 	bl	8017bc8 <malloc>
 8017790:	63a0      	str	r0, [r4, #56]	; 0x38
 8017792:	b928      	cbnz	r0, 80177a0 <rand+0x20>
 8017794:	4602      	mov	r2, r0
 8017796:	4b13      	ldr	r3, [pc, #76]	; (80177e4 <rand+0x64>)
 8017798:	4813      	ldr	r0, [pc, #76]	; (80177e8 <rand+0x68>)
 801779a:	214e      	movs	r1, #78	; 0x4e
 801779c:	f000 f900 	bl	80179a0 <__assert_func>
 80177a0:	4a12      	ldr	r2, [pc, #72]	; (80177ec <rand+0x6c>)
 80177a2:	4b13      	ldr	r3, [pc, #76]	; (80177f0 <rand+0x70>)
 80177a4:	e9c0 2300 	strd	r2, r3, [r0]
 80177a8:	4b12      	ldr	r3, [pc, #72]	; (80177f4 <rand+0x74>)
 80177aa:	6083      	str	r3, [r0, #8]
 80177ac:	230b      	movs	r3, #11
 80177ae:	8183      	strh	r3, [r0, #12]
 80177b0:	2201      	movs	r2, #1
 80177b2:	2300      	movs	r3, #0
 80177b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80177b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80177ba:	480f      	ldr	r0, [pc, #60]	; (80177f8 <rand+0x78>)
 80177bc:	690a      	ldr	r2, [r1, #16]
 80177be:	694b      	ldr	r3, [r1, #20]
 80177c0:	4c0e      	ldr	r4, [pc, #56]	; (80177fc <rand+0x7c>)
 80177c2:	4350      	muls	r0, r2
 80177c4:	fb04 0003 	mla	r0, r4, r3, r0
 80177c8:	fba2 3404 	umull	r3, r4, r2, r4
 80177cc:	1c5a      	adds	r2, r3, #1
 80177ce:	4404      	add	r4, r0
 80177d0:	f144 0000 	adc.w	r0, r4, #0
 80177d4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80177d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80177dc:	bd10      	pop	{r4, pc}
 80177de:	bf00      	nop
 80177e0:	24000044 	.word	0x24000044
 80177e4:	0801c8f0 	.word	0x0801c8f0
 80177e8:	0801c907 	.word	0x0801c907
 80177ec:	abcd330e 	.word	0xabcd330e
 80177f0:	e66d1234 	.word	0xe66d1234
 80177f4:	0005deec 	.word	0x0005deec
 80177f8:	5851f42d 	.word	0x5851f42d
 80177fc:	4c957f2d 	.word	0x4c957f2d

08017800 <cleanup_glue>:
 8017800:	b538      	push	{r3, r4, r5, lr}
 8017802:	460c      	mov	r4, r1
 8017804:	6809      	ldr	r1, [r1, #0]
 8017806:	4605      	mov	r5, r0
 8017808:	b109      	cbz	r1, 801780e <cleanup_glue+0xe>
 801780a:	f7ff fff9 	bl	8017800 <cleanup_glue>
 801780e:	4621      	mov	r1, r4
 8017810:	4628      	mov	r0, r5
 8017812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017816:	f000 b9eb 	b.w	8017bf0 <_free_r>
	...

0801781c <_reclaim_reent>:
 801781c:	4b2c      	ldr	r3, [pc, #176]	; (80178d0 <_reclaim_reent+0xb4>)
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	4283      	cmp	r3, r0
 8017822:	b570      	push	{r4, r5, r6, lr}
 8017824:	4604      	mov	r4, r0
 8017826:	d051      	beq.n	80178cc <_reclaim_reent+0xb0>
 8017828:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801782a:	b143      	cbz	r3, 801783e <_reclaim_reent+0x22>
 801782c:	68db      	ldr	r3, [r3, #12]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d14a      	bne.n	80178c8 <_reclaim_reent+0xac>
 8017832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017834:	6819      	ldr	r1, [r3, #0]
 8017836:	b111      	cbz	r1, 801783e <_reclaim_reent+0x22>
 8017838:	4620      	mov	r0, r4
 801783a:	f000 f9d9 	bl	8017bf0 <_free_r>
 801783e:	6961      	ldr	r1, [r4, #20]
 8017840:	b111      	cbz	r1, 8017848 <_reclaim_reent+0x2c>
 8017842:	4620      	mov	r0, r4
 8017844:	f000 f9d4 	bl	8017bf0 <_free_r>
 8017848:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801784a:	b111      	cbz	r1, 8017852 <_reclaim_reent+0x36>
 801784c:	4620      	mov	r0, r4
 801784e:	f000 f9cf 	bl	8017bf0 <_free_r>
 8017852:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017854:	b111      	cbz	r1, 801785c <_reclaim_reent+0x40>
 8017856:	4620      	mov	r0, r4
 8017858:	f000 f9ca 	bl	8017bf0 <_free_r>
 801785c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801785e:	b111      	cbz	r1, 8017866 <_reclaim_reent+0x4a>
 8017860:	4620      	mov	r0, r4
 8017862:	f000 f9c5 	bl	8017bf0 <_free_r>
 8017866:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017868:	b111      	cbz	r1, 8017870 <_reclaim_reent+0x54>
 801786a:	4620      	mov	r0, r4
 801786c:	f000 f9c0 	bl	8017bf0 <_free_r>
 8017870:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017872:	b111      	cbz	r1, 801787a <_reclaim_reent+0x5e>
 8017874:	4620      	mov	r0, r4
 8017876:	f000 f9bb 	bl	8017bf0 <_free_r>
 801787a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801787c:	b111      	cbz	r1, 8017884 <_reclaim_reent+0x68>
 801787e:	4620      	mov	r0, r4
 8017880:	f000 f9b6 	bl	8017bf0 <_free_r>
 8017884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017886:	b111      	cbz	r1, 801788e <_reclaim_reent+0x72>
 8017888:	4620      	mov	r0, r4
 801788a:	f000 f9b1 	bl	8017bf0 <_free_r>
 801788e:	69a3      	ldr	r3, [r4, #24]
 8017890:	b1e3      	cbz	r3, 80178cc <_reclaim_reent+0xb0>
 8017892:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017894:	4620      	mov	r0, r4
 8017896:	4798      	blx	r3
 8017898:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801789a:	b1b9      	cbz	r1, 80178cc <_reclaim_reent+0xb0>
 801789c:	4620      	mov	r0, r4
 801789e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178a2:	f7ff bfad 	b.w	8017800 <cleanup_glue>
 80178a6:	5949      	ldr	r1, [r1, r5]
 80178a8:	b941      	cbnz	r1, 80178bc <_reclaim_reent+0xa0>
 80178aa:	3504      	adds	r5, #4
 80178ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178ae:	2d80      	cmp	r5, #128	; 0x80
 80178b0:	68d9      	ldr	r1, [r3, #12]
 80178b2:	d1f8      	bne.n	80178a6 <_reclaim_reent+0x8a>
 80178b4:	4620      	mov	r0, r4
 80178b6:	f000 f99b 	bl	8017bf0 <_free_r>
 80178ba:	e7ba      	b.n	8017832 <_reclaim_reent+0x16>
 80178bc:	680e      	ldr	r6, [r1, #0]
 80178be:	4620      	mov	r0, r4
 80178c0:	f000 f996 	bl	8017bf0 <_free_r>
 80178c4:	4631      	mov	r1, r6
 80178c6:	e7ef      	b.n	80178a8 <_reclaim_reent+0x8c>
 80178c8:	2500      	movs	r5, #0
 80178ca:	e7ef      	b.n	80178ac <_reclaim_reent+0x90>
 80178cc:	bd70      	pop	{r4, r5, r6, pc}
 80178ce:	bf00      	nop
 80178d0:	24000044 	.word	0x24000044

080178d4 <_sbrk_r>:
 80178d4:	b538      	push	{r3, r4, r5, lr}
 80178d6:	4d06      	ldr	r5, [pc, #24]	; (80178f0 <_sbrk_r+0x1c>)
 80178d8:	2300      	movs	r3, #0
 80178da:	4604      	mov	r4, r0
 80178dc:	4608      	mov	r0, r1
 80178de:	602b      	str	r3, [r5, #0]
 80178e0:	f7ea f928 	bl	8001b34 <_sbrk>
 80178e4:	1c43      	adds	r3, r0, #1
 80178e6:	d102      	bne.n	80178ee <_sbrk_r+0x1a>
 80178e8:	682b      	ldr	r3, [r5, #0]
 80178ea:	b103      	cbz	r3, 80178ee <_sbrk_r+0x1a>
 80178ec:	6023      	str	r3, [r4, #0]
 80178ee:	bd38      	pop	{r3, r4, r5, pc}
 80178f0:	24007870 	.word	0x24007870

080178f4 <__sread>:
 80178f4:	b510      	push	{r4, lr}
 80178f6:	460c      	mov	r4, r1
 80178f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178fc:	f000 fcb6 	bl	801826c <_read_r>
 8017900:	2800      	cmp	r0, #0
 8017902:	bfab      	itete	ge
 8017904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017906:	89a3      	ldrhlt	r3, [r4, #12]
 8017908:	181b      	addge	r3, r3, r0
 801790a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801790e:	bfac      	ite	ge
 8017910:	6563      	strge	r3, [r4, #84]	; 0x54
 8017912:	81a3      	strhlt	r3, [r4, #12]
 8017914:	bd10      	pop	{r4, pc}

08017916 <__swrite>:
 8017916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801791a:	461f      	mov	r7, r3
 801791c:	898b      	ldrh	r3, [r1, #12]
 801791e:	05db      	lsls	r3, r3, #23
 8017920:	4605      	mov	r5, r0
 8017922:	460c      	mov	r4, r1
 8017924:	4616      	mov	r6, r2
 8017926:	d505      	bpl.n	8017934 <__swrite+0x1e>
 8017928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801792c:	2302      	movs	r3, #2
 801792e:	2200      	movs	r2, #0
 8017930:	f000 f938 	bl	8017ba4 <_lseek_r>
 8017934:	89a3      	ldrh	r3, [r4, #12]
 8017936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801793a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801793e:	81a3      	strh	r3, [r4, #12]
 8017940:	4632      	mov	r2, r6
 8017942:	463b      	mov	r3, r7
 8017944:	4628      	mov	r0, r5
 8017946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801794a:	f000 b817 	b.w	801797c <_write_r>

0801794e <__sseek>:
 801794e:	b510      	push	{r4, lr}
 8017950:	460c      	mov	r4, r1
 8017952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017956:	f000 f925 	bl	8017ba4 <_lseek_r>
 801795a:	1c43      	adds	r3, r0, #1
 801795c:	89a3      	ldrh	r3, [r4, #12]
 801795e:	bf15      	itete	ne
 8017960:	6560      	strne	r0, [r4, #84]	; 0x54
 8017962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801796a:	81a3      	strheq	r3, [r4, #12]
 801796c:	bf18      	it	ne
 801796e:	81a3      	strhne	r3, [r4, #12]
 8017970:	bd10      	pop	{r4, pc}

08017972 <__sclose>:
 8017972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017976:	f000 b831 	b.w	80179dc <_close_r>
	...

0801797c <_write_r>:
 801797c:	b538      	push	{r3, r4, r5, lr}
 801797e:	4d07      	ldr	r5, [pc, #28]	; (801799c <_write_r+0x20>)
 8017980:	4604      	mov	r4, r0
 8017982:	4608      	mov	r0, r1
 8017984:	4611      	mov	r1, r2
 8017986:	2200      	movs	r2, #0
 8017988:	602a      	str	r2, [r5, #0]
 801798a:	461a      	mov	r2, r3
 801798c:	f7ea f881 	bl	8001a92 <_write>
 8017990:	1c43      	adds	r3, r0, #1
 8017992:	d102      	bne.n	801799a <_write_r+0x1e>
 8017994:	682b      	ldr	r3, [r5, #0]
 8017996:	b103      	cbz	r3, 801799a <_write_r+0x1e>
 8017998:	6023      	str	r3, [r4, #0]
 801799a:	bd38      	pop	{r3, r4, r5, pc}
 801799c:	24007870 	.word	0x24007870

080179a0 <__assert_func>:
 80179a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80179a2:	4614      	mov	r4, r2
 80179a4:	461a      	mov	r2, r3
 80179a6:	4b09      	ldr	r3, [pc, #36]	; (80179cc <__assert_func+0x2c>)
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	4605      	mov	r5, r0
 80179ac:	68d8      	ldr	r0, [r3, #12]
 80179ae:	b14c      	cbz	r4, 80179c4 <__assert_func+0x24>
 80179b0:	4b07      	ldr	r3, [pc, #28]	; (80179d0 <__assert_func+0x30>)
 80179b2:	9100      	str	r1, [sp, #0]
 80179b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80179b8:	4906      	ldr	r1, [pc, #24]	; (80179d4 <__assert_func+0x34>)
 80179ba:	462b      	mov	r3, r5
 80179bc:	f000 f8e0 	bl	8017b80 <fiprintf>
 80179c0:	f000 fd26 	bl	8018410 <abort>
 80179c4:	4b04      	ldr	r3, [pc, #16]	; (80179d8 <__assert_func+0x38>)
 80179c6:	461c      	mov	r4, r3
 80179c8:	e7f3      	b.n	80179b2 <__assert_func+0x12>
 80179ca:	bf00      	nop
 80179cc:	24000044 	.word	0x24000044
 80179d0:	0801c966 	.word	0x0801c966
 80179d4:	0801c973 	.word	0x0801c973
 80179d8:	0801c9a1 	.word	0x0801c9a1

080179dc <_close_r>:
 80179dc:	b538      	push	{r3, r4, r5, lr}
 80179de:	4d06      	ldr	r5, [pc, #24]	; (80179f8 <_close_r+0x1c>)
 80179e0:	2300      	movs	r3, #0
 80179e2:	4604      	mov	r4, r0
 80179e4:	4608      	mov	r0, r1
 80179e6:	602b      	str	r3, [r5, #0]
 80179e8:	f7ea f86f 	bl	8001aca <_close>
 80179ec:	1c43      	adds	r3, r0, #1
 80179ee:	d102      	bne.n	80179f6 <_close_r+0x1a>
 80179f0:	682b      	ldr	r3, [r5, #0]
 80179f2:	b103      	cbz	r3, 80179f6 <_close_r+0x1a>
 80179f4:	6023      	str	r3, [r4, #0]
 80179f6:	bd38      	pop	{r3, r4, r5, pc}
 80179f8:	24007870 	.word	0x24007870

080179fc <__sflush_r>:
 80179fc:	898a      	ldrh	r2, [r1, #12]
 80179fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a02:	4605      	mov	r5, r0
 8017a04:	0710      	lsls	r0, r2, #28
 8017a06:	460c      	mov	r4, r1
 8017a08:	d458      	bmi.n	8017abc <__sflush_r+0xc0>
 8017a0a:	684b      	ldr	r3, [r1, #4]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	dc05      	bgt.n	8017a1c <__sflush_r+0x20>
 8017a10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	dc02      	bgt.n	8017a1c <__sflush_r+0x20>
 8017a16:	2000      	movs	r0, #0
 8017a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a1e:	2e00      	cmp	r6, #0
 8017a20:	d0f9      	beq.n	8017a16 <__sflush_r+0x1a>
 8017a22:	2300      	movs	r3, #0
 8017a24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017a28:	682f      	ldr	r7, [r5, #0]
 8017a2a:	602b      	str	r3, [r5, #0]
 8017a2c:	d032      	beq.n	8017a94 <__sflush_r+0x98>
 8017a2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017a30:	89a3      	ldrh	r3, [r4, #12]
 8017a32:	075a      	lsls	r2, r3, #29
 8017a34:	d505      	bpl.n	8017a42 <__sflush_r+0x46>
 8017a36:	6863      	ldr	r3, [r4, #4]
 8017a38:	1ac0      	subs	r0, r0, r3
 8017a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a3c:	b10b      	cbz	r3, 8017a42 <__sflush_r+0x46>
 8017a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017a40:	1ac0      	subs	r0, r0, r3
 8017a42:	2300      	movs	r3, #0
 8017a44:	4602      	mov	r2, r0
 8017a46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a48:	6a21      	ldr	r1, [r4, #32]
 8017a4a:	4628      	mov	r0, r5
 8017a4c:	47b0      	blx	r6
 8017a4e:	1c43      	adds	r3, r0, #1
 8017a50:	89a3      	ldrh	r3, [r4, #12]
 8017a52:	d106      	bne.n	8017a62 <__sflush_r+0x66>
 8017a54:	6829      	ldr	r1, [r5, #0]
 8017a56:	291d      	cmp	r1, #29
 8017a58:	d82c      	bhi.n	8017ab4 <__sflush_r+0xb8>
 8017a5a:	4a2a      	ldr	r2, [pc, #168]	; (8017b04 <__sflush_r+0x108>)
 8017a5c:	40ca      	lsrs	r2, r1
 8017a5e:	07d6      	lsls	r6, r2, #31
 8017a60:	d528      	bpl.n	8017ab4 <__sflush_r+0xb8>
 8017a62:	2200      	movs	r2, #0
 8017a64:	6062      	str	r2, [r4, #4]
 8017a66:	04d9      	lsls	r1, r3, #19
 8017a68:	6922      	ldr	r2, [r4, #16]
 8017a6a:	6022      	str	r2, [r4, #0]
 8017a6c:	d504      	bpl.n	8017a78 <__sflush_r+0x7c>
 8017a6e:	1c42      	adds	r2, r0, #1
 8017a70:	d101      	bne.n	8017a76 <__sflush_r+0x7a>
 8017a72:	682b      	ldr	r3, [r5, #0]
 8017a74:	b903      	cbnz	r3, 8017a78 <__sflush_r+0x7c>
 8017a76:	6560      	str	r0, [r4, #84]	; 0x54
 8017a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a7a:	602f      	str	r7, [r5, #0]
 8017a7c:	2900      	cmp	r1, #0
 8017a7e:	d0ca      	beq.n	8017a16 <__sflush_r+0x1a>
 8017a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a84:	4299      	cmp	r1, r3
 8017a86:	d002      	beq.n	8017a8e <__sflush_r+0x92>
 8017a88:	4628      	mov	r0, r5
 8017a8a:	f000 f8b1 	bl	8017bf0 <_free_r>
 8017a8e:	2000      	movs	r0, #0
 8017a90:	6360      	str	r0, [r4, #52]	; 0x34
 8017a92:	e7c1      	b.n	8017a18 <__sflush_r+0x1c>
 8017a94:	6a21      	ldr	r1, [r4, #32]
 8017a96:	2301      	movs	r3, #1
 8017a98:	4628      	mov	r0, r5
 8017a9a:	47b0      	blx	r6
 8017a9c:	1c41      	adds	r1, r0, #1
 8017a9e:	d1c7      	bne.n	8017a30 <__sflush_r+0x34>
 8017aa0:	682b      	ldr	r3, [r5, #0]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d0c4      	beq.n	8017a30 <__sflush_r+0x34>
 8017aa6:	2b1d      	cmp	r3, #29
 8017aa8:	d001      	beq.n	8017aae <__sflush_r+0xb2>
 8017aaa:	2b16      	cmp	r3, #22
 8017aac:	d101      	bne.n	8017ab2 <__sflush_r+0xb6>
 8017aae:	602f      	str	r7, [r5, #0]
 8017ab0:	e7b1      	b.n	8017a16 <__sflush_r+0x1a>
 8017ab2:	89a3      	ldrh	r3, [r4, #12]
 8017ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ab8:	81a3      	strh	r3, [r4, #12]
 8017aba:	e7ad      	b.n	8017a18 <__sflush_r+0x1c>
 8017abc:	690f      	ldr	r7, [r1, #16]
 8017abe:	2f00      	cmp	r7, #0
 8017ac0:	d0a9      	beq.n	8017a16 <__sflush_r+0x1a>
 8017ac2:	0793      	lsls	r3, r2, #30
 8017ac4:	680e      	ldr	r6, [r1, #0]
 8017ac6:	bf08      	it	eq
 8017ac8:	694b      	ldreq	r3, [r1, #20]
 8017aca:	600f      	str	r7, [r1, #0]
 8017acc:	bf18      	it	ne
 8017ace:	2300      	movne	r3, #0
 8017ad0:	eba6 0807 	sub.w	r8, r6, r7
 8017ad4:	608b      	str	r3, [r1, #8]
 8017ad6:	f1b8 0f00 	cmp.w	r8, #0
 8017ada:	dd9c      	ble.n	8017a16 <__sflush_r+0x1a>
 8017adc:	6a21      	ldr	r1, [r4, #32]
 8017ade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017ae0:	4643      	mov	r3, r8
 8017ae2:	463a      	mov	r2, r7
 8017ae4:	4628      	mov	r0, r5
 8017ae6:	47b0      	blx	r6
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	dc06      	bgt.n	8017afa <__sflush_r+0xfe>
 8017aec:	89a3      	ldrh	r3, [r4, #12]
 8017aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017af2:	81a3      	strh	r3, [r4, #12]
 8017af4:	f04f 30ff 	mov.w	r0, #4294967295
 8017af8:	e78e      	b.n	8017a18 <__sflush_r+0x1c>
 8017afa:	4407      	add	r7, r0
 8017afc:	eba8 0800 	sub.w	r8, r8, r0
 8017b00:	e7e9      	b.n	8017ad6 <__sflush_r+0xda>
 8017b02:	bf00      	nop
 8017b04:	20400001 	.word	0x20400001

08017b08 <_fflush_r>:
 8017b08:	b538      	push	{r3, r4, r5, lr}
 8017b0a:	690b      	ldr	r3, [r1, #16]
 8017b0c:	4605      	mov	r5, r0
 8017b0e:	460c      	mov	r4, r1
 8017b10:	b913      	cbnz	r3, 8017b18 <_fflush_r+0x10>
 8017b12:	2500      	movs	r5, #0
 8017b14:	4628      	mov	r0, r5
 8017b16:	bd38      	pop	{r3, r4, r5, pc}
 8017b18:	b118      	cbz	r0, 8017b22 <_fflush_r+0x1a>
 8017b1a:	6983      	ldr	r3, [r0, #24]
 8017b1c:	b90b      	cbnz	r3, 8017b22 <_fflush_r+0x1a>
 8017b1e:	f7ff fcd3 	bl	80174c8 <__sinit>
 8017b22:	4b14      	ldr	r3, [pc, #80]	; (8017b74 <_fflush_r+0x6c>)
 8017b24:	429c      	cmp	r4, r3
 8017b26:	d11b      	bne.n	8017b60 <_fflush_r+0x58>
 8017b28:	686c      	ldr	r4, [r5, #4]
 8017b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d0ef      	beq.n	8017b12 <_fflush_r+0xa>
 8017b32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017b34:	07d0      	lsls	r0, r2, #31
 8017b36:	d404      	bmi.n	8017b42 <_fflush_r+0x3a>
 8017b38:	0599      	lsls	r1, r3, #22
 8017b3a:	d402      	bmi.n	8017b42 <_fflush_r+0x3a>
 8017b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b3e:	f7ff fd86 	bl	801764e <__retarget_lock_acquire_recursive>
 8017b42:	4628      	mov	r0, r5
 8017b44:	4621      	mov	r1, r4
 8017b46:	f7ff ff59 	bl	80179fc <__sflush_r>
 8017b4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017b4c:	07da      	lsls	r2, r3, #31
 8017b4e:	4605      	mov	r5, r0
 8017b50:	d4e0      	bmi.n	8017b14 <_fflush_r+0xc>
 8017b52:	89a3      	ldrh	r3, [r4, #12]
 8017b54:	059b      	lsls	r3, r3, #22
 8017b56:	d4dd      	bmi.n	8017b14 <_fflush_r+0xc>
 8017b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b5a:	f7ff fd79 	bl	8017650 <__retarget_lock_release_recursive>
 8017b5e:	e7d9      	b.n	8017b14 <_fflush_r+0xc>
 8017b60:	4b05      	ldr	r3, [pc, #20]	; (8017b78 <_fflush_r+0x70>)
 8017b62:	429c      	cmp	r4, r3
 8017b64:	d101      	bne.n	8017b6a <_fflush_r+0x62>
 8017b66:	68ac      	ldr	r4, [r5, #8]
 8017b68:	e7df      	b.n	8017b2a <_fflush_r+0x22>
 8017b6a:	4b04      	ldr	r3, [pc, #16]	; (8017b7c <_fflush_r+0x74>)
 8017b6c:	429c      	cmp	r4, r3
 8017b6e:	bf08      	it	eq
 8017b70:	68ec      	ldreq	r4, [r5, #12]
 8017b72:	e7da      	b.n	8017b2a <_fflush_r+0x22>
 8017b74:	0801c8ac 	.word	0x0801c8ac
 8017b78:	0801c8cc 	.word	0x0801c8cc
 8017b7c:	0801c88c 	.word	0x0801c88c

08017b80 <fiprintf>:
 8017b80:	b40e      	push	{r1, r2, r3}
 8017b82:	b503      	push	{r0, r1, lr}
 8017b84:	4601      	mov	r1, r0
 8017b86:	ab03      	add	r3, sp, #12
 8017b88:	4805      	ldr	r0, [pc, #20]	; (8017ba0 <fiprintf+0x20>)
 8017b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b8e:	6800      	ldr	r0, [r0, #0]
 8017b90:	9301      	str	r3, [sp, #4]
 8017b92:	f000 f8a7 	bl	8017ce4 <_vfiprintf_r>
 8017b96:	b002      	add	sp, #8
 8017b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b9c:	b003      	add	sp, #12
 8017b9e:	4770      	bx	lr
 8017ba0:	24000044 	.word	0x24000044

08017ba4 <_lseek_r>:
 8017ba4:	b538      	push	{r3, r4, r5, lr}
 8017ba6:	4d07      	ldr	r5, [pc, #28]	; (8017bc4 <_lseek_r+0x20>)
 8017ba8:	4604      	mov	r4, r0
 8017baa:	4608      	mov	r0, r1
 8017bac:	4611      	mov	r1, r2
 8017bae:	2200      	movs	r2, #0
 8017bb0:	602a      	str	r2, [r5, #0]
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	f7e9 ffb0 	bl	8001b18 <_lseek>
 8017bb8:	1c43      	adds	r3, r0, #1
 8017bba:	d102      	bne.n	8017bc2 <_lseek_r+0x1e>
 8017bbc:	682b      	ldr	r3, [r5, #0]
 8017bbe:	b103      	cbz	r3, 8017bc2 <_lseek_r+0x1e>
 8017bc0:	6023      	str	r3, [r4, #0]
 8017bc2:	bd38      	pop	{r3, r4, r5, pc}
 8017bc4:	24007870 	.word	0x24007870

08017bc8 <malloc>:
 8017bc8:	4b02      	ldr	r3, [pc, #8]	; (8017bd4 <malloc+0xc>)
 8017bca:	4601      	mov	r1, r0
 8017bcc:	6818      	ldr	r0, [r3, #0]
 8017bce:	f7ff bd65 	b.w	801769c <_malloc_r>
 8017bd2:	bf00      	nop
 8017bd4:	24000044 	.word	0x24000044

08017bd8 <__malloc_lock>:
 8017bd8:	4801      	ldr	r0, [pc, #4]	; (8017be0 <__malloc_lock+0x8>)
 8017bda:	f7ff bd38 	b.w	801764e <__retarget_lock_acquire_recursive>
 8017bde:	bf00      	nop
 8017be0:	2400787c 	.word	0x2400787c

08017be4 <__malloc_unlock>:
 8017be4:	4801      	ldr	r0, [pc, #4]	; (8017bec <__malloc_unlock+0x8>)
 8017be6:	f7ff bd33 	b.w	8017650 <__retarget_lock_release_recursive>
 8017bea:	bf00      	nop
 8017bec:	2400787c 	.word	0x2400787c

08017bf0 <_free_r>:
 8017bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017bf2:	2900      	cmp	r1, #0
 8017bf4:	d048      	beq.n	8017c88 <_free_r+0x98>
 8017bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017bfa:	9001      	str	r0, [sp, #4]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8017c02:	bfb8      	it	lt
 8017c04:	18e4      	addlt	r4, r4, r3
 8017c06:	f7ff ffe7 	bl	8017bd8 <__malloc_lock>
 8017c0a:	4a20      	ldr	r2, [pc, #128]	; (8017c8c <_free_r+0x9c>)
 8017c0c:	9801      	ldr	r0, [sp, #4]
 8017c0e:	6813      	ldr	r3, [r2, #0]
 8017c10:	4615      	mov	r5, r2
 8017c12:	b933      	cbnz	r3, 8017c22 <_free_r+0x32>
 8017c14:	6063      	str	r3, [r4, #4]
 8017c16:	6014      	str	r4, [r2, #0]
 8017c18:	b003      	add	sp, #12
 8017c1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017c1e:	f7ff bfe1 	b.w	8017be4 <__malloc_unlock>
 8017c22:	42a3      	cmp	r3, r4
 8017c24:	d90b      	bls.n	8017c3e <_free_r+0x4e>
 8017c26:	6821      	ldr	r1, [r4, #0]
 8017c28:	1862      	adds	r2, r4, r1
 8017c2a:	4293      	cmp	r3, r2
 8017c2c:	bf04      	itt	eq
 8017c2e:	681a      	ldreq	r2, [r3, #0]
 8017c30:	685b      	ldreq	r3, [r3, #4]
 8017c32:	6063      	str	r3, [r4, #4]
 8017c34:	bf04      	itt	eq
 8017c36:	1852      	addeq	r2, r2, r1
 8017c38:	6022      	streq	r2, [r4, #0]
 8017c3a:	602c      	str	r4, [r5, #0]
 8017c3c:	e7ec      	b.n	8017c18 <_free_r+0x28>
 8017c3e:	461a      	mov	r2, r3
 8017c40:	685b      	ldr	r3, [r3, #4]
 8017c42:	b10b      	cbz	r3, 8017c48 <_free_r+0x58>
 8017c44:	42a3      	cmp	r3, r4
 8017c46:	d9fa      	bls.n	8017c3e <_free_r+0x4e>
 8017c48:	6811      	ldr	r1, [r2, #0]
 8017c4a:	1855      	adds	r5, r2, r1
 8017c4c:	42a5      	cmp	r5, r4
 8017c4e:	d10b      	bne.n	8017c68 <_free_r+0x78>
 8017c50:	6824      	ldr	r4, [r4, #0]
 8017c52:	4421      	add	r1, r4
 8017c54:	1854      	adds	r4, r2, r1
 8017c56:	42a3      	cmp	r3, r4
 8017c58:	6011      	str	r1, [r2, #0]
 8017c5a:	d1dd      	bne.n	8017c18 <_free_r+0x28>
 8017c5c:	681c      	ldr	r4, [r3, #0]
 8017c5e:	685b      	ldr	r3, [r3, #4]
 8017c60:	6053      	str	r3, [r2, #4]
 8017c62:	4421      	add	r1, r4
 8017c64:	6011      	str	r1, [r2, #0]
 8017c66:	e7d7      	b.n	8017c18 <_free_r+0x28>
 8017c68:	d902      	bls.n	8017c70 <_free_r+0x80>
 8017c6a:	230c      	movs	r3, #12
 8017c6c:	6003      	str	r3, [r0, #0]
 8017c6e:	e7d3      	b.n	8017c18 <_free_r+0x28>
 8017c70:	6825      	ldr	r5, [r4, #0]
 8017c72:	1961      	adds	r1, r4, r5
 8017c74:	428b      	cmp	r3, r1
 8017c76:	bf04      	itt	eq
 8017c78:	6819      	ldreq	r1, [r3, #0]
 8017c7a:	685b      	ldreq	r3, [r3, #4]
 8017c7c:	6063      	str	r3, [r4, #4]
 8017c7e:	bf04      	itt	eq
 8017c80:	1949      	addeq	r1, r1, r5
 8017c82:	6021      	streq	r1, [r4, #0]
 8017c84:	6054      	str	r4, [r2, #4]
 8017c86:	e7c7      	b.n	8017c18 <_free_r+0x28>
 8017c88:	b003      	add	sp, #12
 8017c8a:	bd30      	pop	{r4, r5, pc}
 8017c8c:	24004268 	.word	0x24004268

08017c90 <__sfputc_r>:
 8017c90:	6893      	ldr	r3, [r2, #8]
 8017c92:	3b01      	subs	r3, #1
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	b410      	push	{r4}
 8017c98:	6093      	str	r3, [r2, #8]
 8017c9a:	da08      	bge.n	8017cae <__sfputc_r+0x1e>
 8017c9c:	6994      	ldr	r4, [r2, #24]
 8017c9e:	42a3      	cmp	r3, r4
 8017ca0:	db01      	blt.n	8017ca6 <__sfputc_r+0x16>
 8017ca2:	290a      	cmp	r1, #10
 8017ca4:	d103      	bne.n	8017cae <__sfputc_r+0x1e>
 8017ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017caa:	f000 baf1 	b.w	8018290 <__swbuf_r>
 8017cae:	6813      	ldr	r3, [r2, #0]
 8017cb0:	1c58      	adds	r0, r3, #1
 8017cb2:	6010      	str	r0, [r2, #0]
 8017cb4:	7019      	strb	r1, [r3, #0]
 8017cb6:	4608      	mov	r0, r1
 8017cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cbc:	4770      	bx	lr

08017cbe <__sfputs_r>:
 8017cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cc0:	4606      	mov	r6, r0
 8017cc2:	460f      	mov	r7, r1
 8017cc4:	4614      	mov	r4, r2
 8017cc6:	18d5      	adds	r5, r2, r3
 8017cc8:	42ac      	cmp	r4, r5
 8017cca:	d101      	bne.n	8017cd0 <__sfputs_r+0x12>
 8017ccc:	2000      	movs	r0, #0
 8017cce:	e007      	b.n	8017ce0 <__sfputs_r+0x22>
 8017cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cd4:	463a      	mov	r2, r7
 8017cd6:	4630      	mov	r0, r6
 8017cd8:	f7ff ffda 	bl	8017c90 <__sfputc_r>
 8017cdc:	1c43      	adds	r3, r0, #1
 8017cde:	d1f3      	bne.n	8017cc8 <__sfputs_r+0xa>
 8017ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017ce4 <_vfiprintf_r>:
 8017ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ce8:	460d      	mov	r5, r1
 8017cea:	b09d      	sub	sp, #116	; 0x74
 8017cec:	4614      	mov	r4, r2
 8017cee:	4698      	mov	r8, r3
 8017cf0:	4606      	mov	r6, r0
 8017cf2:	b118      	cbz	r0, 8017cfc <_vfiprintf_r+0x18>
 8017cf4:	6983      	ldr	r3, [r0, #24]
 8017cf6:	b90b      	cbnz	r3, 8017cfc <_vfiprintf_r+0x18>
 8017cf8:	f7ff fbe6 	bl	80174c8 <__sinit>
 8017cfc:	4b89      	ldr	r3, [pc, #548]	; (8017f24 <_vfiprintf_r+0x240>)
 8017cfe:	429d      	cmp	r5, r3
 8017d00:	d11b      	bne.n	8017d3a <_vfiprintf_r+0x56>
 8017d02:	6875      	ldr	r5, [r6, #4]
 8017d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d06:	07d9      	lsls	r1, r3, #31
 8017d08:	d405      	bmi.n	8017d16 <_vfiprintf_r+0x32>
 8017d0a:	89ab      	ldrh	r3, [r5, #12]
 8017d0c:	059a      	lsls	r2, r3, #22
 8017d0e:	d402      	bmi.n	8017d16 <_vfiprintf_r+0x32>
 8017d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d12:	f7ff fc9c 	bl	801764e <__retarget_lock_acquire_recursive>
 8017d16:	89ab      	ldrh	r3, [r5, #12]
 8017d18:	071b      	lsls	r3, r3, #28
 8017d1a:	d501      	bpl.n	8017d20 <_vfiprintf_r+0x3c>
 8017d1c:	692b      	ldr	r3, [r5, #16]
 8017d1e:	b9eb      	cbnz	r3, 8017d5c <_vfiprintf_r+0x78>
 8017d20:	4629      	mov	r1, r5
 8017d22:	4630      	mov	r0, r6
 8017d24:	f000 fb06 	bl	8018334 <__swsetup_r>
 8017d28:	b1c0      	cbz	r0, 8017d5c <_vfiprintf_r+0x78>
 8017d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d2c:	07dc      	lsls	r4, r3, #31
 8017d2e:	d50e      	bpl.n	8017d4e <_vfiprintf_r+0x6a>
 8017d30:	f04f 30ff 	mov.w	r0, #4294967295
 8017d34:	b01d      	add	sp, #116	; 0x74
 8017d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d3a:	4b7b      	ldr	r3, [pc, #492]	; (8017f28 <_vfiprintf_r+0x244>)
 8017d3c:	429d      	cmp	r5, r3
 8017d3e:	d101      	bne.n	8017d44 <_vfiprintf_r+0x60>
 8017d40:	68b5      	ldr	r5, [r6, #8]
 8017d42:	e7df      	b.n	8017d04 <_vfiprintf_r+0x20>
 8017d44:	4b79      	ldr	r3, [pc, #484]	; (8017f2c <_vfiprintf_r+0x248>)
 8017d46:	429d      	cmp	r5, r3
 8017d48:	bf08      	it	eq
 8017d4a:	68f5      	ldreq	r5, [r6, #12]
 8017d4c:	e7da      	b.n	8017d04 <_vfiprintf_r+0x20>
 8017d4e:	89ab      	ldrh	r3, [r5, #12]
 8017d50:	0598      	lsls	r0, r3, #22
 8017d52:	d4ed      	bmi.n	8017d30 <_vfiprintf_r+0x4c>
 8017d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d56:	f7ff fc7b 	bl	8017650 <__retarget_lock_release_recursive>
 8017d5a:	e7e9      	b.n	8017d30 <_vfiprintf_r+0x4c>
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8017d60:	2320      	movs	r3, #32
 8017d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d6a:	2330      	movs	r3, #48	; 0x30
 8017d6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017f30 <_vfiprintf_r+0x24c>
 8017d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017d74:	f04f 0901 	mov.w	r9, #1
 8017d78:	4623      	mov	r3, r4
 8017d7a:	469a      	mov	sl, r3
 8017d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d80:	b10a      	cbz	r2, 8017d86 <_vfiprintf_r+0xa2>
 8017d82:	2a25      	cmp	r2, #37	; 0x25
 8017d84:	d1f9      	bne.n	8017d7a <_vfiprintf_r+0x96>
 8017d86:	ebba 0b04 	subs.w	fp, sl, r4
 8017d8a:	d00b      	beq.n	8017da4 <_vfiprintf_r+0xc0>
 8017d8c:	465b      	mov	r3, fp
 8017d8e:	4622      	mov	r2, r4
 8017d90:	4629      	mov	r1, r5
 8017d92:	4630      	mov	r0, r6
 8017d94:	f7ff ff93 	bl	8017cbe <__sfputs_r>
 8017d98:	3001      	adds	r0, #1
 8017d9a:	f000 80aa 	beq.w	8017ef2 <_vfiprintf_r+0x20e>
 8017d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017da0:	445a      	add	r2, fp
 8017da2:	9209      	str	r2, [sp, #36]	; 0x24
 8017da4:	f89a 3000 	ldrb.w	r3, [sl]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	f000 80a2 	beq.w	8017ef2 <_vfiprintf_r+0x20e>
 8017dae:	2300      	movs	r3, #0
 8017db0:	f04f 32ff 	mov.w	r2, #4294967295
 8017db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017db8:	f10a 0a01 	add.w	sl, sl, #1
 8017dbc:	9304      	str	r3, [sp, #16]
 8017dbe:	9307      	str	r3, [sp, #28]
 8017dc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017dc4:	931a      	str	r3, [sp, #104]	; 0x68
 8017dc6:	4654      	mov	r4, sl
 8017dc8:	2205      	movs	r2, #5
 8017dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017dce:	4858      	ldr	r0, [pc, #352]	; (8017f30 <_vfiprintf_r+0x24c>)
 8017dd0:	f7e8 fa9e 	bl	8000310 <memchr>
 8017dd4:	9a04      	ldr	r2, [sp, #16]
 8017dd6:	b9d8      	cbnz	r0, 8017e10 <_vfiprintf_r+0x12c>
 8017dd8:	06d1      	lsls	r1, r2, #27
 8017dda:	bf44      	itt	mi
 8017ddc:	2320      	movmi	r3, #32
 8017dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017de2:	0713      	lsls	r3, r2, #28
 8017de4:	bf44      	itt	mi
 8017de6:	232b      	movmi	r3, #43	; 0x2b
 8017de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017dec:	f89a 3000 	ldrb.w	r3, [sl]
 8017df0:	2b2a      	cmp	r3, #42	; 0x2a
 8017df2:	d015      	beq.n	8017e20 <_vfiprintf_r+0x13c>
 8017df4:	9a07      	ldr	r2, [sp, #28]
 8017df6:	4654      	mov	r4, sl
 8017df8:	2000      	movs	r0, #0
 8017dfa:	f04f 0c0a 	mov.w	ip, #10
 8017dfe:	4621      	mov	r1, r4
 8017e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e04:	3b30      	subs	r3, #48	; 0x30
 8017e06:	2b09      	cmp	r3, #9
 8017e08:	d94e      	bls.n	8017ea8 <_vfiprintf_r+0x1c4>
 8017e0a:	b1b0      	cbz	r0, 8017e3a <_vfiprintf_r+0x156>
 8017e0c:	9207      	str	r2, [sp, #28]
 8017e0e:	e014      	b.n	8017e3a <_vfiprintf_r+0x156>
 8017e10:	eba0 0308 	sub.w	r3, r0, r8
 8017e14:	fa09 f303 	lsl.w	r3, r9, r3
 8017e18:	4313      	orrs	r3, r2
 8017e1a:	9304      	str	r3, [sp, #16]
 8017e1c:	46a2      	mov	sl, r4
 8017e1e:	e7d2      	b.n	8017dc6 <_vfiprintf_r+0xe2>
 8017e20:	9b03      	ldr	r3, [sp, #12]
 8017e22:	1d19      	adds	r1, r3, #4
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	9103      	str	r1, [sp, #12]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	bfbb      	ittet	lt
 8017e2c:	425b      	neglt	r3, r3
 8017e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8017e32:	9307      	strge	r3, [sp, #28]
 8017e34:	9307      	strlt	r3, [sp, #28]
 8017e36:	bfb8      	it	lt
 8017e38:	9204      	strlt	r2, [sp, #16]
 8017e3a:	7823      	ldrb	r3, [r4, #0]
 8017e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8017e3e:	d10c      	bne.n	8017e5a <_vfiprintf_r+0x176>
 8017e40:	7863      	ldrb	r3, [r4, #1]
 8017e42:	2b2a      	cmp	r3, #42	; 0x2a
 8017e44:	d135      	bne.n	8017eb2 <_vfiprintf_r+0x1ce>
 8017e46:	9b03      	ldr	r3, [sp, #12]
 8017e48:	1d1a      	adds	r2, r3, #4
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	9203      	str	r2, [sp, #12]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	bfb8      	it	lt
 8017e52:	f04f 33ff 	movlt.w	r3, #4294967295
 8017e56:	3402      	adds	r4, #2
 8017e58:	9305      	str	r3, [sp, #20]
 8017e5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017f40 <_vfiprintf_r+0x25c>
 8017e5e:	7821      	ldrb	r1, [r4, #0]
 8017e60:	2203      	movs	r2, #3
 8017e62:	4650      	mov	r0, sl
 8017e64:	f7e8 fa54 	bl	8000310 <memchr>
 8017e68:	b140      	cbz	r0, 8017e7c <_vfiprintf_r+0x198>
 8017e6a:	2340      	movs	r3, #64	; 0x40
 8017e6c:	eba0 000a 	sub.w	r0, r0, sl
 8017e70:	fa03 f000 	lsl.w	r0, r3, r0
 8017e74:	9b04      	ldr	r3, [sp, #16]
 8017e76:	4303      	orrs	r3, r0
 8017e78:	3401      	adds	r4, #1
 8017e7a:	9304      	str	r3, [sp, #16]
 8017e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e80:	482c      	ldr	r0, [pc, #176]	; (8017f34 <_vfiprintf_r+0x250>)
 8017e82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017e86:	2206      	movs	r2, #6
 8017e88:	f7e8 fa42 	bl	8000310 <memchr>
 8017e8c:	2800      	cmp	r0, #0
 8017e8e:	d03f      	beq.n	8017f10 <_vfiprintf_r+0x22c>
 8017e90:	4b29      	ldr	r3, [pc, #164]	; (8017f38 <_vfiprintf_r+0x254>)
 8017e92:	bb1b      	cbnz	r3, 8017edc <_vfiprintf_r+0x1f8>
 8017e94:	9b03      	ldr	r3, [sp, #12]
 8017e96:	3307      	adds	r3, #7
 8017e98:	f023 0307 	bic.w	r3, r3, #7
 8017e9c:	3308      	adds	r3, #8
 8017e9e:	9303      	str	r3, [sp, #12]
 8017ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ea2:	443b      	add	r3, r7
 8017ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ea6:	e767      	b.n	8017d78 <_vfiprintf_r+0x94>
 8017ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8017eac:	460c      	mov	r4, r1
 8017eae:	2001      	movs	r0, #1
 8017eb0:	e7a5      	b.n	8017dfe <_vfiprintf_r+0x11a>
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	3401      	adds	r4, #1
 8017eb6:	9305      	str	r3, [sp, #20]
 8017eb8:	4619      	mov	r1, r3
 8017eba:	f04f 0c0a 	mov.w	ip, #10
 8017ebe:	4620      	mov	r0, r4
 8017ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ec4:	3a30      	subs	r2, #48	; 0x30
 8017ec6:	2a09      	cmp	r2, #9
 8017ec8:	d903      	bls.n	8017ed2 <_vfiprintf_r+0x1ee>
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d0c5      	beq.n	8017e5a <_vfiprintf_r+0x176>
 8017ece:	9105      	str	r1, [sp, #20]
 8017ed0:	e7c3      	b.n	8017e5a <_vfiprintf_r+0x176>
 8017ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ed6:	4604      	mov	r4, r0
 8017ed8:	2301      	movs	r3, #1
 8017eda:	e7f0      	b.n	8017ebe <_vfiprintf_r+0x1da>
 8017edc:	ab03      	add	r3, sp, #12
 8017ede:	9300      	str	r3, [sp, #0]
 8017ee0:	462a      	mov	r2, r5
 8017ee2:	4b16      	ldr	r3, [pc, #88]	; (8017f3c <_vfiprintf_r+0x258>)
 8017ee4:	a904      	add	r1, sp, #16
 8017ee6:	4630      	mov	r0, r6
 8017ee8:	f3af 8000 	nop.w
 8017eec:	4607      	mov	r7, r0
 8017eee:	1c78      	adds	r0, r7, #1
 8017ef0:	d1d6      	bne.n	8017ea0 <_vfiprintf_r+0x1bc>
 8017ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ef4:	07d9      	lsls	r1, r3, #31
 8017ef6:	d405      	bmi.n	8017f04 <_vfiprintf_r+0x220>
 8017ef8:	89ab      	ldrh	r3, [r5, #12]
 8017efa:	059a      	lsls	r2, r3, #22
 8017efc:	d402      	bmi.n	8017f04 <_vfiprintf_r+0x220>
 8017efe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f00:	f7ff fba6 	bl	8017650 <__retarget_lock_release_recursive>
 8017f04:	89ab      	ldrh	r3, [r5, #12]
 8017f06:	065b      	lsls	r3, r3, #25
 8017f08:	f53f af12 	bmi.w	8017d30 <_vfiprintf_r+0x4c>
 8017f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f0e:	e711      	b.n	8017d34 <_vfiprintf_r+0x50>
 8017f10:	ab03      	add	r3, sp, #12
 8017f12:	9300      	str	r3, [sp, #0]
 8017f14:	462a      	mov	r2, r5
 8017f16:	4b09      	ldr	r3, [pc, #36]	; (8017f3c <_vfiprintf_r+0x258>)
 8017f18:	a904      	add	r1, sp, #16
 8017f1a:	4630      	mov	r0, r6
 8017f1c:	f000 f880 	bl	8018020 <_printf_i>
 8017f20:	e7e4      	b.n	8017eec <_vfiprintf_r+0x208>
 8017f22:	bf00      	nop
 8017f24:	0801c8ac 	.word	0x0801c8ac
 8017f28:	0801c8cc 	.word	0x0801c8cc
 8017f2c:	0801c88c 	.word	0x0801c88c
 8017f30:	0801c9a2 	.word	0x0801c9a2
 8017f34:	0801c9ac 	.word	0x0801c9ac
 8017f38:	00000000 	.word	0x00000000
 8017f3c:	08017cbf 	.word	0x08017cbf
 8017f40:	0801c9a8 	.word	0x0801c9a8

08017f44 <_printf_common>:
 8017f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f48:	4616      	mov	r6, r2
 8017f4a:	4699      	mov	r9, r3
 8017f4c:	688a      	ldr	r2, [r1, #8]
 8017f4e:	690b      	ldr	r3, [r1, #16]
 8017f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017f54:	4293      	cmp	r3, r2
 8017f56:	bfb8      	it	lt
 8017f58:	4613      	movlt	r3, r2
 8017f5a:	6033      	str	r3, [r6, #0]
 8017f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017f60:	4607      	mov	r7, r0
 8017f62:	460c      	mov	r4, r1
 8017f64:	b10a      	cbz	r2, 8017f6a <_printf_common+0x26>
 8017f66:	3301      	adds	r3, #1
 8017f68:	6033      	str	r3, [r6, #0]
 8017f6a:	6823      	ldr	r3, [r4, #0]
 8017f6c:	0699      	lsls	r1, r3, #26
 8017f6e:	bf42      	ittt	mi
 8017f70:	6833      	ldrmi	r3, [r6, #0]
 8017f72:	3302      	addmi	r3, #2
 8017f74:	6033      	strmi	r3, [r6, #0]
 8017f76:	6825      	ldr	r5, [r4, #0]
 8017f78:	f015 0506 	ands.w	r5, r5, #6
 8017f7c:	d106      	bne.n	8017f8c <_printf_common+0x48>
 8017f7e:	f104 0a19 	add.w	sl, r4, #25
 8017f82:	68e3      	ldr	r3, [r4, #12]
 8017f84:	6832      	ldr	r2, [r6, #0]
 8017f86:	1a9b      	subs	r3, r3, r2
 8017f88:	42ab      	cmp	r3, r5
 8017f8a:	dc26      	bgt.n	8017fda <_printf_common+0x96>
 8017f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017f90:	1e13      	subs	r3, r2, #0
 8017f92:	6822      	ldr	r2, [r4, #0]
 8017f94:	bf18      	it	ne
 8017f96:	2301      	movne	r3, #1
 8017f98:	0692      	lsls	r2, r2, #26
 8017f9a:	d42b      	bmi.n	8017ff4 <_printf_common+0xb0>
 8017f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017fa0:	4649      	mov	r1, r9
 8017fa2:	4638      	mov	r0, r7
 8017fa4:	47c0      	blx	r8
 8017fa6:	3001      	adds	r0, #1
 8017fa8:	d01e      	beq.n	8017fe8 <_printf_common+0xa4>
 8017faa:	6823      	ldr	r3, [r4, #0]
 8017fac:	68e5      	ldr	r5, [r4, #12]
 8017fae:	6832      	ldr	r2, [r6, #0]
 8017fb0:	f003 0306 	and.w	r3, r3, #6
 8017fb4:	2b04      	cmp	r3, #4
 8017fb6:	bf08      	it	eq
 8017fb8:	1aad      	subeq	r5, r5, r2
 8017fba:	68a3      	ldr	r3, [r4, #8]
 8017fbc:	6922      	ldr	r2, [r4, #16]
 8017fbe:	bf0c      	ite	eq
 8017fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017fc4:	2500      	movne	r5, #0
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	bfc4      	itt	gt
 8017fca:	1a9b      	subgt	r3, r3, r2
 8017fcc:	18ed      	addgt	r5, r5, r3
 8017fce:	2600      	movs	r6, #0
 8017fd0:	341a      	adds	r4, #26
 8017fd2:	42b5      	cmp	r5, r6
 8017fd4:	d11a      	bne.n	801800c <_printf_common+0xc8>
 8017fd6:	2000      	movs	r0, #0
 8017fd8:	e008      	b.n	8017fec <_printf_common+0xa8>
 8017fda:	2301      	movs	r3, #1
 8017fdc:	4652      	mov	r2, sl
 8017fde:	4649      	mov	r1, r9
 8017fe0:	4638      	mov	r0, r7
 8017fe2:	47c0      	blx	r8
 8017fe4:	3001      	adds	r0, #1
 8017fe6:	d103      	bne.n	8017ff0 <_printf_common+0xac>
 8017fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8017fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ff0:	3501      	adds	r5, #1
 8017ff2:	e7c6      	b.n	8017f82 <_printf_common+0x3e>
 8017ff4:	18e1      	adds	r1, r4, r3
 8017ff6:	1c5a      	adds	r2, r3, #1
 8017ff8:	2030      	movs	r0, #48	; 0x30
 8017ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017ffe:	4422      	add	r2, r4
 8018000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018008:	3302      	adds	r3, #2
 801800a:	e7c7      	b.n	8017f9c <_printf_common+0x58>
 801800c:	2301      	movs	r3, #1
 801800e:	4622      	mov	r2, r4
 8018010:	4649      	mov	r1, r9
 8018012:	4638      	mov	r0, r7
 8018014:	47c0      	blx	r8
 8018016:	3001      	adds	r0, #1
 8018018:	d0e6      	beq.n	8017fe8 <_printf_common+0xa4>
 801801a:	3601      	adds	r6, #1
 801801c:	e7d9      	b.n	8017fd2 <_printf_common+0x8e>
	...

08018020 <_printf_i>:
 8018020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018024:	460c      	mov	r4, r1
 8018026:	4691      	mov	r9, r2
 8018028:	7e27      	ldrb	r7, [r4, #24]
 801802a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801802c:	2f78      	cmp	r7, #120	; 0x78
 801802e:	4680      	mov	r8, r0
 8018030:	469a      	mov	sl, r3
 8018032:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018036:	d807      	bhi.n	8018048 <_printf_i+0x28>
 8018038:	2f62      	cmp	r7, #98	; 0x62
 801803a:	d80a      	bhi.n	8018052 <_printf_i+0x32>
 801803c:	2f00      	cmp	r7, #0
 801803e:	f000 80d8 	beq.w	80181f2 <_printf_i+0x1d2>
 8018042:	2f58      	cmp	r7, #88	; 0x58
 8018044:	f000 80a3 	beq.w	801818e <_printf_i+0x16e>
 8018048:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801804c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018050:	e03a      	b.n	80180c8 <_printf_i+0xa8>
 8018052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018056:	2b15      	cmp	r3, #21
 8018058:	d8f6      	bhi.n	8018048 <_printf_i+0x28>
 801805a:	a001      	add	r0, pc, #4	; (adr r0, 8018060 <_printf_i+0x40>)
 801805c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018060:	080180b9 	.word	0x080180b9
 8018064:	080180cd 	.word	0x080180cd
 8018068:	08018049 	.word	0x08018049
 801806c:	08018049 	.word	0x08018049
 8018070:	08018049 	.word	0x08018049
 8018074:	08018049 	.word	0x08018049
 8018078:	080180cd 	.word	0x080180cd
 801807c:	08018049 	.word	0x08018049
 8018080:	08018049 	.word	0x08018049
 8018084:	08018049 	.word	0x08018049
 8018088:	08018049 	.word	0x08018049
 801808c:	080181d9 	.word	0x080181d9
 8018090:	080180fd 	.word	0x080180fd
 8018094:	080181bb 	.word	0x080181bb
 8018098:	08018049 	.word	0x08018049
 801809c:	08018049 	.word	0x08018049
 80180a0:	080181fb 	.word	0x080181fb
 80180a4:	08018049 	.word	0x08018049
 80180a8:	080180fd 	.word	0x080180fd
 80180ac:	08018049 	.word	0x08018049
 80180b0:	08018049 	.word	0x08018049
 80180b4:	080181c3 	.word	0x080181c3
 80180b8:	680b      	ldr	r3, [r1, #0]
 80180ba:	1d1a      	adds	r2, r3, #4
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	600a      	str	r2, [r1, #0]
 80180c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80180c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80180c8:	2301      	movs	r3, #1
 80180ca:	e0a3      	b.n	8018214 <_printf_i+0x1f4>
 80180cc:	6825      	ldr	r5, [r4, #0]
 80180ce:	6808      	ldr	r0, [r1, #0]
 80180d0:	062e      	lsls	r6, r5, #24
 80180d2:	f100 0304 	add.w	r3, r0, #4
 80180d6:	d50a      	bpl.n	80180ee <_printf_i+0xce>
 80180d8:	6805      	ldr	r5, [r0, #0]
 80180da:	600b      	str	r3, [r1, #0]
 80180dc:	2d00      	cmp	r5, #0
 80180de:	da03      	bge.n	80180e8 <_printf_i+0xc8>
 80180e0:	232d      	movs	r3, #45	; 0x2d
 80180e2:	426d      	negs	r5, r5
 80180e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180e8:	485e      	ldr	r0, [pc, #376]	; (8018264 <_printf_i+0x244>)
 80180ea:	230a      	movs	r3, #10
 80180ec:	e019      	b.n	8018122 <_printf_i+0x102>
 80180ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80180f2:	6805      	ldr	r5, [r0, #0]
 80180f4:	600b      	str	r3, [r1, #0]
 80180f6:	bf18      	it	ne
 80180f8:	b22d      	sxthne	r5, r5
 80180fa:	e7ef      	b.n	80180dc <_printf_i+0xbc>
 80180fc:	680b      	ldr	r3, [r1, #0]
 80180fe:	6825      	ldr	r5, [r4, #0]
 8018100:	1d18      	adds	r0, r3, #4
 8018102:	6008      	str	r0, [r1, #0]
 8018104:	0628      	lsls	r0, r5, #24
 8018106:	d501      	bpl.n	801810c <_printf_i+0xec>
 8018108:	681d      	ldr	r5, [r3, #0]
 801810a:	e002      	b.n	8018112 <_printf_i+0xf2>
 801810c:	0669      	lsls	r1, r5, #25
 801810e:	d5fb      	bpl.n	8018108 <_printf_i+0xe8>
 8018110:	881d      	ldrh	r5, [r3, #0]
 8018112:	4854      	ldr	r0, [pc, #336]	; (8018264 <_printf_i+0x244>)
 8018114:	2f6f      	cmp	r7, #111	; 0x6f
 8018116:	bf0c      	ite	eq
 8018118:	2308      	moveq	r3, #8
 801811a:	230a      	movne	r3, #10
 801811c:	2100      	movs	r1, #0
 801811e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018122:	6866      	ldr	r6, [r4, #4]
 8018124:	60a6      	str	r6, [r4, #8]
 8018126:	2e00      	cmp	r6, #0
 8018128:	bfa2      	ittt	ge
 801812a:	6821      	ldrge	r1, [r4, #0]
 801812c:	f021 0104 	bicge.w	r1, r1, #4
 8018130:	6021      	strge	r1, [r4, #0]
 8018132:	b90d      	cbnz	r5, 8018138 <_printf_i+0x118>
 8018134:	2e00      	cmp	r6, #0
 8018136:	d04d      	beq.n	80181d4 <_printf_i+0x1b4>
 8018138:	4616      	mov	r6, r2
 801813a:	fbb5 f1f3 	udiv	r1, r5, r3
 801813e:	fb03 5711 	mls	r7, r3, r1, r5
 8018142:	5dc7      	ldrb	r7, [r0, r7]
 8018144:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018148:	462f      	mov	r7, r5
 801814a:	42bb      	cmp	r3, r7
 801814c:	460d      	mov	r5, r1
 801814e:	d9f4      	bls.n	801813a <_printf_i+0x11a>
 8018150:	2b08      	cmp	r3, #8
 8018152:	d10b      	bne.n	801816c <_printf_i+0x14c>
 8018154:	6823      	ldr	r3, [r4, #0]
 8018156:	07df      	lsls	r7, r3, #31
 8018158:	d508      	bpl.n	801816c <_printf_i+0x14c>
 801815a:	6923      	ldr	r3, [r4, #16]
 801815c:	6861      	ldr	r1, [r4, #4]
 801815e:	4299      	cmp	r1, r3
 8018160:	bfde      	ittt	le
 8018162:	2330      	movle	r3, #48	; 0x30
 8018164:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018168:	f106 36ff 	addle.w	r6, r6, #4294967295
 801816c:	1b92      	subs	r2, r2, r6
 801816e:	6122      	str	r2, [r4, #16]
 8018170:	f8cd a000 	str.w	sl, [sp]
 8018174:	464b      	mov	r3, r9
 8018176:	aa03      	add	r2, sp, #12
 8018178:	4621      	mov	r1, r4
 801817a:	4640      	mov	r0, r8
 801817c:	f7ff fee2 	bl	8017f44 <_printf_common>
 8018180:	3001      	adds	r0, #1
 8018182:	d14c      	bne.n	801821e <_printf_i+0x1fe>
 8018184:	f04f 30ff 	mov.w	r0, #4294967295
 8018188:	b004      	add	sp, #16
 801818a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801818e:	4835      	ldr	r0, [pc, #212]	; (8018264 <_printf_i+0x244>)
 8018190:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018194:	6823      	ldr	r3, [r4, #0]
 8018196:	680e      	ldr	r6, [r1, #0]
 8018198:	061f      	lsls	r7, r3, #24
 801819a:	f856 5b04 	ldr.w	r5, [r6], #4
 801819e:	600e      	str	r6, [r1, #0]
 80181a0:	d514      	bpl.n	80181cc <_printf_i+0x1ac>
 80181a2:	07d9      	lsls	r1, r3, #31
 80181a4:	bf44      	itt	mi
 80181a6:	f043 0320 	orrmi.w	r3, r3, #32
 80181aa:	6023      	strmi	r3, [r4, #0]
 80181ac:	b91d      	cbnz	r5, 80181b6 <_printf_i+0x196>
 80181ae:	6823      	ldr	r3, [r4, #0]
 80181b0:	f023 0320 	bic.w	r3, r3, #32
 80181b4:	6023      	str	r3, [r4, #0]
 80181b6:	2310      	movs	r3, #16
 80181b8:	e7b0      	b.n	801811c <_printf_i+0xfc>
 80181ba:	6823      	ldr	r3, [r4, #0]
 80181bc:	f043 0320 	orr.w	r3, r3, #32
 80181c0:	6023      	str	r3, [r4, #0]
 80181c2:	2378      	movs	r3, #120	; 0x78
 80181c4:	4828      	ldr	r0, [pc, #160]	; (8018268 <_printf_i+0x248>)
 80181c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80181ca:	e7e3      	b.n	8018194 <_printf_i+0x174>
 80181cc:	065e      	lsls	r6, r3, #25
 80181ce:	bf48      	it	mi
 80181d0:	b2ad      	uxthmi	r5, r5
 80181d2:	e7e6      	b.n	80181a2 <_printf_i+0x182>
 80181d4:	4616      	mov	r6, r2
 80181d6:	e7bb      	b.n	8018150 <_printf_i+0x130>
 80181d8:	680b      	ldr	r3, [r1, #0]
 80181da:	6826      	ldr	r6, [r4, #0]
 80181dc:	6960      	ldr	r0, [r4, #20]
 80181de:	1d1d      	adds	r5, r3, #4
 80181e0:	600d      	str	r5, [r1, #0]
 80181e2:	0635      	lsls	r5, r6, #24
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	d501      	bpl.n	80181ec <_printf_i+0x1cc>
 80181e8:	6018      	str	r0, [r3, #0]
 80181ea:	e002      	b.n	80181f2 <_printf_i+0x1d2>
 80181ec:	0671      	lsls	r1, r6, #25
 80181ee:	d5fb      	bpl.n	80181e8 <_printf_i+0x1c8>
 80181f0:	8018      	strh	r0, [r3, #0]
 80181f2:	2300      	movs	r3, #0
 80181f4:	6123      	str	r3, [r4, #16]
 80181f6:	4616      	mov	r6, r2
 80181f8:	e7ba      	b.n	8018170 <_printf_i+0x150>
 80181fa:	680b      	ldr	r3, [r1, #0]
 80181fc:	1d1a      	adds	r2, r3, #4
 80181fe:	600a      	str	r2, [r1, #0]
 8018200:	681e      	ldr	r6, [r3, #0]
 8018202:	6862      	ldr	r2, [r4, #4]
 8018204:	2100      	movs	r1, #0
 8018206:	4630      	mov	r0, r6
 8018208:	f7e8 f882 	bl	8000310 <memchr>
 801820c:	b108      	cbz	r0, 8018212 <_printf_i+0x1f2>
 801820e:	1b80      	subs	r0, r0, r6
 8018210:	6060      	str	r0, [r4, #4]
 8018212:	6863      	ldr	r3, [r4, #4]
 8018214:	6123      	str	r3, [r4, #16]
 8018216:	2300      	movs	r3, #0
 8018218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801821c:	e7a8      	b.n	8018170 <_printf_i+0x150>
 801821e:	6923      	ldr	r3, [r4, #16]
 8018220:	4632      	mov	r2, r6
 8018222:	4649      	mov	r1, r9
 8018224:	4640      	mov	r0, r8
 8018226:	47d0      	blx	sl
 8018228:	3001      	adds	r0, #1
 801822a:	d0ab      	beq.n	8018184 <_printf_i+0x164>
 801822c:	6823      	ldr	r3, [r4, #0]
 801822e:	079b      	lsls	r3, r3, #30
 8018230:	d413      	bmi.n	801825a <_printf_i+0x23a>
 8018232:	68e0      	ldr	r0, [r4, #12]
 8018234:	9b03      	ldr	r3, [sp, #12]
 8018236:	4298      	cmp	r0, r3
 8018238:	bfb8      	it	lt
 801823a:	4618      	movlt	r0, r3
 801823c:	e7a4      	b.n	8018188 <_printf_i+0x168>
 801823e:	2301      	movs	r3, #1
 8018240:	4632      	mov	r2, r6
 8018242:	4649      	mov	r1, r9
 8018244:	4640      	mov	r0, r8
 8018246:	47d0      	blx	sl
 8018248:	3001      	adds	r0, #1
 801824a:	d09b      	beq.n	8018184 <_printf_i+0x164>
 801824c:	3501      	adds	r5, #1
 801824e:	68e3      	ldr	r3, [r4, #12]
 8018250:	9903      	ldr	r1, [sp, #12]
 8018252:	1a5b      	subs	r3, r3, r1
 8018254:	42ab      	cmp	r3, r5
 8018256:	dcf2      	bgt.n	801823e <_printf_i+0x21e>
 8018258:	e7eb      	b.n	8018232 <_printf_i+0x212>
 801825a:	2500      	movs	r5, #0
 801825c:	f104 0619 	add.w	r6, r4, #25
 8018260:	e7f5      	b.n	801824e <_printf_i+0x22e>
 8018262:	bf00      	nop
 8018264:	0801c9b3 	.word	0x0801c9b3
 8018268:	0801c9c4 	.word	0x0801c9c4

0801826c <_read_r>:
 801826c:	b538      	push	{r3, r4, r5, lr}
 801826e:	4d07      	ldr	r5, [pc, #28]	; (801828c <_read_r+0x20>)
 8018270:	4604      	mov	r4, r0
 8018272:	4608      	mov	r0, r1
 8018274:	4611      	mov	r1, r2
 8018276:	2200      	movs	r2, #0
 8018278:	602a      	str	r2, [r5, #0]
 801827a:	461a      	mov	r2, r3
 801827c:	f7e9 fbec 	bl	8001a58 <_read>
 8018280:	1c43      	adds	r3, r0, #1
 8018282:	d102      	bne.n	801828a <_read_r+0x1e>
 8018284:	682b      	ldr	r3, [r5, #0]
 8018286:	b103      	cbz	r3, 801828a <_read_r+0x1e>
 8018288:	6023      	str	r3, [r4, #0]
 801828a:	bd38      	pop	{r3, r4, r5, pc}
 801828c:	24007870 	.word	0x24007870

08018290 <__swbuf_r>:
 8018290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018292:	460e      	mov	r6, r1
 8018294:	4614      	mov	r4, r2
 8018296:	4605      	mov	r5, r0
 8018298:	b118      	cbz	r0, 80182a2 <__swbuf_r+0x12>
 801829a:	6983      	ldr	r3, [r0, #24]
 801829c:	b90b      	cbnz	r3, 80182a2 <__swbuf_r+0x12>
 801829e:	f7ff f913 	bl	80174c8 <__sinit>
 80182a2:	4b21      	ldr	r3, [pc, #132]	; (8018328 <__swbuf_r+0x98>)
 80182a4:	429c      	cmp	r4, r3
 80182a6:	d12b      	bne.n	8018300 <__swbuf_r+0x70>
 80182a8:	686c      	ldr	r4, [r5, #4]
 80182aa:	69a3      	ldr	r3, [r4, #24]
 80182ac:	60a3      	str	r3, [r4, #8]
 80182ae:	89a3      	ldrh	r3, [r4, #12]
 80182b0:	071a      	lsls	r2, r3, #28
 80182b2:	d52f      	bpl.n	8018314 <__swbuf_r+0x84>
 80182b4:	6923      	ldr	r3, [r4, #16]
 80182b6:	b36b      	cbz	r3, 8018314 <__swbuf_r+0x84>
 80182b8:	6923      	ldr	r3, [r4, #16]
 80182ba:	6820      	ldr	r0, [r4, #0]
 80182bc:	1ac0      	subs	r0, r0, r3
 80182be:	6963      	ldr	r3, [r4, #20]
 80182c0:	b2f6      	uxtb	r6, r6
 80182c2:	4283      	cmp	r3, r0
 80182c4:	4637      	mov	r7, r6
 80182c6:	dc04      	bgt.n	80182d2 <__swbuf_r+0x42>
 80182c8:	4621      	mov	r1, r4
 80182ca:	4628      	mov	r0, r5
 80182cc:	f7ff fc1c 	bl	8017b08 <_fflush_r>
 80182d0:	bb30      	cbnz	r0, 8018320 <__swbuf_r+0x90>
 80182d2:	68a3      	ldr	r3, [r4, #8]
 80182d4:	3b01      	subs	r3, #1
 80182d6:	60a3      	str	r3, [r4, #8]
 80182d8:	6823      	ldr	r3, [r4, #0]
 80182da:	1c5a      	adds	r2, r3, #1
 80182dc:	6022      	str	r2, [r4, #0]
 80182de:	701e      	strb	r6, [r3, #0]
 80182e0:	6963      	ldr	r3, [r4, #20]
 80182e2:	3001      	adds	r0, #1
 80182e4:	4283      	cmp	r3, r0
 80182e6:	d004      	beq.n	80182f2 <__swbuf_r+0x62>
 80182e8:	89a3      	ldrh	r3, [r4, #12]
 80182ea:	07db      	lsls	r3, r3, #31
 80182ec:	d506      	bpl.n	80182fc <__swbuf_r+0x6c>
 80182ee:	2e0a      	cmp	r6, #10
 80182f0:	d104      	bne.n	80182fc <__swbuf_r+0x6c>
 80182f2:	4621      	mov	r1, r4
 80182f4:	4628      	mov	r0, r5
 80182f6:	f7ff fc07 	bl	8017b08 <_fflush_r>
 80182fa:	b988      	cbnz	r0, 8018320 <__swbuf_r+0x90>
 80182fc:	4638      	mov	r0, r7
 80182fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018300:	4b0a      	ldr	r3, [pc, #40]	; (801832c <__swbuf_r+0x9c>)
 8018302:	429c      	cmp	r4, r3
 8018304:	d101      	bne.n	801830a <__swbuf_r+0x7a>
 8018306:	68ac      	ldr	r4, [r5, #8]
 8018308:	e7cf      	b.n	80182aa <__swbuf_r+0x1a>
 801830a:	4b09      	ldr	r3, [pc, #36]	; (8018330 <__swbuf_r+0xa0>)
 801830c:	429c      	cmp	r4, r3
 801830e:	bf08      	it	eq
 8018310:	68ec      	ldreq	r4, [r5, #12]
 8018312:	e7ca      	b.n	80182aa <__swbuf_r+0x1a>
 8018314:	4621      	mov	r1, r4
 8018316:	4628      	mov	r0, r5
 8018318:	f000 f80c 	bl	8018334 <__swsetup_r>
 801831c:	2800      	cmp	r0, #0
 801831e:	d0cb      	beq.n	80182b8 <__swbuf_r+0x28>
 8018320:	f04f 37ff 	mov.w	r7, #4294967295
 8018324:	e7ea      	b.n	80182fc <__swbuf_r+0x6c>
 8018326:	bf00      	nop
 8018328:	0801c8ac 	.word	0x0801c8ac
 801832c:	0801c8cc 	.word	0x0801c8cc
 8018330:	0801c88c 	.word	0x0801c88c

08018334 <__swsetup_r>:
 8018334:	4b32      	ldr	r3, [pc, #200]	; (8018400 <__swsetup_r+0xcc>)
 8018336:	b570      	push	{r4, r5, r6, lr}
 8018338:	681d      	ldr	r5, [r3, #0]
 801833a:	4606      	mov	r6, r0
 801833c:	460c      	mov	r4, r1
 801833e:	b125      	cbz	r5, 801834a <__swsetup_r+0x16>
 8018340:	69ab      	ldr	r3, [r5, #24]
 8018342:	b913      	cbnz	r3, 801834a <__swsetup_r+0x16>
 8018344:	4628      	mov	r0, r5
 8018346:	f7ff f8bf 	bl	80174c8 <__sinit>
 801834a:	4b2e      	ldr	r3, [pc, #184]	; (8018404 <__swsetup_r+0xd0>)
 801834c:	429c      	cmp	r4, r3
 801834e:	d10f      	bne.n	8018370 <__swsetup_r+0x3c>
 8018350:	686c      	ldr	r4, [r5, #4]
 8018352:	89a3      	ldrh	r3, [r4, #12]
 8018354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018358:	0719      	lsls	r1, r3, #28
 801835a:	d42c      	bmi.n	80183b6 <__swsetup_r+0x82>
 801835c:	06dd      	lsls	r5, r3, #27
 801835e:	d411      	bmi.n	8018384 <__swsetup_r+0x50>
 8018360:	2309      	movs	r3, #9
 8018362:	6033      	str	r3, [r6, #0]
 8018364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018368:	81a3      	strh	r3, [r4, #12]
 801836a:	f04f 30ff 	mov.w	r0, #4294967295
 801836e:	e03e      	b.n	80183ee <__swsetup_r+0xba>
 8018370:	4b25      	ldr	r3, [pc, #148]	; (8018408 <__swsetup_r+0xd4>)
 8018372:	429c      	cmp	r4, r3
 8018374:	d101      	bne.n	801837a <__swsetup_r+0x46>
 8018376:	68ac      	ldr	r4, [r5, #8]
 8018378:	e7eb      	b.n	8018352 <__swsetup_r+0x1e>
 801837a:	4b24      	ldr	r3, [pc, #144]	; (801840c <__swsetup_r+0xd8>)
 801837c:	429c      	cmp	r4, r3
 801837e:	bf08      	it	eq
 8018380:	68ec      	ldreq	r4, [r5, #12]
 8018382:	e7e6      	b.n	8018352 <__swsetup_r+0x1e>
 8018384:	0758      	lsls	r0, r3, #29
 8018386:	d512      	bpl.n	80183ae <__swsetup_r+0x7a>
 8018388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801838a:	b141      	cbz	r1, 801839e <__swsetup_r+0x6a>
 801838c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018390:	4299      	cmp	r1, r3
 8018392:	d002      	beq.n	801839a <__swsetup_r+0x66>
 8018394:	4630      	mov	r0, r6
 8018396:	f7ff fc2b 	bl	8017bf0 <_free_r>
 801839a:	2300      	movs	r3, #0
 801839c:	6363      	str	r3, [r4, #52]	; 0x34
 801839e:	89a3      	ldrh	r3, [r4, #12]
 80183a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80183a4:	81a3      	strh	r3, [r4, #12]
 80183a6:	2300      	movs	r3, #0
 80183a8:	6063      	str	r3, [r4, #4]
 80183aa:	6923      	ldr	r3, [r4, #16]
 80183ac:	6023      	str	r3, [r4, #0]
 80183ae:	89a3      	ldrh	r3, [r4, #12]
 80183b0:	f043 0308 	orr.w	r3, r3, #8
 80183b4:	81a3      	strh	r3, [r4, #12]
 80183b6:	6923      	ldr	r3, [r4, #16]
 80183b8:	b94b      	cbnz	r3, 80183ce <__swsetup_r+0x9a>
 80183ba:	89a3      	ldrh	r3, [r4, #12]
 80183bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80183c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80183c4:	d003      	beq.n	80183ce <__swsetup_r+0x9a>
 80183c6:	4621      	mov	r1, r4
 80183c8:	4630      	mov	r0, r6
 80183ca:	f000 f84d 	bl	8018468 <__smakebuf_r>
 80183ce:	89a0      	ldrh	r0, [r4, #12]
 80183d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80183d4:	f010 0301 	ands.w	r3, r0, #1
 80183d8:	d00a      	beq.n	80183f0 <__swsetup_r+0xbc>
 80183da:	2300      	movs	r3, #0
 80183dc:	60a3      	str	r3, [r4, #8]
 80183de:	6963      	ldr	r3, [r4, #20]
 80183e0:	425b      	negs	r3, r3
 80183e2:	61a3      	str	r3, [r4, #24]
 80183e4:	6923      	ldr	r3, [r4, #16]
 80183e6:	b943      	cbnz	r3, 80183fa <__swsetup_r+0xc6>
 80183e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80183ec:	d1ba      	bne.n	8018364 <__swsetup_r+0x30>
 80183ee:	bd70      	pop	{r4, r5, r6, pc}
 80183f0:	0781      	lsls	r1, r0, #30
 80183f2:	bf58      	it	pl
 80183f4:	6963      	ldrpl	r3, [r4, #20]
 80183f6:	60a3      	str	r3, [r4, #8]
 80183f8:	e7f4      	b.n	80183e4 <__swsetup_r+0xb0>
 80183fa:	2000      	movs	r0, #0
 80183fc:	e7f7      	b.n	80183ee <__swsetup_r+0xba>
 80183fe:	bf00      	nop
 8018400:	24000044 	.word	0x24000044
 8018404:	0801c8ac 	.word	0x0801c8ac
 8018408:	0801c8cc 	.word	0x0801c8cc
 801840c:	0801c88c 	.word	0x0801c88c

08018410 <abort>:
 8018410:	b508      	push	{r3, lr}
 8018412:	2006      	movs	r0, #6
 8018414:	f000 f890 	bl	8018538 <raise>
 8018418:	2001      	movs	r0, #1
 801841a:	f7e9 fb13 	bl	8001a44 <_exit>

0801841e <__swhatbuf_r>:
 801841e:	b570      	push	{r4, r5, r6, lr}
 8018420:	460e      	mov	r6, r1
 8018422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018426:	2900      	cmp	r1, #0
 8018428:	b096      	sub	sp, #88	; 0x58
 801842a:	4614      	mov	r4, r2
 801842c:	461d      	mov	r5, r3
 801842e:	da07      	bge.n	8018440 <__swhatbuf_r+0x22>
 8018430:	2300      	movs	r3, #0
 8018432:	602b      	str	r3, [r5, #0]
 8018434:	89b3      	ldrh	r3, [r6, #12]
 8018436:	061a      	lsls	r2, r3, #24
 8018438:	d410      	bmi.n	801845c <__swhatbuf_r+0x3e>
 801843a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801843e:	e00e      	b.n	801845e <__swhatbuf_r+0x40>
 8018440:	466a      	mov	r2, sp
 8018442:	f000 f895 	bl	8018570 <_fstat_r>
 8018446:	2800      	cmp	r0, #0
 8018448:	dbf2      	blt.n	8018430 <__swhatbuf_r+0x12>
 801844a:	9a01      	ldr	r2, [sp, #4]
 801844c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018450:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018454:	425a      	negs	r2, r3
 8018456:	415a      	adcs	r2, r3
 8018458:	602a      	str	r2, [r5, #0]
 801845a:	e7ee      	b.n	801843a <__swhatbuf_r+0x1c>
 801845c:	2340      	movs	r3, #64	; 0x40
 801845e:	2000      	movs	r0, #0
 8018460:	6023      	str	r3, [r4, #0]
 8018462:	b016      	add	sp, #88	; 0x58
 8018464:	bd70      	pop	{r4, r5, r6, pc}
	...

08018468 <__smakebuf_r>:
 8018468:	898b      	ldrh	r3, [r1, #12]
 801846a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801846c:	079d      	lsls	r5, r3, #30
 801846e:	4606      	mov	r6, r0
 8018470:	460c      	mov	r4, r1
 8018472:	d507      	bpl.n	8018484 <__smakebuf_r+0x1c>
 8018474:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018478:	6023      	str	r3, [r4, #0]
 801847a:	6123      	str	r3, [r4, #16]
 801847c:	2301      	movs	r3, #1
 801847e:	6163      	str	r3, [r4, #20]
 8018480:	b002      	add	sp, #8
 8018482:	bd70      	pop	{r4, r5, r6, pc}
 8018484:	ab01      	add	r3, sp, #4
 8018486:	466a      	mov	r2, sp
 8018488:	f7ff ffc9 	bl	801841e <__swhatbuf_r>
 801848c:	9900      	ldr	r1, [sp, #0]
 801848e:	4605      	mov	r5, r0
 8018490:	4630      	mov	r0, r6
 8018492:	f7ff f903 	bl	801769c <_malloc_r>
 8018496:	b948      	cbnz	r0, 80184ac <__smakebuf_r+0x44>
 8018498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801849c:	059a      	lsls	r2, r3, #22
 801849e:	d4ef      	bmi.n	8018480 <__smakebuf_r+0x18>
 80184a0:	f023 0303 	bic.w	r3, r3, #3
 80184a4:	f043 0302 	orr.w	r3, r3, #2
 80184a8:	81a3      	strh	r3, [r4, #12]
 80184aa:	e7e3      	b.n	8018474 <__smakebuf_r+0xc>
 80184ac:	4b0d      	ldr	r3, [pc, #52]	; (80184e4 <__smakebuf_r+0x7c>)
 80184ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80184b0:	89a3      	ldrh	r3, [r4, #12]
 80184b2:	6020      	str	r0, [r4, #0]
 80184b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80184b8:	81a3      	strh	r3, [r4, #12]
 80184ba:	9b00      	ldr	r3, [sp, #0]
 80184bc:	6163      	str	r3, [r4, #20]
 80184be:	9b01      	ldr	r3, [sp, #4]
 80184c0:	6120      	str	r0, [r4, #16]
 80184c2:	b15b      	cbz	r3, 80184dc <__smakebuf_r+0x74>
 80184c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80184c8:	4630      	mov	r0, r6
 80184ca:	f000 f863 	bl	8018594 <_isatty_r>
 80184ce:	b128      	cbz	r0, 80184dc <__smakebuf_r+0x74>
 80184d0:	89a3      	ldrh	r3, [r4, #12]
 80184d2:	f023 0303 	bic.w	r3, r3, #3
 80184d6:	f043 0301 	orr.w	r3, r3, #1
 80184da:	81a3      	strh	r3, [r4, #12]
 80184dc:	89a0      	ldrh	r0, [r4, #12]
 80184de:	4305      	orrs	r5, r0
 80184e0:	81a5      	strh	r5, [r4, #12]
 80184e2:	e7cd      	b.n	8018480 <__smakebuf_r+0x18>
 80184e4:	08017461 	.word	0x08017461

080184e8 <_raise_r>:
 80184e8:	291f      	cmp	r1, #31
 80184ea:	b538      	push	{r3, r4, r5, lr}
 80184ec:	4604      	mov	r4, r0
 80184ee:	460d      	mov	r5, r1
 80184f0:	d904      	bls.n	80184fc <_raise_r+0x14>
 80184f2:	2316      	movs	r3, #22
 80184f4:	6003      	str	r3, [r0, #0]
 80184f6:	f04f 30ff 	mov.w	r0, #4294967295
 80184fa:	bd38      	pop	{r3, r4, r5, pc}
 80184fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80184fe:	b112      	cbz	r2, 8018506 <_raise_r+0x1e>
 8018500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018504:	b94b      	cbnz	r3, 801851a <_raise_r+0x32>
 8018506:	4620      	mov	r0, r4
 8018508:	f000 f830 	bl	801856c <_getpid_r>
 801850c:	462a      	mov	r2, r5
 801850e:	4601      	mov	r1, r0
 8018510:	4620      	mov	r0, r4
 8018512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018516:	f000 b817 	b.w	8018548 <_kill_r>
 801851a:	2b01      	cmp	r3, #1
 801851c:	d00a      	beq.n	8018534 <_raise_r+0x4c>
 801851e:	1c59      	adds	r1, r3, #1
 8018520:	d103      	bne.n	801852a <_raise_r+0x42>
 8018522:	2316      	movs	r3, #22
 8018524:	6003      	str	r3, [r0, #0]
 8018526:	2001      	movs	r0, #1
 8018528:	e7e7      	b.n	80184fa <_raise_r+0x12>
 801852a:	2400      	movs	r4, #0
 801852c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018530:	4628      	mov	r0, r5
 8018532:	4798      	blx	r3
 8018534:	2000      	movs	r0, #0
 8018536:	e7e0      	b.n	80184fa <_raise_r+0x12>

08018538 <raise>:
 8018538:	4b02      	ldr	r3, [pc, #8]	; (8018544 <raise+0xc>)
 801853a:	4601      	mov	r1, r0
 801853c:	6818      	ldr	r0, [r3, #0]
 801853e:	f7ff bfd3 	b.w	80184e8 <_raise_r>
 8018542:	bf00      	nop
 8018544:	24000044 	.word	0x24000044

08018548 <_kill_r>:
 8018548:	b538      	push	{r3, r4, r5, lr}
 801854a:	4d07      	ldr	r5, [pc, #28]	; (8018568 <_kill_r+0x20>)
 801854c:	2300      	movs	r3, #0
 801854e:	4604      	mov	r4, r0
 8018550:	4608      	mov	r0, r1
 8018552:	4611      	mov	r1, r2
 8018554:	602b      	str	r3, [r5, #0]
 8018556:	f7e9 fa63 	bl	8001a20 <_kill>
 801855a:	1c43      	adds	r3, r0, #1
 801855c:	d102      	bne.n	8018564 <_kill_r+0x1c>
 801855e:	682b      	ldr	r3, [r5, #0]
 8018560:	b103      	cbz	r3, 8018564 <_kill_r+0x1c>
 8018562:	6023      	str	r3, [r4, #0]
 8018564:	bd38      	pop	{r3, r4, r5, pc}
 8018566:	bf00      	nop
 8018568:	24007870 	.word	0x24007870

0801856c <_getpid_r>:
 801856c:	f7e9 ba50 	b.w	8001a10 <_getpid>

08018570 <_fstat_r>:
 8018570:	b538      	push	{r3, r4, r5, lr}
 8018572:	4d07      	ldr	r5, [pc, #28]	; (8018590 <_fstat_r+0x20>)
 8018574:	2300      	movs	r3, #0
 8018576:	4604      	mov	r4, r0
 8018578:	4608      	mov	r0, r1
 801857a:	4611      	mov	r1, r2
 801857c:	602b      	str	r3, [r5, #0]
 801857e:	f7e9 fab0 	bl	8001ae2 <_fstat>
 8018582:	1c43      	adds	r3, r0, #1
 8018584:	d102      	bne.n	801858c <_fstat_r+0x1c>
 8018586:	682b      	ldr	r3, [r5, #0]
 8018588:	b103      	cbz	r3, 801858c <_fstat_r+0x1c>
 801858a:	6023      	str	r3, [r4, #0]
 801858c:	bd38      	pop	{r3, r4, r5, pc}
 801858e:	bf00      	nop
 8018590:	24007870 	.word	0x24007870

08018594 <_isatty_r>:
 8018594:	b538      	push	{r3, r4, r5, lr}
 8018596:	4d06      	ldr	r5, [pc, #24]	; (80185b0 <_isatty_r+0x1c>)
 8018598:	2300      	movs	r3, #0
 801859a:	4604      	mov	r4, r0
 801859c:	4608      	mov	r0, r1
 801859e:	602b      	str	r3, [r5, #0]
 80185a0:	f7e9 faaf 	bl	8001b02 <_isatty>
 80185a4:	1c43      	adds	r3, r0, #1
 80185a6:	d102      	bne.n	80185ae <_isatty_r+0x1a>
 80185a8:	682b      	ldr	r3, [r5, #0]
 80185aa:	b103      	cbz	r3, 80185ae <_isatty_r+0x1a>
 80185ac:	6023      	str	r3, [r4, #0]
 80185ae:	bd38      	pop	{r3, r4, r5, pc}
 80185b0:	24007870 	.word	0x24007870

080185b4 <_init>:
 80185b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185b6:	bf00      	nop
 80185b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185ba:	bc08      	pop	{r3}
 80185bc:	469e      	mov	lr, r3
 80185be:	4770      	bx	lr

080185c0 <_fini>:
 80185c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185c2:	bf00      	nop
 80185c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185c6:	bc08      	pop	{r3}
 80185c8:	469e      	mov	lr, r3
 80185ca:	4770      	bx	lr
